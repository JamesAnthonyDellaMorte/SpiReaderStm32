
spi_reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b274  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040c0  0801b424  0801b424  0002b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f4e4  0801f4e4  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801f4e4  0801f4e4  0002f4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f4ec  0801f4ec  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f4ec  0801f4ec  0002f4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f4f0  0801f4f0  0002f4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801f4f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b928  200001f4  0801f6e8  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bb1c  0801f6e8  0003bb1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f963  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008710  00000000  00000000  0007fb87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002ab8  00000000  00000000  00088298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002948  00000000  00000000  0008ad50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014abb  00000000  00000000  0008d698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032951  00000000  00000000  000a2153  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106806  00000000  00000000  000d4aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001db2aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba54  00000000  00000000  001db328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801b40c 	.word	0x0801b40c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	0801b40c 	.word	0x0801b40c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000594:	f000 fe10 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f83a 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f932 	bl	8000804 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005a0:	f000 f8d8 	bl	8000754 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a4:	f000 f900 	bl	80007a8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005a8:	f000 f8a2 	bl	80006f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Welcome to the SPI Reader\n");
 80005ac:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0x5c>)
 80005ae:	f019 ff7d 	bl	801a4ac <puts>
  // HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 0xFFFF);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b2:	f005 fcb9 	bl	8005f28 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle =
      osMessageQueueNew(64, sizeof(uint16_t), &myQueue01_attributes);
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <main+0x60>)
 80005b8:	2102      	movs	r1, #2
 80005ba:	2040      	movs	r0, #64	; 0x40
 80005bc:	f006 f8f4 	bl	80067a8 <osMessageQueueNew>
 80005c0:	4602      	mov	r2, r0
  myQueue01Handle =
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <main+0x64>)
 80005c4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle =
      osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c6:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <main+0x68>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <main+0x6c>)
 80005cc:	f005 fd3e 	bl	800604c <osThreadNew>
 80005d0:	4602      	mov	r2, r0
  defaultTaskHandle =
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <main+0x70>)
 80005d4:	601a      	str	r2, [r3, #0]

  /* creation of myTask02Handle */
  myTask02HandleHandle =
      osThreadNew(IP_Adress_LED, NULL, &myTask02Handle_attributes);
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <main+0x74>)
 80005d8:	2100      	movs	r1, #0
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <main+0x78>)
 80005dc:	f005 fd36 	bl	800604c <osThreadNew>
 80005e0:	4602      	mov	r2, r0
  myTask02HandleHandle =
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <main+0x7c>)
 80005e4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e6:	f005 fcd3 	bl	8005f90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
 80005ea:	e7fe      	b.n	80005ea <main+0x5a>
 80005ec:	0801b44c 	.word	0x0801b44c
 80005f0:	0801f190 	.word	0x0801f190
 80005f4:	200051b8 	.word	0x200051b8
 80005f8:	0801f148 	.word	0x0801f148
 80005fc:	08000995 	.word	0x08000995
 8000600:	20004d0c 	.word	0x20004d0c
 8000604:	0801f16c 	.word	0x0801f16c
 8000608:	08000a99 	.word	0x08000a99
 800060c:	2000515c 	.word	0x2000515c

08000610 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f019 fec7 	bl	801a3b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <SystemClock_Config+0xd8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <SystemClock_Config+0xd8>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xd8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemClock_Config+0xdc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a24      	ldr	r2, [pc, #144]	; (80006ec <SystemClock_Config+0xdc>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xdc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000684:	23a8      	movs	r3, #168	; 0xa8
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fbbb 	bl	8002e10 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
    Error_Handler();
 80006a0:	f000 faaa 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fe14 	bl	80032f0 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
    Error_Handler();
 80006ce:	f000 fa93 	bl	8000bf8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_2);
 80006d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80006d6:	2100      	movs	r1, #0
 80006d8:	2001      	movs	r0, #1
 80006da:	f002 feef 	bl	80034bc <HAL_RCC_MCOConfig>
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_SPI1_Init+0x5c>)
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <MX_SPI1_Init+0x60>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_SPI1_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_SPI1_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_SPI1_Init+0x5c>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_SPI1_Init+0x5c>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_SPI1_Init+0x5c>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_SPI1_Init+0x5c>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_SPI1_Init+0x5c>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_SPI1_Init+0x5c>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_SPI1_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_SPI1_Init+0x5c>)
 8000732:	220a      	movs	r2, #10
 8000734:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_SPI1_Init+0x5c>)
 8000738:	f003 f866 	bl	8003808 <HAL_SPI_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_SPI1_Init+0x56>
    Error_Handler();
 8000742:	f000 fa59 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20005160 	.word	0x20005160
 8000750:	40013000 	.word	0x40013000

08000754 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART3_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 800078c:	f003 ffba 	bl	8004704 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8000796:	f000 fa2f 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20004d10 	.word	0x20004d10
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	2202      	movs	r2, #2
 80007be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	f002 f9f3 	bl	8002bd6 <HAL_PCD_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 80007f6:	f000 f9ff 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20004d54 	.word	0x20004d54

08000804 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b58      	ldr	r3, [pc, #352]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a57      	ldr	r2, [pc, #348]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b55      	ldr	r3, [pc, #340]	; (8000980 <MX_GPIO_Init+0x17c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b51      	ldr	r3, [pc, #324]	; (8000980 <MX_GPIO_Init+0x17c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a50      	ldr	r2, [pc, #320]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b4e      	ldr	r3, [pc, #312]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b4a      	ldr	r3, [pc, #296]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a49      	ldr	r2, [pc, #292]	; (8000980 <MX_GPIO_Init+0x17c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b47      	ldr	r3, [pc, #284]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b43      	ldr	r3, [pc, #268]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a42      	ldr	r2, [pc, #264]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b40      	ldr	r3, [pc, #256]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a3b      	ldr	r2, [pc, #236]	; (8000980 <MX_GPIO_Init+0x17c>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b39      	ldr	r3, [pc, #228]	; (8000980 <MX_GPIO_Init+0x17c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b35      	ldr	r3, [pc, #212]	; (8000980 <MX_GPIO_Init+0x17c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a34      	ldr	r2, [pc, #208]	; (8000980 <MX_GPIO_Init+0x17c>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b32      	ldr	r3, [pc, #200]	; (8000980 <MX_GPIO_Init+0x17c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c8:	482e      	ldr	r0, [pc, #184]	; (8000984 <MX_GPIO_Init+0x180>)
 80008ca:	f002 f92d 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80008ce:	2200      	movs	r2, #0
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	482d      	ldr	r0, [pc, #180]	; (8000988 <MX_GPIO_Init+0x184>)
 80008d4:	f002 f928 	bl	8002b28 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <MX_GPIO_Init+0x188>)
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4828      	ldr	r0, [pc, #160]	; (8000990 <MX_GPIO_Init+0x18c>)
 80008ee:	f001 ff71 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80008f2:	f244 0381 	movw	r3, #16513	; 0x4081
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	481e      	ldr	r0, [pc, #120]	; (8000984 <MX_GPIO_Init+0x180>)
 800090c:	f001 ff62 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000910:	2340      	movs	r3, #64	; 0x40
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4818      	ldr	r0, [pc, #96]	; (8000988 <MX_GPIO_Init+0x184>)
 8000928:	f001 ff54 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4812      	ldr	r0, [pc, #72]	; (8000988 <MX_GPIO_Init+0x184>)
 8000940:	f001 ff48 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <MX_GPIO_Init+0x18c>)
 8000962:	f001 ff37 	bl	80027d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2105      	movs	r1, #5
 800096a:	2028      	movs	r0, #40	; 0x28
 800096c:	f000 fd40 	bl	80013f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000970:	2028      	movs	r0, #40	; 0x28
 8000972:	f000 fd59 	bl	8001428 <HAL_NVIC_EnableIRQ>
}
 8000976:	bf00      	nop
 8000978:	3730      	adds	r7, #48	; 0x30
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40020400 	.word	0x40020400
 8000988:	40021800 	.word	0x40021800
 800098c:	10110000 	.word	0x10110000
 8000990:	40020800 	.word	0x40020800

08000994 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af02      	add	r7, sp, #8
 800099a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800099c:	f004 fe14 	bl	80055c8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  int local_IP;
  do {

    local_IP = gnetif.ip_addr.addr;
 80009a0:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <StartDefaultTask+0xec>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_Delay(100);
 80009a6:	2064      	movs	r0, #100	; 0x64
 80009a8:	f000 fc48 	bl	800123c <HAL_Delay>
  } while (local_IP == 0);
 80009ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0f6      	beq.n	80009a0 <StartDefaultTask+0xc>
  printf("IP %d.%d.%d.%d\n", (local_IP & 0xff), ((local_IP >> 8) & 0xff),
 80009b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b4:	b2d9      	uxtb	r1, r3
 80009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b8:	121b      	asrs	r3, r3, #8
 80009ba:	b2da      	uxtb	r2, r3
         ((local_IP >> 16) & 0xff), (local_IP >> 24));
 80009bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009be:	141b      	asrs	r3, r3, #16
  printf("IP %d.%d.%d.%d\n", (local_IP & 0xff), ((local_IP >> 8) & 0xff),
 80009c0:	b2d8      	uxtb	r0, r3
 80009c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c4:	161b      	asrs	r3, r3, #24
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	4603      	mov	r3, r0
 80009ca:	482e      	ldr	r0, [pc, #184]	; (8000a84 <StartDefaultTask+0xf0>)
 80009cc:	f019 fcfa 	bl	801a3c4 <iprintf>

  struct sockaddr_in address;
  int opt = 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  int addrlen = sizeof(address);
 80009d4:	2310      	movs	r3, #16
 80009d6:	617b      	str	r3, [r7, #20]
  uint8_t data[10];

  // Creating socket file descriptor
  server_fd = socket(AF_INET, SOCK_STREAM, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2101      	movs	r1, #1
 80009dc:	2002      	movs	r0, #2
 80009de:	f00b fdb7 	bl	800c550 <lwip_socket>
 80009e2:	4602      	mov	r2, r0
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <StartDefaultTask+0xf4>)
 80009e6:	601a      	str	r2, [r3, #0]

  // Forcefully attaching socket to the port 8080
  setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt,
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <StartDefaultTask+0xf4>)
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	f107 0218 	add.w	r2, r7, #24
 80009f0:	2304      	movs	r3, #4
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	4613      	mov	r3, r2
 80009f6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80009fa:	f640 71ff 	movw	r1, #4095	; 0xfff
 80009fe:	f00b ffa7 	bl	800c950 <lwip_setsockopt>
             sizeof(opt));
  address.sin_family = AF_INET;
 8000a02:	2302      	movs	r3, #2
 8000a04:	777b      	strb	r3, [r7, #29]
  address.sin_addr.s_addr = htonl(INADDR_ANY);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f00c fb3f 	bl	800d08a <lwip_htonl>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	623b      	str	r3, [r7, #32]
  address.sin_port = htons(PORT);
 8000a10:	f244 206b 	movw	r0, #17003	; 0x426b
 8000a14:	f00c fb24 	bl	800d060 <lwip_htons>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	83fb      	strh	r3, [r7, #30]
  bind(server_fd, (struct sockaddr *)&address, sizeof(address));
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <StartDefaultTask+0xf4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f107 011c 	add.w	r1, r7, #28
 8000a24:	2210      	movs	r2, #16
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00b fbc0 	bl	800c1ac <lwip_bind>
  listen(server_fd, 3);
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <StartDefaultTask+0xf4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2103      	movs	r1, #3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00b fc28 	bl	800c288 <lwip_listen>
  new_socket =
      accept(server_fd, (struct sockaddr *)&address, (__socklen_t *)&addrlen);
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <StartDefaultTask+0xf4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f107 0214 	add.w	r2, r7, #20
 8000a40:	f107 011c 	add.w	r1, r7, #28
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00b fa93 	bl	800bf70 <lwip_accept>
 8000a4a:	4602      	mov	r2, r0
  new_socket =
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <StartDefaultTask+0xf8>)
 8000a4e:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for (;;) {
    // Forcefully attaching socket to the port 8080

    if (HAL_SPI_Receive(&hspi1, (uint8_t *)data, 10, 0xFFFF) == HAL_OK) {
 8000a50:	f107 0108 	add.w	r1, r7, #8
 8000a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a58:	220a      	movs	r2, #10
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <StartDefaultTask+0xfc>)
 8000a5c:	f002 ff38 	bl	80038d0 <HAL_SPI_Receive>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f4      	bne.n	8000a50 <StartDefaultTask+0xbc>
      send(new_socket, data, 10, 0);
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <StartDefaultTask+0xf8>)
 8000a68:	6818      	ldr	r0, [r3, #0]
 8000a6a:	f107 0108 	add.w	r1, r7, #8
 8000a6e:	2300      	movs	r3, #0
 8000a70:	220a      	movs	r2, #10
 8000a72:	f00b fc5d 	bl	800c330 <lwip_send>
      printf("Message sent\n");
 8000a76:	4807      	ldr	r0, [pc, #28]	; (8000a94 <StartDefaultTask+0x100>)
 8000a78:	f019 fd18 	bl	801a4ac <puts>
    if (HAL_SPI_Receive(&hspi1, (uint8_t *)data, 10, 0xFFFF) == HAL_OK) {
 8000a7c:	e7e8      	b.n	8000a50 <StartDefaultTask+0xbc>
 8000a7e:	bf00      	nop
 8000a80:	2000522c 	.word	0x2000522c
 8000a84:	0801b468 	.word	0x0801b468
 8000a88:	20004d50 	.word	0x20004d50
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20005160 	.word	0x20005160
 8000a94:	0801b478 	.word	0x0801b478

08000a98 <IP_Adress_LED>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IP_Adress_LED */
void IP_Adress_LED(void *argument) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IP_Adress_LED */
  /* Infinite loop */
  do {
    HAL_Delay(100);
 8000aa0:	2064      	movs	r0, #100	; 0x64
 8000aa2:	f000 fbcb 	bl	800123c <HAL_Delay>
  } while (gnetif.ip_addr.addr == 0);
 8000aa6:	4b47      	ldr	r3, [pc, #284]	; (8000bc4 <IP_Adress_LED+0x12c>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f8      	beq.n	8000aa0 <IP_Adress_LED+0x8>

  uint8_t last_word = gnetif.ip_addr.addr >> 24;
 8000aae:	4b45      	ldr	r3, [pc, #276]	; (8000bc4 <IP_Adress_LED+0x12c>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	0e1b      	lsrs	r3, r3, #24
 8000ab4:	72fb      	strb	r3, [r7, #11]
  uint8_t third_digit = last_word % 10;
 8000ab6:	7afa      	ldrb	r2, [r7, #11]
 8000ab8:	4b43      	ldr	r3, [pc, #268]	; (8000bc8 <IP_Adress_LED+0x130>)
 8000aba:	fba3 1302 	umull	r1, r3, r3, r2
 8000abe:	08d9      	lsrs	r1, r3, #3
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	72bb      	strb	r3, [r7, #10]
  last_word /= 10;
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	4a3e      	ldr	r2, [pc, #248]	; (8000bc8 <IP_Adress_LED+0x130>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	72fb      	strb	r3, [r7, #11]
  uint8_t second_digit = last_word % 10;
 8000ad8:	7afa      	ldrb	r2, [r7, #11]
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <IP_Adress_LED+0x130>)
 8000adc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ae0:	08d9      	lsrs	r1, r3, #3
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	727b      	strb	r3, [r7, #9]
  last_word /= 10;
 8000aee:	7afb      	ldrb	r3, [r7, #11]
 8000af0:	4a35      	ldr	r2, [pc, #212]	; (8000bc8 <IP_Adress_LED+0x130>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	08db      	lsrs	r3, r3, #3
 8000af8:	72fb      	strb	r3, [r7, #11]
  uint8_t first_digit = last_word % 10;
 8000afa:	7afa      	ldrb	r2, [r7, #11]
 8000afc:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <IP_Adress_LED+0x130>)
 8000afe:	fba3 1302 	umull	r1, r3, r3, r2
 8000b02:	08d9      	lsrs	r1, r3, #3
 8000b04:	460b      	mov	r3, r1
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	723b      	strb	r3, [r7, #8]
  while (new_socket == -1) {
 8000b10:	e04f      	b.n	8000bb2 <IP_Adress_LED+0x11a>

    for (int i = 0; i < first_digit; i++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	e014      	b.n	8000b42 <IP_Adress_LED+0xaa>
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1c:	482b      	ldr	r0, [pc, #172]	; (8000bcc <IP_Adress_LED+0x134>)
 8000b1e:	f002 f81c 	bl	8002b5a <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8000b22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b26:	f000 fb89 	bl	800123c <HAL_Delay>
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b2e:	4827      	ldr	r0, [pc, #156]	; (8000bcc <IP_Adress_LED+0x134>)
 8000b30:	f002 f813 	bl	8002b5a <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8000b34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b38:	f000 fb80 	bl	800123c <HAL_Delay>
    for (int i = 0; i < first_digit; i++) {
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	7a3b      	ldrb	r3, [r7, #8]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbe6      	blt.n	8000b18 <IP_Adress_LED+0x80>
    }
    for (int i = 0; i < second_digit; i++) {
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	e012      	b.n	8000b76 <IP_Adress_LED+0xde>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	481e      	ldr	r0, [pc, #120]	; (8000bcc <IP_Adress_LED+0x134>)
 8000b54:	f002 f801 	bl	8002b5a <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f000 fb6e 	bl	800123c <HAL_Delay>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <IP_Adress_LED+0x134>)
 8000b64:	f001 fff9 	bl	8002b5a <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8000b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6c:	f000 fb66 	bl	800123c <HAL_Delay>
    for (int i = 0; i < second_digit; i++) {
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	3301      	adds	r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	7a7b      	ldrb	r3, [r7, #9]
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	dbe8      	blt.n	8000b50 <IP_Adress_LED+0xb8>
    }
    for (int i = 0; i < third_digit; i++) {
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	e012      	b.n	8000baa <IP_Adress_LED+0x112>
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b84:	2101      	movs	r1, #1
 8000b86:	4811      	ldr	r0, [pc, #68]	; (8000bcc <IP_Adress_LED+0x134>)
 8000b88:	f001 ffe7 	bl	8002b5a <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8000b8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b90:	f000 fb54 	bl	800123c <HAL_Delay>
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b94:	2101      	movs	r1, #1
 8000b96:	480d      	ldr	r0, [pc, #52]	; (8000bcc <IP_Adress_LED+0x134>)
 8000b98:	f001 ffdf 	bl	8002b5a <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8000b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba0:	f000 fb4c 	bl	800123c <HAL_Delay>
    for (int i = 0; i < third_digit; i++) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	7abb      	ldrb	r3, [r7, #10]
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dbe8      	blt.n	8000b84 <IP_Adress_LED+0xec>
  while (new_socket == -1) {
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <IP_Adress_LED+0x138>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bba:	d0aa      	beq.n	8000b12 <IP_Adress_LED+0x7a>
    }

    /* USER CODE END IP_Adress_LED */
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000522c 	.word	0x2000522c
 8000bc8:	cccccccd 	.word	0xcccccccd
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be6:	f000 fb09 	bl	80011fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40001000 	.word	0x40001000

08000bf8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000bfe:	e7fe      	b.n	8000bfe <Error_Handler+0x6>

08000c00 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_MspInit+0x54>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <HAL_MspInit+0x54>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x54>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_MspInit+0x54>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_MspInit+0x54>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_MspInit+0x54>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	210f      	movs	r1, #15
 8000c42:	f06f 0001 	mvn.w	r0, #1
 8000c46:	f000 fbd3 	bl	80013f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if (hspi->Instance == SPI1) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <HAL_SPI_MspInit+0xd0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d151      	bne.n	8000d1e <HAL_SPI_MspInit+0xc6>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <HAL_SPI_MspInit+0xd4>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a2a      	ldr	r2, [pc, #168]	; (8000d2c <HAL_SPI_MspInit+0xd4>)
 8000c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <HAL_SPI_MspInit+0xd4>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <HAL_SPI_MspInit+0xd4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <HAL_SPI_MspInit+0xd4>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_SPI_MspInit+0xd4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_SPI_MspInit+0xd4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <HAL_SPI_MspInit+0xd4>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_SPI_MspInit+0xd4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8000cce:	2370      	movs	r3, #112	; 0x70
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4811      	ldr	r0, [pc, #68]	; (8000d30 <HAL_SPI_MspInit+0xd8>)
 8000cea:	f001 fd73 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cee:	2320      	movs	r3, #32
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	480a      	ldr	r0, [pc, #40]	; (8000d34 <HAL_SPI_MspInit+0xdc>)
 8000d0a:	f001 fd63 	bl	80027d4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	2023      	movs	r0, #35	; 0x23
 8000d14:	f000 fb6c 	bl	80013f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d18:	2023      	movs	r0, #35	; 0x23
 8000d1a:	f000 fb85 	bl	8001428 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40013000 	.word	0x40013000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40020400 	.word	0x40020400

08000d38 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if (huart->Instance == USART3) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_UART_MspInit+0x84>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12c      	bne.n	8000db4 <HAL_UART_MspInit+0x7c>
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8000d92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da4:	2307      	movs	r3, #7
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_UART_MspInit+0x8c>)
 8000db0:	f001 fd10 	bl	80027d4 <HAL_GPIO_Init>

    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40004800 	.word	0x40004800
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020c00 	.word	0x40020c00

08000dc8 <HAL_PCD_MspInit>:
 * @brief PCD MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hpcd: PCD handle pointer
 * @retval None
 */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if (hpcd->Instance == USB_OTG_FS) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de8:	d13f      	bne.n	8000e6a <HAL_PCD_MspInit+0xa2>
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8000e06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e18:	230a      	movs	r3, #10
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4815      	ldr	r0, [pc, #84]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000e24:	f001 fcd6 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480e      	ldr	r0, [pc, #56]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000e3e:	f001 fcc9 	bl	80027d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

    /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	; 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <HAL_InitTick>:
 * after reset by HAL_Init() or at any time when clock is configured, by
 * HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	; 0x30
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef clkconfig;
  uint32_t uwTimclock = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t uwPrescalerValue = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	2036      	movs	r0, #54	; 0x36
 8000e92:	f000 faad 	bl	80013f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e96:	2036      	movs	r0, #54	; 0x36
 8000e98:	f000 fac6 	bl	8001428 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_InitTick+0xa4>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_InitTick+0xa4>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_InitTick+0xa4>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb8:	f107 0210 	add.w	r2, r7, #16
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fc6e 	bl	80037a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8000ec8:	f002 fc44 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t)((uwTimclock / 1000000U) - 1U);
 8000ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed4:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <HAL_InitTick+0xa8>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9b      	lsrs	r3, r3, #18
 8000edc:	3b01      	subs	r3, #1
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_InitTick+0xac>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <HAL_InitTick+0xb0>)
 8000ee4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_InitTick+0xac>)
 8000ee8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_InitTick+0xac>)
 8000ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_InitTick+0xac>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_InitTick+0xac>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_Base_Init(&htim6) == HAL_OK) {
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <HAL_InitTick+0xac>)
 8000f02:	f003 f9c1 	bl	8004288 <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d104      	bne.n	8000f16 <HAL_InitTick+0x9a>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f0c:	4806      	ldr	r0, [pc, #24]	; (8000f28 <HAL_InitTick+0xac>)
 8000f0e:	f003 f9f0 	bl	80042f2 <HAL_TIM_Base_Start_IT>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3730      	adds	r7, #48	; 0x30
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	431bde83 	.word	0x431bde83
 8000f28:	200051bc 	.word	0x200051bc
 8000f2c:	40001000 	.word	0x40001000

08000f30 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1) {
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1) {
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1) {
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SPI1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <SPI1_IRQHandler+0x10>)
 8000f62:	f002 ff61 	bl	8003e28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20005160 	.word	0x20005160

08000f70 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f78:	f001 fe0a 	bl	8002b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun
 * error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <TIM6_DAC_IRQHandler+0x10>)
 8000f86:	f003 f9d8 	bl	800433a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200051bc 	.word	0x200051bc

08000f94 <ETH_IRQHandler>:

/**
 * @brief This function handles Ethernet global interrupt.
 */
void ETH_IRQHandler(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <ETH_IRQHandler+0x10>)
 8000f9a:	f000 fe5b 	bl	8001c54 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20006b40 	.word	0x20006b40

08000fa8 <ETH_WKUP_IRQHandler>:

/**
 * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
 */
void ETH_WKUP_IRQHandler(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <ETH_WKUP_IRQHandler+0x10>)
 8000fae:	f000 fe51 	bl	8001c54 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20006b40 	.word	0x20006b40

08000fbc <_read>:
  _kill(status, -1);
  while (1) {
  } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e00a      	b.n	8000fe4 <_read+0x28>
    *ptr++ = __io_getchar();
 8000fce:	f3af 8000 	nop.w
 8000fd2:	4601      	mov	r1, r0
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	b2ca      	uxtb	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf0      	blt.n	8000fce <_read+0x12>
  }

  return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <_write>:

__attribute__((weak)) int _write(int file, char *data, int len) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d008      	beq.n	800101c <_write+0x24>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d005      	beq.n	800101c <_write+0x24>
    errno = EBADF;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_write+0x5c>)
 8001012:	2209      	movs	r2, #9
 8001014:	601a      	str	r2, [r3, #0]
    return -1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e016      	b.n	800104a <_write+0x52>
  }

  // arbitrary timeout 1000
  HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart3, (uint8_t *)data, len, 1000);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b29a      	uxth	r2, r3
  HAL_StatusTypeDef status =
 8001020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	480c      	ldr	r0, [pc, #48]	; (8001058 <_write+0x60>)
 8001028:	f003 fbb9 	bl	800479e <HAL_UART_Transmit>
 800102c:	4603      	mov	r3, r0
 800102e:	75fb      	strb	r3, [r7, #23]
  HAL_UART_Transmit(&huart3, (uint8_t *)"\r", 1, 1000);
 8001030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001034:	2201      	movs	r2, #1
 8001036:	4909      	ldr	r1, [pc, #36]	; (800105c <_write+0x64>)
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <_write+0x60>)
 800103a:	f003 fbb0 	bl	800479e <HAL_UART_Transmit>
  // return # of bytes written - as best we can tell
  return (status == HAL_OK ? len : 0);
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <_write+0x50>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	e000      	b.n	800104a <_write+0x52>
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000bb14 	.word	0x2000bb14
 8001058:	20004d10 	.word	0x20004d10
 800105c:	0801b488 	.word	0x0801b488

08001060 <_close>:

int _close(int file) { return -1; }
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  st->st_mode = S_IFCHR;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001088:	605a      	str	r2, [r3, #4]
  return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_isatty>:

int _isatty(int file) { return 1; }
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	2301      	movs	r3, #1
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_lseek>:

int _lseek(int file, int ptr, int dir) { return 0; }
 80010ae:	b480      	push	{r7}
 80010b0:	b085      	sub	sp, #20
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	2300      	movs	r3, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;             /* Symbol defined in the linker script */
  extern uint8_t _estack;          /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d205      	bcs.n	8001104 <_sbrk+0x3c>
    errno = ENOMEM;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <_sbrk+0x6c>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	e009      	b.n	8001118 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	4a06      	ldr	r2, [pc, #24]	; (800112c <_sbrk+0x64>)
 8001114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20030000 	.word	0x20030000
 8001128:	00000400 	.word	0x00000400
 800112c:	20000210 	.word	0x20000210
 8001130:	2000bb20 	.word	0x2000bb20
 8001134:	2000bb14 	.word	0x2000bb14

08001138 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |=
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <SystemInit+0x28>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <SystemInit+0x28>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE |
              VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE |
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SystemInit+0x28>)
 800114e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001152:	609a      	str	r2, [r3, #8]
              VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001168:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800116a:	e003      	b.n	8001174 <LoopCopyDataInit>

0800116c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800116e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001170:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001172:	3104      	adds	r1, #4

08001174 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001178:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800117a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800117c:	d3f6      	bcc.n	800116c <CopyDataInit>
  ldr  r2, =_sbss
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001180:	e002      	b.n	8001188 <LoopFillZerobss>

08001182 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001182:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001184:	f842 3b04 	str.w	r3, [r2], #4

08001188 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800118a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800118c:	d3f9      	bcc.n	8001182 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800118e:	f7ff ffd3 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001192:	f019 f8bb 	bl	801a30c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001196:	f7ff f9fb 	bl	8000590 <main>
  bx  lr    
 800119a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800119c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80011a0:	0801f4f4 	.word	0x0801f4f4
  ldr  r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011a8:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 80011ac:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 80011b0:	2000bb1c 	.word	0x2000bb1c

080011b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <HAL_Init+0x40>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_Init+0x40>)
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_Init+0x40>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f8fa 	bl	80013da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fe48 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fd08 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000000c 	.word	0x2000000c
 8001220:	200051fc 	.word	0x200051fc

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200051fc 	.word	0x200051fc

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_Delay+0x40>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000000c 	.word	0x2000000c

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff4c 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001402:	f7ff ff61 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001406:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	f7ff ffb1 	bl	8001374 <NVIC_EncodePriority>
 8001412:	4602      	mov	r2, r0
 8001414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff80 	bl	8001320 <__NVIC_SetPriority>
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff54 	bl	80012e4 <__NVIC_EnableIRQ>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d004      	beq.n	8001462 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00c      	b.n	800147c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2205      	movs	r2, #5
 8001466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001498:	4baa      	ldr	r3, [pc, #680]	; (8001744 <HAL_ETH_Init+0x2bc>)
 800149a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e185      	b.n	80017ba <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d106      	bne.n	80014c8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f004 f8f4 	bl	80056b0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	4b9e      	ldr	r3, [pc, #632]	; (8001748 <HAL_ETH_Init+0x2c0>)
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	4a9d      	ldr	r2, [pc, #628]	; (8001748 <HAL_ETH_Init+0x2c0>)
 80014d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d6:	6453      	str	r3, [r2, #68]	; 0x44
 80014d8:	4b9b      	ldr	r3, [pc, #620]	; (8001748 <HAL_ETH_Init+0x2c0>)
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014e4:	4b99      	ldr	r3, [pc, #612]	; (800174c <HAL_ETH_Init+0x2c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4a98      	ldr	r2, [pc, #608]	; (800174c <HAL_ETH_Init+0x2c4>)
 80014ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014ee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014f0:	4b96      	ldr	r3, [pc, #600]	; (800174c <HAL_ETH_Init+0x2c4>)
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4994      	ldr	r1, [pc, #592]	; (800174c <HAL_ETH_Init+0x2c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0201 	orr.w	r2, r2, #1
 8001510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001514:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001516:	f7ff fe85 	bl	8001224 <HAL_GetTick>
 800151a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800151c:	e011      	b.n	8001542 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800151e:	f7ff fe81 	bl	8001224 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800152c:	d909      	bls.n	8001542 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2203      	movs	r2, #3
 8001532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e13b      	b.n	80017ba <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e4      	bne.n	800151e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f023 031c 	bic.w	r3, r3, #28
 8001562:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001564:	f002 f8ea 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8001568:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4a78      	ldr	r2, [pc, #480]	; (8001750 <HAL_ETH_Init+0x2c8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d908      	bls.n	8001584 <HAL_ETH_Init+0xfc>
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_ETH_Init+0x2cc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d804      	bhi.n	8001584 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	e027      	b.n	80015d4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	4a73      	ldr	r2, [pc, #460]	; (8001754 <HAL_ETH_Init+0x2cc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d908      	bls.n	800159e <HAL_ETH_Init+0x116>
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4a72      	ldr	r2, [pc, #456]	; (8001758 <HAL_ETH_Init+0x2d0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d804      	bhi.n	800159e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f043 030c 	orr.w	r3, r3, #12
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	e01a      	b.n	80015d4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4a6d      	ldr	r2, [pc, #436]	; (8001758 <HAL_ETH_Init+0x2d0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d903      	bls.n	80015ae <HAL_ETH_Init+0x126>
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	4a6c      	ldr	r2, [pc, #432]	; (800175c <HAL_ETH_Init+0x2d4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d911      	bls.n	80015d2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4a6a      	ldr	r2, [pc, #424]	; (800175c <HAL_ETH_Init+0x2d4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d908      	bls.n	80015c8 <HAL_ETH_Init+0x140>
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4a69      	ldr	r2, [pc, #420]	; (8001760 <HAL_ETH_Init+0x2d8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d804      	bhi.n	80015c8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	e005      	b.n	80015d4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f043 0310 	orr.w	r3, r3, #16
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	e000      	b.n	80015d4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80015d2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80015dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015e0:	2100      	movs	r1, #0
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fc19 	bl	8001e1a <HAL_ETH_WritePHYRegister>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80015f2:	6939      	ldr	r1, [r7, #16]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 fdcf 	bl	8002198 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0d9      	b.n	80017ba <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001606:	20ff      	movs	r0, #255	; 0xff
 8001608:	f7ff fe18 	bl	800123c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80a7 	beq.w	8001764 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001616:	f7ff fe05 	bl	8001224 <HAL_GetTick>
 800161a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	461a      	mov	r2, r3
 8001622:	2101      	movs	r1, #1
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fb90 	bl	8001d4a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800162a:	f7ff fdfb 	bl	8001224 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d90f      	bls.n	800165c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001640:	6939      	ldr	r1, [r7, #16]
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fda8 	bl	8002198 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0ae      	b.n	80017ba <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0da      	beq.n	800161c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001666:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800166a:	2100      	movs	r1, #0
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 fbd4 	bl	8001e1a <HAL_ETH_WritePHYRegister>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00b      	beq.n	8001690 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800167c:	6939      	ldr	r1, [r7, #16]
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fd8a 	bl	8002198 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800168c:	2301      	movs	r3, #1
 800168e:	e094      	b.n	80017ba <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001690:	f7ff fdc8 	bl	8001224 <HAL_GetTick>
 8001694:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	461a      	mov	r2, r3
 800169c:	2101      	movs	r1, #1
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fb53 	bl	8001d4a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80016a4:	f7ff fdbe 	bl	8001224 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d90f      	bls.n	80016d6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016ba:	6939      	ldr	r1, [r7, #16]
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fd6b 	bl	8002198 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e071      	b.n	80017ba <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0da      	beq.n	8001696 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	461a      	mov	r2, r3
 80016e6:	211f      	movs	r1, #31
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fb2e 	bl	8001d4a <HAL_ETH_ReadPHYRegister>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00b      	beq.n	800170c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016f8:	6939      	ldr	r1, [r7, #16]
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fd4c 	bl	8002198 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001708:	2301      	movs	r3, #1
 800170a:	e056      	b.n	80017ba <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	e002      	b.n	8001726 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	e037      	b.n	80017a8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e032      	b.n	80017a8 <HAL_ETH_Init+0x320>
 8001742:	bf00      	nop
 8001744:	03938700 	.word	0x03938700
 8001748:	40023800 	.word	0x40023800
 800174c:	40013800 	.word	0x40013800
 8001750:	01312cff 	.word	0x01312cff
 8001754:	02160ebf 	.word	0x02160ebf
 8001758:	039386ff 	.word	0x039386ff
 800175c:	05f5e0ff 	.word	0x05f5e0ff
 8001760:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	08db      	lsrs	r3, r3, #3
 800176a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001774:	4313      	orrs	r3, r2
 8001776:	b29b      	uxth	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	2100      	movs	r1, #0
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fb4c 	bl	8001e1a <HAL_ETH_WritePHYRegister>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00b      	beq.n	80017a0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fd02 	bl	8002198 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e00c      	b.n	80017ba <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80017a0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80017a4:	f7ff fd4a 	bl	800123c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80017a8:	6939      	ldr	r1, [r7, #16]
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fcf4 	bl	8002198 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop

080017c4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_ETH_DMATxDescListInit+0x20>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e052      	b.n	800188a <HAL_ETH_DMATxDescListInit+0xc6>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e030      	b.n	8001862 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	015b      	lsls	r3, r3, #5
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001810:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001818:	fb02 f303 	mul.w	r3, r2, r3
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	461a      	mov	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d105      	bne.n	800183a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	429a      	cmp	r2, r3
 8001842:	d208      	bcs.n	8001856 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	015b      	lsls	r3, r3, #5
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	4413      	add	r3, r2
 800184e:	461a      	mov	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	e002      	b.n	800185c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d3ca      	bcc.n	8001800 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001874:	3310      	adds	r3, #16
 8001876:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001896:	b480      	push	{r7}
 8001898:	b087      	sub	sp, #28
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_ETH_DMARxDescListInit+0x20>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e056      	b.n	8001964 <HAL_ETH_DMARxDescListInit+0xce>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2202      	movs	r2, #2
 80018c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e034      	b.n	800193c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	015b      	lsls	r3, r3, #5
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	4413      	add	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018e2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018ea:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	461a      	mov	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3b01      	subs	r3, #1
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	429a      	cmp	r2, r3
 800191c:	d208      	bcs.n	8001930 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	015b      	lsls	r3, r3, #5
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	4413      	add	r3, r2
 8001928:	461a      	mov	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	e002      	b.n	8001936 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d3c6      	bcc.n	80018d2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194e:	330c      	adds	r3, #12
 8001950:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_ETH_TransmitFrame+0x24>
 8001990:	2302      	movs	r3, #2
 8001992:	e0cd      	b.n	8001b30 <HAL_ETH_TransmitFrame+0x1c0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0b8      	b.n	8001b30 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da09      	bge.n	80019dc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2212      	movs	r2, #18
 80019cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0a9      	b.n	8001b30 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d915      	bls.n	8001a12 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	4a54      	ldr	r2, [pc, #336]	; (8001b3c <HAL_ETH_TransmitFrame+0x1cc>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0a9b      	lsrs	r3, r3, #10
 80019f0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <HAL_ETH_TransmitFrame+0x1cc>)
 80019f6:	fba3 1302 	umull	r1, r3, r3, r2
 80019fa:	0a9b      	lsrs	r3, r3, #10
 80019fc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e001      	b.n	8001a16 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001a12:	2301      	movs	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d11c      	bne.n	8001a56 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001a2a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a36:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a46:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a54:	e04b      	b.n	8001aee <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	e044      	b.n	8001ae6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a6a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d107      	bne.n	8001a82 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a80:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a8a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d116      	bne.n	8001ac4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001aa4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <HAL_ETH_TransmitFrame+0x1d0>)
 8001aaa:	fb02 f203 	mul.w	r2, r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001ab6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001ac2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ad2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3b6      	bcc.n	8001a5c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af6:	3314      	adds	r3, #20
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00d      	beq.n	8001b1e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	3314      	adds	r3, #20
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	ac02b00b 	.word	0xac02b00b
 8001b40:	fffffa0c 	.word	0xfffffa0c

08001b44 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e074      	b.n	8001c48 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b6e:	e05a      	b.n	8001c26 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3301      	adds	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b84:	d10d      	bne.n	8001ba2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
 8001ba0:	e041      	b.n	8001c26 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10b      	bne.n	8001bc8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
 8001bc6:	e02e      	b.n	8001c26 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d103      	bne.n	8001bea <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001bf6:	1f1a      	subs	r2, r3, #4
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e010      	b.n	8001c48 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db02      	blt.n	8001c36 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d99c      	bls.n	8001b70 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c64:	3314      	adds	r3, #20
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b40      	cmp	r3, #64	; 0x40
 8001c6e:	d112      	bne.n	8001c96 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f003 fdf3 	bl	800585c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7e:	3314      	adds	r3, #20
 8001c80:	2240      	movs	r2, #64	; 0x40
 8001c82:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c94:	e01b      	b.n	8001cce <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9e:	3314      	adds	r3, #20
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d111      	bne.n	8001cce <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f839 	bl	8001d22 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb8:	3314      	adds	r3, #20
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd6:	3314      	adds	r3, #20
 8001cd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cdc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce6:	3314      	adds	r3, #20
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf2:	d112      	bne.n	8001d1a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f81e 	bl	8001d36 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d02:	3314      	adds	r3, #20
 8001d04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d08:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	460b      	mov	r3, r1
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b82      	cmp	r3, #130	; 0x82
 8001d6a:	d101      	bne.n	8001d70 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e050      	b.n	8001e12 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2282      	movs	r2, #130	; 0x82
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f003 031c 	and.w	r3, r3, #28
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8a1b      	ldrh	r3, [r3, #16]
 8001d8c:	02db      	lsls	r3, r3, #11
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	019b      	lsls	r3, r3, #6
 8001d9a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f023 0302 	bic.w	r3, r3, #2
 8001daa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dbc:	f7ff fa32 	bl	8001224 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dc2:	e015      	b.n	8001df0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001dc4:	f7ff fa2e 	bl	8001224 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd2:	d309      	bcc.n	8001de8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e014      	b.n	8001e12 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1e4      	bne.n	8001dc4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	460b      	mov	r3, r1
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b42      	cmp	r3, #66	; 0x42
 8001e3a:	d101      	bne.n	8001e40 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e04e      	b.n	8001ede <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2242      	movs	r2, #66	; 0x42
 8001e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 031c 	and.w	r3, r3, #28
 8001e56:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8a1b      	ldrh	r3, [r3, #16]
 8001e5c:	02db      	lsls	r3, r3, #11
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e66:	897b      	ldrh	r3, [r7, #10]
 8001e68:	019b      	lsls	r3, r3, #6
 8001e6a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f043 0302 	orr.w	r3, r3, #2
 8001e7a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e96:	f7ff f9c5 	bl	8001224 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e9c:	e015      	b.n	8001eca <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e9e:	f7ff f9c1 	bl	8001224 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d309      	bcc.n	8001ec2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e00d      	b.n	8001ede <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1e4      	bne.n	8001e9e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_ETH_Start+0x16>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e01f      	b.n	8001f3c <HAL_ETH_Start+0x56>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fb45 	bl	800259c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fb7c 	bl	8002610 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fc13 	bl	8002744 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fbb0 	bl	8002684 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fbdd 	bl	80026e4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_ETH_Stop+0x16>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e01f      	b.n	8001f9a <HAL_ETH_Stop+0x56>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fba2 	bl	80026b4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fbcf 	bl	8002714 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fb67 	bl	800264a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fbe1 	bl	8002744 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fb27 	bl	80025d6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_ETH_ConfigMAC+0x1c>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e0e4      	b.n	800218a <HAL_ETH_ConfigMAC+0x1e6>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80b1 	beq.w	800213a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4b6c      	ldr	r3, [pc, #432]	; (8002194 <HAL_ETH_ConfigMAC+0x1f0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ff0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001ff6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001ffc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002002:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002008:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800200e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002014:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800201a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002020:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002026:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800202c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002032:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800204a:	2001      	movs	r0, #1
 800204c:	f7ff f8f6 	bl	800123c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002060:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002066:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800206c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002072:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002078:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800207e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800208a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800208c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff f8d0 	bl	800123c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020ac:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020b6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020d4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80020da:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80020e0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80020e6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80020ec:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002104:	2001      	movs	r0, #1
 8002106:	f7ff f899 	bl	800123c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800212a:	2001      	movs	r0, #1
 800212c:	f7ff f886 	bl	800123c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	61da      	str	r2, [r3, #28]
 8002138:	e01e      	b.n	8002178 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002148:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800216a:	2001      	movs	r0, #1
 800216c:	f7ff f866 	bl	800123c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	ff20810f 	.word	0xff20810f

08002198 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0b0      	sub	sp, #192	; 0xc0
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021c6:	2300      	movs	r3, #0
 80021c8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d103      	bne.n	80021e6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80021de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e2:	663b      	str	r3, [r7, #96]	; 0x60
 80021e4:	e001      	b.n	80021ea <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80021ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ee:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021f4:	2300      	movs	r3, #0
 80021f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002204:	2340      	movs	r3, #64	; 0x40
 8002206:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800226c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002270:	4bac      	ldr	r3, [pc, #688]	; (8002524 <ETH_MACDMAConfig+0x38c>)
 8002272:	4013      	ands	r3, r2
 8002274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002278:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800227a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800227c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800227e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002280:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002284:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800228a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800228c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800228e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002292:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002298:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800229a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800229c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800229e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80022a0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80022a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80022a4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80022a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80022a8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80022aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80022ac:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f7fe ffb5 	bl	800123c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022da:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80022de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022e0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80022e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80022e4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80022e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80022ea:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80022ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80022f0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80022f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80022f6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80022f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80022fc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002300:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002308:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800230a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002316:	2001      	movs	r0, #1
 8002318:	f7fe ff90 	bl	800123c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002324:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800232e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002338:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002344:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002348:	f64f 7341 	movw	r3, #65345	; 0xff41
 800234c:	4013      	ands	r3, r2
 800234e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002352:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002356:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002358:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800235c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800235e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002362:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002368:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800236a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800236e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002374:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002376:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002388:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002394:	2001      	movs	r0, #1
 8002396:	f7fe ff51 	bl	800123c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023a4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80023a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023be:	2001      	movs	r0, #1
 80023c0:	f7fe ff3c 	bl	800123c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023cc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80023d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80023dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023e0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80023f2:	2304      	movs	r3, #4
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80023f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80023fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002402:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800240c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002412:	2300      	movs	r3, #0
 8002414:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002416:	2300      	movs	r3, #0
 8002418:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002422:	3318      	adds	r3, #24
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800242a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <ETH_MACDMAConfig+0x390>)
 8002430:	4013      	ands	r3, r2
 8002432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002436:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002438:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800243a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800243c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800243e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002440:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002442:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002444:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002446:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002448:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800244a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800244c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800244e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002452:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002456:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002458:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246a:	3318      	adds	r3, #24
 800246c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002470:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800247a:	3318      	adds	r3, #24
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002482:	2001      	movs	r0, #1
 8002484:	f7fe feda 	bl	800123c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002490:	3318      	adds	r3, #24
 8002492:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002496:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800249c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80024a0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024a4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80024a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80024a8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80024aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ac:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80024ae:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80024b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80024b2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7fe feb3 	bl	800123c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024e2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10f      	bne.n	800250c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f4:	331c      	adds	r3, #28
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002508:	331c      	adds	r3, #28
 800250a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	461a      	mov	r2, r3
 8002512:	2100      	movs	r1, #0
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f809 	bl	800252c <ETH_MACAddressConfig>
}
 800251a:	bf00      	nop
 800251c:	37c0      	adds	r7, #192	; 0xc0
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	ff20810f 	.word	0xff20810f
 8002528:	f8de3f23 	.word	0xf8de3f23

0800252c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3305      	adds	r3, #5
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	3204      	adds	r2, #4
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <ETH_MACAddressConfig+0x68>)
 800254e:	4413      	add	r3, r2
 8002550:	461a      	mov	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3303      	adds	r3, #3
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	061a      	lsls	r2, r3, #24
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3302      	adds	r3, #2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3301      	adds	r3, #1
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	4313      	orrs	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	7812      	ldrb	r2, [r2, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <ETH_MACAddressConfig+0x6c>)
 800257e:	4413      	add	r3, r2
 8002580:	461a      	mov	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6013      	str	r3, [r2, #0]
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40028040 	.word	0x40028040
 8002598:	40028044 	.word	0x40028044

0800259c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0208 	orr.w	r2, r2, #8
 80025b6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025c0:	2001      	movs	r0, #1
 80025c2:	f000 f8e9 	bl	8002798 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	601a      	str	r2, [r3, #0]
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0208 	bic.w	r2, r2, #8
 80025f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f000 f8cc 	bl	8002798 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	601a      	str	r2, [r3, #0]
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0204 	orr.w	r2, r2, #4
 800262a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002634:	2001      	movs	r0, #1
 8002636:	f000 f8af 	bl	8002798 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	601a      	str	r2, [r3, #0]
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0204 	bic.w	r2, r2, #4
 8002664:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800266e:	2001      	movs	r0, #1
 8002670:	f000 f892 	bl	8002798 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	601a      	str	r2, [r3, #0]
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002694:	3318      	adds	r3, #24
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a4:	3318      	adds	r3, #24
 80026a6:	601a      	str	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c4:	3318      	adds	r3, #24
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d4:	3318      	adds	r3, #24
 80026d6:	601a      	str	r2, [r3, #0]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f4:	3318      	adds	r3, #24
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0202 	orr.w	r2, r2, #2
 8002700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002704:	3318      	adds	r3, #24
 8002706:	601a      	str	r2, [r3, #0]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002724:	3318      	adds	r3, #24
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0202 	bic.w	r2, r2, #2
 8002730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002734:	3318      	adds	r3, #24
 8002736:	601a      	str	r2, [r3, #0]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002758:	3318      	adds	r3, #24
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002768:	3318      	adds	r3, #24
 800276a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002774:	3318      	adds	r3, #24
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800277a:	2001      	movs	r0, #1
 800277c:	f000 f80c 	bl	8002798 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278a:	3318      	adds	r3, #24
 800278c:	601a      	str	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <ETH_Delay+0x34>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <ETH_Delay+0x38>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0a5b      	lsrs	r3, r3, #9
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80027b4:	bf00      	nop
  } 
  while (Delay --);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	60fa      	str	r2, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <ETH_Delay+0x1c>
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	20000004 	.word	0x20000004
 80027d0:	10624dd3 	.word	0x10624dd3

080027d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	e177      	b.n	8002ae0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027f0:	2201      	movs	r2, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	429a      	cmp	r2, r3
 800280a:	f040 8166 	bne.w	8002ada <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d00b      	beq.n	800282e <HAL_GPIO_Init+0x5a>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002822:	2b11      	cmp	r3, #17
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b12      	cmp	r3, #18
 800282c:	d130      	bne.n	8002890 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	2203      	movs	r2, #3
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002864:	2201      	movs	r2, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 0201 	and.w	r2, r3, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0xfc>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b12      	cmp	r3, #18
 80028ce:	d123      	bne.n	8002918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	08da      	lsrs	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3208      	adds	r2, #8
 80028d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	220f      	movs	r2, #15
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	08da      	lsrs	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3208      	adds	r2, #8
 8002912:	69b9      	ldr	r1, [r7, #24]
 8002914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0203 	and.w	r2, r3, #3
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80c0 	beq.w	8002ada <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	4b65      	ldr	r3, [pc, #404]	; (8002af4 <HAL_GPIO_Init+0x320>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a64      	ldr	r2, [pc, #400]	; (8002af4 <HAL_GPIO_Init+0x320>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b62      	ldr	r3, [pc, #392]	; (8002af4 <HAL_GPIO_Init+0x320>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002976:	4a60      	ldr	r2, [pc, #384]	; (8002af8 <HAL_GPIO_Init+0x324>)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3302      	adds	r3, #2
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a57      	ldr	r2, [pc, #348]	; (8002afc <HAL_GPIO_Init+0x328>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d037      	beq.n	8002a12 <HAL_GPIO_Init+0x23e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a56      	ldr	r2, [pc, #344]	; (8002b00 <HAL_GPIO_Init+0x32c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d031      	beq.n	8002a0e <HAL_GPIO_Init+0x23a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a55      	ldr	r2, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x330>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02b      	beq.n	8002a0a <HAL_GPIO_Init+0x236>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a54      	ldr	r2, [pc, #336]	; (8002b08 <HAL_GPIO_Init+0x334>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d025      	beq.n	8002a06 <HAL_GPIO_Init+0x232>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a53      	ldr	r2, [pc, #332]	; (8002b0c <HAL_GPIO_Init+0x338>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01f      	beq.n	8002a02 <HAL_GPIO_Init+0x22e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_GPIO_Init+0x33c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x22a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_GPIO_Init+0x340>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x226>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a50      	ldr	r2, [pc, #320]	; (8002b18 <HAL_GPIO_Init+0x344>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x222>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4f      	ldr	r2, [pc, #316]	; (8002b1c <HAL_GPIO_Init+0x348>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x21e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4e      	ldr	r2, [pc, #312]	; (8002b20 <HAL_GPIO_Init+0x34c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x21a>
 80029ea:	2309      	movs	r3, #9
 80029ec:	e012      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029ee:	230a      	movs	r3, #10
 80029f0:	e010      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029f2:	2308      	movs	r3, #8
 80029f4:	e00e      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e00c      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029fa:	2306      	movs	r3, #6
 80029fc:	e00a      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029fe:	2305      	movs	r3, #5
 8002a00:	e008      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a02:	2304      	movs	r3, #4
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a06:	2303      	movs	r3, #3
 8002a08:	e004      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e002      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a12:	2300      	movs	r3, #0
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f002 0203 	and.w	r2, r2, #3
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	4093      	lsls	r3, r2
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a24:	4934      	ldr	r1, [pc, #208]	; (8002af8 <HAL_GPIO_Init+0x324>)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a32:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a56:	4a33      	ldr	r2, [pc, #204]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a80:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a86:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aaa:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad4:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3301      	adds	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	f67f ae84 	bls.w	80027f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3724      	adds	r7, #36	; 0x24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40013800 	.word	0x40013800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40021400 	.word	0x40021400
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40021c00 	.word	0x40021c00
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40022400 	.word	0x40022400
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b44:	e003      	b.n	8002b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	041a      	lsls	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	619a      	str	r2, [r3, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	887b      	ldrh	r3, [r7, #2]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d104      	bne.n	8002b7e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	041a      	lsls	r2, r3, #16
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	619a      	str	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f806 	bl	8002bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40013c00 	.word	0x40013c00

08002bc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd8:	b08f      	sub	sp, #60	; 0x3c
 8002bda:	af0a      	add	r7, sp, #40	; 0x28
 8002bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e10f      	b.n	8002e08 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fe f8e0 	bl	8000dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 fa79 	bl	800511e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	687e      	ldr	r6, [r7, #4]
 8002c34:	466d      	mov	r5, sp
 8002c36:	f106 0410 	add.w	r4, r6, #16
 8002c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c46:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c4a:	1d33      	adds	r3, r6, #4
 8002c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4e:	6838      	ldr	r0, [r7, #0]
 8002c50:	f002 fa04 	bl	800505c <USB_CoreInit>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e0d0      	b.n	8002e08 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f002 fa67 	bl	8005140 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	e04a      	b.n	8002d0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	333d      	adds	r3, #61	; 0x3d
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	333c      	adds	r3, #60	; 0x3c
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	b298      	uxth	r0, r3
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3342      	adds	r3, #66	; 0x42
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	333f      	adds	r3, #63	; 0x3f
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3344      	adds	r3, #68	; 0x44
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	3348      	adds	r3, #72	; 0x48
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	3350      	adds	r3, #80	; 0x50
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d3af      	bcc.n	8002c78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e044      	b.n	8002da8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d46:	7bfa      	ldrb	r2, [r7, #15]
 8002d48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	3301      	adds	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d3b5      	bcc.n	8002d1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	687e      	ldr	r6, [r7, #4]
 8002dba:	466d      	mov	r5, sp
 8002dbc:	f106 0410 	add.w	r4, r6, #16
 8002dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dd0:	1d33      	adds	r3, r6, #4
 8002dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dd4:	6838      	ldr	r0, [r7, #0]
 8002dd6:	f002 f9dd 	bl	8005194 <USB_DevInit>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e00d      	b.n	8002e08 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 fb8c 	bl	800551e <USB_DevDisconnect>

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e25b      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d075      	beq.n	8002f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e2e:	4ba3      	ldr	r3, [pc, #652]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d00c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3a:	4ba0      	ldr	r3, [pc, #640]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d112      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e46:	4b9d      	ldr	r3, [pc, #628]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e52:	d10b      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	4b99      	ldr	r3, [pc, #612]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d05b      	beq.n	8002f18 <HAL_RCC_OscConfig+0x108>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d157      	bne.n	8002f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e236      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d106      	bne.n	8002e84 <HAL_RCC_OscConfig+0x74>
 8002e76:	4b91      	ldr	r3, [pc, #580]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a90      	ldr	r2, [pc, #576]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e01d      	b.n	8002ec0 <HAL_RCC_OscConfig+0xb0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x98>
 8002e8e:	4b8b      	ldr	r3, [pc, #556]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a8a      	ldr	r2, [pc, #552]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b88      	ldr	r3, [pc, #544]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a87      	ldr	r2, [pc, #540]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0xb0>
 8002ea8:	4b84      	ldr	r3, [pc, #528]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a83      	ldr	r2, [pc, #524]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b81      	ldr	r3, [pc, #516]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a80      	ldr	r2, [pc, #512]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f9ac 	bl	8001224 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe f9a8 	bl	8001224 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1fb      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b76      	ldr	r3, [pc, #472]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xc0>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe f998 	bl	8001224 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe f994 	bl	8001224 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1e7      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	4b6c      	ldr	r3, [pc, #432]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0xe8>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d063      	beq.n	8002fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f26:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f32:	4b62      	ldr	r3, [pc, #392]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d11c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b5f      	ldr	r3, [pc, #380]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	4b5c      	ldr	r3, [pc, #368]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_RCC_OscConfig+0x152>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1bb      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f62:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4952      	ldr	r1, [pc, #328]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	e03a      	b.n	8002fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f80:	4b4f      	ldr	r3, [pc, #316]	; (80030c0 <HAL_RCC_OscConfig+0x2b0>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe f94d 	bl	8001224 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe f949 	bl	8001224 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e19c      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	4b46      	ldr	r3, [pc, #280]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b43      	ldr	r3, [pc, #268]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4940      	ldr	r1, [pc, #256]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_RCC_OscConfig+0x2b0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe f92c 	bl	8001224 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe f928 	bl	8001224 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e17b      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d030      	beq.n	800305c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <HAL_RCC_OscConfig+0x2b4>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe f90c 	bl	8001224 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003010:	f7fe f908 	bl	8001224 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e15b      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	4b26      	ldr	r3, [pc, #152]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8003024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x200>
 800302e:	e015      	b.n	800305c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003030:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <HAL_RCC_OscConfig+0x2b4>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7fe f8f5 	bl	8001224 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303e:	f7fe f8f1 	bl	8001224 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e144      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8003052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a0 	beq.w	80031aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306e:	4b13      	ldr	r3, [pc, #76]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10f      	bne.n	800309a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 8003084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
 800308a:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <HAL_RCC_OscConfig+0x2ac>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003096:	2301      	movs	r3, #1
 8003098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_OscConfig+0x2b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d121      	bne.n	80030ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_RCC_OscConfig+0x2b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <HAL_RCC_OscConfig+0x2b8>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b2:	f7fe f8b7 	bl	8001224 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	e011      	b.n	80030de <HAL_RCC_OscConfig+0x2ce>
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	42470000 	.word	0x42470000
 80030c4:	42470e80 	.word	0x42470e80
 80030c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030cc:	f7fe f8aa 	bl	8001224 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0fd      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <HAL_RCC_OscConfig+0x4d4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d106      	bne.n	8003100 <HAL_RCC_OscConfig+0x2f0>
 80030f2:	4b7d      	ldr	r3, [pc, #500]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a7c      	ldr	r2, [pc, #496]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70
 80030fe:	e01c      	b.n	800313a <HAL_RCC_OscConfig+0x32a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b05      	cmp	r3, #5
 8003106:	d10c      	bne.n	8003122 <HAL_RCC_OscConfig+0x312>
 8003108:	4b77      	ldr	r3, [pc, #476]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	4a76      	ldr	r2, [pc, #472]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	6713      	str	r3, [r2, #112]	; 0x70
 8003114:	4b74      	ldr	r3, [pc, #464]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a73      	ldr	r2, [pc, #460]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	e00b      	b.n	800313a <HAL_RCC_OscConfig+0x32a>
 8003122:	4b71      	ldr	r3, [pc, #452]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a70      	ldr	r2, [pc, #448]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
 800312e:	4b6e      	ldr	r3, [pc, #440]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a6d      	ldr	r2, [pc, #436]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 8003134:	f023 0304 	bic.w	r3, r3, #4
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d015      	beq.n	800316e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003142:	f7fe f86f 	bl	8001224 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7fe f86b 	bl	8001224 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	; 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0bc      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003160:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ee      	beq.n	800314a <HAL_RCC_OscConfig+0x33a>
 800316c:	e014      	b.n	8003198 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7fe f859 	bl	8001224 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe f855 	bl	8001224 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0a6      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318c:	4b56      	ldr	r3, [pc, #344]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1ee      	bne.n	8003176 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b52      	ldr	r3, [pc, #328]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a51      	ldr	r2, [pc, #324]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8092 	beq.w	80032d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b4:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d05c      	beq.n	800327a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d141      	bne.n	800324c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c8:	4b48      	ldr	r3, [pc, #288]	; (80032ec <HAL_RCC_OscConfig+0x4dc>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fe f829 	bl	8001224 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d6:	f7fe f825 	bl	8001224 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e078      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e8:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f0      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	019b      	lsls	r3, r3, #6
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	085b      	lsrs	r3, r3, #1
 800320c:	3b01      	subs	r3, #1
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	061b      	lsls	r3, r3, #24
 8003218:	4933      	ldr	r1, [pc, #204]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800321e:	4b33      	ldr	r3, [pc, #204]	; (80032ec <HAL_RCC_OscConfig+0x4dc>)
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fd fffe 	bl	8001224 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322c:	f7fd fffa 	bl	8001224 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e04d      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323e:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x41c>
 800324a:	e045      	b.n	80032d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x4dc>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fd ffe7 	bl	8001224 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325a:	f7fd ffe3 	bl	8001224 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e036      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326c:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0x44a>
 8003278:	e02e      	b.n	80032d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e029      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003286:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_RCC_OscConfig+0x4d8>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	429a      	cmp	r2, r3
 8003298:	d11c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d115      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ae:	4013      	ands	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d10d      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d106      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40007000 	.word	0x40007000
 80032e8:	40023800 	.word	0x40023800
 80032ec:	42470060 	.word	0x42470060

080032f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0cc      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003304:	4b68      	ldr	r3, [pc, #416]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d90c      	bls.n	800332c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b65      	ldr	r3, [pc, #404]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0b8      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003344:	4b59      	ldr	r3, [pc, #356]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4a58      	ldr	r2, [pc, #352]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800334e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800335c:	4b53      	ldr	r3, [pc, #332]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4a52      	ldr	r2, [pc, #328]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003368:	4b50      	ldr	r3, [pc, #320]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	494d      	ldr	r1, [pc, #308]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d044      	beq.n	8003410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b47      	ldr	r3, [pc, #284]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d119      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e07f      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d003      	beq.n	80033ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ae:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e06f      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033be:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e067      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ce:	4b37      	ldr	r3, [pc, #220]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f023 0203 	bic.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4934      	ldr	r1, [pc, #208]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e0:	f7fd ff20 	bl	8001224 <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e8:	f7fd ff1c 	bl	8001224 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e04f      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fe:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 020c 	and.w	r2, r3, #12
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	429a      	cmp	r2, r3
 800340e:	d1eb      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d20c      	bcs.n	8003438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e032      	b.n	800349e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003444:	4b19      	ldr	r3, [pc, #100]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4916      	ldr	r1, [pc, #88]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	490e      	ldr	r1, [pc, #56]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003476:	f000 f889 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800347a:	4601      	mov	r1, r0
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	5cd3      	ldrb	r3, [r2, r3]
 800348a:	fa21 f303 	lsr.w	r3, r1, r3
 800348e:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd fcf0 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023c00 	.word	0x40023c00
 80034ac:	40023800 	.word	0x40023800
 80034b0:	0801f1a8 	.word	0x0801f1a8
 80034b4:	20000004 	.word	0x20000004
 80034b8:	20000008 	.word	0x20000008

080034bc <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	; 0x30
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d129      	bne.n	8003522 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	4b2b      	ldr	r3, [pc, #172]	; (8003580 <HAL_RCC_MCOConfig+0xc4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <HAL_RCC_MCOConfig+0xc4>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b28      	ldr	r3, [pc, #160]	; (8003580 <HAL_RCC_MCOConfig+0xc4>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80034ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f4:	2303      	movs	r3, #3
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003500:	f107 031c 	add.w	r3, r7, #28
 8003504:	4619      	mov	r1, r3
 8003506:	481f      	ldr	r0, [pc, #124]	; (8003584 <HAL_RCC_MCOConfig+0xc8>)
 8003508:	f7ff f964 	bl	80027d4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800350c:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_RCC_MCOConfig+0xc4>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	430b      	orrs	r3, r1
 800351a:	4919      	ldr	r1, [pc, #100]	; (8003580 <HAL_RCC_MCOConfig+0xc4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003520:	e029      	b.n	8003576 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	4b16      	ldr	r3, [pc, #88]	; (8003580 <HAL_RCC_MCOConfig+0xc4>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a15      	ldr	r2, [pc, #84]	; (8003580 <HAL_RCC_MCOConfig+0xc4>)
 800352c:	f043 0304 	orr.w	r3, r3, #4
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_RCC_MCOConfig+0xc4>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800353e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003548:	2303      	movs	r3, #3
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003550:	2300      	movs	r3, #0
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003554:	f107 031c 	add.w	r3, r7, #28
 8003558:	4619      	mov	r1, r3
 800355a:	480b      	ldr	r0, [pc, #44]	; (8003588 <HAL_RCC_MCOConfig+0xcc>)
 800355c:	f7ff f93a 	bl	80027d4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_RCC_MCOConfig+0xc4>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	00d9      	lsls	r1, r3, #3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	430b      	orrs	r3, r1
 8003570:	4903      	ldr	r1, [pc, #12]	; (8003580 <HAL_RCC_MCOConfig+0xc4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
}
 8003576:	bf00      	nop
 8003578:	3730      	adds	r7, #48	; 0x30
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
 8003584:	40020000 	.word	0x40020000
 8003588:	40020800 	.word	0x40020800

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	2300      	movs	r3, #0
 800359c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a2:	4b63      	ldr	r3, [pc, #396]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d007      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x32>
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d008      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x38>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 80b4 	bne.w	8003720 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b5e      	ldr	r3, [pc, #376]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035ba:	60bb      	str	r3, [r7, #8]
       break;
 80035bc:	e0b3      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035be:	4b5e      	ldr	r3, [pc, #376]	; (8003738 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80035c0:	60bb      	str	r3, [r7, #8]
      break;
 80035c2:	e0b0      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4b5a      	ldr	r3, [pc, #360]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ce:	4b58      	ldr	r3, [pc, #352]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d04a      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035da:	4b55      	ldr	r3, [pc, #340]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	f04f 0400 	mov.w	r4, #0
 80035e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	ea03 0501 	and.w	r5, r3, r1
 80035f0:	ea04 0602 	and.w	r6, r4, r2
 80035f4:	4629      	mov	r1, r5
 80035f6:	4632      	mov	r2, r6
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	f04f 0400 	mov.w	r4, #0
 8003600:	0154      	lsls	r4, r2, #5
 8003602:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003606:	014b      	lsls	r3, r1, #5
 8003608:	4619      	mov	r1, r3
 800360a:	4622      	mov	r2, r4
 800360c:	1b49      	subs	r1, r1, r5
 800360e:	eb62 0206 	sbc.w	r2, r2, r6
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	f04f 0400 	mov.w	r4, #0
 800361a:	0194      	lsls	r4, r2, #6
 800361c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003620:	018b      	lsls	r3, r1, #6
 8003622:	1a5b      	subs	r3, r3, r1
 8003624:	eb64 0402 	sbc.w	r4, r4, r2
 8003628:	f04f 0100 	mov.w	r1, #0
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	00e2      	lsls	r2, r4, #3
 8003632:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003636:	00d9      	lsls	r1, r3, #3
 8003638:	460b      	mov	r3, r1
 800363a:	4614      	mov	r4, r2
 800363c:	195b      	adds	r3, r3, r5
 800363e:	eb44 0406 	adc.w	r4, r4, r6
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	0262      	lsls	r2, r4, #9
 800364c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003650:	0259      	lsls	r1, r3, #9
 8003652:	460b      	mov	r3, r1
 8003654:	4614      	mov	r4, r2
 8003656:	4618      	mov	r0, r3
 8003658:	4621      	mov	r1, r4
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f04f 0400 	mov.w	r4, #0
 8003660:	461a      	mov	r2, r3
 8003662:	4623      	mov	r3, r4
 8003664:	f7fc fe14 	bl	8000290 <__aeabi_uldivmod>
 8003668:	4603      	mov	r3, r0
 800366a:	460c      	mov	r4, r1
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	e049      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003670:	4b2f      	ldr	r3, [pc, #188]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	f04f 0400 	mov.w	r4, #0
 800367a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	ea03 0501 	and.w	r5, r3, r1
 8003686:	ea04 0602 	and.w	r6, r4, r2
 800368a:	4629      	mov	r1, r5
 800368c:	4632      	mov	r2, r6
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	f04f 0400 	mov.w	r4, #0
 8003696:	0154      	lsls	r4, r2, #5
 8003698:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800369c:	014b      	lsls	r3, r1, #5
 800369e:	4619      	mov	r1, r3
 80036a0:	4622      	mov	r2, r4
 80036a2:	1b49      	subs	r1, r1, r5
 80036a4:	eb62 0206 	sbc.w	r2, r2, r6
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	f04f 0400 	mov.w	r4, #0
 80036b0:	0194      	lsls	r4, r2, #6
 80036b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036b6:	018b      	lsls	r3, r1, #6
 80036b8:	1a5b      	subs	r3, r3, r1
 80036ba:	eb64 0402 	sbc.w	r4, r4, r2
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	00e2      	lsls	r2, r4, #3
 80036c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036cc:	00d9      	lsls	r1, r3, #3
 80036ce:	460b      	mov	r3, r1
 80036d0:	4614      	mov	r4, r2
 80036d2:	195b      	adds	r3, r3, r5
 80036d4:	eb44 0406 	adc.w	r4, r4, r6
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	02a2      	lsls	r2, r4, #10
 80036e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036e6:	0299      	lsls	r1, r3, #10
 80036e8:	460b      	mov	r3, r1
 80036ea:	4614      	mov	r4, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	4621      	mov	r1, r4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f04f 0400 	mov.w	r4, #0
 80036f6:	461a      	mov	r2, r3
 80036f8:	4623      	mov	r3, r4
 80036fa:	f7fc fdc9 	bl	8000290 <__aeabi_uldivmod>
 80036fe:	4603      	mov	r3, r0
 8003700:	460c      	mov	r4, r1
 8003702:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	3301      	adds	r3, #1
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	60bb      	str	r3, [r7, #8]
      break;
 800371e:	e002      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003722:	60bb      	str	r3, [r7, #8]
      break;
 8003724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003726:	68bb      	ldr	r3, [r7, #8]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003730:	40023800 	.word	0x40023800
 8003734:	00f42400 	.word	0x00f42400
 8003738:	007a1200 	.word	0x007a1200

0800373c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_RCC_GetHCLKFreq+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000004 	.word	0x20000004

08003754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003758:	f7ff fff0 	bl	800373c <HAL_RCC_GetHCLKFreq>
 800375c:	4601      	mov	r1, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0a9b      	lsrs	r3, r3, #10
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4a03      	ldr	r2, [pc, #12]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	0801f1b8 	.word	0x0801f1b8

0800377c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003780:	f7ff ffdc 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8003784:	4601      	mov	r1, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0b5b      	lsrs	r3, r3, #13
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4a03      	ldr	r2, [pc, #12]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003792:	5cd3      	ldrb	r3, [r2, r3]
 8003794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	0801f1b8 	.word	0x0801f1b8

080037a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	220f      	movs	r2, #15
 80037b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <HAL_RCC_GetClockConfig+0x5c>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0203 	and.w	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <HAL_RCC_GetClockConfig+0x5c>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <HAL_RCC_GetClockConfig+0x5c>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_GetClockConfig+0x5c>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	08db      	lsrs	r3, r3, #3
 80037de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037e6:	4b07      	ldr	r3, [pc, #28]	; (8003804 <HAL_RCC_GetClockConfig+0x60>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 020f 	and.w	r2, r3, #15
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	601a      	str	r2, [r3, #0]
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	40023c00 	.word	0x40023c00

08003808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e056      	b.n	80038c8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7fd fa0f 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003850:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	ea42 0103 	orr.w	r1, r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	0c1b      	lsrs	r3, r3, #16
 8003898:	f003 0104 	and.w	r1, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ec:	d112      	bne.n	8003914 <HAL_SPI_Receive+0x44>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10e      	bne.n	8003914 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2204      	movs	r2, #4
 80038fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f8e9 	bl	8003ae2 <HAL_SPI_TransmitReceive>
 8003910:	4603      	mov	r3, r0
 8003912:	e0e2      	b.n	8003ada <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_SPI_Receive+0x52>
 800391e:	2302      	movs	r3, #2
 8003920:	e0db      	b.n	8003ada <HAL_SPI_Receive+0x20a>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800392a:	f7fd fc7b 	bl	8001224 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d002      	beq.n	8003942 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800393c:	2302      	movs	r3, #2
 800393e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003940:	e0c2      	b.n	8003ac8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_SPI_Receive+0x7e>
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003952:	e0b9      	b.n	8003ac8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2204      	movs	r2, #4
 8003958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	88fa      	ldrh	r2, [r7, #6]
 800396c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399a:	d107      	bne.n	80039ac <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d007      	beq.n	80039ca <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d162      	bne.n	8003a98 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039d2:	e02e      	b.n	8003a32 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d115      	bne.n	8003a0e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f103 020c 	add.w	r2, r3, #12
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a0c:	e011      	b.n	8003a32 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a0e:	f7fd fc09 	bl	8001224 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d803      	bhi.n	8003a26 <HAL_SPI_Receive+0x156>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d102      	bne.n	8003a2c <HAL_SPI_Receive+0x15c>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a30:	e04a      	b.n	8003ac8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1cb      	bne.n	80039d4 <HAL_SPI_Receive+0x104>
 8003a3c:	e031      	b.n	8003aa2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d113      	bne.n	8003a74 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	b292      	uxth	r2, r2
 8003a58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	1c9a      	adds	r2, r3, #2
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a72:	e011      	b.n	8003a98 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a74:	f7fd fbd6 	bl	8001224 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d803      	bhi.n	8003a8c <HAL_SPI_Receive+0x1bc>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d102      	bne.n	8003a92 <HAL_SPI_Receive+0x1c2>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a96:	e017      	b.n	8003ac8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1cd      	bne.n	8003a3e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fb46 	bl	8004138 <SPI_EndRxTransaction>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	75fb      	strb	r3, [r7, #23]
 8003ac4:	e000      	b.n	8003ac8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003ac6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b08c      	sub	sp, #48	; 0x30
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
 8003aee:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003af0:	2301      	movs	r3, #1
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x26>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e18a      	b.n	8003e1e <HAL_SPI_TransmitReceive+0x33c>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b10:	f7fd fb88 	bl	8001224 <HAL_GetTick>
 8003b14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d00f      	beq.n	8003b52 <HAL_SPI_TransmitReceive+0x70>
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b38:	d107      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x68>
 8003b42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d003      	beq.n	8003b52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b50:	e15b      	b.n	8003e0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x82>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x82>
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d103      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b6a:	e14e      	b.n	8003e0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d003      	beq.n	8003b80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2205      	movs	r2, #5
 8003b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	887a      	ldrh	r2, [r7, #2]
 8003b96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	887a      	ldrh	r2, [r7, #2]
 8003ba2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d007      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bdc:	d178      	bne.n	8003cd0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_SPI_TransmitReceive+0x10a>
 8003be6:	8b7b      	ldrh	r3, [r7, #26]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d166      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	881a      	ldrh	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	1c9a      	adds	r2, r3, #2
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c10:	e053      	b.n	8003cba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d11b      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x176>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d016      	beq.n	8003c58 <HAL_SPI_TransmitReceive+0x176>
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d113      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d119      	bne.n	8003c9a <HAL_SPI_TransmitReceive+0x1b8>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d014      	beq.n	8003c9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c96:	2301      	movs	r3, #1
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c9a:	f7fd fac3 	bl	8001224 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d807      	bhi.n	8003cba <HAL_SPI_TransmitReceive+0x1d8>
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d003      	beq.n	8003cba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cb8:	e0a7      	b.n	8003e0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1a6      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x130>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1a1      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x130>
 8003cce:	e07c      	b.n	8003dca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_SPI_TransmitReceive+0x1fc>
 8003cd8:	8b7b      	ldrh	r3, [r7, #26]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d16b      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	7812      	ldrb	r2, [r2, #0]
 8003cea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d04:	e057      	b.n	8003db6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d11c      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x26c>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d017      	beq.n	8003d4e <HAL_SPI_TransmitReceive+0x26c>
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d114      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	7812      	ldrb	r2, [r2, #0]
 8003d30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d119      	bne.n	8003d90 <HAL_SPI_TransmitReceive+0x2ae>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d014      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d90:	f7fd fa48 	bl	8001224 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d803      	bhi.n	8003da8 <HAL_SPI_TransmitReceive+0x2c6>
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d102      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x2cc>
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003db4:	e029      	b.n	8003e0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1a2      	bne.n	8003d06 <HAL_SPI_TransmitReceive+0x224>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d19d      	bne.n	8003d06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fa18 	bl	8004204 <SPI_EndRxTxTransaction>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003de6:	e010      	b.n	8003e0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	e000      	b.n	8003e0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3730      	adds	r7, #48	; 0x30
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10f      	bne.n	8003e6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	099b      	lsrs	r3, r3, #6
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	4798      	blx	r3
    return;
 8003e6a:	e0d8      	b.n	800401e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_SPI_IRQHandler+0x66>
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	09db      	lsrs	r3, r3, #7
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
    return;
 8003e8c:	e0c7      	b.n	800401e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10c      	bne.n	8003eb4 <HAL_SPI_IRQHandler+0x8c>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80b5 	beq.w	800401e <HAL_SPI_IRQHandler+0x1f6>
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80ae 	beq.w	800401e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	099b      	lsrs	r3, r3, #6
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d023      	beq.n	8003f16 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d011      	beq.n	8003efe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	f043 0204 	orr.w	r2, r3, #4
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	e00b      	b.n	8003f16 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]
        return;
 8003f14:	e083      	b.n	800401e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d014      	beq.n	8003f4c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00c      	beq.n	8003f72 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	f043 0208 	orr.w	r2, r3, #8
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d050      	beq.n	800401c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f88:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <HAL_SPI_IRQHandler+0x17e>
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d034      	beq.n	8004010 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0203 	bic.w	r2, r2, #3
 8003fb4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d011      	beq.n	8003fe2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	4a18      	ldr	r2, [pc, #96]	; (8004024 <HAL_SPI_IRQHandler+0x1fc>)
 8003fc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd fa3a 	bl	8001444 <HAL_DMA_Abort_IT>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d016      	beq.n	8004018 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fee:	4a0d      	ldr	r2, [pc, #52]	; (8004024 <HAL_SPI_IRQHandler+0x1fc>)
 8003ff0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd fa24 	bl	8001444 <HAL_DMA_Abort_IT>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800400e:	e003      	b.n	8004018 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f809 	bl	8004028 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004016:	e000      	b.n	800401a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004018:	bf00      	nop
    return;
 800401a:	bf00      	nop
 800401c:	bf00      	nop
  }
}
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	0800403d 	.word	0x0800403d

08004028 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff ffe6 	bl	8004028 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004074:	e04c      	b.n	8004110 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d048      	beq.n	8004110 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800407e:	f7fd f8d1 	bl	8001224 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d902      	bls.n	8004094 <SPI_WaitFlagStateUntilTimeout+0x30>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d13d      	bne.n	8004110 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ac:	d111      	bne.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b6:	d004      	beq.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c0:	d107      	bne.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040da:	d10f      	bne.n	80040fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e00f      	b.n	8004130 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	429a      	cmp	r2, r3
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	429a      	cmp	r2, r3
 800412c:	d1a3      	bne.n	8004076 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414c:	d111      	bne.n	8004172 <SPI_EndRxTransaction+0x3a>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004156:	d004      	beq.n	8004162 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004160:	d107      	bne.n	8004172 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004170:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800417a:	d12a      	bne.n	80041d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004184:	d012      	beq.n	80041ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2200      	movs	r2, #0
 800418e:	2180      	movs	r1, #128	; 0x80
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff ff67 	bl	8004064 <SPI_WaitFlagStateUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02d      	beq.n	80041f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	f043 0220 	orr.w	r2, r3, #32
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e026      	b.n	80041fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2200      	movs	r2, #0
 80041b4:	2101      	movs	r1, #1
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f7ff ff54 	bl	8004064 <SPI_WaitFlagStateUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01a      	beq.n	80041f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e013      	b.n	80041fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2200      	movs	r2, #0
 80041da:	2101      	movs	r1, #1
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff ff41 	bl	8004064 <SPI_WaitFlagStateUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e000      	b.n	80041fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <SPI_EndRxTxTransaction+0x7c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <SPI_EndRxTxTransaction+0x80>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	0d5b      	lsrs	r3, r3, #21
 800421c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004220:	fb02 f303 	mul.w	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800422e:	d112      	bne.n	8004256 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2200      	movs	r2, #0
 8004238:	2180      	movs	r1, #128	; 0x80
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff ff12 	bl	8004064 <SPI_WaitFlagStateUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f043 0220 	orr.w	r2, r3, #32
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e00f      	b.n	8004276 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	3b01      	subs	r3, #1
 8004260:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b80      	cmp	r3, #128	; 0x80
 800426e:	d0f2      	beq.n	8004256 <SPI_EndRxTxTransaction+0x52>
 8004270:	e000      	b.n	8004274 <SPI_EndRxTxTransaction+0x70>
        break;
 8004272:	bf00      	nop
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000004 	.word	0x20000004
 8004284:	165e9f81 	.word	0x165e9f81

08004288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e01d      	b.n	80042d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f815 	bl	80042de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f000 f968 	bl	800459c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b06      	cmp	r3, #6
 800431a:	d007      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	d122      	bne.n	8004396 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b02      	cmp	r3, #2
 800435c:	d11b      	bne.n	8004396 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f06f 0202 	mvn.w	r2, #2
 8004366:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f8ee 	bl	800455e <HAL_TIM_IC_CaptureCallback>
 8004382:	e005      	b.n	8004390 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f8e0 	bl	800454a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8f1 	bl	8004572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d122      	bne.n	80043ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d11b      	bne.n	80043ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f06f 0204 	mvn.w	r2, #4
 80043ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f8c4 	bl	800455e <HAL_TIM_IC_CaptureCallback>
 80043d6:	e005      	b.n	80043e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f8b6 	bl	800454a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f8c7 	bl	8004572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d122      	bne.n	800443e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b08      	cmp	r3, #8
 8004404:	d11b      	bne.n	800443e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f06f 0208 	mvn.w	r2, #8
 800440e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2204      	movs	r2, #4
 8004414:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f89a 	bl	800455e <HAL_TIM_IC_CaptureCallback>
 800442a:	e005      	b.n	8004438 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f88c 	bl	800454a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f89d 	bl	8004572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b10      	cmp	r3, #16
 800444a:	d122      	bne.n	8004492 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b10      	cmp	r3, #16
 8004458:	d11b      	bne.n	8004492 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0210 	mvn.w	r2, #16
 8004462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2208      	movs	r2, #8
 8004468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f870 	bl	800455e <HAL_TIM_IC_CaptureCallback>
 800447e:	e005      	b.n	800448c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f862 	bl	800454a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f873 	bl	8004572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	d10e      	bne.n	80044be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f06f 0201 	mvn.w	r2, #1
 80044b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fc fb8b 	bl	8000bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	2b80      	cmp	r3, #128	; 0x80
 80044ca:	d10e      	bne.n	80044ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b80      	cmp	r3, #128	; 0x80
 80044d8:	d107      	bne.n	80044ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f903 	bl	80046f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d10e      	bne.n	8004516 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d107      	bne.n	8004516 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800450e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f838 	bl	8004586 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b20      	cmp	r3, #32
 8004522:	d10e      	bne.n	8004542 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b20      	cmp	r3, #32
 8004530:	d107      	bne.n	8004542 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f06f 0220 	mvn.w	r2, #32
 800453a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f8cd 	bl	80046dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a40      	ldr	r2, [pc, #256]	; (80046b0 <TIM_Base_SetConfig+0x114>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d013      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ba:	d00f      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3d      	ldr	r2, [pc, #244]	; (80046b4 <TIM_Base_SetConfig+0x118>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00b      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3c      	ldr	r2, [pc, #240]	; (80046b8 <TIM_Base_SetConfig+0x11c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a3b      	ldr	r2, [pc, #236]	; (80046bc <TIM_Base_SetConfig+0x120>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a3a      	ldr	r2, [pc, #232]	; (80046c0 <TIM_Base_SetConfig+0x124>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2f      	ldr	r2, [pc, #188]	; (80046b0 <TIM_Base_SetConfig+0x114>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d02b      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fc:	d027      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <TIM_Base_SetConfig+0x118>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d023      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2b      	ldr	r2, [pc, #172]	; (80046b8 <TIM_Base_SetConfig+0x11c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01f      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a2a      	ldr	r2, [pc, #168]	; (80046bc <TIM_Base_SetConfig+0x120>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01b      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a29      	ldr	r2, [pc, #164]	; (80046c0 <TIM_Base_SetConfig+0x124>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d017      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a28      	ldr	r2, [pc, #160]	; (80046c4 <TIM_Base_SetConfig+0x128>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <TIM_Base_SetConfig+0x12c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00f      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a26      	ldr	r2, [pc, #152]	; (80046cc <TIM_Base_SetConfig+0x130>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00b      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <TIM_Base_SetConfig+0x134>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a24      	ldr	r2, [pc, #144]	; (80046d4 <TIM_Base_SetConfig+0x138>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <TIM_Base_SetConfig+0x13c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d108      	bne.n	8004660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <TIM_Base_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_Base_SetConfig+0xf8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a0c      	ldr	r2, [pc, #48]	; (80046c0 <TIM_Base_SetConfig+0x124>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d103      	bne.n	800469c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	615a      	str	r2, [r3, #20]
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40010400 	.word	0x40010400
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40014400 	.word	0x40014400
 80046cc:	40014800 	.word	0x40014800
 80046d0:	40001800 	.word	0x40001800
 80046d4:	40001c00 	.word	0x40001c00
 80046d8:	40002000 	.word	0x40002000

080046dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e03f      	b.n	8004796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fc fb04 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2224      	movs	r2, #36	; 0x24
 8004734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f90b 	bl	8004964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b088      	sub	sp, #32
 80047a2:	af02      	add	r7, sp, #8
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	f040 8083 	bne.w	80048c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_UART_Transmit+0x2e>
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e07b      	b.n	80048c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_UART_Transmit+0x40>
 80047da:	2302      	movs	r3, #2
 80047dc:	e074      	b.n	80048c8 <HAL_UART_Transmit+0x12a>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2221      	movs	r2, #33	; 0x21
 80047f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047f4:	f7fc fd16 	bl	8001224 <HAL_GetTick>
 80047f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800480e:	e042      	b.n	8004896 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004826:	d122      	bne.n	800486e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2200      	movs	r2, #0
 8004830:	2180      	movs	r1, #128	; 0x80
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f84c 	bl	80048d0 <UART_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e042      	b.n	80048c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004854:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3302      	adds	r3, #2
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	e017      	b.n	8004896 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	3301      	adds	r3, #1
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	e013      	b.n	8004896 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	2180      	movs	r1, #128	; 0x80
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f829 	bl	80048d0 <UART_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e01f      	b.n	80048c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	60ba      	str	r2, [r7, #8]
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1b7      	bne.n	8004810 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2140      	movs	r1, #64	; 0x40
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f810 	bl	80048d0 <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e006      	b.n	80048c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e000      	b.n	80048c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
  }
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e0:	e02c      	b.n	800493c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d028      	beq.n	800493c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0x30>
 80048f0:	f7fc fc98 	bl	8001224 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d21d      	bcs.n	800493c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800490e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0201 	bic.w	r2, r2, #1
 800491e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e00f      	b.n	800495c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	4013      	ands	r3, r2
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	429a      	cmp	r2, r3
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	429a      	cmp	r2, r3
 8004958:	d0c3      	beq.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80049a6:	f023 030c 	bic.w	r3, r3, #12
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	430b      	orrs	r3, r1
 80049b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d2:	f040 818b 	bne.w	8004cec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4ac1      	ldr	r2, [pc, #772]	; (8004ce0 <UART_SetConfig+0x37c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d005      	beq.n	80049ec <UART_SetConfig+0x88>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4abf      	ldr	r2, [pc, #764]	; (8004ce4 <UART_SetConfig+0x380>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	f040 80bd 	bne.w	8004b66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049ec:	f7fe fec6 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 80049f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	461d      	mov	r5, r3
 80049f6:	f04f 0600 	mov.w	r6, #0
 80049fa:	46a8      	mov	r8, r5
 80049fc:	46b1      	mov	r9, r6
 80049fe:	eb18 0308 	adds.w	r3, r8, r8
 8004a02:	eb49 0409 	adc.w	r4, r9, r9
 8004a06:	4698      	mov	r8, r3
 8004a08:	46a1      	mov	r9, r4
 8004a0a:	eb18 0805 	adds.w	r8, r8, r5
 8004a0e:	eb49 0906 	adc.w	r9, r9, r6
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a26:	4688      	mov	r8, r1
 8004a28:	4691      	mov	r9, r2
 8004a2a:	eb18 0005 	adds.w	r0, r8, r5
 8004a2e:	eb49 0106 	adc.w	r1, r9, r6
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	461d      	mov	r5, r3
 8004a38:	f04f 0600 	mov.w	r6, #0
 8004a3c:	196b      	adds	r3, r5, r5
 8004a3e:	eb46 0406 	adc.w	r4, r6, r6
 8004a42:	461a      	mov	r2, r3
 8004a44:	4623      	mov	r3, r4
 8004a46:	f7fb fc23 	bl	8000290 <__aeabi_uldivmod>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4ba5      	ldr	r3, [pc, #660]	; (8004ce8 <UART_SetConfig+0x384>)
 8004a52:	fba3 2302 	umull	r2, r3, r3, r2
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	461d      	mov	r5, r3
 8004a60:	f04f 0600 	mov.w	r6, #0
 8004a64:	46a9      	mov	r9, r5
 8004a66:	46b2      	mov	sl, r6
 8004a68:	eb19 0309 	adds.w	r3, r9, r9
 8004a6c:	eb4a 040a 	adc.w	r4, sl, sl
 8004a70:	4699      	mov	r9, r3
 8004a72:	46a2      	mov	sl, r4
 8004a74:	eb19 0905 	adds.w	r9, r9, r5
 8004a78:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a7c:	f04f 0100 	mov.w	r1, #0
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a90:	4689      	mov	r9, r1
 8004a92:	4692      	mov	sl, r2
 8004a94:	eb19 0005 	adds.w	r0, r9, r5
 8004a98:	eb4a 0106 	adc.w	r1, sl, r6
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	461d      	mov	r5, r3
 8004aa2:	f04f 0600 	mov.w	r6, #0
 8004aa6:	196b      	adds	r3, r5, r5
 8004aa8:	eb46 0406 	adc.w	r4, r6, r6
 8004aac:	461a      	mov	r2, r3
 8004aae:	4623      	mov	r3, r4
 8004ab0:	f7fb fbee 	bl	8000290 <__aeabi_uldivmod>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4b8b      	ldr	r3, [pc, #556]	; (8004ce8 <UART_SetConfig+0x384>)
 8004abc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	2164      	movs	r1, #100	; 0x64
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	3332      	adds	r3, #50	; 0x32
 8004ace:	4a86      	ldr	r2, [pc, #536]	; (8004ce8 <UART_SetConfig+0x384>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004adc:	4498      	add	r8, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	461d      	mov	r5, r3
 8004ae2:	f04f 0600 	mov.w	r6, #0
 8004ae6:	46a9      	mov	r9, r5
 8004ae8:	46b2      	mov	sl, r6
 8004aea:	eb19 0309 	adds.w	r3, r9, r9
 8004aee:	eb4a 040a 	adc.w	r4, sl, sl
 8004af2:	4699      	mov	r9, r3
 8004af4:	46a2      	mov	sl, r4
 8004af6:	eb19 0905 	adds.w	r9, r9, r5
 8004afa:	eb4a 0a06 	adc.w	sl, sl, r6
 8004afe:	f04f 0100 	mov.w	r1, #0
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b12:	4689      	mov	r9, r1
 8004b14:	4692      	mov	sl, r2
 8004b16:	eb19 0005 	adds.w	r0, r9, r5
 8004b1a:	eb4a 0106 	adc.w	r1, sl, r6
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	461d      	mov	r5, r3
 8004b24:	f04f 0600 	mov.w	r6, #0
 8004b28:	196b      	adds	r3, r5, r5
 8004b2a:	eb46 0406 	adc.w	r4, r6, r6
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4623      	mov	r3, r4
 8004b32:	f7fb fbad 	bl	8000290 <__aeabi_uldivmod>
 8004b36:	4603      	mov	r3, r0
 8004b38:	460c      	mov	r4, r1
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	4b6a      	ldr	r3, [pc, #424]	; (8004ce8 <UART_SetConfig+0x384>)
 8004b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	2164      	movs	r1, #100	; 0x64
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	3332      	adds	r3, #50	; 0x32
 8004b50:	4a65      	ldr	r2, [pc, #404]	; (8004ce8 <UART_SetConfig+0x384>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	f003 0207 	and.w	r2, r3, #7
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4442      	add	r2, r8
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	e26f      	b.n	8005046 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b66:	f7fe fdf5 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8004b6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	461d      	mov	r5, r3
 8004b70:	f04f 0600 	mov.w	r6, #0
 8004b74:	46a8      	mov	r8, r5
 8004b76:	46b1      	mov	r9, r6
 8004b78:	eb18 0308 	adds.w	r3, r8, r8
 8004b7c:	eb49 0409 	adc.w	r4, r9, r9
 8004b80:	4698      	mov	r8, r3
 8004b82:	46a1      	mov	r9, r4
 8004b84:	eb18 0805 	adds.w	r8, r8, r5
 8004b88:	eb49 0906 	adc.w	r9, r9, r6
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ba0:	4688      	mov	r8, r1
 8004ba2:	4691      	mov	r9, r2
 8004ba4:	eb18 0005 	adds.w	r0, r8, r5
 8004ba8:	eb49 0106 	adc.w	r1, r9, r6
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	461d      	mov	r5, r3
 8004bb2:	f04f 0600 	mov.w	r6, #0
 8004bb6:	196b      	adds	r3, r5, r5
 8004bb8:	eb46 0406 	adc.w	r4, r6, r6
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	f7fb fb66 	bl	8000290 <__aeabi_uldivmod>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4b47      	ldr	r3, [pc, #284]	; (8004ce8 <UART_SetConfig+0x384>)
 8004bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	461d      	mov	r5, r3
 8004bda:	f04f 0600 	mov.w	r6, #0
 8004bde:	46a9      	mov	r9, r5
 8004be0:	46b2      	mov	sl, r6
 8004be2:	eb19 0309 	adds.w	r3, r9, r9
 8004be6:	eb4a 040a 	adc.w	r4, sl, sl
 8004bea:	4699      	mov	r9, r3
 8004bec:	46a2      	mov	sl, r4
 8004bee:	eb19 0905 	adds.w	r9, r9, r5
 8004bf2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c0a:	4689      	mov	r9, r1
 8004c0c:	4692      	mov	sl, r2
 8004c0e:	eb19 0005 	adds.w	r0, r9, r5
 8004c12:	eb4a 0106 	adc.w	r1, sl, r6
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	461d      	mov	r5, r3
 8004c1c:	f04f 0600 	mov.w	r6, #0
 8004c20:	196b      	adds	r3, r5, r5
 8004c22:	eb46 0406 	adc.w	r4, r6, r6
 8004c26:	461a      	mov	r2, r3
 8004c28:	4623      	mov	r3, r4
 8004c2a:	f7fb fb31 	bl	8000290 <__aeabi_uldivmod>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	460c      	mov	r4, r1
 8004c32:	461a      	mov	r2, r3
 8004c34:	4b2c      	ldr	r3, [pc, #176]	; (8004ce8 <UART_SetConfig+0x384>)
 8004c36:	fba3 1302 	umull	r1, r3, r3, r2
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	2164      	movs	r1, #100	; 0x64
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	3332      	adds	r3, #50	; 0x32
 8004c48:	4a27      	ldr	r2, [pc, #156]	; (8004ce8 <UART_SetConfig+0x384>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c56:	4498      	add	r8, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	461d      	mov	r5, r3
 8004c5c:	f04f 0600 	mov.w	r6, #0
 8004c60:	46a9      	mov	r9, r5
 8004c62:	46b2      	mov	sl, r6
 8004c64:	eb19 0309 	adds.w	r3, r9, r9
 8004c68:	eb4a 040a 	adc.w	r4, sl, sl
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	46a2      	mov	sl, r4
 8004c70:	eb19 0905 	adds.w	r9, r9, r5
 8004c74:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c8c:	4689      	mov	r9, r1
 8004c8e:	4692      	mov	sl, r2
 8004c90:	eb19 0005 	adds.w	r0, r9, r5
 8004c94:	eb4a 0106 	adc.w	r1, sl, r6
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	461d      	mov	r5, r3
 8004c9e:	f04f 0600 	mov.w	r6, #0
 8004ca2:	196b      	adds	r3, r5, r5
 8004ca4:	eb46 0406 	adc.w	r4, r6, r6
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4623      	mov	r3, r4
 8004cac:	f7fb faf0 	bl	8000290 <__aeabi_uldivmod>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <UART_SetConfig+0x384>)
 8004cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	2164      	movs	r1, #100	; 0x64
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	3332      	adds	r3, #50	; 0x32
 8004cca:	4a07      	ldr	r2, [pc, #28]	; (8004ce8 <UART_SetConfig+0x384>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	f003 0207 	and.w	r2, r3, #7
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4442      	add	r2, r8
 8004cdc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004cde:	e1b2      	b.n	8005046 <UART_SetConfig+0x6e2>
 8004ce0:	40011000 	.word	0x40011000
 8004ce4:	40011400 	.word	0x40011400
 8004ce8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4ad7      	ldr	r2, [pc, #860]	; (8005050 <UART_SetConfig+0x6ec>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d005      	beq.n	8004d02 <UART_SetConfig+0x39e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4ad6      	ldr	r2, [pc, #856]	; (8005054 <UART_SetConfig+0x6f0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	f040 80d1 	bne.w	8004ea4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d02:	f7fe fd3b 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 8004d06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	469a      	mov	sl, r3
 8004d0c:	f04f 0b00 	mov.w	fp, #0
 8004d10:	46d0      	mov	r8, sl
 8004d12:	46d9      	mov	r9, fp
 8004d14:	eb18 0308 	adds.w	r3, r8, r8
 8004d18:	eb49 0409 	adc.w	r4, r9, r9
 8004d1c:	4698      	mov	r8, r3
 8004d1e:	46a1      	mov	r9, r4
 8004d20:	eb18 080a 	adds.w	r8, r8, sl
 8004d24:	eb49 090b 	adc.w	r9, r9, fp
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d3c:	4688      	mov	r8, r1
 8004d3e:	4691      	mov	r9, r2
 8004d40:	eb1a 0508 	adds.w	r5, sl, r8
 8004d44:	eb4b 0609 	adc.w	r6, fp, r9
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	f04f 0400 	mov.w	r4, #0
 8004d5a:	0094      	lsls	r4, r2, #2
 8004d5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d60:	008b      	lsls	r3, r1, #2
 8004d62:	461a      	mov	r2, r3
 8004d64:	4623      	mov	r3, r4
 8004d66:	4628      	mov	r0, r5
 8004d68:	4631      	mov	r1, r6
 8004d6a:	f7fb fa91 	bl	8000290 <__aeabi_uldivmod>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	460c      	mov	r4, r1
 8004d72:	461a      	mov	r2, r3
 8004d74:	4bb8      	ldr	r3, [pc, #736]	; (8005058 <UART_SetConfig+0x6f4>)
 8004d76:	fba3 2302 	umull	r2, r3, r3, r2
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	469b      	mov	fp, r3
 8004d84:	f04f 0c00 	mov.w	ip, #0
 8004d88:	46d9      	mov	r9, fp
 8004d8a:	46e2      	mov	sl, ip
 8004d8c:	eb19 0309 	adds.w	r3, r9, r9
 8004d90:	eb4a 040a 	adc.w	r4, sl, sl
 8004d94:	4699      	mov	r9, r3
 8004d96:	46a2      	mov	sl, r4
 8004d98:	eb19 090b 	adds.w	r9, r9, fp
 8004d9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004da0:	f04f 0100 	mov.w	r1, #0
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004db4:	4689      	mov	r9, r1
 8004db6:	4692      	mov	sl, r2
 8004db8:	eb1b 0509 	adds.w	r5, fp, r9
 8004dbc:	eb4c 060a 	adc.w	r6, ip, sl
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	f04f 0400 	mov.w	r4, #0
 8004dd2:	0094      	lsls	r4, r2, #2
 8004dd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dd8:	008b      	lsls	r3, r1, #2
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4623      	mov	r3, r4
 8004dde:	4628      	mov	r0, r5
 8004de0:	4631      	mov	r1, r6
 8004de2:	f7fb fa55 	bl	8000290 <__aeabi_uldivmod>
 8004de6:	4603      	mov	r3, r0
 8004de8:	460c      	mov	r4, r1
 8004dea:	461a      	mov	r2, r3
 8004dec:	4b9a      	ldr	r3, [pc, #616]	; (8005058 <UART_SetConfig+0x6f4>)
 8004dee:	fba3 1302 	umull	r1, r3, r3, r2
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	2164      	movs	r1, #100	; 0x64
 8004df6:	fb01 f303 	mul.w	r3, r1, r3
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	3332      	adds	r3, #50	; 0x32
 8004e00:	4a95      	ldr	r2, [pc, #596]	; (8005058 <UART_SetConfig+0x6f4>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e0c:	4498      	add	r8, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	469b      	mov	fp, r3
 8004e12:	f04f 0c00 	mov.w	ip, #0
 8004e16:	46d9      	mov	r9, fp
 8004e18:	46e2      	mov	sl, ip
 8004e1a:	eb19 0309 	adds.w	r3, r9, r9
 8004e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8004e22:	4699      	mov	r9, r3
 8004e24:	46a2      	mov	sl, r4
 8004e26:	eb19 090b 	adds.w	r9, r9, fp
 8004e2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e42:	4689      	mov	r9, r1
 8004e44:	4692      	mov	sl, r2
 8004e46:	eb1b 0509 	adds.w	r5, fp, r9
 8004e4a:	eb4c 060a 	adc.w	r6, ip, sl
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4619      	mov	r1, r3
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	f04f 0400 	mov.w	r4, #0
 8004e60:	0094      	lsls	r4, r2, #2
 8004e62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e66:	008b      	lsls	r3, r1, #2
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	4631      	mov	r1, r6
 8004e70:	f7fb fa0e 	bl	8000290 <__aeabi_uldivmod>
 8004e74:	4603      	mov	r3, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4b77      	ldr	r3, [pc, #476]	; (8005058 <UART_SetConfig+0x6f4>)
 8004e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	2164      	movs	r1, #100	; 0x64
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	3332      	adds	r3, #50	; 0x32
 8004e8e:	4a72      	ldr	r2, [pc, #456]	; (8005058 <UART_SetConfig+0x6f4>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	f003 020f 	and.w	r2, r3, #15
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4442      	add	r2, r8
 8004ea0:	609a      	str	r2, [r3, #8]
 8004ea2:	e0d0      	b.n	8005046 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7fe fc56 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8004ea8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	469a      	mov	sl, r3
 8004eae:	f04f 0b00 	mov.w	fp, #0
 8004eb2:	46d0      	mov	r8, sl
 8004eb4:	46d9      	mov	r9, fp
 8004eb6:	eb18 0308 	adds.w	r3, r8, r8
 8004eba:	eb49 0409 	adc.w	r4, r9, r9
 8004ebe:	4698      	mov	r8, r3
 8004ec0:	46a1      	mov	r9, r4
 8004ec2:	eb18 080a 	adds.w	r8, r8, sl
 8004ec6:	eb49 090b 	adc.w	r9, r9, fp
 8004eca:	f04f 0100 	mov.w	r1, #0
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ed6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004eda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ede:	4688      	mov	r8, r1
 8004ee0:	4691      	mov	r9, r2
 8004ee2:	eb1a 0508 	adds.w	r5, sl, r8
 8004ee6:	eb4b 0609 	adc.w	r6, fp, r9
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	f04f 0400 	mov.w	r4, #0
 8004efc:	0094      	lsls	r4, r2, #2
 8004efe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f02:	008b      	lsls	r3, r1, #2
 8004f04:	461a      	mov	r2, r3
 8004f06:	4623      	mov	r3, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	f7fb f9c0 	bl	8000290 <__aeabi_uldivmod>
 8004f10:	4603      	mov	r3, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	461a      	mov	r2, r3
 8004f16:	4b50      	ldr	r3, [pc, #320]	; (8005058 <UART_SetConfig+0x6f4>)
 8004f18:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	469b      	mov	fp, r3
 8004f26:	f04f 0c00 	mov.w	ip, #0
 8004f2a:	46d9      	mov	r9, fp
 8004f2c:	46e2      	mov	sl, ip
 8004f2e:	eb19 0309 	adds.w	r3, r9, r9
 8004f32:	eb4a 040a 	adc.w	r4, sl, sl
 8004f36:	4699      	mov	r9, r3
 8004f38:	46a2      	mov	sl, r4
 8004f3a:	eb19 090b 	adds.w	r9, r9, fp
 8004f3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f42:	f04f 0100 	mov.w	r1, #0
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f56:	4689      	mov	r9, r1
 8004f58:	4692      	mov	sl, r2
 8004f5a:	eb1b 0509 	adds.w	r5, fp, r9
 8004f5e:	eb4c 060a 	adc.w	r6, ip, sl
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4619      	mov	r1, r3
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	f04f 0400 	mov.w	r4, #0
 8004f74:	0094      	lsls	r4, r2, #2
 8004f76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f7a:	008b      	lsls	r3, r1, #2
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4623      	mov	r3, r4
 8004f80:	4628      	mov	r0, r5
 8004f82:	4631      	mov	r1, r6
 8004f84:	f7fb f984 	bl	8000290 <__aeabi_uldivmod>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4b32      	ldr	r3, [pc, #200]	; (8005058 <UART_SetConfig+0x6f4>)
 8004f90:	fba3 1302 	umull	r1, r3, r3, r2
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	2164      	movs	r1, #100	; 0x64
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	3332      	adds	r3, #50	; 0x32
 8004fa2:	4a2d      	ldr	r2, [pc, #180]	; (8005058 <UART_SetConfig+0x6f4>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fae:	4498      	add	r8, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	469b      	mov	fp, r3
 8004fb4:	f04f 0c00 	mov.w	ip, #0
 8004fb8:	46d9      	mov	r9, fp
 8004fba:	46e2      	mov	sl, ip
 8004fbc:	eb19 0309 	adds.w	r3, r9, r9
 8004fc0:	eb4a 040a 	adc.w	r4, sl, sl
 8004fc4:	4699      	mov	r9, r3
 8004fc6:	46a2      	mov	sl, r4
 8004fc8:	eb19 090b 	adds.w	r9, r9, fp
 8004fcc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fd0:	f04f 0100 	mov.w	r1, #0
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fe4:	4689      	mov	r9, r1
 8004fe6:	4692      	mov	sl, r2
 8004fe8:	eb1b 0509 	adds.w	r5, fp, r9
 8004fec:	eb4c 060a 	adc.w	r6, ip, sl
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	f04f 0400 	mov.w	r4, #0
 8005002:	0094      	lsls	r4, r2, #2
 8005004:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005008:	008b      	lsls	r3, r1, #2
 800500a:	461a      	mov	r2, r3
 800500c:	4623      	mov	r3, r4
 800500e:	4628      	mov	r0, r5
 8005010:	4631      	mov	r1, r6
 8005012:	f7fb f93d 	bl	8000290 <__aeabi_uldivmod>
 8005016:	4603      	mov	r3, r0
 8005018:	460c      	mov	r4, r1
 800501a:	461a      	mov	r2, r3
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <UART_SetConfig+0x6f4>)
 800501e:	fba3 1302 	umull	r1, r3, r3, r2
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2164      	movs	r1, #100	; 0x64
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	3332      	adds	r3, #50	; 0x32
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <UART_SetConfig+0x6f4>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	f003 020f 	and.w	r2, r3, #15
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4442      	add	r2, r8
 8005042:	609a      	str	r2, [r3, #8]
}
 8005044:	e7ff      	b.n	8005046 <UART_SetConfig+0x6e2>
 8005046:	bf00      	nop
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005050:	40011000 	.word	0x40011000
 8005054:	40011400 	.word	0x40011400
 8005058:	51eb851f 	.word	0x51eb851f

0800505c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800505c:	b084      	sub	sp, #16
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	f107 001c 	add.w	r0, r7, #28
 800506a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	2b01      	cmp	r3, #1
 8005072:	d122      	bne.n	80050ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800509c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fa56 	bl	8005560 <USB_CoreReset>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e01a      	b.n	80050f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa4a 	bl	8005560 <USB_CoreReset>
 80050cc:	4603      	mov	r3, r0
 80050ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38
 80050e2:	e005      	b.n	80050f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10b      	bne.n	800510e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f043 0206 	orr.w	r2, r3, #6
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800511a:	b004      	add	sp, #16
 800511c:	4770      	bx	lr

0800511e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f023 0201 	bic.w	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d106      	bne.n	800516c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	e00b      	b.n	8005184 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	e001      	b.n	8005184 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e003      	b.n	800518c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005184:	2032      	movs	r0, #50	; 0x32
 8005186:	f7fc f859 	bl	800123c <HAL_Delay>

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005194:	b084      	sub	sp, #16
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	e009      	b.n	80051c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3340      	adds	r3, #64	; 0x40
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	2200      	movs	r2, #0
 80051c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	3301      	adds	r3, #1
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b0e      	cmp	r3, #14
 80051cc:	d9f2      	bls.n	80051b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d11c      	bne.n	800520e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e2:	f043 0302 	orr.w	r3, r3, #2
 80051e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
 800520c:	e00b      	b.n	8005226 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800522c:	461a      	mov	r2, r3
 800522e:	2300      	movs	r3, #0
 8005230:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005238:	4619      	mov	r1, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	461a      	mov	r2, r3
 8005242:	680b      	ldr	r3, [r1, #0]
 8005244:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	2b01      	cmp	r3, #1
 800524a:	d10c      	bne.n	8005266 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005252:	2100      	movs	r1, #0
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f949 	bl	80054ec <USB_SetDevSpeed>
 800525a:	e008      	b.n	800526e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800525c:	2101      	movs	r1, #1
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f944 	bl	80054ec <USB_SetDevSpeed>
 8005264:	e003      	b.n	800526e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005266:	2103      	movs	r1, #3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f93f 	bl	80054ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800526e:	2110      	movs	r1, #16
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f8f3 	bl	800545c <USB_FlushTxFifo>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f911 	bl	80054a8 <USB_FlushRxFifo>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	461a      	mov	r2, r3
 8005298:	2300      	movs	r3, #0
 800529a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a2:	461a      	mov	r2, r3
 80052a4:	2300      	movs	r3, #0
 80052a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ae:	461a      	mov	r2, r3
 80052b0:	2300      	movs	r3, #0
 80052b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e043      	b.n	8005342 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d0:	d118      	bne.n	8005304 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	461a      	mov	r2, r3
 80052e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	e013      	b.n	8005316 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fa:	461a      	mov	r2, r3
 80052fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e008      	b.n	8005316 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	461a      	mov	r2, r3
 8005324:	2300      	movs	r3, #0
 8005326:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	461a      	mov	r2, r3
 8005336:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800533a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3301      	adds	r3, #1
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	429a      	cmp	r2, r3
 8005348:	d3b7      	bcc.n	80052ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800534a:	2300      	movs	r3, #0
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	e043      	b.n	80053d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005366:	d118      	bne.n	800539a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	461a      	mov	r2, r3
 800537c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	e013      	b.n	80053ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	461a      	mov	r2, r3
 8005392:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	e008      	b.n	80053ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a6:	461a      	mov	r2, r3
 80053a8:	2300      	movs	r3, #0
 80053aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	461a      	mov	r2, r3
 80053ba:	2300      	movs	r3, #0
 80053bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	461a      	mov	r2, r3
 80053cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	3301      	adds	r3, #1
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d3b7      	bcc.n	8005350 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005400:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	2b00      	cmp	r3, #0
 8005406:	d105      	bne.n	8005414 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	f043 0210 	orr.w	r2, r3, #16
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <USB_DevInit+0x2c4>)
 800541a:	4313      	orrs	r3, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f043 0208 	orr.w	r2, r3, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005440:	f043 0304 	orr.w	r3, r3, #4
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005454:	b004      	add	sp, #16
 8005456:	4770      	bx	lr
 8005458:	803c3800 	.word	0x803c3800

0800545c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	019b      	lsls	r3, r3, #6
 800546e:	f043 0220 	orr.w	r2, r3, #32
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3301      	adds	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <USB_FlushTxFifo+0x48>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e006      	b.n	8005496 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b20      	cmp	r3, #32
 8005492:	d0f0      	beq.n	8005476 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	00030d40 	.word	0x00030d40

080054a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2210      	movs	r2, #16
 80054b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3301      	adds	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <USB_FlushRxFifo+0x40>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d901      	bls.n	80054cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e006      	b.n	80054da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d0f0      	beq.n	80054ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	00030d40 	.word	0x00030d40

080054ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800550c:	4313      	orrs	r3, r2
 800550e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005538:	f023 0303 	bic.w	r3, r3, #3
 800553c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800554c:	f043 0302 	orr.w	r3, r3, #2
 8005550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <USB_CoreReset+0x64>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e01b      	b.n	80055b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	daf2      	bge.n	800556c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f043 0201 	orr.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3301      	adds	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <USB_CoreReset+0x64>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d901      	bls.n	80055a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e006      	b.n	80055b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d0f0      	beq.n	8005596 <USB_CoreReset+0x36>

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	00030d40 	.word	0x00030d40

080055c8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80055ce:	2100      	movs	r1, #0
 80055d0:	2000      	movs	r0, #0
 80055d2:	f007 fcfb 	bl	800cfcc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80055d6:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <MX_LWIP_Init+0xb8>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80055dc:	4b29      	ldr	r3, [pc, #164]	; (8005684 <MX_LWIP_Init+0xbc>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80055e2:	4b29      	ldr	r3, [pc, #164]	; (8005688 <MX_LWIP_Init+0xc0>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80055e8:	4b28      	ldr	r3, [pc, #160]	; (800568c <MX_LWIP_Init+0xc4>)
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	4b28      	ldr	r3, [pc, #160]	; (8005690 <MX_LWIP_Init+0xc8>)
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	2300      	movs	r3, #0
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	4b24      	ldr	r3, [pc, #144]	; (8005688 <MX_LWIP_Init+0xc0>)
 80055f6:	4a23      	ldr	r2, [pc, #140]	; (8005684 <MX_LWIP_Init+0xbc>)
 80055f8:	4921      	ldr	r1, [pc, #132]	; (8005680 <MX_LWIP_Init+0xb8>)
 80055fa:	4826      	ldr	r0, [pc, #152]	; (8005694 <MX_LWIP_Init+0xcc>)
 80055fc:	f008 fa6a 	bl	800dad4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005600:	4824      	ldr	r0, [pc, #144]	; (8005694 <MX_LWIP_Init+0xcc>)
 8005602:	f008 fc21 	bl	800de48 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005606:	4b23      	ldr	r3, [pc, #140]	; (8005694 <MX_LWIP_Init+0xcc>)
 8005608:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800560c:	089b      	lsrs	r3, r3, #2
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005618:	481e      	ldr	r0, [pc, #120]	; (8005694 <MX_LWIP_Init+0xcc>)
 800561a:	f008 fc25 	bl	800de68 <netif_set_up>
 800561e:	e002      	b.n	8005626 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005620:	481c      	ldr	r0, [pc, #112]	; (8005694 <MX_LWIP_Init+0xcc>)
 8005622:	f008 fc8d 	bl	800df40 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005626:	491c      	ldr	r1, [pc, #112]	; (8005698 <MX_LWIP_Init+0xd0>)
 8005628:	481a      	ldr	r0, [pc, #104]	; (8005694 <MX_LWIP_Init+0xcc>)
 800562a:	f008 fd23 	bl	800e074 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800562e:	2200      	movs	r2, #0
 8005630:	2101      	movs	r1, #1
 8005632:	2001      	movs	r0, #1
 8005634:	f000 ff26 	bl	8006484 <osSemaphoreNew>
 8005638:	4602      	mov	r2, r0
 800563a:	4b18      	ldr	r3, [pc, #96]	; (800569c <MX_LWIP_Init+0xd4>)
 800563c:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800563e:	4b18      	ldr	r3, [pc, #96]	; (80056a0 <MX_LWIP_Init+0xd8>)
 8005640:	4a14      	ldr	r2, [pc, #80]	; (8005694 <MX_LWIP_Init+0xcc>)
 8005642:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005644:	4b15      	ldr	r3, [pc, #84]	; (800569c <MX_LWIP_Init+0xd4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <MX_LWIP_Init+0xd8>)
 800564a:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800564c:	2224      	movs	r2, #36	; 0x24
 800564e:	2100      	movs	r1, #0
 8005650:	4814      	ldr	r0, [pc, #80]	; (80056a4 <MX_LWIP_Init+0xdc>)
 8005652:	f014 feae 	bl	801a3b2 <memset>
  attributes.name = "LinkThr";
 8005656:	4b13      	ldr	r3, [pc, #76]	; (80056a4 <MX_LWIP_Init+0xdc>)
 8005658:	4a13      	ldr	r2, [pc, #76]	; (80056a8 <MX_LWIP_Init+0xe0>)
 800565a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800565c:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <MX_LWIP_Init+0xdc>)
 800565e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005662:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <MX_LWIP_Init+0xdc>)
 8005666:	2210      	movs	r2, #16
 8005668:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800566a:	4a0e      	ldr	r2, [pc, #56]	; (80056a4 <MX_LWIP_Init+0xdc>)
 800566c:	490c      	ldr	r1, [pc, #48]	; (80056a0 <MX_LWIP_Init+0xd8>)
 800566e:	480f      	ldr	r0, [pc, #60]	; (80056ac <MX_LWIP_Init+0xe4>)
 8005670:	f000 fcec 	bl	800604c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005674:	4807      	ldr	r0, [pc, #28]	; (8005694 <MX_LWIP_Init+0xcc>)
 8005676:	f010 fe8d 	bl	8016394 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800567a:	bf00      	nop
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20005264 	.word	0x20005264
 8005684:	20005268 	.word	0x20005268
 8005688:	2000526c 	.word	0x2000526c
 800568c:	0800cedd 	.word	0x0800cedd
 8005690:	08005d29 	.word	0x08005d29
 8005694:	2000522c 	.word	0x2000522c
 8005698:	08005e0d 	.word	0x08005e0d
 800569c:	20000214 	.word	0x20000214
 80056a0:	20005200 	.word	0x20005200
 80056a4:	20005208 	.word	0x20005208
 80056a8:	0801b48c 	.word	0x0801b48c
 80056ac:	08005d95 	.word	0x08005d95

080056b0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08e      	sub	sp, #56	; 0x38
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	609a      	str	r2, [r3, #8]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a5d      	ldr	r2, [pc, #372]	; (8005844 <HAL_ETH_MspInit+0x194>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	f040 80b4 	bne.w	800583c <HAL_ETH_MspInit+0x18c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80056d4:	2300      	movs	r3, #0
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <HAL_ETH_MspInit+0x198>)
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	4a5a      	ldr	r2, [pc, #360]	; (8005848 <HAL_ETH_MspInit+0x198>)
 80056de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056e2:	6313      	str	r3, [r2, #48]	; 0x30
 80056e4:	4b58      	ldr	r3, [pc, #352]	; (8005848 <HAL_ETH_MspInit+0x198>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	2300      	movs	r3, #0
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	4b54      	ldr	r3, [pc, #336]	; (8005848 <HAL_ETH_MspInit+0x198>)
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	4a53      	ldr	r2, [pc, #332]	; (8005848 <HAL_ETH_MspInit+0x198>)
 80056fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005700:	4b51      	ldr	r3, [pc, #324]	; (8005848 <HAL_ETH_MspInit+0x198>)
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	2300      	movs	r3, #0
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	4b4d      	ldr	r3, [pc, #308]	; (8005848 <HAL_ETH_MspInit+0x198>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	4a4c      	ldr	r2, [pc, #304]	; (8005848 <HAL_ETH_MspInit+0x198>)
 8005716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800571a:	6313      	str	r3, [r2, #48]	; 0x30
 800571c:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <HAL_ETH_MspInit+0x198>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	4b46      	ldr	r3, [pc, #280]	; (8005848 <HAL_ETH_MspInit+0x198>)
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	4a45      	ldr	r2, [pc, #276]	; (8005848 <HAL_ETH_MspInit+0x198>)
 8005732:	f043 0304 	orr.w	r3, r3, #4
 8005736:	6313      	str	r3, [r2, #48]	; 0x30
 8005738:	4b43      	ldr	r3, [pc, #268]	; (8005848 <HAL_ETH_MspInit+0x198>)
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	4b3f      	ldr	r3, [pc, #252]	; (8005848 <HAL_ETH_MspInit+0x198>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	4a3e      	ldr	r2, [pc, #248]	; (8005848 <HAL_ETH_MspInit+0x198>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	6313      	str	r3, [r2, #48]	; 0x30
 8005754:	4b3c      	ldr	r3, [pc, #240]	; (8005848 <HAL_ETH_MspInit+0x198>)
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	4b38      	ldr	r3, [pc, #224]	; (8005848 <HAL_ETH_MspInit+0x198>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	4a37      	ldr	r2, [pc, #220]	; (8005848 <HAL_ETH_MspInit+0x198>)
 800576a:	f043 0302 	orr.w	r3, r3, #2
 800576e:	6313      	str	r3, [r2, #48]	; 0x30
 8005770:	4b35      	ldr	r3, [pc, #212]	; (8005848 <HAL_ETH_MspInit+0x198>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800577c:	2300      	movs	r3, #0
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	4b31      	ldr	r3, [pc, #196]	; (8005848 <HAL_ETH_MspInit+0x198>)
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	4a30      	ldr	r2, [pc, #192]	; (8005848 <HAL_ETH_MspInit+0x198>)
 8005786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800578a:	6313      	str	r3, [r2, #48]	; 0x30
 800578c:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <HAL_ETH_MspInit+0x198>)
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005798:	2332      	movs	r3, #50	; 0x32
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800579c:	2302      	movs	r3, #2
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a4:	2303      	movs	r3, #3
 80057a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057a8:	230b      	movs	r3, #11
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b0:	4619      	mov	r1, r3
 80057b2:	4826      	ldr	r0, [pc, #152]	; (800584c <HAL_ETH_MspInit+0x19c>)
 80057b4:	f7fd f80e 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80057b8:	2386      	movs	r3, #134	; 0x86
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057bc:	2302      	movs	r3, #2
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057c4:	2303      	movs	r3, #3
 80057c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057c8:	230b      	movs	r3, #11
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d0:	4619      	mov	r1, r3
 80057d2:	481f      	ldr	r0, [pc, #124]	; (8005850 <HAL_ETH_MspInit+0x1a0>)
 80057d4:	f7fc fffe 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80057d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057de:	2302      	movs	r3, #2
 80057e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e6:	2303      	movs	r3, #3
 80057e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057ea:	230b      	movs	r3, #11
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80057ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f2:	4619      	mov	r1, r3
 80057f4:	4817      	ldr	r0, [pc, #92]	; (8005854 <HAL_ETH_MspInit+0x1a4>)
 80057f6:	f7fc ffed 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80057fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005800:	2302      	movs	r3, #2
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005804:	2300      	movs	r3, #0
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005808:	2303      	movs	r3, #3
 800580a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800580c:	230b      	movs	r3, #11
 800580e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005814:	4619      	mov	r1, r3
 8005816:	4810      	ldr	r0, [pc, #64]	; (8005858 <HAL_ETH_MspInit+0x1a8>)
 8005818:	f7fc ffdc 	bl	80027d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800581c:	2200      	movs	r2, #0
 800581e:	2105      	movs	r1, #5
 8005820:	203d      	movs	r0, #61	; 0x3d
 8005822:	f7fb fde5 	bl	80013f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005826:	203d      	movs	r0, #61	; 0x3d
 8005828:	f7fb fdfe 	bl	8001428 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800582c:	2200      	movs	r2, #0
 800582e:	2105      	movs	r1, #5
 8005830:	203e      	movs	r0, #62	; 0x3e
 8005832:	f7fb fddd 	bl	80013f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8005836:	203e      	movs	r0, #62	; 0x3e
 8005838:	f7fb fdf6 	bl	8001428 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800583c:	bf00      	nop
 800583e:	3738      	adds	r7, #56	; 0x38
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40028000 	.word	0x40028000
 8005848:	40023800 	.word	0x40023800
 800584c:	40020800 	.word	0x40020800
 8005850:	40020000 	.word	0x40020000
 8005854:	40020400 	.word	0x40020400
 8005858:	40021800 	.word	0x40021800

0800585c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005864:	4b04      	ldr	r3, [pc, #16]	; (8005878 <HAL_ETH_RxCpltCallback+0x1c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f000 ff0f 	bl	800668c <osSemaphoreRelease>
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000218 	.word	0x20000218

0800587c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b090      	sub	sp, #64	; 0x40
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005888:	4b5d      	ldr	r3, [pc, #372]	; (8005a00 <low_level_init+0x184>)
 800588a:	4a5e      	ldr	r2, [pc, #376]	; (8005a04 <low_level_init+0x188>)
 800588c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800588e:	4b5c      	ldr	r3, [pc, #368]	; (8005a00 <low_level_init+0x184>)
 8005890:	2201      	movs	r2, #1
 8005892:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005894:	4b5a      	ldr	r3, [pc, #360]	; (8005a00 <low_level_init+0x184>)
 8005896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800589a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800589c:	4b58      	ldr	r3, [pc, #352]	; (8005a00 <low_level_init+0x184>)
 800589e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058a2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80058a4:	4b56      	ldr	r3, [pc, #344]	; (8005a00 <low_level_init+0x184>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0xDA;
 80058aa:	23da      	movs	r3, #218	; 0xda
 80058ac:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0xBA;
 80058ae:	23ba      	movs	r3, #186	; 0xba
 80058b0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xDA;
 80058b2:	23da      	movs	r3, #218	; 0xda
 80058b4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0xBA;
 80058b6:	23ba      	movs	r3, #186	; 0xba
 80058b8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0xFE;
 80058ba:	23fe      	movs	r3, #254	; 0xfe
 80058bc:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0xE9;
 80058be:	23e9      	movs	r3, #233	; 0xe9
 80058c0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80058c2:	4a4f      	ldr	r2, [pc, #316]	; (8005a00 <low_level_init+0x184>)
 80058c4:	f107 030c 	add.w	r3, r7, #12
 80058c8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80058ca:	4b4d      	ldr	r3, [pc, #308]	; (8005a00 <low_level_init+0x184>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80058d0:	4b4b      	ldr	r3, [pc, #300]	; (8005a00 <low_level_init+0x184>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80058d6:	4b4a      	ldr	r3, [pc, #296]	; (8005a00 <low_level_init+0x184>)
 80058d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80058dc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80058de:	4848      	ldr	r0, [pc, #288]	; (8005a00 <low_level_init+0x184>)
 80058e0:	f7fb fdd2 	bl	8001488 <HAL_ETH_Init>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80058ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d108      	bne.n	8005904 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058f8:	f043 0304 	orr.w	r3, r3, #4
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005904:	2304      	movs	r3, #4
 8005906:	4a40      	ldr	r2, [pc, #256]	; (8005a08 <low_level_init+0x18c>)
 8005908:	4940      	ldr	r1, [pc, #256]	; (8005a0c <low_level_init+0x190>)
 800590a:	483d      	ldr	r0, [pc, #244]	; (8005a00 <low_level_init+0x184>)
 800590c:	f7fb ff5a 	bl	80017c4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005910:	2304      	movs	r3, #4
 8005912:	4a3f      	ldr	r2, [pc, #252]	; (8005a10 <low_level_init+0x194>)
 8005914:	493f      	ldr	r1, [pc, #252]	; (8005a14 <low_level_init+0x198>)
 8005916:	483a      	ldr	r0, [pc, #232]	; (8005a00 <low_level_init+0x184>)
 8005918:	f7fb ffbd 	bl	8001896 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2206      	movs	r2, #6
 8005920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005924:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <low_level_init+0x184>)
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005930:	4b33      	ldr	r3, [pc, #204]	; (8005a00 <low_level_init+0x184>)
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	785a      	ldrb	r2, [r3, #1]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800593c:	4b30      	ldr	r3, [pc, #192]	; (8005a00 <low_level_init+0x184>)
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	789a      	ldrb	r2, [r3, #2]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005948:	4b2d      	ldr	r3, [pc, #180]	; (8005a00 <low_level_init+0x184>)
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	78da      	ldrb	r2, [r3, #3]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005954:	4b2a      	ldr	r3, [pc, #168]	; (8005a00 <low_level_init+0x184>)
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	791a      	ldrb	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005960:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <low_level_init+0x184>)
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	795a      	ldrb	r2, [r3, #5]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005972:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800597a:	f043 030a 	orr.w	r3, r3, #10
 800597e:	b2da      	uxtb	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005986:	2200      	movs	r2, #0
 8005988:	2101      	movs	r1, #1
 800598a:	2001      	movs	r0, #1
 800598c:	f000 fd7a 	bl	8006484 <osSemaphoreNew>
 8005990:	4602      	mov	r2, r0
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <low_level_init+0x19c>)
 8005994:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005996:	f107 0314 	add.w	r3, r7, #20
 800599a:	2224      	movs	r2, #36	; 0x24
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f014 fd07 	bl	801a3b2 <memset>
  attributes.name = "EthIf";
 80059a4:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <low_level_init+0x1a0>)
 80059a6:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80059a8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 80059ae:	2330      	movs	r3, #48	; 0x30
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80059b2:	f107 0314 	add.w	r3, r7, #20
 80059b6:	461a      	mov	r2, r3
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4819      	ldr	r0, [pc, #100]	; (8005a20 <low_level_init+0x1a4>)
 80059bc:	f000 fb46 	bl	800604c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80059c0:	480f      	ldr	r0, [pc, #60]	; (8005a00 <low_level_init+0x184>)
 80059c2:	f7fc fa90 	bl	8001ee6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80059c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059ca:	461a      	mov	r2, r3
 80059cc:	211d      	movs	r1, #29
 80059ce:	480c      	ldr	r0, [pc, #48]	; (8005a00 <low_level_init+0x184>)
 80059d0:	f7fc f9bb 	bl	8001d4a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	f043 030b 	orr.w	r3, r3, #11
 80059da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	461a      	mov	r2, r3
 80059e0:	211d      	movs	r1, #29
 80059e2:	4807      	ldr	r0, [pc, #28]	; (8005a00 <low_level_init+0x184>)
 80059e4:	f7fc fa19 	bl	8001e1a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80059e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059ec:	461a      	mov	r2, r3
 80059ee:	211d      	movs	r1, #29
 80059f0:	4803      	ldr	r0, [pc, #12]	; (8005a00 <low_level_init+0x184>)
 80059f2:	f7fc f9aa 	bl	8001d4a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80059f6:	bf00      	nop
 80059f8:	3740      	adds	r7, #64	; 0x40
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20006b40 	.word	0x20006b40
 8005a04:	40028000 	.word	0x40028000
 8005a08:	20006b88 	.word	0x20006b88
 8005a0c:	20005270 	.word	0x20005270
 8005a10:	200052f0 	.word	0x200052f0
 8005a14:	20006ac0 	.word	0x20006ac0
 8005a18:	20000218 	.word	0x20000218
 8005a1c:	0801b494 	.word	0x0801b494
 8005a20:	08005cc9 	.word	0x08005cc9

08005a24 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	; 0x28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005a2e:	4b4b      	ldr	r3, [pc, #300]	; (8005b5c <low_level_output+0x138>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005a46:	4b45      	ldr	r3, [pc, #276]	; (8005b5c <low_level_output+0x138>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	623b      	str	r3, [r7, #32]
 8005a54:	e05a      	b.n	8005b0c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da03      	bge.n	8005a66 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005a5e:	23f8      	movs	r3, #248	; 0xf8
 8005a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005a64:	e05c      	b.n	8005b20 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	895b      	ldrh	r3, [r3, #10]
 8005a6a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005a70:	e02f      	b.n	8005ad2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	18d0      	adds	r0, r2, r3
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	18d1      	adds	r1, r2, r3
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005a86:	3304      	adds	r3, #4
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f014 fc87 	bl	801a39c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da03      	bge.n	8005aa4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005a9c:	23f8      	movs	r3, #248	; 0xf8
 8005a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005aa2:	e03d      	b.n	8005b20 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005ab4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005ac0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005acc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d8c8      	bhi.n	8005a72 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	18d0      	adds	r0, r2, r3
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	4413      	add	r3, r2
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4619      	mov	r1, r3
 8005af2:	f014 fc53 	bl	801a39c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1a1      	bne.n	8005a56 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005b12:	6979      	ldr	r1, [r7, #20]
 8005b14:	4811      	ldr	r0, [pc, #68]	; (8005b5c <low_level_output+0x138>)
 8005b16:	f7fb ff2b 	bl	8001970 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005b20:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <low_level_output+0x138>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b28:	3314      	adds	r3, #20
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005b34:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <low_level_output+0x138>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3c:	3314      	adds	r3, #20
 8005b3e:	2220      	movs	r2, #32
 8005b40:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005b42:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <low_level_output+0x138>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005b50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3728      	adds	r7, #40	; 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20006b40 	.word	0x20006b40

08005b60 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08c      	sub	sp, #48	; 0x30
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005b84:	484f      	ldr	r0, [pc, #316]	; (8005cc4 <low_level_input+0x164>)
 8005b86:	f7fb ffdd 	bl	8001b44 <HAL_ETH_GetReceivedFrame_IT>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <low_level_input+0x34>

    return NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e092      	b.n	8005cba <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005b94:	4b4b      	ldr	r3, [pc, #300]	; (8005cc4 <low_level_input+0x164>)
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005b9a:	4b4a      	ldr	r3, [pc, #296]	; (8005cc4 <low_level_input+0x164>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005ba0:	89fb      	ldrh	r3, [r7, #14]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005ba6:	89fb      	ldrh	r3, [r7, #14]
 8005ba8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005bac:	4619      	mov	r1, r3
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f008 fb62 	bl	800e278 <pbuf_alloc>
 8005bb4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d04b      	beq.n	8005c54 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005bbc:	4b41      	ldr	r3, [pc, #260]	; (8005cc4 <low_level_input+0x164>)
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bca:	e040      	b.n	8005c4e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	895b      	ldrh	r3, [r3, #10]
 8005bd0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005bd6:	e021      	b.n	8005c1c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	18d0      	adds	r0, r2, r3
 8005be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	18d1      	adds	r1, r2, r3
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005bec:	3304      	adds	r3, #4
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f014 fbd4 	bl	801a39c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	4413      	add	r3, r2
 8005c06:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005c0a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005c16:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d8d6      	bhi.n	8005bd8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	18d0      	adds	r0, r2, r3
 8005c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	4413      	add	r3, r2
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	f014 fbae 	bl	801a39c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4413      	add	r3, r2
 8005c46:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1bb      	bne.n	8005bcc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005c54:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <low_level_input+0x164>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	e00b      	b.n	8005c78 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	3301      	adds	r3, #1
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <low_level_input+0x164>)
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d3ee      	bcc.n	8005c60 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005c82:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <low_level_input+0x164>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <low_level_input+0x164>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c90:	3314      	adds	r3, #20
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00d      	beq.n	8005cb8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005c9c:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <low_level_input+0x164>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	2280      	movs	r2, #128	; 0x80
 8005ca8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <low_level_input+0x164>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3730      	adds	r7, #48	; 0x30
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20006b40 	.word	0x20006b40

08005cc8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005cd4:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <ethernetif_input+0x58>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 fc6f 	bl	80065c0 <osSemaphoreAcquire>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1f5      	bne.n	8005cd4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005ce8:	480e      	ldr	r0, [pc, #56]	; (8005d24 <ethernetif_input+0x5c>)
 8005cea:	f014 fab1 	bl	801a250 <sys_mutex_lock>
        p = low_level_input( netif );
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff ff36 	bl	8005b60 <low_level_input>
 8005cf4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	68f9      	ldr	r1, [r7, #12]
 8005d02:	68b8      	ldr	r0, [r7, #8]
 8005d04:	4798      	blx	r3
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005d0c:	68b8      	ldr	r0, [r7, #8]
 8005d0e:	f008 fd93 	bl	800e838 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005d12:	4804      	ldr	r0, [pc, #16]	; (8005d24 <ethernetif_input+0x5c>)
 8005d14:	f014 faab 	bl	801a26e <sys_mutex_unlock>
      } while(p!=NULL);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e4      	bne.n	8005ce8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d1e:	e7d9      	b.n	8005cd4 <ethernetif_input+0xc>
 8005d20:	20000218 	.word	0x20000218
 8005d24:	20008398 	.word	0x20008398

08005d28 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <ethernetif_init+0x1c>
 8005d36:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <ethernetif_init+0x48>)
 8005d38:	f240 223e 	movw	r2, #574	; 0x23e
 8005d3c:	490d      	ldr	r1, [pc, #52]	; (8005d74 <ethernetif_init+0x4c>)
 8005d3e:	480e      	ldr	r0, [pc, #56]	; (8005d78 <ethernetif_init+0x50>)
 8005d40:	f014 fb40 	bl	801a3c4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2273      	movs	r2, #115	; 0x73
 8005d48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2274      	movs	r2, #116	; 0x74
 8005d50:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <ethernetif_init+0x54>)
 8005d58:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a08      	ldr	r2, [pc, #32]	; (8005d80 <ethernetif_init+0x58>)
 8005d5e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff fd8b 	bl	800587c <low_level_init>

  return ERR_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	0801b49c 	.word	0x0801b49c
 8005d74:	0801b4b8 	.word	0x0801b4b8
 8005d78:	0801b4c8 	.word	0x0801b4c8
 8005d7c:	08018281 	.word	0x08018281
 8005d80:	08005a25 	.word	0x08005a25

08005d84 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d88:	f7fb fa4c 	bl	8001224 <HAL_GetTick>
 8005d8c:	4603      	mov	r3, r0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005da4:	f107 0308 	add.w	r3, r7, #8
 8005da8:	461a      	mov	r2, r3
 8005daa:	2101      	movs	r1, #1
 8005dac:	4816      	ldr	r0, [pc, #88]	; (8005e08 <ethernetif_set_link+0x74>)
 8005dae:	f7fb ffcc 	bl	8001d4a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d108      	bne.n	8005ddc <ethernetif_set_link+0x48>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f008 f8e5 	bl	800dfa4 <netif_set_link_up>
 8005dda:	e011      	b.n	8005e00 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005de4:	089b      	lsrs	r3, r3, #2
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <ethernetif_set_link+0x6c>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f008 f90a 	bl	800e014 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005e00:	20c8      	movs	r0, #200	; 0xc8
 8005e02:	f000 f9c9 	bl	8006198 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005e06:	e7cd      	b.n	8005da4 <ethernetif_set_link+0x10>
 8005e08:	20006b40 	.word	0x20006b40

08005e0c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e22:	089b      	lsrs	r3, r3, #2
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d05d      	beq.n	8005eea <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005e2e:	4b34      	ldr	r3, [pc, #208]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d03f      	beq.n	8005eb6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4830      	ldr	r0, [pc, #192]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005e3e:	f7fb ffec 	bl	8001e1a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005e42:	f7fb f9ef 	bl	8001224 <HAL_GetTick>
 8005e46:	4603      	mov	r3, r0
 8005e48:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005e4a:	f107 0308 	add.w	r3, r7, #8
 8005e4e:	461a      	mov	r2, r3
 8005e50:	2101      	movs	r1, #1
 8005e52:	482b      	ldr	r0, [pc, #172]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005e54:	f7fb ff79 	bl	8001d4a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005e58:	f7fb f9e4 	bl	8001224 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e66:	d828      	bhi.n	8005eba <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0eb      	beq.n	8005e4a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005e72:	f107 0308 	add.w	r3, r7, #8
 8005e76:	461a      	mov	r2, r3
 8005e78:	211f      	movs	r1, #31
 8005e7a:	4821      	ldr	r0, [pc, #132]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005e7c:	f7fb ff65 	bl	8001d4a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005e8a:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e90:	60da      	str	r2, [r3, #12]
 8005e92:	e002      	b.n	8005e9a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005e94:	4b1a      	ldr	r3, [pc, #104]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005ea4:	4b16      	ldr	r3, [pc, #88]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	e016      	b.n	8005eda <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005eac:	4b14      	ldr	r3, [pc, #80]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005eb2:	609a      	str	r2, [r3, #8]
 8005eb4:	e011      	b.n	8005eda <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005eb6:	bf00      	nop
 8005eb8:	e000      	b.n	8005ebc <ethernetif_update_config+0xb0>
          goto error;
 8005eba:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005ebc:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	08db      	lsrs	r3, r3, #3
 8005ec2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	480a      	ldr	r0, [pc, #40]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005ed6:	f7fb ffa0 	bl	8001e1a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005eda:	2100      	movs	r1, #0
 8005edc:	4808      	ldr	r0, [pc, #32]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005ede:	f7fc f861 	bl	8001fa4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005ee2:	4807      	ldr	r0, [pc, #28]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005ee4:	f7fb ffff 	bl	8001ee6 <HAL_ETH_Start>
 8005ee8:	e002      	b.n	8005ef0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005eea:	4805      	ldr	r0, [pc, #20]	; (8005f00 <ethernetif_update_config+0xf4>)
 8005eec:	f7fc f82a 	bl	8001f44 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f807 	bl	8005f04 <ethernetif_notify_conn_changed>
}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20006b40 	.word	0x20006b40

08005f04 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005f1c:	bf00      	nop
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f2e:	f3ef 8305 	mrs	r3, IPSR
 8005f32:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f3e:	607b      	str	r3, [r7, #4]
  return(result);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d105      	bne.n	8005f52 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f46:	f3ef 8311 	mrs	r3, BASEPRI
 8005f4a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <osKernelInitialize+0x3a>
 8005f52:	4b0e      	ldr	r3, [pc, #56]	; (8005f8c <osKernelInitialize+0x64>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d103      	bne.n	8005f62 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005f5a:	f06f 0305 	mvn.w	r3, #5
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e00c      	b.n	8005f7c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <osKernelInitialize+0x64>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f6a:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <osKernelInitialize+0x64>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	e002      	b.n	8005f7c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	2000021c 	.word	0x2000021c

08005f90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f96:	f3ef 8305 	mrs	r3, IPSR
 8005f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10f      	bne.n	8005fc2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa6:	607b      	str	r3, [r7, #4]
  return(result);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d105      	bne.n	8005fba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fae:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <osKernelStart+0x3a>
 8005fba:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <osKernelStart+0x68>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d103      	bne.n	8005fca <osKernelStart+0x3a>
    stat = osErrorISR;
 8005fc2:	f06f 0305 	mvn.w	r3, #5
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e010      	b.n	8005fec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fca:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <osKernelStart+0x68>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d109      	bne.n	8005fe6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005fd2:	f7ff ffa1 	bl	8005f18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005fd6:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <osKernelStart+0x68>)
 8005fd8:	2202      	movs	r2, #2
 8005fda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005fdc:	f002 f94e 	bl	800827c <vTaskStartScheduler>
      stat = osOK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e002      	b.n	8005fec <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fec:	68fb      	ldr	r3, [r7, #12]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	2000021c 	.word	0x2000021c

08005ffc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006002:	f3ef 8305 	mrs	r3, IPSR
 8006006:	60bb      	str	r3, [r7, #8]
  return(result);
 8006008:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10f      	bne.n	800602e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800600e:	f3ef 8310 	mrs	r3, PRIMASK
 8006012:	607b      	str	r3, [r7, #4]
  return(result);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d105      	bne.n	8006026 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800601a:	f3ef 8311 	mrs	r3, BASEPRI
 800601e:	603b      	str	r3, [r7, #0]
  return(result);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <osKernelGetTickCount+0x3a>
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <osKernelGetTickCount+0x4c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d103      	bne.n	8006036 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800602e:	f002 fa43 	bl	80084b8 <xTaskGetTickCountFromISR>
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	e002      	b.n	800603c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006036:	f002 fa2f 	bl	8008498 <xTaskGetTickCount>
 800603a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800603c:	68fb      	ldr	r3, [r7, #12]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	2000021c 	.word	0x2000021c

0800604c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b090      	sub	sp, #64	; 0x40
 8006050:	af04      	add	r7, sp, #16
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800605c:	f3ef 8305 	mrs	r3, IPSR
 8006060:	61fb      	str	r3, [r7, #28]
  return(result);
 8006062:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 808f 	bne.w	8006188 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800606a:	f3ef 8310 	mrs	r3, PRIMASK
 800606e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d105      	bne.n	8006082 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006076:	f3ef 8311 	mrs	r3, BASEPRI
 800607a:	617b      	str	r3, [r7, #20]
  return(result);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <osThreadNew+0x3e>
 8006082:	4b44      	ldr	r3, [pc, #272]	; (8006194 <osThreadNew+0x148>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d07e      	beq.n	8006188 <osThreadNew+0x13c>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d07b      	beq.n	8006188 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006094:	2318      	movs	r3, #24
 8006096:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800609c:	f04f 33ff 	mov.w	r3, #4294967295
 80060a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d045      	beq.n	8006134 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <osThreadNew+0x6a>
        name = attr->name;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <osThreadNew+0x90>
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	2b38      	cmp	r3, #56	; 0x38
 80060ce:	d805      	bhi.n	80060dc <osThreadNew+0x90>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <osThreadNew+0x94>
        return (NULL);
 80060dc:	2300      	movs	r3, #0
 80060de:	e054      	b.n	800618a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	089b      	lsrs	r3, r3, #2
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00e      	beq.n	8006116 <osThreadNew+0xca>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b5b      	cmp	r3, #91	; 0x5b
 80060fe:	d90a      	bls.n	8006116 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006104:	2b00      	cmp	r3, #0
 8006106:	d006      	beq.n	8006116 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <osThreadNew+0xca>
        mem = 1;
 8006110:	2301      	movs	r3, #1
 8006112:	623b      	str	r3, [r7, #32]
 8006114:	e010      	b.n	8006138 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10c      	bne.n	8006138 <osThreadNew+0xec>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d108      	bne.n	8006138 <osThreadNew+0xec>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d104      	bne.n	8006138 <osThreadNew+0xec>
          mem = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	623b      	str	r3, [r7, #32]
 8006132:	e001      	b.n	8006138 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006134:	2300      	movs	r3, #0
 8006136:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d110      	bne.n	8006160 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006146:	9202      	str	r2, [sp, #8]
 8006148:	9301      	str	r3, [sp, #4]
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f001 febf 	bl	8007ed8 <xTaskCreateStatic>
 800615a:	4603      	mov	r3, r0
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	e013      	b.n	8006188 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d110      	bne.n	8006188 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	b29a      	uxth	r2, r3
 800616a:	f107 0310 	add.w	r3, r7, #16
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f001 ff07 	bl	8007f8c <xTaskCreate>
 800617e:	4603      	mov	r3, r0
 8006180:	2b01      	cmp	r3, #1
 8006182:	d001      	beq.n	8006188 <osThreadNew+0x13c>
          hTask = NULL;
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006188:	693b      	ldr	r3, [r7, #16]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3730      	adds	r7, #48	; 0x30
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	2000021c 	.word	0x2000021c

08006198 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061a0:	f3ef 8305 	mrs	r3, IPSR
 80061a4:	613b      	str	r3, [r7, #16]
  return(result);
 80061a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10f      	bne.n	80061cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ac:	f3ef 8310 	mrs	r3, PRIMASK
 80061b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d105      	bne.n	80061c4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061b8:	f3ef 8311 	mrs	r3, BASEPRI
 80061bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <osDelay+0x3c>
 80061c4:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <osDelay+0x58>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d103      	bne.n	80061d4 <osDelay+0x3c>
    stat = osErrorISR;
 80061cc:	f06f 0305 	mvn.w	r3, #5
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	e007      	b.n	80061e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f002 f818 	bl	8008214 <vTaskDelay>
    }
  }

  return (stat);
 80061e4:	697b      	ldr	r3, [r7, #20]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	2000021c 	.word	0x2000021c

080061f4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006200:	f3ef 8305 	mrs	r3, IPSR
 8006204:	613b      	str	r3, [r7, #16]
  return(result);
 8006206:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006208:	2b00      	cmp	r3, #0
 800620a:	f040 8085 	bne.w	8006318 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800620e:	f3ef 8310 	mrs	r3, PRIMASK
 8006212:	60fb      	str	r3, [r7, #12]
  return(result);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d105      	bne.n	8006226 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800621a:	f3ef 8311 	mrs	r3, BASEPRI
 800621e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <osMutexNew+0x3a>
 8006226:	4b3f      	ldr	r3, [pc, #252]	; (8006324 <osMutexNew+0x130>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d074      	beq.n	8006318 <osMutexNew+0x124>
    if (attr != NULL) {
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <osMutexNew+0x48>
      type = attr->attr_bits;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	623b      	str	r3, [r7, #32]
 800623a:	e001      	b.n	8006240 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <osMutexNew+0x5c>
      rmtx = 1U;
 800624a:	2301      	movs	r3, #1
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	e001      	b.n	8006254 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d15c      	bne.n	8006318 <osMutexNew+0x124>
      mem = -1;
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d015      	beq.n	8006296 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d006      	beq.n	8006280 <osMutexNew+0x8c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	2b4f      	cmp	r3, #79	; 0x4f
 8006278:	d902      	bls.n	8006280 <osMutexNew+0x8c>
          mem = 1;
 800627a:	2301      	movs	r3, #1
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e00c      	b.n	800629a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d108      	bne.n	800629a <osMutexNew+0xa6>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <osMutexNew+0xa6>
            mem = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	61bb      	str	r3, [r7, #24]
 8006294:	e001      	b.n	800629a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d112      	bne.n	80062c6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	4619      	mov	r1, r3
 80062ac:	2004      	movs	r0, #4
 80062ae:	f000 fea6 	bl	8006ffe <xQueueCreateMutexStatic>
 80062b2:	6278      	str	r0, [r7, #36]	; 0x24
 80062b4:	e016      	b.n	80062e4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	4619      	mov	r1, r3
 80062bc:	2001      	movs	r0, #1
 80062be:	f000 fe9e 	bl	8006ffe <xQueueCreateMutexStatic>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24
 80062c4:	e00e      	b.n	80062e4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80062d2:	2004      	movs	r0, #4
 80062d4:	f000 fe7b 	bl	8006fce <xQueueCreateMutex>
 80062d8:	6278      	str	r0, [r7, #36]	; 0x24
 80062da:	e003      	b.n	80062e4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80062dc:	2001      	movs	r0, #1
 80062de:	f000 fe76 	bl	8006fce <xQueueCreateMutex>
 80062e2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <osMutexNew+0x110>
        if (attr != NULL) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <osMutexNew+0x104>
          name = attr->name;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e001      	b.n	80062fc <osMutexNew+0x108>
        } else {
          name = NULL;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80062fc:	6979      	ldr	r1, [r7, #20]
 80062fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006300:	f001 fd64 	bl	8007dcc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d006      	beq.n	8006318 <osMutexNew+0x124>
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800631a:	4618      	mov	r0, r3
 800631c:	3728      	adds	r7, #40	; 0x28
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	2000021c 	.word	0x2000021c

08006328 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006346:	f3ef 8305 	mrs	r3, IPSR
 800634a:	613b      	str	r3, [r7, #16]
  return(result);
 800634c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10f      	bne.n	8006372 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006352:	f3ef 8310 	mrs	r3, PRIMASK
 8006356:	60fb      	str	r3, [r7, #12]
  return(result);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d105      	bne.n	800636a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800635e:	f3ef 8311 	mrs	r3, BASEPRI
 8006362:	60bb      	str	r3, [r7, #8]
  return(result);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <osMutexAcquire+0x52>
 800636a:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <osMutexAcquire+0xb8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d103      	bne.n	800637a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006372:	f06f 0305 	mvn.w	r3, #5
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	e02c      	b.n	80063d4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006380:	f06f 0303 	mvn.w	r3, #3
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	e025      	b.n	80063d4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d011      	beq.n	80063b2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	69b8      	ldr	r0, [r7, #24]
 8006392:	f000 fe82 	bl	800709a <xQueueTakeMutexRecursive>
 8006396:	4603      	mov	r3, r0
 8006398:	2b01      	cmp	r3, #1
 800639a:	d01b      	beq.n	80063d4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80063a2:	f06f 0301 	mvn.w	r3, #1
 80063a6:	61fb      	str	r3, [r7, #28]
 80063a8:	e014      	b.n	80063d4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80063aa:	f06f 0302 	mvn.w	r3, #2
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	e010      	b.n	80063d4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	69b8      	ldr	r0, [r7, #24]
 80063b6:	f001 f9ff 	bl	80077b8 <xQueueSemaphoreTake>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d009      	beq.n	80063d4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80063c6:	f06f 0301 	mvn.w	r3, #1
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	e002      	b.n	80063d4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80063ce:	f06f 0302 	mvn.w	r3, #2
 80063d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80063d4:	69fb      	ldr	r3, [r7, #28]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3720      	adds	r7, #32
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	2000021c 	.word	0x2000021c

080063e4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006400:	f3ef 8305 	mrs	r3, IPSR
 8006404:	613b      	str	r3, [r7, #16]
  return(result);
 8006406:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10f      	bne.n	800642c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800640c:	f3ef 8310 	mrs	r3, PRIMASK
 8006410:	60fb      	str	r3, [r7, #12]
  return(result);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d105      	bne.n	8006424 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006418:	f3ef 8311 	mrs	r3, BASEPRI
 800641c:	60bb      	str	r3, [r7, #8]
  return(result);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <osMutexRelease+0x50>
 8006424:	4b16      	ldr	r3, [pc, #88]	; (8006480 <osMutexRelease+0x9c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d103      	bne.n	8006434 <osMutexRelease+0x50>
    stat = osErrorISR;
 800642c:	f06f 0305 	mvn.w	r3, #5
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	e01f      	b.n	8006474 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800643a:	f06f 0303 	mvn.w	r3, #3
 800643e:	61fb      	str	r3, [r7, #28]
 8006440:	e018      	b.n	8006474 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006448:	69b8      	ldr	r0, [r7, #24]
 800644a:	f000 fdf3 	bl	8007034 <xQueueGiveMutexRecursive>
 800644e:	4603      	mov	r3, r0
 8006450:	2b01      	cmp	r3, #1
 8006452:	d00f      	beq.n	8006474 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006454:	f06f 0302 	mvn.w	r3, #2
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	e00b      	b.n	8006474 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800645c:	2300      	movs	r3, #0
 800645e:	2200      	movs	r2, #0
 8006460:	2100      	movs	r1, #0
 8006462:	69b8      	ldr	r0, [r7, #24]
 8006464:	f000 feb4 	bl	80071d0 <xQueueGenericSend>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d002      	beq.n	8006474 <osMutexRelease+0x90>
        stat = osErrorResource;
 800646e:	f06f 0302 	mvn.w	r3, #2
 8006472:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006474:	69fb      	ldr	r3, [r7, #28]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3720      	adds	r7, #32
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	2000021c 	.word	0x2000021c

08006484 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b08c      	sub	sp, #48	; 0x30
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006494:	f3ef 8305 	mrs	r3, IPSR
 8006498:	61bb      	str	r3, [r7, #24]
  return(result);
 800649a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 8087 	bne.w	80065b0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a2:	f3ef 8310 	mrs	r3, PRIMASK
 80064a6:	617b      	str	r3, [r7, #20]
  return(result);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d105      	bne.n	80064ba <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064ae:	f3ef 8311 	mrs	r3, BASEPRI
 80064b2:	613b      	str	r3, [r7, #16]
  return(result);
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <osSemaphoreNew+0x3e>
 80064ba:	4b40      	ldr	r3, [pc, #256]	; (80065bc <osSemaphoreNew+0x138>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d076      	beq.n	80065b0 <osSemaphoreNew+0x12c>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d073      	beq.n	80065b0 <osSemaphoreNew+0x12c>
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d86f      	bhi.n	80065b0 <osSemaphoreNew+0x12c>
    mem = -1;
 80064d0:	f04f 33ff 	mov.w	r3, #4294967295
 80064d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d015      	beq.n	8006508 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d006      	beq.n	80064f2 <osSemaphoreNew+0x6e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	2b4f      	cmp	r3, #79	; 0x4f
 80064ea:	d902      	bls.n	80064f2 <osSemaphoreNew+0x6e>
        mem = 1;
 80064ec:	2301      	movs	r3, #1
 80064ee:	623b      	str	r3, [r7, #32]
 80064f0:	e00c      	b.n	800650c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d108      	bne.n	800650c <osSemaphoreNew+0x88>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <osSemaphoreNew+0x88>
          mem = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	623b      	str	r3, [r7, #32]
 8006506:	e001      	b.n	800650c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d04d      	beq.n	80065b0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d129      	bne.n	800656e <osSemaphoreNew+0xea>
        if (mem == 1) {
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10b      	bne.n	8006538 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	2303      	movs	r3, #3
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	4613      	mov	r3, r2
 800652a:	2200      	movs	r2, #0
 800652c:	2100      	movs	r1, #0
 800652e:	2001      	movs	r0, #1
 8006530:	f000 fc5e 	bl	8006df0 <xQueueGenericCreateStatic>
 8006534:	6278      	str	r0, [r7, #36]	; 0x24
 8006536:	e005      	b.n	8006544 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006538:	2203      	movs	r2, #3
 800653a:	2100      	movs	r1, #0
 800653c:	2001      	movs	r0, #1
 800653e:	f000 fcca 	bl	8006ed6 <xQueueGenericCreate>
 8006542:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d022      	beq.n	8006590 <osSemaphoreNew+0x10c>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01f      	beq.n	8006590 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006550:	2300      	movs	r3, #0
 8006552:	2200      	movs	r2, #0
 8006554:	2100      	movs	r1, #0
 8006556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006558:	f000 fe3a 	bl	80071d0 <xQueueGenericSend>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d016      	beq.n	8006590 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8006562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006564:	f001 fae7 	bl	8007b36 <vQueueDelete>
            hSemaphore = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
 800656c:	e010      	b.n	8006590 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d108      	bne.n	8006586 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	461a      	mov	r2, r3
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fdc1 	bl	8007104 <xQueueCreateCountingSemaphoreStatic>
 8006582:	6278      	str	r0, [r7, #36]	; 0x24
 8006584:	e004      	b.n	8006590 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fdf0 	bl	800716e <xQueueCreateCountingSemaphore>
 800658e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00c      	beq.n	80065b0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <osSemaphoreNew+0x120>
          name = attr->name;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	e001      	b.n	80065a8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80065a8:	69f9      	ldr	r1, [r7, #28]
 80065aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ac:	f001 fc0e 	bl	8007dcc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3728      	adds	r7, #40	; 0x28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	2000021c 	.word	0x2000021c

080065c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d103      	bne.n	80065e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80065d8:	f06f 0303 	mvn.w	r3, #3
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	e04b      	b.n	8006678 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065e0:	f3ef 8305 	mrs	r3, IPSR
 80065e4:	617b      	str	r3, [r7, #20]
  return(result);
 80065e6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10f      	bne.n	800660c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ec:	f3ef 8310 	mrs	r3, PRIMASK
 80065f0:	613b      	str	r3, [r7, #16]
  return(result);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d105      	bne.n	8006604 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065f8:	f3ef 8311 	mrs	r3, BASEPRI
 80065fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d026      	beq.n	8006652 <osSemaphoreAcquire+0x92>
 8006604:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <osSemaphoreAcquire+0xc4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b02      	cmp	r3, #2
 800660a:	d122      	bne.n	8006652 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006612:	f06f 0303 	mvn.w	r3, #3
 8006616:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006618:	e02d      	b.n	8006676 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800661e:	f107 0308 	add.w	r3, r7, #8
 8006622:	461a      	mov	r2, r3
 8006624:	2100      	movs	r1, #0
 8006626:	69b8      	ldr	r0, [r7, #24]
 8006628:	f001 f9ce 	bl	80079c8 <xQueueReceiveFromISR>
 800662c:	4603      	mov	r3, r0
 800662e:	2b01      	cmp	r3, #1
 8006630:	d003      	beq.n	800663a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006632:	f06f 0302 	mvn.w	r3, #2
 8006636:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006638:	e01d      	b.n	8006676 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01a      	beq.n	8006676 <osSemaphoreAcquire+0xb6>
 8006640:	4b11      	ldr	r3, [pc, #68]	; (8006688 <osSemaphoreAcquire+0xc8>)
 8006642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006650:	e011      	b.n	8006676 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	69b8      	ldr	r0, [r7, #24]
 8006656:	f001 f8af 	bl	80077b8 <xQueueSemaphoreTake>
 800665a:	4603      	mov	r3, r0
 800665c:	2b01      	cmp	r3, #1
 800665e:	d00b      	beq.n	8006678 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006666:	f06f 0301 	mvn.w	r3, #1
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	e004      	b.n	8006678 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800666e:	f06f 0302 	mvn.w	r3, #2
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e000      	b.n	8006678 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006676:	bf00      	nop
      }
    }
  }

  return (stat);
 8006678:	69fb      	ldr	r3, [r7, #28]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	2000021c 	.word	0x2000021c
 8006688:	e000ed04 	.word	0xe000ed04

0800668c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006698:	2300      	movs	r3, #0
 800669a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d103      	bne.n	80066aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80066a2:	f06f 0303 	mvn.w	r3, #3
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	e03e      	b.n	8006728 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066aa:	f3ef 8305 	mrs	r3, IPSR
 80066ae:	617b      	str	r3, [r7, #20]
  return(result);
 80066b0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10f      	bne.n	80066d6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066b6:	f3ef 8310 	mrs	r3, PRIMASK
 80066ba:	613b      	str	r3, [r7, #16]
  return(result);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066c2:	f3ef 8311 	mrs	r3, BASEPRI
 80066c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01e      	beq.n	800670c <osSemaphoreRelease+0x80>
 80066ce:	4b19      	ldr	r3, [pc, #100]	; (8006734 <osSemaphoreRelease+0xa8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d11a      	bne.n	800670c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80066da:	f107 0308 	add.w	r3, r7, #8
 80066de:	4619      	mov	r1, r3
 80066e0:	69b8      	ldr	r0, [r7, #24]
 80066e2:	f000 ff03 	bl	80074ec <xQueueGiveFromISR>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d003      	beq.n	80066f4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80066ec:	f06f 0302 	mvn.w	r3, #2
 80066f0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80066f2:	e018      	b.n	8006726 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d015      	beq.n	8006726 <osSemaphoreRelease+0x9a>
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <osSemaphoreRelease+0xac>)
 80066fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800670a:	e00c      	b.n	8006726 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800670c:	2300      	movs	r3, #0
 800670e:	2200      	movs	r2, #0
 8006710:	2100      	movs	r1, #0
 8006712:	69b8      	ldr	r0, [r7, #24]
 8006714:	f000 fd5c 	bl	80071d0 <xQueueGenericSend>
 8006718:	4603      	mov	r3, r0
 800671a:	2b01      	cmp	r3, #1
 800671c:	d004      	beq.n	8006728 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800671e:	f06f 0302 	mvn.w	r3, #2
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	e000      	b.n	8006728 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006726:	bf00      	nop
    }
  }

  return (stat);
 8006728:	69fb      	ldr	r3, [r7, #28]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3720      	adds	r7, #32
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	2000021c 	.word	0x2000021c
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006748:	f3ef 8305 	mrs	r3, IPSR
 800674c:	617b      	str	r3, [r7, #20]
  return(result);
 800674e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10f      	bne.n	8006774 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006754:	f3ef 8310 	mrs	r3, PRIMASK
 8006758:	613b      	str	r3, [r7, #16]
  return(result);
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d105      	bne.n	800676c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006760:	f3ef 8311 	mrs	r3, BASEPRI
 8006764:	60fb      	str	r3, [r7, #12]
  return(result);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <osSemaphoreDelete+0x40>
 800676c:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <osSemaphoreDelete+0x68>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d103      	bne.n	800677c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8006774:	f06f 0305 	mvn.w	r3, #5
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	e00e      	b.n	800679a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8006782:	f06f 0303 	mvn.w	r3, #3
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	e007      	b.n	800679a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800678a:	69b8      	ldr	r0, [r7, #24]
 800678c:	f001 fb46 	bl	8007e1c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8006794:	69b8      	ldr	r0, [r7, #24]
 8006796:	f001 f9ce 	bl	8007b36 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800679a:	69fb      	ldr	r3, [r7, #28]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	2000021c 	.word	0x2000021c

080067a8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	; 0x30
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067b8:	f3ef 8305 	mrs	r3, IPSR
 80067bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80067be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d170      	bne.n	80068a6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c4:	f3ef 8310 	mrs	r3, PRIMASK
 80067c8:	617b      	str	r3, [r7, #20]
  return(result);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d105      	bne.n	80067dc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067d0:	f3ef 8311 	mrs	r3, BASEPRI
 80067d4:	613b      	str	r3, [r7, #16]
  return(result);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <osMessageQueueNew+0x3c>
 80067dc:	4b34      	ldr	r3, [pc, #208]	; (80068b0 <osMessageQueueNew+0x108>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d060      	beq.n	80068a6 <osMessageQueueNew+0xfe>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d05d      	beq.n	80068a6 <osMessageQueueNew+0xfe>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d05a      	beq.n	80068a6 <osMessageQueueNew+0xfe>
    mem = -1;
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
 80067f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d029      	beq.n	8006850 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d012      	beq.n	800682a <osMessageQueueNew+0x82>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	2b4f      	cmp	r3, #79	; 0x4f
 800680a:	d90e      	bls.n	800682a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695a      	ldr	r2, [r3, #20]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	fb01 f303 	mul.w	r3, r1, r3
 8006820:	429a      	cmp	r2, r3
 8006822:	d302      	bcc.n	800682a <osMessageQueueNew+0x82>
        mem = 1;
 8006824:	2301      	movs	r3, #1
 8006826:	623b      	str	r3, [r7, #32]
 8006828:	e014      	b.n	8006854 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d110      	bne.n	8006854 <osMessageQueueNew+0xac>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10c      	bne.n	8006854 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800683e:	2b00      	cmp	r3, #0
 8006840:	d108      	bne.n	8006854 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d104      	bne.n	8006854 <osMessageQueueNew+0xac>
          mem = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	623b      	str	r3, [r7, #32]
 800684e:	e001      	b.n	8006854 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d10c      	bne.n	8006874 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691a      	ldr	r2, [r3, #16]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6899      	ldr	r1, [r3, #8]
 8006862:	2300      	movs	r3, #0
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	460b      	mov	r3, r1
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fac0 	bl	8006df0 <xQueueGenericCreateStatic>
 8006870:	6278      	str	r0, [r7, #36]	; 0x24
 8006872:	e008      	b.n	8006886 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d105      	bne.n	8006886 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800687a:	2200      	movs	r2, #0
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 fb29 	bl	8006ed6 <xQueueGenericCreate>
 8006884:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00c      	beq.n	80068a6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <osMessageQueueNew+0xf2>
        name = attr->name;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	e001      	b.n	800689e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800689e:	69f9      	ldr	r1, [r7, #28]
 80068a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068a2:	f001 fa93 	bl	8007dcc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3728      	adds	r7, #40	; 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	2000021c 	.word	0x2000021c

080068b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	; 0x28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068cc:	f3ef 8305 	mrs	r3, IPSR
 80068d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80068d2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10f      	bne.n	80068f8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068d8:	f3ef 8310 	mrs	r3, PRIMASK
 80068dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d105      	bne.n	80068f0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068e4:	f3ef 8311 	mrs	r3, BASEPRI
 80068e8:	617b      	str	r3, [r7, #20]
  return(result);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d02c      	beq.n	800694a <osMessageQueuePut+0x96>
 80068f0:	4b28      	ldr	r3, [pc, #160]	; (8006994 <osMessageQueuePut+0xe0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d128      	bne.n	800694a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <osMessageQueuePut+0x56>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <osMessageQueuePut+0x56>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800690a:	f06f 0303 	mvn.w	r3, #3
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006910:	e039      	b.n	8006986 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006916:	f107 0210 	add.w	r2, r7, #16
 800691a:	2300      	movs	r3, #0
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	6a38      	ldr	r0, [r7, #32]
 8006920:	f000 fd50 	bl	80073c4 <xQueueGenericSendFromISR>
 8006924:	4603      	mov	r3, r0
 8006926:	2b01      	cmp	r3, #1
 8006928:	d003      	beq.n	8006932 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800692a:	f06f 0302 	mvn.w	r3, #2
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006930:	e029      	b.n	8006986 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d026      	beq.n	8006986 <osMessageQueuePut+0xd2>
 8006938:	4b17      	ldr	r3, [pc, #92]	; (8006998 <osMessageQueuePut+0xe4>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006948:	e01d      	b.n	8006986 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <osMessageQueuePut+0xa2>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d103      	bne.n	800695e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006956:	f06f 0303 	mvn.w	r3, #3
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
 800695c:	e014      	b.n	8006988 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800695e:	2300      	movs	r3, #0
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	68b9      	ldr	r1, [r7, #8]
 8006964:	6a38      	ldr	r0, [r7, #32]
 8006966:	f000 fc33 	bl	80071d0 <xQueueGenericSend>
 800696a:	4603      	mov	r3, r0
 800696c:	2b01      	cmp	r3, #1
 800696e:	d00b      	beq.n	8006988 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006976:	f06f 0301 	mvn.w	r3, #1
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
 800697c:	e004      	b.n	8006988 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800697e:	f06f 0302 	mvn.w	r3, #2
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
 8006984:	e000      	b.n	8006988 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006986:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800698a:	4618      	mov	r0, r3
 800698c:	3728      	adds	r7, #40	; 0x28
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	2000021c 	.word	0x2000021c
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069b2:	f3ef 8305 	mrs	r3, IPSR
 80069b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80069b8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10f      	bne.n	80069de <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069be:	f3ef 8310 	mrs	r3, PRIMASK
 80069c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d105      	bne.n	80069d6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069ca:	f3ef 8311 	mrs	r3, BASEPRI
 80069ce:	617b      	str	r3, [r7, #20]
  return(result);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d02c      	beq.n	8006a30 <osMessageQueueGet+0x94>
 80069d6:	4b28      	ldr	r3, [pc, #160]	; (8006a78 <osMessageQueueGet+0xdc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d128      	bne.n	8006a30 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <osMessageQueueGet+0x54>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <osMessageQueueGet+0x54>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80069f0:	f06f 0303 	mvn.w	r3, #3
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80069f6:	e038      	b.n	8006a6a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80069fc:	f107 0310 	add.w	r3, r7, #16
 8006a00:	461a      	mov	r2, r3
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	6a38      	ldr	r0, [r7, #32]
 8006a06:	f000 ffdf 	bl	80079c8 <xQueueReceiveFromISR>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d003      	beq.n	8006a18 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006a10:	f06f 0302 	mvn.w	r3, #2
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a16:	e028      	b.n	8006a6a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d025      	beq.n	8006a6a <osMessageQueueGet+0xce>
 8006a1e:	4b17      	ldr	r3, [pc, #92]	; (8006a7c <osMessageQueueGet+0xe0>)
 8006a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a2e:	e01c      	b.n	8006a6a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <osMessageQueueGet+0xa0>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d103      	bne.n	8006a44 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006a3c:	f06f 0303 	mvn.w	r3, #3
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
 8006a42:	e013      	b.n	8006a6c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	6a38      	ldr	r0, [r7, #32]
 8006a4a:	f000 fdd9 	bl	8007600 <xQueueReceive>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d00b      	beq.n	8006a6c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006a5a:	f06f 0301 	mvn.w	r3, #1
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a60:	e004      	b.n	8006a6c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006a62:	f06f 0302 	mvn.w	r3, #2
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
 8006a68:	e000      	b.n	8006a6c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3728      	adds	r7, #40	; 0x28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	2000021c 	.word	0x2000021c
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d102      	bne.n	8006a98 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	e01e      	b.n	8006ad6 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a98:	f3ef 8305 	mrs	r3, IPSR
 8006a9c:	617b      	str	r3, [r7, #20]
  return(result);
 8006a9e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10f      	bne.n	8006ac4 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa8:	613b      	str	r3, [r7, #16]
  return(result);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d008      	beq.n	8006ace <osMessageQueueGetCount+0x4e>
 8006abc:	4b08      	ldr	r3, [pc, #32]	; (8006ae0 <osMessageQueueGetCount+0x60>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d104      	bne.n	8006ace <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006ac4:	69b8      	ldr	r0, [r7, #24]
 8006ac6:	f001 f819 	bl	8007afc <uxQueueMessagesWaitingFromISR>
 8006aca:	61f8      	str	r0, [r7, #28]
 8006acc:	e003      	b.n	8006ad6 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006ace:	69b8      	ldr	r0, [r7, #24]
 8006ad0:	f000 fff7 	bl	8007ac2 <uxQueueMessagesWaiting>
 8006ad4:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8006ad6:	69fb      	ldr	r3, [r7, #28]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3720      	adds	r7, #32
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	2000021c 	.word	0x2000021c

08006ae4 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006af0:	f3ef 8305 	mrs	r3, IPSR
 8006af4:	617b      	str	r3, [r7, #20]
  return(result);
 8006af6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10f      	bne.n	8006b1c <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006afc:	f3ef 8310 	mrs	r3, PRIMASK
 8006b00:	613b      	str	r3, [r7, #16]
  return(result);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d105      	bne.n	8006b14 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b08:	f3ef 8311 	mrs	r3, BASEPRI
 8006b0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d007      	beq.n	8006b24 <osMessageQueueDelete+0x40>
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <osMessageQueueDelete+0x68>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d103      	bne.n	8006b24 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8006b1c:	f06f 0305 	mvn.w	r3, #5
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	e00e      	b.n	8006b42 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d103      	bne.n	8006b32 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8006b2a:	f06f 0303 	mvn.w	r3, #3
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	e007      	b.n	8006b42 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006b32:	69b8      	ldr	r0, [r7, #24]
 8006b34:	f001 f972 	bl	8007e1c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8006b3c:	69b8      	ldr	r0, [r7, #24]
 8006b3e:	f000 fffa 	bl	8007b36 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006b42:	69fb      	ldr	r3, [r7, #28]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	2000021c 	.word	0x2000021c

08006b50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4a07      	ldr	r2, [pc, #28]	; (8006b7c <vApplicationGetIdleTaskMemory+0x2c>)
 8006b60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	4a06      	ldr	r2, [pc, #24]	; (8006b80 <vApplicationGetIdleTaskMemory+0x30>)
 8006b66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2280      	movs	r2, #128	; 0x80
 8006b6c:	601a      	str	r2, [r3, #0]
}
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000220 	.word	0x20000220
 8006b80:	2000027c 	.word	0x2000027c

08006b84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a07      	ldr	r2, [pc, #28]	; (8006bb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006b94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4a06      	ldr	r2, [pc, #24]	; (8006bb4 <vApplicationGetTimerTaskMemory+0x30>)
 8006b9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ba2:	601a      	str	r2, [r3, #0]
}
 8006ba4:	bf00      	nop
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	2000047c 	.word	0x2000047c
 8006bb4:	200004d8 	.word	0x200004d8

08006bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f103 0208 	add.w	r2, r3, #8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f103 0208 	add.w	r2, r3, #8
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f103 0208 	add.w	r2, r3, #8
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	601a      	str	r2, [r3, #0]
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d103      	bne.n	8006c7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	e00c      	b.n	8006c94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	e002      	b.n	8006c88 <vListInsert+0x2e>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d2f6      	bcs.n	8006c82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	601a      	str	r2, [r3, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6892      	ldr	r2, [r2, #8]
 8006ce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6852      	ldr	r2, [r2, #4]
 8006cec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d103      	bne.n	8006d00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	1e5a      	subs	r2, r3, #1
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d109      	bne.n	8006d48 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	e7fe      	b.n	8006d46 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006d48:	f002 fd38 	bl	80097bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d54:	68f9      	ldr	r1, [r7, #12]
 8006d56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	441a      	add	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	68f9      	ldr	r1, [r7, #12]
 8006d7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d7e:	fb01 f303 	mul.w	r3, r1, r3
 8006d82:	441a      	add	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	22ff      	movs	r2, #255	; 0xff
 8006d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	22ff      	movs	r2, #255	; 0xff
 8006d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d114      	bne.n	8006dc8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d01a      	beq.n	8006ddc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3310      	adds	r3, #16
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fcf8 	bl	80087a0 <xTaskRemoveFromEventList>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d012      	beq.n	8006ddc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006db6:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <xQueueGenericReset+0xcc>)
 8006db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	e009      	b.n	8006ddc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3310      	adds	r3, #16
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff fef3 	bl	8006bb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3324      	adds	r3, #36	; 0x24
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff feee 	bl	8006bb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ddc:	f002 fd1c 	bl	8009818 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006de0:	2301      	movs	r3, #1
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	e000ed04 	.word	0xe000ed04

08006df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08e      	sub	sp, #56	; 0x38
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d109      	bne.n	8006e18 <xQueueGenericCreateStatic+0x28>
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e16:	e7fe      	b.n	8006e16 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <xQueueGenericCreateStatic+0x42>
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e30:	e7fe      	b.n	8006e30 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <xQueueGenericCreateStatic+0x4e>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <xQueueGenericCreateStatic+0x52>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <xQueueGenericCreateStatic+0x54>
 8006e42:	2300      	movs	r3, #0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d109      	bne.n	8006e5c <xQueueGenericCreateStatic+0x6c>
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	623b      	str	r3, [r7, #32]
 8006e5a:	e7fe      	b.n	8006e5a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <xQueueGenericCreateStatic+0x78>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <xQueueGenericCreateStatic+0x7c>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <xQueueGenericCreateStatic+0x7e>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <xQueueGenericCreateStatic+0x96>
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	61fb      	str	r3, [r7, #28]
 8006e84:	e7fe      	b.n	8006e84 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e86:	2350      	movs	r3, #80	; 0x50
 8006e88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b50      	cmp	r3, #80	; 0x50
 8006e8e:	d009      	beq.n	8006ea4 <xQueueGenericCreateStatic+0xb4>
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	e7fe      	b.n	8006ea2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ea4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00d      	beq.n	8006ecc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006eb8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 f844 	bl	8006f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3730      	adds	r7, #48	; 0x30
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b08a      	sub	sp, #40	; 0x28
 8006eda:	af02      	add	r7, sp, #8
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <xQueueGenericCreate+0x28>
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	e7fe      	b.n	8006efc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d102      	bne.n	8006f0a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	e004      	b.n	8006f14 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	fb02 f303 	mul.w	r3, r2, r3
 8006f12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3350      	adds	r3, #80	; 0x50
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f002 fd69 	bl	80099f0 <pvPortMalloc>
 8006f1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d011      	beq.n	8006f4a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	3350      	adds	r3, #80	; 0x50
 8006f2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f38:	79fa      	ldrb	r2, [r7, #7]
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f805 	bl	8006f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f4a:	69bb      	ldr	r3, [r7, #24]
	}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3720      	adds	r7, #32
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	e002      	b.n	8006f76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f82:	2101      	movs	r1, #1
 8006f84:	69b8      	ldr	r0, [r7, #24]
 8006f86:	f7ff fecb 	bl	8006d20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	78fa      	ldrb	r2, [r7, #3]
 8006f8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00e      	beq.n	8006fc6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f905 	bl	80071d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b086      	sub	sp, #24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	6939      	ldr	r1, [r7, #16]
 8006fe6:	6978      	ldr	r0, [r7, #20]
 8006fe8:	f7ff ff75 	bl	8006ed6 <xQueueGenericCreate>
 8006fec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f7ff ffd3 	bl	8006f9a <prvInitialiseMutex>

		return xNewQueue;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
	}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b088      	sub	sp, #32
 8007002:	af02      	add	r7, sp, #8
 8007004:	4603      	mov	r3, r0
 8007006:	6039      	str	r1, [r7, #0]
 8007008:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800700a:	2301      	movs	r3, #1
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	2300      	movs	r3, #0
 8007010:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2200      	movs	r2, #0
 800701a:	6939      	ldr	r1, [r7, #16]
 800701c:	6978      	ldr	r0, [r7, #20]
 800701e:	f7ff fee7 	bl	8006df0 <xQueueGenericCreateStatic>
 8007022:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff ffb8 	bl	8006f9a <prvInitialiseMutex>

		return xNewQueue;
 800702a:	68fb      	ldr	r3, [r7, #12]
	}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007034:	b590      	push	{r4, r7, lr}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <xQueueGiveMutexRecursive+0x26>
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e7fe      	b.n	8007058 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	689c      	ldr	r4, [r3, #8]
 800705e:	f001 fd55 	bl	8008b0c <xTaskGetCurrentTaskHandle>
 8007062:	4603      	mov	r3, r0
 8007064:	429c      	cmp	r4, r3
 8007066:	d111      	bne.n	800708c <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	1e5a      	subs	r2, r3, #1
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d105      	bne.n	8007086 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800707a:	2300      	movs	r3, #0
 800707c:	2200      	movs	r2, #0
 800707e:	2100      	movs	r1, #0
 8007080:	6938      	ldr	r0, [r7, #16]
 8007082:	f000 f8a5 	bl	80071d0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007086:	2301      	movs	r3, #1
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	e001      	b.n	8007090 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007090:	697b      	ldr	r3, [r7, #20]
	}
 8007092:	4618      	mov	r0, r3
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	bd90      	pop	{r4, r7, pc}

0800709a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800709a:	b590      	push	{r4, r7, lr}
 800709c:	b087      	sub	sp, #28
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d109      	bne.n	80070c2 <xQueueTakeMutexRecursive+0x28>
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e7fe      	b.n	80070c0 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	689c      	ldr	r4, [r3, #8]
 80070c6:	f001 fd21 	bl	8008b0c <xTaskGetCurrentTaskHandle>
 80070ca:	4603      	mov	r3, r0
 80070cc:	429c      	cmp	r4, r3
 80070ce:	d107      	bne.n	80070e0 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80070da:	2301      	movs	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	e00c      	b.n	80070fa <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6938      	ldr	r0, [r7, #16]
 80070e4:	f000 fb68 	bl	80077b8 <xQueueSemaphoreTake>
 80070e8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80070fa:	697b      	ldr	r3, [r7, #20]
	}
 80070fc:	4618      	mov	r0, r3
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	bd90      	pop	{r4, r7, pc}

08007104 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d109      	bne.n	800712a <xQueueCreateCountingSemaphoreStatic+0x26>
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	61bb      	str	r3, [r7, #24]
 8007128:	e7fe      	b.n	8007128 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	429a      	cmp	r2, r3
 8007130:	d909      	bls.n	8007146 <xQueueCreateCountingSemaphoreStatic+0x42>
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	e7fe      	b.n	8007144 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007146:	2302      	movs	r3, #2
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	2100      	movs	r1, #0
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff fe4d 	bl	8006df0 <xQueueGenericCreateStatic>
 8007156:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007164:	69fb      	ldr	r3, [r7, #28]
	}
 8007166:	4618      	mov	r0, r3
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800716e:	b580      	push	{r7, lr}
 8007170:	b086      	sub	sp, #24
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d109      	bne.n	8007192 <xQueueCreateCountingSemaphore+0x24>
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	e7fe      	b.n	8007190 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	429a      	cmp	r2, r3
 8007198:	d909      	bls.n	80071ae <xQueueCreateCountingSemaphore+0x40>
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	e7fe      	b.n	80071ac <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80071ae:	2202      	movs	r2, #2
 80071b0:	2100      	movs	r1, #0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff fe8f 	bl	8006ed6 <xQueueGenericCreate>
 80071b8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80071c6:	697b      	ldr	r3, [r7, #20]
	}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08e      	sub	sp, #56	; 0x38
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071de:	2300      	movs	r3, #0
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d109      	bne.n	8007200 <xQueueGenericSend+0x30>
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071fe:	e7fe      	b.n	80071fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d103      	bne.n	800720e <xQueueGenericSend+0x3e>
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <xQueueGenericSend+0x42>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <xQueueGenericSend+0x44>
 8007212:	2300      	movs	r3, #0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d109      	bne.n	800722c <xQueueGenericSend+0x5c>
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
 800722a:	e7fe      	b.n	800722a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b02      	cmp	r3, #2
 8007230:	d103      	bne.n	800723a <xQueueGenericSend+0x6a>
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <xQueueGenericSend+0x6e>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <xQueueGenericSend+0x70>
 800723e:	2300      	movs	r3, #0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d109      	bne.n	8007258 <xQueueGenericSend+0x88>
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	623b      	str	r3, [r7, #32]
 8007256:	e7fe      	b.n	8007256 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007258:	f001 fc68 	bl	8008b2c <xTaskGetSchedulerState>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d102      	bne.n	8007268 <xQueueGenericSend+0x98>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <xQueueGenericSend+0x9c>
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <xQueueGenericSend+0x9e>
 800726c:	2300      	movs	r3, #0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <xQueueGenericSend+0xb6>
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	61fb      	str	r3, [r7, #28]
 8007284:	e7fe      	b.n	8007284 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007286:	f002 fa99 	bl	80097bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007292:	429a      	cmp	r2, r3
 8007294:	d302      	bcc.n	800729c <xQueueGenericSend+0xcc>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d129      	bne.n	80072f0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072a2:	f000 fc82 	bl	8007baa <prvCopyDataToQueue>
 80072a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d010      	beq.n	80072d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	3324      	adds	r3, #36	; 0x24
 80072b4:	4618      	mov	r0, r3
 80072b6:	f001 fa73 	bl	80087a0 <xTaskRemoveFromEventList>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d013      	beq.n	80072e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072c0:	4b3f      	ldr	r3, [pc, #252]	; (80073c0 <xQueueGenericSend+0x1f0>)
 80072c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	e00a      	b.n	80072e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d007      	beq.n	80072e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072d8:	4b39      	ldr	r3, [pc, #228]	; (80073c0 <xQueueGenericSend+0x1f0>)
 80072da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072e8:	f002 fa96 	bl	8009818 <vPortExitCritical>
				return pdPASS;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e063      	b.n	80073b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072f6:	f002 fa8f 	bl	8009818 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e05c      	b.n	80073b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007304:	f107 0314 	add.w	r3, r7, #20
 8007308:	4618      	mov	r0, r3
 800730a:	f001 faab 	bl	8008864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800730e:	2301      	movs	r3, #1
 8007310:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007312:	f002 fa81 	bl	8009818 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007316:	f001 f815 	bl	8008344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800731a:	f002 fa4f 	bl	80097bc <vPortEnterCritical>
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007324:	b25b      	sxtb	r3, r3
 8007326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732a:	d103      	bne.n	8007334 <xQueueGenericSend+0x164>
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800733a:	b25b      	sxtb	r3, r3
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d103      	bne.n	800734a <xQueueGenericSend+0x17a>
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800734a:	f002 fa65 	bl	8009818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800734e:	1d3a      	adds	r2, r7, #4
 8007350:	f107 0314 	add.w	r3, r7, #20
 8007354:	4611      	mov	r1, r2
 8007356:	4618      	mov	r0, r3
 8007358:	f001 fa9a 	bl	8008890 <xTaskCheckForTimeOut>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d124      	bne.n	80073ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007364:	f000 fd19 	bl	8007d9a <prvIsQueueFull>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d018      	beq.n	80073a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	3310      	adds	r3, #16
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	4611      	mov	r1, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f001 f9c4 	bl	8008704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800737c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800737e:	f000 fca4 	bl	8007cca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007382:	f000 ffed 	bl	8008360 <xTaskResumeAll>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	f47f af7c 	bne.w	8007286 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800738e:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <xQueueGenericSend+0x1f0>)
 8007390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	e772      	b.n	8007286 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073a2:	f000 fc92 	bl	8007cca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073a6:	f000 ffdb 	bl	8008360 <xTaskResumeAll>
 80073aa:	e76c      	b.n	8007286 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ae:	f000 fc8c 	bl	8007cca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073b2:	f000 ffd5 	bl	8008360 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3738      	adds	r7, #56	; 0x38
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	e000ed04 	.word	0xe000ed04

080073c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08e      	sub	sp, #56	; 0x38
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d109      	bne.n	80073f0 <xQueueGenericSendFromISR+0x2c>
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
 80073ee:	e7fe      	b.n	80073ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <xQueueGenericSendFromISR+0x3a>
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <xQueueGenericSendFromISR+0x3e>
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <xQueueGenericSendFromISR+0x40>
 8007402:	2300      	movs	r3, #0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d109      	bne.n	800741c <xQueueGenericSendFromISR+0x58>
 8007408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	623b      	str	r3, [r7, #32]
 800741a:	e7fe      	b.n	800741a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d103      	bne.n	800742a <xQueueGenericSendFromISR+0x66>
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <xQueueGenericSendFromISR+0x6a>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <xQueueGenericSendFromISR+0x6c>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d109      	bne.n	8007448 <xQueueGenericSendFromISR+0x84>
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	e7fe      	b.n	8007446 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007448:	f002 fa94 	bl	8009974 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800744c:	f3ef 8211 	mrs	r2, BASEPRI
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	61ba      	str	r2, [r7, #24]
 8007462:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007464:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007466:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007470:	429a      	cmp	r2, r3
 8007472:	d302      	bcc.n	800747a <xQueueGenericSendFromISR+0xb6>
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d12c      	bne.n	80074d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800748a:	f000 fb8e 	bl	8007baa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800748e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d112      	bne.n	80074be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	2b00      	cmp	r3, #0
 800749e:	d016      	beq.n	80074ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	3324      	adds	r3, #36	; 0x24
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 f97b 	bl	80087a0 <xTaskRemoveFromEventList>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00e      	beq.n	80074ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00b      	beq.n	80074ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	e007      	b.n	80074ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074c2:	3301      	adds	r3, #1
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	b25a      	sxtb	r2, r3
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80074ce:	2301      	movs	r3, #1
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80074d2:	e001      	b.n	80074d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3738      	adds	r7, #56	; 0x38
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08e      	sub	sp, #56	; 0x38
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d109      	bne.n	8007514 <xQueueGiveFromISR+0x28>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	623b      	str	r3, [r7, #32]
 8007512:	e7fe      	b.n	8007512 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d009      	beq.n	8007530 <xQueueGiveFromISR+0x44>
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	61fb      	str	r3, [r7, #28]
 800752e:	e7fe      	b.n	800752e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d103      	bne.n	8007540 <xQueueGiveFromISR+0x54>
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <xQueueGiveFromISR+0x58>
 8007540:	2301      	movs	r3, #1
 8007542:	e000      	b.n	8007546 <xQueueGiveFromISR+0x5a>
 8007544:	2300      	movs	r3, #0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <xQueueGiveFromISR+0x72>
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	61bb      	str	r3, [r7, #24]
 800755c:	e7fe      	b.n	800755c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800755e:	f002 fa09 	bl	8009974 <vPortValidateInterruptPriority>
	__asm volatile
 8007562:	f3ef 8211 	mrs	r2, BASEPRI
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	617a      	str	r2, [r7, #20]
 8007578:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800757a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800757c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800758a:	429a      	cmp	r2, r3
 800758c:	d22b      	bcs.n	80075e6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d112      	bne.n	80075d0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d016      	beq.n	80075e0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	3324      	adds	r3, #36	; 0x24
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 f8f2 	bl	80087a0 <xTaskRemoveFromEventList>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00e      	beq.n	80075e0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00b      	beq.n	80075e0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e007      	b.n	80075e0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075d4:	3301      	adds	r3, #1
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	b25a      	sxtb	r2, r3
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80075e0:	2301      	movs	r3, #1
 80075e2:	637b      	str	r3, [r7, #52]	; 0x34
 80075e4:	e001      	b.n	80075ea <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3738      	adds	r7, #56	; 0x38
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08c      	sub	sp, #48	; 0x30
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800760c:	2300      	movs	r3, #0
 800760e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <xQueueReceive+0x2e>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	623b      	str	r3, [r7, #32]
 800762c:	e7fe      	b.n	800762c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d103      	bne.n	800763c <xQueueReceive+0x3c>
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <xQueueReceive+0x40>
 800763c:	2301      	movs	r3, #1
 800763e:	e000      	b.n	8007642 <xQueueReceive+0x42>
 8007640:	2300      	movs	r3, #0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <xQueueReceive+0x5a>
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	e7fe      	b.n	8007658 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800765a:	f001 fa67 	bl	8008b2c <xTaskGetSchedulerState>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d102      	bne.n	800766a <xQueueReceive+0x6a>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <xQueueReceive+0x6e>
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <xQueueReceive+0x70>
 800766e:	2300      	movs	r3, #0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d109      	bne.n	8007688 <xQueueReceive+0x88>
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	61bb      	str	r3, [r7, #24]
 8007686:	e7fe      	b.n	8007686 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007688:	f002 f898 	bl	80097bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01f      	beq.n	80076d8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007698:	68b9      	ldr	r1, [r7, #8]
 800769a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800769c:	f000 faef 	bl	8007c7e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	1e5a      	subs	r2, r3, #1
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00f      	beq.n	80076d0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	3310      	adds	r3, #16
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 f873 	bl	80087a0 <xTaskRemoveFromEventList>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076c0:	4b3c      	ldr	r3, [pc, #240]	; (80077b4 <xQueueReceive+0x1b4>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076d0:	f002 f8a2 	bl	8009818 <vPortExitCritical>
				return pdPASS;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e069      	b.n	80077ac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076de:	f002 f89b 	bl	8009818 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e062      	b.n	80077ac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076ec:	f107 0310 	add.w	r3, r7, #16
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 f8b7 	bl	8008864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076f6:	2301      	movs	r3, #1
 80076f8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076fa:	f002 f88d 	bl	8009818 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076fe:	f000 fe21 	bl	8008344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007702:	f002 f85b 	bl	80097bc <vPortEnterCritical>
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800770c:	b25b      	sxtb	r3, r3
 800770e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007712:	d103      	bne.n	800771c <xQueueReceive+0x11c>
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007722:	b25b      	sxtb	r3, r3
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007728:	d103      	bne.n	8007732 <xQueueReceive+0x132>
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007732:	f002 f871 	bl	8009818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007736:	1d3a      	adds	r2, r7, #4
 8007738:	f107 0310 	add.w	r3, r7, #16
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f001 f8a6 	bl	8008890 <xTaskCheckForTimeOut>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d123      	bne.n	8007792 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800774a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800774c:	f000 fb0f 	bl	8007d6e <prvIsQueueEmpty>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d017      	beq.n	8007786 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	3324      	adds	r3, #36	; 0x24
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	4611      	mov	r1, r2
 800775e:	4618      	mov	r0, r3
 8007760:	f000 ffd0 	bl	8008704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007766:	f000 fab0 	bl	8007cca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800776a:	f000 fdf9 	bl	8008360 <xTaskResumeAll>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d189      	bne.n	8007688 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007774:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <xQueueReceive+0x1b4>)
 8007776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	e780      	b.n	8007688 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007788:	f000 fa9f 	bl	8007cca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800778c:	f000 fde8 	bl	8008360 <xTaskResumeAll>
 8007790:	e77a      	b.n	8007688 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007794:	f000 fa99 	bl	8007cca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007798:	f000 fde2 	bl	8008360 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800779c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800779e:	f000 fae6 	bl	8007d6e <prvIsQueueEmpty>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f43f af6f 	beq.w	8007688 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3730      	adds	r7, #48	; 0x30
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	e000ed04 	.word	0xe000ed04

080077b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08e      	sub	sp, #56	; 0x38
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <xQueueSemaphoreTake+0x30>
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	623b      	str	r3, [r7, #32]
 80077e6:	e7fe      	b.n	80077e6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <xQueueSemaphoreTake+0x4c>
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	e7fe      	b.n	8007802 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007804:	f001 f992 	bl	8008b2c <xTaskGetSchedulerState>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <xQueueSemaphoreTake+0x5c>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <xQueueSemaphoreTake+0x60>
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <xQueueSemaphoreTake+0x62>
 8007818:	2300      	movs	r3, #0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <xQueueSemaphoreTake+0x7a>
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	e7fe      	b.n	8007830 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007832:	f001 ffc3 	bl	80097bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	2b00      	cmp	r3, #0
 8007840:	d024      	beq.n	800788c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d104      	bne.n	800785c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007852:	f001 fadd 	bl	8008e10 <pvTaskIncrementMutexHeldCount>
 8007856:	4602      	mov	r2, r0
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00f      	beq.n	8007884 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	3310      	adds	r3, #16
 8007868:	4618      	mov	r0, r3
 800786a:	f000 ff99 	bl	80087a0 <xTaskRemoveFromEventList>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007874:	4b53      	ldr	r3, [pc, #332]	; (80079c4 <xQueueSemaphoreTake+0x20c>)
 8007876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007884:	f001 ffc8 	bl	8009818 <vPortExitCritical>
				return pdPASS;
 8007888:	2301      	movs	r3, #1
 800788a:	e096      	b.n	80079ba <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d110      	bne.n	80078b4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	2b00      	cmp	r3, #0
 8007896:	d009      	beq.n	80078ac <xQueueSemaphoreTake+0xf4>
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	e7fe      	b.n	80078aa <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80078ac:	f001 ffb4 	bl	8009818 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078b0:	2300      	movs	r3, #0
 80078b2:	e082      	b.n	80079ba <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d106      	bne.n	80078c8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078ba:	f107 030c 	add.w	r3, r7, #12
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 ffd0 	bl	8008864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078c4:	2301      	movs	r3, #1
 80078c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078c8:	f001 ffa6 	bl	8009818 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078cc:	f000 fd3a 	bl	8008344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078d0:	f001 ff74 	bl	80097bc <vPortEnterCritical>
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078da:	b25b      	sxtb	r3, r3
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d103      	bne.n	80078ea <xQueueSemaphoreTake+0x132>
 80078e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078f0:	b25b      	sxtb	r3, r3
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d103      	bne.n	8007900 <xQueueSemaphoreTake+0x148>
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007900:	f001 ff8a 	bl	8009818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007904:	463a      	mov	r2, r7
 8007906:	f107 030c 	add.w	r3, r7, #12
 800790a:	4611      	mov	r1, r2
 800790c:	4618      	mov	r0, r3
 800790e:	f000 ffbf 	bl	8008890 <xTaskCheckForTimeOut>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d132      	bne.n	800797e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007918:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800791a:	f000 fa28 	bl	8007d6e <prvIsQueueEmpty>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d026      	beq.n	8007972 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800792c:	f001 ff46 	bl	80097bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	4618      	mov	r0, r3
 8007936:	f001 f917 	bl	8008b68 <xTaskPriorityInherit>
 800793a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800793c:	f001 ff6c 	bl	8009818 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	3324      	adds	r3, #36	; 0x24
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	4611      	mov	r1, r2
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fedb 	bl	8008704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800794e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007950:	f000 f9bb 	bl	8007cca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007954:	f000 fd04 	bl	8008360 <xTaskResumeAll>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	f47f af69 	bne.w	8007832 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007960:	4b18      	ldr	r3, [pc, #96]	; (80079c4 <xQueueSemaphoreTake+0x20c>)
 8007962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	e75f      	b.n	8007832 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007974:	f000 f9a9 	bl	8007cca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007978:	f000 fcf2 	bl	8008360 <xTaskResumeAll>
 800797c:	e759      	b.n	8007832 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800797e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007980:	f000 f9a3 	bl	8007cca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007984:	f000 fcec 	bl	8008360 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800798a:	f000 f9f0 	bl	8007d6e <prvIsQueueEmpty>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	f43f af4e 	beq.w	8007832 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00d      	beq.n	80079b8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800799c:	f001 ff0e 	bl	80097bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80079a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079a2:	f000 f8ea 	bl	8007b7a <prvGetDisinheritPriorityAfterTimeout>
 80079a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079ae:	4618      	mov	r0, r3
 80079b0:	f001 f9ae 	bl	8008d10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80079b4:	f001 ff30 	bl	8009818 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3738      	adds	r7, #56	; 0x38
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	e000ed04 	.word	0xe000ed04

080079c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08e      	sub	sp, #56	; 0x38
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <xQueueReceiveFromISR+0x2a>
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	623b      	str	r3, [r7, #32]
 80079f0:	e7fe      	b.n	80079f0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d103      	bne.n	8007a00 <xQueueReceiveFromISR+0x38>
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <xQueueReceiveFromISR+0x3c>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e000      	b.n	8007a06 <xQueueReceiveFromISR+0x3e>
 8007a04:	2300      	movs	r3, #0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d109      	bne.n	8007a1e <xQueueReceiveFromISR+0x56>
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	e7fe      	b.n	8007a1c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a1e:	f001 ffa9 	bl	8009974 <vPortValidateInterruptPriority>
	__asm volatile
 8007a22:	f3ef 8211 	mrs	r2, BASEPRI
 8007a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	61ba      	str	r2, [r7, #24]
 8007a38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d02f      	beq.n	8007aaa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a54:	68b9      	ldr	r1, [r7, #8]
 8007a56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a58:	f000 f911 	bl	8007c7e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	1e5a      	subs	r2, r3, #1
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d112      	bne.n	8007a94 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d016      	beq.n	8007aa4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	3310      	adds	r3, #16
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fe90 	bl	80087a0 <xTaskRemoveFromEventList>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	e007      	b.n	8007aa4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a98:	3301      	adds	r3, #1
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	b25a      	sxtb	r2, r3
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa8:	e001      	b.n	8007aae <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3738      	adds	r7, #56	; 0x38
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d109      	bne.n	8007ae4 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	60bb      	str	r3, [r7, #8]
 8007ae2:	e7fe      	b.n	8007ae2 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8007ae4:	f001 fe6a 	bl	80097bc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007aee:	f001 fe93 	bl	8009818 <vPortExitCritical>

	return uxReturn;
 8007af2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <uxQueueMessagesWaitingFromISR+0x26>
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e7fe      	b.n	8007b20 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007b28:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <vQueueDelete+0x26>
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	60bb      	str	r3, [r7, #8]
 8007b5a:	e7fe      	b.n	8007b5a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f95d 	bl	8007e1c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f002 f801 	bl	8009b74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d006      	beq.n	8007b98 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	e001      	b.n	8007b9c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
	}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10d      	bne.n	8007be4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d14d      	bne.n	8007c6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f001 f82f 	bl	8008c38 <xTaskPriorityDisinherit>
 8007bda:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	609a      	str	r2, [r3, #8]
 8007be2:	e043      	b.n	8007c6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d119      	bne.n	8007c1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6858      	ldr	r0, [r3, #4]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	f012 fbd1 	bl	801a39c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	441a      	add	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d32b      	bcc.n	8007c6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	605a      	str	r2, [r3, #4]
 8007c1c:	e026      	b.n	8007c6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	68d8      	ldr	r0, [r3, #12]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	461a      	mov	r2, r3
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	f012 fbb7 	bl	801a39c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	425b      	negs	r3, r3
 8007c38:	441a      	add	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d207      	bcs.n	8007c5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	425b      	negs	r3, r3
 8007c54:	441a      	add	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d105      	bne.n	8007c6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c74:	697b      	ldr	r3, [r7, #20]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d018      	beq.n	8007cc2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c98:	441a      	add	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d303      	bcc.n	8007cb2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68d9      	ldr	r1, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6838      	ldr	r0, [r7, #0]
 8007cbe:	f012 fb6d 	bl	801a39c <memcpy>
	}
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cd2:	f001 fd73 	bl	80097bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cdc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cde:	e011      	b.n	8007d04 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d012      	beq.n	8007d0e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3324      	adds	r3, #36	; 0x24
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fd57 	bl	80087a0 <xTaskRemoveFromEventList>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cf8:	f000 fe2a 	bl	8008950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	dce9      	bgt.n	8007ce0 <prvUnlockQueue+0x16>
 8007d0c:	e000      	b.n	8007d10 <prvUnlockQueue+0x46>
					break;
 8007d0e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	22ff      	movs	r2, #255	; 0xff
 8007d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d18:	f001 fd7e 	bl	8009818 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d1c:	f001 fd4e 	bl	80097bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d26:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d28:	e011      	b.n	8007d4e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d012      	beq.n	8007d58 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	3310      	adds	r3, #16
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fd32 	bl	80087a0 <xTaskRemoveFromEventList>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d42:	f000 fe05 	bl	8008950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d46:	7bbb      	ldrb	r3, [r7, #14]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dce9      	bgt.n	8007d2a <prvUnlockQueue+0x60>
 8007d56:	e000      	b.n	8007d5a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d58:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	22ff      	movs	r2, #255	; 0xff
 8007d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d62:	f001 fd59 	bl	8009818 <vPortExitCritical>
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d76:	f001 fd21 	bl	80097bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d82:	2301      	movs	r3, #1
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e001      	b.n	8007d8c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d8c:	f001 fd44 	bl	8009818 <vPortExitCritical>

	return xReturn;
 8007d90:	68fb      	ldr	r3, [r7, #12]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007da2:	f001 fd0b 	bl	80097bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d102      	bne.n	8007db8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007db2:	2301      	movs	r3, #1
 8007db4:	60fb      	str	r3, [r7, #12]
 8007db6:	e001      	b.n	8007dbc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dbc:	f001 fd2c 	bl	8009818 <vPortExitCritical>

	return xReturn;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	e014      	b.n	8007e06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ddc:	4a0e      	ldr	r2, [pc, #56]	; (8007e18 <vQueueAddToRegistry+0x4c>)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10b      	bne.n	8007e00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007de8:	490b      	ldr	r1, [pc, #44]	; (8007e18 <vQueueAddToRegistry+0x4c>)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007df2:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <vQueueAddToRegistry+0x4c>)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	4413      	add	r3, r2
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007dfe:	e005      	b.n	8007e0c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b07      	cmp	r3, #7
 8007e0a:	d9e7      	bls.n	8007ddc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e0c:	bf00      	nop
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	20008358 	.word	0x20008358

08007e1c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	e016      	b.n	8007e58 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e2a:	4a10      	ldr	r2, [pc, #64]	; (8007e6c <vQueueUnregisterQueue+0x50>)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	4413      	add	r3, r2
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d10b      	bne.n	8007e52 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e3a:	4a0c      	ldr	r2, [pc, #48]	; (8007e6c <vQueueUnregisterQueue+0x50>)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2100      	movs	r1, #0
 8007e40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e44:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <vQueueUnregisterQueue+0x50>)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	605a      	str	r2, [r3, #4]
				break;
 8007e50:	e005      	b.n	8007e5e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b07      	cmp	r3, #7
 8007e5c:	d9e5      	bls.n	8007e2a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e5e:	bf00      	nop
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20008358 	.word	0x20008358

08007e70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e80:	f001 fc9c 	bl	80097bc <vPortEnterCritical>
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e8a:	b25b      	sxtb	r3, r3
 8007e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e90:	d103      	bne.n	8007e9a <vQueueWaitForMessageRestricted+0x2a>
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ea0:	b25b      	sxtb	r3, r3
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea6:	d103      	bne.n	8007eb0 <vQueueWaitForMessageRestricted+0x40>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eb0:	f001 fcb2 	bl	8009818 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d106      	bne.n	8007eca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	3324      	adds	r3, #36	; 0x24
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fc41 	bl	800874c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007eca:	6978      	ldr	r0, [r7, #20]
 8007ecc:	f7ff fefd 	bl	8007cca <prvUnlockQueue>
	}
 8007ed0:	bf00      	nop
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08e      	sub	sp, #56	; 0x38
 8007edc:	af04      	add	r7, sp, #16
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <xTaskCreateStatic+0x28>
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	623b      	str	r3, [r7, #32]
 8007efe:	e7fe      	b.n	8007efe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <xTaskCreateStatic+0x42>
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	61fb      	str	r3, [r7, #28]
 8007f18:	e7fe      	b.n	8007f18 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f1a:	235c      	movs	r3, #92	; 0x5c
 8007f1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	2b5c      	cmp	r3, #92	; 0x5c
 8007f22:	d009      	beq.n	8007f38 <xTaskCreateStatic+0x60>
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	61bb      	str	r3, [r7, #24]
 8007f36:	e7fe      	b.n	8007f36 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d01e      	beq.n	8007f7e <xTaskCreateStatic+0xa6>
 8007f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01b      	beq.n	8007f7e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9303      	str	r3, [sp, #12]
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	9302      	str	r3, [sp, #8]
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	68b9      	ldr	r1, [r7, #8]
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 f850 	bl	8008016 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f78:	f000 f8dc 	bl	8008134 <prvAddNewTaskToReadyList>
 8007f7c:	e001      	b.n	8007f82 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f82:	697b      	ldr	r3, [r7, #20]
	}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3728      	adds	r7, #40	; 0x28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08c      	sub	sp, #48	; 0x30
 8007f90:	af04      	add	r7, sp, #16
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fd25 	bl	80099f0 <pvPortMalloc>
 8007fa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00e      	beq.n	8007fcc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fae:	205c      	movs	r0, #92	; 0x5c
 8007fb0:	f001 fd1e 	bl	80099f0 <pvPortMalloc>
 8007fb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8007fc2:	e005      	b.n	8007fd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fc4:	6978      	ldr	r0, [r7, #20]
 8007fc6:	f001 fdd5 	bl	8009b74 <vPortFree>
 8007fca:	e001      	b.n	8007fd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d017      	beq.n	8008006 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fde:	88fa      	ldrh	r2, [r7, #6]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9303      	str	r3, [sp, #12]
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	9302      	str	r3, [sp, #8]
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 f80e 	bl	8008016 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ffa:	69f8      	ldr	r0, [r7, #28]
 8007ffc:	f000 f89a 	bl	8008134 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008000:	2301      	movs	r3, #1
 8008002:	61bb      	str	r3, [r7, #24]
 8008004:	e002      	b.n	800800c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008006:	f04f 33ff 	mov.w	r3, #4294967295
 800800a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800800c:	69bb      	ldr	r3, [r7, #24]
	}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b088      	sub	sp, #32
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	607a      	str	r2, [r7, #4]
 8008022:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	461a      	mov	r2, r3
 800802e:	21a5      	movs	r1, #165	; 0xa5
 8008030:	f012 f9bf 	bl	801a3b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800803e:	3b01      	subs	r3, #1
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f023 0307 	bic.w	r3, r3, #7
 800804c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	2b00      	cmp	r3, #0
 8008056:	d009      	beq.n	800806c <prvInitialiseNewTask+0x56>
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	617b      	str	r3, [r7, #20]
 800806a:	e7fe      	b.n	800806a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d01f      	beq.n	80080b2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008072:	2300      	movs	r3, #0
 8008074:	61fb      	str	r3, [r7, #28]
 8008076:	e012      	b.n	800809e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	4413      	add	r3, r2
 800807e:	7819      	ldrb	r1, [r3, #0]
 8008080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	4413      	add	r3, r2
 8008086:	3334      	adds	r3, #52	; 0x34
 8008088:	460a      	mov	r2, r1
 800808a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	4413      	add	r3, r2
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d006      	beq.n	80080a6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	3301      	adds	r3, #1
 800809c:	61fb      	str	r3, [r7, #28]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	2b0f      	cmp	r3, #15
 80080a2:	d9e9      	bls.n	8008078 <prvInitialiseNewTask+0x62>
 80080a4:	e000      	b.n	80080a8 <prvInitialiseNewTask+0x92>
			{
				break;
 80080a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080b0:	e003      	b.n	80080ba <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	2b37      	cmp	r3, #55	; 0x37
 80080be:	d901      	bls.n	80080c4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080c0:	2337      	movs	r3, #55	; 0x37
 80080c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	2200      	movs	r2, #0
 80080d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	3304      	adds	r3, #4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe fd8c 	bl	8006bf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	3318      	adds	r3, #24
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe fd87 	bl	8006bf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	2200      	movs	r2, #0
 8008104:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	68f9      	ldr	r1, [r7, #12]
 8008112:	69b8      	ldr	r0, [r7, #24]
 8008114:	f001 fa2a 	bl	800956c <pxPortInitialiseStack>
 8008118:	4602      	mov	r2, r0
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008128:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800812a:	bf00      	nop
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800813c:	f001 fb3e 	bl	80097bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008140:	4b2d      	ldr	r3, [pc, #180]	; (80081f8 <prvAddNewTaskToReadyList+0xc4>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3301      	adds	r3, #1
 8008146:	4a2c      	ldr	r2, [pc, #176]	; (80081f8 <prvAddNewTaskToReadyList+0xc4>)
 8008148:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800814a:	4b2c      	ldr	r3, [pc, #176]	; (80081fc <prvAddNewTaskToReadyList+0xc8>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008152:	4a2a      	ldr	r2, [pc, #168]	; (80081fc <prvAddNewTaskToReadyList+0xc8>)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008158:	4b27      	ldr	r3, [pc, #156]	; (80081f8 <prvAddNewTaskToReadyList+0xc4>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d110      	bne.n	8008182 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008160:	f000 fc1a 	bl	8008998 <prvInitialiseTaskLists>
 8008164:	e00d      	b.n	8008182 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008166:	4b26      	ldr	r3, [pc, #152]	; (8008200 <prvAddNewTaskToReadyList+0xcc>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d109      	bne.n	8008182 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800816e:	4b23      	ldr	r3, [pc, #140]	; (80081fc <prvAddNewTaskToReadyList+0xc8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	429a      	cmp	r2, r3
 800817a:	d802      	bhi.n	8008182 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800817c:	4a1f      	ldr	r2, [pc, #124]	; (80081fc <prvAddNewTaskToReadyList+0xc8>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008182:	4b20      	ldr	r3, [pc, #128]	; (8008204 <prvAddNewTaskToReadyList+0xd0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3301      	adds	r3, #1
 8008188:	4a1e      	ldr	r2, [pc, #120]	; (8008204 <prvAddNewTaskToReadyList+0xd0>)
 800818a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800818c:	4b1d      	ldr	r3, [pc, #116]	; (8008204 <prvAddNewTaskToReadyList+0xd0>)
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008198:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <prvAddNewTaskToReadyList+0xd4>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	429a      	cmp	r2, r3
 800819e:	d903      	bls.n	80081a8 <prvAddNewTaskToReadyList+0x74>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a4:	4a18      	ldr	r2, [pc, #96]	; (8008208 <prvAddNewTaskToReadyList+0xd4>)
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4a15      	ldr	r2, [pc, #84]	; (800820c <prvAddNewTaskToReadyList+0xd8>)
 80081b6:	441a      	add	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3304      	adds	r3, #4
 80081bc:	4619      	mov	r1, r3
 80081be:	4610      	mov	r0, r2
 80081c0:	f7fe fd27 	bl	8006c12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081c4:	f001 fb28 	bl	8009818 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081c8:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <prvAddNewTaskToReadyList+0xcc>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00e      	beq.n	80081ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <prvAddNewTaskToReadyList+0xc8>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081da:	429a      	cmp	r2, r3
 80081dc:	d207      	bcs.n	80081ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081de:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <prvAddNewTaskToReadyList+0xdc>)
 80081e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000dac 	.word	0x20000dac
 80081fc:	200008d8 	.word	0x200008d8
 8008200:	20000db8 	.word	0x20000db8
 8008204:	20000dc8 	.word	0x20000dc8
 8008208:	20000db4 	.word	0x20000db4
 800820c:	200008dc 	.word	0x200008dc
 8008210:	e000ed04 	.word	0xe000ed04

08008214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800821c:	2300      	movs	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d016      	beq.n	8008254 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008226:	4b13      	ldr	r3, [pc, #76]	; (8008274 <vTaskDelay+0x60>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d009      	beq.n	8008242 <vTaskDelay+0x2e>
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60bb      	str	r3, [r7, #8]
 8008240:	e7fe      	b.n	8008240 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008242:	f000 f87f 	bl	8008344 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008246:	2100      	movs	r1, #0
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fdf5 	bl	8008e38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800824e:	f000 f887 	bl	8008360 <xTaskResumeAll>
 8008252:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d107      	bne.n	800826a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800825a:	4b07      	ldr	r3, [pc, #28]	; (8008278 <vTaskDelay+0x64>)
 800825c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000dd4 	.word	0x20000dd4
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	; 0x28
 8008280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800828a:	463a      	mov	r2, r7
 800828c:	1d39      	adds	r1, r7, #4
 800828e:	f107 0308 	add.w	r3, r7, #8
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fc5c 	bl	8006b50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	9202      	str	r2, [sp, #8]
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	2300      	movs	r3, #0
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	2300      	movs	r3, #0
 80082a8:	460a      	mov	r2, r1
 80082aa:	4920      	ldr	r1, [pc, #128]	; (800832c <vTaskStartScheduler+0xb0>)
 80082ac:	4820      	ldr	r0, [pc, #128]	; (8008330 <vTaskStartScheduler+0xb4>)
 80082ae:	f7ff fe13 	bl	8007ed8 <xTaskCreateStatic>
 80082b2:	4602      	mov	r2, r0
 80082b4:	4b1f      	ldr	r3, [pc, #124]	; (8008334 <vTaskStartScheduler+0xb8>)
 80082b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082b8:	4b1e      	ldr	r3, [pc, #120]	; (8008334 <vTaskStartScheduler+0xb8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082c0:	2301      	movs	r3, #1
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	e001      	b.n	80082ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d102      	bne.n	80082d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082d0:	f000 fe06 	bl	8008ee0 <xTimerCreateTimerTask>
 80082d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d115      	bne.n	8008308 <vTaskStartScheduler+0x8c>
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082ee:	4b12      	ldr	r3, [pc, #72]	; (8008338 <vTaskStartScheduler+0xbc>)
 80082f0:	f04f 32ff 	mov.w	r2, #4294967295
 80082f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082f6:	4b11      	ldr	r3, [pc, #68]	; (800833c <vTaskStartScheduler+0xc0>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082fc:	4b10      	ldr	r3, [pc, #64]	; (8008340 <vTaskStartScheduler+0xc4>)
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008302:	f001 f9bd 	bl	8009680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008306:	e00d      	b.n	8008324 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830e:	d109      	bne.n	8008324 <vTaskStartScheduler+0xa8>
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	e7fe      	b.n	8008322 <vTaskStartScheduler+0xa6>
}
 8008324:	bf00      	nop
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	0801b4f0 	.word	0x0801b4f0
 8008330:	08008969 	.word	0x08008969
 8008334:	20000dd0 	.word	0x20000dd0
 8008338:	20000dcc 	.word	0x20000dcc
 800833c:	20000db8 	.word	0x20000db8
 8008340:	20000db0 	.word	0x20000db0

08008344 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008344:	b480      	push	{r7}
 8008346:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008348:	4b04      	ldr	r3, [pc, #16]	; (800835c <vTaskSuspendAll+0x18>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3301      	adds	r3, #1
 800834e:	4a03      	ldr	r2, [pc, #12]	; (800835c <vTaskSuspendAll+0x18>)
 8008350:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008352:	bf00      	nop
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	20000dd4 	.word	0x20000dd4

08008360 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800836a:	2300      	movs	r3, #0
 800836c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800836e:	4b41      	ldr	r3, [pc, #260]	; (8008474 <xTaskResumeAll+0x114>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <xTaskResumeAll+0x2a>
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	e7fe      	b.n	8008388 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800838a:	f001 fa17 	bl	80097bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800838e:	4b39      	ldr	r3, [pc, #228]	; (8008474 <xTaskResumeAll+0x114>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3b01      	subs	r3, #1
 8008394:	4a37      	ldr	r2, [pc, #220]	; (8008474 <xTaskResumeAll+0x114>)
 8008396:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008398:	4b36      	ldr	r3, [pc, #216]	; (8008474 <xTaskResumeAll+0x114>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d162      	bne.n	8008466 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083a0:	4b35      	ldr	r3, [pc, #212]	; (8008478 <xTaskResumeAll+0x118>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d05e      	beq.n	8008466 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083a8:	e02f      	b.n	800840a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083aa:	4b34      	ldr	r3, [pc, #208]	; (800847c <xTaskResumeAll+0x11c>)
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3318      	adds	r3, #24
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fc88 	bl	8006ccc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3304      	adds	r3, #4
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe fc83 	bl	8006ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ca:	4b2d      	ldr	r3, [pc, #180]	; (8008480 <xTaskResumeAll+0x120>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d903      	bls.n	80083da <xTaskResumeAll+0x7a>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	4a2a      	ldr	r2, [pc, #168]	; (8008480 <xTaskResumeAll+0x120>)
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4a27      	ldr	r2, [pc, #156]	; (8008484 <xTaskResumeAll+0x124>)
 80083e8:	441a      	add	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3304      	adds	r3, #4
 80083ee:	4619      	mov	r1, r3
 80083f0:	4610      	mov	r0, r2
 80083f2:	f7fe fc0e 	bl	8006c12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fa:	4b23      	ldr	r3, [pc, #140]	; (8008488 <xTaskResumeAll+0x128>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	429a      	cmp	r2, r3
 8008402:	d302      	bcc.n	800840a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008404:	4b21      	ldr	r3, [pc, #132]	; (800848c <xTaskResumeAll+0x12c>)
 8008406:	2201      	movs	r2, #1
 8008408:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800840a:	4b1c      	ldr	r3, [pc, #112]	; (800847c <xTaskResumeAll+0x11c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1cb      	bne.n	80083aa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008418:	f000 fb58 	bl	8008acc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800841c:	4b1c      	ldr	r3, [pc, #112]	; (8008490 <xTaskResumeAll+0x130>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d010      	beq.n	800844a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008428:	f000 f858 	bl	80084dc <xTaskIncrementTick>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008432:	4b16      	ldr	r3, [pc, #88]	; (800848c <xTaskResumeAll+0x12c>)
 8008434:	2201      	movs	r2, #1
 8008436:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3b01      	subs	r3, #1
 800843c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1f1      	bne.n	8008428 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008444:	4b12      	ldr	r3, [pc, #72]	; (8008490 <xTaskResumeAll+0x130>)
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800844a:	4b10      	ldr	r3, [pc, #64]	; (800848c <xTaskResumeAll+0x12c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d009      	beq.n	8008466 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008452:	2301      	movs	r3, #1
 8008454:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008456:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <xTaskResumeAll+0x134>)
 8008458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008466:	f001 f9d7 	bl	8009818 <vPortExitCritical>

	return xAlreadyYielded;
 800846a:	68bb      	ldr	r3, [r7, #8]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20000dd4 	.word	0x20000dd4
 8008478:	20000dac 	.word	0x20000dac
 800847c:	20000d6c 	.word	0x20000d6c
 8008480:	20000db4 	.word	0x20000db4
 8008484:	200008dc 	.word	0x200008dc
 8008488:	200008d8 	.word	0x200008d8
 800848c:	20000dc0 	.word	0x20000dc0
 8008490:	20000dbc 	.word	0x20000dbc
 8008494:	e000ed04 	.word	0xe000ed04

08008498 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <xTaskGetTickCount+0x1c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084a4:	687b      	ldr	r3, [r7, #4]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000db0 	.word	0x20000db0

080084b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084be:	f001 fa59 	bl	8009974 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80084c2:	2300      	movs	r3, #0
 80084c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80084c6:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <xTaskGetTickCountFromISR+0x20>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084cc:	683b      	ldr	r3, [r7, #0]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20000db0 	.word	0x20000db0

080084dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084e6:	4b4e      	ldr	r3, [pc, #312]	; (8008620 <xTaskIncrementTick+0x144>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f040 8088 	bne.w	8008600 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084f0:	4b4c      	ldr	r3, [pc, #304]	; (8008624 <xTaskIncrementTick+0x148>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3301      	adds	r3, #1
 80084f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084f8:	4a4a      	ldr	r2, [pc, #296]	; (8008624 <xTaskIncrementTick+0x148>)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11f      	bne.n	8008544 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008504:	4b48      	ldr	r3, [pc, #288]	; (8008628 <xTaskIncrementTick+0x14c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d009      	beq.n	8008522 <xTaskIncrementTick+0x46>
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	603b      	str	r3, [r7, #0]
 8008520:	e7fe      	b.n	8008520 <xTaskIncrementTick+0x44>
 8008522:	4b41      	ldr	r3, [pc, #260]	; (8008628 <xTaskIncrementTick+0x14c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	4b40      	ldr	r3, [pc, #256]	; (800862c <xTaskIncrementTick+0x150>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a3e      	ldr	r2, [pc, #248]	; (8008628 <xTaskIncrementTick+0x14c>)
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	4a3e      	ldr	r2, [pc, #248]	; (800862c <xTaskIncrementTick+0x150>)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	4b3e      	ldr	r3, [pc, #248]	; (8008630 <xTaskIncrementTick+0x154>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3301      	adds	r3, #1
 800853c:	4a3c      	ldr	r2, [pc, #240]	; (8008630 <xTaskIncrementTick+0x154>)
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	f000 fac4 	bl	8008acc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008544:	4b3b      	ldr	r3, [pc, #236]	; (8008634 <xTaskIncrementTick+0x158>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	429a      	cmp	r2, r3
 800854c:	d349      	bcc.n	80085e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800854e:	4b36      	ldr	r3, [pc, #216]	; (8008628 <xTaskIncrementTick+0x14c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d104      	bne.n	8008562 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008558:	4b36      	ldr	r3, [pc, #216]	; (8008634 <xTaskIncrementTick+0x158>)
 800855a:	f04f 32ff 	mov.w	r2, #4294967295
 800855e:	601a      	str	r2, [r3, #0]
					break;
 8008560:	e03f      	b.n	80085e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008562:	4b31      	ldr	r3, [pc, #196]	; (8008628 <xTaskIncrementTick+0x14c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d203      	bcs.n	8008582 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800857a:	4a2e      	ldr	r2, [pc, #184]	; (8008634 <xTaskIncrementTick+0x158>)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008580:	e02f      	b.n	80085e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	3304      	adds	r3, #4
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fba0 	bl	8006ccc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	3318      	adds	r3, #24
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe fb97 	bl	8006ccc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a2:	4b25      	ldr	r3, [pc, #148]	; (8008638 <xTaskIncrementTick+0x15c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d903      	bls.n	80085b2 <xTaskIncrementTick+0xd6>
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	4a22      	ldr	r2, [pc, #136]	; (8008638 <xTaskIncrementTick+0x15c>)
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4a1f      	ldr	r2, [pc, #124]	; (800863c <xTaskIncrementTick+0x160>)
 80085c0:	441a      	add	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4619      	mov	r1, r3
 80085c8:	4610      	mov	r0, r2
 80085ca:	f7fe fb22 	bl	8006c12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d2:	4b1b      	ldr	r3, [pc, #108]	; (8008640 <xTaskIncrementTick+0x164>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	429a      	cmp	r2, r3
 80085da:	d3b8      	bcc.n	800854e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80085dc:	2301      	movs	r3, #1
 80085de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085e0:	e7b5      	b.n	800854e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085e2:	4b17      	ldr	r3, [pc, #92]	; (8008640 <xTaskIncrementTick+0x164>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e8:	4914      	ldr	r1, [pc, #80]	; (800863c <xTaskIncrementTick+0x160>)
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	440b      	add	r3, r1
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d907      	bls.n	800860a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80085fa:	2301      	movs	r3, #1
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e004      	b.n	800860a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008600:	4b10      	ldr	r3, [pc, #64]	; (8008644 <xTaskIncrementTick+0x168>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3301      	adds	r3, #1
 8008606:	4a0f      	ldr	r2, [pc, #60]	; (8008644 <xTaskIncrementTick+0x168>)
 8008608:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <xTaskIncrementTick+0x16c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008616:	697b      	ldr	r3, [r7, #20]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	20000dd4 	.word	0x20000dd4
 8008624:	20000db0 	.word	0x20000db0
 8008628:	20000d64 	.word	0x20000d64
 800862c:	20000d68 	.word	0x20000d68
 8008630:	20000dc4 	.word	0x20000dc4
 8008634:	20000dcc 	.word	0x20000dcc
 8008638:	20000db4 	.word	0x20000db4
 800863c:	200008dc 	.word	0x200008dc
 8008640:	200008d8 	.word	0x200008d8
 8008644:	20000dbc 	.word	0x20000dbc
 8008648:	20000dc0 	.word	0x20000dc0

0800864c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008652:	4b27      	ldr	r3, [pc, #156]	; (80086f0 <vTaskSwitchContext+0xa4>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800865a:	4b26      	ldr	r3, [pc, #152]	; (80086f4 <vTaskSwitchContext+0xa8>)
 800865c:	2201      	movs	r2, #1
 800865e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008660:	e040      	b.n	80086e4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008662:	4b24      	ldr	r3, [pc, #144]	; (80086f4 <vTaskSwitchContext+0xa8>)
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008668:	4b23      	ldr	r3, [pc, #140]	; (80086f8 <vTaskSwitchContext+0xac>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	60fb      	str	r3, [r7, #12]
 800866e:	e00f      	b.n	8008690 <vTaskSwitchContext+0x44>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d109      	bne.n	800868a <vTaskSwitchContext+0x3e>
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	607b      	str	r3, [r7, #4]
 8008688:	e7fe      	b.n	8008688 <vTaskSwitchContext+0x3c>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3b01      	subs	r3, #1
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	491a      	ldr	r1, [pc, #104]	; (80086fc <vTaskSwitchContext+0xb0>)
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0e5      	beq.n	8008670 <vTaskSwitchContext+0x24>
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4a13      	ldr	r2, [pc, #76]	; (80086fc <vTaskSwitchContext+0xb0>)
 80086b0:	4413      	add	r3, r2
 80086b2:	60bb      	str	r3, [r7, #8]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	605a      	str	r2, [r3, #4]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	3308      	adds	r3, #8
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d104      	bne.n	80086d4 <vTaskSwitchContext+0x88>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	605a      	str	r2, [r3, #4]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	4a09      	ldr	r2, [pc, #36]	; (8008700 <vTaskSwitchContext+0xb4>)
 80086dc:	6013      	str	r3, [r2, #0]
 80086de:	4a06      	ldr	r2, [pc, #24]	; (80086f8 <vTaskSwitchContext+0xac>)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6013      	str	r3, [r2, #0]
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	20000dd4 	.word	0x20000dd4
 80086f4:	20000dc0 	.word	0x20000dc0
 80086f8:	20000db4 	.word	0x20000db4
 80086fc:	200008dc 	.word	0x200008dc
 8008700:	200008d8 	.word	0x200008d8

08008704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d109      	bne.n	8008728 <vTaskPlaceOnEventList+0x24>
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e7fe      	b.n	8008726 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008728:	4b07      	ldr	r3, [pc, #28]	; (8008748 <vTaskPlaceOnEventList+0x44>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3318      	adds	r3, #24
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7fe fa92 	bl	8006c5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008736:	2101      	movs	r1, #1
 8008738:	6838      	ldr	r0, [r7, #0]
 800873a:	f000 fb7d 	bl	8008e38 <prvAddCurrentTaskToDelayedList>
}
 800873e:	bf00      	nop
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	200008d8 	.word	0x200008d8

0800874c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <vTaskPlaceOnEventListRestricted+0x26>
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e7fe      	b.n	8008770 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008772:	4b0a      	ldr	r3, [pc, #40]	; (800879c <vTaskPlaceOnEventListRestricted+0x50>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3318      	adds	r3, #24
 8008778:	4619      	mov	r1, r3
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f7fe fa49 	bl	8006c12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008786:	f04f 33ff 	mov.w	r3, #4294967295
 800878a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	68b8      	ldr	r0, [r7, #8]
 8008790:	f000 fb52 	bl	8008e38 <prvAddCurrentTaskToDelayedList>
	}
 8008794:	bf00      	nop
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	200008d8 	.word	0x200008d8

080087a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <xTaskRemoveFromEventList+0x2a>
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	e7fe      	b.n	80087c8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	3318      	adds	r3, #24
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fa7c 	bl	8006ccc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d4:	4b1d      	ldr	r3, [pc, #116]	; (800884c <xTaskRemoveFromEventList+0xac>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d11d      	bne.n	8008818 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	3304      	adds	r3, #4
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fe fa73 	bl	8006ccc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ea:	4b19      	ldr	r3, [pc, #100]	; (8008850 <xTaskRemoveFromEventList+0xb0>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d903      	bls.n	80087fa <xTaskRemoveFromEventList+0x5a>
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	4a16      	ldr	r2, [pc, #88]	; (8008850 <xTaskRemoveFromEventList+0xb0>)
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4a13      	ldr	r2, [pc, #76]	; (8008854 <xTaskRemoveFromEventList+0xb4>)
 8008808:	441a      	add	r2, r3
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	3304      	adds	r3, #4
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f7fe f9fe 	bl	8006c12 <vListInsertEnd>
 8008816:	e005      	b.n	8008824 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	3318      	adds	r3, #24
 800881c:	4619      	mov	r1, r3
 800881e:	480e      	ldr	r0, [pc, #56]	; (8008858 <xTaskRemoveFromEventList+0xb8>)
 8008820:	f7fe f9f7 	bl	8006c12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008828:	4b0c      	ldr	r3, [pc, #48]	; (800885c <xTaskRemoveFromEventList+0xbc>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	429a      	cmp	r2, r3
 8008830:	d905      	bls.n	800883e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008832:	2301      	movs	r3, #1
 8008834:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008836:	4b0a      	ldr	r3, [pc, #40]	; (8008860 <xTaskRemoveFromEventList+0xc0>)
 8008838:	2201      	movs	r2, #1
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	e001      	b.n	8008842 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800883e:	2300      	movs	r3, #0
 8008840:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008842:	697b      	ldr	r3, [r7, #20]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20000dd4 	.word	0x20000dd4
 8008850:	20000db4 	.word	0x20000db4
 8008854:	200008dc 	.word	0x200008dc
 8008858:	20000d6c 	.word	0x20000d6c
 800885c:	200008d8 	.word	0x200008d8
 8008860:	20000dc0 	.word	0x20000dc0

08008864 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <vTaskInternalSetTimeOutState+0x24>)
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <vTaskInternalSetTimeOutState+0x28>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	605a      	str	r2, [r3, #4]
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	20000dc4 	.word	0x20000dc4
 800888c:	20000db0 	.word	0x20000db0

08008890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d109      	bne.n	80088b4 <xTaskCheckForTimeOut+0x24>
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	e7fe      	b.n	80088b2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <xTaskCheckForTimeOut+0x3e>
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	e7fe      	b.n	80088cc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80088ce:	f000 ff75 	bl	80097bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088d2:	4b1d      	ldr	r3, [pc, #116]	; (8008948 <xTaskCheckForTimeOut+0xb8>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ea:	d102      	bne.n	80088f2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61fb      	str	r3, [r7, #28]
 80088f0:	e023      	b.n	800893a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	4b15      	ldr	r3, [pc, #84]	; (800894c <xTaskCheckForTimeOut+0xbc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d007      	beq.n	800890e <xTaskCheckForTimeOut+0x7e>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	429a      	cmp	r2, r3
 8008906:	d302      	bcc.n	800890e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008908:	2301      	movs	r3, #1
 800890a:	61fb      	str	r3, [r7, #28]
 800890c:	e015      	b.n	800893a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	429a      	cmp	r2, r3
 8008916:	d20b      	bcs.n	8008930 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff ff9d 	bl	8008864 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800892a:	2300      	movs	r3, #0
 800892c:	61fb      	str	r3, [r7, #28]
 800892e:	e004      	b.n	800893a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008936:	2301      	movs	r3, #1
 8008938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800893a:	f000 ff6d 	bl	8009818 <vPortExitCritical>

	return xReturn;
 800893e:	69fb      	ldr	r3, [r7, #28]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20000db0 	.word	0x20000db0
 800894c:	20000dc4 	.word	0x20000dc4

08008950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008954:	4b03      	ldr	r3, [pc, #12]	; (8008964 <vTaskMissedYield+0x14>)
 8008956:	2201      	movs	r2, #1
 8008958:	601a      	str	r2, [r3, #0]
}
 800895a:	bf00      	nop
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	20000dc0 	.word	0x20000dc0

08008968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008970:	f000 f852 	bl	8008a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008974:	4b06      	ldr	r3, [pc, #24]	; (8008990 <prvIdleTask+0x28>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d9f9      	bls.n	8008970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800897c:	4b05      	ldr	r3, [pc, #20]	; (8008994 <prvIdleTask+0x2c>)
 800897e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800898c:	e7f0      	b.n	8008970 <prvIdleTask+0x8>
 800898e:	bf00      	nop
 8008990:	200008dc 	.word	0x200008dc
 8008994:	e000ed04 	.word	0xe000ed04

08008998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800899e:	2300      	movs	r3, #0
 80089a0:	607b      	str	r3, [r7, #4]
 80089a2:	e00c      	b.n	80089be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4a12      	ldr	r2, [pc, #72]	; (80089f8 <prvInitialiseTaskLists+0x60>)
 80089b0:	4413      	add	r3, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe f900 	bl	8006bb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3301      	adds	r3, #1
 80089bc:	607b      	str	r3, [r7, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b37      	cmp	r3, #55	; 0x37
 80089c2:	d9ef      	bls.n	80089a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089c4:	480d      	ldr	r0, [pc, #52]	; (80089fc <prvInitialiseTaskLists+0x64>)
 80089c6:	f7fe f8f7 	bl	8006bb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089ca:	480d      	ldr	r0, [pc, #52]	; (8008a00 <prvInitialiseTaskLists+0x68>)
 80089cc:	f7fe f8f4 	bl	8006bb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089d0:	480c      	ldr	r0, [pc, #48]	; (8008a04 <prvInitialiseTaskLists+0x6c>)
 80089d2:	f7fe f8f1 	bl	8006bb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089d6:	480c      	ldr	r0, [pc, #48]	; (8008a08 <prvInitialiseTaskLists+0x70>)
 80089d8:	f7fe f8ee 	bl	8006bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089dc:	480b      	ldr	r0, [pc, #44]	; (8008a0c <prvInitialiseTaskLists+0x74>)
 80089de:	f7fe f8eb 	bl	8006bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089e2:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <prvInitialiseTaskLists+0x78>)
 80089e4:	4a05      	ldr	r2, [pc, #20]	; (80089fc <prvInitialiseTaskLists+0x64>)
 80089e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089e8:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <prvInitialiseTaskLists+0x7c>)
 80089ea:	4a05      	ldr	r2, [pc, #20]	; (8008a00 <prvInitialiseTaskLists+0x68>)
 80089ec:	601a      	str	r2, [r3, #0]
}
 80089ee:	bf00      	nop
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	200008dc 	.word	0x200008dc
 80089fc:	20000d3c 	.word	0x20000d3c
 8008a00:	20000d50 	.word	0x20000d50
 8008a04:	20000d6c 	.word	0x20000d6c
 8008a08:	20000d80 	.word	0x20000d80
 8008a0c:	20000d98 	.word	0x20000d98
 8008a10:	20000d64 	.word	0x20000d64
 8008a14:	20000d68 	.word	0x20000d68

08008a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a1e:	e019      	b.n	8008a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a20:	f000 fecc 	bl	80097bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a24:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <prvCheckTasksWaitingTermination+0x4c>)
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe f94b 	bl	8006ccc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <prvCheckTasksWaitingTermination+0x50>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	4a0a      	ldr	r2, [pc, #40]	; (8008a68 <prvCheckTasksWaitingTermination+0x50>)
 8008a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <prvCheckTasksWaitingTermination+0x54>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	4a09      	ldr	r2, [pc, #36]	; (8008a6c <prvCheckTasksWaitingTermination+0x54>)
 8008a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a4a:	f000 fee5 	bl	8009818 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f80e 	bl	8008a70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a54:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <prvCheckTasksWaitingTermination+0x54>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e1      	bne.n	8008a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20000d80 	.word	0x20000d80
 8008a68:	20000dac 	.word	0x20000dac
 8008a6c:	20000d94 	.word	0x20000d94

08008a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d108      	bne.n	8008a94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	4618      	mov	r0, r3
 8008a88:	f001 f874 	bl	8009b74 <vPortFree>
				vPortFree( pxTCB );
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 f871 	bl	8009b74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a92:	e017      	b.n	8008ac4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d103      	bne.n	8008aa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 f868 	bl	8009b74 <vPortFree>
	}
 8008aa4:	e00e      	b.n	8008ac4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d009      	beq.n	8008ac4 <prvDeleteTCB+0x54>
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
 8008ac2:	e7fe      	b.n	8008ac2 <prvDeleteTCB+0x52>
	}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ad2:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <prvResetNextTaskUnblockTime+0x38>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <prvResetNextTaskUnblockTime+0x3c>)
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ae4:	e008      	b.n	8008af8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae6:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <prvResetNextTaskUnblockTime+0x38>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	4a04      	ldr	r2, [pc, #16]	; (8008b08 <prvResetNextTaskUnblockTime+0x3c>)
 8008af6:	6013      	str	r3, [r2, #0]
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	20000d64 	.word	0x20000d64
 8008b08:	20000dcc 	.word	0x20000dcc

08008b0c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008b12:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <xTaskGetCurrentTaskHandle+0x1c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008b18:	687b      	ldr	r3, [r7, #4]
	}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	200008d8 	.word	0x200008d8

08008b2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b32:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <xTaskGetSchedulerState+0x34>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	607b      	str	r3, [r7, #4]
 8008b3e:	e008      	b.n	8008b52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b40:	4b08      	ldr	r3, [pc, #32]	; (8008b64 <xTaskGetSchedulerState+0x38>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b48:	2302      	movs	r3, #2
 8008b4a:	607b      	str	r3, [r7, #4]
 8008b4c:	e001      	b.n	8008b52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b52:	687b      	ldr	r3, [r7, #4]
	}
 8008b54:	4618      	mov	r0, r3
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	20000db8 	.word	0x20000db8
 8008b64:	20000dd4 	.word	0x20000dd4

08008b68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d051      	beq.n	8008c22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b82:	4b2a      	ldr	r3, [pc, #168]	; (8008c2c <xTaskPriorityInherit+0xc4>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d241      	bcs.n	8008c10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	db06      	blt.n	8008ba2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b94:	4b25      	ldr	r3, [pc, #148]	; (8008c2c <xTaskPriorityInherit+0xc4>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	6959      	ldr	r1, [r3, #20]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4a1f      	ldr	r2, [pc, #124]	; (8008c30 <xTaskPriorityInherit+0xc8>)
 8008bb4:	4413      	add	r3, r2
 8008bb6:	4299      	cmp	r1, r3
 8008bb8:	d122      	bne.n	8008c00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fe f884 	bl	8006ccc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bc4:	4b19      	ldr	r3, [pc, #100]	; (8008c2c <xTaskPriorityInherit+0xc4>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd2:	4b18      	ldr	r3, [pc, #96]	; (8008c34 <xTaskPriorityInherit+0xcc>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d903      	bls.n	8008be2 <xTaskPriorityInherit+0x7a>
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	4a15      	ldr	r2, [pc, #84]	; (8008c34 <xTaskPriorityInherit+0xcc>)
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4a10      	ldr	r2, [pc, #64]	; (8008c30 <xTaskPriorityInherit+0xc8>)
 8008bf0:	441a      	add	r2, r3
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f7fe f80a 	bl	8006c12 <vListInsertEnd>
 8008bfe:	e004      	b.n	8008c0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c00:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <xTaskPriorityInherit+0xc4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	60fb      	str	r3, [r7, #12]
 8008c0e:	e008      	b.n	8008c22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c14:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <xTaskPriorityInherit+0xc4>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d201      	bcs.n	8008c22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c22:	68fb      	ldr	r3, [r7, #12]
	}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	200008d8 	.word	0x200008d8
 8008c30:	200008dc 	.word	0x200008dc
 8008c34:	20000db4 	.word	0x20000db4

08008c38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d054      	beq.n	8008cf8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c4e:	4b2d      	ldr	r3, [pc, #180]	; (8008d04 <xTaskPriorityDisinherit+0xcc>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d009      	beq.n	8008c6c <xTaskPriorityDisinherit+0x34>
 8008c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	e7fe      	b.n	8008c6a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d109      	bne.n	8008c88 <xTaskPriorityDisinherit+0x50>
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	60bb      	str	r3, [r7, #8]
 8008c86:	e7fe      	b.n	8008c86 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c8c:	1e5a      	subs	r2, r3, #1
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d02c      	beq.n	8008cf8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d128      	bne.n	8008cf8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe f80e 	bl	8006ccc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc8:	4b0f      	ldr	r3, [pc, #60]	; (8008d08 <xTaskPriorityDisinherit+0xd0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d903      	bls.n	8008cd8 <xTaskPriorityDisinherit+0xa0>
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	4a0c      	ldr	r2, [pc, #48]	; (8008d08 <xTaskPriorityDisinherit+0xd0>)
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	4613      	mov	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4a09      	ldr	r2, [pc, #36]	; (8008d0c <xTaskPriorityDisinherit+0xd4>)
 8008ce6:	441a      	add	r2, r3
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	3304      	adds	r3, #4
 8008cec:	4619      	mov	r1, r3
 8008cee:	4610      	mov	r0, r2
 8008cf0:	f7fd ff8f 	bl	8006c12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cf8:	697b      	ldr	r3, [r7, #20]
	}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	200008d8 	.word	0x200008d8
 8008d08:	20000db4 	.word	0x20000db4
 8008d0c:	200008dc 	.word	0x200008dc

08008d10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b088      	sub	sp, #32
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d068      	beq.n	8008dfa <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d109      	bne.n	8008d44 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	e7fe      	b.n	8008d42 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d902      	bls.n	8008d54 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	61fb      	str	r3, [r7, #28]
 8008d52:	e002      	b.n	8008d5a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d04a      	beq.n	8008dfa <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d145      	bne.n	8008dfa <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d6e:	4b25      	ldr	r3, [pc, #148]	; (8008e04 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d109      	bne.n	8008d8c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	e7fe      	b.n	8008d8a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	db04      	blt.n	8008daa <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	6959      	ldr	r1, [r3, #20]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4a13      	ldr	r2, [pc, #76]	; (8008e08 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008dba:	4413      	add	r3, r2
 8008dbc:	4299      	cmp	r1, r3
 8008dbe:	d11c      	bne.n	8008dfa <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fd ff81 	bl	8006ccc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dce:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d903      	bls.n	8008dde <vTaskPriorityDisinheritAfterTimeout+0xce>
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dda:	4a0c      	ldr	r2, [pc, #48]	; (8008e0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4a07      	ldr	r2, [pc, #28]	; (8008e08 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008dec:	441a      	add	r2, r3
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	3304      	adds	r3, #4
 8008df2:	4619      	mov	r1, r3
 8008df4:	4610      	mov	r0, r2
 8008df6:	f7fd ff0c 	bl	8006c12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dfa:	bf00      	nop
 8008dfc:	3720      	adds	r7, #32
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200008d8 	.word	0x200008d8
 8008e08:	200008dc 	.word	0x200008dc
 8008e0c:	20000db4 	.word	0x20000db4

08008e10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e10:	b480      	push	{r7}
 8008e12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e14:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d004      	beq.n	8008e26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e22:	3201      	adds	r2, #1
 8008e24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008e26:	4b03      	ldr	r3, [pc, #12]	; (8008e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e28:	681b      	ldr	r3, [r3, #0]
	}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	200008d8 	.word	0x200008d8

08008e38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e42:	4b21      	ldr	r3, [pc, #132]	; (8008ec8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e48:	4b20      	ldr	r3, [pc, #128]	; (8008ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fd ff3c 	bl	8006ccc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5a:	d10a      	bne.n	8008e72 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d007      	beq.n	8008e72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e62:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3304      	adds	r3, #4
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4819      	ldr	r0, [pc, #100]	; (8008ed0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e6c:	f7fd fed1 	bl	8006c12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e70:	e026      	b.n	8008ec0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4413      	add	r3, r2
 8008e78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e7a:	4b14      	ldr	r3, [pc, #80]	; (8008ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d209      	bcs.n	8008e9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e8a:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3304      	adds	r3, #4
 8008e94:	4619      	mov	r1, r3
 8008e96:	4610      	mov	r0, r2
 8008e98:	f7fd fedf 	bl	8006c5a <vListInsert>
}
 8008e9c:	e010      	b.n	8008ec0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4610      	mov	r0, r2
 8008eac:	f7fd fed5 	bl	8006c5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d202      	bcs.n	8008ec0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008eba:	4a08      	ldr	r2, [pc, #32]	; (8008edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	6013      	str	r3, [r2, #0]
}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20000db0 	.word	0x20000db0
 8008ecc:	200008d8 	.word	0x200008d8
 8008ed0:	20000d98 	.word	0x20000d98
 8008ed4:	20000d68 	.word	0x20000d68
 8008ed8:	20000d64 	.word	0x20000d64
 8008edc:	20000dcc 	.word	0x20000dcc

08008ee0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08a      	sub	sp, #40	; 0x28
 8008ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008eea:	f000 faff 	bl	80094ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008eee:	4b1c      	ldr	r3, [pc, #112]	; (8008f60 <xTimerCreateTimerTask+0x80>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d021      	beq.n	8008f3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008efe:	1d3a      	adds	r2, r7, #4
 8008f00:	f107 0108 	add.w	r1, r7, #8
 8008f04:	f107 030c 	add.w	r3, r7, #12
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fd fe3b 	bl	8006b84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	9202      	str	r2, [sp, #8]
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	2302      	movs	r3, #2
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	460a      	mov	r2, r1
 8008f20:	4910      	ldr	r1, [pc, #64]	; (8008f64 <xTimerCreateTimerTask+0x84>)
 8008f22:	4811      	ldr	r0, [pc, #68]	; (8008f68 <xTimerCreateTimerTask+0x88>)
 8008f24:	f7fe ffd8 	bl	8007ed8 <xTaskCreateStatic>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	4b10      	ldr	r3, [pc, #64]	; (8008f6c <xTimerCreateTimerTask+0x8c>)
 8008f2c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f2e:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <xTimerCreateTimerTask+0x8c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f36:	2301      	movs	r3, #1
 8008f38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d109      	bne.n	8008f54 <xTimerCreateTimerTask+0x74>
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	613b      	str	r3, [r7, #16]
 8008f52:	e7fe      	b.n	8008f52 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008f54:	697b      	ldr	r3, [r7, #20]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3718      	adds	r7, #24
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000e08 	.word	0x20000e08
 8008f64:	0801b4f8 	.word	0x0801b4f8
 8008f68:	080090a1 	.word	0x080090a1
 8008f6c:	20000e0c 	.word	0x20000e0c

08008f70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08a      	sub	sp, #40	; 0x28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d109      	bne.n	8008f9c <xTimerGenericCommand+0x2c>
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	623b      	str	r3, [r7, #32]
 8008f9a:	e7fe      	b.n	8008f9a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f9c:	4b19      	ldr	r3, [pc, #100]	; (8009004 <xTimerGenericCommand+0x94>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d02a      	beq.n	8008ffa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	dc18      	bgt.n	8008fe8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fb6:	f7ff fdb9 	bl	8008b2c <xTaskGetSchedulerState>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d109      	bne.n	8008fd4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fc0:	4b10      	ldr	r3, [pc, #64]	; (8009004 <xTimerGenericCommand+0x94>)
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	f107 0110 	add.w	r1, r7, #16
 8008fc8:	2300      	movs	r3, #0
 8008fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fcc:	f7fe f900 	bl	80071d0 <xQueueGenericSend>
 8008fd0:	6278      	str	r0, [r7, #36]	; 0x24
 8008fd2:	e012      	b.n	8008ffa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fd4:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <xTimerGenericCommand+0x94>)
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	f107 0110 	add.w	r1, r7, #16
 8008fdc:	2300      	movs	r3, #0
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f7fe f8f6 	bl	80071d0 <xQueueGenericSend>
 8008fe4:	6278      	str	r0, [r7, #36]	; 0x24
 8008fe6:	e008      	b.n	8008ffa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <xTimerGenericCommand+0x94>)
 8008fea:	6818      	ldr	r0, [r3, #0]
 8008fec:	f107 0110 	add.w	r1, r7, #16
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	f7fe f9e6 	bl	80073c4 <xQueueGenericSendFromISR>
 8008ff8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3728      	adds	r7, #40	; 0x28
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	20000e08 	.word	0x20000e08

08009008 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af02      	add	r7, sp, #8
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009012:	4b22      	ldr	r3, [pc, #136]	; (800909c <prvProcessExpiredTimer+0x94>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	3304      	adds	r3, #4
 8009020:	4618      	mov	r0, r3
 8009022:	f7fd fe53 	bl	8006ccc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d021      	beq.n	8009078 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	699a      	ldr	r2, [r3, #24]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	18d1      	adds	r1, r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	6978      	ldr	r0, [r7, #20]
 8009042:	f000 f8d1 	bl	80091e8 <prvInsertTimerInActiveList>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01e      	beq.n	800908a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800904c:	2300      	movs	r3, #0
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	2300      	movs	r3, #0
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	2100      	movs	r1, #0
 8009056:	6978      	ldr	r0, [r7, #20]
 8009058:	f7ff ff8a 	bl	8008f70 <xTimerGenericCommand>
 800905c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d112      	bne.n	800908a <prvProcessExpiredTimer+0x82>
 8009064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	e7fe      	b.n	8009076 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800907e:	f023 0301 	bic.w	r3, r3, #1
 8009082:	b2da      	uxtb	r2, r3
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	6978      	ldr	r0, [r7, #20]
 8009090:	4798      	blx	r3
}
 8009092:	bf00      	nop
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20000e00 	.word	0x20000e00

080090a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090a8:	f107 0308 	add.w	r3, r7, #8
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f857 	bl	8009160 <prvGetNextExpireTime>
 80090b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4619      	mov	r1, r3
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 f803 	bl	80090c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090be:	f000 f8d5 	bl	800926c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090c2:	e7f1      	b.n	80090a8 <prvTimerTask+0x8>

080090c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090ce:	f7ff f939 	bl	8008344 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090d2:	f107 0308 	add.w	r3, r7, #8
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f866 	bl	80091a8 <prvSampleTimeNow>
 80090dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d130      	bne.n	8009146 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <prvProcessTimerOrBlockTask+0x3c>
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d806      	bhi.n	8009100 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090f2:	f7ff f935 	bl	8008360 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7ff ff85 	bl	8009008 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090fe:	e024      	b.n	800914a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d008      	beq.n	8009118 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009106:	4b13      	ldr	r3, [pc, #76]	; (8009154 <prvProcessTimerOrBlockTask+0x90>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <prvProcessTimerOrBlockTask+0x50>
 8009110:	2301      	movs	r3, #1
 8009112:	e000      	b.n	8009116 <prvProcessTimerOrBlockTask+0x52>
 8009114:	2300      	movs	r3, #0
 8009116:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009118:	4b0f      	ldr	r3, [pc, #60]	; (8009158 <prvProcessTimerOrBlockTask+0x94>)
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	4619      	mov	r1, r3
 8009126:	f7fe fea3 	bl	8007e70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800912a:	f7ff f919 	bl	8008360 <xTaskResumeAll>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <prvProcessTimerOrBlockTask+0x98>)
 8009136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	f3bf 8f6f 	isb	sy
}
 8009144:	e001      	b.n	800914a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009146:	f7ff f90b 	bl	8008360 <xTaskResumeAll>
}
 800914a:	bf00      	nop
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000e04 	.word	0x20000e04
 8009158:	20000e08 	.word	0x20000e08
 800915c:	e000ed04 	.word	0xe000ed04

08009160 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009168:	4b0e      	ldr	r3, [pc, #56]	; (80091a4 <prvGetNextExpireTime+0x44>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <prvGetNextExpireTime+0x16>
 8009172:	2201      	movs	r2, #1
 8009174:	e000      	b.n	8009178 <prvGetNextExpireTime+0x18>
 8009176:	2200      	movs	r2, #0
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d105      	bne.n	8009190 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009184:	4b07      	ldr	r3, [pc, #28]	; (80091a4 <prvGetNextExpireTime+0x44>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60fb      	str	r3, [r7, #12]
 800918e:	e001      	b.n	8009194 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009194:	68fb      	ldr	r3, [r7, #12]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20000e00 	.word	0x20000e00

080091a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091b0:	f7ff f972 	bl	8008498 <xTaskGetTickCount>
 80091b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091b6:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <prvSampleTimeNow+0x3c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d205      	bcs.n	80091cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091c0:	f000 f930 	bl	8009424 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	e002      	b.n	80091d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091d2:	4a04      	ldr	r2, [pc, #16]	; (80091e4 <prvSampleTimeNow+0x3c>)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80091d8:	68fb      	ldr	r3, [r7, #12]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000e10 	.word	0x20000e10

080091e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091f6:	2300      	movs	r3, #0
 80091f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	429a      	cmp	r2, r3
 800920c:	d812      	bhi.n	8009234 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	1ad2      	subs	r2, r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	429a      	cmp	r2, r3
 800921a:	d302      	bcc.n	8009222 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800921c:	2301      	movs	r3, #1
 800921e:	617b      	str	r3, [r7, #20]
 8009220:	e01b      	b.n	800925a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009222:	4b10      	ldr	r3, [pc, #64]	; (8009264 <prvInsertTimerInActiveList+0x7c>)
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3304      	adds	r3, #4
 800922a:	4619      	mov	r1, r3
 800922c:	4610      	mov	r0, r2
 800922e:	f7fd fd14 	bl	8006c5a <vListInsert>
 8009232:	e012      	b.n	800925a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	429a      	cmp	r2, r3
 800923a:	d206      	bcs.n	800924a <prvInsertTimerInActiveList+0x62>
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d302      	bcc.n	800924a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009244:	2301      	movs	r3, #1
 8009246:	617b      	str	r3, [r7, #20]
 8009248:	e007      	b.n	800925a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800924a:	4b07      	ldr	r3, [pc, #28]	; (8009268 <prvInsertTimerInActiveList+0x80>)
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3304      	adds	r3, #4
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f7fd fd00 	bl	8006c5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800925a:	697b      	ldr	r3, [r7, #20]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20000e04 	.word	0x20000e04
 8009268:	20000e00 	.word	0x20000e00

0800926c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08e      	sub	sp, #56	; 0x38
 8009270:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009272:	e0c6      	b.n	8009402 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	da17      	bge.n	80092aa <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800927a:	1d3b      	adds	r3, r7, #4
 800927c:	3304      	adds	r3, #4
 800927e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	2b00      	cmp	r3, #0
 8009284:	d109      	bne.n	800929a <prvProcessReceivedCommands+0x2e>
 8009286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	61fb      	str	r3, [r7, #28]
 8009298:	e7fe      	b.n	8009298 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092a0:	6850      	ldr	r0, [r2, #4]
 80092a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092a4:	6892      	ldr	r2, [r2, #8]
 80092a6:	4611      	mov	r1, r2
 80092a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f2c0 80a7 	blt.w	8009400 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d004      	beq.n	80092c8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c0:	3304      	adds	r3, #4
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fd fd02 	bl	8006ccc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092c8:	463b      	mov	r3, r7
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7ff ff6c 	bl	80091a8 <prvSampleTimeNow>
 80092d0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	f200 8094 	bhi.w	8009402 <prvProcessReceivedCommands+0x196>
 80092da:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <prvProcessReceivedCommands+0x74>)
 80092dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e0:	08009309 	.word	0x08009309
 80092e4:	08009309 	.word	0x08009309
 80092e8:	08009309 	.word	0x08009309
 80092ec:	0800937b 	.word	0x0800937b
 80092f0:	0800938f 	.word	0x0800938f
 80092f4:	080093d7 	.word	0x080093d7
 80092f8:	08009309 	.word	0x08009309
 80092fc:	08009309 	.word	0x08009309
 8009300:	0800937b 	.word	0x0800937b
 8009304:	0800938f 	.word	0x0800938f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800930e:	f043 0301 	orr.w	r3, r3, #1
 8009312:	b2da      	uxtb	r2, r3
 8009314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	18d1      	adds	r1, r2, r3
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009328:	f7ff ff5e 	bl	80091e8 <prvInsertTimerInActiveList>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d067      	beq.n	8009402 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009338:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009340:	f003 0304 	and.w	r3, r3, #4
 8009344:	2b00      	cmp	r3, #0
 8009346:	d05c      	beq.n	8009402 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	441a      	add	r2, r3
 8009350:	2300      	movs	r3, #0
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	2300      	movs	r3, #0
 8009356:	2100      	movs	r1, #0
 8009358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800935a:	f7ff fe09 	bl	8008f70 <xTimerGenericCommand>
 800935e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d14d      	bne.n	8009402 <prvProcessReceivedCommands+0x196>
 8009366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	61bb      	str	r3, [r7, #24]
 8009378:	e7fe      	b.n	8009378 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	b2da      	uxtb	r2, r3
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800938c:	e039      	b.n	8009402 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009394:	f043 0301 	orr.w	r3, r3, #1
 8009398:	b2da      	uxtb	r2, r3
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d109      	bne.n	80093c2 <prvProcessReceivedCommands+0x156>
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	e7fe      	b.n	80093c0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	18d1      	adds	r1, r2, r3
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093d0:	f7ff ff0a 	bl	80091e8 <prvInsertTimerInActiveList>
					break;
 80093d4:	e015      	b.n	8009402 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d103      	bne.n	80093ec <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80093e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093e6:	f000 fbc5 	bl	8009b74 <vPortFree>
 80093ea:	e00a      	b.n	8009402 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093f2:	f023 0301 	bic.w	r3, r3, #1
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093fe:	e000      	b.n	8009402 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009400:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009402:	4b07      	ldr	r3, [pc, #28]	; (8009420 <prvProcessReceivedCommands+0x1b4>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	1d39      	adds	r1, r7, #4
 8009408:	2200      	movs	r2, #0
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe f8f8 	bl	8007600 <xQueueReceive>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	f47f af2e 	bne.w	8009274 <prvProcessReceivedCommands+0x8>
	}
}
 8009418:	bf00      	nop
 800941a:	3730      	adds	r7, #48	; 0x30
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	20000e08 	.word	0x20000e08

08009424 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800942a:	e047      	b.n	80094bc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800942c:	4b2d      	ldr	r3, [pc, #180]	; (80094e4 <prvSwitchTimerLists+0xc0>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009436:	4b2b      	ldr	r3, [pc, #172]	; (80094e4 <prvSwitchTimerLists+0xc0>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3304      	adds	r3, #4
 8009444:	4618      	mov	r0, r3
 8009446:	f7fd fc41 	bl	8006ccc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b00      	cmp	r3, #0
 800945e:	d02d      	beq.n	80094bc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	4413      	add	r3, r2
 8009468:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	429a      	cmp	r2, r3
 8009470:	d90e      	bls.n	8009490 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800947e:	4b19      	ldr	r3, [pc, #100]	; (80094e4 <prvSwitchTimerLists+0xc0>)
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3304      	adds	r3, #4
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f7fd fbe6 	bl	8006c5a <vListInsert>
 800948e:	e015      	b.n	80094bc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009490:	2300      	movs	r3, #0
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	2300      	movs	r3, #0
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	2100      	movs	r1, #0
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff fd68 	bl	8008f70 <xTimerGenericCommand>
 80094a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d109      	bne.n	80094bc <prvSwitchTimerLists+0x98>
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	603b      	str	r3, [r7, #0]
 80094ba:	e7fe      	b.n	80094ba <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094bc:	4b09      	ldr	r3, [pc, #36]	; (80094e4 <prvSwitchTimerLists+0xc0>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1b2      	bne.n	800942c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094c6:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <prvSwitchTimerLists+0xc0>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094cc:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <prvSwitchTimerLists+0xc4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a04      	ldr	r2, [pc, #16]	; (80094e4 <prvSwitchTimerLists+0xc0>)
 80094d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094d4:	4a04      	ldr	r2, [pc, #16]	; (80094e8 <prvSwitchTimerLists+0xc4>)
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	6013      	str	r3, [r2, #0]
}
 80094da:	bf00      	nop
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20000e00 	.word	0x20000e00
 80094e8:	20000e04 	.word	0x20000e04

080094ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094f2:	f000 f963 	bl	80097bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094f6:	4b15      	ldr	r3, [pc, #84]	; (800954c <prvCheckForValidListAndQueue+0x60>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d120      	bne.n	8009540 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80094fe:	4814      	ldr	r0, [pc, #80]	; (8009550 <prvCheckForValidListAndQueue+0x64>)
 8009500:	f7fd fb5a 	bl	8006bb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009504:	4813      	ldr	r0, [pc, #76]	; (8009554 <prvCheckForValidListAndQueue+0x68>)
 8009506:	f7fd fb57 	bl	8006bb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800950a:	4b13      	ldr	r3, [pc, #76]	; (8009558 <prvCheckForValidListAndQueue+0x6c>)
 800950c:	4a10      	ldr	r2, [pc, #64]	; (8009550 <prvCheckForValidListAndQueue+0x64>)
 800950e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009510:	4b12      	ldr	r3, [pc, #72]	; (800955c <prvCheckForValidListAndQueue+0x70>)
 8009512:	4a10      	ldr	r2, [pc, #64]	; (8009554 <prvCheckForValidListAndQueue+0x68>)
 8009514:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009516:	2300      	movs	r3, #0
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	4b11      	ldr	r3, [pc, #68]	; (8009560 <prvCheckForValidListAndQueue+0x74>)
 800951c:	4a11      	ldr	r2, [pc, #68]	; (8009564 <prvCheckForValidListAndQueue+0x78>)
 800951e:	2110      	movs	r1, #16
 8009520:	200a      	movs	r0, #10
 8009522:	f7fd fc65 	bl	8006df0 <xQueueGenericCreateStatic>
 8009526:	4602      	mov	r2, r0
 8009528:	4b08      	ldr	r3, [pc, #32]	; (800954c <prvCheckForValidListAndQueue+0x60>)
 800952a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800952c:	4b07      	ldr	r3, [pc, #28]	; (800954c <prvCheckForValidListAndQueue+0x60>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d005      	beq.n	8009540 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009534:	4b05      	ldr	r3, [pc, #20]	; (800954c <prvCheckForValidListAndQueue+0x60>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	490b      	ldr	r1, [pc, #44]	; (8009568 <prvCheckForValidListAndQueue+0x7c>)
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe fc46 	bl	8007dcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009540:	f000 f96a 	bl	8009818 <vPortExitCritical>
}
 8009544:	bf00      	nop
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000e08 	.word	0x20000e08
 8009550:	20000dd8 	.word	0x20000dd8
 8009554:	20000dec 	.word	0x20000dec
 8009558:	20000e00 	.word	0x20000e00
 800955c:	20000e04 	.word	0x20000e04
 8009560:	20000eb4 	.word	0x20000eb4
 8009564:	20000e14 	.word	0x20000e14
 8009568:	0801b500 	.word	0x0801b500

0800956c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3b04      	subs	r3, #4
 800957c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3b04      	subs	r3, #4
 800958a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f023 0201 	bic.w	r2, r3, #1
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	3b04      	subs	r3, #4
 800959a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800959c:	4a0c      	ldr	r2, [pc, #48]	; (80095d0 <pxPortInitialiseStack+0x64>)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3b14      	subs	r3, #20
 80095a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3b04      	subs	r3, #4
 80095b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f06f 0202 	mvn.w	r2, #2
 80095ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	3b20      	subs	r3, #32
 80095c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80095c2:	68fb      	ldr	r3, [r7, #12]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	080095d5 	.word	0x080095d5

080095d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095da:	2300      	movs	r3, #0
 80095dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095de:	4b11      	ldr	r3, [pc, #68]	; (8009624 <prvTaskExitError+0x50>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e6:	d009      	beq.n	80095fc <prvTaskExitError+0x28>
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	60fb      	str	r3, [r7, #12]
 80095fa:	e7fe      	b.n	80095fa <prvTaskExitError+0x26>
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800960e:	bf00      	nop
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0fc      	beq.n	8009610 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009616:	bf00      	nop
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20000010 	.word	0x20000010
	...

08009630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <pxCurrentTCBConst2>)
 8009632:	6819      	ldr	r1, [r3, #0]
 8009634:	6808      	ldr	r0, [r1, #0]
 8009636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	f380 8809 	msr	PSP, r0
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f04f 0000 	mov.w	r0, #0
 8009646:	f380 8811 	msr	BASEPRI, r0
 800964a:	4770      	bx	lr
 800964c:	f3af 8000 	nop.w

08009650 <pxCurrentTCBConst2>:
 8009650:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop

08009658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009658:	4808      	ldr	r0, [pc, #32]	; (800967c <prvPortStartFirstTask+0x24>)
 800965a:	6800      	ldr	r0, [r0, #0]
 800965c:	6800      	ldr	r0, [r0, #0]
 800965e:	f380 8808 	msr	MSP, r0
 8009662:	f04f 0000 	mov.w	r0, #0
 8009666:	f380 8814 	msr	CONTROL, r0
 800966a:	b662      	cpsie	i
 800966c:	b661      	cpsie	f
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	df00      	svc	0
 8009678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800967a:	bf00      	nop
 800967c:	e000ed08 	.word	0xe000ed08

08009680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009686:	4b44      	ldr	r3, [pc, #272]	; (8009798 <xPortStartScheduler+0x118>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a44      	ldr	r2, [pc, #272]	; (800979c <xPortStartScheduler+0x11c>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d109      	bne.n	80096a4 <xPortStartScheduler+0x24>
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	e7fe      	b.n	80096a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096a4:	4b3c      	ldr	r3, [pc, #240]	; (8009798 <xPortStartScheduler+0x118>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a3d      	ldr	r2, [pc, #244]	; (80097a0 <xPortStartScheduler+0x120>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d109      	bne.n	80096c2 <xPortStartScheduler+0x42>
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	e7fe      	b.n	80096c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096c2:	4b38      	ldr	r3, [pc, #224]	; (80097a4 <xPortStartScheduler+0x124>)
 80096c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	22ff      	movs	r2, #255	; 0xff
 80096d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096dc:	78fb      	ldrb	r3, [r7, #3]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	4b30      	ldr	r3, [pc, #192]	; (80097a8 <xPortStartScheduler+0x128>)
 80096e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096ea:	4b30      	ldr	r3, [pc, #192]	; (80097ac <xPortStartScheduler+0x12c>)
 80096ec:	2207      	movs	r2, #7
 80096ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096f0:	e009      	b.n	8009706 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80096f2:	4b2e      	ldr	r3, [pc, #184]	; (80097ac <xPortStartScheduler+0x12c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	4a2c      	ldr	r2, [pc, #176]	; (80097ac <xPortStartScheduler+0x12c>)
 80096fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	b2db      	uxtb	r3, r3
 8009704:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970e:	2b80      	cmp	r3, #128	; 0x80
 8009710:	d0ef      	beq.n	80096f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009712:	4b26      	ldr	r3, [pc, #152]	; (80097ac <xPortStartScheduler+0x12c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f1c3 0307 	rsb	r3, r3, #7
 800971a:	2b04      	cmp	r3, #4
 800971c:	d009      	beq.n	8009732 <xPortStartScheduler+0xb2>
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	60bb      	str	r3, [r7, #8]
 8009730:	e7fe      	b.n	8009730 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009732:	4b1e      	ldr	r3, [pc, #120]	; (80097ac <xPortStartScheduler+0x12c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	4a1c      	ldr	r2, [pc, #112]	; (80097ac <xPortStartScheduler+0x12c>)
 800973a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800973c:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <xPortStartScheduler+0x12c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009744:	4a19      	ldr	r2, [pc, #100]	; (80097ac <xPortStartScheduler+0x12c>)
 8009746:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	b2da      	uxtb	r2, r3
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009750:	4b17      	ldr	r3, [pc, #92]	; (80097b0 <xPortStartScheduler+0x130>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a16      	ldr	r2, [pc, #88]	; (80097b0 <xPortStartScheduler+0x130>)
 8009756:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800975a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800975c:	4b14      	ldr	r3, [pc, #80]	; (80097b0 <xPortStartScheduler+0x130>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a13      	ldr	r2, [pc, #76]	; (80097b0 <xPortStartScheduler+0x130>)
 8009762:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009766:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009768:	f000 f8d6 	bl	8009918 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800976c:	4b11      	ldr	r3, [pc, #68]	; (80097b4 <xPortStartScheduler+0x134>)
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009772:	f000 f8f5 	bl	8009960 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009776:	4b10      	ldr	r3, [pc, #64]	; (80097b8 <xPortStartScheduler+0x138>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a0f      	ldr	r2, [pc, #60]	; (80097b8 <xPortStartScheduler+0x138>)
 800977c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009780:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009782:	f7ff ff69 	bl	8009658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009786:	f7fe ff61 	bl	800864c <vTaskSwitchContext>
	prvTaskExitError();
 800978a:	f7ff ff23 	bl	80095d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	e000ed00 	.word	0xe000ed00
 800979c:	410fc271 	.word	0x410fc271
 80097a0:	410fc270 	.word	0x410fc270
 80097a4:	e000e400 	.word	0xe000e400
 80097a8:	20000f04 	.word	0x20000f04
 80097ac:	20000f08 	.word	0x20000f08
 80097b0:	e000ed20 	.word	0xe000ed20
 80097b4:	20000010 	.word	0x20000010
 80097b8:	e000ef34 	.word	0xe000ef34

080097bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097d4:	4b0e      	ldr	r3, [pc, #56]	; (8009810 <vPortEnterCritical+0x54>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3301      	adds	r3, #1
 80097da:	4a0d      	ldr	r2, [pc, #52]	; (8009810 <vPortEnterCritical+0x54>)
 80097dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097de:	4b0c      	ldr	r3, [pc, #48]	; (8009810 <vPortEnterCritical+0x54>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d10e      	bne.n	8009804 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097e6:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <vPortEnterCritical+0x58>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d009      	beq.n	8009804 <vPortEnterCritical+0x48>
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	603b      	str	r3, [r7, #0]
 8009802:	e7fe      	b.n	8009802 <vPortEnterCritical+0x46>
	}
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	20000010 	.word	0x20000010
 8009814:	e000ed04 	.word	0xe000ed04

08009818 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800981e:	4b11      	ldr	r3, [pc, #68]	; (8009864 <vPortExitCritical+0x4c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d109      	bne.n	800983a <vPortExitCritical+0x22>
 8009826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	607b      	str	r3, [r7, #4]
 8009838:	e7fe      	b.n	8009838 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800983a:	4b0a      	ldr	r3, [pc, #40]	; (8009864 <vPortExitCritical+0x4c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3b01      	subs	r3, #1
 8009840:	4a08      	ldr	r2, [pc, #32]	; (8009864 <vPortExitCritical+0x4c>)
 8009842:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009844:	4b07      	ldr	r3, [pc, #28]	; (8009864 <vPortExitCritical+0x4c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d104      	bne.n	8009856 <vPortExitCritical+0x3e>
 800984c:	2300      	movs	r3, #0
 800984e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	20000010 	.word	0x20000010
	...

08009870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009870:	f3ef 8009 	mrs	r0, PSP
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	4b15      	ldr	r3, [pc, #84]	; (80098d0 <pxCurrentTCBConst>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	f01e 0f10 	tst.w	lr, #16
 8009880:	bf08      	it	eq
 8009882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988a:	6010      	str	r0, [r2, #0]
 800988c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009894:	f380 8811 	msr	BASEPRI, r0
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f7fe fed4 	bl	800864c <vTaskSwitchContext>
 80098a4:	f04f 0000 	mov.w	r0, #0
 80098a8:	f380 8811 	msr	BASEPRI, r0
 80098ac:	bc09      	pop	{r0, r3}
 80098ae:	6819      	ldr	r1, [r3, #0]
 80098b0:	6808      	ldr	r0, [r1, #0]
 80098b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b6:	f01e 0f10 	tst.w	lr, #16
 80098ba:	bf08      	it	eq
 80098bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098c0:	f380 8809 	msr	PSP, r0
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	f3af 8000 	nop.w

080098d0 <pxCurrentTCBConst>:
 80098d0:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop

080098d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098f0:	f7fe fdf4 	bl	80084dc <xTaskIncrementTick>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098fa:	4b06      	ldr	r3, [pc, #24]	; (8009914 <SysTick_Handler+0x3c>)
 80098fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	2300      	movs	r3, #0
 8009904:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	e000ed04 	.word	0xe000ed04

08009918 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009918:	b480      	push	{r7}
 800991a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800991c:	4b0b      	ldr	r3, [pc, #44]	; (800994c <vPortSetupTimerInterrupt+0x34>)
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009922:	4b0b      	ldr	r3, [pc, #44]	; (8009950 <vPortSetupTimerInterrupt+0x38>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009928:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <vPortSetupTimerInterrupt+0x3c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a0a      	ldr	r2, [pc, #40]	; (8009958 <vPortSetupTimerInterrupt+0x40>)
 800992e:	fba2 2303 	umull	r2, r3, r2, r3
 8009932:	099b      	lsrs	r3, r3, #6
 8009934:	4a09      	ldr	r2, [pc, #36]	; (800995c <vPortSetupTimerInterrupt+0x44>)
 8009936:	3b01      	subs	r3, #1
 8009938:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800993a:	4b04      	ldr	r3, [pc, #16]	; (800994c <vPortSetupTimerInterrupt+0x34>)
 800993c:	2207      	movs	r2, #7
 800993e:	601a      	str	r2, [r3, #0]
}
 8009940:	bf00      	nop
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	e000e010 	.word	0xe000e010
 8009950:	e000e018 	.word	0xe000e018
 8009954:	20000004 	.word	0x20000004
 8009958:	10624dd3 	.word	0x10624dd3
 800995c:	e000e014 	.word	0xe000e014

08009960 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009960:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009970 <vPortEnableVFP+0x10>
 8009964:	6801      	ldr	r1, [r0, #0]
 8009966:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800996a:	6001      	str	r1, [r0, #0]
 800996c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800996e:	bf00      	nop
 8009970:	e000ed88 	.word	0xe000ed88

08009974 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800997a:	f3ef 8305 	mrs	r3, IPSR
 800997e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b0f      	cmp	r3, #15
 8009984:	d913      	bls.n	80099ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009986:	4a16      	ldr	r2, [pc, #88]	; (80099e0 <vPortValidateInterruptPriority+0x6c>)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4413      	add	r3, r2
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009990:	4b14      	ldr	r3, [pc, #80]	; (80099e4 <vPortValidateInterruptPriority+0x70>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	7afa      	ldrb	r2, [r7, #11]
 8009996:	429a      	cmp	r2, r3
 8009998:	d209      	bcs.n	80099ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	607b      	str	r3, [r7, #4]
 80099ac:	e7fe      	b.n	80099ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099ae:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <vPortValidateInterruptPriority+0x74>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80099b6:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <vPortValidateInterruptPriority+0x78>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d909      	bls.n	80099d2 <vPortValidateInterruptPriority+0x5e>
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	e7fe      	b.n	80099d0 <vPortValidateInterruptPriority+0x5c>
	}
 80099d2:	bf00      	nop
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	e000e3f0 	.word	0xe000e3f0
 80099e4:	20000f04 	.word	0x20000f04
 80099e8:	e000ed0c 	.word	0xe000ed0c
 80099ec:	20000f08 	.word	0x20000f08

080099f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08a      	sub	sp, #40	; 0x28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099f8:	2300      	movs	r3, #0
 80099fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099fc:	f7fe fca2 	bl	8008344 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a00:	4b57      	ldr	r3, [pc, #348]	; (8009b60 <pvPortMalloc+0x170>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a08:	f000 f90c 	bl	8009c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a0c:	4b55      	ldr	r3, [pc, #340]	; (8009b64 <pvPortMalloc+0x174>)
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4013      	ands	r3, r2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f040 808c 	bne.w	8009b32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01c      	beq.n	8009a5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009a20:	2208      	movs	r2, #8
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4413      	add	r3, r2
 8009a26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f003 0307 	and.w	r3, r3, #7
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d013      	beq.n	8009a5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f023 0307 	bic.w	r3, r3, #7
 8009a38:	3308      	adds	r3, #8
 8009a3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f003 0307 	and.w	r3, r3, #7
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d009      	beq.n	8009a5a <pvPortMalloc+0x6a>
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	e7fe      	b.n	8009a58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d068      	beq.n	8009b32 <pvPortMalloc+0x142>
 8009a60:	4b41      	ldr	r3, [pc, #260]	; (8009b68 <pvPortMalloc+0x178>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d863      	bhi.n	8009b32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a6a:	4b40      	ldr	r3, [pc, #256]	; (8009b6c <pvPortMalloc+0x17c>)
 8009a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a6e:	4b3f      	ldr	r3, [pc, #252]	; (8009b6c <pvPortMalloc+0x17c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a74:	e004      	b.n	8009a80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d903      	bls.n	8009a92 <pvPortMalloc+0xa2>
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1f1      	bne.n	8009a76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a92:	4b33      	ldr	r3, [pc, #204]	; (8009b60 <pvPortMalloc+0x170>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d04a      	beq.n	8009b32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2208      	movs	r2, #8
 8009aa2:	4413      	add	r3, r2
 8009aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	1ad2      	subs	r2, r2, r3
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d91e      	bls.n	8009afc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	f003 0307 	and.w	r3, r3, #7
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d009      	beq.n	8009ae4 <pvPortMalloc+0xf4>
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	613b      	str	r3, [r7, #16]
 8009ae2:	e7fe      	b.n	8009ae2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	1ad2      	subs	r2, r2, r3
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009af6:	69b8      	ldr	r0, [r7, #24]
 8009af8:	f000 f8f6 	bl	8009ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009afc:	4b1a      	ldr	r3, [pc, #104]	; (8009b68 <pvPortMalloc+0x178>)
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	4a18      	ldr	r2, [pc, #96]	; (8009b68 <pvPortMalloc+0x178>)
 8009b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b0a:	4b17      	ldr	r3, [pc, #92]	; (8009b68 <pvPortMalloc+0x178>)
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	4b18      	ldr	r3, [pc, #96]	; (8009b70 <pvPortMalloc+0x180>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d203      	bcs.n	8009b1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b16:	4b14      	ldr	r3, [pc, #80]	; (8009b68 <pvPortMalloc+0x178>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a15      	ldr	r2, [pc, #84]	; (8009b70 <pvPortMalloc+0x180>)
 8009b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	4b10      	ldr	r3, [pc, #64]	; (8009b64 <pvPortMalloc+0x174>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	431a      	orrs	r2, r3
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	2200      	movs	r2, #0
 8009b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b32:	f7fe fc15 	bl	8008360 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	f003 0307 	and.w	r3, r3, #7
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d009      	beq.n	8009b54 <pvPortMalloc+0x164>
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e7fe      	b.n	8009b52 <pvPortMalloc+0x162>
	return pvReturn;
 8009b54:	69fb      	ldr	r3, [r7, #28]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3728      	adds	r7, #40	; 0x28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20004b14 	.word	0x20004b14
 8009b64:	20004b20 	.word	0x20004b20
 8009b68:	20004b18 	.word	0x20004b18
 8009b6c:	20004b0c 	.word	0x20004b0c
 8009b70:	20004b1c 	.word	0x20004b1c

08009b74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d046      	beq.n	8009c14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b86:	2308      	movs	r3, #8
 8009b88:	425b      	negs	r3, r3
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	4b20      	ldr	r3, [pc, #128]	; (8009c1c <vPortFree+0xa8>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d109      	bne.n	8009bb6 <vPortFree+0x42>
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e7fe      	b.n	8009bb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d009      	beq.n	8009bd2 <vPortFree+0x5e>
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	60bb      	str	r3, [r7, #8]
 8009bd0:	e7fe      	b.n	8009bd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	4b11      	ldr	r3, [pc, #68]	; (8009c1c <vPortFree+0xa8>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4013      	ands	r3, r2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d019      	beq.n	8009c14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d115      	bne.n	8009c14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	4b0b      	ldr	r3, [pc, #44]	; (8009c1c <vPortFree+0xa8>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	43db      	mvns	r3, r3
 8009bf2:	401a      	ands	r2, r3
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bf8:	f7fe fba4 	bl	8008344 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	4b07      	ldr	r3, [pc, #28]	; (8009c20 <vPortFree+0xac>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4413      	add	r3, r2
 8009c06:	4a06      	ldr	r2, [pc, #24]	; (8009c20 <vPortFree+0xac>)
 8009c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c0a:	6938      	ldr	r0, [r7, #16]
 8009c0c:	f000 f86c 	bl	8009ce8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c10:	f7fe fba6 	bl	8008360 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c14:	bf00      	nop
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20004b20 	.word	0x20004b20
 8009c20:	20004b18 	.word	0x20004b18

08009c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c30:	4b27      	ldr	r3, [pc, #156]	; (8009cd0 <prvHeapInit+0xac>)
 8009c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00c      	beq.n	8009c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3307      	adds	r3, #7
 8009c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f023 0307 	bic.w	r3, r3, #7
 8009c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	4a1f      	ldr	r2, [pc, #124]	; (8009cd0 <prvHeapInit+0xac>)
 8009c54:	4413      	add	r3, r2
 8009c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c5c:	4a1d      	ldr	r2, [pc, #116]	; (8009cd4 <prvHeapInit+0xb0>)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c62:	4b1c      	ldr	r3, [pc, #112]	; (8009cd4 <prvHeapInit+0xb0>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c70:	2208      	movs	r2, #8
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0307 	bic.w	r3, r3, #7
 8009c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4a15      	ldr	r2, [pc, #84]	; (8009cd8 <prvHeapInit+0xb4>)
 8009c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c86:	4b14      	ldr	r3, [pc, #80]	; (8009cd8 <prvHeapInit+0xb4>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c8e:	4b12      	ldr	r3, [pc, #72]	; (8009cd8 <prvHeapInit+0xb4>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	1ad2      	subs	r2, r2, r3
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ca4:	4b0c      	ldr	r3, [pc, #48]	; (8009cd8 <prvHeapInit+0xb4>)
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	4a0a      	ldr	r2, [pc, #40]	; (8009cdc <prvHeapInit+0xb8>)
 8009cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	4a09      	ldr	r2, [pc, #36]	; (8009ce0 <prvHeapInit+0xbc>)
 8009cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009cbc:	4b09      	ldr	r3, [pc, #36]	; (8009ce4 <prvHeapInit+0xc0>)
 8009cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009cc2:	601a      	str	r2, [r3, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	20000f0c 	.word	0x20000f0c
 8009cd4:	20004b0c 	.word	0x20004b0c
 8009cd8:	20004b14 	.word	0x20004b14
 8009cdc:	20004b1c 	.word	0x20004b1c
 8009ce0:	20004b18 	.word	0x20004b18
 8009ce4:	20004b20 	.word	0x20004b20

08009ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cf0:	4b28      	ldr	r3, [pc, #160]	; (8009d94 <prvInsertBlockIntoFreeList+0xac>)
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e002      	b.n	8009cfc <prvInsertBlockIntoFreeList+0x14>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d8f7      	bhi.n	8009cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	4413      	add	r3, r2
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d108      	bne.n	8009d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	441a      	add	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	441a      	add	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d118      	bne.n	8009d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	4b15      	ldr	r3, [pc, #84]	; (8009d98 <prvInsertBlockIntoFreeList+0xb0>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d00d      	beq.n	8009d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	441a      	add	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	e008      	b.n	8009d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d66:	4b0c      	ldr	r3, [pc, #48]	; (8009d98 <prvInsertBlockIntoFreeList+0xb0>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	e003      	b.n	8009d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d002      	beq.n	8009d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d86:	bf00      	nop
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20004b0c 	.word	0x20004b0c
 8009d98:	20004b14 	.word	0x20004b14

08009d9c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	330c      	adds	r3, #12
 8009dac:	461a      	mov	r2, r3
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f003 f8f5 	bl	800cfa0 <tcpip_send_msg_wait_sem>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d103      	bne.n	8009dca <netconn_apimsg+0x2e>
    return apimsg->err;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009dc8:	e001      	b.n	8009dce <netconn_apimsg+0x32>
  }
  return err;
 8009dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08c      	sub	sp, #48	; 0x30
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	603a      	str	r2, [r7, #0]
 8009de2:	71fb      	strb	r3, [r7, #7]
 8009de4:	460b      	mov	r3, r1
 8009de6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009de8:	79fb      	ldrb	r3, [r7, #7]
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 ff6d 	bl	800accc <netconn_alloc>
 8009df2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d054      	beq.n	8009ea4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009dfa:	79bb      	ldrb	r3, [r7, #6]
 8009dfc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009e02:	f107 0308 	add.w	r3, r7, #8
 8009e06:	4619      	mov	r1, r3
 8009e08:	4829      	ldr	r0, [pc, #164]	; (8009eb0 <netconn_new_with_proto_and_callback+0xd8>)
 8009e0a:	f7ff ffc7 	bl	8009d9c <netconn_apimsg>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009e14:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d043      	beq.n	8009ea4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <netconn_new_with_proto_and_callback+0x58>
 8009e24:	4b23      	ldr	r3, [pc, #140]	; (8009eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8009e26:	22a3      	movs	r2, #163	; 0xa3
 8009e28:	4923      	ldr	r1, [pc, #140]	; (8009eb8 <netconn_new_with_proto_and_callback+0xe0>)
 8009e2a:	4824      	ldr	r0, [pc, #144]	; (8009ebc <netconn_new_with_proto_and_callback+0xe4>)
 8009e2c:	f010 faca 	bl	801a3c4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e32:	3310      	adds	r3, #16
 8009e34:	4618      	mov	r0, r3
 8009e36:	f010 f93d 	bl	801a0b4 <sys_mbox_valid>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d105      	bne.n	8009e4c <netconn_new_with_proto_and_callback+0x74>
 8009e40:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8009e42:	22a4      	movs	r2, #164	; 0xa4
 8009e44:	491e      	ldr	r1, [pc, #120]	; (8009ec0 <netconn_new_with_proto_and_callback+0xe8>)
 8009e46:	481d      	ldr	r0, [pc, #116]	; (8009ebc <netconn_new_with_proto_and_callback+0xe4>)
 8009e48:	f010 fabc 	bl	801a3c4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	3314      	adds	r3, #20
 8009e50:	4618      	mov	r0, r3
 8009e52:	f010 f92f 	bl	801a0b4 <sys_mbox_valid>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d005      	beq.n	8009e68 <netconn_new_with_proto_and_callback+0x90>
 8009e5c:	4b15      	ldr	r3, [pc, #84]	; (8009eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8009e5e:	22a6      	movs	r2, #166	; 0xa6
 8009e60:	4918      	ldr	r1, [pc, #96]	; (8009ec4 <netconn_new_with_proto_and_callback+0xec>)
 8009e62:	4816      	ldr	r0, [pc, #88]	; (8009ebc <netconn_new_with_proto_and_callback+0xe4>)
 8009e64:	f010 faae 	bl	801a3c4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6a:	330c      	adds	r3, #12
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f010 f9af 	bl	801a1d0 <sys_sem_valid>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d105      	bne.n	8009e84 <netconn_new_with_proto_and_callback+0xac>
 8009e78:	4b0e      	ldr	r3, [pc, #56]	; (8009eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8009e7a:	22a9      	movs	r2, #169	; 0xa9
 8009e7c:	4912      	ldr	r1, [pc, #72]	; (8009ec8 <netconn_new_with_proto_and_callback+0xf0>)
 8009e7e:	480f      	ldr	r0, [pc, #60]	; (8009ebc <netconn_new_with_proto_and_callback+0xe4>)
 8009e80:	f010 faa0 	bl	801a3c4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e86:	330c      	adds	r3, #12
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f010 f994 	bl	801a1b6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	3310      	adds	r3, #16
 8009e92:	4618      	mov	r0, r3
 8009e94:	f010 f89a 	bl	8019fcc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e9a:	2007      	movs	r0, #7
 8009e9c:	f003 fde8 	bl	800da70 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	e000      	b.n	8009ea6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3730      	adds	r7, #48	; 0x30
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	0800aca1 	.word	0x0800aca1
 8009eb4:	0801b508 	.word	0x0801b508
 8009eb8:	0801b53c 	.word	0x0801b53c
 8009ebc:	0801b560 	.word	0x0801b560
 8009ec0:	0801b588 	.word	0x0801b588
 8009ec4:	0801b5a0 	.word	0x0801b5a0
 8009ec8:	0801b5c4 	.word	0x0801b5c4

08009ecc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08c      	sub	sp, #48	; 0x30
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	e014      	b.n	8009f08 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009ee2:	2329      	movs	r3, #41	; 0x29
 8009ee4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009ee6:	f107 030c 	add.w	r3, r7, #12
 8009eea:	4619      	mov	r1, r3
 8009eec:	4808      	ldr	r0, [pc, #32]	; (8009f10 <netconn_prepare_delete+0x44>)
 8009eee:	f7ff ff55 	bl	8009d9c <netconn_apimsg>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009ef8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <netconn_prepare_delete+0x3a>
    return err;
 8009f00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f04:	e000      	b.n	8009f08 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3730      	adds	r7, #48	; 0x30
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	0800b205 	.word	0x0800b205

08009f14 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <netconn_delete+0x12>
    return ERR_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e00d      	b.n	8009f42 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7ff ffd0 	bl	8009ecc <netconn_prepare_delete>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d102      	bne.n	8009f3e <netconn_delete+0x2a>
    netconn_free(conn);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 ff35 	bl	800ada8 <netconn_free>
  }
  return err;
 8009f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b08e      	sub	sp, #56	; 0x38
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d109      	bne.n	8009f74 <netconn_getaddr+0x28>
 8009f60:	4b1d      	ldr	r3, [pc, #116]	; (8009fd8 <netconn_getaddr+0x8c>)
 8009f62:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009f66:	491d      	ldr	r1, [pc, #116]	; (8009fdc <netconn_getaddr+0x90>)
 8009f68:	481d      	ldr	r0, [pc, #116]	; (8009fe0 <netconn_getaddr+0x94>)
 8009f6a:	f010 fa2b 	bl	801a3c4 <iprintf>
 8009f6e:	f06f 030f 	mvn.w	r3, #15
 8009f72:	e02d      	b.n	8009fd0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d109      	bne.n	8009f8e <netconn_getaddr+0x42>
 8009f7a:	4b17      	ldr	r3, [pc, #92]	; (8009fd8 <netconn_getaddr+0x8c>)
 8009f7c:	f240 1213 	movw	r2, #275	; 0x113
 8009f80:	4918      	ldr	r1, [pc, #96]	; (8009fe4 <netconn_getaddr+0x98>)
 8009f82:	4817      	ldr	r0, [pc, #92]	; (8009fe0 <netconn_getaddr+0x94>)
 8009f84:	f010 fa1e 	bl	801a3c4 <iprintf>
 8009f88:	f06f 030f 	mvn.w	r3, #15
 8009f8c:	e020      	b.n	8009fd0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d109      	bne.n	8009fa8 <netconn_getaddr+0x5c>
 8009f94:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <netconn_getaddr+0x8c>)
 8009f96:	f44f 728a 	mov.w	r2, #276	; 0x114
 8009f9a:	4913      	ldr	r1, [pc, #76]	; (8009fe8 <netconn_getaddr+0x9c>)
 8009f9c:	4810      	ldr	r0, [pc, #64]	; (8009fe0 <netconn_getaddr+0x94>)
 8009f9e:	f010 fa11 	bl	801a3c4 <iprintf>
 8009fa2:	f06f 030f 	mvn.w	r3, #15
 8009fa6:	e013      	b.n	8009fd0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8009fba:	f107 0314 	add.w	r3, r7, #20
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	480a      	ldr	r0, [pc, #40]	; (8009fec <netconn_getaddr+0xa0>)
 8009fc2:	f7ff feeb 	bl	8009d9c <netconn_apimsg>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8009fcc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3738      	adds	r7, #56	; 0x38
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	0801b508 	.word	0x0801b508
 8009fdc:	0801b5e0 	.word	0x0801b5e0
 8009fe0:	0801b560 	.word	0x0801b560
 8009fe4:	0801b600 	.word	0x0801b600
 8009fe8:	0801b620 	.word	0x0801b620
 8009fec:	0800bac1 	.word	0x0800bac1

08009ff0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08e      	sub	sp, #56	; 0x38
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d109      	bne.n	800a018 <netconn_bind+0x28>
 800a004:	4b11      	ldr	r3, [pc, #68]	; (800a04c <netconn_bind+0x5c>)
 800a006:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a00a:	4911      	ldr	r1, [pc, #68]	; (800a050 <netconn_bind+0x60>)
 800a00c:	4811      	ldr	r0, [pc, #68]	; (800a054 <netconn_bind+0x64>)
 800a00e:	f010 f9d9 	bl	801a3c4 <iprintf>
 800a012:	f06f 030f 	mvn.w	r3, #15
 800a016:	e015      	b.n	800a044 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a01e:	4b0e      	ldr	r3, [pc, #56]	; (800a058 <netconn_bind+0x68>)
 800a020:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a02a:	88fb      	ldrh	r3, [r7, #6]
 800a02c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a02e:	f107 0314 	add.w	r3, r7, #20
 800a032:	4619      	mov	r1, r3
 800a034:	4809      	ldr	r0, [pc, #36]	; (800a05c <netconn_bind+0x6c>)
 800a036:	f7ff feb1 	bl	8009d9c <netconn_apimsg>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a040:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a044:	4618      	mov	r0, r3
 800a046:	3738      	adds	r7, #56	; 0x38
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	0801b508 	.word	0x0801b508
 800a050:	0801b640 	.word	0x0801b640
 800a054:	0801b560 	.word	0x0801b560
 800a058:	0801f328 	.word	0x0801f328
 800a05c:	0800b3cd 	.word	0x0800b3cd

0800a060 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b08c      	sub	sp, #48	; 0x30
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d109      	bne.n	800a086 <netconn_listen_with_backlog+0x26>
 800a072:	4b0d      	ldr	r3, [pc, #52]	; (800a0a8 <netconn_listen_with_backlog+0x48>)
 800a074:	f240 12bb 	movw	r2, #443	; 0x1bb
 800a078:	490c      	ldr	r1, [pc, #48]	; (800a0ac <netconn_listen_with_backlog+0x4c>)
 800a07a:	480d      	ldr	r0, [pc, #52]	; (800a0b0 <netconn_listen_with_backlog+0x50>)
 800a07c:	f010 f9a2 	bl	801a3c4 <iprintf>
 800a080:	f06f 030f 	mvn.w	r3, #15
 800a084:	e00c      	b.n	800a0a0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a08a:	f107 030c 	add.w	r3, r7, #12
 800a08e:	4619      	mov	r1, r3
 800a090:	4808      	ldr	r0, [pc, #32]	; (800a0b4 <netconn_listen_with_backlog+0x54>)
 800a092:	f7ff fe83 	bl	8009d9c <netconn_apimsg>
 800a096:	4603      	mov	r3, r0
 800a098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a09c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3730      	adds	r7, #48	; 0x30
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	0801b508 	.word	0x0801b508
 800a0ac:	0801b6c0 	.word	0x0801b6c0
 800a0b0:	0801b560 	.word	0x0801b560
 800a0b4:	0800b445 	.word	0x0800b445

0800a0b8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d109      	bne.n	800a0dc <netconn_accept+0x24>
 800a0c8:	4b3d      	ldr	r3, [pc, #244]	; (800a1c0 <netconn_accept+0x108>)
 800a0ca:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a0ce:	493d      	ldr	r1, [pc, #244]	; (800a1c4 <netconn_accept+0x10c>)
 800a0d0:	483d      	ldr	r0, [pc, #244]	; (800a1c8 <netconn_accept+0x110>)
 800a0d2:	f010 f977 	bl	801a3c4 <iprintf>
 800a0d6:	f06f 030f 	mvn.w	r3, #15
 800a0da:	e06c      	b.n	800a1b6 <netconn_accept+0xfe>
  *new_conn = NULL;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d109      	bne.n	800a0fc <netconn_accept+0x44>
 800a0e8:	4b35      	ldr	r3, [pc, #212]	; (800a1c0 <netconn_accept+0x108>)
 800a0ea:	f240 12e3 	movw	r2, #483	; 0x1e3
 800a0ee:	4937      	ldr	r1, [pc, #220]	; (800a1cc <netconn_accept+0x114>)
 800a0f0:	4835      	ldr	r0, [pc, #212]	; (800a1c8 <netconn_accept+0x110>)
 800a0f2:	f010 f967 	bl	801a3c4 <iprintf>
 800a0f6:	f06f 030f 	mvn.w	r3, #15
 800a0fa:	e05c      	b.n	800a1b6 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f967 	bl	800a3d0 <netconn_err>
 800a102:	4603      	mov	r3, r0
 800a104:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a106:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a10e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a112:	e050      	b.n	800a1b6 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3314      	adds	r3, #20
 800a118:	4618      	mov	r0, r3
 800a11a:	f00f ffcb 	bl	801a0b4 <sys_mbox_valid>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d005      	beq.n	800a130 <netconn_accept+0x78>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	7f1b      	ldrb	r3, [r3, #28]
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a130:	f06f 030e 	mvn.w	r3, #14
 800a134:	e03f      	b.n	800a1b6 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	7f1b      	ldrb	r3, [r3, #28]
 800a13a:	f003 0302 	and.w	r3, r3, #2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00e      	beq.n	800a160 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3314      	adds	r3, #20
 800a146:	f107 020c 	add.w	r2, r7, #12
 800a14a:	4611      	mov	r1, r2
 800a14c:	4618      	mov	r0, r3
 800a14e:	f00f ff9a 	bl	801a086 <sys_arch_mbox_tryfetch>
 800a152:	4603      	mov	r3, r0
 800a154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a158:	d10a      	bne.n	800a170 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a15a:	f06f 0306 	mvn.w	r3, #6
 800a15e:	e02a      	b.n	800a1b6 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3314      	adds	r3, #20
 800a164:	f107 010c 	add.w	r1, r7, #12
 800a168:	2200      	movs	r2, #0
 800a16a:	4618      	mov	r0, r3
 800a16c:	f00f ff5a 	bl	801a024 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	d005      	beq.n	800a184 <netconn_accept+0xcc>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17c:	2200      	movs	r2, #0
 800a17e:	2101      	movs	r1, #1
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f107 0213 	add.w	r2, r7, #19
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f96d 	bl	800a46c <lwip_netconn_is_err_msg>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a198:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a19c:	e00b      	b.n	800a1b6 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a1a4:	f06f 030e 	mvn.w	r3, #14
 800a1a8:	e005      	b.n	800a1b6 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a1b4:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	0801b508 	.word	0x0801b508
 800a1c4:	0801b6e0 	.word	0x0801b6e0
 800a1c8:	0801b560 	.word	0x0801b560
 800a1cc:	0801b700 	.word	0x0801b700

0800a1d0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08c      	sub	sp, #48	; 0x30
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d109      	bne.n	800a1f4 <netconn_send+0x24>
 800a1e0:	4b0e      	ldr	r3, [pc, #56]	; (800a21c <netconn_send+0x4c>)
 800a1e2:	f240 32b2 	movw	r2, #946	; 0x3b2
 800a1e6:	490e      	ldr	r1, [pc, #56]	; (800a220 <netconn_send+0x50>)
 800a1e8:	480e      	ldr	r0, [pc, #56]	; (800a224 <netconn_send+0x54>)
 800a1ea:	f010 f8eb 	bl	801a3c4 <iprintf>
 800a1ee:	f06f 030f 	mvn.w	r3, #15
 800a1f2:	e00e      	b.n	800a212 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a1fc:	f107 030c 	add.w	r3, r7, #12
 800a200:	4619      	mov	r1, r3
 800a202:	4809      	ldr	r0, [pc, #36]	; (800a228 <netconn_send+0x58>)
 800a204:	f7ff fdca 	bl	8009d9c <netconn_apimsg>
 800a208:	4603      	mov	r3, r0
 800a20a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a20e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a212:	4618      	mov	r0, r3
 800a214:	3730      	adds	r7, #48	; 0x30
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	0801b508 	.word	0x0801b508
 800a220:	0801b7c4 	.word	0x0801b7c4
 800a224:	0801b560 	.word	0x0801b560
 800a228:	0800b575 	.word	0x0800b575

0800a22c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af02      	add	r7, sp, #8
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a242:	78fa      	ldrb	r2, [r7, #3]
 800a244:	f107 0110 	add.w	r1, r7, #16
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	4613      	mov	r3, r2
 800a24e:	2201      	movs	r2, #1
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f805 	bl	800a260 <netconn_write_vectors_partly>
 800a256:	4603      	mov	r3, r0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b092      	sub	sp, #72	; 0x48
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	4611      	mov	r1, r2
 800a26c:	461a      	mov	r2, r3
 800a26e:	460b      	mov	r3, r1
 800a270:	80fb      	strh	r3, [r7, #6]
 800a272:	4613      	mov	r3, r2
 800a274:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d109      	bne.n	800a290 <netconn_write_vectors_partly+0x30>
 800a27c:	4b4e      	ldr	r3, [pc, #312]	; (800a3b8 <netconn_write_vectors_partly+0x158>)
 800a27e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a282:	494e      	ldr	r1, [pc, #312]	; (800a3bc <netconn_write_vectors_partly+0x15c>)
 800a284:	484e      	ldr	r0, [pc, #312]	; (800a3c0 <netconn_write_vectors_partly+0x160>)
 800a286:	f010 f89d 	bl	801a3c4 <iprintf>
 800a28a:	f06f 030f 	mvn.w	r3, #15
 800a28e:	e08e      	b.n	800a3ae <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a298:	2b10      	cmp	r3, #16
 800a29a:	d009      	beq.n	800a2b0 <netconn_write_vectors_partly+0x50>
 800a29c:	4b46      	ldr	r3, [pc, #280]	; (800a3b8 <netconn_write_vectors_partly+0x158>)
 800a29e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800a2a2:	4948      	ldr	r1, [pc, #288]	; (800a3c4 <netconn_write_vectors_partly+0x164>)
 800a2a4:	4846      	ldr	r0, [pc, #280]	; (800a3c0 <netconn_write_vectors_partly+0x160>)
 800a2a6:	f010 f88d 	bl	801a3c4 <iprintf>
 800a2aa:	f06f 0305 	mvn.w	r3, #5
 800a2ae:	e07e      	b.n	800a3ae <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	7f1b      	ldrb	r3, [r3, #28]
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d104      	bne.n	800a2c6 <netconn_write_vectors_partly+0x66>
 800a2bc:	797b      	ldrb	r3, [r7, #5]
 800a2be:	f003 0304 	and.w	r3, r3, #4
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <netconn_write_vectors_partly+0x6a>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e000      	b.n	800a2cc <netconn_write_vectors_partly+0x6c>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a2d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d005      	beq.n	800a2e4 <netconn_write_vectors_partly+0x84>
 800a2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d102      	bne.n	800a2e4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a2de:	f06f 0305 	mvn.w	r3, #5
 800a2e2:	e064      	b.n	800a3ae <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ec:	e015      	b.n	800a31a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2fa:	4413      	add	r3, r2
 800a2fc:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800a2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a300:	00db      	lsls	r3, r3, #3
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	4413      	add	r3, r2
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d202      	bcs.n	800a314 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a30e:	f06f 0305 	mvn.w	r3, #5
 800a312:	e04c      	b.n	800a3ae <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a316:	3301      	adds	r3, #1
 800a318:	643b      	str	r3, [r7, #64]	; 0x40
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a31e:	429a      	cmp	r2, r3
 800a320:	dbe5      	blt.n	800a2ee <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	e040      	b.n	800a3ae <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a32e:	2b00      	cmp	r3, #0
 800a330:	da0a      	bge.n	800a348 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a334:	2b00      	cmp	r3, #0
 800a336:	d102      	bne.n	800a33e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a338:	f06f 0305 	mvn.w	r3, #5
 800a33c:	e037      	b.n	800a3ae <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a33e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a342:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a350:	88fb      	ldrh	r3, [r7, #6]
 800a352:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a358:	797b      	ldrb	r3, [r7, #5]
 800a35a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a35e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a360:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a366:	f107 0314 	add.w	r3, r7, #20
 800a36a:	4619      	mov	r1, r3
 800a36c:	4816      	ldr	r0, [pc, #88]	; (800a3c8 <netconn_write_vectors_partly+0x168>)
 800a36e:	f7ff fd15 	bl	8009d9c <netconn_apimsg>
 800a372:	4603      	mov	r3, r0
 800a374:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800a378:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d114      	bne.n	800a3aa <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a38a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a38c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10a      	bne.n	800a3aa <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a398:	429a      	cmp	r2, r3
 800a39a:	d006      	beq.n	800a3aa <netconn_write_vectors_partly+0x14a>
 800a39c:	4b06      	ldr	r3, [pc, #24]	; (800a3b8 <netconn_write_vectors_partly+0x158>)
 800a39e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a3a2:	490a      	ldr	r1, [pc, #40]	; (800a3cc <netconn_write_vectors_partly+0x16c>)
 800a3a4:	4806      	ldr	r0, [pc, #24]	; (800a3c0 <netconn_write_vectors_partly+0x160>)
 800a3a6:	f010 f80d 	bl	801a3c4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a3aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3748      	adds	r7, #72	; 0x48
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	0801b508 	.word	0x0801b508
 800a3bc:	0801b7e0 	.word	0x0801b7e0
 800a3c0:	0801b560 	.word	0x0801b560
 800a3c4:	0801b7fc 	.word	0x0801b7fc
 800a3c8:	0800b9a9 	.word	0x0800b9a9
 800a3cc:	0801b820 	.word	0x0801b820

0800a3d0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <netconn_err+0x12>
    return ERR_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	e00d      	b.n	800a3fe <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a3e2:	f00f ff71 	bl	801a2c8 <sys_arch_protect>
 800a3e6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	7a1b      	ldrb	r3, [r3, #8]
 800a3ec:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f00f ff75 	bl	801a2e4 <sys_arch_unprotect>
  return err;
 800a3fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a416:	f113 0f0e 	cmn.w	r3, #14
 800a41a:	d008      	beq.n	800a42e <lwip_netconn_err_to_msg+0x26>
 800a41c:	f113 0f0d 	cmn.w	r3, #13
 800a420:	d003      	beq.n	800a42a <lwip_netconn_err_to_msg+0x22>
 800a422:	f113 0f0f 	cmn.w	r3, #15
 800a426:	d004      	beq.n	800a432 <lwip_netconn_err_to_msg+0x2a>
 800a428:	e005      	b.n	800a436 <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a42a:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <lwip_netconn_err_to_msg+0x4c>)
 800a42c:	e00e      	b.n	800a44c <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a42e:	4b0a      	ldr	r3, [pc, #40]	; (800a458 <lwip_netconn_err_to_msg+0x50>)
 800a430:	e00c      	b.n	800a44c <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a432:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <lwip_netconn_err_to_msg+0x54>)
 800a434:	e00a      	b.n	800a44c <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d005      	beq.n	800a44a <lwip_netconn_err_to_msg+0x42>
 800a43e:	4b08      	ldr	r3, [pc, #32]	; (800a460 <lwip_netconn_err_to_msg+0x58>)
 800a440:	227d      	movs	r2, #125	; 0x7d
 800a442:	4908      	ldr	r1, [pc, #32]	; (800a464 <lwip_netconn_err_to_msg+0x5c>)
 800a444:	4808      	ldr	r0, [pc, #32]	; (800a468 <lwip_netconn_err_to_msg+0x60>)
 800a446:	f00f ffbd 	bl	801a3c4 <iprintf>
      return NULL;
 800a44a:	2300      	movs	r3, #0
  }
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	0801f1c0 	.word	0x0801f1c0
 800a458:	0801f1c1 	.word	0x0801f1c1
 800a45c:	0801f1c2 	.word	0x0801f1c2
 800a460:	0801b860 	.word	0x0801b860
 800a464:	0801b894 	.word	0x0801b894
 800a468:	0801b8a4 	.word	0x0801b8a4

0800a46c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d105      	bne.n	800a488 <lwip_netconn_is_err_msg+0x1c>
 800a47c:	4b12      	ldr	r3, [pc, #72]	; (800a4c8 <lwip_netconn_is_err_msg+0x5c>)
 800a47e:	2285      	movs	r2, #133	; 0x85
 800a480:	4912      	ldr	r1, [pc, #72]	; (800a4cc <lwip_netconn_is_err_msg+0x60>)
 800a482:	4813      	ldr	r0, [pc, #76]	; (800a4d0 <lwip_netconn_is_err_msg+0x64>)
 800a484:	f00f ff9e 	bl	801a3c4 <iprintf>

  if (msg == &netconn_aborted) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a12      	ldr	r2, [pc, #72]	; (800a4d4 <lwip_netconn_is_err_msg+0x68>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d104      	bne.n	800a49a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	22f3      	movs	r2, #243	; 0xf3
 800a494:	701a      	strb	r2, [r3, #0]
    return 1;
 800a496:	2301      	movs	r3, #1
 800a498:	e012      	b.n	800a4c0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a0e      	ldr	r2, [pc, #56]	; (800a4d8 <lwip_netconn_is_err_msg+0x6c>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d104      	bne.n	800a4ac <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	22f2      	movs	r2, #242	; 0xf2
 800a4a6:	701a      	strb	r2, [r3, #0]
    return 1;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e009      	b.n	800a4c0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a0b      	ldr	r2, [pc, #44]	; (800a4dc <lwip_netconn_is_err_msg+0x70>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d104      	bne.n	800a4be <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	22f1      	movs	r2, #241	; 0xf1
 800a4b8:	701a      	strb	r2, [r3, #0]
    return 1;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e000      	b.n	800a4c0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	0801b860 	.word	0x0801b860
 800a4cc:	0801b8cc 	.word	0x0801b8cc
 800a4d0:	0801b8a4 	.word	0x0801b8a4
 800a4d4:	0801f1c0 	.word	0x0801f1c0
 800a4d8:	0801f1c1 	.word	0x0801f1c1
 800a4dc:	0801f1c2 	.word	0x0801f1c2

0800a4e0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d105      	bne.n	800a500 <recv_udp+0x20>
 800a4f4:	4b34      	ldr	r3, [pc, #208]	; (800a5c8 <recv_udp+0xe8>)
 800a4f6:	22e5      	movs	r2, #229	; 0xe5
 800a4f8:	4934      	ldr	r1, [pc, #208]	; (800a5cc <recv_udp+0xec>)
 800a4fa:	4835      	ldr	r0, [pc, #212]	; (800a5d0 <recv_udp+0xf0>)
 800a4fc:	f00f ff62 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d105      	bne.n	800a512 <recv_udp+0x32>
 800a506:	4b30      	ldr	r3, [pc, #192]	; (800a5c8 <recv_udp+0xe8>)
 800a508:	22e6      	movs	r2, #230	; 0xe6
 800a50a:	4932      	ldr	r1, [pc, #200]	; (800a5d4 <recv_udp+0xf4>)
 800a50c:	4830      	ldr	r0, [pc, #192]	; (800a5d0 <recv_udp+0xf0>)
 800a50e:	f00f ff59 	bl	801a3c4 <iprintf>
  conn = (struct netconn *)arg;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d103      	bne.n	800a524 <recv_udp+0x44>
    pbuf_free(p);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f004 f98b 	bl	800e838 <pbuf_free>
    return;
 800a522:	e04d      	b.n	800a5c0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d005      	beq.n	800a53a <recv_udp+0x5a>
 800a52e:	4b26      	ldr	r3, [pc, #152]	; (800a5c8 <recv_udp+0xe8>)
 800a530:	22ee      	movs	r2, #238	; 0xee
 800a532:	4929      	ldr	r1, [pc, #164]	; (800a5d8 <recv_udp+0xf8>)
 800a534:	4826      	ldr	r0, [pc, #152]	; (800a5d0 <recv_udp+0xf0>)
 800a536:	f00f ff45 	bl	801a3c4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	3310      	adds	r3, #16
 800a53e:	4618      	mov	r0, r3
 800a540:	f00f fdb8 	bl	801a0b4 <sys_mbox_valid>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d103      	bne.n	800a552 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f004 f974 	bl	800e838 <pbuf_free>
    return;
 800a550:	e036      	b.n	800a5c0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a552:	2006      	movs	r0, #6
 800a554:	f003 fa3a 	bl	800d9cc <memp_malloc>
 800a558:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d103      	bne.n	800a568 <recv_udp+0x88>
    pbuf_free(p);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f004 f969 	bl	800e838 <pbuf_free>
    return;
 800a566:	e02b      	b.n	800a5c0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <recv_udp+0xa0>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	e000      	b.n	800a582 <recv_udp+0xa2>
 800a580:	2300      	movs	r3, #0
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a58a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	891b      	ldrh	r3, [r3, #8]
 800a590:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	3310      	adds	r3, #16
 800a596:	69b9      	ldr	r1, [r7, #24]
 800a598:	4618      	mov	r0, r3
 800a59a:	f00f fd29 	bl	8019ff0 <sys_mbox_trypost>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d003      	beq.n	800a5ac <recv_udp+0xcc>
    netbuf_delete(buf);
 800a5a4:	69b8      	ldr	r0, [r7, #24]
 800a5a6:	f001 fb2f 	bl	800bc08 <netbuf_delete>
    return;
 800a5aa:	e009      	b.n	800a5c0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <recv_udp+0xe0>
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	8afa      	ldrh	r2, [r7, #22]
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	69f8      	ldr	r0, [r7, #28]
 800a5be:	4798      	blx	r3
  }
}
 800a5c0:	3720      	adds	r7, #32
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	0801b860 	.word	0x0801b860
 800a5cc:	0801b8d8 	.word	0x0801b8d8
 800a5d0:	0801b8a4 	.word	0x0801b8a4
 800a5d4:	0801b8fc 	.word	0x0801b8fc
 800a5d8:	0801b91c 	.word	0x0801b91c

0800a5dc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d106      	bne.n	800a5fe <recv_tcp+0x22>
 800a5f0:	4b36      	ldr	r3, [pc, #216]	; (800a6cc <recv_tcp+0xf0>)
 800a5f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a5f6:	4936      	ldr	r1, [pc, #216]	; (800a6d0 <recv_tcp+0xf4>)
 800a5f8:	4836      	ldr	r0, [pc, #216]	; (800a6d4 <recv_tcp+0xf8>)
 800a5fa:	f00f fee3 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d106      	bne.n	800a612 <recv_tcp+0x36>
 800a604:	4b31      	ldr	r3, [pc, #196]	; (800a6cc <recv_tcp+0xf0>)
 800a606:	f240 122d 	movw	r2, #301	; 0x12d
 800a60a:	4933      	ldr	r1, [pc, #204]	; (800a6d8 <recv_tcp+0xfc>)
 800a60c:	4831      	ldr	r0, [pc, #196]	; (800a6d4 <recv_tcp+0xf8>)
 800a60e:	f00f fed9 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d006      	beq.n	800a628 <recv_tcp+0x4c>
 800a61a:	4b2c      	ldr	r3, [pc, #176]	; (800a6cc <recv_tcp+0xf0>)
 800a61c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a620:	492e      	ldr	r1, [pc, #184]	; (800a6dc <recv_tcp+0x100>)
 800a622:	482c      	ldr	r0, [pc, #176]	; (800a6d4 <recv_tcp+0xf8>)
 800a624:	f00f fece 	bl	801a3c4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d102      	bne.n	800a638 <recv_tcp+0x5c>
    return ERR_VAL;
 800a632:	f06f 0305 	mvn.w	r3, #5
 800a636:	e045      	b.n	800a6c4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d006      	beq.n	800a650 <recv_tcp+0x74>
 800a642:	4b22      	ldr	r3, [pc, #136]	; (800a6cc <recv_tcp+0xf0>)
 800a644:	f240 1235 	movw	r2, #309	; 0x135
 800a648:	4925      	ldr	r1, [pc, #148]	; (800a6e0 <recv_tcp+0x104>)
 800a64a:	4822      	ldr	r0, [pc, #136]	; (800a6d4 <recv_tcp+0xf8>)
 800a64c:	f00f feba 	bl	801a3c4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	3310      	adds	r3, #16
 800a654:	4618      	mov	r0, r3
 800a656:	f00f fd2d 	bl	801a0b4 <sys_mbox_valid>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10d      	bne.n	800a67c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d008      	beq.n	800a678 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	891b      	ldrh	r3, [r3, #8]
 800a66a:	4619      	mov	r1, r3
 800a66c:	68b8      	ldr	r0, [r7, #8]
 800a66e:	f005 f8bb 	bl	800f7e8 <tcp_recved>
      pbuf_free(p);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f004 f8e0 	bl	800e838 <pbuf_free>
    }
    return ERR_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	e023      	b.n	800a6c4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d005      	beq.n	800a68e <recv_tcp+0xb2>
    msg = p;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	891b      	ldrh	r3, [r3, #8]
 800a68a:	83fb      	strh	r3, [r7, #30]
 800a68c:	e003      	b.n	800a696 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a68e:	4b15      	ldr	r3, [pc, #84]	; (800a6e4 <recv_tcp+0x108>)
 800a690:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	3310      	adds	r3, #16
 800a69a:	69b9      	ldr	r1, [r7, #24]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f00f fca7 	bl	8019ff0 <sys_mbox_trypost>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ac:	e00a      	b.n	800a6c4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d005      	beq.n	800a6c2 <recv_tcp+0xe6>
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	8bfa      	ldrh	r2, [r7, #30]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	6978      	ldr	r0, [r7, #20]
 800a6c0:	4798      	blx	r3
  }

  return ERR_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3720      	adds	r7, #32
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	0801b860 	.word	0x0801b860
 800a6d0:	0801b93c 	.word	0x0801b93c
 800a6d4:	0801b8a4 	.word	0x0801b8a4
 800a6d8:	0801b960 	.word	0x0801b960
 800a6dc:	0801b980 	.word	0x0801b980
 800a6e0:	0801b998 	.word	0x0801b998
 800a6e4:	0801f1c2 	.word	0x0801f1c2

0800a6e8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d106      	bne.n	800a70a <poll_tcp+0x22>
 800a6fc:	4b29      	ldr	r3, [pc, #164]	; (800a7a4 <poll_tcp+0xbc>)
 800a6fe:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a702:	4929      	ldr	r1, [pc, #164]	; (800a7a8 <poll_tcp+0xc0>)
 800a704:	4829      	ldr	r0, [pc, #164]	; (800a7ac <poll_tcp+0xc4>)
 800a706:	f00f fe5d 	bl	801a3c4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	785b      	ldrb	r3, [r3, #1]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d104      	bne.n	800a71c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a712:	2101      	movs	r1, #1
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 ff7b 	bl	800b610 <lwip_netconn_do_writemore>
 800a71a:	e016      	b.n	800a74a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	785b      	ldrb	r3, [r3, #1]
 800a720:	2b04      	cmp	r3, #4
 800a722:	d112      	bne.n	800a74a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00a      	beq.n	800a742 <poll_tcp+0x5a>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a1b      	ldr	r3, [r3, #32]
 800a730:	7a5b      	ldrb	r3, [r3, #9]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d005      	beq.n	800a742 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	7a5a      	ldrb	r2, [r3, #9]
 800a73c:	3a01      	subs	r2, #1
 800a73e:	b2d2      	uxtb	r2, r2
 800a740:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a742:	2101      	movs	r1, #1
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 fbf7 	bl	800af38 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	7f1b      	ldrb	r3, [r3, #28]
 800a74e:	f003 0310 	and.w	r3, r3, #16
 800a752:	2b00      	cmp	r3, #0
 800a754:	d021      	beq.n	800a79a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d01d      	beq.n	800a79a <poll_tcp+0xb2>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a766:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a76a:	d316      	bcc.n	800a79a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a774:	2b04      	cmp	r3, #4
 800a776:	d810      	bhi.n	800a79a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	7f1b      	ldrb	r3, [r3, #28]
 800a77c:	f023 0310 	bic.w	r3, r3, #16
 800a780:	b2da      	uxtb	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d005      	beq.n	800a79a <poll_tcp+0xb2>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a792:	2200      	movs	r2, #0
 800a794:	2102      	movs	r1, #2
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	0801b860 	.word	0x0801b860
 800a7a8:	0801b9b8 	.word	0x0801b9b8
 800a7ac:	0801b8a4 	.word	0x0801b8a4

0800a7b0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d106      	bne.n	800a7d6 <sent_tcp+0x26>
 800a7c8:	4b20      	ldr	r3, [pc, #128]	; (800a84c <sent_tcp+0x9c>)
 800a7ca:	f240 1293 	movw	r2, #403	; 0x193
 800a7ce:	4920      	ldr	r1, [pc, #128]	; (800a850 <sent_tcp+0xa0>)
 800a7d0:	4820      	ldr	r0, [pc, #128]	; (800a854 <sent_tcp+0xa4>)
 800a7d2:	f00f fdf7 	bl	801a3c4 <iprintf>

  if (conn) {
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d032      	beq.n	800a842 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d104      	bne.n	800a7ee <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	6978      	ldr	r0, [r7, #20]
 800a7e8:	f000 ff12 	bl	800b610 <lwip_netconn_do_writemore>
 800a7ec:	e007      	b.n	800a7fe <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	785b      	ldrb	r3, [r3, #1]
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d103      	bne.n	800a7fe <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	6978      	ldr	r0, [r7, #20]
 800a7fa:	f000 fb9d 	bl	800af38 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d01d      	beq.n	800a842 <sent_tcp+0x92>
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a80e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a812:	d316      	bcc.n	800a842 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	d810      	bhi.n	800a842 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	7f1b      	ldrb	r3, [r3, #28]
 800a824:	f023 0310 	bic.w	r3, r3, #16
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a832:	2b00      	cmp	r3, #0
 800a834:	d005      	beq.n	800a842 <sent_tcp+0x92>
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83a:	88fa      	ldrh	r2, [r7, #6]
 800a83c:	2102      	movs	r1, #2
 800a83e:	6978      	ldr	r0, [r7, #20]
 800a840:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	0801b860 	.word	0x0801b860
 800a850:	0801b9b8 	.word	0x0801b9b8
 800a854:	0801b8a4 	.word	0x0801b8a4

0800a858 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	460b      	mov	r3, r1
 800a862:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d106      	bne.n	800a87c <err_tcp+0x24>
 800a86e:	4b5f      	ldr	r3, [pc, #380]	; (800a9ec <err_tcp+0x194>)
 800a870:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a874:	495e      	ldr	r1, [pc, #376]	; (800a9f0 <err_tcp+0x198>)
 800a876:	485f      	ldr	r0, [pc, #380]	; (800a9f4 <err_tcp+0x19c>)
 800a878:	f00f fda4 	bl	801a3c4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a87c:	f00f fd24 	bl	801a2c8 <sys_arch_protect>
 800a880:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	2200      	movs	r2, #0
 800a886:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	78fa      	ldrb	r2, [r7, #3]
 800a88c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	7f1b      	ldrb	r3, [r3, #28]
 800a892:	f043 0301 	orr.w	r3, r3, #1
 800a896:	b2da      	uxtb	r2, r3
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	785b      	ldrb	r3, [r3, #1]
 800a8a0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a8a8:	69b8      	ldr	r0, [r7, #24]
 800a8aa:	f00f fd1b 	bl	801a2e4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d005      	beq.n	800a8c2 <err_tcp+0x6a>
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	2104      	movs	r1, #4
 800a8be:	69f8      	ldr	r0, [r7, #28]
 800a8c0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d005      	beq.n	800a8d6 <err_tcp+0x7e>
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	69f8      	ldr	r0, [r7, #28]
 800a8d4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d005      	beq.n	800a8ea <err_tcp+0x92>
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2102      	movs	r1, #2
 800a8e6:	69f8      	ldr	r0, [r7, #28]
 800a8e8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a8ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7ff fd8a 	bl	800a408 <lwip_netconn_err_to_msg>
 800a8f4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	3310      	adds	r3, #16
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f00f fbda 	bl	801a0b4 <sys_mbox_valid>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	3310      	adds	r3, #16
 800a90a:	6939      	ldr	r1, [r7, #16]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f00f fb6f 	bl	8019ff0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	3314      	adds	r3, #20
 800a916:	4618      	mov	r0, r3
 800a918:	f00f fbcc 	bl	801a0b4 <sys_mbox_valid>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d005      	beq.n	800a92e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	3314      	adds	r3, #20
 800a926:	6939      	ldr	r1, [r7, #16]
 800a928:	4618      	mov	r0, r3
 800a92a:	f00f fb61 	bl	8019ff0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d005      	beq.n	800a940 <err_tcp+0xe8>
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	2b04      	cmp	r3, #4
 800a938:	d002      	beq.n	800a940 <err_tcp+0xe8>
 800a93a:	7dfb      	ldrb	r3, [r7, #23]
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d143      	bne.n	800a9c8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	7f1b      	ldrb	r3, [r3, #28]
 800a944:	f003 0304 	and.w	r3, r3, #4
 800a948:	2b00      	cmp	r3, #0
 800a94a:	bf14      	ite	ne
 800a94c:	2301      	movne	r3, #1
 800a94e:	2300      	moveq	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	7f1b      	ldrb	r3, [r3, #28]
 800a958:	f023 0304 	bic.w	r3, r3, #4
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d13b      	bne.n	800a9e0 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <err_tcp+0x126>
 800a970:	4b1e      	ldr	r3, [pc, #120]	; (800a9ec <err_tcp+0x194>)
 800a972:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a976:	4920      	ldr	r1, [pc, #128]	; (800a9f8 <err_tcp+0x1a0>)
 800a978:	481e      	ldr	r0, [pc, #120]	; (800a9f4 <err_tcp+0x19c>)
 800a97a:	f00f fd23 	bl	801a3c4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
 800a980:	2b04      	cmp	r3, #4
 800a982:	d104      	bne.n	800a98e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	6a1b      	ldr	r3, [r3, #32]
 800a988:	2200      	movs	r2, #0
 800a98a:	711a      	strb	r2, [r3, #4]
 800a98c:	e003      	b.n	800a996 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	78fa      	ldrb	r2, [r7, #3]
 800a994:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	330c      	adds	r3, #12
 800a99e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a9a0:	68b8      	ldr	r0, [r7, #8]
 800a9a2:	f00f fc15 	bl	801a1d0 <sys_sem_valid>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <err_tcp+0x162>
 800a9ac:	4b0f      	ldr	r3, [pc, #60]	; (800a9ec <err_tcp+0x194>)
 800a9ae:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a9b2:	4912      	ldr	r1, [pc, #72]	; (800a9fc <err_tcp+0x1a4>)
 800a9b4:	480f      	ldr	r0, [pc, #60]	; (800a9f4 <err_tcp+0x19c>)
 800a9b6:	f00f fd05 	bl	801a3c4 <iprintf>
      conn->current_msg = NULL;
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a9c0:	68b8      	ldr	r0, [r7, #8]
 800a9c2:	f00f fbeb 	bl	801a19c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a9c6:	e00b      	b.n	800a9e0 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	6a1b      	ldr	r3, [r3, #32]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d008      	beq.n	800a9e2 <err_tcp+0x18a>
 800a9d0:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <err_tcp+0x194>)
 800a9d2:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a9d6:	490a      	ldr	r1, [pc, #40]	; (800aa00 <err_tcp+0x1a8>)
 800a9d8:	4806      	ldr	r0, [pc, #24]	; (800a9f4 <err_tcp+0x19c>)
 800a9da:	f00f fcf3 	bl	801a3c4 <iprintf>
  }
}
 800a9de:	e000      	b.n	800a9e2 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a9e0:	bf00      	nop
}
 800a9e2:	bf00      	nop
 800a9e4:	3720      	adds	r7, #32
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0801b860 	.word	0x0801b860
 800a9f0:	0801b9b8 	.word	0x0801b9b8
 800a9f4:	0801b8a4 	.word	0x0801b8a4
 800a9f8:	0801b9c8 	.word	0x0801b9c8
 800a9fc:	0801b9e4 	.word	0x0801b9e4
 800aa00:	0801ba00 	.word	0x0801ba00

0800aa04 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800aa12:	6879      	ldr	r1, [r7, #4]
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f005 fda9 	bl	801056c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800aa1a:	490a      	ldr	r1, [pc, #40]	; (800aa44 <setup_tcp+0x40>)
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f005 fdb7 	bl	8010590 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800aa22:	4909      	ldr	r1, [pc, #36]	; (800aa48 <setup_tcp+0x44>)
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f005 fdd5 	bl	80105d4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	4907      	ldr	r1, [pc, #28]	; (800aa4c <setup_tcp+0x48>)
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f005 fe2c 	bl	801068c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800aa34:	4906      	ldr	r1, [pc, #24]	; (800aa50 <setup_tcp+0x4c>)
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f005 fdee 	bl	8010618 <tcp_err>
}
 800aa3c:	bf00      	nop
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	0800a5dd 	.word	0x0800a5dd
 800aa48:	0800a7b1 	.word	0x0800a7b1
 800aa4c:	0800a6e9 	.word	0x0800a6e9
 800aa50:	0800a859 	.word	0x0800a859

0800aa54 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800aa54:	b590      	push	{r4, r7, lr}
 800aa56:	b089      	sub	sp, #36	; 0x24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d102      	bne.n	800aa72 <accept_function+0x1e>
    return ERR_VAL;
 800aa6c:	f06f 0305 	mvn.w	r3, #5
 800aa70:	e0a1      	b.n	800abb6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	3314      	adds	r3, #20
 800aa76:	4618      	mov	r0, r3
 800aa78:	f00f fb1c 	bl	801a0b4 <sys_mbox_valid>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d102      	bne.n	800aa88 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800aa82:	f06f 0305 	mvn.w	r3, #5
 800aa86:	e096      	b.n	800abb6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d11b      	bne.n	800aac6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	f103 0414 	add.w	r4, r3, #20
 800aa94:	f06f 000c 	mvn.w	r0, #12
 800aa98:	f7ff fcb6 	bl	800a408 <lwip_netconn_err_to_msg>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f00f faa5 	bl	8019ff0 <sys_mbox_trypost>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d109      	bne.n	800aac0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d005      	beq.n	800aac0 <accept_function+0x6c>
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	2200      	movs	r2, #0
 800aaba:	2100      	movs	r1, #0
 800aabc:	69f8      	ldr	r0, [r7, #28]
 800aabe:	4798      	blx	r3
    }
    return ERR_VAL;
 800aac0:	f06f 0305 	mvn.w	r3, #5
 800aac4:	e077      	b.n	800abb6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800aac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d006      	beq.n	800aadc <accept_function+0x88>
 800aace:	4b3c      	ldr	r3, [pc, #240]	; (800abc0 <accept_function+0x16c>)
 800aad0:	f240 222a 	movw	r2, #554	; 0x22a
 800aad4:	493b      	ldr	r1, [pc, #236]	; (800abc4 <accept_function+0x170>)
 800aad6:	483c      	ldr	r0, [pc, #240]	; (800abc8 <accept_function+0x174>)
 800aad8:	f00f fc74 	bl	801a3c4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	781a      	ldrb	r2, [r3, #0]
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae4:	4619      	mov	r1, r3
 800aae6:	4610      	mov	r0, r2
 800aae8:	f000 f8f0 	bl	800accc <netconn_alloc>
 800aaec:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d11b      	bne.n	800ab2c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	f103 0414 	add.w	r4, r3, #20
 800aafa:	f06f 000c 	mvn.w	r0, #12
 800aafe:	f7ff fc83 	bl	800a408 <lwip_netconn_err_to_msg>
 800ab02:	4603      	mov	r3, r0
 800ab04:	4619      	mov	r1, r3
 800ab06:	4620      	mov	r0, r4
 800ab08:	f00f fa72 	bl	8019ff0 <sys_mbox_trypost>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d109      	bne.n	800ab26 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d005      	beq.n	800ab26 <accept_function+0xd2>
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2100      	movs	r1, #0
 800ab22:	69f8      	ldr	r0, [r7, #28]
 800ab24:	4798      	blx	r3
    }
    return ERR_MEM;
 800ab26:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2a:	e044      	b.n	800abb6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800ab32:	69b8      	ldr	r0, [r7, #24]
 800ab34:	f7ff ff66 	bl	800aa04 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	3314      	adds	r3, #20
 800ab3c:	69b9      	ldr	r1, [r7, #24]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f00f fa56 	bl	8019ff0 <sys_mbox_trypost>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d02a      	beq.n	800aba0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ab50:	2100      	movs	r1, #0
 800ab52:	6978      	ldr	r0, [r7, #20]
 800ab54:	f005 fd0a 	bl	801056c <tcp_arg>
    tcp_recv(pcb, NULL);
 800ab58:	2100      	movs	r1, #0
 800ab5a:	6978      	ldr	r0, [r7, #20]
 800ab5c:	f005 fd18 	bl	8010590 <tcp_recv>
    tcp_sent(pcb, NULL);
 800ab60:	2100      	movs	r1, #0
 800ab62:	6978      	ldr	r0, [r7, #20]
 800ab64:	f005 fd36 	bl	80105d4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	6978      	ldr	r0, [r7, #20]
 800ab6e:	f005 fd8d 	bl	801068c <tcp_poll>
    tcp_err(pcb, NULL);
 800ab72:	2100      	movs	r1, #0
 800ab74:	6978      	ldr	r0, [r7, #20]
 800ab76:	f005 fd4f 	bl	8010618 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	3310      	adds	r3, #16
 800ab84:	4618      	mov	r0, r3
 800ab86:	f00f fa21 	bl	8019fcc <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	3310      	adds	r3, #16
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f00f faa1 	bl	801a0d6 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ab94:	69b8      	ldr	r0, [r7, #24]
 800ab96:	f000 f907 	bl	800ada8 <netconn_free>
    return ERR_MEM;
 800ab9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9e:	e00a      	b.n	800abb6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d005      	beq.n	800abb4 <accept_function+0x160>
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	2200      	movs	r2, #0
 800abae:	2100      	movs	r1, #0
 800abb0:	69f8      	ldr	r0, [r7, #28]
 800abb2:	4798      	blx	r3
  }

  return ERR_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3724      	adds	r7, #36	; 0x24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd90      	pop	{r4, r7, pc}
 800abbe:	bf00      	nop
 800abc0:	0801b860 	.word	0x0801b860
 800abc4:	0801ba1c 	.word	0x0801ba1c
 800abc8:	0801b8a4 	.word	0x0801b8a4

0800abcc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800abcc:	b590      	push	{r4, r7, lr}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d006      	beq.n	800abf0 <pcb_new+0x24>
 800abe2:	4b2b      	ldr	r3, [pc, #172]	; (800ac90 <pcb_new+0xc4>)
 800abe4:	f240 2265 	movw	r2, #613	; 0x265
 800abe8:	492a      	ldr	r1, [pc, #168]	; (800ac94 <pcb_new+0xc8>)
 800abea:	482b      	ldr	r0, [pc, #172]	; (800ac98 <pcb_new+0xcc>)
 800abec:	f00f fbea 	bl	801a3c4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abfa:	2b10      	cmp	r3, #16
 800abfc:	d022      	beq.n	800ac44 <pcb_new+0x78>
 800abfe:	2b20      	cmp	r3, #32
 800ac00:	d133      	bne.n	800ac6a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681c      	ldr	r4, [r3, #0]
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f00b f80a 	bl	8015c22 <udp_new_ip_type>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d02a      	beq.n	800ac72 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	2b22      	cmp	r3, #34	; 0x22
 800ac24:	d104      	bne.n	800ac30 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6858      	ldr	r0, [r3, #4]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	4917      	ldr	r1, [pc, #92]	; (800ac9c <pcb_new+0xd0>)
 800ac3e:	f00a ff77 	bl	8015b30 <udp_recv>
      }
      break;
 800ac42:	e016      	b.n	800ac72 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681c      	ldr	r4, [r3, #0]
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f005 fc80 	bl	8010550 <tcp_new_ip_type>
 800ac50:	4603      	mov	r3, r0
 800ac52:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00b      	beq.n	800ac76 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7ff fece 	bl	800aa04 <setup_tcp>
      }
      break;
 800ac68:	e005      	b.n	800ac76 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	22fa      	movs	r2, #250	; 0xfa
 800ac6e:	711a      	strb	r2, [r3, #4]
      return;
 800ac70:	e00a      	b.n	800ac88 <pcb_new+0xbc>
      break;
 800ac72:	bf00      	nop
 800ac74:	e000      	b.n	800ac78 <pcb_new+0xac>
      break;
 800ac76:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d102      	bne.n	800ac88 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	22ff      	movs	r2, #255	; 0xff
 800ac86:	711a      	strb	r2, [r3, #4]
  }
}
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd90      	pop	{r4, r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	0801b860 	.word	0x0801b860
 800ac94:	0801ba44 	.word	0x0801ba44
 800ac98:	0801b8a4 	.word	0x0801b8a4
 800ac9c:	0800a4e1 	.word	0x0800a4e1

0800aca0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7ff ff85 	bl	800abcc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800acc2:	bf00      	nop
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	6039      	str	r1, [r7, #0]
 800acd6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800acdc:	2007      	movs	r0, #7
 800acde:	f002 fe75 	bl	800d9cc <memp_malloc>
 800ace2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <netconn_alloc+0x22>
    return NULL;
 800acea:	2300      	movs	r3, #0
 800acec:	e052      	b.n	800ad94 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	79fa      	ldrb	r2, [r7, #7]
 800acf8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad06:	2b10      	cmp	r3, #16
 800ad08:	d004      	beq.n	800ad14 <netconn_alloc+0x48>
 800ad0a:	2b20      	cmp	r3, #32
 800ad0c:	d105      	bne.n	800ad1a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ad0e:	2306      	movs	r3, #6
 800ad10:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ad12:	e00a      	b.n	800ad2a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ad14:	2306      	movs	r3, #6
 800ad16:	617b      	str	r3, [r7, #20]
      break;
 800ad18:	e007      	b.n	800ad2a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ad1a:	4b20      	ldr	r3, [pc, #128]	; (800ad9c <netconn_alloc+0xd0>)
 800ad1c:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ad20:	491f      	ldr	r1, [pc, #124]	; (800ada0 <netconn_alloc+0xd4>)
 800ad22:	4820      	ldr	r0, [pc, #128]	; (800ada4 <netconn_alloc+0xd8>)
 800ad24:	f00f fb4e 	bl	801a3c4 <iprintf>
      goto free_and_return;
 800ad28:	e02f      	b.n	800ad8a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3310      	adds	r3, #16
 800ad2e:	6979      	ldr	r1, [r7, #20]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f00f f931 	bl	8019f98 <sys_mbox_new>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d125      	bne.n	800ad88 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	330c      	adds	r3, #12
 800ad40:	2100      	movs	r1, #0
 800ad42:	4618      	mov	r0, r3
 800ad44:	f00f f9d4 	bl	801a0f0 <sys_sem_new>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d005      	beq.n	800ad5a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3310      	adds	r3, #16
 800ad52:	4618      	mov	r0, r3
 800ad54:	f00f f93a 	bl	8019fcc <sys_mbox_free>
    goto free_and_return;
 800ad58:	e017      	b.n	800ad8a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3314      	adds	r3, #20
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f00f f9b9 	bl	801a0d6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad70:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	683a      	ldr	r2, [r7, #0]
 800ad76:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	7cfa      	ldrb	r2, [r7, #19]
 800ad82:	771a      	strb	r2, [r3, #28]
  return conn;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	e005      	b.n	800ad94 <netconn_alloc+0xc8>
    goto free_and_return;
 800ad88:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ad8a:	68f9      	ldr	r1, [r7, #12]
 800ad8c:	2007      	movs	r0, #7
 800ad8e:	f002 fe6f 	bl	800da70 <memp_free>
  return NULL;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	0801b860 	.word	0x0801b860
 800ada0:	0801ba64 	.word	0x0801ba64
 800ada4:	0801b8a4 	.word	0x0801b8a4

0800ada8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d006      	beq.n	800adc6 <netconn_free+0x1e>
 800adb8:	4b1b      	ldr	r3, [pc, #108]	; (800ae28 <netconn_free+0x80>)
 800adba:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800adbe:	491b      	ldr	r1, [pc, #108]	; (800ae2c <netconn_free+0x84>)
 800adc0:	481b      	ldr	r0, [pc, #108]	; (800ae30 <netconn_free+0x88>)
 800adc2:	f00f faff 	bl	801a3c4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3310      	adds	r3, #16
 800adca:	4618      	mov	r0, r3
 800adcc:	f00f f972 	bl	801a0b4 <sys_mbox_valid>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d006      	beq.n	800ade4 <netconn_free+0x3c>
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <netconn_free+0x80>)
 800add8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800addc:	4915      	ldr	r1, [pc, #84]	; (800ae34 <netconn_free+0x8c>)
 800adde:	4814      	ldr	r0, [pc, #80]	; (800ae30 <netconn_free+0x88>)
 800ade0:	f00f faf0 	bl	801a3c4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	3314      	adds	r3, #20
 800ade8:	4618      	mov	r0, r3
 800adea:	f00f f963 	bl	801a0b4 <sys_mbox_valid>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d006      	beq.n	800ae02 <netconn_free+0x5a>
 800adf4:	4b0c      	ldr	r3, [pc, #48]	; (800ae28 <netconn_free+0x80>)
 800adf6:	f240 3227 	movw	r2, #807	; 0x327
 800adfa:	490f      	ldr	r1, [pc, #60]	; (800ae38 <netconn_free+0x90>)
 800adfc:	480c      	ldr	r0, [pc, #48]	; (800ae30 <netconn_free+0x88>)
 800adfe:	f00f fae1 	bl	801a3c4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	330c      	adds	r3, #12
 800ae06:	4618      	mov	r0, r3
 800ae08:	f00f f9d5 	bl	801a1b6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	330c      	adds	r3, #12
 800ae10:	4618      	mov	r0, r3
 800ae12:	f00f f9ee 	bl	801a1f2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	2007      	movs	r0, #7
 800ae1a:	f002 fe29 	bl	800da70 <memp_free>
}
 800ae1e:	bf00      	nop
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	0801b860 	.word	0x0801b860
 800ae2c:	0801ba8c 	.word	0x0801ba8c
 800ae30:	0801b8a4 	.word	0x0801b8a4
 800ae34:	0801babc 	.word	0x0801babc
 800ae38:	0801baf8 	.word	0x0801baf8

0800ae3c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3310      	adds	r3, #16
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f00f f933 	bl	801a0b4 <sys_mbox_valid>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d02f      	beq.n	800aeb4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ae54:	e018      	b.n	800ae88 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae5e:	2b10      	cmp	r3, #16
 800ae60:	d10e      	bne.n	800ae80 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f107 020f 	add.w	r2, r7, #15
 800ae68:	4611      	mov	r1, r2
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff fafe 	bl	800a46c <lwip_netconn_is_err_msg>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d108      	bne.n	800ae88 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f003 fcdd 	bl	800e838 <pbuf_free>
 800ae7e:	e003      	b.n	800ae88 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 fec0 	bl	800bc08 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3310      	adds	r3, #16
 800ae8c:	f107 0210 	add.w	r2, r7, #16
 800ae90:	4611      	mov	r1, r2
 800ae92:	4618      	mov	r0, r3
 800ae94:	f00f f8f7 	bl	801a086 <sys_arch_mbox_tryfetch>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9e:	d1da      	bne.n	800ae56 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	3310      	adds	r3, #16
 800aea4:	4618      	mov	r0, r3
 800aea6:	f00f f891 	bl	8019fcc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	3310      	adds	r3, #16
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f00f f911 	bl	801a0d6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3314      	adds	r3, #20
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f00f f8fb 	bl	801a0b4 <sys_mbox_valid>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d034      	beq.n	800af2e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800aec4:	e01d      	b.n	800af02 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f107 020e 	add.w	r2, r7, #14
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f7ff facc 	bl	800a46c <lwip_netconn_is_err_msg>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d113      	bne.n	800af02 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800aede:	6978      	ldr	r0, [r7, #20]
 800aee0:	f7ff ffac 	bl	800ae3c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d007      	beq.n	800aefc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f004 fa97 	bl	800f424 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2200      	movs	r2, #0
 800aefa:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800aefc:	6978      	ldr	r0, [r7, #20]
 800aefe:	f7ff ff53 	bl	800ada8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3314      	adds	r3, #20
 800af06:	f107 0210 	add.w	r2, r7, #16
 800af0a:	4611      	mov	r1, r2
 800af0c:	4618      	mov	r0, r3
 800af0e:	f00f f8ba 	bl	801a086 <sys_arch_mbox_tryfetch>
 800af12:	4603      	mov	r3, r0
 800af14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af18:	d1d5      	bne.n	800aec6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3314      	adds	r3, #20
 800af1e:	4618      	mov	r0, r3
 800af20:	f00f f854 	bl	8019fcc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3314      	adds	r3, #20
 800af28:	4618      	mov	r0, r3
 800af2a:	f00f f8d4 	bl	801a0d6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800af2e:	bf00      	nop
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800af44:	2300      	movs	r3, #0
 800af46:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d106      	bne.n	800af5c <lwip_netconn_do_close_internal+0x24>
 800af4e:	4ba1      	ldr	r3, [pc, #644]	; (800b1d4 <lwip_netconn_do_close_internal+0x29c>)
 800af50:	f240 32a2 	movw	r2, #930	; 0x3a2
 800af54:	49a0      	ldr	r1, [pc, #640]	; (800b1d8 <lwip_netconn_do_close_internal+0x2a0>)
 800af56:	48a1      	ldr	r0, [pc, #644]	; (800b1dc <lwip_netconn_do_close_internal+0x2a4>)
 800af58:	f00f fa34 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af64:	2b10      	cmp	r3, #16
 800af66:	d006      	beq.n	800af76 <lwip_netconn_do_close_internal+0x3e>
 800af68:	4b9a      	ldr	r3, [pc, #616]	; (800b1d4 <lwip_netconn_do_close_internal+0x29c>)
 800af6a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800af6e:	499c      	ldr	r1, [pc, #624]	; (800b1e0 <lwip_netconn_do_close_internal+0x2a8>)
 800af70:	489a      	ldr	r0, [pc, #616]	; (800b1dc <lwip_netconn_do_close_internal+0x2a4>)
 800af72:	f00f fa27 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	785b      	ldrb	r3, [r3, #1]
 800af7a:	2b04      	cmp	r3, #4
 800af7c:	d006      	beq.n	800af8c <lwip_netconn_do_close_internal+0x54>
 800af7e:	4b95      	ldr	r3, [pc, #596]	; (800b1d4 <lwip_netconn_do_close_internal+0x29c>)
 800af80:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800af84:	4997      	ldr	r1, [pc, #604]	; (800b1e4 <lwip_netconn_do_close_internal+0x2ac>)
 800af86:	4895      	ldr	r0, [pc, #596]	; (800b1dc <lwip_netconn_do_close_internal+0x2a4>)
 800af88:	f00f fa1c 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d106      	bne.n	800afa2 <lwip_netconn_do_close_internal+0x6a>
 800af94:	4b8f      	ldr	r3, [pc, #572]	; (800b1d4 <lwip_netconn_do_close_internal+0x29c>)
 800af96:	f240 32a5 	movw	r2, #933	; 0x3a5
 800af9a:	4993      	ldr	r1, [pc, #588]	; (800b1e8 <lwip_netconn_do_close_internal+0x2b0>)
 800af9c:	488f      	ldr	r0, [pc, #572]	; (800b1dc <lwip_netconn_do_close_internal+0x2a4>)
 800af9e:	f00f fa11 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d106      	bne.n	800afb8 <lwip_netconn_do_close_internal+0x80>
 800afaa:	4b8a      	ldr	r3, [pc, #552]	; (800b1d4 <lwip_netconn_do_close_internal+0x29c>)
 800afac:	f240 32a6 	movw	r2, #934	; 0x3a6
 800afb0:	498e      	ldr	r1, [pc, #568]	; (800b1ec <lwip_netconn_do_close_internal+0x2b4>)
 800afb2:	488a      	ldr	r0, [pc, #552]	; (800b1dc <lwip_netconn_do_close_internal+0x2a4>)
 800afb4:	f00f fa06 	bl	801a3c4 <iprintf>

  tpcb = conn->pcb.tcp;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	7a1b      	ldrb	r3, [r3, #8]
 800afc4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	f003 0302 	and.w	r3, r3, #2
 800afd4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d102      	bne.n	800afe2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800afdc:	2301      	movs	r3, #1
 800afde:	75bb      	strb	r3, [r7, #22]
 800afe0:	e01f      	b.n	800b022 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00e      	beq.n	800b006 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800afec:	2b05      	cmp	r3, #5
 800afee:	d007      	beq.n	800b000 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800aff4:	2b06      	cmp	r3, #6
 800aff6:	d003      	beq.n	800b000 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800affc:	2b08      	cmp	r3, #8
 800affe:	d102      	bne.n	800b006 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b000:	2301      	movs	r3, #1
 800b002:	75bb      	strb	r3, [r7, #22]
 800b004:	e00d      	b.n	800b022 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b006:	7b7b      	ldrb	r3, [r7, #13]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d008      	beq.n	800b01e <lwip_netconn_do_close_internal+0xe6>
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	8b5b      	ldrh	r3, [r3, #26]
 800b010:	f003 0310 	and.w	r3, r3, #16
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b018:	2301      	movs	r3, #1
 800b01a:	75bb      	strb	r3, [r7, #22]
 800b01c:	e001      	b.n	800b022 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b022:	7dbb      	ldrb	r3, [r7, #22]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d003      	beq.n	800b030 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b028:	2100      	movs	r1, #0
 800b02a:	6938      	ldr	r0, [r7, #16]
 800b02c:	f005 fa9e 	bl	801056c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	7d1b      	ldrb	r3, [r3, #20]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d104      	bne.n	800b042 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b038:	2100      	movs	r1, #0
 800b03a:	6938      	ldr	r0, [r7, #16]
 800b03c:	f005 fb0e 	bl	801065c <tcp_accept>
 800b040:	e01d      	b.n	800b07e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d007      	beq.n	800b058 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b048:	2100      	movs	r1, #0
 800b04a:	6938      	ldr	r0, [r7, #16]
 800b04c:	f005 faa0 	bl	8010590 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b050:	2100      	movs	r1, #0
 800b052:	6938      	ldr	r0, [r7, #16]
 800b054:	f005 fb02 	bl	801065c <tcp_accept>
    }
    if (shut_tx) {
 800b058:	7b7b      	ldrb	r3, [r7, #13]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b05e:	2100      	movs	r1, #0
 800b060:	6938      	ldr	r0, [r7, #16]
 800b062:	f005 fab7 	bl	80105d4 <tcp_sent>
    }
    if (shut_close) {
 800b066:	7dbb      	ldrb	r3, [r7, #22]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d008      	beq.n	800b07e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b06c:	2200      	movs	r2, #0
 800b06e:	2100      	movs	r1, #0
 800b070:	6938      	ldr	r0, [r7, #16]
 800b072:	f005 fb0b 	bl	801068c <tcp_poll>
      tcp_err(tpcb, NULL);
 800b076:	2100      	movs	r1, #0
 800b078:	6938      	ldr	r0, [r7, #16]
 800b07a:	f005 facd 	bl	8010618 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b07e:	7dbb      	ldrb	r3, [r7, #22]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d005      	beq.n	800b090 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b084:	6938      	ldr	r0, [r7, #16]
 800b086:	f004 f889 	bl	800f19c <tcp_close>
 800b08a:	4603      	mov	r3, r0
 800b08c:	75fb      	strb	r3, [r7, #23]
 800b08e:	e007      	b.n	800b0a0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b090:	7bbb      	ldrb	r3, [r7, #14]
 800b092:	7b7a      	ldrb	r2, [r7, #13]
 800b094:	4619      	mov	r1, r3
 800b096:	6938      	ldr	r0, [r7, #16]
 800b098:	f004 f8ac 	bl	800f1f4 <tcp_shutdown>
 800b09c:	4603      	mov	r3, r0
 800b09e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b0a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d102      	bne.n	800b0ae <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	757b      	strb	r3, [r7, #21]
 800b0ac:	e016      	b.n	800b0dc <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b0ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b6:	d10f      	bne.n	800b0d8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	7a5b      	ldrb	r3, [r3, #9]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10c      	bne.n	800b0dc <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b0c6:	7dbb      	ldrb	r3, [r7, #22]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d007      	beq.n	800b0dc <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b0cc:	6938      	ldr	r0, [r7, #16]
 800b0ce:	f004 f9a9 	bl	800f424 <tcp_abort>
          err = ERR_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	75fb      	strb	r3, [r7, #23]
 800b0d6:	e001      	b.n	800b0dc <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b0dc:	7d7b      	ldrb	r3, [r7, #21]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d044      	beq.n	800b16c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	330c      	adds	r3, #12
 800b0ea:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a1b      	ldr	r3, [r3, #32]
 800b0f0:	7dfa      	ldrb	r2, [r7, #23]
 800b0f2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b100:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d129      	bne.n	800b15c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b108:	7dbb      	ldrb	r3, [r7, #22]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00c      	beq.n	800b128 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d005      	beq.n	800b128 <lwip_netconn_do_close_internal+0x1f0>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	2200      	movs	r2, #0
 800b122:	2104      	movs	r1, #4
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	4798      	blx	r3
      }
      if (shut_rx) {
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d009      	beq.n	800b142 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	2b00      	cmp	r3, #0
 800b134:	d005      	beq.n	800b142 <lwip_netconn_do_close_internal+0x20a>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	2200      	movs	r2, #0
 800b13c:	2100      	movs	r1, #0
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	4798      	blx	r3
      }
      if (shut_tx) {
 800b142:	7b7b      	ldrb	r3, [r7, #13]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d009      	beq.n	800b15c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d005      	beq.n	800b15c <lwip_netconn_do_close_internal+0x224>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	2200      	movs	r2, #0
 800b156:	2102      	movs	r1, #2
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b15c:	78fb      	ldrb	r3, [r7, #3]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d002      	beq.n	800b168 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b162:	68b8      	ldr	r0, [r7, #8]
 800b164:	f00f f81a 	bl	801a19c <sys_sem_signal>
    }
    return ERR_OK;
 800b168:	2300      	movs	r3, #0
 800b16a:	e02e      	b.n	800b1ca <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800b16c:	7d7b      	ldrb	r3, [r7, #21]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d11e      	bne.n	800b1b0 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	7d1b      	ldrb	r3, [r3, #20]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d106      	bne.n	800b188 <lwip_netconn_do_close_internal+0x250>
 800b17a:	4b16      	ldr	r3, [pc, #88]	; (800b1d4 <lwip_netconn_do_close_internal+0x29c>)
 800b17c:	f240 4241 	movw	r2, #1089	; 0x441
 800b180:	491b      	ldr	r1, [pc, #108]	; (800b1f0 <lwip_netconn_do_close_internal+0x2b8>)
 800b182:	4816      	ldr	r0, [pc, #88]	; (800b1dc <lwip_netconn_do_close_internal+0x2a4>)
 800b184:	f00f f91e 	bl	801a3c4 <iprintf>
    if (shut_tx) {
 800b188:	7b7b      	ldrb	r3, [r7, #13]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800b18e:	4919      	ldr	r1, [pc, #100]	; (800b1f4 <lwip_netconn_do_close_internal+0x2bc>)
 800b190:	6938      	ldr	r0, [r7, #16]
 800b192:	f005 fa1f 	bl	80105d4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b196:	2201      	movs	r2, #1
 800b198:	4917      	ldr	r1, [pc, #92]	; (800b1f8 <lwip_netconn_do_close_internal+0x2c0>)
 800b19a:	6938      	ldr	r0, [r7, #16]
 800b19c:	f005 fa76 	bl	801068c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b1a0:	4916      	ldr	r1, [pc, #88]	; (800b1fc <lwip_netconn_do_close_internal+0x2c4>)
 800b1a2:	6938      	ldr	r0, [r7, #16]
 800b1a4:	f005 fa38 	bl	8010618 <tcp_err>
    tcp_arg(tpcb, conn);
 800b1a8:	6879      	ldr	r1, [r7, #4]
 800b1aa:	6938      	ldr	r0, [r7, #16]
 800b1ac:	f005 f9de 	bl	801056c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b1b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d106      	bne.n	800b1c6 <lwip_netconn_do_close_internal+0x28e>
 800b1b8:	4b06      	ldr	r3, [pc, #24]	; (800b1d4 <lwip_netconn_do_close_internal+0x29c>)
 800b1ba:	f240 424d 	movw	r2, #1101	; 0x44d
 800b1be:	4910      	ldr	r1, [pc, #64]	; (800b200 <lwip_netconn_do_close_internal+0x2c8>)
 800b1c0:	4806      	ldr	r0, [pc, #24]	; (800b1dc <lwip_netconn_do_close_internal+0x2a4>)
 800b1c2:	f00f f8ff 	bl	801a3c4 <iprintf>
  return err;
 800b1c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0801b860 	.word	0x0801b860
 800b1d8:	0801bb34 	.word	0x0801bb34
 800b1dc:	0801b8a4 	.word	0x0801b8a4
 800b1e0:	0801bb44 	.word	0x0801bb44
 800b1e4:	0801bb64 	.word	0x0801bb64
 800b1e8:	0801bb88 	.word	0x0801bb88
 800b1ec:	0801b9c8 	.word	0x0801b9c8
 800b1f0:	0801bb9c 	.word	0x0801bb9c
 800b1f4:	0800a7b1 	.word	0x0800a7b1
 800b1f8:	0800a6e9 	.word	0x0800a6e9
 800b1fc:	0800a859 	.word	0x0800a859
 800b200:	0801bbc0 	.word	0x0801bbc0

0800b204 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	785b      	ldrb	r3, [r3, #1]
 800b216:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b218:	7afb      	ldrb	r3, [r7, #11]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00d      	beq.n	800b23a <lwip_netconn_do_delconn+0x36>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b228:	2b10      	cmp	r3, #16
 800b22a:	d006      	beq.n	800b23a <lwip_netconn_do_delconn+0x36>
 800b22c:	4b60      	ldr	r3, [pc, #384]	; (800b3b0 <lwip_netconn_do_delconn+0x1ac>)
 800b22e:	f240 425f 	movw	r2, #1119	; 0x45f
 800b232:	4960      	ldr	r1, [pc, #384]	; (800b3b4 <lwip_netconn_do_delconn+0x1b0>)
 800b234:	4860      	ldr	r0, [pc, #384]	; (800b3b8 <lwip_netconn_do_delconn+0x1b4>)
 800b236:	f00f f8c5 	bl	801a3c4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b23a:	7afb      	ldrb	r3, [r7, #11]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d005      	beq.n	800b24c <lwip_netconn_do_delconn+0x48>
 800b240:	7afb      	ldrb	r3, [r7, #11]
 800b242:	2b02      	cmp	r3, #2
 800b244:	d002      	beq.n	800b24c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b246:	7afb      	ldrb	r3, [r7, #11]
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d109      	bne.n	800b260 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b24c:	7afb      	ldrb	r3, [r7, #11]
 800b24e:	2b03      	cmp	r3, #3
 800b250:	d10a      	bne.n	800b268 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	7f1b      	ldrb	r3, [r3, #28]
 800b258:	f003 0304 	and.w	r3, r3, #4
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d103      	bne.n	800b268 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	22fb      	movs	r2, #251	; 0xfb
 800b264:	711a      	strb	r2, [r3, #4]
 800b266:	e097      	b.n	800b398 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b268:	7afb      	ldrb	r3, [r7, #11]
 800b26a:	2b03      	cmp	r3, #3
 800b26c:	d10d      	bne.n	800b28a <lwip_netconn_do_delconn+0x86>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	7f1b      	ldrb	r3, [r3, #28]
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <lwip_netconn_do_delconn+0x86>
 800b27c:	4b4c      	ldr	r3, [pc, #304]	; (800b3b0 <lwip_netconn_do_delconn+0x1ac>)
 800b27e:	f240 427b 	movw	r2, #1147	; 0x47b
 800b282:	494e      	ldr	r1, [pc, #312]	; (800b3bc <lwip_netconn_do_delconn+0x1b8>)
 800b284:	484c      	ldr	r0, [pc, #304]	; (800b3b8 <lwip_netconn_do_delconn+0x1b4>)
 800b286:	f00f f89d 	bl	801a3c4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff fdd1 	bl	800ae3c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d05f      	beq.n	800b364 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2ae:	2b10      	cmp	r3, #16
 800b2b0:	d00e      	beq.n	800b2d0 <lwip_netconn_do_delconn+0xcc>
 800b2b2:	2b20      	cmp	r3, #32
 800b2b4:	d000      	beq.n	800b2b8 <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800b2b6:	e051      	b.n	800b35c <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f00a fc51 	bl	8015b70 <udp_remove>
          break;
 800b2ce:	e045      	b.n	800b35c <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d006      	beq.n	800b2e8 <lwip_netconn_do_delconn+0xe4>
 800b2da:	4b35      	ldr	r3, [pc, #212]	; (800b3b0 <lwip_netconn_do_delconn+0x1ac>)
 800b2dc:	f240 4294 	movw	r2, #1172	; 0x494
 800b2e0:	4937      	ldr	r1, [pc, #220]	; (800b3c0 <lwip_netconn_do_delconn+0x1bc>)
 800b2e2:	4835      	ldr	r0, [pc, #212]	; (800b3b8 <lwip_netconn_do_delconn+0x1b4>)
 800b2e4:	f00f f86e 	bl	801a3c4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2204      	movs	r2, #4
 800b2ee:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2203      	movs	r2, #3
 800b2f4:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2100      	movs	r1, #0
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff fe17 	bl	800af38 <lwip_netconn_do_close_internal>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d04a      	beq.n	800b3a6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	785b      	ldrb	r3, [r3, #1]
 800b316:	2b04      	cmp	r3, #4
 800b318:	d006      	beq.n	800b328 <lwip_netconn_do_delconn+0x124>
 800b31a:	4b25      	ldr	r3, [pc, #148]	; (800b3b0 <lwip_netconn_do_delconn+0x1ac>)
 800b31c:	f240 429a 	movw	r2, #1178	; 0x49a
 800b320:	4928      	ldr	r1, [pc, #160]	; (800b3c4 <lwip_netconn_do_delconn+0x1c0>)
 800b322:	4825      	ldr	r0, [pc, #148]	; (800b3b8 <lwip_netconn_do_delconn+0x1b4>)
 800b324:	f00f f84e 	bl	801a3c4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b328:	4827      	ldr	r0, [pc, #156]	; (800b3c8 <lwip_netconn_do_delconn+0x1c4>)
 800b32a:	f00e ffa0 	bl	801a26e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	330c      	adds	r3, #12
 800b334:	2100      	movs	r1, #0
 800b336:	4618      	mov	r0, r3
 800b338:	f00e feff 	bl	801a13a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b33c:	4822      	ldr	r0, [pc, #136]	; (800b3c8 <lwip_netconn_do_delconn+0x1c4>)
 800b33e:	f00e ff87 	bl	801a250 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	785b      	ldrb	r3, [r3, #1]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d02c      	beq.n	800b3a6 <lwip_netconn_do_delconn+0x1a2>
 800b34c:	4b18      	ldr	r3, [pc, #96]	; (800b3b0 <lwip_netconn_do_delconn+0x1ac>)
 800b34e:	f240 429e 	movw	r2, #1182	; 0x49e
 800b352:	491c      	ldr	r1, [pc, #112]	; (800b3c4 <lwip_netconn_do_delconn+0x1c0>)
 800b354:	4818      	ldr	r0, [pc, #96]	; (800b3b8 <lwip_netconn_do_delconn+0x1b4>)
 800b356:	f00f f835 	bl	801a3c4 <iprintf>
          return;
 800b35a:	e024      	b.n	800b3a6 <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2200      	movs	r2, #0
 800b362:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d007      	beq.n	800b37e <lwip_netconn_do_delconn+0x17a>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	6810      	ldr	r0, [r2, #0]
 800b378:	2200      	movs	r2, #0
 800b37a:	2100      	movs	r1, #0
 800b37c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b384:	2b00      	cmp	r3, #0
 800b386:	d007      	beq.n	800b398 <lwip_netconn_do_delconn+0x194>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	6810      	ldr	r0, [r2, #0]
 800b392:	2200      	movs	r2, #0
 800b394:	2102      	movs	r1, #2
 800b396:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	330c      	adds	r3, #12
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f00e ff16 	bl	801a1d0 <sys_sem_valid>
 800b3a4:	e000      	b.n	800b3a8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800b3a6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0801b860 	.word	0x0801b860
 800b3b4:	0801bbd0 	.word	0x0801bbd0
 800b3b8:	0801b8a4 	.word	0x0801b8a4
 800b3bc:	0801bbe4 	.word	0x0801bbe4
 800b3c0:	0801bc04 	.word	0x0801bc04
 800b3c4:	0801bc20 	.word	0x0801bc20
 800b3c8:	20008398 	.word	0x20008398

0800b3cc <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d026      	beq.n	800b430 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3ec:	2b10      	cmp	r3, #16
 800b3ee:	d00e      	beq.n	800b40e <lwip_netconn_do_bind+0x42>
 800b3f0:	2b20      	cmp	r3, #32
 800b3f2:	d119      	bne.n	800b428 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6858      	ldr	r0, [r3, #4]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	6899      	ldr	r1, [r3, #8]
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	899b      	ldrh	r3, [r3, #12]
 800b402:	461a      	mov	r2, r3
 800b404:	f00a fa84 	bl	8015910 <udp_bind>
 800b408:	4603      	mov	r3, r0
 800b40a:	73fb      	strb	r3, [r7, #15]
        break;
 800b40c:	e012      	b.n	800b434 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	6858      	ldr	r0, [r3, #4]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	6899      	ldr	r1, [r3, #8]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	899b      	ldrh	r3, [r3, #12]
 800b41c:	461a      	mov	r2, r3
 800b41e:	f004 f80d 	bl	800f43c <tcp_bind>
 800b422:	4603      	mov	r3, r0
 800b424:	73fb      	strb	r3, [r7, #15]
        break;
 800b426:	e005      	b.n	800b434 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b428:	23fa      	movs	r3, #250	; 0xfa
 800b42a:	73fb      	strb	r3, [r7, #15]
        break;
 800b42c:	bf00      	nop
 800b42e:	e001      	b.n	800b434 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 800b430:	23fa      	movs	r3, #250	; 0xfa
 800b432:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	7bfa      	ldrb	r2, [r7, #15]
 800b438:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b43a:	bf00      	nop
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d07f      	beq.n	800b55a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b464:	2b10      	cmp	r3, #16
 800b466:	d175      	bne.n	800b554 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	785b      	ldrb	r3, [r3, #1]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d165      	bne.n	800b53e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	7d1b      	ldrb	r3, [r3, #20]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800b47e:	23fa      	movs	r3, #250	; 0xfa
 800b480:	72fb      	strb	r3, [r7, #11]
 800b482:	e06c      	b.n	800b55e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800b484:	23ff      	movs	r3, #255	; 0xff
 800b486:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f107 020b 	add.w	r2, r7, #11
 800b492:	7cf9      	ldrb	r1, [r7, #19]
 800b494:	4618      	mov	r0, r3
 800b496:	f004 f8a3 	bl	800f5e0 <tcp_listen_with_backlog_and_err>
 800b49a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d05d      	beq.n	800b55e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3310      	adds	r3, #16
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f00e fe03 	bl	801a0b4 <sys_mbox_valid>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00b      	beq.n	800b4cc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3310      	adds	r3, #16
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f00e fd86 	bl	8019fcc <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3310      	adds	r3, #16
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f00e fe05 	bl	801a0d6 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3314      	adds	r3, #20
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f00e fdec 	bl	801a0b4 <sys_mbox_valid>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d108      	bne.n	800b4f4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3314      	adds	r3, #20
 800b4e8:	2106      	movs	r1, #6
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f00e fd54 	bl	8019f98 <sys_mbox_new>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800b4f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d118      	bne.n	800b52e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2202      	movs	r2, #2
 800b502:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4619      	mov	r1, r3
 800b518:	4610      	mov	r0, r2
 800b51a:	f005 f827 	bl	801056c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	4912      	ldr	r1, [pc, #72]	; (800b570 <lwip_netconn_do_listen+0x12c>)
 800b526:	4618      	mov	r0, r3
 800b528:	f005 f898 	bl	801065c <tcp_accept>
 800b52c:	e017      	b.n	800b55e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f003 fe34 	bl	800f19c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2200      	movs	r2, #0
 800b53a:	605a      	str	r2, [r3, #4]
 800b53c:	e00f      	b.n	800b55e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	785b      	ldrb	r3, [r3, #1]
 800b544:	2b02      	cmp	r3, #2
 800b546:	d102      	bne.n	800b54e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	72fb      	strb	r3, [r7, #11]
 800b54c:	e007      	b.n	800b55e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800b54e:	23f5      	movs	r3, #245	; 0xf5
 800b550:	72fb      	strb	r3, [r7, #11]
 800b552:	e004      	b.n	800b55e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800b554:	23f0      	movs	r3, #240	; 0xf0
 800b556:	72fb      	strb	r3, [r7, #11]
 800b558:	e001      	b.n	800b55e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800b55a:	23f5      	movs	r3, #245	; 0xf5
 800b55c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800b55e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b566:	bf00      	nop
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	0800aa55 	.word	0x0800aa55

0800b574 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4618      	mov	r0, r3
 800b586:	f7fe ff23 	bl	800a3d0 <netconn_err>
 800b58a:	4603      	mov	r3, r0
 800b58c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b58e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d135      	bne.n	800b602 <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d02e      	beq.n	800b5fe <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5aa:	2b20      	cmp	r3, #32
 800b5ac:	d123      	bne.n	800b5f6 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10c      	bne.n	800b5d2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	f009 ffb8 	bl	801553c <udp_send>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b5d0:	e017      	b.n	800b602 <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6858      	ldr	r0, [r3, #4]
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	6819      	ldr	r1, [r3, #0]
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	f103 0208 	add.w	r2, r3, #8
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	899b      	ldrh	r3, [r3, #12]
 800b5ec:	f009 ffda 	bl	80155a4 <udp_sendto>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73fb      	strb	r3, [r7, #15]
          break;
 800b5f4:	e005      	b.n	800b602 <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b5f6:	23f5      	movs	r3, #245	; 0xf5
 800b5f8:	73fb      	strb	r3, [r7, #15]
          break;
 800b5fa:	bf00      	nop
 800b5fc:	e001      	b.n	800b602 <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 800b5fe:	23f5      	movs	r3, #245	; 0xf5
 800b600:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	7bfa      	ldrb	r2, [r7, #15]
 800b606:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b608:	bf00      	nop
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d106      	bne.n	800b634 <lwip_netconn_do_writemore+0x24>
 800b626:	4b96      	ldr	r3, [pc, #600]	; (800b880 <lwip_netconn_do_writemore+0x270>)
 800b628:	f240 6273 	movw	r2, #1651	; 0x673
 800b62c:	4995      	ldr	r1, [pc, #596]	; (800b884 <lwip_netconn_do_writemore+0x274>)
 800b62e:	4896      	ldr	r0, [pc, #600]	; (800b888 <lwip_netconn_do_writemore+0x278>)
 800b630:	f00e fec8 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	785b      	ldrb	r3, [r3, #1]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d006      	beq.n	800b64a <lwip_netconn_do_writemore+0x3a>
 800b63c:	4b90      	ldr	r3, [pc, #576]	; (800b880 <lwip_netconn_do_writemore+0x270>)
 800b63e:	f240 6274 	movw	r2, #1652	; 0x674
 800b642:	4992      	ldr	r1, [pc, #584]	; (800b88c <lwip_netconn_do_writemore+0x27c>)
 800b644:	4890      	ldr	r0, [pc, #576]	; (800b888 <lwip_netconn_do_writemore+0x278>)
 800b646:	f00e febd 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d106      	bne.n	800b660 <lwip_netconn_do_writemore+0x50>
 800b652:	4b8b      	ldr	r3, [pc, #556]	; (800b880 <lwip_netconn_do_writemore+0x270>)
 800b654:	f240 6275 	movw	r2, #1653	; 0x675
 800b658:	498d      	ldr	r1, [pc, #564]	; (800b890 <lwip_netconn_do_writemore+0x280>)
 800b65a:	488b      	ldr	r0, [pc, #556]	; (800b888 <lwip_netconn_do_writemore+0x278>)
 800b65c:	f00e feb2 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d106      	bne.n	800b676 <lwip_netconn_do_writemore+0x66>
 800b668:	4b85      	ldr	r3, [pc, #532]	; (800b880 <lwip_netconn_do_writemore+0x270>)
 800b66a:	f240 6276 	movw	r2, #1654	; 0x676
 800b66e:	4989      	ldr	r1, [pc, #548]	; (800b894 <lwip_netconn_do_writemore+0x284>)
 800b670:	4885      	ldr	r0, [pc, #532]	; (800b888 <lwip_netconn_do_writemore+0x278>)
 800b672:	f00e fea7 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	699a      	ldr	r2, [r3, #24]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	695b      	ldr	r3, [r3, #20]
 800b682:	429a      	cmp	r2, r3
 800b684:	d306      	bcc.n	800b694 <lwip_netconn_do_writemore+0x84>
 800b686:	4b7e      	ldr	r3, [pc, #504]	; (800b880 <lwip_netconn_do_writemore+0x270>)
 800b688:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800b68c:	4982      	ldr	r1, [pc, #520]	; (800b898 <lwip_netconn_do_writemore+0x288>)
 800b68e:	487e      	ldr	r0, [pc, #504]	; (800b888 <lwip_netconn_do_writemore+0x278>)
 800b690:	f00e fe98 	bl	801a3c4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	899b      	ldrh	r3, [r3, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d106      	bne.n	800b6ac <lwip_netconn_do_writemore+0x9c>
 800b69e:	4b78      	ldr	r3, [pc, #480]	; (800b880 <lwip_netconn_do_writemore+0x270>)
 800b6a0:	f240 6279 	movw	r2, #1657	; 0x679
 800b6a4:	497d      	ldr	r1, [pc, #500]	; (800b89c <lwip_netconn_do_writemore+0x28c>)
 800b6a6:	4878      	ldr	r0, [pc, #480]	; (800b888 <lwip_netconn_do_writemore+0x278>)
 800b6a8:	f00e fe8c 	bl	801a3c4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a1b      	ldr	r3, [r3, #32]
 800b6b0:	7f1b      	ldrb	r3, [r3, #28]
 800b6b2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	7f1b      	ldrb	r3, [r3, #28]
 800b6b8:	f003 0302 	and.w	r3, r3, #2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d104      	bne.n	800b6ca <lwip_netconn_do_writemore+0xba>
 800b6c0:	7ebb      	ldrb	r3, [r7, #26]
 800b6c2:	f003 0304 	and.w	r3, r3, #4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <lwip_netconn_do_writemore+0xbe>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e000      	b.n	800b6d0 <lwip_netconn_do_writemore+0xc0>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a1b      	ldr	r3, [r3, #32]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a1b      	ldr	r3, [r3, #32]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6fc:	d307      	bcc.n	800b70e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b6fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b702:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b704:	7ebb      	ldrb	r3, [r7, #26]
 800b706:	f043 0302 	orr.w	r3, r3, #2
 800b70a:	76bb      	strb	r3, [r7, #26]
 800b70c:	e001      	b.n	800b712 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b71a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b71c:	89fa      	ldrh	r2, [r7, #14]
 800b71e:	8bbb      	ldrh	r3, [r7, #28]
 800b720:	429a      	cmp	r2, r3
 800b722:	d216      	bcs.n	800b752 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b724:	89fb      	ldrh	r3, [r7, #14]
 800b726:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b728:	7e3b      	ldrb	r3, [r7, #24]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00d      	beq.n	800b74a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b72e:	8bbb      	ldrh	r3, [r7, #28]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10e      	bne.n	800b752 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a1b      	ldr	r3, [r3, #32]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d102      	bne.n	800b744 <lwip_netconn_do_writemore+0x134>
 800b73e:	f06f 0306 	mvn.w	r3, #6
 800b742:	e000      	b.n	800b746 <lwip_netconn_do_writemore+0x136>
 800b744:	2300      	movs	r3, #0
 800b746:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b748:	e07d      	b.n	800b846 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b74a:	7ebb      	ldrb	r3, [r7, #26]
 800b74c:	f043 0302 	orr.w	r3, r3, #2
 800b750:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	691a      	ldr	r2, [r3, #16]
 800b758:	8bbb      	ldrh	r3, [r7, #28]
 800b75a:	441a      	add	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a1b      	ldr	r3, [r3, #32]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	429a      	cmp	r2, r3
 800b766:	d906      	bls.n	800b776 <lwip_netconn_do_writemore+0x166>
 800b768:	4b45      	ldr	r3, [pc, #276]	; (800b880 <lwip_netconn_do_writemore+0x270>)
 800b76a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800b76e:	494c      	ldr	r1, [pc, #304]	; (800b8a0 <lwip_netconn_do_writemore+0x290>)
 800b770:	4845      	ldr	r0, [pc, #276]	; (800b888 <lwip_netconn_do_writemore+0x278>)
 800b772:	f00e fe27 	bl	801a3c4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b776:	8bbb      	ldrh	r3, [r7, #28]
 800b778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d103      	bne.n	800b788 <lwip_netconn_do_writemore+0x178>
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b786:	d209      	bcs.n	800b79c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b78c:	8bba      	ldrh	r2, [r7, #28]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d10b      	bne.n	800b7aa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	899b      	ldrh	r3, [r3, #12]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d906      	bls.n	800b7aa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b79c:	2301      	movs	r3, #1
 800b79e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b7a0:	7ebb      	ldrb	r3, [r7, #26]
 800b7a2:	f043 0302 	orr.w	r3, r3, #2
 800b7a6:	76bb      	strb	r3, [r7, #26]
 800b7a8:	e001      	b.n	800b7ae <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6858      	ldr	r0, [r3, #4]
 800b7b2:	7ebb      	ldrb	r3, [r7, #26]
 800b7b4:	8bba      	ldrh	r2, [r7, #28]
 800b7b6:	6979      	ldr	r1, [r7, #20]
 800b7b8:	f007 fe14 	bl	80133e4 <tcp_write>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b7c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d12c      	bne.n	800b822 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a1b      	ldr	r3, [r3, #32]
 800b7cc:	6999      	ldr	r1, [r3, #24]
 800b7ce:	8bba      	ldrh	r2, [r7, #28]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a1b      	ldr	r3, [r3, #32]
 800b7d4:	440a      	add	r2, r1
 800b7d6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a1b      	ldr	r3, [r3, #32]
 800b7dc:	6919      	ldr	r1, [r3, #16]
 800b7de:	8bba      	ldrh	r2, [r7, #28]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a1b      	ldr	r3, [r3, #32]
 800b7e4:	440a      	add	r2, r1
 800b7e6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	691a      	ldr	r2, [r3, #16]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d113      	bne.n	800b822 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	899a      	ldrh	r2, [r3, #12]
 800b800:	3a01      	subs	r2, #1
 800b802:	b292      	uxth	r2, r2
 800b804:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	899b      	ldrh	r3, [r3, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d008      	beq.n	800b822 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a1b      	ldr	r3, [r3, #32]
 800b814:	689a      	ldr	r2, [r3, #8]
 800b816:	3208      	adds	r2, #8
 800b818:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	2200      	movs	r2, #0
 800b820:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b822:	7e7b      	ldrb	r3, [r7, #25]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d004      	beq.n	800b832 <lwip_netconn_do_writemore+0x222>
 800b828:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f43f af50 	beq.w	800b6d2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b832:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d004      	beq.n	800b844 <lwip_netconn_do_writemore+0x234>
 800b83a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b842:	d146      	bne.n	800b8d2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b844:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b846:	7e3b      	ldrb	r3, [r7, #24]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d02b      	beq.n	800b8a4 <lwip_netconn_do_writemore+0x294>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a1b      	ldr	r3, [r3, #32]
 800b850:	699a      	ldr	r2, [r3, #24]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d223      	bcs.n	800b8a4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b860:	2b00      	cmp	r3, #0
 800b862:	d005      	beq.n	800b870 <lwip_netconn_do_writemore+0x260>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b868:	2200      	movs	r2, #0
 800b86a:	2103      	movs	r1, #3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	7f1b      	ldrb	r3, [r3, #28]
 800b874:	f043 0310 	orr.w	r3, r3, #16
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	771a      	strb	r2, [r3, #28]
 800b87e:	e028      	b.n	800b8d2 <lwip_netconn_do_writemore+0x2c2>
 800b880:	0801b860 	.word	0x0801b860
 800b884:	0801b9b8 	.word	0x0801b9b8
 800b888:	0801b8a4 	.word	0x0801b8a4
 800b88c:	0801bcc0 	.word	0x0801bcc0
 800b890:	0801b9c8 	.word	0x0801b9c8
 800b894:	0801bce0 	.word	0x0801bce0
 800b898:	0801bcf8 	.word	0x0801bcf8
 800b89c:	0801bd38 	.word	0x0801bd38
 800b8a0:	0801bd60 	.word	0x0801bd60
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b8ac:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b8b0:	d305      	bcc.n	800b8be <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b8ba:	2b04      	cmp	r3, #4
 800b8bc:	d909      	bls.n	800b8d2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d005      	beq.n	800b8d2 <lwip_netconn_do_writemore+0x2c2>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2103      	movs	r1, #3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b8d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d11d      	bne.n	800b916 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	699a      	ldr	r2, [r3, #24]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	695b      	ldr	r3, [r3, #20]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d002      	beq.n	800b8f0 <lwip_netconn_do_writemore+0x2e0>
 800b8ea:	7e3b      	ldrb	r3, [r7, #24]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f008 fb5f 	bl	8013fbc <tcp_output>
 800b8fe:	4603      	mov	r3, r0
 800b900:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b902:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b906:	f113 0f04 	cmn.w	r3, #4
 800b90a:	d12c      	bne.n	800b966 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b90c:	7b3b      	ldrb	r3, [r7, #12]
 800b90e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b910:	2301      	movs	r3, #1
 800b912:	76fb      	strb	r3, [r7, #27]
 800b914:	e027      	b.n	800b966 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b916:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91e:	d120      	bne.n	800b962 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	4618      	mov	r0, r3
 800b926:	f008 fb49 	bl	8013fbc <tcp_output>
 800b92a:	4603      	mov	r3, r0
 800b92c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b92e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b932:	f113 0f04 	cmn.w	r3, #4
 800b936:	d104      	bne.n	800b942 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b938:	7b7b      	ldrb	r3, [r7, #13]
 800b93a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b93c:	2301      	movs	r3, #1
 800b93e:	76fb      	strb	r3, [r7, #27]
 800b940:	e011      	b.n	800b966 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b942:	7e3b      	ldrb	r3, [r7, #24]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00e      	beq.n	800b966 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a1b      	ldr	r3, [r3, #32]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d102      	bne.n	800b958 <lwip_netconn_do_writemore+0x348>
 800b952:	f06f 0306 	mvn.w	r3, #6
 800b956:	e000      	b.n	800b95a <lwip_netconn_do_writemore+0x34a>
 800b958:	2300      	movs	r3, #0
 800b95a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b95c:	2301      	movs	r3, #1
 800b95e:	76fb      	strb	r3, [r7, #27]
 800b960:	e001      	b.n	800b966 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b962:	2301      	movs	r3, #1
 800b964:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b966:	7efb      	ldrb	r3, [r7, #27]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d015      	beq.n	800b998 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	330c      	adds	r3, #12
 800b974:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	7ffa      	ldrb	r2, [r7, #31]
 800b97c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b98a:	78fb      	ldrb	r3, [r7, #3]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d006      	beq.n	800b99e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b990:	68b8      	ldr	r0, [r7, #8]
 800b992:	f00e fc03 	bl	801a19c <sys_sem_signal>
 800b996:	e002      	b.n	800b99e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b998:	f04f 33ff 	mov.w	r3, #4294967295
 800b99c:	e000      	b.n	800b9a0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3720      	adds	r7, #32
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fe fd09 	bl	800a3d0 <netconn_err>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b9c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d166      	bne.n	800ba98 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9d4:	2b10      	cmp	r3, #16
 800b9d6:	d15d      	bne.n	800ba94 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	785b      	ldrb	r3, [r3, #1]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b9e2:	23fb      	movs	r3, #251	; 0xfb
 800b9e4:	73fb      	strb	r3, [r7, #15]
 800b9e6:	e057      	b.n	800ba98 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d04d      	beq.n	800ba8e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d006      	beq.n	800ba12 <lwip_netconn_do_write+0x6a>
 800ba04:	4b28      	ldr	r3, [pc, #160]	; (800baa8 <lwip_netconn_do_write+0x100>)
 800ba06:	f240 7223 	movw	r2, #1827	; 0x723
 800ba0a:	4928      	ldr	r1, [pc, #160]	; (800baac <lwip_netconn_do_write+0x104>)
 800ba0c:	4828      	ldr	r0, [pc, #160]	; (800bab0 <lwip_netconn_do_write+0x108>)
 800ba0e:	f00e fcd9 	bl	801a3c4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d106      	bne.n	800ba28 <lwip_netconn_do_write+0x80>
 800ba1a:	4b23      	ldr	r3, [pc, #140]	; (800baa8 <lwip_netconn_do_write+0x100>)
 800ba1c:	f240 7224 	movw	r2, #1828	; 0x724
 800ba20:	4924      	ldr	r1, [pc, #144]	; (800bab4 <lwip_netconn_do_write+0x10c>)
 800ba22:	4823      	ldr	r0, [pc, #140]	; (800bab0 <lwip_netconn_do_write+0x108>)
 800ba24:	f00e fcce 	bl	801a3c4 <iprintf>
        msg->conn->current_msg = msg;
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2100      	movs	r1, #0
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7ff fdea 	bl	800b610 <lwip_netconn_do_writemore>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d02e      	beq.n	800baa0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	785b      	ldrb	r3, [r3, #1]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d006      	beq.n	800ba5a <lwip_netconn_do_write+0xb2>
 800ba4c:	4b16      	ldr	r3, [pc, #88]	; (800baa8 <lwip_netconn_do_write+0x100>)
 800ba4e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ba52:	4919      	ldr	r1, [pc, #100]	; (800bab8 <lwip_netconn_do_write+0x110>)
 800ba54:	4816      	ldr	r0, [pc, #88]	; (800bab0 <lwip_netconn_do_write+0x108>)
 800ba56:	f00e fcb5 	bl	801a3c4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ba5a:	4818      	ldr	r0, [pc, #96]	; (800babc <lwip_netconn_do_write+0x114>)
 800ba5c:	f00e fc07 	bl	801a26e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	330c      	adds	r3, #12
 800ba66:	2100      	movs	r1, #0
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f00e fb66 	bl	801a13a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ba6e:	4813      	ldr	r0, [pc, #76]	; (800babc <lwip_netconn_do_write+0x114>)
 800ba70:	f00e fbee 	bl	801a250 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d110      	bne.n	800baa0 <lwip_netconn_do_write+0xf8>
 800ba7e:	4b0a      	ldr	r3, [pc, #40]	; (800baa8 <lwip_netconn_do_write+0x100>)
 800ba80:	f240 722c 	movw	r2, #1836	; 0x72c
 800ba84:	490c      	ldr	r1, [pc, #48]	; (800bab8 <lwip_netconn_do_write+0x110>)
 800ba86:	480a      	ldr	r0, [pc, #40]	; (800bab0 <lwip_netconn_do_write+0x108>)
 800ba88:	f00e fc9c 	bl	801a3c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ba8c:	e008      	b.n	800baa0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ba8e:	23f5      	movs	r3, #245	; 0xf5
 800ba90:	73fb      	strb	r3, [r7, #15]
 800ba92:	e001      	b.n	800ba98 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800ba94:	23fa      	movs	r3, #250	; 0xfa
 800ba96:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	7bfa      	ldrb	r2, [r7, #15]
 800ba9c:	711a      	strb	r2, [r3, #4]
 800ba9e:	e000      	b.n	800baa2 <lwip_netconn_do_write+0xfa>
        return;
 800baa0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	0801b860 	.word	0x0801b860
 800baac:	0801bc04 	.word	0x0801bc04
 800bab0:	0801b8a4 	.word	0x0801b8a4
 800bab4:	0801bd8c 	.word	0x0801bd8c
 800bab8:	0801bc20 	.word	0x0801bc20
 800babc:	20008398 	.word	0x20008398

0800bac0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d06c      	beq.n	800bbb0 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	7c1b      	ldrb	r3, [r3, #16]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d007      	beq.n	800baee <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	6812      	ldr	r2, [r2, #0]
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	e006      	b.n	800bafc <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	6852      	ldr	r2, [r2, #4]
 800bafa:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb0c:	2b10      	cmp	r3, #16
 800bb0e:	d021      	beq.n	800bb54 <lwip_netconn_do_getaddr+0x94>
 800bb10:	2b20      	cmp	r3, #32
 800bb12:	d144      	bne.n	800bb9e <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	7c1b      	ldrb	r3, [r3, #16]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d007      	beq.n	800bb2c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	8a52      	ldrh	r2, [r2, #18]
 800bb28:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800bb2a:	e044      	b.n	800bbb6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	7c1b      	ldrb	r3, [r3, #16]
 800bb34:	f003 0304 	and.w	r3, r3, #4
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d103      	bne.n	800bb44 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	22f5      	movs	r2, #245	; 0xf5
 800bb40:	711a      	strb	r2, [r3, #4]
        break;
 800bb42:	e038      	b.n	800bbb6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	685a      	ldr	r2, [r3, #4]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	8a92      	ldrh	r2, [r2, #20]
 800bb50:	801a      	strh	r2, [r3, #0]
        break;
 800bb52:	e030      	b.n	800bbb6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	7c1b      	ldrb	r3, [r3, #16]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10f      	bne.n	800bb7c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d005      	beq.n	800bb74 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	7d1b      	ldrb	r3, [r3, #20]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d103      	bne.n	800bb7c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	22f5      	movs	r2, #245	; 0xf5
 800bb78:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800bb7a:	e01c      	b.n	800bbb6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	7c1b      	ldrb	r3, [r3, #16]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d004      	beq.n	800bb8e <lwip_netconn_do_getaddr+0xce>
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	8adb      	ldrh	r3, [r3, #22]
 800bb8c:	e003      	b.n	800bb96 <lwip_netconn_do_getaddr+0xd6>
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	8b1b      	ldrh	r3, [r3, #24]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	68d2      	ldr	r2, [r2, #12]
 800bb9a:	8013      	strh	r3, [r2, #0]
        break;
 800bb9c:	e00b      	b.n	800bbb6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800bb9e:	4b08      	ldr	r3, [pc, #32]	; (800bbc0 <lwip_netconn_do_getaddr+0x100>)
 800bba0:	f240 727d 	movw	r2, #1917	; 0x77d
 800bba4:	4907      	ldr	r1, [pc, #28]	; (800bbc4 <lwip_netconn_do_getaddr+0x104>)
 800bba6:	4808      	ldr	r0, [pc, #32]	; (800bbc8 <lwip_netconn_do_getaddr+0x108>)
 800bba8:	f00e fc0c 	bl	801a3c4 <iprintf>
        break;
 800bbac:	bf00      	nop
 800bbae:	e002      	b.n	800bbb6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	22f5      	movs	r2, #245	; 0xf5
 800bbb4:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bbb6:	bf00      	nop
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	0801b860 	.word	0x0801b860
 800bbc4:	0801bda0 	.word	0x0801bda0
 800bbc8:	0801b8a4 	.word	0x0801b8a4

0800bbcc <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800bbd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dc04      	bgt.n	800bbe8 <err_to_errno+0x1c>
 800bbde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbe2:	425b      	negs	r3, r3
 800bbe4:	2b10      	cmp	r3, #16
 800bbe6:	dd01      	ble.n	800bbec <err_to_errno+0x20>
    return EIO;
 800bbe8:	2305      	movs	r3, #5
 800bbea:	e005      	b.n	800bbf8 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800bbec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbf0:	425b      	negs	r3, r3
 800bbf2:	4a04      	ldr	r2, [pc, #16]	; (800bc04 <err_to_errno+0x38>)
 800bbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	0801f1c4 	.word	0x0801f1c4

0800bc08 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d013      	beq.n	800bc3e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00b      	beq.n	800bc36 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f002 fe08 	bl	800e838 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	605a      	str	r2, [r3, #4]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	685a      	ldr	r2, [r3, #4]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800bc36:	6879      	ldr	r1, [r7, #4]
 800bc38:	2006      	movs	r0, #6
 800bc3a:	f001 ff19 	bl	800da70 <memp_free>
  }
}
 800bc3e:	bf00      	nop
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
	...

0800bc48 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <netbuf_free+0x1c>
 800bc56:	4b0d      	ldr	r3, [pc, #52]	; (800bc8c <netbuf_free+0x44>)
 800bc58:	2281      	movs	r2, #129	; 0x81
 800bc5a:	490d      	ldr	r1, [pc, #52]	; (800bc90 <netbuf_free+0x48>)
 800bc5c:	480d      	ldr	r0, [pc, #52]	; (800bc94 <netbuf_free+0x4c>)
 800bc5e:	f00e fbb1 	bl	801a3c4 <iprintf>
 800bc62:	e00f      	b.n	800bc84 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d004      	beq.n	800bc76 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f002 fde1 	bl	800e838 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	605a      	str	r2, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	0801bdb8 	.word	0x0801bdb8
 800bc90:	0801be54 	.word	0x0801be54
 800bc94:	0801be08 	.word	0x0801be08

0800bc98 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	4613      	mov	r3, r2
 800bca4:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d108      	bne.n	800bcbe <netbuf_ref+0x26>
 800bcac:	4b1c      	ldr	r3, [pc, #112]	; (800bd20 <netbuf_ref+0x88>)
 800bcae:	2299      	movs	r2, #153	; 0x99
 800bcb0:	491c      	ldr	r1, [pc, #112]	; (800bd24 <netbuf_ref+0x8c>)
 800bcb2:	481d      	ldr	r0, [pc, #116]	; (800bd28 <netbuf_ref+0x90>)
 800bcb4:	f00e fb86 	bl	801a3c4 <iprintf>
 800bcb8:	f06f 030f 	mvn.w	r3, #15
 800bcbc:	e02b      	b.n	800bd16 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d004      	beq.n	800bcd0 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f002 fdb4 	bl	800e838 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800bcd0:	2241      	movs	r2, #65	; 0x41
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	2036      	movs	r0, #54	; 0x36
 800bcd6:	f002 facf 	bl	800e278 <pbuf_alloc>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d105      	bne.n	800bcf4 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800bcee:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf2:	e010      	b.n	800bd16 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	88fa      	ldrh	r2, [r7, #6]
 800bd02:	811a      	strh	r2, [r3, #8]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	6812      	ldr	r2, [r2, #0]
 800bd08:	891b      	ldrh	r3, [r3, #8]
 800bd0a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	0801bdb8 	.word	0x0801bdb8
 800bd24:	0801be70 	.word	0x0801be70
 800bd28:	0801be08 	.word	0x0801be08

0800bd2c <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	db02      	blt.n	800bd44 <tryget_socket_unconn_nouse+0x18>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2b03      	cmp	r3, #3
 800bd42:	dd01      	ble.n	800bd48 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800bd44:	2300      	movs	r3, #0
 800bd46:	e003      	b.n	800bd50 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	011b      	lsls	r3, r3, #4
 800bd4c:	4a03      	ldr	r2, [pc, #12]	; (800bd5c <tryget_socket_unconn_nouse+0x30>)
 800bd4e:	4413      	add	r3, r2
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	20004b24 	.word	0x20004b24

0800bd60 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff ffdf 	bl	800bd2c <tryget_socket_unconn_nouse>
 800bd6e:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800bd70:	68fb      	ldr	r3, [r7, #12]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7ff ffec 	bl	800bd60 <tryget_socket_unconn>
 800bd88:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d005      	beq.n	800bd9c <tryget_socket+0x22>
    if (sock->conn) {
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <tryget_socket+0x22>
      return sock;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	e000      	b.n	800bd9e <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
	...

0800bda8 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f7ff ffe2 	bl	800bd7a <tryget_socket>
 800bdb6:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d104      	bne.n	800bdc8 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800bdbe:	4b05      	ldr	r3, [pc, #20]	; (800bdd4 <get_socket+0x2c>)
 800bdc0:	2209      	movs	r2, #9
 800bdc2:	601a      	str	r2, [r3, #0]
    return NULL;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	e000      	b.n	800bdca <get_socket+0x22>
  }
  return sock;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	2000bb14 	.word	0x2000bb14

0800bdd8 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800bde2:	2300      	movs	r3, #0
 800bde4:	60fb      	str	r3, [r7, #12]
 800bde6:	e052      	b.n	800be8e <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800bde8:	f00e fa6e 	bl	801a2c8 <sys_arch_protect>
 800bdec:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800bdee:	4a2c      	ldr	r2, [pc, #176]	; (800bea0 <alloc_socket+0xc8>)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	011b      	lsls	r3, r3, #4
 800bdf4:	4413      	add	r3, r2
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d142      	bne.n	800be82 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800bdfc:	4a28      	ldr	r2, [pc, #160]	; (800bea0 <alloc_socket+0xc8>)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	011b      	lsls	r3, r3, #4
 800be02:	4413      	add	r3, r2
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800be08:	68b8      	ldr	r0, [r7, #8]
 800be0a:	f00e fa6b 	bl	801a2e4 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800be0e:	4a24      	ldr	r2, [pc, #144]	; (800bea0 <alloc_socket+0xc8>)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	011b      	lsls	r3, r3, #4
 800be14:	4413      	add	r3, r2
 800be16:	3304      	adds	r3, #4
 800be18:	2200      	movs	r2, #0
 800be1a:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800be1c:	4a20      	ldr	r2, [pc, #128]	; (800bea0 <alloc_socket+0xc8>)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	011b      	lsls	r3, r3, #4
 800be22:	4413      	add	r3, r2
 800be24:	330e      	adds	r3, #14
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d006      	beq.n	800be3a <alloc_socket+0x62>
 800be2c:	4b1d      	ldr	r3, [pc, #116]	; (800bea4 <alloc_socket+0xcc>)
 800be2e:	f240 220e 	movw	r2, #526	; 0x20e
 800be32:	491d      	ldr	r1, [pc, #116]	; (800bea8 <alloc_socket+0xd0>)
 800be34:	481d      	ldr	r0, [pc, #116]	; (800beac <alloc_socket+0xd4>)
 800be36:	f00e fac5 	bl	801a3c4 <iprintf>
      sockets[i].rcvevent   = 0;
 800be3a:	4a19      	ldr	r2, [pc, #100]	; (800bea0 <alloc_socket+0xc8>)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	011b      	lsls	r3, r3, #4
 800be40:	4413      	add	r3, r2
 800be42:	3308      	adds	r3, #8
 800be44:	2200      	movs	r2, #0
 800be46:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be50:	2b10      	cmp	r3, #16
 800be52:	d102      	bne.n	800be5a <alloc_socket+0x82>
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d001      	beq.n	800be5e <alloc_socket+0x86>
 800be5a:	2301      	movs	r3, #1
 800be5c:	e000      	b.n	800be60 <alloc_socket+0x88>
 800be5e:	2300      	movs	r3, #0
 800be60:	b299      	uxth	r1, r3
 800be62:	4a0f      	ldr	r2, [pc, #60]	; (800bea0 <alloc_socket+0xc8>)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	011b      	lsls	r3, r3, #4
 800be68:	4413      	add	r3, r2
 800be6a:	330a      	adds	r3, #10
 800be6c:	460a      	mov	r2, r1
 800be6e:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800be70:	4a0b      	ldr	r2, [pc, #44]	; (800bea0 <alloc_socket+0xc8>)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	011b      	lsls	r3, r3, #4
 800be76:	4413      	add	r3, r2
 800be78:	330c      	adds	r3, #12
 800be7a:	2200      	movs	r2, #0
 800be7c:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	e00a      	b.n	800be98 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800be82:	68b8      	ldr	r0, [r7, #8]
 800be84:	f00e fa2e 	bl	801a2e4 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	3301      	adds	r3, #1
 800be8c:	60fb      	str	r3, [r7, #12]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b03      	cmp	r3, #3
 800be92:	dda9      	ble.n	800bde8 <alloc_socket+0x10>
  }
  return -1;
 800be94:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20004b24 	.word	0x20004b24
 800bea4:	0801bf50 	.word	0x0801bf50
 800bea8:	0801bf84 	.word	0x0801bf84
 800beac:	0801bfa4 	.word	0x0801bfa4

0800beb0 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	6852      	ldr	r2, [r2, #4]
 800bec4:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2200      	movs	r2, #0
 800bed8:	601a      	str	r2, [r3, #0]
  return 1;
 800beda:	2301      	movs	r3, #1
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3714      	adds	r7, #20
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00d      	beq.n	800bf18 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d005      	beq.n	800bf0e <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f002 fc96 	bl	800e838 <pbuf_free>
 800bf0c:	e004      	b.n	800bf18 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff fe78 	bl	800bc08 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800bf1e:	68b8      	ldr	r0, [r7, #8]
 800bf20:	f7fd fff8 	bl	8009f14 <netconn_delete>
  }
}
 800bf24:	bf00      	nop
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800bf36:	f00e f9c7 	bl	801a2c8 <sys_arch_protect>
 800bf3a:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800bf3c:	f107 0308 	add.w	r3, r7, #8
 800bf40:	f107 020c 	add.w	r2, r7, #12
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff ffb2 	bl	800beb0 <free_socket_locked>
 800bf4c:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800bf4e:	6978      	ldr	r0, [r7, #20]
 800bf50:	f00e f9c8 	bl	801a2e4 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d006      	beq.n	800bf68 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f107 0208 	add.w	r2, r7, #8
 800bf60:	4619      	mov	r1, r3
 800bf62:	6838      	ldr	r0, [r7, #0]
 800bf64:	f7ff ffc0 	bl	800bee8 <free_socket_free_elements>
  }
}
 800bf68:	bf00      	nop
 800bf6a:	3718      	adds	r7, #24
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800bf70:	b590      	push	{r4, r7, lr}
 800bf72:	b099      	sub	sp, #100	; 0x64
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f7ff ff11 	bl	800bda8 <get_socket>
 800bf86:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800bf88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d102      	bne.n	800bf94 <lwip_accept+0x24>
    return -1;
 800bf8e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf92:	e0f8      	b.n	800c186 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800bf94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe f88a 	bl	800a0b8 <netconn_accept>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800bfaa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d02c      	beq.n	800c00c <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800bfb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfbc:	2b10      	cmp	r3, #16
 800bfbe:	d008      	beq.n	800bfd2 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800bfc0:	235f      	movs	r3, #95	; 0x5f
 800bfc2:	633b      	str	r3, [r7, #48]	; 0x30
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d01d      	beq.n	800c006 <lwip_accept+0x96>
 800bfca:	4a71      	ldr	r2, [pc, #452]	; (800c190 <lwip_accept+0x220>)
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	e019      	b.n	800c006 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800bfd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bfd6:	f113 0f0f 	cmn.w	r3, #15
 800bfda:	d108      	bne.n	800bfee <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800bfdc:	2316      	movs	r3, #22
 800bfde:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00f      	beq.n	800c006 <lwip_accept+0x96>
 800bfe6:	4a6a      	ldr	r2, [pc, #424]	; (800c190 <lwip_accept+0x220>)
 800bfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	e00b      	b.n	800c006 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800bfee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff fdea 	bl	800bbcc <err_to_errno>
 800bff8:	63b8      	str	r0, [r7, #56]	; 0x38
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <lwip_accept+0x96>
 800c000:	4a63      	ldr	r2, [pc, #396]	; (800c190 <lwip_accept+0x220>)
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800c006:	f04f 33ff 	mov.w	r3, #4294967295
 800c00a:	e0bc      	b.n	800c186 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800c00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d106      	bne.n	800c020 <lwip_accept+0xb0>
 800c012:	4b60      	ldr	r3, [pc, #384]	; (800c194 <lwip_accept+0x224>)
 800c014:	f240 228b 	movw	r2, #651	; 0x28b
 800c018:	495f      	ldr	r1, [pc, #380]	; (800c198 <lwip_accept+0x228>)
 800c01a:	4860      	ldr	r0, [pc, #384]	; (800c19c <lwip_accept+0x22c>)
 800c01c:	f00e f9d2 	bl	801a3c4 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c022:	2101      	movs	r1, #1
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff fed7 	bl	800bdd8 <alloc_socket>
 800c02a:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800c02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c032:	d10e      	bne.n	800c052 <lwip_accept+0xe2>
    netconn_delete(newconn);
 800c034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c036:	4618      	mov	r0, r3
 800c038:	f7fd ff6c 	bl	8009f14 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800c03c:	2317      	movs	r3, #23
 800c03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <lwip_accept+0xdc>
 800c046:	4a52      	ldr	r2, [pc, #328]	; (800c190 <lwip_accept+0x220>)
 800c048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c04c:	f04f 33ff 	mov.w	r3, #4294967295
 800c050:	e099      	b.n	800c186 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800c052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c054:	2b00      	cmp	r3, #0
 800c056:	db02      	blt.n	800c05e <lwip_accept+0xee>
 800c058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c05a:	2b03      	cmp	r3, #3
 800c05c:	dd06      	ble.n	800c06c <lwip_accept+0xfc>
 800c05e:	4b4d      	ldr	r3, [pc, #308]	; (800c194 <lwip_accept+0x224>)
 800c060:	f44f 7225 	mov.w	r2, #660	; 0x294
 800c064:	494e      	ldr	r1, [pc, #312]	; (800c1a0 <lwip_accept+0x230>)
 800c066:	484d      	ldr	r0, [pc, #308]	; (800c19c <lwip_accept+0x22c>)
 800c068:	f00e f9ac 	bl	801a3c4 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800c06c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c06e:	011b      	lsls	r3, r3, #4
 800c070:	4a4c      	ldr	r2, [pc, #304]	; (800c1a4 <lwip_accept+0x234>)
 800c072:	4413      	add	r3, r2
 800c074:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800c076:	f00e f927 	bl	801a2c8 <sys_arch_protect>
 800c07a:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07e:	699b      	ldr	r3, [r3, #24]
 800c080:	b21b      	sxth	r3, r3
 800c082:	43db      	mvns	r3, r3
 800c084:	b21b      	sxth	r3, r3
 800c086:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c08c:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800c08e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c090:	f00e f928 	bl	801a2e4 <sys_arch_unprotect>

  if (newconn->callback) {
 800c094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d012      	beq.n	800c0c2 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800c09c:	4842      	ldr	r0, [pc, #264]	; (800c1a8 <lwip_accept+0x238>)
 800c09e:	f00e f8d7 	bl	801a250 <sys_mutex_lock>
    while (recvevent > 0) {
 800c0a2:	e008      	b.n	800c0b6 <lwip_accept+0x146>
      recvevent--;
 800c0a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800c0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	4798      	blx	r3
    while (recvevent > 0) {
 800c0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	dcf3      	bgt.n	800c0a4 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800c0bc:	483a      	ldr	r0, [pc, #232]	; (800c1a8 <lwip_accept+0x238>)
 800c0be:	f00e f8d6 	bl	801a26e <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d055      	beq.n	800c174 <lwip_accept+0x204>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d052      	beq.n	800c174 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800c0ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0d0:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800c0d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c0d8:	2300      	movs	r3, #0
 800c0da:	f7fd ff37 	bl	8009f4c <netconn_getaddr>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800c0e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d016      	beq.n	800c11a <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800c0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fd ff10 	bl	8009f14 <netconn_delete>
      free_socket(nsock, 1);
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c0f8:	f7ff ff18 	bl	800bf2c <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800c0fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c100:	4618      	mov	r0, r3
 800c102:	f7ff fd63 	bl	800bbcc <err_to_errno>
 800c106:	6478      	str	r0, [r7, #68]	; 0x44
 800c108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <lwip_accept+0x1a4>
 800c10e:	4a20      	ldr	r2, [pc, #128]	; (800c190 <lwip_accept+0x220>)
 800c110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c112:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800c114:	f04f 33ff 	mov.w	r3, #4294967295
 800c118:	e035      	b.n	800c186 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800c11a:	f107 0314 	add.w	r3, r7, #20
 800c11e:	2210      	movs	r2, #16
 800c120:	701a      	strb	r2, [r3, #0]
 800c122:	f107 0314 	add.w	r3, r7, #20
 800c126:	2202      	movs	r2, #2
 800c128:	705a      	strb	r2, [r3, #1]
 800c12a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c12c:	f107 0414 	add.w	r4, r7, #20
 800c130:	4618      	mov	r0, r3
 800c132:	f000 ff95 	bl	800d060 <lwip_htons>
 800c136:	4603      	mov	r3, r0
 800c138:	8063      	strh	r3, [r4, #2]
 800c13a:	f107 0314 	add.w	r3, r7, #20
 800c13e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c140:	605a      	str	r2, [r3, #4]
 800c142:	f107 0314 	add.w	r3, r7, #20
 800c146:	3308      	adds	r3, #8
 800c148:	2208      	movs	r2, #8
 800c14a:	2100      	movs	r1, #0
 800c14c:	4618      	mov	r0, r3
 800c14e:	f00e f930 	bl	801a3b2 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	7d3a      	ldrb	r2, [r7, #20]
 800c158:	4293      	cmp	r3, r2
 800c15a:	d903      	bls.n	800c164 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800c15c:	7d3b      	ldrb	r3, [r7, #20]
 800c15e:	461a      	mov	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	f107 0314 	add.w	r3, r7, #20
 800c16c:	4619      	mov	r1, r3
 800c16e:	68b8      	ldr	r0, [r7, #8]
 800c170:	f00e f914 	bl	801a39c <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800c174:	2300      	movs	r3, #0
 800c176:	643b      	str	r3, [r7, #64]	; 0x40
 800c178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d002      	beq.n	800c184 <lwip_accept+0x214>
 800c17e:	4a04      	ldr	r2, [pc, #16]	; (800c190 <lwip_accept+0x220>)
 800c180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c182:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800c184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800c186:	4618      	mov	r0, r3
 800c188:	3764      	adds	r7, #100	; 0x64
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd90      	pop	{r4, r7, pc}
 800c18e:	bf00      	nop
 800c190:	2000bb14 	.word	0x2000bb14
 800c194:	0801bf50 	.word	0x0801bf50
 800c198:	0801bfcc 	.word	0x0801bfcc
 800c19c:	0801bfa4 	.word	0x0801bfa4
 800c1a0:	0801bfdc 	.word	0x0801bfdc
 800c1a4:	20004b24 	.word	0x20004b24
 800c1a8:	20008398 	.word	0x20008398

0800c1ac <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b08a      	sub	sp, #40	; 0x28
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f7ff fdf5 	bl	800bda8 <get_socket>
 800c1be:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d102      	bne.n	800c1cc <lwip_bind+0x20>
    return -1;
 800c1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ca:	e051      	b.n	800c270 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b10      	cmp	r3, #16
 800c1d0:	d108      	bne.n	800c1e4 <lwip_bind+0x38>
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	785b      	ldrb	r3, [r3, #1]
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	d104      	bne.n	800c1e4 <lwip_bind+0x38>
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d014      	beq.n	800c20e <lwip_bind+0x62>
 800c1e4:	4b24      	ldr	r3, [pc, #144]	; (800c278 <lwip_bind+0xcc>)
 800c1e6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c1ea:	4924      	ldr	r1, [pc, #144]	; (800c27c <lwip_bind+0xd0>)
 800c1ec:	4824      	ldr	r0, [pc, #144]	; (800c280 <lwip_bind+0xd4>)
 800c1ee:	f00e f8e9 	bl	801a3c4 <iprintf>
 800c1f2:	f06f 000f 	mvn.w	r0, #15
 800c1f6:	f7ff fce9 	bl	800bbcc <err_to_errno>
 800c1fa:	6178      	str	r0, [r7, #20]
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <lwip_bind+0x5c>
 800c202:	4a20      	ldr	r2, [pc, #128]	; (800c284 <lwip_bind+0xd8>)
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	f04f 33ff 	mov.w	r3, #4294967295
 800c20c:	e030      	b.n	800c270 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	613b      	str	r3, [r7, #16]
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	885b      	ldrh	r3, [r3, #2]
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 ff21 	bl	800d060 <lwip_htons>
 800c21e:	4603      	mov	r3, r0
 800c220:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c228:	f107 0110 	add.w	r1, r7, #16
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fd fedf 	bl	8009ff0 <netconn_bind>
 800c232:	4603      	mov	r3, r0
 800c234:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800c238:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00e      	beq.n	800c25e <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800c240:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c244:	4618      	mov	r0, r3
 800c246:	f7ff fcc1 	bl	800bbcc <err_to_errno>
 800c24a:	61b8      	str	r0, [r7, #24]
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <lwip_bind+0xac>
 800c252:	4a0c      	ldr	r2, [pc, #48]	; (800c284 <lwip_bind+0xd8>)
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c258:	f04f 33ff 	mov.w	r3, #4294967295
 800c25c:	e008      	b.n	800c270 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800c25e:	2300      	movs	r3, #0
 800c260:	61fb      	str	r3, [r7, #28]
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <lwip_bind+0xc2>
 800c268:	4a06      	ldr	r2, [pc, #24]	; (800c284 <lwip_bind+0xd8>)
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3728      	adds	r7, #40	; 0x28
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	0801bf50 	.word	0x0801bf50
 800c27c:	0801bff4 	.word	0x0801bff4
 800c280:	0801bfa4 	.word	0x0801bfa4
 800c284:	2000bb14 	.word	0x2000bb14

0800c288 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff fd88 	bl	800bda8 <get_socket>
 800c298:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d102      	bne.n	800c2a6 <lwip_listen+0x1e>
    return -1;
 800c2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a4:	e03e      	b.n	800c324 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	2bfe      	cmp	r3, #254	; 0xfe
 800c2aa:	dc03      	bgt.n	800c2b4 <lwip_listen+0x2c>
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c2b2:	e000      	b.n	800c2b6 <lwip_listen+0x2e>
 800c2b4:	23ff      	movs	r3, #255	; 0xff
 800c2b6:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	b2d2      	uxtb	r2, r2
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fd fecc 	bl	800a060 <netconn_listen_with_backlog>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800c2cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d01e      	beq.n	800c312 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2de:	2b10      	cmp	r3, #16
 800c2e0:	d008      	beq.n	800c2f4 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800c2e2:	235f      	movs	r3, #95	; 0x5f
 800c2e4:	60fb      	str	r3, [r7, #12]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00f      	beq.n	800c30c <lwip_listen+0x84>
 800c2ec:	4a0f      	ldr	r2, [pc, #60]	; (800c32c <lwip_listen+0xa4>)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	e00b      	b.n	800c30c <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800c2f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fc67 	bl	800bbcc <err_to_errno>
 800c2fe:	6138      	str	r0, [r7, #16]
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <lwip_listen+0x84>
 800c306:	4a09      	ldr	r2, [pc, #36]	; (800c32c <lwip_listen+0xa4>)
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800c30c:	f04f 33ff 	mov.w	r3, #4294967295
 800c310:	e008      	b.n	800c324 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800c312:	2300      	movs	r3, #0
 800c314:	617b      	str	r3, [r7, #20]
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <lwip_listen+0x9a>
 800c31c:	4a03      	ldr	r2, [pc, #12]	; (800c32c <lwip_listen+0xa4>)
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3720      	adds	r7, #32
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	2000bb14 	.word	0x2000bb14

0800c330 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b08a      	sub	sp, #40	; 0x28
 800c334:	af02      	add	r7, sp, #8
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f7ff fd32 	bl	800bda8 <get_socket>
 800c344:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d102      	bne.n	800c352 <lwip_send+0x22>
    return -1;
 800c34c:	f04f 33ff 	mov.w	r3, #4294967295
 800c350:	e046      	b.n	800c3e0 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c35c:	2b10      	cmp	r3, #16
 800c35e:	d00b      	beq.n	800c378 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800c360:	2300      	movs	r3, #0
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	2300      	movs	r3, #0
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	68b9      	ldr	r1, [r7, #8]
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f000 f83c 	bl	800c3ec <lwip_sendto>
 800c374:	4603      	mov	r3, r0
 800c376:	e033      	b.n	800c3e0 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <lwip_send+0x56>
 800c382:	2203      	movs	r2, #3
 800c384:	e000      	b.n	800c388 <lwip_send+0x58>
 800c386:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	105b      	asrs	r3, r3, #1
 800c38c:	b25b      	sxtb	r3, r3
 800c38e:	f003 0304 	and.w	r3, r3, #4
 800c392:	b25b      	sxtb	r3, r3
 800c394:	4313      	orrs	r3, r2
 800c396:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800c398:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	6818      	ldr	r0, [r3, #0]
 800c3a2:	7efa      	ldrb	r2, [r7, #27]
 800c3a4:	f107 0310 	add.w	r3, r7, #16
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	68b9      	ldr	r1, [r7, #8]
 800c3b0:	f7fd ff3c 	bl	800a22c <netconn_write_partly>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800c3b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7ff fc05 	bl	800bbcc <err_to_errno>
 800c3c2:	6178      	str	r0, [r7, #20]
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d002      	beq.n	800c3d0 <lwip_send+0xa0>
 800c3ca:	4a07      	ldr	r2, [pc, #28]	; (800c3e8 <lwip_send+0xb8>)
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800c3d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d101      	bne.n	800c3dc <lwip_send+0xac>
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	e001      	b.n	800c3e0 <lwip_send+0xb0>
 800c3dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3720      	adds	r7, #32
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	2000bb14 	.word	0x2000bb14

0800c3ec <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b08e      	sub	sp, #56	; 0x38
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
 800c3f8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7ff fcd4 	bl	800bda8 <get_socket>
 800c400:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800c402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c404:	2b00      	cmp	r3, #0
 800c406:	d102      	bne.n	800c40e <lwip_sendto+0x22>
    return -1;
 800c408:	f04f 33ff 	mov.w	r3, #4294967295
 800c40c:	e093      	b.n	800c536 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c418:	2b10      	cmp	r3, #16
 800c41a:	d107      	bne.n	800c42c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	68b9      	ldr	r1, [r7, #8]
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f7ff ff84 	bl	800c330 <lwip_send>
 800c428:	4603      	mov	r3, r0
 800c42a:	e084      	b.n	800c536 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c432:	d30a      	bcc.n	800c44a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800c434:	235a      	movs	r3, #90	; 0x5a
 800c436:	623b      	str	r3, [r7, #32]
 800c438:	6a3b      	ldr	r3, [r7, #32]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <lwip_sendto+0x58>
 800c43e:	4a40      	ldr	r2, [pc, #256]	; (800c540 <lwip_sendto+0x154>)
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c444:	f04f 33ff 	mov.w	r3, #4294967295
 800c448:	e075      	b.n	800c536 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800c44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c450:	2b00      	cmp	r3, #0
 800c452:	d102      	bne.n	800c45a <lwip_sendto+0x6e>
 800c454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c456:	2b00      	cmp	r3, #0
 800c458:	d023      	beq.n	800c4a2 <lwip_sendto+0xb6>
 800c45a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c45c:	2b10      	cmp	r3, #16
 800c45e:	d10b      	bne.n	800c478 <lwip_sendto+0x8c>
 800c460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c462:	2b00      	cmp	r3, #0
 800c464:	d008      	beq.n	800c478 <lwip_sendto+0x8c>
 800c466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c468:	785b      	ldrb	r3, [r3, #1]
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d104      	bne.n	800c478 <lwip_sendto+0x8c>
 800c46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c470:	f003 0303 	and.w	r3, r3, #3
 800c474:	2b00      	cmp	r3, #0
 800c476:	d014      	beq.n	800c4a2 <lwip_sendto+0xb6>
 800c478:	4b32      	ldr	r3, [pc, #200]	; (800c544 <lwip_sendto+0x158>)
 800c47a:	f240 6255 	movw	r2, #1621	; 0x655
 800c47e:	4932      	ldr	r1, [pc, #200]	; (800c548 <lwip_sendto+0x15c>)
 800c480:	4832      	ldr	r0, [pc, #200]	; (800c54c <lwip_sendto+0x160>)
 800c482:	f00d ff9f 	bl	801a3c4 <iprintf>
 800c486:	f06f 000f 	mvn.w	r0, #15
 800c48a:	f7ff fb9f 	bl	800bbcc <err_to_errno>
 800c48e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	2b00      	cmp	r3, #0
 800c494:	d002      	beq.n	800c49c <lwip_sendto+0xb0>
 800c496:	4a2a      	ldr	r2, [pc, #168]	; (800c540 <lwip_sendto+0x154>)
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a0:	e049      	b.n	800c536 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	617b      	str	r3, [r7, #20]
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800c4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00a      	beq.n	800c4c6 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800c4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	61bb      	str	r3, [r7, #24]
 800c4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b8:	885b      	ldrh	r3, [r3, #2]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fdd0 	bl	800d060 <lwip_htons>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	86bb      	strh	r3, [r7, #52]	; 0x34
 800c4c4:	e003      	b.n	800c4ce <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800c4ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c4d0:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800c4d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c4d4:	f107 0310 	add.w	r3, r7, #16
 800c4d8:	68b9      	ldr	r1, [r7, #8]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7ff fbdc 	bl	800bc98 <netbuf_ref>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800c4e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10a      	bne.n	800c504 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f107 0210 	add.w	r2, r7, #16
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fd fe69 	bl	800a1d0 <netconn_send>
 800c4fe:	4603      	mov	r3, r0
 800c500:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800c504:	f107 0310 	add.w	r3, r7, #16
 800c508:	4618      	mov	r0, r3
 800c50a:	f7ff fb9d 	bl	800bc48 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800c50e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c512:	4618      	mov	r0, r3
 800c514:	f7ff fb5a 	bl	800bbcc <err_to_errno>
 800c518:	6278      	str	r0, [r7, #36]	; 0x24
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d002      	beq.n	800c526 <lwip_sendto+0x13a>
 800c520:	4a07      	ldr	r2, [pc, #28]	; (800c540 <lwip_sendto+0x154>)
 800c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c524:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800c526:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <lwip_sendto+0x146>
 800c52e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c530:	e001      	b.n	800c536 <lwip_sendto+0x14a>
 800c532:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c536:	4618      	mov	r0, r3
 800c538:	3738      	adds	r7, #56	; 0x38
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	2000bb14 	.word	0x2000bb14
 800c544:	0801bf50 	.word	0x0801bf50
 800c548:	0801c230 	.word	0x0801c230
 800c54c:	0801bfa4 	.word	0x0801bfa4

0800c550 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d00d      	beq.n	800c57e <lwip_socket+0x2e>
 800c562:	2b03      	cmp	r3, #3
 800c564:	d002      	beq.n	800c56c <lwip_socket+0x1c>
 800c566:	2b01      	cmp	r3, #1
 800c568:	d016      	beq.n	800c598 <lwip_socket+0x48>
 800c56a:	e01c      	b.n	800c5a6 <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	4a21      	ldr	r2, [pc, #132]	; (800c5f8 <lwip_socket+0xa8>)
 800c572:	4619      	mov	r1, r3
 800c574:	2040      	movs	r0, #64	; 0x40
 800c576:	f7fd fc2f 	bl	8009dd8 <netconn_new_with_proto_and_callback>
 800c57a:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c57c:	e019      	b.n	800c5b2 <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b88      	cmp	r3, #136	; 0x88
 800c582:	d101      	bne.n	800c588 <lwip_socket+0x38>
 800c584:	2321      	movs	r3, #33	; 0x21
 800c586:	e000      	b.n	800c58a <lwip_socket+0x3a>
 800c588:	2320      	movs	r3, #32
 800c58a:	4a1b      	ldr	r2, [pc, #108]	; (800c5f8 <lwip_socket+0xa8>)
 800c58c:	2100      	movs	r1, #0
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fd fc22 	bl	8009dd8 <netconn_new_with_proto_and_callback>
 800c594:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c596:	e00c      	b.n	800c5b2 <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800c598:	4a17      	ldr	r2, [pc, #92]	; (800c5f8 <lwip_socket+0xa8>)
 800c59a:	2100      	movs	r1, #0
 800c59c:	2010      	movs	r0, #16
 800c59e:	f7fd fc1b 	bl	8009dd8 <netconn_new_with_proto_and_callback>
 800c5a2:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c5a4:	e005      	b.n	800c5b2 <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800c5a6:	4b15      	ldr	r3, [pc, #84]	; (800c5fc <lwip_socket+0xac>)
 800c5a8:	2216      	movs	r2, #22
 800c5aa:	601a      	str	r2, [r3, #0]
      return -1;
 800c5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b0:	e01e      	b.n	800c5f0 <lwip_socket+0xa0>
  }

  if (!conn) {
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d105      	bne.n	800c5c4 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800c5b8:	4b10      	ldr	r3, [pc, #64]	; (800c5fc <lwip_socket+0xac>)
 800c5ba:	2269      	movs	r2, #105	; 0x69
 800c5bc:	601a      	str	r2, [r3, #0]
    return -1;
 800c5be:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c2:	e015      	b.n	800c5f0 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	6978      	ldr	r0, [r7, #20]
 800c5c8:	f7ff fc06 	bl	800bdd8 <alloc_socket>
 800c5cc:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d4:	d108      	bne.n	800c5e8 <lwip_socket+0x98>
    netconn_delete(conn);
 800c5d6:	6978      	ldr	r0, [r7, #20]
 800c5d8:	f7fd fc9c 	bl	8009f14 <netconn_delete>
    set_errno(ENFILE);
 800c5dc:	4b07      	ldr	r3, [pc, #28]	; (800c5fc <lwip_socket+0xac>)
 800c5de:	2217      	movs	r2, #23
 800c5e0:	601a      	str	r2, [r3, #0]
    return -1;
 800c5e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5e6:	e003      	b.n	800c5f0 <lwip_socket+0xa0>
  }
  conn->socket = i;
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800c5ee:	693b      	ldr	r3, [r7, #16]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	0800c689 	.word	0x0800c689
 800c5fc:	2000bb14 	.word	0x2000bb14

0800c600 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c600:	b480      	push	{r7}
 800c602:	b087      	sub	sp, #28
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c60e:	2300      	movs	r3, #0
 800c610:	617b      	str	r3, [r7, #20]
 800c612:	e02c      	b.n	800c66e <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	695a      	ldr	r2, [r3, #20]
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	00db      	lsls	r3, r3, #3
 800c61c:	4413      	add	r3, r2
 800c61e:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	429a      	cmp	r2, r3
 800c628:	d11e      	bne.n	800c668 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d009      	beq.n	800c644 <lwip_poll_should_wake+0x44>
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c636:	b29b      	uxth	r3, r3
 800c638:	f003 0301 	and.w	r3, r3, #1
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <lwip_poll_should_wake+0x44>
        return 1;
 800c640:	2301      	movs	r3, #1
 800c642:	e01a      	b.n	800c67a <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d009      	beq.n	800c65e <lwip_poll_should_wake+0x5e>
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c650:	b29b      	uxth	r3, r3
 800c652:	f003 0302 	and.w	r3, r3, #2
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <lwip_poll_should_wake+0x5e>
        return 1;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e00d      	b.n	800c67a <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800c65e:	6a3b      	ldr	r3, [r7, #32]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800c664:	2301      	movs	r3, #1
 800c666:	e008      	b.n	800c67a <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	3301      	adds	r3, #1
 800c66c:	617b      	str	r3, [r7, #20]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	429a      	cmp	r2, r3
 800c676:	d3cd      	bcc.n	800c614 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	371c      	adds	r7, #28
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
	...

0800c688 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b08a      	sub	sp, #40	; 0x28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	70fb      	strb	r3, [r7, #3]
 800c694:	4613      	mov	r3, r2
 800c696:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f000 80a4 	beq.w	800c7e8 <event_callback+0x160>
    s = conn->socket;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	699b      	ldr	r3, [r3, #24]
 800c6a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	da18      	bge.n	800c6de <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800c6ac:	f00d fe0c 	bl	801a2c8 <sys_arch_protect>
 800c6b0:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	da0b      	bge.n	800c6d2 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800c6ba:	78fb      	ldrb	r3, [r7, #3]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d104      	bne.n	800c6ca <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	699b      	ldr	r3, [r3, #24]
 800c6c4:	1e5a      	subs	r2, r3, #1
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800c6ca:	69f8      	ldr	r0, [r7, #28]
 800c6cc:	f00d fe0a 	bl	801a2e4 <sys_arch_unprotect>
        return;
 800c6d0:	e08d      	b.n	800c7ee <event_callback+0x166>
      }
      s = conn->socket;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	699b      	ldr	r3, [r3, #24]
 800c6d6:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800c6d8:	69f8      	ldr	r0, [r7, #28]
 800c6da:	f00d fe03 	bl	801a2e4 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800c6de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6e0:	f7ff fb62 	bl	800bda8 <get_socket>
 800c6e4:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d07f      	beq.n	800c7ec <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800c6f0:	f00d fdea 	bl	801a2c8 <sys_arch_protect>
 800c6f4:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800c6f6:	78fb      	ldrb	r3, [r7, #3]
 800c6f8:	2b04      	cmp	r3, #4
 800c6fa:	d83e      	bhi.n	800c77a <event_callback+0xf2>
 800c6fc:	a201      	add	r2, pc, #4	; (adr r2, 800c704 <event_callback+0x7c>)
 800c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c702:	bf00      	nop
 800c704:	0800c719 	.word	0x0800c719
 800c708:	0800c73b 	.word	0x0800c73b
 800c70c:	0800c753 	.word	0x0800c753
 800c710:	0800c767 	.word	0x0800c767
 800c714:	0800c773 	.word	0x0800c773
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c71e:	b29b      	uxth	r3, r3
 800c720:	3301      	adds	r3, #1
 800c722:	b29b      	uxth	r3, r3
 800c724:	b21a      	sxth	r2, r3
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c730:	2b01      	cmp	r3, #1
 800c732:	dd2a      	ble.n	800c78a <event_callback+0x102>
        check_waiters = 0;
 800c734:	2300      	movs	r3, #0
 800c736:	623b      	str	r3, [r7, #32]
      }
      break;
 800c738:	e027      	b.n	800c78a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c740:	b29b      	uxth	r3, r3
 800c742:	3b01      	subs	r3, #1
 800c744:	b29b      	uxth	r3, r3
 800c746:	b21a      	sxth	r2, r3
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	623b      	str	r3, [r7, #32]
      break;
 800c750:	e01c      	b.n	800c78c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	895b      	ldrh	r3, [r3, #10]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d001      	beq.n	800c75e <event_callback+0xd6>
        check_waiters = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	2201      	movs	r2, #1
 800c762:	815a      	strh	r2, [r3, #10]
      break;
 800c764:	e012      	b.n	800c78c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	2200      	movs	r2, #0
 800c76a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800c76c:	2300      	movs	r3, #0
 800c76e:	623b      	str	r3, [r7, #32]
      break;
 800c770:	e00c      	b.n	800c78c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	2201      	movs	r2, #1
 800c776:	819a      	strh	r2, [r3, #12]
      break;
 800c778:	e008      	b.n	800c78c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800c77a:	4b1e      	ldr	r3, [pc, #120]	; (800c7f4 <event_callback+0x16c>)
 800c77c:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800c780:	491d      	ldr	r1, [pc, #116]	; (800c7f8 <event_callback+0x170>)
 800c782:	481e      	ldr	r0, [pc, #120]	; (800c7fc <event_callback+0x174>)
 800c784:	f00d fe1e 	bl	801a3c4 <iprintf>
      break;
 800c788:	e000      	b.n	800c78c <event_callback+0x104>
      break;
 800c78a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	7b9b      	ldrb	r3, [r3, #14]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d025      	beq.n	800c7e0 <event_callback+0x158>
 800c794:	6a3b      	ldr	r3, [r7, #32]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d022      	beq.n	800c7e0 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	bfcc      	ite	gt
 800c7a4:	2301      	movgt	r3, #1
 800c7a6:	2300      	movle	r3, #0
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800c7ac:	69bb      	ldr	r3, [r7, #24]
 800c7ae:	895b      	ldrh	r3, [r3, #10]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	bf14      	ite	ne
 800c7b4:	2301      	movne	r3, #1
 800c7b6:	2300      	moveq	r3, #0
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	899b      	ldrh	r3, [r3, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	bf14      	ite	ne
 800c7c4:	2301      	movne	r3, #1
 800c7c6:	2300      	moveq	r3, #0
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800c7cc:	69f8      	ldr	r0, [r7, #28]
 800c7ce:	f00d fd89 	bl	801a2e4 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	6979      	ldr	r1, [r7, #20]
 800c7d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7da:	f000 f811 	bl	800c800 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c7de:	e006      	b.n	800c7ee <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c7e0:	69f8      	ldr	r0, [r7, #28]
 800c7e2:	f00d fd7f 	bl	801a2e4 <sys_arch_unprotect>
 800c7e6:	e002      	b.n	800c7ee <event_callback+0x166>
    return;
 800c7e8:	bf00      	nop
 800c7ea:	e000      	b.n	800c7ee <event_callback+0x166>
      return;
 800c7ec:	bf00      	nop
  }
  done_socket(sock);
}
 800c7ee:	3728      	adds	r7, #40	; 0x28
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	0801bf50 	.word	0x0801bf50
 800c7f8:	0801c2cc 	.word	0x0801c2cc
 800c7fc:	0801bfa4 	.word	0x0801bfa4

0800c800 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b088      	sub	sp, #32
 800c804:	af02      	add	r7, sp, #8
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]
 800c80c:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c80e:	4b3d      	ldr	r3, [pc, #244]	; (800c904 <select_check_waiters+0x104>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	617b      	str	r3, [r7, #20]
 800c814:	e06f      	b.n	800c8f6 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	69db      	ldr	r3, [r3, #28]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d168      	bne.n	800c8f0 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	695b      	ldr	r3, [r3, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d009      	beq.n	800c83e <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	68f9      	ldr	r1, [r7, #12]
 800c834:	6978      	ldr	r0, [r7, #20]
 800c836:	f7ff fee3 	bl	800c600 <lwip_poll_should_wake>
 800c83a:	6138      	str	r0, [r7, #16]
 800c83c:	e04d      	b.n	800c8da <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d014      	beq.n	800c86e <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d010      	beq.n	800c86e <select_check_waiters+0x6e>
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	0952      	lsrs	r2, r2, #5
 800c854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	f002 021f 	and.w	r2, r2, #31
 800c85e:	2101      	movs	r1, #1
 800c860:	fa01 f202 	lsl.w	r2, r1, r2
 800c864:	4013      	ands	r3, r2
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <select_check_waiters+0x6e>
            do_signal = 1;
 800c86a:	2301      	movs	r3, #1
 800c86c:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d017      	beq.n	800c8a4 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d114      	bne.n	800c8a4 <select_check_waiters+0xa4>
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d010      	beq.n	800c8a4 <select_check_waiters+0xa4>
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	0952      	lsrs	r2, r2, #5
 800c88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	f002 021f 	and.w	r2, r2, #31
 800c894:	2101      	movs	r1, #1
 800c896:	fa01 f202 	lsl.w	r2, r1, r2
 800c89a:	4013      	ands	r3, r2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d001      	beq.n	800c8a4 <select_check_waiters+0xa4>
            do_signal = 1;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d017      	beq.n	800c8da <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d114      	bne.n	800c8da <select_check_waiters+0xda>
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d010      	beq.n	800c8da <select_check_waiters+0xda>
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	0952      	lsrs	r2, r2, #5
 800c8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	f002 021f 	and.w	r2, r2, #31
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	fa01 f202 	lsl.w	r2, r1, r2
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d001      	beq.n	800c8da <select_check_waiters+0xda>
            do_signal = 1;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d007      	beq.n	800c8f0 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	3320      	adds	r3, #32
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f00d fc56 	bl	801a19c <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	617b      	str	r3, [r7, #20]
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d18c      	bne.n	800c816 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800c8fc:	bf00      	nop
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	20004b64 	.word	0x20004b64

0800c908 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2b08      	cmp	r3, #8
 800c914:	d006      	beq.n	800c924 <lwip_sockopt_to_ipopt+0x1c>
 800c916:	2b20      	cmp	r3, #32
 800c918:	d002      	beq.n	800c920 <lwip_sockopt_to_ipopt+0x18>
 800c91a:	2b04      	cmp	r3, #4
 800c91c:	d004      	beq.n	800c928 <lwip_sockopt_to_ipopt+0x20>
 800c91e:	e005      	b.n	800c92c <lwip_sockopt_to_ipopt+0x24>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800c920:	2320      	movs	r3, #32
 800c922:	e00b      	b.n	800c93c <lwip_sockopt_to_ipopt+0x34>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800c924:	2308      	movs	r3, #8
 800c926:	e009      	b.n	800c93c <lwip_sockopt_to_ipopt+0x34>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800c928:	2304      	movs	r3, #4
 800c92a:	e007      	b.n	800c93c <lwip_sockopt_to_ipopt+0x34>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800c92c:	4b05      	ldr	r3, [pc, #20]	; (800c944 <lwip_sockopt_to_ipopt+0x3c>)
 800c92e:	f640 3239 	movw	r2, #2873	; 0xb39
 800c932:	4905      	ldr	r1, [pc, #20]	; (800c948 <lwip_sockopt_to_ipopt+0x40>)
 800c934:	4805      	ldr	r0, [pc, #20]	; (800c94c <lwip_sockopt_to_ipopt+0x44>)
 800c936:	f00d fd45 	bl	801a3c4 <iprintf>
    return 0;
 800c93a:	2300      	movs	r3, #0
  }
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	0801bf50 	.word	0x0801bf50
 800c948:	0801c2dc 	.word	0x0801c2dc
 800c94c:	0801bfa4 	.word	0x0801bfa4

0800c950 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b08a      	sub	sp, #40	; 0x28
 800c954:	af02      	add	r7, sp, #8
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	603b      	str	r3, [r7, #0]
  int err = 0;
 800c95e:	2300      	movs	r3, #0
 800c960:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f7ff fa20 	bl	800bda8 <get_socket>
 800c968:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d102      	bne.n	800c976 <lwip_setsockopt+0x26>
    return -1;
 800c970:	f04f 33ff 	mov.w	r3, #4294967295
 800c974:	e02b      	b.n	800c9ce <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800c97c:	230e      	movs	r3, #14
 800c97e:	613b      	str	r3, [r7, #16]
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d002      	beq.n	800c98c <lwip_setsockopt+0x3c>
 800c986:	4a14      	ldr	r2, [pc, #80]	; (800c9d8 <lwip_setsockopt+0x88>)
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c98c:	f04f 33ff 	mov.w	r3, #4294967295
 800c990:	e01d      	b.n	800c9ce <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800c992:	4812      	ldr	r0, [pc, #72]	; (800c9dc <lwip_setsockopt+0x8c>)
 800c994:	f00d fc5c 	bl	801a250 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	68b9      	ldr	r1, [r7, #8]
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f000 f81c 	bl	800c9e0 <lwip_setsockopt_impl>
 800c9a8:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800c9aa:	480c      	ldr	r0, [pc, #48]	; (800c9dc <lwip_setsockopt+0x8c>)
 800c9ac:	f00d fc5f 	bl	801a26e <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	617b      	str	r3, [r7, #20]
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d002      	beq.n	800c9c0 <lwip_setsockopt+0x70>
 800c9ba:	4a07      	ldr	r2, [pc, #28]	; (800c9d8 <lwip_setsockopt+0x88>)
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d002      	beq.n	800c9cc <lwip_setsockopt+0x7c>
 800c9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ca:	e000      	b.n	800c9ce <lwip_setsockopt+0x7e>
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3720      	adds	r7, #32
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	2000bb14 	.word	0x2000bb14
 800c9dc:	20008398 	.word	0x20008398

0800c9e0 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b088      	sub	sp, #32
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
 800c9ec:	603b      	str	r3, [r7, #0]
  int err = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f7ff f9c1 	bl	800bd7a <tryget_socket>
 800c9f8:	6178      	str	r0, [r7, #20]
  if (!sock) {
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <lwip_setsockopt_impl+0x24>
    return EBADF;
 800ca00:	2309      	movs	r3, #9
 800ca02:	e16f      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	2b06      	cmp	r3, #6
 800ca08:	f000 8115 	beq.w	800cc36 <lwip_setsockopt_impl+0x256>
 800ca0c:	2b06      	cmp	r3, #6
 800ca0e:	dc03      	bgt.n	800ca18 <lwip_setsockopt_impl+0x38>
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f000 80d7 	beq.w	800cbc4 <lwip_setsockopt_impl+0x1e4>
 800ca16:	e161      	b.n	800ccdc <lwip_setsockopt_impl+0x2fc>
 800ca18:	2bff      	cmp	r3, #255	; 0xff
 800ca1a:	f000 815b 	beq.w	800ccd4 <lwip_setsockopt_impl+0x2f4>
 800ca1e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800ca22:	4293      	cmp	r3, r2
 800ca24:	f040 815a 	bne.w	800ccdc <lwip_setsockopt_impl+0x2fc>

    /* Level: SOL_SOCKET */
    case SOL_SOCKET:
      switch (optname) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b20      	cmp	r3, #32
 800ca2c:	d00d      	beq.n	800ca4a <lwip_setsockopt_impl+0x6a>
 800ca2e:	2b20      	cmp	r3, #32
 800ca30:	dc02      	bgt.n	800ca38 <lwip_setsockopt_impl+0x58>
 800ca32:	2b08      	cmp	r3, #8
 800ca34:	d009      	beq.n	800ca4a <lwip_setsockopt_impl+0x6a>
 800ca36:	e0c1      	b.n	800cbbc <lwip_setsockopt_impl+0x1dc>
 800ca38:	f241 020a 	movw	r2, #4106	; 0x100a
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d048      	beq.n	800cad2 <lwip_setsockopt_impl+0xf2>
 800ca40:	f241 020b 	movw	r2, #4107	; 0x100b
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d079      	beq.n	800cb3c <lwip_setsockopt_impl+0x15c>
 800ca48:	e0b8      	b.n	800cbbc <lwip_setsockopt_impl+0x1dc>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b20      	cmp	r3, #32
 800ca4e:	d108      	bne.n	800ca62 <lwip_setsockopt_impl+0x82>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 800ca5a:	2b20      	cmp	r3, #32
 800ca5c:	d001      	beq.n	800ca62 <lwip_setsockopt_impl+0x82>
            done_socket(sock);
            return ENOPROTOOPT;
 800ca5e:	235c      	movs	r3, #92	; 0x5c
 800ca60:	e140      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f7ff ff50 	bl	800c908 <lwip_sockopt_to_ipopt>
 800ca68:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800ca6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6c:	2b03      	cmp	r3, #3
 800ca6e:	d801      	bhi.n	800ca74 <lwip_setsockopt_impl+0x94>
 800ca70:	2316      	movs	r3, #22
 800ca72:	e137      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d004      	beq.n	800ca86 <lwip_setsockopt_impl+0xa6>
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d101      	bne.n	800ca8a <lwip_setsockopt_impl+0xaa>
 800ca86:	2316      	movs	r3, #22
 800ca88:	e12c      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
          if (*(const int *)optval) {
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00e      	beq.n	800cab0 <lwip_setsockopt_impl+0xd0>
            ip_set_option(sock->conn->pcb.ip, optname);
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	7a5b      	ldrb	r3, [r3, #9]
 800ca9a:	b25a      	sxtb	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	b25b      	sxtb	r3, r3
 800caa0:	4313      	orrs	r3, r2
 800caa2:	b25a      	sxtb	r2, r3
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800caae:	e088      	b.n	800cbc2 <lwip_setsockopt_impl+0x1e2>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	7a5b      	ldrb	r3, [r3, #9]
 800cab8:	b25a      	sxtb	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	b25b      	sxtb	r3, r3
 800cabe:	43db      	mvns	r3, r3
 800cac0:	b25b      	sxtb	r3, r3
 800cac2:	4013      	ands	r3, r2
 800cac4:	b25a      	sxtb	r2, r3
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	b2d2      	uxtb	r2, r2
 800cace:	725a      	strb	r2, [r3, #9]
          break;
 800cad0:	e077      	b.n	800cbc2 <lwip_setsockopt_impl+0x1e2>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad4:	2b03      	cmp	r3, #3
 800cad6:	d801      	bhi.n	800cadc <lwip_setsockopt_impl+0xfc>
 800cad8:	2316      	movs	r3, #22
 800cada:	e103      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d004      	beq.n	800caee <lwip_setsockopt_impl+0x10e>
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d101      	bne.n	800caf2 <lwip_setsockopt_impl+0x112>
 800caee:	2316      	movs	r3, #22
 800caf0:	e0f8      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cafc:	2b20      	cmp	r3, #32
 800cafe:	d001      	beq.n	800cb04 <lwip_setsockopt_impl+0x124>
 800cb00:	235c      	movs	r3, #92	; 0x5c
 800cb02:	e0ef      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00b      	beq.n	800cb24 <lwip_setsockopt_impl+0x144>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	7c1a      	ldrb	r2, [r3, #16]
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	f042 0201 	orr.w	r2, r2, #1
 800cb1e:	b2d2      	uxtb	r2, r2
 800cb20:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800cb22:	e04e      	b.n	800cbc2 <lwip_setsockopt_impl+0x1e2>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	7c1a      	ldrb	r2, [r3, #16]
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	f022 0201 	bic.w	r2, r2, #1
 800cb36:	b2d2      	uxtb	r2, r2
 800cb38:	741a      	strb	r2, [r3, #16]
          break;
 800cb3a:	e042      	b.n	800cbc2 <lwip_setsockopt_impl+0x1e2>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800cb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb42:	2b05      	cmp	r3, #5
 800cb44:	d801      	bhi.n	800cb4a <lwip_setsockopt_impl+0x16a>
 800cb46:	2316      	movs	r3, #22
 800cb48:	e0cc      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d101      	bne.n	800cb56 <lwip_setsockopt_impl+0x176>
 800cb52:	2316      	movs	r3, #22
 800cb54:	e0c6      	b.n	800cce4 <lwip_setsockopt_impl+0x304>

          iface = (const struct ifreq *)optval;
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d009      	beq.n	800cb76 <lwip_setsockopt_impl+0x196>
            n = netif_find(iface->ifr_name);
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f001 facb 	bl	800e100 <netif_find>
 800cb6a:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <lwip_setsockopt_impl+0x196>
              done_socket(sock);
              return ENODEV;
 800cb72:	2313      	movs	r3, #19
 800cb74:	e0b6      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb80:	2b10      	cmp	r3, #16
 800cb82:	d002      	beq.n	800cb8a <lwip_setsockopt_impl+0x1aa>
 800cb84:	2b20      	cmp	r3, #32
 800cb86:	d008      	beq.n	800cb9a <lwip_setsockopt_impl+0x1ba>
 800cb88:	e00f      	b.n	800cbaa <lwip_setsockopt_impl+0x1ca>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	69b9      	ldr	r1, [r7, #24]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f002 fcea 	bl	800f56c <tcp_bind_netif>
              break;
 800cb98:	e00f      	b.n	800cbba <lwip_setsockopt_impl+0x1da>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	69b9      	ldr	r1, [r7, #24]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f008 ff3c 	bl	8015a20 <udp_bind_netif>
              break;
 800cba8:	e007      	b.n	800cbba <lwip_setsockopt_impl+0x1da>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800cbaa:	4b50      	ldr	r3, [pc, #320]	; (800ccec <lwip_setsockopt_impl+0x30c>)
 800cbac:	f640 527d 	movw	r2, #3453	; 0xd7d
 800cbb0:	494f      	ldr	r1, [pc, #316]	; (800ccf0 <lwip_setsockopt_impl+0x310>)
 800cbb2:	4850      	ldr	r0, [pc, #320]	; (800ccf4 <lwip_setsockopt_impl+0x314>)
 800cbb4:	f00d fc06 	bl	801a3c4 <iprintf>
              break;
 800cbb8:	bf00      	nop
          }
        }
        break;
 800cbba:	e002      	b.n	800cbc2 <lwip_setsockopt_impl+0x1e2>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800cbbc:	235c      	movs	r3, #92	; 0x5c
 800cbbe:	61fb      	str	r3, [r7, #28]
          break;
 800cbc0:	bf00      	nop
      }  /* switch (optname) */
      break;
 800cbc2:	e08e      	b.n	800cce2 <lwip_setsockopt_impl+0x302>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d019      	beq.n	800cbfe <lwip_setsockopt_impl+0x21e>
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d12f      	bne.n	800cc2e <lwip_setsockopt_impl+0x24e>
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd0:	2b03      	cmp	r3, #3
 800cbd2:	d801      	bhi.n	800cbd8 <lwip_setsockopt_impl+0x1f8>
 800cbd4:	2316      	movs	r3, #22
 800cbd6:	e085      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d004      	beq.n	800cbea <lwip_setsockopt_impl+0x20a>
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d101      	bne.n	800cbee <lwip_setsockopt_impl+0x20e>
 800cbea:	2316      	movs	r3, #22
 800cbec:	e07a      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	b2d2      	uxtb	r2, r2
 800cbfa:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800cbfc:	e01a      	b.n	800cc34 <lwip_setsockopt_impl+0x254>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800cbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc00:	2b03      	cmp	r3, #3
 800cc02:	d801      	bhi.n	800cc08 <lwip_setsockopt_impl+0x228>
 800cc04:	2316      	movs	r3, #22
 800cc06:	e06d      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d004      	beq.n	800cc1a <lwip_setsockopt_impl+0x23a>
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <lwip_setsockopt_impl+0x23e>
 800cc1a:	2316      	movs	r3, #22
 800cc1c:	e062      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	b2d2      	uxtb	r2, r2
 800cc2a:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800cc2c:	e002      	b.n	800cc34 <lwip_setsockopt_impl+0x254>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800cc2e:	235c      	movs	r3, #92	; 0x5c
 800cc30:	61fb      	str	r3, [r7, #28]
          break;
 800cc32:	bf00      	nop
      }  /* switch (optname) */
      break;
 800cc34:	e055      	b.n	800cce2 <lwip_setsockopt_impl+0x302>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800cc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	d801      	bhi.n	800cc40 <lwip_setsockopt_impl+0x260>
 800cc3c:	2316      	movs	r3, #22
 800cc3e:	e051      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d004      	beq.n	800cc52 <lwip_setsockopt_impl+0x272>
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d101      	bne.n	800cc56 <lwip_setsockopt_impl+0x276>
 800cc52:	2316      	movs	r3, #22
 800cc54:	e046      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc60:	2b10      	cmp	r3, #16
 800cc62:	d001      	beq.n	800cc68 <lwip_setsockopt_impl+0x288>
 800cc64:	235c      	movs	r3, #92	; 0x5c
 800cc66:	e03d      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	7d1b      	ldrb	r3, [r3, #20]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d101      	bne.n	800cc78 <lwip_setsockopt_impl+0x298>
        done_socket(sock);
        return EINVAL;
 800cc74:	2316      	movs	r3, #22
 800cc76:	e035      	b.n	800cce4 <lwip_setsockopt_impl+0x304>
      }
      switch (optname) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d002      	beq.n	800cc84 <lwip_setsockopt_impl+0x2a4>
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	d01c      	beq.n	800ccbc <lwip_setsockopt_impl+0x2dc>
 800cc82:	e023      	b.n	800cccc <lwip_setsockopt_impl+0x2ec>
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00b      	beq.n	800cca4 <lwip_setsockopt_impl+0x2c4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	8b5a      	ldrh	r2, [r3, #26]
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc9e:	b292      	uxth	r2, r2
 800cca0:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800cca2:	e016      	b.n	800ccd2 <lwip_setsockopt_impl+0x2f2>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	8b5a      	ldrh	r2, [r3, #26]
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccb6:	b292      	uxth	r2, r2
 800ccb8:	835a      	strh	r2, [r3, #26]
          break;
 800ccba:	e00a      	b.n	800ccd2 <lwip_setsockopt_impl+0x2f2>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800ccca:	e002      	b.n	800ccd2 <lwip_setsockopt_impl+0x2f2>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800cccc:	235c      	movs	r3, #92	; 0x5c
 800ccce:	61fb      	str	r3, [r7, #28]
          break;
 800ccd0:	bf00      	nop
      }  /* switch (optname) */
      break;
 800ccd2:	e006      	b.n	800cce2 <lwip_setsockopt_impl+0x302>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800ccd4:	235c      	movs	r3, #92	; 0x5c
 800ccd6:	61fb      	str	r3, [r7, #28]
          break;
 800ccd8:	bf00      	nop
      }  /* switch (optname) */
      break;
 800ccda:	e002      	b.n	800cce2 <lwip_setsockopt_impl+0x302>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800ccdc:	235c      	movs	r3, #92	; 0x5c
 800ccde:	61fb      	str	r3, [r7, #28]
      break;
 800cce0:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800cce2:	69fb      	ldr	r3, [r7, #28]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3720      	adds	r7, #32
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	0801bf50 	.word	0x0801bf50
 800ccf0:	0801c2f4 	.word	0x0801c2f4
 800ccf4:	0801bfa4 	.word	0x0801bfa4

0800ccf8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cd02:	f008 fa21 	bl	8015148 <sys_timeouts_sleeptime>
 800cd06:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0e:	d10b      	bne.n	800cd28 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cd10:	4813      	ldr	r0, [pc, #76]	; (800cd60 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd12:	f00d faac 	bl	801a26e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cd16:	2200      	movs	r2, #0
 800cd18:	6839      	ldr	r1, [r7, #0]
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f00d f982 	bl	801a024 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cd20:	480f      	ldr	r0, [pc, #60]	; (800cd60 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd22:	f00d fa95 	bl	801a250 <sys_mutex_lock>
    return;
 800cd26:	e018      	b.n	800cd5a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d102      	bne.n	800cd34 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cd2e:	f008 f9d1 	bl	80150d4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cd32:	e7e6      	b.n	800cd02 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cd34:	480a      	ldr	r0, [pc, #40]	; (800cd60 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd36:	f00d fa9a 	bl	801a26e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	6839      	ldr	r1, [r7, #0]
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f00d f970 	bl	801a024 <sys_arch_mbox_fetch>
 800cd44:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cd46:	4806      	ldr	r0, [pc, #24]	; (800cd60 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd48:	f00d fa82 	bl	801a250 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd52:	d102      	bne.n	800cd5a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cd54:	f008 f9be 	bl	80150d4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cd58:	e7d3      	b.n	800cd02 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	20008398 	.word	0x20008398

0800cd64 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cd6c:	4810      	ldr	r0, [pc, #64]	; (800cdb0 <tcpip_thread+0x4c>)
 800cd6e:	f00d fa6f 	bl	801a250 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cd72:	4b10      	ldr	r3, [pc, #64]	; (800cdb4 <tcpip_thread+0x50>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d005      	beq.n	800cd86 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cd7a:	4b0e      	ldr	r3, [pc, #56]	; (800cdb4 <tcpip_thread+0x50>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a0e      	ldr	r2, [pc, #56]	; (800cdb8 <tcpip_thread+0x54>)
 800cd80:	6812      	ldr	r2, [r2, #0]
 800cd82:	4610      	mov	r0, r2
 800cd84:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cd86:	f107 030c 	add.w	r3, r7, #12
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	480b      	ldr	r0, [pc, #44]	; (800cdbc <tcpip_thread+0x58>)
 800cd8e:	f7ff ffb3 	bl	800ccf8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d106      	bne.n	800cda6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cd98:	4b09      	ldr	r3, [pc, #36]	; (800cdc0 <tcpip_thread+0x5c>)
 800cd9a:	2291      	movs	r2, #145	; 0x91
 800cd9c:	4909      	ldr	r1, [pc, #36]	; (800cdc4 <tcpip_thread+0x60>)
 800cd9e:	480a      	ldr	r0, [pc, #40]	; (800cdc8 <tcpip_thread+0x64>)
 800cda0:	f00d fb10 	bl	801a3c4 <iprintf>
      continue;
 800cda4:	e003      	b.n	800cdae <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 f80f 	bl	800cdcc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cdae:	e7ea      	b.n	800cd86 <tcpip_thread+0x22>
 800cdb0:	20008398 	.word	0x20008398
 800cdb4:	20004b68 	.word	0x20004b68
 800cdb8:	20004b6c 	.word	0x20004b6c
 800cdbc:	20004b70 	.word	0x20004b70
 800cdc0:	0801c320 	.word	0x0801c320
 800cdc4:	0801c350 	.word	0x0801c350
 800cdc8:	0801c370 	.word	0x0801c370

0800cdcc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d018      	beq.n	800ce0e <tcpip_thread_handle_msg+0x42>
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d021      	beq.n	800ce24 <tcpip_thread_handle_msg+0x58>
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d126      	bne.n	800ce32 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	6850      	ldr	r0, [r2, #4]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	6892      	ldr	r2, [r2, #8]
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	4798      	blx	r3
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d004      	beq.n	800ce04 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f001 fd1a 	bl	800e838 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ce04:	6879      	ldr	r1, [r7, #4]
 800ce06:	2009      	movs	r0, #9
 800ce08:	f000 fe32 	bl	800da70 <memp_free>
      break;
 800ce0c:	e018      	b.n	800ce40 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	6892      	ldr	r2, [r2, #8]
 800ce16:	4610      	mov	r0, r2
 800ce18:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ce1a:	6879      	ldr	r1, [r7, #4]
 800ce1c:	2008      	movs	r0, #8
 800ce1e:	f000 fe27 	bl	800da70 <memp_free>
      break;
 800ce22:	e00d      	b.n	800ce40 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	6892      	ldr	r2, [r2, #8]
 800ce2c:	4610      	mov	r0, r2
 800ce2e:	4798      	blx	r3
      break;
 800ce30:	e006      	b.n	800ce40 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ce32:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <tcpip_thread_handle_msg+0x7c>)
 800ce34:	22cf      	movs	r2, #207	; 0xcf
 800ce36:	4905      	ldr	r1, [pc, #20]	; (800ce4c <tcpip_thread_handle_msg+0x80>)
 800ce38:	4805      	ldr	r0, [pc, #20]	; (800ce50 <tcpip_thread_handle_msg+0x84>)
 800ce3a:	f00d fac3 	bl	801a3c4 <iprintf>
      break;
 800ce3e:	bf00      	nop
  }
}
 800ce40:	bf00      	nop
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	0801c320 	.word	0x0801c320
 800ce4c:	0801c350 	.word	0x0801c350
 800ce50:	0801c370 	.word	0x0801c370

0800ce54 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ce60:	481a      	ldr	r0, [pc, #104]	; (800cecc <tcpip_inpkt+0x78>)
 800ce62:	f00d f927 	bl	801a0b4 <sys_mbox_valid>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d105      	bne.n	800ce78 <tcpip_inpkt+0x24>
 800ce6c:	4b18      	ldr	r3, [pc, #96]	; (800ced0 <tcpip_inpkt+0x7c>)
 800ce6e:	22fc      	movs	r2, #252	; 0xfc
 800ce70:	4918      	ldr	r1, [pc, #96]	; (800ced4 <tcpip_inpkt+0x80>)
 800ce72:	4819      	ldr	r0, [pc, #100]	; (800ced8 <tcpip_inpkt+0x84>)
 800ce74:	f00d faa6 	bl	801a3c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ce78:	2009      	movs	r0, #9
 800ce7a:	f000 fda7 	bl	800d9cc <memp_malloc>
 800ce7e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d102      	bne.n	800ce8c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ce86:	f04f 33ff 	mov.w	r3, #4294967295
 800ce8a:	e01a      	b.n	800cec2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cea4:	6979      	ldr	r1, [r7, #20]
 800cea6:	4809      	ldr	r0, [pc, #36]	; (800cecc <tcpip_inpkt+0x78>)
 800cea8:	f00d f8a2 	bl	8019ff0 <sys_mbox_trypost>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d006      	beq.n	800cec0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ceb2:	6979      	ldr	r1, [r7, #20]
 800ceb4:	2009      	movs	r0, #9
 800ceb6:	f000 fddb 	bl	800da70 <memp_free>
    return ERR_MEM;
 800ceba:	f04f 33ff 	mov.w	r3, #4294967295
 800cebe:	e000      	b.n	800cec2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cec0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	20004b70 	.word	0x20004b70
 800ced0:	0801c320 	.word	0x0801c320
 800ced4:	0801c398 	.word	0x0801c398
 800ced8:	0801c370 	.word	0x0801c370

0800cedc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ceec:	f003 0318 	and.w	r3, r3, #24
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d006      	beq.n	800cf02 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cef4:	4a08      	ldr	r2, [pc, #32]	; (800cf18 <tcpip_input+0x3c>)
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7ff ffab 	bl	800ce54 <tcpip_inpkt>
 800cefe:	4603      	mov	r3, r0
 800cf00:	e005      	b.n	800cf0e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cf02:	4a06      	ldr	r2, [pc, #24]	; (800cf1c <tcpip_input+0x40>)
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7ff ffa4 	bl	800ce54 <tcpip_inpkt>
 800cf0c:	4603      	mov	r3, r0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	08019ded 	.word	0x08019ded
 800cf1c:	08018cd1 	.word	0x08018cd1

0800cf20 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cf2a:	4819      	ldr	r0, [pc, #100]	; (800cf90 <tcpip_try_callback+0x70>)
 800cf2c:	f00d f8c2 	bl	801a0b4 <sys_mbox_valid>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d106      	bne.n	800cf44 <tcpip_try_callback+0x24>
 800cf36:	4b17      	ldr	r3, [pc, #92]	; (800cf94 <tcpip_try_callback+0x74>)
 800cf38:	f240 125d 	movw	r2, #349	; 0x15d
 800cf3c:	4916      	ldr	r1, [pc, #88]	; (800cf98 <tcpip_try_callback+0x78>)
 800cf3e:	4817      	ldr	r0, [pc, #92]	; (800cf9c <tcpip_try_callback+0x7c>)
 800cf40:	f00d fa40 	bl	801a3c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cf44:	2008      	movs	r0, #8
 800cf46:	f000 fd41 	bl	800d9cc <memp_malloc>
 800cf4a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d102      	bne.n	800cf58 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cf52:	f04f 33ff 	mov.w	r3, #4294967295
 800cf56:	e017      	b.n	800cf88 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cf6a:	68f9      	ldr	r1, [r7, #12]
 800cf6c:	4808      	ldr	r0, [pc, #32]	; (800cf90 <tcpip_try_callback+0x70>)
 800cf6e:	f00d f83f 	bl	8019ff0 <sys_mbox_trypost>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d006      	beq.n	800cf86 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cf78:	68f9      	ldr	r1, [r7, #12]
 800cf7a:	2008      	movs	r0, #8
 800cf7c:	f000 fd78 	bl	800da70 <memp_free>
    return ERR_MEM;
 800cf80:	f04f 33ff 	mov.w	r3, #4294967295
 800cf84:	e000      	b.n	800cf88 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20004b70 	.word	0x20004b70
 800cf94:	0801c320 	.word	0x0801c320
 800cf98:	0801c398 	.word	0x0801c398
 800cf9c:	0801c370 	.word	0x0801c370

0800cfa0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800cfac:	4806      	ldr	r0, [pc, #24]	; (800cfc8 <tcpip_send_msg_wait_sem+0x28>)
 800cfae:	f00d f94f 	bl	801a250 <sys_mutex_lock>
  fn(apimsg);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	68b8      	ldr	r0, [r7, #8]
 800cfb6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800cfb8:	4803      	ldr	r0, [pc, #12]	; (800cfc8 <tcpip_send_msg_wait_sem+0x28>)
 800cfba:	f00d f958 	bl	801a26e <sys_mutex_unlock>
  return ERR_OK;
 800cfbe:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20008398 	.word	0x20008398

0800cfcc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af02      	add	r7, sp, #8
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cfd6:	f000 f871 	bl	800d0bc <lwip_init>

  tcpip_init_done = initfunc;
 800cfda:	4a17      	ldr	r2, [pc, #92]	; (800d038 <tcpip_init+0x6c>)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cfe0:	4a16      	ldr	r2, [pc, #88]	; (800d03c <tcpip_init+0x70>)
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cfe6:	2106      	movs	r1, #6
 800cfe8:	4815      	ldr	r0, [pc, #84]	; (800d040 <tcpip_init+0x74>)
 800cfea:	f00c ffd5 	bl	8019f98 <sys_mbox_new>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d006      	beq.n	800d002 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cff4:	4b13      	ldr	r3, [pc, #76]	; (800d044 <tcpip_init+0x78>)
 800cff6:	f240 2261 	movw	r2, #609	; 0x261
 800cffa:	4913      	ldr	r1, [pc, #76]	; (800d048 <tcpip_init+0x7c>)
 800cffc:	4813      	ldr	r0, [pc, #76]	; (800d04c <tcpip_init+0x80>)
 800cffe:	f00d f9e1 	bl	801a3c4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d002:	4813      	ldr	r0, [pc, #76]	; (800d050 <tcpip_init+0x84>)
 800d004:	f00d f90e 	bl	801a224 <sys_mutex_new>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d006      	beq.n	800d01c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d00e:	4b0d      	ldr	r3, [pc, #52]	; (800d044 <tcpip_init+0x78>)
 800d010:	f240 2265 	movw	r2, #613	; 0x265
 800d014:	490f      	ldr	r1, [pc, #60]	; (800d054 <tcpip_init+0x88>)
 800d016:	480d      	ldr	r0, [pc, #52]	; (800d04c <tcpip_init+0x80>)
 800d018:	f00d f9d4 	bl	801a3c4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d01c:	2318      	movs	r3, #24
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d024:	2200      	movs	r2, #0
 800d026:	490c      	ldr	r1, [pc, #48]	; (800d058 <tcpip_init+0x8c>)
 800d028:	480c      	ldr	r0, [pc, #48]	; (800d05c <tcpip_init+0x90>)
 800d02a:	f00d f92d 	bl	801a288 <sys_thread_new>
}
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	20004b68 	.word	0x20004b68
 800d03c:	20004b6c 	.word	0x20004b6c
 800d040:	20004b70 	.word	0x20004b70
 800d044:	0801c320 	.word	0x0801c320
 800d048:	0801c3a8 	.word	0x0801c3a8
 800d04c:	0801c370 	.word	0x0801c370
 800d050:	20008398 	.word	0x20008398
 800d054:	0801c3cc 	.word	0x0801c3cc
 800d058:	0800cd65 	.word	0x0800cd65
 800d05c:	0801c3f0 	.word	0x0801c3f0

0800d060 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	4603      	mov	r3, r0
 800d068:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d06a:	88fb      	ldrh	r3, [r7, #6]
 800d06c:	021b      	lsls	r3, r3, #8
 800d06e:	b21a      	sxth	r2, r3
 800d070:	88fb      	ldrh	r3, [r7, #6]
 800d072:	0a1b      	lsrs	r3, r3, #8
 800d074:	b29b      	uxth	r3, r3
 800d076:	b21b      	sxth	r3, r3
 800d078:	4313      	orrs	r3, r2
 800d07a:	b21b      	sxth	r3, r3
 800d07c:	b29b      	uxth	r3, r3
}
 800d07e:	4618      	mov	r0, r3
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d08a:	b480      	push	{r7}
 800d08c:	b083      	sub	sp, #12
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	061a      	lsls	r2, r3, #24
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	021b      	lsls	r3, r3, #8
 800d09a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d09e:	431a      	orrs	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	0a1b      	lsrs	r3, r3, #8
 800d0a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	0e1b      	lsrs	r3, r3, #24
 800d0ae:	4313      	orrs	r3, r2
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d0c6:	f00d f8a1 	bl	801a20c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d0ca:	f000 f8d5 	bl	800d278 <mem_init>
  memp_init();
 800d0ce:	f000 fc31 	bl	800d934 <memp_init>
  pbuf_init();
  netif_init();
 800d0d2:	f000 fcf7 	bl	800dac4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d0d6:	f008 f86f 	bl	80151b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d0da:	f001 fe57 	bl	800ed8c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d0de:	f007 ffb3 	bl	8015048 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d0e2:	bf00      	nop
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
	...

0800d0ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b083      	sub	sp, #12
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d0f6:	4b05      	ldr	r3, [pc, #20]	; (800d10c <ptr_to_mem+0x20>)
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	88fb      	ldrh	r3, [r7, #6]
 800d0fc:	4413      	add	r3, r2
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	370c      	adds	r7, #12
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	20004b74 	.word	0x20004b74

0800d110 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	4a05      	ldr	r2, [pc, #20]	; (800d130 <mem_to_ptr+0x20>)
 800d11c:	6812      	ldr	r2, [r2, #0]
 800d11e:	1a9b      	subs	r3, r3, r2
 800d120:	b29b      	uxth	r3, r3
}
 800d122:	4618      	mov	r0, r3
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	20004b74 	.word	0x20004b74

0800d134 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d134:	b590      	push	{r4, r7, lr}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d13c:	4b45      	ldr	r3, [pc, #276]	; (800d254 <plug_holes+0x120>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	429a      	cmp	r2, r3
 800d144:	d206      	bcs.n	800d154 <plug_holes+0x20>
 800d146:	4b44      	ldr	r3, [pc, #272]	; (800d258 <plug_holes+0x124>)
 800d148:	f240 12df 	movw	r2, #479	; 0x1df
 800d14c:	4943      	ldr	r1, [pc, #268]	; (800d25c <plug_holes+0x128>)
 800d14e:	4844      	ldr	r0, [pc, #272]	; (800d260 <plug_holes+0x12c>)
 800d150:	f00d f938 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d154:	4b43      	ldr	r3, [pc, #268]	; (800d264 <plug_holes+0x130>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d306      	bcc.n	800d16c <plug_holes+0x38>
 800d15e:	4b3e      	ldr	r3, [pc, #248]	; (800d258 <plug_holes+0x124>)
 800d160:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d164:	4940      	ldr	r1, [pc, #256]	; (800d268 <plug_holes+0x134>)
 800d166:	483e      	ldr	r0, [pc, #248]	; (800d260 <plug_holes+0x12c>)
 800d168:	f00d f92c 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	791b      	ldrb	r3, [r3, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d006      	beq.n	800d182 <plug_holes+0x4e>
 800d174:	4b38      	ldr	r3, [pc, #224]	; (800d258 <plug_holes+0x124>)
 800d176:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d17a:	493c      	ldr	r1, [pc, #240]	; (800d26c <plug_holes+0x138>)
 800d17c:	4838      	ldr	r0, [pc, #224]	; (800d260 <plug_holes+0x12c>)
 800d17e:	f00d f921 	bl	801a3c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	881b      	ldrh	r3, [r3, #0]
 800d186:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d18a:	d906      	bls.n	800d19a <plug_holes+0x66>
 800d18c:	4b32      	ldr	r3, [pc, #200]	; (800d258 <plug_holes+0x124>)
 800d18e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d192:	4937      	ldr	r1, [pc, #220]	; (800d270 <plug_holes+0x13c>)
 800d194:	4832      	ldr	r0, [pc, #200]	; (800d260 <plug_holes+0x12c>)
 800d196:	f00d f915 	bl	801a3c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7ff ffa4 	bl	800d0ec <ptr_to_mem>
 800d1a4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d024      	beq.n	800d1f8 <plug_holes+0xc4>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	791b      	ldrb	r3, [r3, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d120      	bne.n	800d1f8 <plug_holes+0xc4>
 800d1b6:	4b2b      	ldr	r3, [pc, #172]	; (800d264 <plug_holes+0x130>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d01b      	beq.n	800d1f8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d1c0:	4b2c      	ldr	r3, [pc, #176]	; (800d274 <plug_holes+0x140>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d102      	bne.n	800d1d0 <plug_holes+0x9c>
      lfree = mem;
 800d1ca:	4a2a      	ldr	r2, [pc, #168]	; (800d274 <plug_holes+0x140>)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	881a      	ldrh	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	881b      	ldrh	r3, [r3, #0]
 800d1dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d1e0:	d00a      	beq.n	800d1f8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	881b      	ldrh	r3, [r3, #0]
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7ff ff80 	bl	800d0ec <ptr_to_mem>
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff ff8e 	bl	800d110 <mem_to_ptr>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	885b      	ldrh	r3, [r3, #2]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7ff ff75 	bl	800d0ec <ptr_to_mem>
 800d202:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d01f      	beq.n	800d24c <plug_holes+0x118>
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	791b      	ldrb	r3, [r3, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d11b      	bne.n	800d24c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d214:	4b17      	ldr	r3, [pc, #92]	; (800d274 <plug_holes+0x140>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d102      	bne.n	800d224 <plug_holes+0xf0>
      lfree = pmem;
 800d21e:	4a15      	ldr	r2, [pc, #84]	; (800d274 <plug_holes+0x140>)
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	881a      	ldrh	r2, [r3, #0]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d234:	d00a      	beq.n	800d24c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	881b      	ldrh	r3, [r3, #0]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7ff ff56 	bl	800d0ec <ptr_to_mem>
 800d240:	4604      	mov	r4, r0
 800d242:	68b8      	ldr	r0, [r7, #8]
 800d244:	f7ff ff64 	bl	800d110 <mem_to_ptr>
 800d248:	4603      	mov	r3, r0
 800d24a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d24c:	bf00      	nop
 800d24e:	3714      	adds	r7, #20
 800d250:	46bd      	mov	sp, r7
 800d252:	bd90      	pop	{r4, r7, pc}
 800d254:	20004b74 	.word	0x20004b74
 800d258:	0801c400 	.word	0x0801c400
 800d25c:	0801c430 	.word	0x0801c430
 800d260:	0801c448 	.word	0x0801c448
 800d264:	20004b78 	.word	0x20004b78
 800d268:	0801c470 	.word	0x0801c470
 800d26c:	0801c48c 	.word	0x0801c48c
 800d270:	0801c4a8 	.word	0x0801c4a8
 800d274:	20004b80 	.word	0x20004b80

0800d278 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d27e:	4b1f      	ldr	r3, [pc, #124]	; (800d2fc <mem_init+0x84>)
 800d280:	3303      	adds	r3, #3
 800d282:	f023 0303 	bic.w	r3, r3, #3
 800d286:	461a      	mov	r2, r3
 800d288:	4b1d      	ldr	r3, [pc, #116]	; (800d300 <mem_init+0x88>)
 800d28a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d28c:	4b1c      	ldr	r3, [pc, #112]	; (800d300 <mem_init+0x88>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d298:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d2a6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d2aa:	f7ff ff1f 	bl	800d0ec <ptr_to_mem>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	4b14      	ldr	r3, [pc, #80]	; (800d304 <mem_init+0x8c>)
 800d2b2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800d2b4:	4b13      	ldr	r3, [pc, #76]	; (800d304 <mem_init+0x8c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d2bc:	4b11      	ldr	r3, [pc, #68]	; (800d304 <mem_init+0x8c>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d2c4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d2c6:	4b0f      	ldr	r3, [pc, #60]	; (800d304 <mem_init+0x8c>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d2ce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d2d0:	4b0b      	ldr	r3, [pc, #44]	; (800d300 <mem_init+0x88>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a0c      	ldr	r2, [pc, #48]	; (800d308 <mem_init+0x90>)
 800d2d6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d2d8:	480c      	ldr	r0, [pc, #48]	; (800d30c <mem_init+0x94>)
 800d2da:	f00c ffa3 	bl	801a224 <sys_mutex_new>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d006      	beq.n	800d2f2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d2e4:	4b0a      	ldr	r3, [pc, #40]	; (800d310 <mem_init+0x98>)
 800d2e6:	f240 221f 	movw	r2, #543	; 0x21f
 800d2ea:	490a      	ldr	r1, [pc, #40]	; (800d314 <mem_init+0x9c>)
 800d2ec:	480a      	ldr	r0, [pc, #40]	; (800d318 <mem_init+0xa0>)
 800d2ee:	f00d f869 	bl	801a3c4 <iprintf>
  }
}
 800d2f2:	bf00      	nop
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	200083b4 	.word	0x200083b4
 800d300:	20004b74 	.word	0x20004b74
 800d304:	20004b78 	.word	0x20004b78
 800d308:	20004b80 	.word	0x20004b80
 800d30c:	20004b7c 	.word	0x20004b7c
 800d310:	0801c400 	.word	0x0801c400
 800d314:	0801c4d4 	.word	0x0801c4d4
 800d318:	0801c448 	.word	0x0801c448

0800d31c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7ff fef3 	bl	800d110 <mem_to_ptr>
 800d32a:	4603      	mov	r3, r0
 800d32c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	4618      	mov	r0, r3
 800d334:	f7ff feda 	bl	800d0ec <ptr_to_mem>
 800d338:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	885b      	ldrh	r3, [r3, #2]
 800d33e:	4618      	mov	r0, r3
 800d340:	f7ff fed4 	bl	800d0ec <ptr_to_mem>
 800d344:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d34e:	d818      	bhi.n	800d382 <mem_link_valid+0x66>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	885b      	ldrh	r3, [r3, #2]
 800d354:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d358:	d813      	bhi.n	800d382 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d35e:	8afa      	ldrh	r2, [r7, #22]
 800d360:	429a      	cmp	r2, r3
 800d362:	d004      	beq.n	800d36e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	881b      	ldrh	r3, [r3, #0]
 800d368:	8afa      	ldrh	r2, [r7, #22]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d109      	bne.n	800d382 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d36e:	4b08      	ldr	r3, [pc, #32]	; (800d390 <mem_link_valid+0x74>)
 800d370:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d372:	693a      	ldr	r2, [r7, #16]
 800d374:	429a      	cmp	r2, r3
 800d376:	d006      	beq.n	800d386 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	885b      	ldrh	r3, [r3, #2]
 800d37c:	8afa      	ldrh	r2, [r7, #22]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d001      	beq.n	800d386 <mem_link_valid+0x6a>
    return 0;
 800d382:	2300      	movs	r3, #0
 800d384:	e000      	b.n	800d388 <mem_link_valid+0x6c>
  }
  return 1;
 800d386:	2301      	movs	r3, #1
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3718      	adds	r7, #24
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	20004b78 	.word	0x20004b78

0800d394 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b088      	sub	sp, #32
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d070      	beq.n	800d484 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f003 0303 	and.w	r3, r3, #3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00d      	beq.n	800d3c8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d3ac:	4b37      	ldr	r3, [pc, #220]	; (800d48c <mem_free+0xf8>)
 800d3ae:	f240 2273 	movw	r2, #627	; 0x273
 800d3b2:	4937      	ldr	r1, [pc, #220]	; (800d490 <mem_free+0xfc>)
 800d3b4:	4837      	ldr	r0, [pc, #220]	; (800d494 <mem_free+0x100>)
 800d3b6:	f00d f805 	bl	801a3c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d3ba:	f00c ff85 	bl	801a2c8 <sys_arch_protect>
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f00c ff8f 	bl	801a2e4 <sys_arch_unprotect>
    return;
 800d3c6:	e05e      	b.n	800d486 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	3b08      	subs	r3, #8
 800d3cc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d3ce:	4b32      	ldr	r3, [pc, #200]	; (800d498 <mem_free+0x104>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	69fa      	ldr	r2, [r7, #28]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d306      	bcc.n	800d3e6 <mem_free+0x52>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f103 020c 	add.w	r2, r3, #12
 800d3de:	4b2f      	ldr	r3, [pc, #188]	; (800d49c <mem_free+0x108>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d90d      	bls.n	800d402 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d3e6:	4b29      	ldr	r3, [pc, #164]	; (800d48c <mem_free+0xf8>)
 800d3e8:	f240 227f 	movw	r2, #639	; 0x27f
 800d3ec:	492c      	ldr	r1, [pc, #176]	; (800d4a0 <mem_free+0x10c>)
 800d3ee:	4829      	ldr	r0, [pc, #164]	; (800d494 <mem_free+0x100>)
 800d3f0:	f00c ffe8 	bl	801a3c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d3f4:	f00c ff68 	bl	801a2c8 <sys_arch_protect>
 800d3f8:	6138      	str	r0, [r7, #16]
 800d3fa:	6938      	ldr	r0, [r7, #16]
 800d3fc:	f00c ff72 	bl	801a2e4 <sys_arch_unprotect>
    return;
 800d400:	e041      	b.n	800d486 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d402:	4828      	ldr	r0, [pc, #160]	; (800d4a4 <mem_free+0x110>)
 800d404:	f00c ff24 	bl	801a250 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	791b      	ldrb	r3, [r3, #4]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d110      	bne.n	800d432 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d410:	4b1e      	ldr	r3, [pc, #120]	; (800d48c <mem_free+0xf8>)
 800d412:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d416:	4924      	ldr	r1, [pc, #144]	; (800d4a8 <mem_free+0x114>)
 800d418:	481e      	ldr	r0, [pc, #120]	; (800d494 <mem_free+0x100>)
 800d41a:	f00c ffd3 	bl	801a3c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d41e:	4821      	ldr	r0, [pc, #132]	; (800d4a4 <mem_free+0x110>)
 800d420:	f00c ff25 	bl	801a26e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d424:	f00c ff50 	bl	801a2c8 <sys_arch_protect>
 800d428:	6178      	str	r0, [r7, #20]
 800d42a:	6978      	ldr	r0, [r7, #20]
 800d42c:	f00c ff5a 	bl	801a2e4 <sys_arch_unprotect>
    return;
 800d430:	e029      	b.n	800d486 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d432:	69f8      	ldr	r0, [r7, #28]
 800d434:	f7ff ff72 	bl	800d31c <mem_link_valid>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d110      	bne.n	800d460 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d43e:	4b13      	ldr	r3, [pc, #76]	; (800d48c <mem_free+0xf8>)
 800d440:	f240 2295 	movw	r2, #661	; 0x295
 800d444:	4919      	ldr	r1, [pc, #100]	; (800d4ac <mem_free+0x118>)
 800d446:	4813      	ldr	r0, [pc, #76]	; (800d494 <mem_free+0x100>)
 800d448:	f00c ffbc 	bl	801a3c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d44c:	4815      	ldr	r0, [pc, #84]	; (800d4a4 <mem_free+0x110>)
 800d44e:	f00c ff0e 	bl	801a26e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d452:	f00c ff39 	bl	801a2c8 <sys_arch_protect>
 800d456:	61b8      	str	r0, [r7, #24]
 800d458:	69b8      	ldr	r0, [r7, #24]
 800d45a:	f00c ff43 	bl	801a2e4 <sys_arch_unprotect>
    return;
 800d45e:	e012      	b.n	800d486 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	2200      	movs	r2, #0
 800d464:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d466:	4b12      	ldr	r3, [pc, #72]	; (800d4b0 <mem_free+0x11c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	69fa      	ldr	r2, [r7, #28]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d202      	bcs.n	800d476 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d470:	4a0f      	ldr	r2, [pc, #60]	; (800d4b0 <mem_free+0x11c>)
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d476:	69f8      	ldr	r0, [r7, #28]
 800d478:	f7ff fe5c 	bl	800d134 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d47c:	4809      	ldr	r0, [pc, #36]	; (800d4a4 <mem_free+0x110>)
 800d47e:	f00c fef6 	bl	801a26e <sys_mutex_unlock>
 800d482:	e000      	b.n	800d486 <mem_free+0xf2>
    return;
 800d484:	bf00      	nop
}
 800d486:	3720      	adds	r7, #32
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	0801c400 	.word	0x0801c400
 800d490:	0801c4f0 	.word	0x0801c4f0
 800d494:	0801c448 	.word	0x0801c448
 800d498:	20004b74 	.word	0x20004b74
 800d49c:	20004b78 	.word	0x20004b78
 800d4a0:	0801c514 	.word	0x0801c514
 800d4a4:	20004b7c 	.word	0x20004b7c
 800d4a8:	0801c530 	.word	0x0801c530
 800d4ac:	0801c558 	.word	0x0801c558
 800d4b0:	20004b80 	.word	0x20004b80

0800d4b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b088      	sub	sp, #32
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d4c0:	887b      	ldrh	r3, [r7, #2]
 800d4c2:	3303      	adds	r3, #3
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	f023 0303 	bic.w	r3, r3, #3
 800d4ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d4cc:	8bfb      	ldrh	r3, [r7, #30]
 800d4ce:	2b0b      	cmp	r3, #11
 800d4d0:	d801      	bhi.n	800d4d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d4d2:	230c      	movs	r3, #12
 800d4d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d4d6:	8bfb      	ldrh	r3, [r7, #30]
 800d4d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4dc:	d803      	bhi.n	800d4e6 <mem_trim+0x32>
 800d4de:	8bfa      	ldrh	r2, [r7, #30]
 800d4e0:	887b      	ldrh	r3, [r7, #2]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d201      	bcs.n	800d4ea <mem_trim+0x36>
    return NULL;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	e0d8      	b.n	800d69c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d4ea:	4b6e      	ldr	r3, [pc, #440]	; (800d6a4 <mem_trim+0x1f0>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d304      	bcc.n	800d4fe <mem_trim+0x4a>
 800d4f4:	4b6c      	ldr	r3, [pc, #432]	; (800d6a8 <mem_trim+0x1f4>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d306      	bcc.n	800d50c <mem_trim+0x58>
 800d4fe:	4b6b      	ldr	r3, [pc, #428]	; (800d6ac <mem_trim+0x1f8>)
 800d500:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d504:	496a      	ldr	r1, [pc, #424]	; (800d6b0 <mem_trim+0x1fc>)
 800d506:	486b      	ldr	r0, [pc, #428]	; (800d6b4 <mem_trim+0x200>)
 800d508:	f00c ff5c 	bl	801a3c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d50c:	4b65      	ldr	r3, [pc, #404]	; (800d6a4 <mem_trim+0x1f0>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	429a      	cmp	r2, r3
 800d514:	d304      	bcc.n	800d520 <mem_trim+0x6c>
 800d516:	4b64      	ldr	r3, [pc, #400]	; (800d6a8 <mem_trim+0x1f4>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d307      	bcc.n	800d530 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d520:	f00c fed2 	bl	801a2c8 <sys_arch_protect>
 800d524:	60b8      	str	r0, [r7, #8]
 800d526:	68b8      	ldr	r0, [r7, #8]
 800d528:	f00c fedc 	bl	801a2e4 <sys_arch_unprotect>
    return rmem;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	e0b5      	b.n	800d69c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	3b08      	subs	r3, #8
 800d534:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d536:	69b8      	ldr	r0, [r7, #24]
 800d538:	f7ff fdea 	bl	800d110 <mem_to_ptr>
 800d53c:	4603      	mov	r3, r0
 800d53e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	881a      	ldrh	r2, [r3, #0]
 800d544:	8afb      	ldrh	r3, [r7, #22]
 800d546:	1ad3      	subs	r3, r2, r3
 800d548:	b29b      	uxth	r3, r3
 800d54a:	3b08      	subs	r3, #8
 800d54c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d54e:	8bfa      	ldrh	r2, [r7, #30]
 800d550:	8abb      	ldrh	r3, [r7, #20]
 800d552:	429a      	cmp	r2, r3
 800d554:	d906      	bls.n	800d564 <mem_trim+0xb0>
 800d556:	4b55      	ldr	r3, [pc, #340]	; (800d6ac <mem_trim+0x1f8>)
 800d558:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d55c:	4956      	ldr	r1, [pc, #344]	; (800d6b8 <mem_trim+0x204>)
 800d55e:	4855      	ldr	r0, [pc, #340]	; (800d6b4 <mem_trim+0x200>)
 800d560:	f00c ff30 	bl	801a3c4 <iprintf>
  if (newsize > size) {
 800d564:	8bfa      	ldrh	r2, [r7, #30]
 800d566:	8abb      	ldrh	r3, [r7, #20]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d901      	bls.n	800d570 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d56c:	2300      	movs	r3, #0
 800d56e:	e095      	b.n	800d69c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d570:	8bfa      	ldrh	r2, [r7, #30]
 800d572:	8abb      	ldrh	r3, [r7, #20]
 800d574:	429a      	cmp	r2, r3
 800d576:	d101      	bne.n	800d57c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	e08f      	b.n	800d69c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d57c:	484f      	ldr	r0, [pc, #316]	; (800d6bc <mem_trim+0x208>)
 800d57e:	f00c fe67 	bl	801a250 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	4618      	mov	r0, r3
 800d588:	f7ff fdb0 	bl	800d0ec <ptr_to_mem>
 800d58c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	791b      	ldrb	r3, [r3, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d13f      	bne.n	800d616 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	881b      	ldrh	r3, [r3, #0]
 800d59a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d59e:	d106      	bne.n	800d5ae <mem_trim+0xfa>
 800d5a0:	4b42      	ldr	r3, [pc, #264]	; (800d6ac <mem_trim+0x1f8>)
 800d5a2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d5a6:	4946      	ldr	r1, [pc, #280]	; (800d6c0 <mem_trim+0x20c>)
 800d5a8:	4842      	ldr	r0, [pc, #264]	; (800d6b4 <mem_trim+0x200>)
 800d5aa:	f00c ff0b 	bl	801a3c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	881b      	ldrh	r3, [r3, #0]
 800d5b2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d5b4:	8afa      	ldrh	r2, [r7, #22]
 800d5b6:	8bfb      	ldrh	r3, [r7, #30]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	3308      	adds	r3, #8
 800d5be:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d5c0:	4b40      	ldr	r3, [pc, #256]	; (800d6c4 <mem_trim+0x210>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	693a      	ldr	r2, [r7, #16]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d106      	bne.n	800d5d8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d5ca:	89fb      	ldrh	r3, [r7, #14]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7ff fd8d 	bl	800d0ec <ptr_to_mem>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	4b3b      	ldr	r3, [pc, #236]	; (800d6c4 <mem_trim+0x210>)
 800d5d6:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d5d8:	89fb      	ldrh	r3, [r7, #14]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7ff fd86 	bl	800d0ec <ptr_to_mem>
 800d5e0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	89ba      	ldrh	r2, [r7, #12]
 800d5ec:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	8afa      	ldrh	r2, [r7, #22]
 800d5f2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	89fa      	ldrh	r2, [r7, #14]
 800d5f8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	881b      	ldrh	r3, [r3, #0]
 800d5fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d602:	d047      	beq.n	800d694 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	881b      	ldrh	r3, [r3, #0]
 800d608:	4618      	mov	r0, r3
 800d60a:	f7ff fd6f 	bl	800d0ec <ptr_to_mem>
 800d60e:	4602      	mov	r2, r0
 800d610:	89fb      	ldrh	r3, [r7, #14]
 800d612:	8053      	strh	r3, [r2, #2]
 800d614:	e03e      	b.n	800d694 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d616:	8bfb      	ldrh	r3, [r7, #30]
 800d618:	f103 0214 	add.w	r2, r3, #20
 800d61c:	8abb      	ldrh	r3, [r7, #20]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d838      	bhi.n	800d694 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d622:	8afa      	ldrh	r2, [r7, #22]
 800d624:	8bfb      	ldrh	r3, [r7, #30]
 800d626:	4413      	add	r3, r2
 800d628:	b29b      	uxth	r3, r3
 800d62a:	3308      	adds	r3, #8
 800d62c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d636:	d106      	bne.n	800d646 <mem_trim+0x192>
 800d638:	4b1c      	ldr	r3, [pc, #112]	; (800d6ac <mem_trim+0x1f8>)
 800d63a:	f240 3216 	movw	r2, #790	; 0x316
 800d63e:	4920      	ldr	r1, [pc, #128]	; (800d6c0 <mem_trim+0x20c>)
 800d640:	481c      	ldr	r0, [pc, #112]	; (800d6b4 <mem_trim+0x200>)
 800d642:	f00c febf 	bl	801a3c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d646:	89fb      	ldrh	r3, [r7, #14]
 800d648:	4618      	mov	r0, r3
 800d64a:	f7ff fd4f 	bl	800d0ec <ptr_to_mem>
 800d64e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d650:	4b1c      	ldr	r3, [pc, #112]	; (800d6c4 <mem_trim+0x210>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	429a      	cmp	r2, r3
 800d658:	d202      	bcs.n	800d660 <mem_trim+0x1ac>
      lfree = mem2;
 800d65a:	4a1a      	ldr	r2, [pc, #104]	; (800d6c4 <mem_trim+0x210>)
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	2200      	movs	r2, #0
 800d664:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	881a      	ldrh	r2, [r3, #0]
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	8afa      	ldrh	r2, [r7, #22]
 800d672:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	89fa      	ldrh	r2, [r7, #14]
 800d678:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d682:	d007      	beq.n	800d694 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff fd2f 	bl	800d0ec <ptr_to_mem>
 800d68e:	4602      	mov	r2, r0
 800d690:	89fb      	ldrh	r3, [r7, #14]
 800d692:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d694:	4809      	ldr	r0, [pc, #36]	; (800d6bc <mem_trim+0x208>)
 800d696:	f00c fdea 	bl	801a26e <sys_mutex_unlock>
  return rmem;
 800d69a:	687b      	ldr	r3, [r7, #4]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3720      	adds	r7, #32
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	20004b74 	.word	0x20004b74
 800d6a8:	20004b78 	.word	0x20004b78
 800d6ac:	0801c400 	.word	0x0801c400
 800d6b0:	0801c58c 	.word	0x0801c58c
 800d6b4:	0801c448 	.word	0x0801c448
 800d6b8:	0801c5a4 	.word	0x0801c5a4
 800d6bc:	20004b7c 	.word	0x20004b7c
 800d6c0:	0801c5c4 	.word	0x0801c5c4
 800d6c4:	20004b80 	.word	0x20004b80

0800d6c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b088      	sub	sp, #32
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d6d2:	88fb      	ldrh	r3, [r7, #6]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <mem_malloc+0x14>
    return NULL;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	e0e2      	b.n	800d8a2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d6dc:	88fb      	ldrh	r3, [r7, #6]
 800d6de:	3303      	adds	r3, #3
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	f023 0303 	bic.w	r3, r3, #3
 800d6e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d6e8:	8bbb      	ldrh	r3, [r7, #28]
 800d6ea:	2b0b      	cmp	r3, #11
 800d6ec:	d801      	bhi.n	800d6f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d6ee:	230c      	movs	r3, #12
 800d6f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d6f2:	8bbb      	ldrh	r3, [r7, #28]
 800d6f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6f8:	d803      	bhi.n	800d702 <mem_malloc+0x3a>
 800d6fa:	8bba      	ldrh	r2, [r7, #28]
 800d6fc:	88fb      	ldrh	r3, [r7, #6]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d201      	bcs.n	800d706 <mem_malloc+0x3e>
    return NULL;
 800d702:	2300      	movs	r3, #0
 800d704:	e0cd      	b.n	800d8a2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d706:	4869      	ldr	r0, [pc, #420]	; (800d8ac <mem_malloc+0x1e4>)
 800d708:	f00c fda2 	bl	801a250 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d70c:	4b68      	ldr	r3, [pc, #416]	; (800d8b0 <mem_malloc+0x1e8>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff fcfd 	bl	800d110 <mem_to_ptr>
 800d716:	4603      	mov	r3, r0
 800d718:	83fb      	strh	r3, [r7, #30]
 800d71a:	e0b7      	b.n	800d88c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d71c:	8bfb      	ldrh	r3, [r7, #30]
 800d71e:	4618      	mov	r0, r3
 800d720:	f7ff fce4 	bl	800d0ec <ptr_to_mem>
 800d724:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	791b      	ldrb	r3, [r3, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	f040 80a7 	bne.w	800d87e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	461a      	mov	r2, r3
 800d736:	8bfb      	ldrh	r3, [r7, #30]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	f1a3 0208 	sub.w	r2, r3, #8
 800d73e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d740:	429a      	cmp	r2, r3
 800d742:	f0c0 809c 	bcc.w	800d87e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	461a      	mov	r2, r3
 800d74c:	8bfb      	ldrh	r3, [r7, #30]
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	f1a3 0208 	sub.w	r2, r3, #8
 800d754:	8bbb      	ldrh	r3, [r7, #28]
 800d756:	3314      	adds	r3, #20
 800d758:	429a      	cmp	r2, r3
 800d75a:	d333      	bcc.n	800d7c4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d75c:	8bfa      	ldrh	r2, [r7, #30]
 800d75e:	8bbb      	ldrh	r3, [r7, #28]
 800d760:	4413      	add	r3, r2
 800d762:	b29b      	uxth	r3, r3
 800d764:	3308      	adds	r3, #8
 800d766:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d768:	8a7b      	ldrh	r3, [r7, #18]
 800d76a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d76e:	d106      	bne.n	800d77e <mem_malloc+0xb6>
 800d770:	4b50      	ldr	r3, [pc, #320]	; (800d8b4 <mem_malloc+0x1ec>)
 800d772:	f240 3287 	movw	r2, #903	; 0x387
 800d776:	4950      	ldr	r1, [pc, #320]	; (800d8b8 <mem_malloc+0x1f0>)
 800d778:	4850      	ldr	r0, [pc, #320]	; (800d8bc <mem_malloc+0x1f4>)
 800d77a:	f00c fe23 	bl	801a3c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d77e:	8a7b      	ldrh	r3, [r7, #18]
 800d780:	4618      	mov	r0, r3
 800d782:	f7ff fcb3 	bl	800d0ec <ptr_to_mem>
 800d786:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2200      	movs	r2, #0
 800d78c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	881a      	ldrh	r2, [r3, #0]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	8bfa      	ldrh	r2, [r7, #30]
 800d79a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	8a7a      	ldrh	r2, [r7, #18]
 800d7a0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d7b0:	d00b      	beq.n	800d7ca <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	881b      	ldrh	r3, [r3, #0]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7ff fc98 	bl	800d0ec <ptr_to_mem>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	8a7b      	ldrh	r3, [r7, #18]
 800d7c0:	8053      	strh	r3, [r2, #2]
 800d7c2:	e002      	b.n	800d7ca <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d7ca:	4b39      	ldr	r3, [pc, #228]	; (800d8b0 <mem_malloc+0x1e8>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	697a      	ldr	r2, [r7, #20]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d127      	bne.n	800d824 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d7d4:	4b36      	ldr	r3, [pc, #216]	; (800d8b0 <mem_malloc+0x1e8>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d7da:	e005      	b.n	800d7e8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	881b      	ldrh	r3, [r3, #0]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7ff fc83 	bl	800d0ec <ptr_to_mem>
 800d7e6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	791b      	ldrb	r3, [r3, #4]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d004      	beq.n	800d7fa <mem_malloc+0x132>
 800d7f0:	4b33      	ldr	r3, [pc, #204]	; (800d8c0 <mem_malloc+0x1f8>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	69ba      	ldr	r2, [r7, #24]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d1f0      	bne.n	800d7dc <mem_malloc+0x114>
          }
          lfree = cur;
 800d7fa:	4a2d      	ldr	r2, [pc, #180]	; (800d8b0 <mem_malloc+0x1e8>)
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d800:	4b2b      	ldr	r3, [pc, #172]	; (800d8b0 <mem_malloc+0x1e8>)
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	4b2e      	ldr	r3, [pc, #184]	; (800d8c0 <mem_malloc+0x1f8>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d00b      	beq.n	800d824 <mem_malloc+0x15c>
 800d80c:	4b28      	ldr	r3, [pc, #160]	; (800d8b0 <mem_malloc+0x1e8>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	791b      	ldrb	r3, [r3, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d006      	beq.n	800d824 <mem_malloc+0x15c>
 800d816:	4b27      	ldr	r3, [pc, #156]	; (800d8b4 <mem_malloc+0x1ec>)
 800d818:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d81c:	4929      	ldr	r1, [pc, #164]	; (800d8c4 <mem_malloc+0x1fc>)
 800d81e:	4827      	ldr	r0, [pc, #156]	; (800d8bc <mem_malloc+0x1f4>)
 800d820:	f00c fdd0 	bl	801a3c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d824:	4821      	ldr	r0, [pc, #132]	; (800d8ac <mem_malloc+0x1e4>)
 800d826:	f00c fd22 	bl	801a26e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d82a:	8bba      	ldrh	r2, [r7, #28]
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	4413      	add	r3, r2
 800d830:	3308      	adds	r3, #8
 800d832:	4a23      	ldr	r2, [pc, #140]	; (800d8c0 <mem_malloc+0x1f8>)
 800d834:	6812      	ldr	r2, [r2, #0]
 800d836:	4293      	cmp	r3, r2
 800d838:	d906      	bls.n	800d848 <mem_malloc+0x180>
 800d83a:	4b1e      	ldr	r3, [pc, #120]	; (800d8b4 <mem_malloc+0x1ec>)
 800d83c:	f240 32ba 	movw	r2, #954	; 0x3ba
 800d840:	4921      	ldr	r1, [pc, #132]	; (800d8c8 <mem_malloc+0x200>)
 800d842:	481e      	ldr	r0, [pc, #120]	; (800d8bc <mem_malloc+0x1f4>)
 800d844:	f00c fdbe 	bl	801a3c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	f003 0303 	and.w	r3, r3, #3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d006      	beq.n	800d860 <mem_malloc+0x198>
 800d852:	4b18      	ldr	r3, [pc, #96]	; (800d8b4 <mem_malloc+0x1ec>)
 800d854:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800d858:	491c      	ldr	r1, [pc, #112]	; (800d8cc <mem_malloc+0x204>)
 800d85a:	4818      	ldr	r0, [pc, #96]	; (800d8bc <mem_malloc+0x1f4>)
 800d85c:	f00c fdb2 	bl	801a3c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	f003 0303 	and.w	r3, r3, #3
 800d866:	2b00      	cmp	r3, #0
 800d868:	d006      	beq.n	800d878 <mem_malloc+0x1b0>
 800d86a:	4b12      	ldr	r3, [pc, #72]	; (800d8b4 <mem_malloc+0x1ec>)
 800d86c:	f240 32be 	movw	r2, #958	; 0x3be
 800d870:	4917      	ldr	r1, [pc, #92]	; (800d8d0 <mem_malloc+0x208>)
 800d872:	4812      	ldr	r0, [pc, #72]	; (800d8bc <mem_malloc+0x1f4>)
 800d874:	f00c fda6 	bl	801a3c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	3308      	adds	r3, #8
 800d87c:	e011      	b.n	800d8a2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d87e:	8bfb      	ldrh	r3, [r7, #30]
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff fc33 	bl	800d0ec <ptr_to_mem>
 800d886:	4603      	mov	r3, r0
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d88c:	8bfa      	ldrh	r2, [r7, #30]
 800d88e:	8bbb      	ldrh	r3, [r7, #28]
 800d890:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d894:	429a      	cmp	r2, r3
 800d896:	f4ff af41 	bcc.w	800d71c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d89a:	4804      	ldr	r0, [pc, #16]	; (800d8ac <mem_malloc+0x1e4>)
 800d89c:	f00c fce7 	bl	801a26e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3720      	adds	r7, #32
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	20004b7c 	.word	0x20004b7c
 800d8b0:	20004b80 	.word	0x20004b80
 800d8b4:	0801c400 	.word	0x0801c400
 800d8b8:	0801c5c4 	.word	0x0801c5c4
 800d8bc:	0801c448 	.word	0x0801c448
 800d8c0:	20004b78 	.word	0x20004b78
 800d8c4:	0801c5d8 	.word	0x0801c5d8
 800d8c8:	0801c5f4 	.word	0x0801c5f4
 800d8cc:	0801c624 	.word	0x0801c624
 800d8d0:	0801c654 	.word	0x0801c654

0800d8d4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	3303      	adds	r3, #3
 800d8ea:	f023 0303 	bic.w	r3, r3, #3
 800d8ee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	60fb      	str	r3, [r7, #12]
 800d8f4:	e011      	b.n	800d91a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	881b      	ldrh	r3, [r3, #0]
 800d90c:	461a      	mov	r2, r3
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	4413      	add	r3, r2
 800d912:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	3301      	adds	r3, #1
 800d918:	60fb      	str	r3, [r7, #12]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	885b      	ldrh	r3, [r3, #2]
 800d91e:	461a      	mov	r2, r3
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	4293      	cmp	r3, r2
 800d924:	dbe7      	blt.n	800d8f6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d926:	bf00      	nop
 800d928:	3714      	adds	r7, #20
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
	...

0800d934 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d93a:	2300      	movs	r3, #0
 800d93c:	80fb      	strh	r3, [r7, #6]
 800d93e:	e009      	b.n	800d954 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d940:	88fb      	ldrh	r3, [r7, #6]
 800d942:	4a08      	ldr	r2, [pc, #32]	; (800d964 <memp_init+0x30>)
 800d944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d948:	4618      	mov	r0, r3
 800d94a:	f7ff ffc3 	bl	800d8d4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d94e:	88fb      	ldrh	r3, [r7, #6]
 800d950:	3301      	adds	r3, #1
 800d952:	80fb      	strh	r3, [r7, #6]
 800d954:	88fb      	ldrh	r3, [r7, #6]
 800d956:	2b0c      	cmp	r3, #12
 800d958:	d9f2      	bls.n	800d940 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d95a:	bf00      	nop
 800d95c:	3708      	adds	r7, #8
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	0801f2a4 	.word	0x0801f2a4

0800d968 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d970:	f00c fcaa 	bl	801a2c8 <sys_arch_protect>
 800d974:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d015      	beq.n	800d9b0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	6812      	ldr	r2, [r2, #0]
 800d98c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	f003 0303 	and.w	r3, r3, #3
 800d994:	2b00      	cmp	r3, #0
 800d996:	d006      	beq.n	800d9a6 <do_memp_malloc_pool+0x3e>
 800d998:	4b09      	ldr	r3, [pc, #36]	; (800d9c0 <do_memp_malloc_pool+0x58>)
 800d99a:	f240 1219 	movw	r2, #281	; 0x119
 800d99e:	4909      	ldr	r1, [pc, #36]	; (800d9c4 <do_memp_malloc_pool+0x5c>)
 800d9a0:	4809      	ldr	r0, [pc, #36]	; (800d9c8 <do_memp_malloc_pool+0x60>)
 800d9a2:	f00c fd0f 	bl	801a3c4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f00c fc9c 	bl	801a2e4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	e003      	b.n	800d9b8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	f00c fc97 	bl	801a2e4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	0801c678 	.word	0x0801c678
 800d9c4:	0801c6a8 	.word	0x0801c6a8
 800d9c8:	0801c6cc 	.word	0x0801c6cc

0800d9cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b084      	sub	sp, #16
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d9d6:	79fb      	ldrb	r3, [r7, #7]
 800d9d8:	2b0c      	cmp	r3, #12
 800d9da:	d908      	bls.n	800d9ee <memp_malloc+0x22>
 800d9dc:	4b0a      	ldr	r3, [pc, #40]	; (800da08 <memp_malloc+0x3c>)
 800d9de:	f240 1257 	movw	r2, #343	; 0x157
 800d9e2:	490a      	ldr	r1, [pc, #40]	; (800da0c <memp_malloc+0x40>)
 800d9e4:	480a      	ldr	r0, [pc, #40]	; (800da10 <memp_malloc+0x44>)
 800d9e6:	f00c fced 	bl	801a3c4 <iprintf>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e008      	b.n	800da00 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d9ee:	79fb      	ldrb	r3, [r7, #7]
 800d9f0:	4a08      	ldr	r2, [pc, #32]	; (800da14 <memp_malloc+0x48>)
 800d9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff ffb6 	bl	800d968 <do_memp_malloc_pool>
 800d9fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	0801c678 	.word	0x0801c678
 800da0c:	0801c708 	.word	0x0801c708
 800da10:	0801c6cc 	.word	0x0801c6cc
 800da14:	0801f2a4 	.word	0x0801f2a4

0800da18 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	f003 0303 	and.w	r3, r3, #3
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d006      	beq.n	800da3a <do_memp_free_pool+0x22>
 800da2c:	4b0d      	ldr	r3, [pc, #52]	; (800da64 <do_memp_free_pool+0x4c>)
 800da2e:	f240 126d 	movw	r2, #365	; 0x16d
 800da32:	490d      	ldr	r1, [pc, #52]	; (800da68 <do_memp_free_pool+0x50>)
 800da34:	480d      	ldr	r0, [pc, #52]	; (800da6c <do_memp_free_pool+0x54>)
 800da36:	f00c fcc5 	bl	801a3c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800da3e:	f00c fc43 	bl	801a2c8 <sys_arch_protect>
 800da42:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800da56:	68b8      	ldr	r0, [r7, #8]
 800da58:	f00c fc44 	bl	801a2e4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800da5c:	bf00      	nop
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	0801c678 	.word	0x0801c678
 800da68:	0801c728 	.word	0x0801c728
 800da6c:	0801c6cc 	.word	0x0801c6cc

0800da70 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	4603      	mov	r3, r0
 800da78:	6039      	str	r1, [r7, #0]
 800da7a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800da7c:	79fb      	ldrb	r3, [r7, #7]
 800da7e:	2b0c      	cmp	r3, #12
 800da80:	d907      	bls.n	800da92 <memp_free+0x22>
 800da82:	4b0c      	ldr	r3, [pc, #48]	; (800dab4 <memp_free+0x44>)
 800da84:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800da88:	490b      	ldr	r1, [pc, #44]	; (800dab8 <memp_free+0x48>)
 800da8a:	480c      	ldr	r0, [pc, #48]	; (800dabc <memp_free+0x4c>)
 800da8c:	f00c fc9a 	bl	801a3c4 <iprintf>
 800da90:	e00c      	b.n	800daac <memp_free+0x3c>

  if (mem == NULL) {
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d008      	beq.n	800daaa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800da98:	79fb      	ldrb	r3, [r7, #7]
 800da9a:	4a09      	ldr	r2, [pc, #36]	; (800dac0 <memp_free+0x50>)
 800da9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7ff ffb8 	bl	800da18 <do_memp_free_pool>
 800daa8:	e000      	b.n	800daac <memp_free+0x3c>
    return;
 800daaa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	0801c678 	.word	0x0801c678
 800dab8:	0801c748 	.word	0x0801c748
 800dabc:	0801c6cc 	.word	0x0801c6cc
 800dac0:	0801f2a4 	.word	0x0801f2a4

0800dac4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dac4:	b480      	push	{r7}
 800dac6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dac8:	bf00      	nop
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
	...

0800dad4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
 800dae0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d108      	bne.n	800dafa <netif_add+0x26>
 800dae8:	4b5b      	ldr	r3, [pc, #364]	; (800dc58 <netif_add+0x184>)
 800daea:	f240 1227 	movw	r2, #295	; 0x127
 800daee:	495b      	ldr	r1, [pc, #364]	; (800dc5c <netif_add+0x188>)
 800daf0:	485b      	ldr	r0, [pc, #364]	; (800dc60 <netif_add+0x18c>)
 800daf2:	f00c fc67 	bl	801a3c4 <iprintf>
 800daf6:	2300      	movs	r3, #0
 800daf8:	e0a9      	b.n	800dc4e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d108      	bne.n	800db12 <netif_add+0x3e>
 800db00:	4b55      	ldr	r3, [pc, #340]	; (800dc58 <netif_add+0x184>)
 800db02:	f44f 7294 	mov.w	r2, #296	; 0x128
 800db06:	4957      	ldr	r1, [pc, #348]	; (800dc64 <netif_add+0x190>)
 800db08:	4855      	ldr	r0, [pc, #340]	; (800dc60 <netif_add+0x18c>)
 800db0a:	f00c fc5b 	bl	801a3c4 <iprintf>
 800db0e:	2300      	movs	r3, #0
 800db10:	e09d      	b.n	800dc4e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d101      	bne.n	800db1c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800db18:	4b53      	ldr	r3, [pc, #332]	; (800dc68 <netif_add+0x194>)
 800db1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d101      	bne.n	800db26 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800db22:	4b51      	ldr	r3, [pc, #324]	; (800dc68 <netif_add+0x194>)
 800db24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800db2c:	4b4e      	ldr	r3, [pc, #312]	; (800dc68 <netif_add+0x194>)
 800db2e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2200      	movs	r2, #0
 800db34:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2200      	movs	r2, #0
 800db3a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	4a49      	ldr	r2, [pc, #292]	; (800dc6c <netif_add+0x198>)
 800db46:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2200      	movs	r2, #0
 800db4c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2200      	movs	r2, #0
 800db52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	3324      	adds	r3, #36	; 0x24
 800db5a:	2204      	movs	r2, #4
 800db5c:	2100      	movs	r1, #0
 800db5e:	4618      	mov	r0, r3
 800db60:	f00c fc27 	bl	801a3b2 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2200      	movs	r2, #0
 800db68:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6a3a      	ldr	r2, [r7, #32]
 800db6e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800db70:	4b3f      	ldr	r3, [pc, #252]	; (800dc70 <netif_add+0x19c>)
 800db72:	781a      	ldrb	r2, [r3, #0]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db7e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	68b9      	ldr	r1, [r7, #8]
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f000 f914 	bl	800ddb4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	4798      	blx	r3
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <netif_add+0xc8>
    return NULL;
 800db98:	2300      	movs	r3, #0
 800db9a:	e058      	b.n	800dc4e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dba2:	2bff      	cmp	r3, #255	; 0xff
 800dba4:	d103      	bne.n	800dbae <netif_add+0xda>
        netif->num = 0;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dbb2:	4b30      	ldr	r3, [pc, #192]	; (800dc74 <netif_add+0x1a0>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	617b      	str	r3, [r7, #20]
 800dbb8:	e02b      	b.n	800dc12 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dbba:	697a      	ldr	r2, [r7, #20]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d106      	bne.n	800dbd0 <netif_add+0xfc>
 800dbc2:	4b25      	ldr	r3, [pc, #148]	; (800dc58 <netif_add+0x184>)
 800dbc4:	f240 128b 	movw	r2, #395	; 0x18b
 800dbc8:	492b      	ldr	r1, [pc, #172]	; (800dc78 <netif_add+0x1a4>)
 800dbca:	4825      	ldr	r0, [pc, #148]	; (800dc60 <netif_add+0x18c>)
 800dbcc:	f00c fbfa 	bl	801a3c4 <iprintf>
        num_netifs++;
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	2bff      	cmp	r3, #255	; 0xff
 800dbda:	dd06      	ble.n	800dbea <netif_add+0x116>
 800dbdc:	4b1e      	ldr	r3, [pc, #120]	; (800dc58 <netif_add+0x184>)
 800dbde:	f240 128d 	movw	r2, #397	; 0x18d
 800dbe2:	4926      	ldr	r1, [pc, #152]	; (800dc7c <netif_add+0x1a8>)
 800dbe4:	481e      	ldr	r0, [pc, #120]	; (800dc60 <netif_add+0x18c>)
 800dbe6:	f00c fbed 	bl	801a3c4 <iprintf>
        if (netif2->num == netif->num) {
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d108      	bne.n	800dc0c <netif_add+0x138>
          netif->num++;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc00:	3301      	adds	r3, #1
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800dc0a:	e005      	b.n	800dc18 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	617b      	str	r3, [r7, #20]
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d1d0      	bne.n	800dbba <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1be      	bne.n	800db9c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc24:	2bfe      	cmp	r3, #254	; 0xfe
 800dc26:	d103      	bne.n	800dc30 <netif_add+0x15c>
    netif_num = 0;
 800dc28:	4b11      	ldr	r3, [pc, #68]	; (800dc70 <netif_add+0x19c>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	701a      	strb	r2, [r3, #0]
 800dc2e:	e006      	b.n	800dc3e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc36:	3301      	adds	r3, #1
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	4b0d      	ldr	r3, [pc, #52]	; (800dc70 <netif_add+0x19c>)
 800dc3c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dc3e:	4b0d      	ldr	r3, [pc, #52]	; (800dc74 <netif_add+0x1a0>)
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dc46:	4a0b      	ldr	r2, [pc, #44]	; (800dc74 <netif_add+0x1a0>)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3718      	adds	r7, #24
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	0801c764 	.word	0x0801c764
 800dc5c:	0801c7f8 	.word	0x0801c7f8
 800dc60:	0801c7b4 	.word	0x0801c7b4
 800dc64:	0801c814 	.word	0x0801c814
 800dc68:	0801f328 	.word	0x0801f328
 800dc6c:	0800e097 	.word	0x0800e097
 800dc70:	20004bb8 	.word	0x20004bb8
 800dc74:	2000bac0 	.word	0x2000bac0
 800dc78:	0801c838 	.word	0x0801c838
 800dc7c:	0801c84c 	.word	0x0801c84c

0800dc80 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dc8a:	6839      	ldr	r1, [r7, #0]
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f002 fea3 	bl	80109d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f007 ffd1 	bl	8015c3c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dc9a:	bf00      	nop
 800dc9c:	3708      	adds	r7, #8
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
	...

0800dca4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d106      	bne.n	800dcc4 <netif_do_set_ipaddr+0x20>
 800dcb6:	4b1d      	ldr	r3, [pc, #116]	; (800dd2c <netif_do_set_ipaddr+0x88>)
 800dcb8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dcbc:	491c      	ldr	r1, [pc, #112]	; (800dd30 <netif_do_set_ipaddr+0x8c>)
 800dcbe:	481d      	ldr	r0, [pc, #116]	; (800dd34 <netif_do_set_ipaddr+0x90>)
 800dcc0:	f00c fb80 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d106      	bne.n	800dcd8 <netif_do_set_ipaddr+0x34>
 800dcca:	4b18      	ldr	r3, [pc, #96]	; (800dd2c <netif_do_set_ipaddr+0x88>)
 800dccc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dcd0:	4917      	ldr	r1, [pc, #92]	; (800dd30 <netif_do_set_ipaddr+0x8c>)
 800dcd2:	4818      	ldr	r0, [pc, #96]	; (800dd34 <netif_do_set_ipaddr+0x90>)
 800dcd4:	f00c fb76 	bl	801a3c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	3304      	adds	r3, #4
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d01c      	beq.n	800dd20 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	3304      	adds	r3, #4
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dcf6:	f107 0314 	add.w	r3, r7, #20
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff ffbf 	bl	800dc80 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <netif_do_set_ipaddr+0x6a>
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	e000      	b.n	800dd10 <netif_do_set_ipaddr+0x6c>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dd14:	2101      	movs	r1, #1
 800dd16:	68f8      	ldr	r0, [r7, #12]
 800dd18:	f000 f8d2 	bl	800dec0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e000      	b.n	800dd22 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	0801c764 	.word	0x0801c764
 800dd30:	0801c87c 	.word	0x0801c87c
 800dd34:	0801c7b4 	.word	0x0801c7b4

0800dd38 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	3308      	adds	r3, #8
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d00a      	beq.n	800dd68 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <netif_do_set_netmask+0x26>
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	e000      	b.n	800dd60 <netif_do_set_netmask+0x28>
 800dd5e:	2300      	movs	r3, #0
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dd64:	2301      	movs	r3, #1
 800dd66:	e000      	b.n	800dd6a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3714      	adds	r7, #20
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dd76:	b480      	push	{r7}
 800dd78:	b085      	sub	sp, #20
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	60f8      	str	r0, [r7, #12]
 800dd7e:	60b9      	str	r1, [r7, #8]
 800dd80:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	330c      	adds	r3, #12
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d00a      	beq.n	800dda6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d002      	beq.n	800dd9c <netif_do_set_gw+0x26>
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	e000      	b.n	800dd9e <netif_do_set_gw+0x28>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dda2:	2301      	movs	r3, #1
 800dda4:	e000      	b.n	800dda8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dda6:	2300      	movs	r3, #0
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3714      	adds	r7, #20
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr

0800ddb4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b088      	sub	sp, #32
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	607a      	str	r2, [r7, #4]
 800ddc0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ddd0:	4b1c      	ldr	r3, [pc, #112]	; (800de44 <netif_set_addr+0x90>)
 800ddd2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d101      	bne.n	800ddde <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ddda:	4b1a      	ldr	r3, [pc, #104]	; (800de44 <netif_set_addr+0x90>)
 800dddc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d101      	bne.n	800dde8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dde4:	4b17      	ldr	r3, [pc, #92]	; (800de44 <netif_set_addr+0x90>)
 800dde6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <netif_set_addr+0x42>
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d101      	bne.n	800ddfa <netif_set_addr+0x46>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e000      	b.n	800ddfc <netif_set_addr+0x48>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d006      	beq.n	800de12 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800de04:	f107 0310 	add.w	r3, r7, #16
 800de08:	461a      	mov	r2, r3
 800de0a:	68b9      	ldr	r1, [r7, #8]
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f7ff ff49 	bl	800dca4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800de12:	69fa      	ldr	r2, [r7, #28]
 800de14:	6879      	ldr	r1, [r7, #4]
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f7ff ff8e 	bl	800dd38 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800de1c:	69ba      	ldr	r2, [r7, #24]
 800de1e:	6839      	ldr	r1, [r7, #0]
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f7ff ffa8 	bl	800dd76 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d106      	bne.n	800de3a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800de2c:	f107 0310 	add.w	r3, r7, #16
 800de30:	461a      	mov	r2, r3
 800de32:	68b9      	ldr	r1, [r7, #8]
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f7ff ff35 	bl	800dca4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800de3a:	bf00      	nop
 800de3c:	3720      	adds	r7, #32
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	0801f328 	.word	0x0801f328

0800de48 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800de50:	4a04      	ldr	r2, [pc, #16]	; (800de64 <netif_set_default+0x1c>)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800de56:	bf00      	nop
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	2000bac4 	.word	0x2000bac4

0800de68 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d107      	bne.n	800de86 <netif_set_up+0x1e>
 800de76:	4b0f      	ldr	r3, [pc, #60]	; (800deb4 <netif_set_up+0x4c>)
 800de78:	f44f 7254 	mov.w	r2, #848	; 0x350
 800de7c:	490e      	ldr	r1, [pc, #56]	; (800deb8 <netif_set_up+0x50>)
 800de7e:	480f      	ldr	r0, [pc, #60]	; (800debc <netif_set_up+0x54>)
 800de80:	f00c faa0 	bl	801a3c4 <iprintf>
 800de84:	e013      	b.n	800deae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10c      	bne.n	800deae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de9a:	f043 0301 	orr.w	r3, r3, #1
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dea6:	2103      	movs	r1, #3
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 f809 	bl	800dec0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	0801c764 	.word	0x0801c764
 800deb8:	0801c8ec 	.word	0x0801c8ec
 800debc:	0801c7b4 	.word	0x0801c7b4

0800dec0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	460b      	mov	r3, r1
 800deca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d106      	bne.n	800dee0 <netif_issue_reports+0x20>
 800ded2:	4b18      	ldr	r3, [pc, #96]	; (800df34 <netif_issue_reports+0x74>)
 800ded4:	f240 326d 	movw	r2, #877	; 0x36d
 800ded8:	4917      	ldr	r1, [pc, #92]	; (800df38 <netif_issue_reports+0x78>)
 800deda:	4818      	ldr	r0, [pc, #96]	; (800df3c <netif_issue_reports+0x7c>)
 800dedc:	f00c fa72 	bl	801a3c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dee6:	f003 0304 	and.w	r3, r3, #4
 800deea:	2b00      	cmp	r3, #0
 800deec:	d01e      	beq.n	800df2c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800def4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800def8:	2b00      	cmp	r3, #0
 800defa:	d017      	beq.n	800df2c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800defc:	78fb      	ldrb	r3, [r7, #3]
 800defe:	f003 0301 	and.w	r3, r3, #1
 800df02:	2b00      	cmp	r3, #0
 800df04:	d013      	beq.n	800df2e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3304      	adds	r3, #4
 800df0a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00e      	beq.n	800df2e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df16:	f003 0308 	and.w	r3, r3, #8
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d007      	beq.n	800df2e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	3304      	adds	r3, #4
 800df22:	4619      	mov	r1, r3
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f00a fc99 	bl	801885c <etharp_request>
 800df2a:	e000      	b.n	800df2e <netif_issue_reports+0x6e>
    return;
 800df2c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	0801c764 	.word	0x0801c764
 800df38:	0801c908 	.word	0x0801c908
 800df3c:	0801c7b4 	.word	0x0801c7b4

0800df40 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d107      	bne.n	800df5e <netif_set_down+0x1e>
 800df4e:	4b12      	ldr	r3, [pc, #72]	; (800df98 <netif_set_down+0x58>)
 800df50:	f240 329b 	movw	r2, #923	; 0x39b
 800df54:	4911      	ldr	r1, [pc, #68]	; (800df9c <netif_set_down+0x5c>)
 800df56:	4812      	ldr	r0, [pc, #72]	; (800dfa0 <netif_set_down+0x60>)
 800df58:	f00c fa34 	bl	801a3c4 <iprintf>
 800df5c:	e019      	b.n	800df92 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df64:	f003 0301 	and.w	r3, r3, #1
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d012      	beq.n	800df92 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df72:	f023 0301 	bic.w	r3, r3, #1
 800df76:	b2da      	uxtb	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df84:	f003 0308 	and.w	r3, r3, #8
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d002      	beq.n	800df92 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f00a f81f 	bl	8017fd0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	0801c764 	.word	0x0801c764
 800df9c:	0801c92c 	.word	0x0801c92c
 800dfa0:	0801c7b4 	.word	0x0801c7b4

0800dfa4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d107      	bne.n	800dfc2 <netif_set_link_up+0x1e>
 800dfb2:	4b15      	ldr	r3, [pc, #84]	; (800e008 <netif_set_link_up+0x64>)
 800dfb4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800dfb8:	4914      	ldr	r1, [pc, #80]	; (800e00c <netif_set_link_up+0x68>)
 800dfba:	4815      	ldr	r0, [pc, #84]	; (800e010 <netif_set_link_up+0x6c>)
 800dfbc:	f00c fa02 	bl	801a3c4 <iprintf>
 800dfc0:	e01e      	b.n	800e000 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dfc8:	f003 0304 	and.w	r3, r3, #4
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d117      	bne.n	800e000 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dfd6:	f043 0304 	orr.w	r3, r3, #4
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f008 fa54 	bl	8016490 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dfe8:	2103      	movs	r1, #3
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff ff68 	bl	800dec0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	69db      	ldr	r3, [r3, #28]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d003      	beq.n	800e000 <netif_set_link_up+0x5c>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	69db      	ldr	r3, [r3, #28]
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e000:	3708      	adds	r7, #8
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	0801c764 	.word	0x0801c764
 800e00c:	0801c94c 	.word	0x0801c94c
 800e010:	0801c7b4 	.word	0x0801c7b4

0800e014 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d107      	bne.n	800e032 <netif_set_link_down+0x1e>
 800e022:	4b11      	ldr	r3, [pc, #68]	; (800e068 <netif_set_link_down+0x54>)
 800e024:	f240 4206 	movw	r2, #1030	; 0x406
 800e028:	4910      	ldr	r1, [pc, #64]	; (800e06c <netif_set_link_down+0x58>)
 800e02a:	4811      	ldr	r0, [pc, #68]	; (800e070 <netif_set_link_down+0x5c>)
 800e02c:	f00c f9ca 	bl	801a3c4 <iprintf>
 800e030:	e017      	b.n	800e062 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e038:	f003 0304 	and.w	r3, r3, #4
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d010      	beq.n	800e062 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e046:	f023 0304 	bic.w	r3, r3, #4
 800e04a:	b2da      	uxtb	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	69db      	ldr	r3, [r3, #28]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <netif_set_link_down+0x4e>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	69db      	ldr	r3, [r3, #28]
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	0801c764 	.word	0x0801c764
 800e06c:	0801c970 	.word	0x0801c970
 800e070:	0801c7b4 	.word	0x0801c7b4

0800e074 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	61da      	str	r2, [r3, #28]
  }
}
 800e08a:	bf00      	nop
 800e08c:	370c      	adds	r7, #12
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e096:	b480      	push	{r7}
 800e098:	b085      	sub	sp, #20
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	60f8      	str	r0, [r7, #12]
 800e09e:	60b9      	str	r1, [r7, #8]
 800e0a0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e0a2:	f06f 030b 	mvn.w	r3, #11
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3714      	adds	r7, #20
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr
	...

0800e0b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e0be:	79fb      	ldrb	r3, [r7, #7]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d013      	beq.n	800e0ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e0c4:	4b0d      	ldr	r3, [pc, #52]	; (800e0fc <netif_get_by_index+0x48>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	60fb      	str	r3, [r7, #12]
 800e0ca:	e00c      	b.n	800e0e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	79fa      	ldrb	r2, [r7, #7]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d101      	bne.n	800e0e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	e006      	b.n	800e0ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	60fb      	str	r3, [r7, #12]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d1ef      	bne.n	800e0cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3714      	adds	r7, #20
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	2000bac0 	.word	0x2000bac0

0800e100 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d101      	bne.n	800e112 <netif_find+0x12>
    return NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	e028      	b.n	800e164 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	3302      	adds	r3, #2
 800e116:	4618      	mov	r0, r3
 800e118:	f00c f8f4 	bl	801a304 <atoi>
 800e11c:	4603      	mov	r3, r0
 800e11e:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 800e120:	4b12      	ldr	r3, [pc, #72]	; (800e16c <netif_find+0x6c>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	60fb      	str	r3, [r7, #12]
 800e126:	e019      	b.n	800e15c <netif_find+0x5c>
    if (num == netif->num &&
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e12e:	7afa      	ldrb	r2, [r7, #11]
 800e130:	429a      	cmp	r2, r3
 800e132:	d110      	bne.n	800e156 <netif_find+0x56>
        name[0] == netif->name[0] &&
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	781a      	ldrb	r2, [r3, #0]
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if (num == netif->num &&
 800e13e:	429a      	cmp	r2, r3
 800e140:	d109      	bne.n	800e156 <netif_find+0x56>
        name[1] == netif->name[1]) {
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	3301      	adds	r3, #1
 800e146:	781a      	ldrb	r2, [r3, #0]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
        name[0] == netif->name[0] &&
 800e14e:	429a      	cmp	r2, r3
 800e150:	d101      	bne.n	800e156 <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	e006      	b.n	800e164 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	60fb      	str	r3, [r7, #12]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d1e2      	bne.n	800e128 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 800e162:	2300      	movs	r3, #0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	2000bac0 	.word	0x2000bac0

0800e170 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e176:	f00c f8a7 	bl	801a2c8 <sys_arch_protect>
 800e17a:	6038      	str	r0, [r7, #0]
 800e17c:	4b0d      	ldr	r3, [pc, #52]	; (800e1b4 <pbuf_free_ooseq+0x44>)
 800e17e:	2200      	movs	r2, #0
 800e180:	701a      	strb	r2, [r3, #0]
 800e182:	6838      	ldr	r0, [r7, #0]
 800e184:	f00c f8ae 	bl	801a2e4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e188:	4b0b      	ldr	r3, [pc, #44]	; (800e1b8 <pbuf_free_ooseq+0x48>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	607b      	str	r3, [r7, #4]
 800e18e:	e00a      	b.n	800e1a6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e194:	2b00      	cmp	r3, #0
 800e196:	d003      	beq.n	800e1a0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f002 fc5b 	bl	8010a54 <tcp_free_ooseq>
      return;
 800e19e:	e005      	b.n	800e1ac <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	607b      	str	r3, [r7, #4]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1f1      	bne.n	800e190 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	2000bac8 	.word	0x2000bac8
 800e1b8:	2000bad0 	.word	0x2000bad0

0800e1bc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e1c4:	f7ff ffd4 	bl	800e170 <pbuf_free_ooseq>
}
 800e1c8:	bf00      	nop
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e1d6:	f00c f877 	bl	801a2c8 <sys_arch_protect>
 800e1da:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e1dc:	4b0f      	ldr	r3, [pc, #60]	; (800e21c <pbuf_pool_is_empty+0x4c>)
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e1e2:	4b0e      	ldr	r3, [pc, #56]	; (800e21c <pbuf_pool_is_empty+0x4c>)
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f00c f87b 	bl	801a2e4 <sys_arch_unprotect>

  if (!queued) {
 800e1ee:	78fb      	ldrb	r3, [r7, #3]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d10f      	bne.n	800e214 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	480a      	ldr	r0, [pc, #40]	; (800e220 <pbuf_pool_is_empty+0x50>)
 800e1f8:	f7fe fe92 	bl	800cf20 <tcpip_try_callback>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d008      	beq.n	800e214 <pbuf_pool_is_empty+0x44>
 800e202:	f00c f861 	bl	801a2c8 <sys_arch_protect>
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	4b04      	ldr	r3, [pc, #16]	; (800e21c <pbuf_pool_is_empty+0x4c>)
 800e20a:	2200      	movs	r2, #0
 800e20c:	701a      	strb	r2, [r3, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f00c f868 	bl	801a2e4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e214:	bf00      	nop
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	2000bac8 	.word	0x2000bac8
 800e220:	0800e1bd 	.word	0x0800e1bd

0800e224 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	4611      	mov	r1, r2
 800e230:	461a      	mov	r2, r3
 800e232:	460b      	mov	r3, r1
 800e234:	80fb      	strh	r3, [r7, #6]
 800e236:	4613      	mov	r3, r2
 800e238:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2200      	movs	r2, #0
 800e23e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	68ba      	ldr	r2, [r7, #8]
 800e244:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	88fa      	ldrh	r2, [r7, #6]
 800e24a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	88ba      	ldrh	r2, [r7, #4]
 800e250:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e252:	8b3b      	ldrh	r3, [r7, #24]
 800e254:	b2da      	uxtb	r2, r3
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	7f3a      	ldrb	r2, [r7, #28]
 800e25e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2201      	movs	r2, #1
 800e264:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	73da      	strb	r2, [r3, #15]
}
 800e26c:	bf00      	nop
 800e26e:	3714      	adds	r7, #20
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b08c      	sub	sp, #48	; 0x30
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	4603      	mov	r3, r0
 800e280:	71fb      	strb	r3, [r7, #7]
 800e282:	460b      	mov	r3, r1
 800e284:	80bb      	strh	r3, [r7, #4]
 800e286:	4613      	mov	r3, r2
 800e288:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e28a:	79fb      	ldrb	r3, [r7, #7]
 800e28c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e28e:	887b      	ldrh	r3, [r7, #2]
 800e290:	2b41      	cmp	r3, #65	; 0x41
 800e292:	d00b      	beq.n	800e2ac <pbuf_alloc+0x34>
 800e294:	2b41      	cmp	r3, #65	; 0x41
 800e296:	dc02      	bgt.n	800e29e <pbuf_alloc+0x26>
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d007      	beq.n	800e2ac <pbuf_alloc+0x34>
 800e29c:	e0c2      	b.n	800e424 <pbuf_alloc+0x1ac>
 800e29e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e2a2:	d00b      	beq.n	800e2bc <pbuf_alloc+0x44>
 800e2a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e2a8:	d070      	beq.n	800e38c <pbuf_alloc+0x114>
 800e2aa:	e0bb      	b.n	800e424 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e2ac:	887a      	ldrh	r2, [r7, #2]
 800e2ae:	88bb      	ldrh	r3, [r7, #4]
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	f000 f8d2 	bl	800e45c <pbuf_alloc_reference>
 800e2b8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e2ba:	e0bd      	b.n	800e438 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e2c4:	88bb      	ldrh	r3, [r7, #4]
 800e2c6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e2c8:	200c      	movs	r0, #12
 800e2ca:	f7ff fb7f 	bl	800d9cc <memp_malloc>
 800e2ce:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d109      	bne.n	800e2ea <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800e2d6:	f7ff ff7b 	bl	800e1d0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d002      	beq.n	800e2e6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800e2e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2e2:	f000 faa9 	bl	800e838 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	e0a7      	b.n	800e43a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e2ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2ec:	3303      	adds	r3, #3
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	f023 0303 	bic.w	r3, r3, #3
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	8b7a      	ldrh	r2, [r7, #26]
 800e2fe:	4293      	cmp	r3, r2
 800e300:	bf28      	it	cs
 800e302:	4613      	movcs	r3, r2
 800e304:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e306:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e308:	3310      	adds	r3, #16
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	4413      	add	r3, r2
 800e30e:	3303      	adds	r3, #3
 800e310:	f023 0303 	bic.w	r3, r3, #3
 800e314:	4618      	mov	r0, r3
 800e316:	89f9      	ldrh	r1, [r7, #14]
 800e318:	8b7a      	ldrh	r2, [r7, #26]
 800e31a:	2300      	movs	r3, #0
 800e31c:	9301      	str	r3, [sp, #4]
 800e31e:	887b      	ldrh	r3, [r7, #2]
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	460b      	mov	r3, r1
 800e324:	4601      	mov	r1, r0
 800e326:	6938      	ldr	r0, [r7, #16]
 800e328:	f7ff ff7c 	bl	800e224 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	f003 0303 	and.w	r3, r3, #3
 800e334:	2b00      	cmp	r3, #0
 800e336:	d006      	beq.n	800e346 <pbuf_alloc+0xce>
 800e338:	4b42      	ldr	r3, [pc, #264]	; (800e444 <pbuf_alloc+0x1cc>)
 800e33a:	f240 1201 	movw	r2, #257	; 0x101
 800e33e:	4942      	ldr	r1, [pc, #264]	; (800e448 <pbuf_alloc+0x1d0>)
 800e340:	4842      	ldr	r0, [pc, #264]	; (800e44c <pbuf_alloc+0x1d4>)
 800e342:	f00c f83f 	bl	801a3c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e346:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e348:	3303      	adds	r3, #3
 800e34a:	f023 0303 	bic.w	r3, r3, #3
 800e34e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e352:	d106      	bne.n	800e362 <pbuf_alloc+0xea>
 800e354:	4b3b      	ldr	r3, [pc, #236]	; (800e444 <pbuf_alloc+0x1cc>)
 800e356:	f240 1203 	movw	r2, #259	; 0x103
 800e35a:	493d      	ldr	r1, [pc, #244]	; (800e450 <pbuf_alloc+0x1d8>)
 800e35c:	483b      	ldr	r0, [pc, #236]	; (800e44c <pbuf_alloc+0x1d4>)
 800e35e:	f00c f831 	bl	801a3c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e364:	2b00      	cmp	r3, #0
 800e366:	d102      	bne.n	800e36e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	627b      	str	r3, [r7, #36]	; 0x24
 800e36c:	e002      	b.n	800e374 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e36e:	69fb      	ldr	r3, [r7, #28]
 800e370:	693a      	ldr	r2, [r7, #16]
 800e372:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e378:	8b7a      	ldrh	r2, [r7, #26]
 800e37a:	89fb      	ldrh	r3, [r7, #14]
 800e37c:	1ad3      	subs	r3, r2, r3
 800e37e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e380:	2300      	movs	r3, #0
 800e382:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e384:	8b7b      	ldrh	r3, [r7, #26]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d19e      	bne.n	800e2c8 <pbuf_alloc+0x50>
      break;
 800e38a:	e055      	b.n	800e438 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e38c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e38e:	3303      	adds	r3, #3
 800e390:	b29b      	uxth	r3, r3
 800e392:	f023 0303 	bic.w	r3, r3, #3
 800e396:	b29a      	uxth	r2, r3
 800e398:	88bb      	ldrh	r3, [r7, #4]
 800e39a:	3303      	adds	r3, #3
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	f023 0303 	bic.w	r3, r3, #3
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	4413      	add	r3, r2
 800e3a6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e3a8:	8b3b      	ldrh	r3, [r7, #24]
 800e3aa:	3310      	adds	r3, #16
 800e3ac:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e3ae:	8b3a      	ldrh	r2, [r7, #24]
 800e3b0:	88bb      	ldrh	r3, [r7, #4]
 800e3b2:	3303      	adds	r3, #3
 800e3b4:	f023 0303 	bic.w	r3, r3, #3
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d306      	bcc.n	800e3ca <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e3bc:	8afa      	ldrh	r2, [r7, #22]
 800e3be:	88bb      	ldrh	r3, [r7, #4]
 800e3c0:	3303      	adds	r3, #3
 800e3c2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d201      	bcs.n	800e3ce <pbuf_alloc+0x156>
        return NULL;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	e035      	b.n	800e43a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e3ce:	8afb      	ldrh	r3, [r7, #22]
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7ff f979 	bl	800d6c8 <mem_malloc>
 800e3d6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d101      	bne.n	800e3e2 <pbuf_alloc+0x16a>
        return NULL;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	e02b      	b.n	800e43a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e3e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3e4:	3310      	adds	r3, #16
 800e3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3e8:	4413      	add	r3, r2
 800e3ea:	3303      	adds	r3, #3
 800e3ec:	f023 0303 	bic.w	r3, r3, #3
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	88b9      	ldrh	r1, [r7, #4]
 800e3f4:	88ba      	ldrh	r2, [r7, #4]
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	9301      	str	r3, [sp, #4]
 800e3fa:	887b      	ldrh	r3, [r7, #2]
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	460b      	mov	r3, r1
 800e400:	4601      	mov	r1, r0
 800e402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e404:	f7ff ff0e 	bl	800e224 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	f003 0303 	and.w	r3, r3, #3
 800e410:	2b00      	cmp	r3, #0
 800e412:	d010      	beq.n	800e436 <pbuf_alloc+0x1be>
 800e414:	4b0b      	ldr	r3, [pc, #44]	; (800e444 <pbuf_alloc+0x1cc>)
 800e416:	f240 1223 	movw	r2, #291	; 0x123
 800e41a:	490e      	ldr	r1, [pc, #56]	; (800e454 <pbuf_alloc+0x1dc>)
 800e41c:	480b      	ldr	r0, [pc, #44]	; (800e44c <pbuf_alloc+0x1d4>)
 800e41e:	f00b ffd1 	bl	801a3c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e422:	e008      	b.n	800e436 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e424:	4b07      	ldr	r3, [pc, #28]	; (800e444 <pbuf_alloc+0x1cc>)
 800e426:	f240 1227 	movw	r2, #295	; 0x127
 800e42a:	490b      	ldr	r1, [pc, #44]	; (800e458 <pbuf_alloc+0x1e0>)
 800e42c:	4807      	ldr	r0, [pc, #28]	; (800e44c <pbuf_alloc+0x1d4>)
 800e42e:	f00b ffc9 	bl	801a3c4 <iprintf>
      return NULL;
 800e432:	2300      	movs	r3, #0
 800e434:	e001      	b.n	800e43a <pbuf_alloc+0x1c2>
      break;
 800e436:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3728      	adds	r7, #40	; 0x28
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	0801c994 	.word	0x0801c994
 800e448:	0801c9c4 	.word	0x0801c9c4
 800e44c:	0801c9f4 	.word	0x0801c9f4
 800e450:	0801ca1c 	.word	0x0801ca1c
 800e454:	0801ca50 	.word	0x0801ca50
 800e458:	0801ca7c 	.word	0x0801ca7c

0800e45c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b086      	sub	sp, #24
 800e460:	af02      	add	r7, sp, #8
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	460b      	mov	r3, r1
 800e466:	807b      	strh	r3, [r7, #2]
 800e468:	4613      	mov	r3, r2
 800e46a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e46c:	883b      	ldrh	r3, [r7, #0]
 800e46e:	2b41      	cmp	r3, #65	; 0x41
 800e470:	d009      	beq.n	800e486 <pbuf_alloc_reference+0x2a>
 800e472:	883b      	ldrh	r3, [r7, #0]
 800e474:	2b01      	cmp	r3, #1
 800e476:	d006      	beq.n	800e486 <pbuf_alloc_reference+0x2a>
 800e478:	4b0f      	ldr	r3, [pc, #60]	; (800e4b8 <pbuf_alloc_reference+0x5c>)
 800e47a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e47e:	490f      	ldr	r1, [pc, #60]	; (800e4bc <pbuf_alloc_reference+0x60>)
 800e480:	480f      	ldr	r0, [pc, #60]	; (800e4c0 <pbuf_alloc_reference+0x64>)
 800e482:	f00b ff9f 	bl	801a3c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e486:	200b      	movs	r0, #11
 800e488:	f7ff faa0 	bl	800d9cc <memp_malloc>
 800e48c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d101      	bne.n	800e498 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e494:	2300      	movs	r3, #0
 800e496:	e00b      	b.n	800e4b0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e498:	8879      	ldrh	r1, [r7, #2]
 800e49a:	887a      	ldrh	r2, [r7, #2]
 800e49c:	2300      	movs	r3, #0
 800e49e:	9301      	str	r3, [sp, #4]
 800e4a0:	883b      	ldrh	r3, [r7, #0]
 800e4a2:	9300      	str	r3, [sp, #0]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	6879      	ldr	r1, [r7, #4]
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f7ff febb 	bl	800e224 <pbuf_init_alloced_pbuf>
  return p;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3710      	adds	r7, #16
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	0801c994 	.word	0x0801c994
 800e4bc:	0801ca98 	.word	0x0801ca98
 800e4c0:	0801c9f4 	.word	0x0801c9f4

0800e4c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b088      	sub	sp, #32
 800e4c8:	af02      	add	r7, sp, #8
 800e4ca:	607b      	str	r3, [r7, #4]
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	73fb      	strb	r3, [r7, #15]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	81bb      	strh	r3, [r7, #12]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e4d8:	7bfb      	ldrb	r3, [r7, #15]
 800e4da:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e4dc:	8a7b      	ldrh	r3, [r7, #18]
 800e4de:	3303      	adds	r3, #3
 800e4e0:	f023 0203 	bic.w	r2, r3, #3
 800e4e4:	89bb      	ldrh	r3, [r7, #12]
 800e4e6:	441a      	add	r2, r3
 800e4e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d901      	bls.n	800e4f2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	e018      	b.n	800e524 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e4f2:	6a3b      	ldr	r3, [r7, #32]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d007      	beq.n	800e508 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e4f8:	8a7b      	ldrh	r3, [r7, #18]
 800e4fa:	3303      	adds	r3, #3
 800e4fc:	f023 0303 	bic.w	r3, r3, #3
 800e500:	6a3a      	ldr	r2, [r7, #32]
 800e502:	4413      	add	r3, r2
 800e504:	617b      	str	r3, [r7, #20]
 800e506:	e001      	b.n	800e50c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e508:	2300      	movs	r3, #0
 800e50a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	89b9      	ldrh	r1, [r7, #12]
 800e510:	89ba      	ldrh	r2, [r7, #12]
 800e512:	2302      	movs	r3, #2
 800e514:	9301      	str	r3, [sp, #4]
 800e516:	897b      	ldrh	r3, [r7, #10]
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	460b      	mov	r3, r1
 800e51c:	6979      	ldr	r1, [r7, #20]
 800e51e:	f7ff fe81 	bl	800e224 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e522:	687b      	ldr	r3, [r7, #4]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3718      	adds	r7, #24
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d106      	bne.n	800e54c <pbuf_realloc+0x20>
 800e53e:	4b3a      	ldr	r3, [pc, #232]	; (800e628 <pbuf_realloc+0xfc>)
 800e540:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e544:	4939      	ldr	r1, [pc, #228]	; (800e62c <pbuf_realloc+0x100>)
 800e546:	483a      	ldr	r0, [pc, #232]	; (800e630 <pbuf_realloc+0x104>)
 800e548:	f00b ff3c 	bl	801a3c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	891b      	ldrh	r3, [r3, #8]
 800e550:	887a      	ldrh	r2, [r7, #2]
 800e552:	429a      	cmp	r2, r3
 800e554:	d264      	bcs.n	800e620 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	891a      	ldrh	r2, [r3, #8]
 800e55a:	887b      	ldrh	r3, [r7, #2]
 800e55c:	1ad3      	subs	r3, r2, r3
 800e55e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e560:	887b      	ldrh	r3, [r7, #2]
 800e562:	817b      	strh	r3, [r7, #10]
  q = p;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e568:	e018      	b.n	800e59c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	895b      	ldrh	r3, [r3, #10]
 800e56e:	897a      	ldrh	r2, [r7, #10]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	891a      	ldrh	r2, [r3, #8]
 800e578:	893b      	ldrh	r3, [r7, #8]
 800e57a:	1ad3      	subs	r3, r2, r3
 800e57c:	b29a      	uxth	r2, r3
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <pbuf_realloc+0x70>
 800e58e:	4b26      	ldr	r3, [pc, #152]	; (800e628 <pbuf_realloc+0xfc>)
 800e590:	f240 12af 	movw	r2, #431	; 0x1af
 800e594:	4927      	ldr	r1, [pc, #156]	; (800e634 <pbuf_realloc+0x108>)
 800e596:	4826      	ldr	r0, [pc, #152]	; (800e630 <pbuf_realloc+0x104>)
 800e598:	f00b ff14 	bl	801a3c4 <iprintf>
  while (rem_len > q->len) {
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	895b      	ldrh	r3, [r3, #10]
 800e5a0:	897a      	ldrh	r2, [r7, #10]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d8e1      	bhi.n	800e56a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	7b1b      	ldrb	r3, [r3, #12]
 800e5aa:	f003 030f 	and.w	r3, r3, #15
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d122      	bne.n	800e5f8 <pbuf_realloc+0xcc>
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	895b      	ldrh	r3, [r3, #10]
 800e5b6:	897a      	ldrh	r2, [r7, #10]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d01d      	beq.n	800e5f8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	7b5b      	ldrb	r3, [r3, #13]
 800e5c0:	f003 0302 	and.w	r3, r3, #2
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d117      	bne.n	800e5f8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	897b      	ldrh	r3, [r7, #10]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	4619      	mov	r1, r3
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f7fe ff69 	bl	800d4b4 <mem_trim>
 800e5e2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d106      	bne.n	800e5f8 <pbuf_realloc+0xcc>
 800e5ea:	4b0f      	ldr	r3, [pc, #60]	; (800e628 <pbuf_realloc+0xfc>)
 800e5ec:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e5f0:	4911      	ldr	r1, [pc, #68]	; (800e638 <pbuf_realloc+0x10c>)
 800e5f2:	480f      	ldr	r0, [pc, #60]	; (800e630 <pbuf_realloc+0x104>)
 800e5f4:	f00b fee6 	bl	801a3c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	897a      	ldrh	r2, [r7, #10]
 800e5fc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	895a      	ldrh	r2, [r3, #10]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d004      	beq.n	800e618 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4618      	mov	r0, r3
 800e614:	f000 f910 	bl	800e838 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2200      	movs	r2, #0
 800e61c:	601a      	str	r2, [r3, #0]
 800e61e:	e000      	b.n	800e622 <pbuf_realloc+0xf6>
    return;
 800e620:	bf00      	nop

}
 800e622:	3710      	adds	r7, #16
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	0801c994 	.word	0x0801c994
 800e62c:	0801caac 	.word	0x0801caac
 800e630:	0801c9f4 	.word	0x0801c9f4
 800e634:	0801cac4 	.word	0x0801cac4
 800e638:	0801cadc 	.word	0x0801cadc

0800e63c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b086      	sub	sp, #24
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	4613      	mov	r3, r2
 800e648:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d106      	bne.n	800e65e <pbuf_add_header_impl+0x22>
 800e650:	4b2b      	ldr	r3, [pc, #172]	; (800e700 <pbuf_add_header_impl+0xc4>)
 800e652:	f240 12df 	movw	r2, #479	; 0x1df
 800e656:	492b      	ldr	r1, [pc, #172]	; (800e704 <pbuf_add_header_impl+0xc8>)
 800e658:	482b      	ldr	r0, [pc, #172]	; (800e708 <pbuf_add_header_impl+0xcc>)
 800e65a:	f00b feb3 	bl	801a3c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d003      	beq.n	800e66c <pbuf_add_header_impl+0x30>
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e66a:	d301      	bcc.n	800e670 <pbuf_add_header_impl+0x34>
    return 1;
 800e66c:	2301      	movs	r3, #1
 800e66e:	e043      	b.n	800e6f8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d101      	bne.n	800e67a <pbuf_add_header_impl+0x3e>
    return 0;
 800e676:	2300      	movs	r3, #0
 800e678:	e03e      	b.n	800e6f8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	891a      	ldrh	r2, [r3, #8]
 800e682:	8a7b      	ldrh	r3, [r7, #18]
 800e684:	4413      	add	r3, r2
 800e686:	b29b      	uxth	r3, r3
 800e688:	8a7a      	ldrh	r2, [r7, #18]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d901      	bls.n	800e692 <pbuf_add_header_impl+0x56>
    return 1;
 800e68e:	2301      	movs	r3, #1
 800e690:	e032      	b.n	800e6f8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	7b1b      	ldrb	r3, [r3, #12]
 800e696:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e698:	8a3b      	ldrh	r3, [r7, #16]
 800e69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00c      	beq.n	800e6bc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	685a      	ldr	r2, [r3, #4]
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	425b      	negs	r3, r3
 800e6aa:	4413      	add	r3, r2
 800e6ac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	3310      	adds	r3, #16
 800e6b2:	697a      	ldr	r2, [r7, #20]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d20d      	bcs.n	800e6d4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	e01d      	b.n	800e6f8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e6bc:	79fb      	ldrb	r3, [r7, #7]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d006      	beq.n	800e6d0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	685a      	ldr	r2, [r3, #4]
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	425b      	negs	r3, r3
 800e6ca:	4413      	add	r3, r2
 800e6cc:	617b      	str	r3, [r7, #20]
 800e6ce:	e001      	b.n	800e6d4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e011      	b.n	800e6f8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	697a      	ldr	r2, [r7, #20]
 800e6d8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	895a      	ldrh	r2, [r3, #10]
 800e6de:	8a7b      	ldrh	r3, [r7, #18]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	891a      	ldrh	r2, [r3, #8]
 800e6ec:	8a7b      	ldrh	r3, [r7, #18]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	811a      	strh	r2, [r3, #8]


  return 0;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	0801c994 	.word	0x0801c994
 800e704:	0801caf8 	.word	0x0801caf8
 800e708:	0801c9f4 	.word	0x0801c9f4

0800e70c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e716:	2200      	movs	r2, #0
 800e718:	6839      	ldr	r1, [r7, #0]
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f7ff ff8e 	bl	800e63c <pbuf_add_header_impl>
 800e720:	4603      	mov	r3, r0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
	...

0800e72c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d106      	bne.n	800e74a <pbuf_remove_header+0x1e>
 800e73c:	4b20      	ldr	r3, [pc, #128]	; (800e7c0 <pbuf_remove_header+0x94>)
 800e73e:	f240 224b 	movw	r2, #587	; 0x24b
 800e742:	4920      	ldr	r1, [pc, #128]	; (800e7c4 <pbuf_remove_header+0x98>)
 800e744:	4820      	ldr	r0, [pc, #128]	; (800e7c8 <pbuf_remove_header+0x9c>)
 800e746:	f00b fe3d 	bl	801a3c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d003      	beq.n	800e758 <pbuf_remove_header+0x2c>
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e756:	d301      	bcc.n	800e75c <pbuf_remove_header+0x30>
    return 1;
 800e758:	2301      	movs	r3, #1
 800e75a:	e02c      	b.n	800e7b6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d101      	bne.n	800e766 <pbuf_remove_header+0x3a>
    return 0;
 800e762:	2300      	movs	r3, #0
 800e764:	e027      	b.n	800e7b6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	895b      	ldrh	r3, [r3, #10]
 800e76e:	89fa      	ldrh	r2, [r7, #14]
 800e770:	429a      	cmp	r2, r3
 800e772:	d908      	bls.n	800e786 <pbuf_remove_header+0x5a>
 800e774:	4b12      	ldr	r3, [pc, #72]	; (800e7c0 <pbuf_remove_header+0x94>)
 800e776:	f240 2255 	movw	r2, #597	; 0x255
 800e77a:	4914      	ldr	r1, [pc, #80]	; (800e7cc <pbuf_remove_header+0xa0>)
 800e77c:	4812      	ldr	r0, [pc, #72]	; (800e7c8 <pbuf_remove_header+0x9c>)
 800e77e:	f00b fe21 	bl	801a3c4 <iprintf>
 800e782:	2301      	movs	r3, #1
 800e784:	e017      	b.n	800e7b6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	441a      	add	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	895a      	ldrh	r2, [r3, #10]
 800e79c:	89fb      	ldrh	r3, [r7, #14]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	891a      	ldrh	r2, [r3, #8]
 800e7aa:	89fb      	ldrh	r3, [r7, #14]
 800e7ac:	1ad3      	subs	r3, r2, r3
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	0801c994 	.word	0x0801c994
 800e7c4:	0801caf8 	.word	0x0801caf8
 800e7c8:	0801c9f4 	.word	0x0801c9f4
 800e7cc:	0801cb04 	.word	0x0801cb04

0800e7d0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	807b      	strh	r3, [r7, #2]
 800e7dc:	4613      	mov	r3, r2
 800e7de:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e7e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	da08      	bge.n	800e7fa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e7e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7ec:	425b      	negs	r3, r3
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f7ff ff9b 	bl	800e72c <pbuf_remove_header>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	e007      	b.n	800e80a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e7fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7fe:	787a      	ldrb	r2, [r7, #1]
 800e800:	4619      	mov	r1, r3
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff ff1a 	bl	800e63c <pbuf_add_header_impl>
 800e808:	4603      	mov	r3, r0
  }
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3708      	adds	r7, #8
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}

0800e812 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e812:	b580      	push	{r7, lr}
 800e814:	b082      	sub	sp, #8
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
 800e81a:	460b      	mov	r3, r1
 800e81c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e81e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e822:	2201      	movs	r2, #1
 800e824:	4619      	mov	r1, r3
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f7ff ffd2 	bl	800e7d0 <pbuf_header_impl>
 800e82c:	4603      	mov	r3, r0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3708      	adds	r7, #8
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
	...

0800e838 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b088      	sub	sp, #32
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10b      	bne.n	800e85e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d106      	bne.n	800e85a <pbuf_free+0x22>
 800e84c:	4b3b      	ldr	r3, [pc, #236]	; (800e93c <pbuf_free+0x104>)
 800e84e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e852:	493b      	ldr	r1, [pc, #236]	; (800e940 <pbuf_free+0x108>)
 800e854:	483b      	ldr	r0, [pc, #236]	; (800e944 <pbuf_free+0x10c>)
 800e856:	f00b fdb5 	bl	801a3c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	e069      	b.n	800e932 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e85e:	2300      	movs	r3, #0
 800e860:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e862:	e062      	b.n	800e92a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e864:	f00b fd30 	bl	801a2c8 <sys_arch_protect>
 800e868:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	7b9b      	ldrb	r3, [r3, #14]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d106      	bne.n	800e880 <pbuf_free+0x48>
 800e872:	4b32      	ldr	r3, [pc, #200]	; (800e93c <pbuf_free+0x104>)
 800e874:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e878:	4933      	ldr	r1, [pc, #204]	; (800e948 <pbuf_free+0x110>)
 800e87a:	4832      	ldr	r0, [pc, #200]	; (800e944 <pbuf_free+0x10c>)
 800e87c:	f00b fda2 	bl	801a3c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	7b9b      	ldrb	r3, [r3, #14]
 800e884:	3b01      	subs	r3, #1
 800e886:	b2da      	uxtb	r2, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	739a      	strb	r2, [r3, #14]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	7b9b      	ldrb	r3, [r3, #14]
 800e890:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e892:	69b8      	ldr	r0, [r7, #24]
 800e894:	f00b fd26 	bl	801a2e4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d143      	bne.n	800e926 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	7b1b      	ldrb	r3, [r3, #12]
 800e8a8:	f003 030f 	and.w	r3, r3, #15
 800e8ac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	7b5b      	ldrb	r3, [r3, #13]
 800e8b2:	f003 0302 	and.w	r3, r3, #2
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d011      	beq.n	800e8de <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d106      	bne.n	800e8d4 <pbuf_free+0x9c>
 800e8c6:	4b1d      	ldr	r3, [pc, #116]	; (800e93c <pbuf_free+0x104>)
 800e8c8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e8cc:	491f      	ldr	r1, [pc, #124]	; (800e94c <pbuf_free+0x114>)
 800e8ce:	481d      	ldr	r0, [pc, #116]	; (800e944 <pbuf_free+0x10c>)
 800e8d0:	f00b fd78 	bl	801a3c4 <iprintf>
        pc->custom_free_function(p);
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	4798      	blx	r3
 800e8dc:	e01d      	b.n	800e91a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	d104      	bne.n	800e8ee <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e8e4:	6879      	ldr	r1, [r7, #4]
 800e8e6:	200c      	movs	r0, #12
 800e8e8:	f7ff f8c2 	bl	800da70 <memp_free>
 800e8ec:	e015      	b.n	800e91a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e8ee:	7bfb      	ldrb	r3, [r7, #15]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d104      	bne.n	800e8fe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e8f4:	6879      	ldr	r1, [r7, #4]
 800e8f6:	200b      	movs	r0, #11
 800e8f8:	f7ff f8ba 	bl	800da70 <memp_free>
 800e8fc:	e00d      	b.n	800e91a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e8fe:	7bfb      	ldrb	r3, [r7, #15]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d103      	bne.n	800e90c <pbuf_free+0xd4>
          mem_free(p);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f7fe fd45 	bl	800d394 <mem_free>
 800e90a:	e006      	b.n	800e91a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e90c:	4b0b      	ldr	r3, [pc, #44]	; (800e93c <pbuf_free+0x104>)
 800e90e:	f240 320f 	movw	r2, #783	; 0x30f
 800e912:	490f      	ldr	r1, [pc, #60]	; (800e950 <pbuf_free+0x118>)
 800e914:	480b      	ldr	r0, [pc, #44]	; (800e944 <pbuf_free+0x10c>)
 800e916:	f00b fd55 	bl	801a3c4 <iprintf>
        }
      }
      count++;
 800e91a:	7ffb      	ldrb	r3, [r7, #31]
 800e91c:	3301      	adds	r3, #1
 800e91e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	607b      	str	r3, [r7, #4]
 800e924:	e001      	b.n	800e92a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e926:	2300      	movs	r3, #0
 800e928:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d199      	bne.n	800e864 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e930:	7ffb      	ldrb	r3, [r7, #31]
}
 800e932:	4618      	mov	r0, r3
 800e934:	3720      	adds	r7, #32
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	0801c994 	.word	0x0801c994
 800e940:	0801caf8 	.word	0x0801caf8
 800e944:	0801c9f4 	.word	0x0801c9f4
 800e948:	0801cb24 	.word	0x0801cb24
 800e94c:	0801cb3c 	.word	0x0801cb3c
 800e950:	0801cb60 	.word	0x0801cb60

0800e954 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e954:	b480      	push	{r7}
 800e956:	b085      	sub	sp, #20
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e95c:	2300      	movs	r3, #0
 800e95e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e960:	e005      	b.n	800e96e <pbuf_clen+0x1a>
    ++len;
 800e962:	89fb      	ldrh	r3, [r7, #14]
 800e964:	3301      	adds	r3, #1
 800e966:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1f6      	bne.n	800e962 <pbuf_clen+0xe>
  }
  return len;
 800e974:	89fb      	ldrh	r3, [r7, #14]
}
 800e976:	4618      	mov	r0, r3
 800e978:	3714      	adds	r7, #20
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr
	...

0800e984 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d016      	beq.n	800e9c0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e992:	f00b fc99 	bl	801a2c8 <sys_arch_protect>
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	7b9b      	ldrb	r3, [r3, #14]
 800e99c:	3301      	adds	r3, #1
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	739a      	strb	r2, [r3, #14]
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f00b fc9d 	bl	801a2e4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	7b9b      	ldrb	r3, [r3, #14]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d106      	bne.n	800e9c0 <pbuf_ref+0x3c>
 800e9b2:	4b05      	ldr	r3, [pc, #20]	; (800e9c8 <pbuf_ref+0x44>)
 800e9b4:	f240 3242 	movw	r2, #834	; 0x342
 800e9b8:	4904      	ldr	r1, [pc, #16]	; (800e9cc <pbuf_ref+0x48>)
 800e9ba:	4805      	ldr	r0, [pc, #20]	; (800e9d0 <pbuf_ref+0x4c>)
 800e9bc:	f00b fd02 	bl	801a3c4 <iprintf>
  }
}
 800e9c0:	bf00      	nop
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	0801c994 	.word	0x0801c994
 800e9cc:	0801cb74 	.word	0x0801cb74
 800e9d0:	0801c9f4 	.word	0x0801c9f4

0800e9d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d002      	beq.n	800e9ea <pbuf_cat+0x16>
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d107      	bne.n	800e9fa <pbuf_cat+0x26>
 800e9ea:	4b20      	ldr	r3, [pc, #128]	; (800ea6c <pbuf_cat+0x98>)
 800e9ec:	f240 325a 	movw	r2, #858	; 0x35a
 800e9f0:	491f      	ldr	r1, [pc, #124]	; (800ea70 <pbuf_cat+0x9c>)
 800e9f2:	4820      	ldr	r0, [pc, #128]	; (800ea74 <pbuf_cat+0xa0>)
 800e9f4:	f00b fce6 	bl	801a3c4 <iprintf>
 800e9f8:	e034      	b.n	800ea64 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	60fb      	str	r3, [r7, #12]
 800e9fe:	e00a      	b.n	800ea16 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	891a      	ldrh	r2, [r3, #8]
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	891b      	ldrh	r3, [r3, #8]
 800ea08:	4413      	add	r3, r2
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	60fb      	str	r3, [r7, #12]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1f0      	bne.n	800ea00 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	891a      	ldrh	r2, [r3, #8]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	895b      	ldrh	r3, [r3, #10]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d006      	beq.n	800ea38 <pbuf_cat+0x64>
 800ea2a:	4b10      	ldr	r3, [pc, #64]	; (800ea6c <pbuf_cat+0x98>)
 800ea2c:	f240 3262 	movw	r2, #866	; 0x362
 800ea30:	4911      	ldr	r1, [pc, #68]	; (800ea78 <pbuf_cat+0xa4>)
 800ea32:	4810      	ldr	r0, [pc, #64]	; (800ea74 <pbuf_cat+0xa0>)
 800ea34:	f00b fcc6 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d006      	beq.n	800ea4e <pbuf_cat+0x7a>
 800ea40:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <pbuf_cat+0x98>)
 800ea42:	f240 3263 	movw	r2, #867	; 0x363
 800ea46:	490d      	ldr	r1, [pc, #52]	; (800ea7c <pbuf_cat+0xa8>)
 800ea48:	480a      	ldr	r0, [pc, #40]	; (800ea74 <pbuf_cat+0xa0>)
 800ea4a:	f00b fcbb 	bl	801a3c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	891a      	ldrh	r2, [r3, #8]
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	891b      	ldrh	r3, [r3, #8]
 800ea56:	4413      	add	r3, r2
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	683a      	ldr	r2, [r7, #0]
 800ea62:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	0801c994 	.word	0x0801c994
 800ea70:	0801cb88 	.word	0x0801cb88
 800ea74:	0801c9f4 	.word	0x0801c9f4
 800ea78:	0801cbc0 	.word	0x0801cbc0
 800ea7c:	0801cbf0 	.word	0x0801cbf0

0800ea80 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f7ff ffa1 	bl	800e9d4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ea92:	6838      	ldr	r0, [r7, #0]
 800ea94:	f7ff ff76 	bl	800e984 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ea98:	bf00      	nop
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b086      	sub	sp, #24
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	617b      	str	r3, [r7, #20]
 800eaae:	2300      	movs	r3, #0
 800eab0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d008      	beq.n	800eaca <pbuf_copy+0x2a>
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d005      	beq.n	800eaca <pbuf_copy+0x2a>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	891a      	ldrh	r2, [r3, #8]
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	891b      	ldrh	r3, [r3, #8]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d209      	bcs.n	800eade <pbuf_copy+0x3e>
 800eaca:	4b57      	ldr	r3, [pc, #348]	; (800ec28 <pbuf_copy+0x188>)
 800eacc:	f240 32ca 	movw	r2, #970	; 0x3ca
 800ead0:	4956      	ldr	r1, [pc, #344]	; (800ec2c <pbuf_copy+0x18c>)
 800ead2:	4857      	ldr	r0, [pc, #348]	; (800ec30 <pbuf_copy+0x190>)
 800ead4:	f00b fc76 	bl	801a3c4 <iprintf>
 800ead8:	f06f 030f 	mvn.w	r3, #15
 800eadc:	e09f      	b.n	800ec1e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	895b      	ldrh	r3, [r3, #10]
 800eae2:	461a      	mov	r2, r3
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	1ad2      	subs	r2, r2, r3
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	895b      	ldrh	r3, [r3, #10]
 800eaec:	4619      	mov	r1, r3
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	1acb      	subs	r3, r1, r3
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d306      	bcc.n	800eb04 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	895b      	ldrh	r3, [r3, #10]
 800eafa:	461a      	mov	r2, r3
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	1ad3      	subs	r3, r2, r3
 800eb00:	60fb      	str	r3, [r7, #12]
 800eb02:	e005      	b.n	800eb10 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	895b      	ldrh	r3, [r3, #10]
 800eb08:	461a      	mov	r2, r3
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	685a      	ldr	r2, [r3, #4]
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	18d0      	adds	r0, r2, r3
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	685a      	ldr	r2, [r3, #4]
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	4413      	add	r3, r2
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	4619      	mov	r1, r3
 800eb24:	f00b fc3a 	bl	801a39c <memcpy>
    offset_to += len;
 800eb28:	697a      	ldr	r2, [r7, #20]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eb30:	693a      	ldr	r2, [r7, #16]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	4413      	add	r3, r2
 800eb36:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	895b      	ldrh	r3, [r3, #10]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d906      	bls.n	800eb52 <pbuf_copy+0xb2>
 800eb44:	4b38      	ldr	r3, [pc, #224]	; (800ec28 <pbuf_copy+0x188>)
 800eb46:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eb4a:	493a      	ldr	r1, [pc, #232]	; (800ec34 <pbuf_copy+0x194>)
 800eb4c:	4838      	ldr	r0, [pc, #224]	; (800ec30 <pbuf_copy+0x190>)
 800eb4e:	f00b fc39 	bl	801a3c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	895b      	ldrh	r3, [r3, #10]
 800eb56:	461a      	mov	r2, r3
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d906      	bls.n	800eb6c <pbuf_copy+0xcc>
 800eb5e:	4b32      	ldr	r3, [pc, #200]	; (800ec28 <pbuf_copy+0x188>)
 800eb60:	f240 32da 	movw	r2, #986	; 0x3da
 800eb64:	4934      	ldr	r1, [pc, #208]	; (800ec38 <pbuf_copy+0x198>)
 800eb66:	4832      	ldr	r0, [pc, #200]	; (800ec30 <pbuf_copy+0x190>)
 800eb68:	f00b fc2c 	bl	801a3c4 <iprintf>
    if (offset_from >= p_from->len) {
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	895b      	ldrh	r3, [r3, #10]
 800eb70:	461a      	mov	r2, r3
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d304      	bcc.n	800eb82 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	895b      	ldrh	r3, [r3, #10]
 800eb86:	461a      	mov	r2, r3
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d114      	bne.n	800ebb8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d10c      	bne.n	800ebb8 <pbuf_copy+0x118>
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d009      	beq.n	800ebb8 <pbuf_copy+0x118>
 800eba4:	4b20      	ldr	r3, [pc, #128]	; (800ec28 <pbuf_copy+0x188>)
 800eba6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ebaa:	4924      	ldr	r1, [pc, #144]	; (800ec3c <pbuf_copy+0x19c>)
 800ebac:	4820      	ldr	r0, [pc, #128]	; (800ec30 <pbuf_copy+0x190>)
 800ebae:	f00b fc09 	bl	801a3c4 <iprintf>
 800ebb2:	f06f 030f 	mvn.w	r3, #15
 800ebb6:	e032      	b.n	800ec1e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d013      	beq.n	800ebe6 <pbuf_copy+0x146>
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	895a      	ldrh	r2, [r3, #10]
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	891b      	ldrh	r3, [r3, #8]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d10d      	bne.n	800ebe6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d009      	beq.n	800ebe6 <pbuf_copy+0x146>
 800ebd2:	4b15      	ldr	r3, [pc, #84]	; (800ec28 <pbuf_copy+0x188>)
 800ebd4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800ebd8:	4919      	ldr	r1, [pc, #100]	; (800ec40 <pbuf_copy+0x1a0>)
 800ebda:	4815      	ldr	r0, [pc, #84]	; (800ec30 <pbuf_copy+0x190>)
 800ebdc:	f00b fbf2 	bl	801a3c4 <iprintf>
 800ebe0:	f06f 0305 	mvn.w	r3, #5
 800ebe4:	e01b      	b.n	800ec1e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d013      	beq.n	800ec14 <pbuf_copy+0x174>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	895a      	ldrh	r2, [r3, #10]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	891b      	ldrh	r3, [r3, #8]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d10d      	bne.n	800ec14 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d009      	beq.n	800ec14 <pbuf_copy+0x174>
 800ec00:	4b09      	ldr	r3, [pc, #36]	; (800ec28 <pbuf_copy+0x188>)
 800ec02:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800ec06:	490e      	ldr	r1, [pc, #56]	; (800ec40 <pbuf_copy+0x1a0>)
 800ec08:	4809      	ldr	r0, [pc, #36]	; (800ec30 <pbuf_copy+0x190>)
 800ec0a:	f00b fbdb 	bl	801a3c4 <iprintf>
 800ec0e:	f06f 0305 	mvn.w	r3, #5
 800ec12:	e004      	b.n	800ec1e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	f47f af61 	bne.w	800eade <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3718      	adds	r7, #24
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	0801c994 	.word	0x0801c994
 800ec2c:	0801cc3c 	.word	0x0801cc3c
 800ec30:	0801c9f4 	.word	0x0801c9f4
 800ec34:	0801cc6c 	.word	0x0801cc6c
 800ec38:	0801cc84 	.word	0x0801cc84
 800ec3c:	0801cca0 	.word	0x0801cca0
 800ec40:	0801ccb0 	.word	0x0801ccb0

0800ec44 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b088      	sub	sp, #32
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	4611      	mov	r1, r2
 800ec50:	461a      	mov	r2, r3
 800ec52:	460b      	mov	r3, r1
 800ec54:	80fb      	strh	r3, [r7, #6]
 800ec56:	4613      	mov	r3, r2
 800ec58:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d108      	bne.n	800ec7a <pbuf_copy_partial+0x36>
 800ec68:	4b2b      	ldr	r3, [pc, #172]	; (800ed18 <pbuf_copy_partial+0xd4>)
 800ec6a:	f240 420a 	movw	r2, #1034	; 0x40a
 800ec6e:	492b      	ldr	r1, [pc, #172]	; (800ed1c <pbuf_copy_partial+0xd8>)
 800ec70:	482b      	ldr	r0, [pc, #172]	; (800ed20 <pbuf_copy_partial+0xdc>)
 800ec72:	f00b fba7 	bl	801a3c4 <iprintf>
 800ec76:	2300      	movs	r3, #0
 800ec78:	e04a      	b.n	800ed10 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d108      	bne.n	800ec92 <pbuf_copy_partial+0x4e>
 800ec80:	4b25      	ldr	r3, [pc, #148]	; (800ed18 <pbuf_copy_partial+0xd4>)
 800ec82:	f240 420b 	movw	r2, #1035	; 0x40b
 800ec86:	4927      	ldr	r1, [pc, #156]	; (800ed24 <pbuf_copy_partial+0xe0>)
 800ec88:	4825      	ldr	r0, [pc, #148]	; (800ed20 <pbuf_copy_partial+0xdc>)
 800ec8a:	f00b fb9b 	bl	801a3c4 <iprintf>
 800ec8e:	2300      	movs	r3, #0
 800ec90:	e03e      	b.n	800ed10 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	61fb      	str	r3, [r7, #28]
 800ec96:	e034      	b.n	800ed02 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ec98:	88bb      	ldrh	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00a      	beq.n	800ecb4 <pbuf_copy_partial+0x70>
 800ec9e:	69fb      	ldr	r3, [r7, #28]
 800eca0:	895b      	ldrh	r3, [r3, #10]
 800eca2:	88ba      	ldrh	r2, [r7, #4]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d305      	bcc.n	800ecb4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	895b      	ldrh	r3, [r3, #10]
 800ecac:	88ba      	ldrh	r2, [r7, #4]
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	80bb      	strh	r3, [r7, #4]
 800ecb2:	e023      	b.n	800ecfc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	895a      	ldrh	r2, [r3, #10]
 800ecb8:	88bb      	ldrh	r3, [r7, #4]
 800ecba:	1ad3      	subs	r3, r2, r3
 800ecbc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ecbe:	8b3a      	ldrh	r2, [r7, #24]
 800ecc0:	88fb      	ldrh	r3, [r7, #6]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d901      	bls.n	800ecca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ecc6:	88fb      	ldrh	r3, [r7, #6]
 800ecc8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ecca:	8b7b      	ldrh	r3, [r7, #26]
 800eccc:	68ba      	ldr	r2, [r7, #8]
 800ecce:	18d0      	adds	r0, r2, r3
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	685a      	ldr	r2, [r3, #4]
 800ecd4:	88bb      	ldrh	r3, [r7, #4]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	8b3a      	ldrh	r2, [r7, #24]
 800ecda:	4619      	mov	r1, r3
 800ecdc:	f00b fb5e 	bl	801a39c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ece0:	8afa      	ldrh	r2, [r7, #22]
 800ece2:	8b3b      	ldrh	r3, [r7, #24]
 800ece4:	4413      	add	r3, r2
 800ece6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ece8:	8b7a      	ldrh	r2, [r7, #26]
 800ecea:	8b3b      	ldrh	r3, [r7, #24]
 800ecec:	4413      	add	r3, r2
 800ecee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ecf0:	88fa      	ldrh	r2, [r7, #6]
 800ecf2:	8b3b      	ldrh	r3, [r7, #24]
 800ecf4:	1ad3      	subs	r3, r2, r3
 800ecf6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	61fb      	str	r3, [r7, #28]
 800ed02:	88fb      	ldrh	r3, [r7, #6]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d002      	beq.n	800ed0e <pbuf_copy_partial+0xca>
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d1c4      	bne.n	800ec98 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ed0e:	8afb      	ldrh	r3, [r7, #22]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3720      	adds	r7, #32
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	0801c994 	.word	0x0801c994
 800ed1c:	0801ccdc 	.word	0x0801ccdc
 800ed20:	0801c9f4 	.word	0x0801c9f4
 800ed24:	0801ccfc 	.word	0x0801ccfc

0800ed28 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	4603      	mov	r3, r0
 800ed30:	603a      	str	r2, [r7, #0]
 800ed32:	71fb      	strb	r3, [r7, #7]
 800ed34:	460b      	mov	r3, r1
 800ed36:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	8919      	ldrh	r1, [r3, #8]
 800ed3c:	88ba      	ldrh	r2, [r7, #4]
 800ed3e:	79fb      	ldrb	r3, [r7, #7]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7ff fa99 	bl	800e278 <pbuf_alloc>
 800ed46:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d101      	bne.n	800ed52 <pbuf_clone+0x2a>
    return NULL;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	e011      	b.n	800ed76 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ed52:	6839      	ldr	r1, [r7, #0]
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f7ff fea3 	bl	800eaa0 <pbuf_copy>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ed5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d006      	beq.n	800ed74 <pbuf_clone+0x4c>
 800ed66:	4b06      	ldr	r3, [pc, #24]	; (800ed80 <pbuf_clone+0x58>)
 800ed68:	f240 5224 	movw	r2, #1316	; 0x524
 800ed6c:	4905      	ldr	r1, [pc, #20]	; (800ed84 <pbuf_clone+0x5c>)
 800ed6e:	4806      	ldr	r0, [pc, #24]	; (800ed88 <pbuf_clone+0x60>)
 800ed70:	f00b fb28 	bl	801a3c4 <iprintf>
  return q;
 800ed74:	68fb      	ldr	r3, [r7, #12]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	0801c994 	.word	0x0801c994
 800ed84:	0801ce08 	.word	0x0801ce08
 800ed88:	0801c9f4 	.word	0x0801c9f4

0800ed8c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ed90:	f00b fb94 	bl	801a4bc <rand>
 800ed94:	4603      	mov	r3, r0
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eda2:	b29a      	uxth	r2, r3
 800eda4:	4b01      	ldr	r3, [pc, #4]	; (800edac <tcp_init+0x20>)
 800eda6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eda8:	bf00      	nop
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	20000014 	.word	0x20000014

0800edb0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	7d1b      	ldrb	r3, [r3, #20]
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d105      	bne.n	800edcc <tcp_free+0x1c>
 800edc0:	4b06      	ldr	r3, [pc, #24]	; (800eddc <tcp_free+0x2c>)
 800edc2:	22d4      	movs	r2, #212	; 0xd4
 800edc4:	4906      	ldr	r1, [pc, #24]	; (800ede0 <tcp_free+0x30>)
 800edc6:	4807      	ldr	r0, [pc, #28]	; (800ede4 <tcp_free+0x34>)
 800edc8:	f00b fafc 	bl	801a3c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800edcc:	6879      	ldr	r1, [r7, #4]
 800edce:	2001      	movs	r0, #1
 800edd0:	f7fe fe4e 	bl	800da70 <memp_free>
}
 800edd4:	bf00      	nop
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	0801ce94 	.word	0x0801ce94
 800ede0:	0801cec4 	.word	0x0801cec4
 800ede4:	0801ced8 	.word	0x0801ced8

0800ede8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	7d1b      	ldrb	r3, [r3, #20]
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d105      	bne.n	800ee04 <tcp_free_listen+0x1c>
 800edf8:	4b06      	ldr	r3, [pc, #24]	; (800ee14 <tcp_free_listen+0x2c>)
 800edfa:	22df      	movs	r2, #223	; 0xdf
 800edfc:	4906      	ldr	r1, [pc, #24]	; (800ee18 <tcp_free_listen+0x30>)
 800edfe:	4807      	ldr	r0, [pc, #28]	; (800ee1c <tcp_free_listen+0x34>)
 800ee00:	f00b fae0 	bl	801a3c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ee04:	6879      	ldr	r1, [r7, #4]
 800ee06:	2002      	movs	r0, #2
 800ee08:	f7fe fe32 	bl	800da70 <memp_free>
}
 800ee0c:	bf00      	nop
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	0801ce94 	.word	0x0801ce94
 800ee18:	0801cf00 	.word	0x0801cf00
 800ee1c:	0801ced8 	.word	0x0801ced8

0800ee20 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ee24:	f001 f8b4 	bl	800ff90 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ee28:	4b07      	ldr	r3, [pc, #28]	; (800ee48 <tcp_tmr+0x28>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	b2da      	uxtb	r2, r3
 800ee30:	4b05      	ldr	r3, [pc, #20]	; (800ee48 <tcp_tmr+0x28>)
 800ee32:	701a      	strb	r2, [r3, #0]
 800ee34:	4b04      	ldr	r3, [pc, #16]	; (800ee48 <tcp_tmr+0x28>)
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	f003 0301 	and.w	r3, r3, #1
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ee40:	f000 fd68 	bl	800f914 <tcp_slowtmr>
  }
}
 800ee44:	bf00      	nop
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	20004bb9 	.word	0x20004bb9

0800ee4c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d105      	bne.n	800ee68 <tcp_remove_listener+0x1c>
 800ee5c:	4b0d      	ldr	r3, [pc, #52]	; (800ee94 <tcp_remove_listener+0x48>)
 800ee5e:	22ff      	movs	r2, #255	; 0xff
 800ee60:	490d      	ldr	r1, [pc, #52]	; (800ee98 <tcp_remove_listener+0x4c>)
 800ee62:	480e      	ldr	r0, [pc, #56]	; (800ee9c <tcp_remove_listener+0x50>)
 800ee64:	f00b faae 	bl	801a3c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	60fb      	str	r3, [r7, #12]
 800ee6c:	e00a      	b.n	800ee84 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee72:	683a      	ldr	r2, [r7, #0]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d102      	bne.n	800ee7e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	60fb      	str	r3, [r7, #12]
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1f1      	bne.n	800ee6e <tcp_remove_listener+0x22>
    }
  }
}
 800ee8a:	bf00      	nop
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	0801ce94 	.word	0x0801ce94
 800ee98:	0801cf1c 	.word	0x0801cf1c
 800ee9c:	0801ced8 	.word	0x0801ced8

0800eea0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d106      	bne.n	800eebc <tcp_listen_closed+0x1c>
 800eeae:	4b14      	ldr	r3, [pc, #80]	; (800ef00 <tcp_listen_closed+0x60>)
 800eeb0:	f240 1211 	movw	r2, #273	; 0x111
 800eeb4:	4913      	ldr	r1, [pc, #76]	; (800ef04 <tcp_listen_closed+0x64>)
 800eeb6:	4814      	ldr	r0, [pc, #80]	; (800ef08 <tcp_listen_closed+0x68>)
 800eeb8:	f00b fa84 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	7d1b      	ldrb	r3, [r3, #20]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d006      	beq.n	800eed2 <tcp_listen_closed+0x32>
 800eec4:	4b0e      	ldr	r3, [pc, #56]	; (800ef00 <tcp_listen_closed+0x60>)
 800eec6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800eeca:	4910      	ldr	r1, [pc, #64]	; (800ef0c <tcp_listen_closed+0x6c>)
 800eecc:	480e      	ldr	r0, [pc, #56]	; (800ef08 <tcp_listen_closed+0x68>)
 800eece:	f00b fa79 	bl	801a3c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eed2:	2301      	movs	r3, #1
 800eed4:	60fb      	str	r3, [r7, #12]
 800eed6:	e00b      	b.n	800eef0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eed8:	4a0d      	ldr	r2, [pc, #52]	; (800ef10 <tcp_listen_closed+0x70>)
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6879      	ldr	r1, [r7, #4]
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7ff ffb1 	bl	800ee4c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	3301      	adds	r3, #1
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	d9f0      	bls.n	800eed8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800eef6:	bf00      	nop
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	0801ce94 	.word	0x0801ce94
 800ef04:	0801cf44 	.word	0x0801cf44
 800ef08:	0801ced8 	.word	0x0801ced8
 800ef0c:	0801cf50 	.word	0x0801cf50
 800ef10:	0801f2f0 	.word	0x0801f2f0

0800ef14 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ef14:	b5b0      	push	{r4, r5, r7, lr}
 800ef16:	b088      	sub	sp, #32
 800ef18:	af04      	add	r7, sp, #16
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d106      	bne.n	800ef34 <tcp_close_shutdown+0x20>
 800ef26:	4b61      	ldr	r3, [pc, #388]	; (800f0ac <tcp_close_shutdown+0x198>)
 800ef28:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ef2c:	4960      	ldr	r1, [pc, #384]	; (800f0b0 <tcp_close_shutdown+0x19c>)
 800ef2e:	4861      	ldr	r0, [pc, #388]	; (800f0b4 <tcp_close_shutdown+0x1a0>)
 800ef30:	f00b fa48 	bl	801a3c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ef34:	78fb      	ldrb	r3, [r7, #3]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d066      	beq.n	800f008 <tcp_close_shutdown+0xf4>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	7d1b      	ldrb	r3, [r3, #20]
 800ef3e:	2b04      	cmp	r3, #4
 800ef40:	d003      	beq.n	800ef4a <tcp_close_shutdown+0x36>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	7d1b      	ldrb	r3, [r3, #20]
 800ef46:	2b07      	cmp	r3, #7
 800ef48:	d15e      	bne.n	800f008 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d104      	bne.n	800ef5c <tcp_close_shutdown+0x48>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef56:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ef5a:	d055      	beq.n	800f008 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	8b5b      	ldrh	r3, [r3, #26]
 800ef60:	f003 0310 	and.w	r3, r3, #16
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d106      	bne.n	800ef76 <tcp_close_shutdown+0x62>
 800ef68:	4b50      	ldr	r3, [pc, #320]	; (800f0ac <tcp_close_shutdown+0x198>)
 800ef6a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ef6e:	4952      	ldr	r1, [pc, #328]	; (800f0b8 <tcp_close_shutdown+0x1a4>)
 800ef70:	4850      	ldr	r0, [pc, #320]	; (800f0b4 <tcp_close_shutdown+0x1a0>)
 800ef72:	f00b fa27 	bl	801a3c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ef7e:	687d      	ldr	r5, [r7, #4]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	3304      	adds	r3, #4
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	8ad2      	ldrh	r2, [r2, #22]
 800ef88:	6879      	ldr	r1, [r7, #4]
 800ef8a:	8b09      	ldrh	r1, [r1, #24]
 800ef8c:	9102      	str	r1, [sp, #8]
 800ef8e:	9201      	str	r2, [sp, #4]
 800ef90:	9300      	str	r3, [sp, #0]
 800ef92:	462b      	mov	r3, r5
 800ef94:	4622      	mov	r2, r4
 800ef96:	4601      	mov	r1, r0
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f005 fdd3 	bl	8014b44 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f001 fba4 	bl	80106ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800efa4:	4b45      	ldr	r3, [pc, #276]	; (800f0bc <tcp_close_shutdown+0x1a8>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d105      	bne.n	800efba <tcp_close_shutdown+0xa6>
 800efae:	4b43      	ldr	r3, [pc, #268]	; (800f0bc <tcp_close_shutdown+0x1a8>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	4a41      	ldr	r2, [pc, #260]	; (800f0bc <tcp_close_shutdown+0x1a8>)
 800efb6:	6013      	str	r3, [r2, #0]
 800efb8:	e013      	b.n	800efe2 <tcp_close_shutdown+0xce>
 800efba:	4b40      	ldr	r3, [pc, #256]	; (800f0bc <tcp_close_shutdown+0x1a8>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	60fb      	str	r3, [r7, #12]
 800efc0:	e00c      	b.n	800efdc <tcp_close_shutdown+0xc8>
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d104      	bne.n	800efd6 <tcp_close_shutdown+0xc2>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	68da      	ldr	r2, [r3, #12]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	60da      	str	r2, [r3, #12]
 800efd4:	e005      	b.n	800efe2 <tcp_close_shutdown+0xce>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1ef      	bne.n	800efc2 <tcp_close_shutdown+0xae>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	60da      	str	r2, [r3, #12]
 800efe8:	4b35      	ldr	r3, [pc, #212]	; (800f0c0 <tcp_close_shutdown+0x1ac>)
 800efea:	2201      	movs	r2, #1
 800efec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800efee:	4b35      	ldr	r3, [pc, #212]	; (800f0c4 <tcp_close_shutdown+0x1b0>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d102      	bne.n	800effe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800eff8:	f004 f836 	bl	8013068 <tcp_trigger_input_pcb_close>
 800effc:	e002      	b.n	800f004 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f7ff fed6 	bl	800edb0 <tcp_free>
      }
      return ERR_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	e04d      	b.n	800f0a4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	7d1b      	ldrb	r3, [r3, #20]
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d02d      	beq.n	800f06c <tcp_close_shutdown+0x158>
 800f010:	2b02      	cmp	r3, #2
 800f012:	d036      	beq.n	800f082 <tcp_close_shutdown+0x16e>
 800f014:	2b00      	cmp	r3, #0
 800f016:	d13f      	bne.n	800f098 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	8adb      	ldrh	r3, [r3, #22]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d021      	beq.n	800f064 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f020:	4b29      	ldr	r3, [pc, #164]	; (800f0c8 <tcp_close_shutdown+0x1b4>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	429a      	cmp	r2, r3
 800f028:	d105      	bne.n	800f036 <tcp_close_shutdown+0x122>
 800f02a:	4b27      	ldr	r3, [pc, #156]	; (800f0c8 <tcp_close_shutdown+0x1b4>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	4a25      	ldr	r2, [pc, #148]	; (800f0c8 <tcp_close_shutdown+0x1b4>)
 800f032:	6013      	str	r3, [r2, #0]
 800f034:	e013      	b.n	800f05e <tcp_close_shutdown+0x14a>
 800f036:	4b24      	ldr	r3, [pc, #144]	; (800f0c8 <tcp_close_shutdown+0x1b4>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	60bb      	str	r3, [r7, #8]
 800f03c:	e00c      	b.n	800f058 <tcp_close_shutdown+0x144>
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	429a      	cmp	r2, r3
 800f046:	d104      	bne.n	800f052 <tcp_close_shutdown+0x13e>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	68da      	ldr	r2, [r3, #12]
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	60da      	str	r2, [r3, #12]
 800f050:	e005      	b.n	800f05e <tcp_close_shutdown+0x14a>
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	60bb      	str	r3, [r7, #8]
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d1ef      	bne.n	800f03e <tcp_close_shutdown+0x12a>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2200      	movs	r2, #0
 800f062:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f7ff fea3 	bl	800edb0 <tcp_free>
      break;
 800f06a:	e01a      	b.n	800f0a2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f7ff ff17 	bl	800eea0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f072:	6879      	ldr	r1, [r7, #4]
 800f074:	4815      	ldr	r0, [pc, #84]	; (800f0cc <tcp_close_shutdown+0x1b8>)
 800f076:	f001 fb89 	bl	801078c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7ff feb4 	bl	800ede8 <tcp_free_listen>
      break;
 800f080:	e00f      	b.n	800f0a2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f082:	6879      	ldr	r1, [r7, #4]
 800f084:	480d      	ldr	r0, [pc, #52]	; (800f0bc <tcp_close_shutdown+0x1a8>)
 800f086:	f001 fb81 	bl	801078c <tcp_pcb_remove>
 800f08a:	4b0d      	ldr	r3, [pc, #52]	; (800f0c0 <tcp_close_shutdown+0x1ac>)
 800f08c:	2201      	movs	r2, #1
 800f08e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f7ff fe8d 	bl	800edb0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f096:	e004      	b.n	800f0a2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 f819 	bl	800f0d0 <tcp_close_shutdown_fin>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	e000      	b.n	800f0a4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800f0a2:	2300      	movs	r3, #0
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3710      	adds	r7, #16
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bdb0      	pop	{r4, r5, r7, pc}
 800f0ac:	0801ce94 	.word	0x0801ce94
 800f0b0:	0801cf68 	.word	0x0801cf68
 800f0b4:	0801ced8 	.word	0x0801ced8
 800f0b8:	0801cf88 	.word	0x0801cf88
 800f0bc:	2000bad0 	.word	0x2000bad0
 800f0c0:	2000bacc 	.word	0x2000bacc
 800f0c4:	2000bae4 	.word	0x2000bae4
 800f0c8:	2000badc 	.word	0x2000badc
 800f0cc:	2000bad8 	.word	0x2000bad8

0800f0d0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d106      	bne.n	800f0ec <tcp_close_shutdown_fin+0x1c>
 800f0de:	4b2c      	ldr	r3, [pc, #176]	; (800f190 <tcp_close_shutdown_fin+0xc0>)
 800f0e0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f0e4:	492b      	ldr	r1, [pc, #172]	; (800f194 <tcp_close_shutdown_fin+0xc4>)
 800f0e6:	482c      	ldr	r0, [pc, #176]	; (800f198 <tcp_close_shutdown_fin+0xc8>)
 800f0e8:	f00b f96c 	bl	801a3c4 <iprintf>

  switch (pcb->state) {
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	7d1b      	ldrb	r3, [r3, #20]
 800f0f0:	2b04      	cmp	r3, #4
 800f0f2:	d010      	beq.n	800f116 <tcp_close_shutdown_fin+0x46>
 800f0f4:	2b07      	cmp	r3, #7
 800f0f6:	d01b      	beq.n	800f130 <tcp_close_shutdown_fin+0x60>
 800f0f8:	2b03      	cmp	r3, #3
 800f0fa:	d126      	bne.n	800f14a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f004 fe1f 	bl	8013d40 <tcp_send_fin>
 800f102:	4603      	mov	r3, r0
 800f104:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d11f      	bne.n	800f14e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2205      	movs	r2, #5
 800f112:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f114:	e01b      	b.n	800f14e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f004 fe12 	bl	8013d40 <tcp_send_fin>
 800f11c:	4603      	mov	r3, r0
 800f11e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d114      	bne.n	800f152 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2205      	movs	r2, #5
 800f12c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f12e:	e010      	b.n	800f152 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f004 fe05 	bl	8013d40 <tcp_send_fin>
 800f136:	4603      	mov	r3, r0
 800f138:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d109      	bne.n	800f156 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2209      	movs	r2, #9
 800f146:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f148:	e005      	b.n	800f156 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f14a:	2300      	movs	r3, #0
 800f14c:	e01c      	b.n	800f188 <tcp_close_shutdown_fin+0xb8>
      break;
 800f14e:	bf00      	nop
 800f150:	e002      	b.n	800f158 <tcp_close_shutdown_fin+0x88>
      break;
 800f152:	bf00      	nop
 800f154:	e000      	b.n	800f158 <tcp_close_shutdown_fin+0x88>
      break;
 800f156:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d103      	bne.n	800f168 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f004 ff2b 	bl	8013fbc <tcp_output>
 800f166:	e00d      	b.n	800f184 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800f168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f170:	d108      	bne.n	800f184 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	8b5b      	ldrh	r3, [r3, #26]
 800f176:	f043 0308 	orr.w	r3, r3, #8
 800f17a:	b29a      	uxth	r2, r3
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	e001      	b.n	800f188 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800f184:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	0801ce94 	.word	0x0801ce94
 800f194:	0801cf44 	.word	0x0801cf44
 800f198:	0801ced8 	.word	0x0801ced8

0800f19c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d109      	bne.n	800f1be <tcp_close+0x22>
 800f1aa:	4b0f      	ldr	r3, [pc, #60]	; (800f1e8 <tcp_close+0x4c>)
 800f1ac:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f1b0:	490e      	ldr	r1, [pc, #56]	; (800f1ec <tcp_close+0x50>)
 800f1b2:	480f      	ldr	r0, [pc, #60]	; (800f1f0 <tcp_close+0x54>)
 800f1b4:	f00b f906 	bl	801a3c4 <iprintf>
 800f1b8:	f06f 030f 	mvn.w	r3, #15
 800f1bc:	e00f      	b.n	800f1de <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	7d1b      	ldrb	r3, [r3, #20]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d006      	beq.n	800f1d4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	8b5b      	ldrh	r3, [r3, #26]
 800f1ca:	f043 0310 	orr.w	r3, r3, #16
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f1d4:	2101      	movs	r1, #1
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7ff fe9c 	bl	800ef14 <tcp_close_shutdown>
 800f1dc:	4603      	mov	r3, r0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3708      	adds	r7, #8
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	0801ce94 	.word	0x0801ce94
 800f1ec:	0801cfa4 	.word	0x0801cfa4
 800f1f0:	0801ced8 	.word	0x0801ced8

0800f1f4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d109      	bne.n	800f21a <tcp_shutdown+0x26>
 800f206:	4b25      	ldr	r3, [pc, #148]	; (800f29c <tcp_shutdown+0xa8>)
 800f208:	f240 2207 	movw	r2, #519	; 0x207
 800f20c:	4924      	ldr	r1, [pc, #144]	; (800f2a0 <tcp_shutdown+0xac>)
 800f20e:	4825      	ldr	r0, [pc, #148]	; (800f2a4 <tcp_shutdown+0xb0>)
 800f210:	f00b f8d8 	bl	801a3c4 <iprintf>
 800f214:	f06f 030f 	mvn.w	r3, #15
 800f218:	e03c      	b.n	800f294 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	7d1b      	ldrb	r3, [r3, #20]
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d102      	bne.n	800f228 <tcp_shutdown+0x34>
    return ERR_CONN;
 800f222:	f06f 030a 	mvn.w	r3, #10
 800f226:	e035      	b.n	800f294 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d01b      	beq.n	800f266 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	8b5b      	ldrh	r3, [r3, #26]
 800f232:	f043 0310 	orr.w	r3, r3, #16
 800f236:	b29a      	uxth	r2, r3
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d005      	beq.n	800f24e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f242:	2101      	movs	r1, #1
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f7ff fe65 	bl	800ef14 <tcp_close_shutdown>
 800f24a:	4603      	mov	r3, r0
 800f24c:	e022      	b.n	800f294 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f252:	2b00      	cmp	r3, #0
 800f254:	d007      	beq.n	800f266 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7ff faec 	bl	800e838 <pbuf_free>
      pcb->refused_data = NULL;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2200      	movs	r2, #0
 800f264:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d012      	beq.n	800f292 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	7d1b      	ldrb	r3, [r3, #20]
 800f270:	2b03      	cmp	r3, #3
 800f272:	db0b      	blt.n	800f28c <tcp_shutdown+0x98>
 800f274:	2b04      	cmp	r3, #4
 800f276:	dd01      	ble.n	800f27c <tcp_shutdown+0x88>
 800f278:	2b07      	cmp	r3, #7
 800f27a:	d107      	bne.n	800f28c <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	4619      	mov	r1, r3
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f7ff fe46 	bl	800ef14 <tcp_close_shutdown>
 800f288:	4603      	mov	r3, r0
 800f28a:	e003      	b.n	800f294 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f28c:	f06f 030a 	mvn.w	r3, #10
 800f290:	e000      	b.n	800f294 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800f292:	2300      	movs	r3, #0
}
 800f294:	4618      	mov	r0, r3
 800f296:	3710      	adds	r7, #16
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	0801ce94 	.word	0x0801ce94
 800f2a0:	0801cfbc 	.word	0x0801cfbc
 800f2a4:	0801ced8 	.word	0x0801ced8

0800f2a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b08e      	sub	sp, #56	; 0x38
 800f2ac:	af04      	add	r7, sp, #16
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d107      	bne.n	800f2c8 <tcp_abandon+0x20>
 800f2b8:	4b52      	ldr	r3, [pc, #328]	; (800f404 <tcp_abandon+0x15c>)
 800f2ba:	f240 223d 	movw	r2, #573	; 0x23d
 800f2be:	4952      	ldr	r1, [pc, #328]	; (800f408 <tcp_abandon+0x160>)
 800f2c0:	4852      	ldr	r0, [pc, #328]	; (800f40c <tcp_abandon+0x164>)
 800f2c2:	f00b f87f 	bl	801a3c4 <iprintf>
 800f2c6:	e099      	b.n	800f3fc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	7d1b      	ldrb	r3, [r3, #20]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d106      	bne.n	800f2de <tcp_abandon+0x36>
 800f2d0:	4b4c      	ldr	r3, [pc, #304]	; (800f404 <tcp_abandon+0x15c>)
 800f2d2:	f240 2241 	movw	r2, #577	; 0x241
 800f2d6:	494e      	ldr	r1, [pc, #312]	; (800f410 <tcp_abandon+0x168>)
 800f2d8:	484c      	ldr	r0, [pc, #304]	; (800f40c <tcp_abandon+0x164>)
 800f2da:	f00b f873 	bl	801a3c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	7d1b      	ldrb	r3, [r3, #20]
 800f2e2:	2b0a      	cmp	r3, #10
 800f2e4:	d107      	bne.n	800f2f6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f2e6:	6879      	ldr	r1, [r7, #4]
 800f2e8:	484a      	ldr	r0, [pc, #296]	; (800f414 <tcp_abandon+0x16c>)
 800f2ea:	f001 fa4f 	bl	801078c <tcp_pcb_remove>
    tcp_free(pcb);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7ff fd5e 	bl	800edb0 <tcp_free>
 800f2f4:	e082      	b.n	800f3fc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f302:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f308:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f310:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	691b      	ldr	r3, [r3, #16]
 800f316:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	7d1b      	ldrb	r3, [r3, #20]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d126      	bne.n	800f36e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	8adb      	ldrh	r3, [r3, #22]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d02e      	beq.n	800f386 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f328:	4b3b      	ldr	r3, [pc, #236]	; (800f418 <tcp_abandon+0x170>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d105      	bne.n	800f33e <tcp_abandon+0x96>
 800f332:	4b39      	ldr	r3, [pc, #228]	; (800f418 <tcp_abandon+0x170>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	4a37      	ldr	r2, [pc, #220]	; (800f418 <tcp_abandon+0x170>)
 800f33a:	6013      	str	r3, [r2, #0]
 800f33c:	e013      	b.n	800f366 <tcp_abandon+0xbe>
 800f33e:	4b36      	ldr	r3, [pc, #216]	; (800f418 <tcp_abandon+0x170>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	61fb      	str	r3, [r7, #28]
 800f344:	e00c      	b.n	800f360 <tcp_abandon+0xb8>
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d104      	bne.n	800f35a <tcp_abandon+0xb2>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	68da      	ldr	r2, [r3, #12]
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	60da      	str	r2, [r3, #12]
 800f358:	e005      	b.n	800f366 <tcp_abandon+0xbe>
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	61fb      	str	r3, [r7, #28]
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d1ef      	bne.n	800f346 <tcp_abandon+0x9e>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	60da      	str	r2, [r3, #12]
 800f36c:	e00b      	b.n	800f386 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	8adb      	ldrh	r3, [r3, #22]
 800f376:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f378:	6879      	ldr	r1, [r7, #4]
 800f37a:	4828      	ldr	r0, [pc, #160]	; (800f41c <tcp_abandon+0x174>)
 800f37c:	f001 fa06 	bl	801078c <tcp_pcb_remove>
 800f380:	4b27      	ldr	r3, [pc, #156]	; (800f420 <tcp_abandon+0x178>)
 800f382:	2201      	movs	r2, #1
 800f384:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d004      	beq.n	800f398 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f392:	4618      	mov	r0, r3
 800f394:	f000 fedc 	bl	8010150 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d004      	beq.n	800f3aa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f000 fed3 	bl	8010150 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d004      	beq.n	800f3bc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f000 feca 	bl	8010150 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00e      	beq.n	800f3e0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f3c2:	6879      	ldr	r1, [r7, #4]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	8b12      	ldrh	r2, [r2, #24]
 800f3cc:	9202      	str	r2, [sp, #8]
 800f3ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f3d0:	9201      	str	r2, [sp, #4]
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	460b      	mov	r3, r1
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	69b9      	ldr	r1, [r7, #24]
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f005 fbb2 	bl	8014b44 <tcp_rst>
    }
    last_state = pcb->state;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	7d1b      	ldrb	r3, [r3, #20]
 800f3e4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff fce2 	bl	800edb0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d004      	beq.n	800f3fc <tcp_abandon+0x154>
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	f06f 010c 	mvn.w	r1, #12
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	4798      	blx	r3
  }
}
 800f3fc:	3728      	adds	r7, #40	; 0x28
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	0801ce94 	.word	0x0801ce94
 800f408:	0801cfd8 	.word	0x0801cfd8
 800f40c:	0801ced8 	.word	0x0801ced8
 800f410:	0801cff4 	.word	0x0801cff4
 800f414:	2000bae0 	.word	0x2000bae0
 800f418:	2000badc 	.word	0x2000badc
 800f41c:	2000bad0 	.word	0x2000bad0
 800f420:	2000bacc 	.word	0x2000bacc

0800f424 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f42c:	2101      	movs	r1, #1
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7ff ff3a 	bl	800f2a8 <tcp_abandon>
}
 800f434:	bf00      	nop
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b088      	sub	sp, #32
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	4613      	mov	r3, r2
 800f448:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f44a:	2304      	movs	r3, #4
 800f44c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d101      	bne.n	800f458 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f454:	4b3e      	ldr	r3, [pc, #248]	; (800f550 <tcp_bind+0x114>)
 800f456:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d109      	bne.n	800f472 <tcp_bind+0x36>
 800f45e:	4b3d      	ldr	r3, [pc, #244]	; (800f554 <tcp_bind+0x118>)
 800f460:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f464:	493c      	ldr	r1, [pc, #240]	; (800f558 <tcp_bind+0x11c>)
 800f466:	483d      	ldr	r0, [pc, #244]	; (800f55c <tcp_bind+0x120>)
 800f468:	f00a ffac 	bl	801a3c4 <iprintf>
 800f46c:	f06f 030f 	mvn.w	r3, #15
 800f470:	e06a      	b.n	800f548 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	7d1b      	ldrb	r3, [r3, #20]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d009      	beq.n	800f48e <tcp_bind+0x52>
 800f47a:	4b36      	ldr	r3, [pc, #216]	; (800f554 <tcp_bind+0x118>)
 800f47c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f480:	4937      	ldr	r1, [pc, #220]	; (800f560 <tcp_bind+0x124>)
 800f482:	4836      	ldr	r0, [pc, #216]	; (800f55c <tcp_bind+0x120>)
 800f484:	f00a ff9e 	bl	801a3c4 <iprintf>
 800f488:	f06f 0305 	mvn.w	r3, #5
 800f48c:	e05c      	b.n	800f548 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f48e:	88fb      	ldrh	r3, [r7, #6]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d109      	bne.n	800f4a8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f494:	f000 f9f8 	bl	800f888 <tcp_new_port>
 800f498:	4603      	mov	r3, r0
 800f49a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f49c:	88fb      	ldrh	r3, [r7, #6]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d135      	bne.n	800f50e <tcp_bind+0xd2>
      return ERR_BUF;
 800f4a2:	f06f 0301 	mvn.w	r3, #1
 800f4a6:	e04f      	b.n	800f548 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	61fb      	str	r3, [r7, #28]
 800f4ac:	e02b      	b.n	800f506 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4ae:	4a2d      	ldr	r2, [pc, #180]	; (800f564 <tcp_bind+0x128>)
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	61bb      	str	r3, [r7, #24]
 800f4ba:	e01e      	b.n	800f4fa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	8adb      	ldrh	r3, [r3, #22]
 800f4c0:	88fa      	ldrh	r2, [r7, #6]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d116      	bne.n	800f4f4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f4c6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d010      	beq.n	800f4ee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00c      	beq.n	800f4ee <tcp_bind+0xb2>
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d009      	beq.n	800f4ee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d005      	beq.n	800f4ee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d102      	bne.n	800f4f4 <tcp_bind+0xb8>
              return ERR_USE;
 800f4ee:	f06f 0307 	mvn.w	r3, #7
 800f4f2:	e029      	b.n	800f548 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	61bb      	str	r3, [r7, #24]
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d1dd      	bne.n	800f4bc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	3301      	adds	r3, #1
 800f504:	61fb      	str	r3, [r7, #28]
 800f506:	69fa      	ldr	r2, [r7, #28]
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	dbcf      	blt.n	800f4ae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d00c      	beq.n	800f52e <tcp_bind+0xf2>
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d008      	beq.n	800f52e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d002      	beq.n	800f528 <tcp_bind+0xec>
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	e000      	b.n	800f52a <tcp_bind+0xee>
 800f528:	2300      	movs	r3, #0
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	88fa      	ldrh	r2, [r7, #6]
 800f532:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f534:	4b0c      	ldr	r3, [pc, #48]	; (800f568 <tcp_bind+0x12c>)
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	60da      	str	r2, [r3, #12]
 800f53c:	4a0a      	ldr	r2, [pc, #40]	; (800f568 <tcp_bind+0x12c>)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6013      	str	r3, [r2, #0]
 800f542:	f005 fcc1 	bl	8014ec8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f546:	2300      	movs	r3, #0
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3720      	adds	r7, #32
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	0801f328 	.word	0x0801f328
 800f554:	0801ce94 	.word	0x0801ce94
 800f558:	0801d028 	.word	0x0801d028
 800f55c:	0801ced8 	.word	0x0801ced8
 800f560:	0801d040 	.word	0x0801d040
 800f564:	0801f2f0 	.word	0x0801f2f0
 800f568:	2000badc 	.word	0x2000badc

0800f56c <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d007      	beq.n	800f58c <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f582:	3301      	adds	r3, #1
 800f584:	b2da      	uxtb	r2, r3
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 800f58a:	e002      	b.n	800f592 <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	721a      	strb	r2, [r3, #8]
}
 800f592:	bf00      	nop
 800f594:	370c      	adds	r7, #12
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr
	...

0800f5a0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d106      	bne.n	800f5c2 <tcp_accept_null+0x22>
 800f5b4:	4b07      	ldr	r3, [pc, #28]	; (800f5d4 <tcp_accept_null+0x34>)
 800f5b6:	f240 320f 	movw	r2, #783	; 0x30f
 800f5ba:	4907      	ldr	r1, [pc, #28]	; (800f5d8 <tcp_accept_null+0x38>)
 800f5bc:	4807      	ldr	r0, [pc, #28]	; (800f5dc <tcp_accept_null+0x3c>)
 800f5be:	f00a ff01 	bl	801a3c4 <iprintf>

  tcp_abort(pcb);
 800f5c2:	68b8      	ldr	r0, [r7, #8]
 800f5c4:	f7ff ff2e 	bl	800f424 <tcp_abort>

  return ERR_ABRT;
 800f5c8:	f06f 030c 	mvn.w	r3, #12
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	0801ce94 	.word	0x0801ce94
 800f5d8:	0801d068 	.word	0x0801d068
 800f5dc:	0801ced8 	.word	0x0801ced8

0800f5e0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b088      	sub	sp, #32
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	607a      	str	r2, [r7, #4]
 800f5ec:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d109      	bne.n	800f60c <tcp_listen_with_backlog_and_err+0x2c>
 800f5f8:	4b47      	ldr	r3, [pc, #284]	; (800f718 <tcp_listen_with_backlog_and_err+0x138>)
 800f5fa:	f240 3259 	movw	r2, #857	; 0x359
 800f5fe:	4947      	ldr	r1, [pc, #284]	; (800f71c <tcp_listen_with_backlog_and_err+0x13c>)
 800f600:	4847      	ldr	r0, [pc, #284]	; (800f720 <tcp_listen_with_backlog_and_err+0x140>)
 800f602:	f00a fedf 	bl	801a3c4 <iprintf>
 800f606:	23f0      	movs	r3, #240	; 0xf0
 800f608:	76fb      	strb	r3, [r7, #27]
 800f60a:	e079      	b.n	800f700 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	7d1b      	ldrb	r3, [r3, #20]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d009      	beq.n	800f628 <tcp_listen_with_backlog_and_err+0x48>
 800f614:	4b40      	ldr	r3, [pc, #256]	; (800f718 <tcp_listen_with_backlog_and_err+0x138>)
 800f616:	f240 325a 	movw	r2, #858	; 0x35a
 800f61a:	4942      	ldr	r1, [pc, #264]	; (800f724 <tcp_listen_with_backlog_and_err+0x144>)
 800f61c:	4840      	ldr	r0, [pc, #256]	; (800f720 <tcp_listen_with_backlog_and_err+0x140>)
 800f61e:	f00a fed1 	bl	801a3c4 <iprintf>
 800f622:	23f1      	movs	r3, #241	; 0xf1
 800f624:	76fb      	strb	r3, [r7, #27]
 800f626:	e06b      	b.n	800f700 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	7d1b      	ldrb	r3, [r3, #20]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d104      	bne.n	800f63a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f634:	23f7      	movs	r3, #247	; 0xf7
 800f636:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f638:	e062      	b.n	800f700 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f63a:	2002      	movs	r0, #2
 800f63c:	f7fe f9c6 	bl	800d9cc <memp_malloc>
 800f640:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d102      	bne.n	800f64e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f648:	23ff      	movs	r3, #255	; 0xff
 800f64a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f64c:	e058      	b.n	800f700 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	691a      	ldr	r2, [r3, #16]
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	8ada      	ldrh	r2, [r3, #22]
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	2201      	movs	r2, #1
 800f662:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	7d5a      	ldrb	r2, [r3, #21]
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	7a5a      	ldrb	r2, [r3, #9]
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	2200      	movs	r2, #0
 800f678:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	7ada      	ldrb	r2, [r3, #11]
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	7a9a      	ldrb	r2, [r3, #10]
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	8adb      	ldrh	r3, [r3, #22]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d021      	beq.n	800f6de <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f69a:	4b23      	ldr	r3, [pc, #140]	; (800f728 <tcp_listen_with_backlog_and_err+0x148>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d105      	bne.n	800f6b0 <tcp_listen_with_backlog_and_err+0xd0>
 800f6a4:	4b20      	ldr	r3, [pc, #128]	; (800f728 <tcp_listen_with_backlog_and_err+0x148>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	4a1f      	ldr	r2, [pc, #124]	; (800f728 <tcp_listen_with_backlog_and_err+0x148>)
 800f6ac:	6013      	str	r3, [r2, #0]
 800f6ae:	e013      	b.n	800f6d8 <tcp_listen_with_backlog_and_err+0xf8>
 800f6b0:	4b1d      	ldr	r3, [pc, #116]	; (800f728 <tcp_listen_with_backlog_and_err+0x148>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	617b      	str	r3, [r7, #20]
 800f6b6:	e00c      	b.n	800f6d2 <tcp_listen_with_backlog_and_err+0xf2>
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d104      	bne.n	800f6cc <tcp_listen_with_backlog_and_err+0xec>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	68da      	ldr	r2, [r3, #12]
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	60da      	str	r2, [r3, #12]
 800f6ca:	e005      	b.n	800f6d8 <tcp_listen_with_backlog_and_err+0xf8>
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	617b      	str	r3, [r7, #20]
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d1ef      	bne.n	800f6b8 <tcp_listen_with_backlog_and_err+0xd8>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f7ff fb66 	bl	800edb0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	4a11      	ldr	r2, [pc, #68]	; (800f72c <tcp_listen_with_backlog_and_err+0x14c>)
 800f6e8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f6ea:	4b11      	ldr	r3, [pc, #68]	; (800f730 <tcp_listen_with_backlog_and_err+0x150>)
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	60da      	str	r2, [r3, #12]
 800f6f2:	4a0f      	ldr	r2, [pc, #60]	; (800f730 <tcp_listen_with_backlog_and_err+0x150>)
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	6013      	str	r3, [r2, #0]
 800f6f8:	f005 fbe6 	bl	8014ec8 <tcp_timer_needed>
  res = ERR_OK;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d002      	beq.n	800f70c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	7efa      	ldrb	r2, [r7, #27]
 800f70a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f70c:	69fb      	ldr	r3, [r7, #28]
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3720      	adds	r7, #32
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	0801ce94 	.word	0x0801ce94
 800f71c:	0801d088 	.word	0x0801d088
 800f720:	0801ced8 	.word	0x0801ced8
 800f724:	0801d0b8 	.word	0x0801d0b8
 800f728:	2000badc 	.word	0x2000badc
 800f72c:	0800f5a1 	.word	0x0800f5a1
 800f730:	2000bad8 	.word	0x2000bad8

0800f734 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d106      	bne.n	800f750 <tcp_update_rcv_ann_wnd+0x1c>
 800f742:	4b25      	ldr	r3, [pc, #148]	; (800f7d8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f744:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f748:	4924      	ldr	r1, [pc, #144]	; (800f7dc <tcp_update_rcv_ann_wnd+0xa8>)
 800f74a:	4825      	ldr	r0, [pc, #148]	; (800f7e0 <tcp_update_rcv_ann_wnd+0xac>)
 800f74c:	f00a fe3a 	bl	801a3c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f758:	4413      	add	r3, r2
 800f75a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f764:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f768:	bf28      	it	cs
 800f76a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f76e:	b292      	uxth	r2, r2
 800f770:	4413      	add	r3, r2
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	1ad3      	subs	r3, r2, r3
 800f776:	2b00      	cmp	r3, #0
 800f778:	db08      	blt.n	800f78c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	1ad3      	subs	r3, r2, r3
 800f78a:	e020      	b.n	800f7ce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f794:	1ad3      	subs	r3, r2, r3
 800f796:	2b00      	cmp	r3, #0
 800f798:	dd03      	ble.n	800f7a2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2200      	movs	r2, #0
 800f79e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f7a0:	e014      	b.n	800f7cc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7aa:	1ad3      	subs	r3, r2, r3
 800f7ac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7b4:	d306      	bcc.n	800f7c4 <tcp_update_rcv_ann_wnd+0x90>
 800f7b6:	4b08      	ldr	r3, [pc, #32]	; (800f7d8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f7b8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f7bc:	4909      	ldr	r1, [pc, #36]	; (800f7e4 <tcp_update_rcv_ann_wnd+0xb0>)
 800f7be:	4808      	ldr	r0, [pc, #32]	; (800f7e0 <tcp_update_rcv_ann_wnd+0xac>)
 800f7c0:	f00a fe00 	bl	801a3c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	b29a      	uxth	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f7cc:	2300      	movs	r3, #0
  }
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3710      	adds	r7, #16
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	0801ce94 	.word	0x0801ce94
 800f7dc:	0801d0f0 	.word	0x0801d0f0
 800f7e0:	0801ced8 	.word	0x0801ced8
 800f7e4:	0801d114 	.word	0x0801d114

0800f7e8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d107      	bne.n	800f80a <tcp_recved+0x22>
 800f7fa:	4b1f      	ldr	r3, [pc, #124]	; (800f878 <tcp_recved+0x90>)
 800f7fc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f800:	491e      	ldr	r1, [pc, #120]	; (800f87c <tcp_recved+0x94>)
 800f802:	481f      	ldr	r0, [pc, #124]	; (800f880 <tcp_recved+0x98>)
 800f804:	f00a fdde 	bl	801a3c4 <iprintf>
 800f808:	e032      	b.n	800f870 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	7d1b      	ldrb	r3, [r3, #20]
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d106      	bne.n	800f820 <tcp_recved+0x38>
 800f812:	4b19      	ldr	r3, [pc, #100]	; (800f878 <tcp_recved+0x90>)
 800f814:	f240 32d3 	movw	r2, #979	; 0x3d3
 800f818:	491a      	ldr	r1, [pc, #104]	; (800f884 <tcp_recved+0x9c>)
 800f81a:	4819      	ldr	r0, [pc, #100]	; (800f880 <tcp_recved+0x98>)
 800f81c:	f00a fdd2 	bl	801a3c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f824:	887b      	ldrh	r3, [r7, #2]
 800f826:	4413      	add	r3, r2
 800f828:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f82a:	89fb      	ldrh	r3, [r7, #14]
 800f82c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f830:	d804      	bhi.n	800f83c <tcp_recved+0x54>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f836:	89fa      	ldrh	r2, [r7, #14]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d204      	bcs.n	800f846 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f842:	851a      	strh	r2, [r3, #40]	; 0x28
 800f844:	e002      	b.n	800f84c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	89fa      	ldrh	r2, [r7, #14]
 800f84a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7ff ff71 	bl	800f734 <tcp_update_rcv_ann_wnd>
 800f852:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f85a:	d309      	bcc.n	800f870 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	8b5b      	ldrh	r3, [r3, #26]
 800f860:	f043 0302 	orr.w	r3, r3, #2
 800f864:	b29a      	uxth	r2, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f004 fba6 	bl	8013fbc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
 800f876:	bf00      	nop
 800f878:	0801ce94 	.word	0x0801ce94
 800f87c:	0801d130 	.word	0x0801d130
 800f880:	0801ced8 	.word	0x0801ced8
 800f884:	0801d148 	.word	0x0801d148

0800f888 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f88e:	2300      	movs	r3, #0
 800f890:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f892:	4b1e      	ldr	r3, [pc, #120]	; (800f90c <tcp_new_port+0x84>)
 800f894:	881b      	ldrh	r3, [r3, #0]
 800f896:	3301      	adds	r3, #1
 800f898:	b29a      	uxth	r2, r3
 800f89a:	4b1c      	ldr	r3, [pc, #112]	; (800f90c <tcp_new_port+0x84>)
 800f89c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f89e:	4b1b      	ldr	r3, [pc, #108]	; (800f90c <tcp_new_port+0x84>)
 800f8a0:	881b      	ldrh	r3, [r3, #0]
 800f8a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d103      	bne.n	800f8b2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f8aa:	4b18      	ldr	r3, [pc, #96]	; (800f90c <tcp_new_port+0x84>)
 800f8ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f8b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	71fb      	strb	r3, [r7, #7]
 800f8b6:	e01e      	b.n	800f8f6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f8b8:	79fb      	ldrb	r3, [r7, #7]
 800f8ba:	4a15      	ldr	r2, [pc, #84]	; (800f910 <tcp_new_port+0x88>)
 800f8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	603b      	str	r3, [r7, #0]
 800f8c4:	e011      	b.n	800f8ea <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	8ada      	ldrh	r2, [r3, #22]
 800f8ca:	4b10      	ldr	r3, [pc, #64]	; (800f90c <tcp_new_port+0x84>)
 800f8cc:	881b      	ldrh	r3, [r3, #0]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d108      	bne.n	800f8e4 <tcp_new_port+0x5c>
        n++;
 800f8d2:	88bb      	ldrh	r3, [r7, #4]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f8d8:	88bb      	ldrh	r3, [r7, #4]
 800f8da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8de:	d3d8      	bcc.n	800f892 <tcp_new_port+0xa>
          return 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	e00d      	b.n	800f900 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	603b      	str	r3, [r7, #0]
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d1ea      	bne.n	800f8c6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f8f0:	79fb      	ldrb	r3, [r7, #7]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	71fb      	strb	r3, [r7, #7]
 800f8f6:	79fb      	ldrb	r3, [r7, #7]
 800f8f8:	2b03      	cmp	r3, #3
 800f8fa:	d9dd      	bls.n	800f8b8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f8fc:	4b03      	ldr	r3, [pc, #12]	; (800f90c <tcp_new_port+0x84>)
 800f8fe:	881b      	ldrh	r3, [r3, #0]
}
 800f900:	4618      	mov	r0, r3
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr
 800f90c:	20000014 	.word	0x20000014
 800f910:	0801f2f0 	.word	0x0801f2f0

0800f914 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f914:	b5b0      	push	{r4, r5, r7, lr}
 800f916:	b090      	sub	sp, #64	; 0x40
 800f918:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f91a:	2300      	movs	r3, #0
 800f91c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f920:	4b94      	ldr	r3, [pc, #592]	; (800fb74 <tcp_slowtmr+0x260>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	3301      	adds	r3, #1
 800f926:	4a93      	ldr	r2, [pc, #588]	; (800fb74 <tcp_slowtmr+0x260>)
 800f928:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f92a:	4b93      	ldr	r3, [pc, #588]	; (800fb78 <tcp_slowtmr+0x264>)
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	3301      	adds	r3, #1
 800f930:	b2da      	uxtb	r2, r3
 800f932:	4b91      	ldr	r3, [pc, #580]	; (800fb78 <tcp_slowtmr+0x264>)
 800f934:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f936:	2300      	movs	r3, #0
 800f938:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f93a:	4b90      	ldr	r3, [pc, #576]	; (800fb7c <tcp_slowtmr+0x268>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f940:	e29f      	b.n	800fe82 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f944:	7d1b      	ldrb	r3, [r3, #20]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d106      	bne.n	800f958 <tcp_slowtmr+0x44>
 800f94a:	4b8d      	ldr	r3, [pc, #564]	; (800fb80 <tcp_slowtmr+0x26c>)
 800f94c:	f240 42be 	movw	r2, #1214	; 0x4be
 800f950:	498c      	ldr	r1, [pc, #560]	; (800fb84 <tcp_slowtmr+0x270>)
 800f952:	488d      	ldr	r0, [pc, #564]	; (800fb88 <tcp_slowtmr+0x274>)
 800f954:	f00a fd36 	bl	801a3c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95a:	7d1b      	ldrb	r3, [r3, #20]
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d106      	bne.n	800f96e <tcp_slowtmr+0x5a>
 800f960:	4b87      	ldr	r3, [pc, #540]	; (800fb80 <tcp_slowtmr+0x26c>)
 800f962:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f966:	4989      	ldr	r1, [pc, #548]	; (800fb8c <tcp_slowtmr+0x278>)
 800f968:	4887      	ldr	r0, [pc, #540]	; (800fb88 <tcp_slowtmr+0x274>)
 800f96a:	f00a fd2b 	bl	801a3c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f970:	7d1b      	ldrb	r3, [r3, #20]
 800f972:	2b0a      	cmp	r3, #10
 800f974:	d106      	bne.n	800f984 <tcp_slowtmr+0x70>
 800f976:	4b82      	ldr	r3, [pc, #520]	; (800fb80 <tcp_slowtmr+0x26c>)
 800f978:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f97c:	4984      	ldr	r1, [pc, #528]	; (800fb90 <tcp_slowtmr+0x27c>)
 800f97e:	4882      	ldr	r0, [pc, #520]	; (800fb88 <tcp_slowtmr+0x274>)
 800f980:	f00a fd20 	bl	801a3c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f986:	7f9a      	ldrb	r2, [r3, #30]
 800f988:	4b7b      	ldr	r3, [pc, #492]	; (800fb78 <tcp_slowtmr+0x264>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d105      	bne.n	800f99c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f992:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f99a:	e272      	b.n	800fe82 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f99c:	4b76      	ldr	r3, [pc, #472]	; (800fb78 <tcp_slowtmr+0x264>)
 800f99e:	781a      	ldrb	r2, [r3, #0]
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b2:	7d1b      	ldrb	r3, [r3, #20]
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d10a      	bne.n	800f9ce <tcp_slowtmr+0xba>
 800f9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9be:	2b05      	cmp	r3, #5
 800f9c0:	d905      	bls.n	800f9ce <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f9c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f9cc:	e11e      	b.n	800fc0c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9d4:	2b0b      	cmp	r3, #11
 800f9d6:	d905      	bls.n	800f9e4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9dc:	3301      	adds	r3, #1
 800f9de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f9e2:	e113      	b.n	800fc0c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d075      	beq.n	800fada <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d006      	beq.n	800fa04 <tcp_slowtmr+0xf0>
 800f9f6:	4b62      	ldr	r3, [pc, #392]	; (800fb80 <tcp_slowtmr+0x26c>)
 800f9f8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f9fc:	4965      	ldr	r1, [pc, #404]	; (800fb94 <tcp_slowtmr+0x280>)
 800f9fe:	4862      	ldr	r0, [pc, #392]	; (800fb88 <tcp_slowtmr+0x274>)
 800fa00:	f00a fce0 	bl	801a3c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d106      	bne.n	800fa1a <tcp_slowtmr+0x106>
 800fa0c:	4b5c      	ldr	r3, [pc, #368]	; (800fb80 <tcp_slowtmr+0x26c>)
 800fa0e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fa12:	4961      	ldr	r1, [pc, #388]	; (800fb98 <tcp_slowtmr+0x284>)
 800fa14:	485c      	ldr	r0, [pc, #368]	; (800fb88 <tcp_slowtmr+0x274>)
 800fa16:	f00a fcd5 	bl	801a3c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fa20:	2b0b      	cmp	r3, #11
 800fa22:	d905      	bls.n	800fa30 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fa24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa28:	3301      	adds	r3, #1
 800fa2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa2e:	e0ed      	b.n	800fc0c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa36:	3b01      	subs	r3, #1
 800fa38:	4a58      	ldr	r2, [pc, #352]	; (800fb9c <tcp_slowtmr+0x288>)
 800fa3a:	5cd3      	ldrb	r3, [r2, r3]
 800fa3c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fa44:	7c7a      	ldrb	r2, [r7, #17]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d907      	bls.n	800fa5a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fa50:	3301      	adds	r3, #1
 800fa52:	b2da      	uxtb	r2, r3
 800fa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa56:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fa60:	7c7a      	ldrb	r2, [r7, #17]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	f200 80d2 	bhi.w	800fc0c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fa68:	2301      	movs	r3, #1
 800fa6a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d108      	bne.n	800fa88 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fa76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa78:	f005 f958 	bl	8014d2c <tcp_zero_window_probe>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d014      	beq.n	800faac <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fa82:	2300      	movs	r3, #0
 800fa84:	623b      	str	r3, [r7, #32]
 800fa86:	e011      	b.n	800faac <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa8e:	4619      	mov	r1, r3
 800fa90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa92:	f004 f80d 	bl	8013ab0 <tcp_split_unsent_seg>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d107      	bne.n	800faac <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fa9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa9e:	f004 fa8d 	bl	8013fbc <tcp_output>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d101      	bne.n	800faac <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800faa8:	2300      	movs	r3, #0
 800faaa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800faac:	6a3b      	ldr	r3, [r7, #32]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	f000 80ac 	beq.w	800fc0c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fac2:	2b06      	cmp	r3, #6
 800fac4:	f200 80a2 	bhi.w	800fc0c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800face:	3301      	adds	r3, #1
 800fad0:	b2da      	uxtb	r2, r3
 800fad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fad8:	e098      	b.n	800fc0c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fadc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	db0f      	blt.n	800fb04 <tcp_slowtmr+0x1f0>
 800fae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800faea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800faee:	4293      	cmp	r3, r2
 800faf0:	d008      	beq.n	800fb04 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800faf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	3301      	adds	r3, #1
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	b21a      	sxth	r2, r3
 800fb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb02:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb06:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fb10:	429a      	cmp	r2, r3
 800fb12:	db7b      	blt.n	800fc0c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fb14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb16:	f004 fd49 	bl	80145ac <tcp_rexmit_rto_prepare>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d007      	beq.n	800fb30 <tcp_slowtmr+0x21c>
 800fb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d171      	bne.n	800fc0c <tcp_slowtmr+0x2f8>
 800fb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d06d      	beq.n	800fc0c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb32:	7d1b      	ldrb	r3, [r3, #20]
 800fb34:	2b02      	cmp	r3, #2
 800fb36:	d03a      	beq.n	800fbae <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb3e:	2b0c      	cmp	r3, #12
 800fb40:	bf28      	it	cs
 800fb42:	230c      	movcs	r3, #12
 800fb44:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb4c:	10db      	asrs	r3, r3, #3
 800fb4e:	b21b      	sxth	r3, r3
 800fb50:	461a      	mov	r2, r3
 800fb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb58:	4413      	add	r3, r2
 800fb5a:	7efa      	ldrb	r2, [r7, #27]
 800fb5c:	4910      	ldr	r1, [pc, #64]	; (800fba0 <tcp_slowtmr+0x28c>)
 800fb5e:	5c8a      	ldrb	r2, [r1, r2]
 800fb60:	4093      	lsls	r3, r2
 800fb62:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fb6a:	4293      	cmp	r3, r2
 800fb6c:	dc1a      	bgt.n	800fba4 <tcp_slowtmr+0x290>
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	b21a      	sxth	r2, r3
 800fb72:	e019      	b.n	800fba8 <tcp_slowtmr+0x294>
 800fb74:	2000bad4 	.word	0x2000bad4
 800fb78:	20004bba 	.word	0x20004bba
 800fb7c:	2000bad0 	.word	0x2000bad0
 800fb80:	0801ce94 	.word	0x0801ce94
 800fb84:	0801d1d8 	.word	0x0801d1d8
 800fb88:	0801ced8 	.word	0x0801ced8
 800fb8c:	0801d204 	.word	0x0801d204
 800fb90:	0801d230 	.word	0x0801d230
 800fb94:	0801d260 	.word	0x0801d260
 800fb98:	0801d294 	.word	0x0801d294
 800fb9c:	0801f2e8 	.word	0x0801f2e8
 800fba0:	0801f2d8 	.word	0x0801f2d8
 800fba4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	bf28      	it	cs
 800fbc4:	4613      	movcs	r3, r2
 800fbc6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fbc8:	8a7b      	ldrh	r3, [r7, #18]
 800fbca:	085b      	lsrs	r3, r3, #1
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbde:	005b      	lsls	r3, r3, #1
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d206      	bcs.n	800fbf4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbea:	005b      	lsls	r3, r3, #1
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc00:	2200      	movs	r2, #0
 800fc02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fc06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc08:	f004 fd40 	bl	801468c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0e:	7d1b      	ldrb	r3, [r3, #20]
 800fc10:	2b06      	cmp	r3, #6
 800fc12:	d111      	bne.n	800fc38 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc16:	8b5b      	ldrh	r3, [r3, #26]
 800fc18:	f003 0310 	and.w	r3, r3, #16
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00b      	beq.n	800fc38 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc20:	4b9d      	ldr	r3, [pc, #628]	; (800fe98 <tcp_slowtmr+0x584>)
 800fc22:	681a      	ldr	r2, [r3, #0]
 800fc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc26:	6a1b      	ldr	r3, [r3, #32]
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	2b28      	cmp	r3, #40	; 0x28
 800fc2c:	d904      	bls.n	800fc38 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fc2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc32:	3301      	adds	r3, #1
 800fc34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3a:	7a5b      	ldrb	r3, [r3, #9]
 800fc3c:	f003 0308 	and.w	r3, r3, #8
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d04c      	beq.n	800fcde <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc46:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fc48:	2b04      	cmp	r3, #4
 800fc4a:	d003      	beq.n	800fc54 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fc50:	2b07      	cmp	r3, #7
 800fc52:	d144      	bne.n	800fcde <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc54:	4b90      	ldr	r3, [pc, #576]	; (800fe98 <tcp_slowtmr+0x584>)
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5a:	6a1b      	ldr	r3, [r3, #32]
 800fc5c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc64:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800fc68:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800fc6c:	498b      	ldr	r1, [pc, #556]	; (800fe9c <tcp_slowtmr+0x588>)
 800fc6e:	fba1 1303 	umull	r1, r3, r1, r3
 800fc72:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d90a      	bls.n	800fc8e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fc78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fc82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc86:	3301      	adds	r3, #1
 800fc88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fc8c:	e027      	b.n	800fcde <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc8e:	4b82      	ldr	r3, [pc, #520]	; (800fe98 <tcp_slowtmr+0x584>)
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc94:	6a1b      	ldr	r3, [r3, #32]
 800fc96:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fca4:	4618      	mov	r0, r3
 800fca6:	4b7e      	ldr	r3, [pc, #504]	; (800fea0 <tcp_slowtmr+0x58c>)
 800fca8:	fb03 f300 	mul.w	r3, r3, r0
 800fcac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fcae:	497b      	ldr	r1, [pc, #492]	; (800fe9c <tcp_slowtmr+0x588>)
 800fcb0:	fba1 1303 	umull	r1, r3, r1, r3
 800fcb4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d911      	bls.n	800fcde <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800fcba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcbc:	f004 fff6 	bl	8014cac <tcp_keepalive>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fcc6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d107      	bne.n	800fcde <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800fcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	b2da      	uxtb	r2, r3
 800fcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcda:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d011      	beq.n	800fd0a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fce6:	4b6c      	ldr	r3, [pc, #432]	; (800fe98 <tcp_slowtmr+0x584>)
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcec:	6a1b      	ldr	r3, [r3, #32]
 800fcee:	1ad2      	subs	r2, r2, r3
 800fcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	005b      	lsls	r3, r3, #1
 800fcfc:	440b      	add	r3, r1
 800fcfe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d302      	bcc.n	800fd0a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fd04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd06:	f000 fea5 	bl	8010a54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0c:	7d1b      	ldrb	r3, [r3, #20]
 800fd0e:	2b03      	cmp	r3, #3
 800fd10:	d10b      	bne.n	800fd2a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd12:	4b61      	ldr	r3, [pc, #388]	; (800fe98 <tcp_slowtmr+0x584>)
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd18:	6a1b      	ldr	r3, [r3, #32]
 800fd1a:	1ad3      	subs	r3, r2, r3
 800fd1c:	2b28      	cmp	r3, #40	; 0x28
 800fd1e:	d904      	bls.n	800fd2a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fd20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd24:	3301      	adds	r3, #1
 800fd26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2c:	7d1b      	ldrb	r3, [r3, #20]
 800fd2e:	2b09      	cmp	r3, #9
 800fd30:	d10b      	bne.n	800fd4a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fd32:	4b59      	ldr	r3, [pc, #356]	; (800fe98 <tcp_slowtmr+0x584>)
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd38:	6a1b      	ldr	r3, [r3, #32]
 800fd3a:	1ad3      	subs	r3, r2, r3
 800fd3c:	2bf0      	cmp	r3, #240	; 0xf0
 800fd3e:	d904      	bls.n	800fd4a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800fd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd44:	3301      	adds	r3, #1
 800fd46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fd4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d060      	beq.n	800fe14 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd58:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fd5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd5c:	f000 fcc6 	bl	80106ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d010      	beq.n	800fd88 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fd66:	4b4f      	ldr	r3, [pc, #316]	; (800fea4 <tcp_slowtmr+0x590>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d106      	bne.n	800fd7e <tcp_slowtmr+0x46a>
 800fd70:	4b4d      	ldr	r3, [pc, #308]	; (800fea8 <tcp_slowtmr+0x594>)
 800fd72:	f240 526d 	movw	r2, #1389	; 0x56d
 800fd76:	494d      	ldr	r1, [pc, #308]	; (800feac <tcp_slowtmr+0x598>)
 800fd78:	484d      	ldr	r0, [pc, #308]	; (800feb0 <tcp_slowtmr+0x59c>)
 800fd7a:	f00a fb23 	bl	801a3c4 <iprintf>
        prev->next = pcb->next;
 800fd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd80:	68da      	ldr	r2, [r3, #12]
 800fd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd84:	60da      	str	r2, [r3, #12]
 800fd86:	e00f      	b.n	800fda8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fd88:	4b46      	ldr	r3, [pc, #280]	; (800fea4 <tcp_slowtmr+0x590>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d006      	beq.n	800fda0 <tcp_slowtmr+0x48c>
 800fd92:	4b45      	ldr	r3, [pc, #276]	; (800fea8 <tcp_slowtmr+0x594>)
 800fd94:	f240 5271 	movw	r2, #1393	; 0x571
 800fd98:	4946      	ldr	r1, [pc, #280]	; (800feb4 <tcp_slowtmr+0x5a0>)
 800fd9a:	4845      	ldr	r0, [pc, #276]	; (800feb0 <tcp_slowtmr+0x59c>)
 800fd9c:	f00a fb12 	bl	801a3c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	4a3f      	ldr	r2, [pc, #252]	; (800fea4 <tcp_slowtmr+0x590>)
 800fda6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fda8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d013      	beq.n	800fdd8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fdb8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbc:	3304      	adds	r3, #4
 800fdbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdc0:	8ad2      	ldrh	r2, [r2, #22]
 800fdc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdc4:	8b09      	ldrh	r1, [r1, #24]
 800fdc6:	9102      	str	r1, [sp, #8]
 800fdc8:	9201      	str	r2, [sp, #4]
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	462b      	mov	r3, r5
 800fdce:	4622      	mov	r2, r4
 800fdd0:	4601      	mov	r1, r0
 800fdd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdd4:	f004 feb6 	bl	8014b44 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdda:	691b      	ldr	r3, [r3, #16]
 800fddc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde0:	7d1b      	ldrb	r3, [r3, #20]
 800fde2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fdee:	6838      	ldr	r0, [r7, #0]
 800fdf0:	f7fe ffde 	bl	800edb0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fdf4:	4b30      	ldr	r3, [pc, #192]	; (800feb8 <tcp_slowtmr+0x5a4>)
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d004      	beq.n	800fe0a <tcp_slowtmr+0x4f6>
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f06f 010c 	mvn.w	r1, #12
 800fe06:	68b8      	ldr	r0, [r7, #8]
 800fe08:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fe0a:	4b2b      	ldr	r3, [pc, #172]	; (800feb8 <tcp_slowtmr+0x5a4>)
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d037      	beq.n	800fe82 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800fe12:	e590      	b.n	800f936 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fe14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fe18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fe1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe20:	7f1b      	ldrb	r3, [r3, #28]
 800fe22:	3301      	adds	r3, #1
 800fe24:	b2da      	uxtb	r2, r3
 800fe26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe28:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fe2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2c:	7f1a      	ldrb	r2, [r3, #28]
 800fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe30:	7f5b      	ldrb	r3, [r3, #29]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d325      	bcc.n	800fe82 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800fe36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe38:	2200      	movs	r2, #0
 800fe3a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fe3c:	4b1e      	ldr	r3, [pc, #120]	; (800feb8 <tcp_slowtmr+0x5a4>)
 800fe3e:	2200      	movs	r2, #0
 800fe40:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fe42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00b      	beq.n	800fe64 <tcp_slowtmr+0x550>
 800fe4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe54:	6912      	ldr	r2, [r2, #16]
 800fe56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe58:	4610      	mov	r0, r2
 800fe5a:	4798      	blx	r3
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fe62:	e002      	b.n	800fe6a <tcp_slowtmr+0x556>
 800fe64:	2300      	movs	r3, #0
 800fe66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fe6a:	4b13      	ldr	r3, [pc, #76]	; (800feb8 <tcp_slowtmr+0x5a4>)
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d000      	beq.n	800fe74 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800fe72:	e560      	b.n	800f936 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fe74:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d102      	bne.n	800fe82 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800fe7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe7e:	f004 f89d 	bl	8013fbc <tcp_output>
  while (pcb != NULL) {
 800fe82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f47f ad5c 	bne.w	800f942 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fe8e:	4b0b      	ldr	r3, [pc, #44]	; (800febc <tcp_slowtmr+0x5a8>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fe94:	e067      	b.n	800ff66 <tcp_slowtmr+0x652>
 800fe96:	bf00      	nop
 800fe98:	2000bad4 	.word	0x2000bad4
 800fe9c:	10624dd3 	.word	0x10624dd3
 800fea0:	000124f8 	.word	0x000124f8
 800fea4:	2000bad0 	.word	0x2000bad0
 800fea8:	0801ce94 	.word	0x0801ce94
 800feac:	0801d2cc 	.word	0x0801d2cc
 800feb0:	0801ced8 	.word	0x0801ced8
 800feb4:	0801d2f8 	.word	0x0801d2f8
 800feb8:	2000bacc 	.word	0x2000bacc
 800febc:	2000bae0 	.word	0x2000bae0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec2:	7d1b      	ldrb	r3, [r3, #20]
 800fec4:	2b0a      	cmp	r3, #10
 800fec6:	d006      	beq.n	800fed6 <tcp_slowtmr+0x5c2>
 800fec8:	4b2a      	ldr	r3, [pc, #168]	; (800ff74 <tcp_slowtmr+0x660>)
 800feca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fece:	492a      	ldr	r1, [pc, #168]	; (800ff78 <tcp_slowtmr+0x664>)
 800fed0:	482a      	ldr	r0, [pc, #168]	; (800ff7c <tcp_slowtmr+0x668>)
 800fed2:	f00a fa77 	bl	801a3c4 <iprintf>
    pcb_remove = 0;
 800fed6:	2300      	movs	r3, #0
 800fed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fedc:	4b28      	ldr	r3, [pc, #160]	; (800ff80 <tcp_slowtmr+0x66c>)
 800fede:	681a      	ldr	r2, [r3, #0]
 800fee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee2:	6a1b      	ldr	r3, [r3, #32]
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	2bf0      	cmp	r3, #240	; 0xf0
 800fee8:	d904      	bls.n	800fef4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800feea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800feee:	3301      	adds	r3, #1
 800fef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d02f      	beq.n	800ff5c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fefc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fefe:	f000 fbf5 	bl	80106ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ff02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d010      	beq.n	800ff2a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ff08:	4b1e      	ldr	r3, [pc, #120]	; (800ff84 <tcp_slowtmr+0x670>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d106      	bne.n	800ff20 <tcp_slowtmr+0x60c>
 800ff12:	4b18      	ldr	r3, [pc, #96]	; (800ff74 <tcp_slowtmr+0x660>)
 800ff14:	f240 52af 	movw	r2, #1455	; 0x5af
 800ff18:	491b      	ldr	r1, [pc, #108]	; (800ff88 <tcp_slowtmr+0x674>)
 800ff1a:	4818      	ldr	r0, [pc, #96]	; (800ff7c <tcp_slowtmr+0x668>)
 800ff1c:	f00a fa52 	bl	801a3c4 <iprintf>
        prev->next = pcb->next;
 800ff20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff22:	68da      	ldr	r2, [r3, #12]
 800ff24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff26:	60da      	str	r2, [r3, #12]
 800ff28:	e00f      	b.n	800ff4a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ff2a:	4b16      	ldr	r3, [pc, #88]	; (800ff84 <tcp_slowtmr+0x670>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d006      	beq.n	800ff42 <tcp_slowtmr+0x62e>
 800ff34:	4b0f      	ldr	r3, [pc, #60]	; (800ff74 <tcp_slowtmr+0x660>)
 800ff36:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ff3a:	4914      	ldr	r1, [pc, #80]	; (800ff8c <tcp_slowtmr+0x678>)
 800ff3c:	480f      	ldr	r0, [pc, #60]	; (800ff7c <tcp_slowtmr+0x668>)
 800ff3e:	f00a fa41 	bl	801a3c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ff42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	4a0f      	ldr	r2, [pc, #60]	; (800ff84 <tcp_slowtmr+0x670>)
 800ff48:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ff4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ff4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ff54:	69f8      	ldr	r0, [r7, #28]
 800ff56:	f7fe ff2b 	bl	800edb0 <tcp_free>
 800ff5a:	e004      	b.n	800ff66 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ff5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ff60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff62:	68db      	ldr	r3, [r3, #12]
 800ff64:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ff66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d1a9      	bne.n	800fec0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ff6c:	bf00      	nop
 800ff6e:	3730      	adds	r7, #48	; 0x30
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bdb0      	pop	{r4, r5, r7, pc}
 800ff74:	0801ce94 	.word	0x0801ce94
 800ff78:	0801d324 	.word	0x0801d324
 800ff7c:	0801ced8 	.word	0x0801ced8
 800ff80:	2000bad4 	.word	0x2000bad4
 800ff84:	2000bae0 	.word	0x2000bae0
 800ff88:	0801d354 	.word	0x0801d354
 800ff8c:	0801d37c 	.word	0x0801d37c

0800ff90 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ff96:	4b2d      	ldr	r3, [pc, #180]	; (801004c <tcp_fasttmr+0xbc>)
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	b2da      	uxtb	r2, r3
 800ff9e:	4b2b      	ldr	r3, [pc, #172]	; (801004c <tcp_fasttmr+0xbc>)
 800ffa0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ffa2:	4b2b      	ldr	r3, [pc, #172]	; (8010050 <tcp_fasttmr+0xc0>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ffa8:	e048      	b.n	801003c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	7f9a      	ldrb	r2, [r3, #30]
 800ffae:	4b27      	ldr	r3, [pc, #156]	; (801004c <tcp_fasttmr+0xbc>)
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d03f      	beq.n	8010036 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ffb6:	4b25      	ldr	r3, [pc, #148]	; (801004c <tcp_fasttmr+0xbc>)
 800ffb8:	781a      	ldrb	r2, [r3, #0]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	8b5b      	ldrh	r3, [r3, #26]
 800ffc2:	f003 0301 	and.w	r3, r3, #1
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d010      	beq.n	800ffec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	8b5b      	ldrh	r3, [r3, #26]
 800ffce:	f043 0302 	orr.w	r3, r3, #2
 800ffd2:	b29a      	uxth	r2, r3
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f003 ffef 	bl	8013fbc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	8b5b      	ldrh	r3, [r3, #26]
 800ffe2:	f023 0303 	bic.w	r3, r3, #3
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	8b5b      	ldrh	r3, [r3, #26]
 800fff0:	f003 0308 	and.w	r3, r3, #8
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d009      	beq.n	801000c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	8b5b      	ldrh	r3, [r3, #26]
 800fffc:	f023 0308 	bic.w	r3, r3, #8
 8010000:	b29a      	uxth	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f7ff f862 	bl	800f0d0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010016:	2b00      	cmp	r3, #0
 8010018:	d00a      	beq.n	8010030 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801001a:	4b0e      	ldr	r3, [pc, #56]	; (8010054 <tcp_fasttmr+0xc4>)
 801001c:	2200      	movs	r2, #0
 801001e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 f819 	bl	8010058 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010026:	4b0b      	ldr	r3, [pc, #44]	; (8010054 <tcp_fasttmr+0xc4>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d000      	beq.n	8010030 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801002e:	e7b8      	b.n	800ffa2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	607b      	str	r3, [r7, #4]
 8010034:	e002      	b.n	801003c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d1b3      	bne.n	800ffaa <tcp_fasttmr+0x1a>
    }
  }
}
 8010042:	bf00      	nop
 8010044:	3708      	adds	r7, #8
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	20004bba 	.word	0x20004bba
 8010050:	2000bad0 	.word	0x2000bad0
 8010054:	2000bacc 	.word	0x2000bacc

08010058 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010058:	b590      	push	{r4, r7, lr}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d109      	bne.n	801007a <tcp_process_refused_data+0x22>
 8010066:	4b37      	ldr	r3, [pc, #220]	; (8010144 <tcp_process_refused_data+0xec>)
 8010068:	f240 6209 	movw	r2, #1545	; 0x609
 801006c:	4936      	ldr	r1, [pc, #216]	; (8010148 <tcp_process_refused_data+0xf0>)
 801006e:	4837      	ldr	r0, [pc, #220]	; (801014c <tcp_process_refused_data+0xf4>)
 8010070:	f00a f9a8 	bl	801a3c4 <iprintf>
 8010074:	f06f 030f 	mvn.w	r3, #15
 8010078:	e060      	b.n	801013c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801007e:	7b5b      	ldrb	r3, [r3, #13]
 8010080:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010086:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010094:	2b00      	cmp	r3, #0
 8010096:	d00b      	beq.n	80100b0 <tcp_process_refused_data+0x58>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6918      	ldr	r0, [r3, #16]
 80100a2:	2300      	movs	r3, #0
 80100a4:	68ba      	ldr	r2, [r7, #8]
 80100a6:	6879      	ldr	r1, [r7, #4]
 80100a8:	47a0      	blx	r4
 80100aa:	4603      	mov	r3, r0
 80100ac:	73fb      	strb	r3, [r7, #15]
 80100ae:	e007      	b.n	80100c0 <tcp_process_refused_data+0x68>
 80100b0:	2300      	movs	r3, #0
 80100b2:	68ba      	ldr	r2, [r7, #8]
 80100b4:	6879      	ldr	r1, [r7, #4]
 80100b6:	2000      	movs	r0, #0
 80100b8:	f000 f8a2 	bl	8010200 <tcp_recv_null>
 80100bc:	4603      	mov	r3, r0
 80100be:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80100c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d12a      	bne.n	801011e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80100c8:	7bbb      	ldrb	r3, [r7, #14]
 80100ca:	f003 0320 	and.w	r3, r3, #32
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d033      	beq.n	801013a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80100da:	d005      	beq.n	80100e8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100e0:	3301      	adds	r3, #1
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00b      	beq.n	801010a <tcp_process_refused_data+0xb2>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6918      	ldr	r0, [r3, #16]
 80100fc:	2300      	movs	r3, #0
 80100fe:	2200      	movs	r2, #0
 8010100:	6879      	ldr	r1, [r7, #4]
 8010102:	47a0      	blx	r4
 8010104:	4603      	mov	r3, r0
 8010106:	73fb      	strb	r3, [r7, #15]
 8010108:	e001      	b.n	801010e <tcp_process_refused_data+0xb6>
 801010a:	2300      	movs	r3, #0
 801010c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801010e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010112:	f113 0f0d 	cmn.w	r3, #13
 8010116:	d110      	bne.n	801013a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010118:	f06f 030c 	mvn.w	r3, #12
 801011c:	e00e      	b.n	801013c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801011e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010122:	f113 0f0d 	cmn.w	r3, #13
 8010126:	d102      	bne.n	801012e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010128:	f06f 030c 	mvn.w	r3, #12
 801012c:	e006      	b.n	801013c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	68ba      	ldr	r2, [r7, #8]
 8010132:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010134:	f06f 0304 	mvn.w	r3, #4
 8010138:	e000      	b.n	801013c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801013a:	2300      	movs	r3, #0
}
 801013c:	4618      	mov	r0, r3
 801013e:	3714      	adds	r7, #20
 8010140:	46bd      	mov	sp, r7
 8010142:	bd90      	pop	{r4, r7, pc}
 8010144:	0801ce94 	.word	0x0801ce94
 8010148:	0801d3a4 	.word	0x0801d3a4
 801014c:	0801ced8 	.word	0x0801ced8

08010150 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010158:	e007      	b.n	801016a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f000 f809 	bl	8010178 <tcp_seg_free>
    seg = next;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d1f4      	bne.n	801015a <tcp_segs_free+0xa>
  }
}
 8010170:	bf00      	nop
 8010172:	3710      	adds	r7, #16
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00c      	beq.n	80101a0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d004      	beq.n	8010198 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	685b      	ldr	r3, [r3, #4]
 8010192:	4618      	mov	r0, r3
 8010194:	f7fe fb50 	bl	800e838 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010198:	6879      	ldr	r1, [r7, #4]
 801019a:	2003      	movs	r0, #3
 801019c:	f7fd fc68 	bl	800da70 <memp_free>
  }
}
 80101a0:	bf00      	nop
 80101a2:	3708      	adds	r7, #8
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d106      	bne.n	80101c4 <tcp_seg_copy+0x1c>
 80101b6:	4b0f      	ldr	r3, [pc, #60]	; (80101f4 <tcp_seg_copy+0x4c>)
 80101b8:	f240 6282 	movw	r2, #1666	; 0x682
 80101bc:	490e      	ldr	r1, [pc, #56]	; (80101f8 <tcp_seg_copy+0x50>)
 80101be:	480f      	ldr	r0, [pc, #60]	; (80101fc <tcp_seg_copy+0x54>)
 80101c0:	f00a f900 	bl	801a3c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80101c4:	2003      	movs	r0, #3
 80101c6:	f7fd fc01 	bl	800d9cc <memp_malloc>
 80101ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d101      	bne.n	80101d6 <tcp_seg_copy+0x2e>
    return NULL;
 80101d2:	2300      	movs	r3, #0
 80101d4:	e00a      	b.n	80101ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80101d6:	2210      	movs	r2, #16
 80101d8:	6879      	ldr	r1, [r7, #4]
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f00a f8de 	bl	801a39c <memcpy>
  pbuf_ref(cseg->p);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7fe fbcd 	bl	800e984 <pbuf_ref>
  return cseg;
 80101ea:	68fb      	ldr	r3, [r7, #12]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	0801ce94 	.word	0x0801ce94
 80101f8:	0801d3e8 	.word	0x0801d3e8
 80101fc:	0801ced8 	.word	0x0801ced8

08010200 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
 801020c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d109      	bne.n	8010228 <tcp_recv_null+0x28>
 8010214:	4b12      	ldr	r3, [pc, #72]	; (8010260 <tcp_recv_null+0x60>)
 8010216:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801021a:	4912      	ldr	r1, [pc, #72]	; (8010264 <tcp_recv_null+0x64>)
 801021c:	4812      	ldr	r0, [pc, #72]	; (8010268 <tcp_recv_null+0x68>)
 801021e:	f00a f8d1 	bl	801a3c4 <iprintf>
 8010222:	f06f 030f 	mvn.w	r3, #15
 8010226:	e016      	b.n	8010256 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d009      	beq.n	8010242 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	891b      	ldrh	r3, [r3, #8]
 8010232:	4619      	mov	r1, r3
 8010234:	68b8      	ldr	r0, [r7, #8]
 8010236:	f7ff fad7 	bl	800f7e8 <tcp_recved>
    pbuf_free(p);
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7fe fafc 	bl	800e838 <pbuf_free>
 8010240:	e008      	b.n	8010254 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d104      	bne.n	8010254 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801024a:	68b8      	ldr	r0, [r7, #8]
 801024c:	f7fe ffa6 	bl	800f19c <tcp_close>
 8010250:	4603      	mov	r3, r0
 8010252:	e000      	b.n	8010256 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010254:	2300      	movs	r3, #0
}
 8010256:	4618      	mov	r0, r3
 8010258:	3710      	adds	r7, #16
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	0801ce94 	.word	0x0801ce94
 8010264:	0801d404 	.word	0x0801d404
 8010268:	0801ced8 	.word	0x0801ced8

0801026c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af00      	add	r7, sp, #0
 8010272:	4603      	mov	r3, r0
 8010274:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801027a:	2b00      	cmp	r3, #0
 801027c:	db01      	blt.n	8010282 <tcp_kill_prio+0x16>
 801027e:	79fb      	ldrb	r3, [r7, #7]
 8010280:	e000      	b.n	8010284 <tcp_kill_prio+0x18>
 8010282:	237f      	movs	r3, #127	; 0x7f
 8010284:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010286:	7afb      	ldrb	r3, [r7, #11]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d034      	beq.n	80102f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801028c:	7afb      	ldrb	r3, [r7, #11]
 801028e:	3b01      	subs	r3, #1
 8010290:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010292:	2300      	movs	r3, #0
 8010294:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010296:	2300      	movs	r3, #0
 8010298:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801029a:	4b19      	ldr	r3, [pc, #100]	; (8010300 <tcp_kill_prio+0x94>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	617b      	str	r3, [r7, #20]
 80102a0:	e01f      	b.n	80102e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	7d5b      	ldrb	r3, [r3, #21]
 80102a6:	7afa      	ldrb	r2, [r7, #11]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d80c      	bhi.n	80102c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80102b0:	7afa      	ldrb	r2, [r7, #11]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d112      	bne.n	80102dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80102b6:	4b13      	ldr	r3, [pc, #76]	; (8010304 <tcp_kill_prio+0x98>)
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	6a1b      	ldr	r3, [r3, #32]
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d80a      	bhi.n	80102dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80102c6:	4b0f      	ldr	r3, [pc, #60]	; (8010304 <tcp_kill_prio+0x98>)
 80102c8:	681a      	ldr	r2, [r3, #0]
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	6a1b      	ldr	r3, [r3, #32]
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	7d5b      	ldrb	r3, [r3, #21]
 80102da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	617b      	str	r3, [r7, #20]
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d1dc      	bne.n	80102a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d004      	beq.n	80102f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80102ee:	6938      	ldr	r0, [r7, #16]
 80102f0:	f7ff f898 	bl	800f424 <tcp_abort>
 80102f4:	e000      	b.n	80102f8 <tcp_kill_prio+0x8c>
    return;
 80102f6:	bf00      	nop
  }
}
 80102f8:	3718      	adds	r7, #24
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	2000bad0 	.word	0x2000bad0
 8010304:	2000bad4 	.word	0x2000bad4

08010308 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b086      	sub	sp, #24
 801030c:	af00      	add	r7, sp, #0
 801030e:	4603      	mov	r3, r0
 8010310:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010312:	79fb      	ldrb	r3, [r7, #7]
 8010314:	2b08      	cmp	r3, #8
 8010316:	d009      	beq.n	801032c <tcp_kill_state+0x24>
 8010318:	79fb      	ldrb	r3, [r7, #7]
 801031a:	2b09      	cmp	r3, #9
 801031c:	d006      	beq.n	801032c <tcp_kill_state+0x24>
 801031e:	4b1a      	ldr	r3, [pc, #104]	; (8010388 <tcp_kill_state+0x80>)
 8010320:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010324:	4919      	ldr	r1, [pc, #100]	; (801038c <tcp_kill_state+0x84>)
 8010326:	481a      	ldr	r0, [pc, #104]	; (8010390 <tcp_kill_state+0x88>)
 8010328:	f00a f84c 	bl	801a3c4 <iprintf>

  inactivity = 0;
 801032c:	2300      	movs	r3, #0
 801032e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010330:	2300      	movs	r3, #0
 8010332:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010334:	4b17      	ldr	r3, [pc, #92]	; (8010394 <tcp_kill_state+0x8c>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	617b      	str	r3, [r7, #20]
 801033a:	e017      	b.n	801036c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	7d1b      	ldrb	r3, [r3, #20]
 8010340:	79fa      	ldrb	r2, [r7, #7]
 8010342:	429a      	cmp	r2, r3
 8010344:	d10f      	bne.n	8010366 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010346:	4b14      	ldr	r3, [pc, #80]	; (8010398 <tcp_kill_state+0x90>)
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	6a1b      	ldr	r3, [r3, #32]
 801034e:	1ad3      	subs	r3, r2, r3
 8010350:	68fa      	ldr	r2, [r7, #12]
 8010352:	429a      	cmp	r2, r3
 8010354:	d807      	bhi.n	8010366 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010356:	4b10      	ldr	r3, [pc, #64]	; (8010398 <tcp_kill_state+0x90>)
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	6a1b      	ldr	r3, [r3, #32]
 801035e:	1ad3      	subs	r3, r2, r3
 8010360:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	617b      	str	r3, [r7, #20]
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d1e4      	bne.n	801033c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d003      	beq.n	8010380 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010378:	2100      	movs	r1, #0
 801037a:	6938      	ldr	r0, [r7, #16]
 801037c:	f7fe ff94 	bl	800f2a8 <tcp_abandon>
  }
}
 8010380:	bf00      	nop
 8010382:	3718      	adds	r7, #24
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	0801ce94 	.word	0x0801ce94
 801038c:	0801d420 	.word	0x0801d420
 8010390:	0801ced8 	.word	0x0801ced8
 8010394:	2000bad0 	.word	0x2000bad0
 8010398:	2000bad4 	.word	0x2000bad4

0801039c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80103a2:	2300      	movs	r3, #0
 80103a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80103a6:	2300      	movs	r3, #0
 80103a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103aa:	4b12      	ldr	r3, [pc, #72]	; (80103f4 <tcp_kill_timewait+0x58>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	60fb      	str	r3, [r7, #12]
 80103b0:	e012      	b.n	80103d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80103b2:	4b11      	ldr	r3, [pc, #68]	; (80103f8 <tcp_kill_timewait+0x5c>)
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	6a1b      	ldr	r3, [r3, #32]
 80103ba:	1ad3      	subs	r3, r2, r3
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d807      	bhi.n	80103d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80103c2:	4b0d      	ldr	r3, [pc, #52]	; (80103f8 <tcp_kill_timewait+0x5c>)
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	6a1b      	ldr	r3, [r3, #32]
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	68db      	ldr	r3, [r3, #12]
 80103d6:	60fb      	str	r3, [r7, #12]
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d1e9      	bne.n	80103b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80103e4:	68b8      	ldr	r0, [r7, #8]
 80103e6:	f7ff f81d 	bl	800f424 <tcp_abort>
  }
}
 80103ea:	bf00      	nop
 80103ec:	3710      	adds	r7, #16
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	2000bae0 	.word	0x2000bae0
 80103f8:	2000bad4 	.word	0x2000bad4

080103fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010402:	4b10      	ldr	r3, [pc, #64]	; (8010444 <tcp_handle_closepend+0x48>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010408:	e014      	b.n	8010434 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	8b5b      	ldrh	r3, [r3, #26]
 8010414:	f003 0308 	and.w	r3, r3, #8
 8010418:	2b00      	cmp	r3, #0
 801041a:	d009      	beq.n	8010430 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	8b5b      	ldrh	r3, [r3, #26]
 8010420:	f023 0308 	bic.w	r3, r3, #8
 8010424:	b29a      	uxth	r2, r3
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7fe fe50 	bl	800f0d0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1e7      	bne.n	801040a <tcp_handle_closepend+0xe>
  }
}
 801043a:	bf00      	nop
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
 8010442:	bf00      	nop
 8010444:	2000bad0 	.word	0x2000bad0

08010448 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	4603      	mov	r3, r0
 8010450:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010452:	2001      	movs	r0, #1
 8010454:	f7fd faba 	bl	800d9cc <memp_malloc>
 8010458:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d126      	bne.n	80104ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010460:	f7ff ffcc 	bl	80103fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010464:	f7ff ff9a 	bl	801039c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010468:	2001      	movs	r0, #1
 801046a:	f7fd faaf 	bl	800d9cc <memp_malloc>
 801046e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d11b      	bne.n	80104ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010476:	2009      	movs	r0, #9
 8010478:	f7ff ff46 	bl	8010308 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801047c:	2001      	movs	r0, #1
 801047e:	f7fd faa5 	bl	800d9cc <memp_malloc>
 8010482:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d111      	bne.n	80104ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801048a:	2008      	movs	r0, #8
 801048c:	f7ff ff3c 	bl	8010308 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010490:	2001      	movs	r0, #1
 8010492:	f7fd fa9b 	bl	800d9cc <memp_malloc>
 8010496:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d107      	bne.n	80104ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801049e:	79fb      	ldrb	r3, [r7, #7]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7ff fee3 	bl	801026c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104a6:	2001      	movs	r0, #1
 80104a8:	f7fd fa90 	bl	800d9cc <memp_malloc>
 80104ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d03f      	beq.n	8010534 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80104b4:	229c      	movs	r2, #156	; 0x9c
 80104b6:	2100      	movs	r1, #0
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f009 ff7a 	bl	801a3b2 <memset>
    pcb->prio = prio;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	79fa      	ldrb	r2, [r7, #7]
 80104c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80104ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80104d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	22ff      	movs	r2, #255	; 0xff
 80104e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80104ea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2206      	movs	r2, #6
 80104f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	2206      	movs	r2, #6
 80104f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010500:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2201      	movs	r2, #1
 8010506:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801050a:	4b0d      	ldr	r3, [pc, #52]	; (8010540 <tcp_alloc+0xf8>)
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010512:	4b0c      	ldr	r3, [pc, #48]	; (8010544 <tcp_alloc+0xfc>)
 8010514:	781a      	ldrb	r2, [r3, #0]
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010520:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	4a08      	ldr	r2, [pc, #32]	; (8010548 <tcp_alloc+0x100>)
 8010528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	4a07      	ldr	r2, [pc, #28]	; (801054c <tcp_alloc+0x104>)
 8010530:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010534:	68fb      	ldr	r3, [r7, #12]
}
 8010536:	4618      	mov	r0, r3
 8010538:	3710      	adds	r7, #16
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	2000bad4 	.word	0x2000bad4
 8010544:	20004bba 	.word	0x20004bba
 8010548:	08010201 	.word	0x08010201
 801054c:	006ddd00 	.word	0x006ddd00

08010550 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b084      	sub	sp, #16
 8010554:	af00      	add	r7, sp, #0
 8010556:	4603      	mov	r3, r0
 8010558:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801055a:	2040      	movs	r0, #64	; 0x40
 801055c:	f7ff ff74 	bl	8010448 <tcp_alloc>
 8010560:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010562:	68fb      	ldr	r3, [r7, #12]
}
 8010564:	4618      	mov	r0, r3
 8010566:	3710      	adds	r7, #16
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d002      	beq.n	8010582 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	683a      	ldr	r2, [r7, #0]
 8010580:	611a      	str	r2, [r3, #16]
  }
}
 8010582:	bf00      	nop
 8010584:	370c      	adds	r7, #12
 8010586:	46bd      	mov	sp, r7
 8010588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058c:	4770      	bx	lr
	...

08010590 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00e      	beq.n	80105be <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	7d1b      	ldrb	r3, [r3, #20]
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d106      	bne.n	80105b6 <tcp_recv+0x26>
 80105a8:	4b07      	ldr	r3, [pc, #28]	; (80105c8 <tcp_recv+0x38>)
 80105aa:	f240 72df 	movw	r2, #2015	; 0x7df
 80105ae:	4907      	ldr	r1, [pc, #28]	; (80105cc <tcp_recv+0x3c>)
 80105b0:	4807      	ldr	r0, [pc, #28]	; (80105d0 <tcp_recv+0x40>)
 80105b2:	f009 ff07 	bl	801a3c4 <iprintf>
    pcb->recv = recv;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80105be:	bf00      	nop
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	0801ce94 	.word	0x0801ce94
 80105cc:	0801d430 	.word	0x0801d430
 80105d0:	0801ced8 	.word	0x0801ced8

080105d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d00e      	beq.n	8010602 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	7d1b      	ldrb	r3, [r3, #20]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d106      	bne.n	80105fa <tcp_sent+0x26>
 80105ec:	4b07      	ldr	r3, [pc, #28]	; (801060c <tcp_sent+0x38>)
 80105ee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80105f2:	4907      	ldr	r1, [pc, #28]	; (8010610 <tcp_sent+0x3c>)
 80105f4:	4807      	ldr	r0, [pc, #28]	; (8010614 <tcp_sent+0x40>)
 80105f6:	f009 fee5 	bl	801a3c4 <iprintf>
    pcb->sent = sent;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	683a      	ldr	r2, [r7, #0]
 80105fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010602:	bf00      	nop
 8010604:	3708      	adds	r7, #8
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	0801ce94 	.word	0x0801ce94
 8010610:	0801d458 	.word	0x0801d458
 8010614:	0801ced8 	.word	0x0801ced8

08010618 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d00e      	beq.n	8010646 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	7d1b      	ldrb	r3, [r3, #20]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d106      	bne.n	801063e <tcp_err+0x26>
 8010630:	4b07      	ldr	r3, [pc, #28]	; (8010650 <tcp_err+0x38>)
 8010632:	f640 020d 	movw	r2, #2061	; 0x80d
 8010636:	4907      	ldr	r1, [pc, #28]	; (8010654 <tcp_err+0x3c>)
 8010638:	4807      	ldr	r0, [pc, #28]	; (8010658 <tcp_err+0x40>)
 801063a:	f009 fec3 	bl	801a3c4 <iprintf>
    pcb->errf = err;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	683a      	ldr	r2, [r7, #0]
 8010642:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010646:	bf00      	nop
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	0801ce94 	.word	0x0801ce94
 8010654:	0801d480 	.word	0x0801d480
 8010658:	0801ced8 	.word	0x0801ced8

0801065c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801065c:	b480      	push	{r7}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d008      	beq.n	801067e <tcp_accept+0x22>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	7d1b      	ldrb	r3, [r3, #20]
 8010670:	2b01      	cmp	r3, #1
 8010672:	d104      	bne.n	801067e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	619a      	str	r2, [r3, #24]
  }
}
 801067e:	bf00      	nop
 8010680:	3714      	adds	r7, #20
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr
	...

0801068c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	4613      	mov	r3, r2
 8010698:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d107      	bne.n	80106b0 <tcp_poll+0x24>
 80106a0:	4b0e      	ldr	r3, [pc, #56]	; (80106dc <tcp_poll+0x50>)
 80106a2:	f640 023d 	movw	r2, #2109	; 0x83d
 80106a6:	490e      	ldr	r1, [pc, #56]	; (80106e0 <tcp_poll+0x54>)
 80106a8:	480e      	ldr	r0, [pc, #56]	; (80106e4 <tcp_poll+0x58>)
 80106aa:	f009 fe8b 	bl	801a3c4 <iprintf>
 80106ae:	e011      	b.n	80106d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	7d1b      	ldrb	r3, [r3, #20]
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d106      	bne.n	80106c6 <tcp_poll+0x3a>
 80106b8:	4b08      	ldr	r3, [pc, #32]	; (80106dc <tcp_poll+0x50>)
 80106ba:	f640 023e 	movw	r2, #2110	; 0x83e
 80106be:	490a      	ldr	r1, [pc, #40]	; (80106e8 <tcp_poll+0x5c>)
 80106c0:	4808      	ldr	r0, [pc, #32]	; (80106e4 <tcp_poll+0x58>)
 80106c2:	f009 fe7f 	bl	801a3c4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	79fa      	ldrb	r2, [r7, #7]
 80106d2:	775a      	strb	r2, [r3, #29]
}
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	0801ce94 	.word	0x0801ce94
 80106e0:	0801d4a8 	.word	0x0801d4a8
 80106e4:	0801ced8 	.word	0x0801ced8
 80106e8:	0801d4c0 	.word	0x0801d4c0

080106ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d107      	bne.n	801070a <tcp_pcb_purge+0x1e>
 80106fa:	4b21      	ldr	r3, [pc, #132]	; (8010780 <tcp_pcb_purge+0x94>)
 80106fc:	f640 0251 	movw	r2, #2129	; 0x851
 8010700:	4920      	ldr	r1, [pc, #128]	; (8010784 <tcp_pcb_purge+0x98>)
 8010702:	4821      	ldr	r0, [pc, #132]	; (8010788 <tcp_pcb_purge+0x9c>)
 8010704:	f009 fe5e 	bl	801a3c4 <iprintf>
 8010708:	e037      	b.n	801077a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	7d1b      	ldrb	r3, [r3, #20]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d033      	beq.n	801077a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010716:	2b0a      	cmp	r3, #10
 8010718:	d02f      	beq.n	801077a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801071e:	2b01      	cmp	r3, #1
 8010720:	d02b      	beq.n	801077a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010726:	2b00      	cmp	r3, #0
 8010728:	d007      	beq.n	801073a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801072e:	4618      	mov	r0, r3
 8010730:	f7fe f882 	bl	800e838 <pbuf_free>
      pcb->refused_data = NULL;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801073e:	2b00      	cmp	r3, #0
 8010740:	d002      	beq.n	8010748 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 f986 	bl	8010a54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801074e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010754:	4618      	mov	r0, r3
 8010756:	f7ff fcfb 	bl	8010150 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801075e:	4618      	mov	r0, r3
 8010760:	f7ff fcf6 	bl	8010150 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	66da      	str	r2, [r3, #108]	; 0x6c
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801077a:	3708      	adds	r7, #8
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}
 8010780:	0801ce94 	.word	0x0801ce94
 8010784:	0801d4e0 	.word	0x0801d4e0
 8010788:	0801ced8 	.word	0x0801ced8

0801078c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d106      	bne.n	80107aa <tcp_pcb_remove+0x1e>
 801079c:	4b3e      	ldr	r3, [pc, #248]	; (8010898 <tcp_pcb_remove+0x10c>)
 801079e:	f640 0283 	movw	r2, #2179	; 0x883
 80107a2:	493e      	ldr	r1, [pc, #248]	; (801089c <tcp_pcb_remove+0x110>)
 80107a4:	483e      	ldr	r0, [pc, #248]	; (80108a0 <tcp_pcb_remove+0x114>)
 80107a6:	f009 fe0d 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d106      	bne.n	80107be <tcp_pcb_remove+0x32>
 80107b0:	4b39      	ldr	r3, [pc, #228]	; (8010898 <tcp_pcb_remove+0x10c>)
 80107b2:	f640 0284 	movw	r2, #2180	; 0x884
 80107b6:	493b      	ldr	r1, [pc, #236]	; (80108a4 <tcp_pcb_remove+0x118>)
 80107b8:	4839      	ldr	r0, [pc, #228]	; (80108a0 <tcp_pcb_remove+0x114>)
 80107ba:	f009 fe03 	bl	801a3c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	683a      	ldr	r2, [r7, #0]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d105      	bne.n	80107d4 <tcp_pcb_remove+0x48>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	68da      	ldr	r2, [r3, #12]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	601a      	str	r2, [r3, #0]
 80107d2:	e013      	b.n	80107fc <tcp_pcb_remove+0x70>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	60fb      	str	r3, [r7, #12]
 80107da:	e00c      	b.n	80107f6 <tcp_pcb_remove+0x6a>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	683a      	ldr	r2, [r7, #0]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d104      	bne.n	80107f0 <tcp_pcb_remove+0x64>
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	68da      	ldr	r2, [r3, #12]
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	60da      	str	r2, [r3, #12]
 80107ee:	e005      	b.n	80107fc <tcp_pcb_remove+0x70>
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	60fb      	str	r3, [r7, #12]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d1ef      	bne.n	80107dc <tcp_pcb_remove+0x50>
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	2200      	movs	r2, #0
 8010800:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010802:	6838      	ldr	r0, [r7, #0]
 8010804:	f7ff ff72 	bl	80106ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	7d1b      	ldrb	r3, [r3, #20]
 801080c:	2b0a      	cmp	r3, #10
 801080e:	d013      	beq.n	8010838 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010814:	2b01      	cmp	r3, #1
 8010816:	d00f      	beq.n	8010838 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	8b5b      	ldrh	r3, [r3, #26]
 801081c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010820:	2b00      	cmp	r3, #0
 8010822:	d009      	beq.n	8010838 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	8b5b      	ldrh	r3, [r3, #26]
 8010828:	f043 0302 	orr.w	r3, r3, #2
 801082c:	b29a      	uxth	r2, r3
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010832:	6838      	ldr	r0, [r7, #0]
 8010834:	f003 fbc2 	bl	8013fbc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	7d1b      	ldrb	r3, [r3, #20]
 801083c:	2b01      	cmp	r3, #1
 801083e:	d020      	beq.n	8010882 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010844:	2b00      	cmp	r3, #0
 8010846:	d006      	beq.n	8010856 <tcp_pcb_remove+0xca>
 8010848:	4b13      	ldr	r3, [pc, #76]	; (8010898 <tcp_pcb_remove+0x10c>)
 801084a:	f640 0293 	movw	r2, #2195	; 0x893
 801084e:	4916      	ldr	r1, [pc, #88]	; (80108a8 <tcp_pcb_remove+0x11c>)
 8010850:	4813      	ldr	r0, [pc, #76]	; (80108a0 <tcp_pcb_remove+0x114>)
 8010852:	f009 fdb7 	bl	801a3c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801085a:	2b00      	cmp	r3, #0
 801085c:	d006      	beq.n	801086c <tcp_pcb_remove+0xe0>
 801085e:	4b0e      	ldr	r3, [pc, #56]	; (8010898 <tcp_pcb_remove+0x10c>)
 8010860:	f640 0294 	movw	r2, #2196	; 0x894
 8010864:	4911      	ldr	r1, [pc, #68]	; (80108ac <tcp_pcb_remove+0x120>)
 8010866:	480e      	ldr	r0, [pc, #56]	; (80108a0 <tcp_pcb_remove+0x114>)
 8010868:	f009 fdac 	bl	801a3c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010870:	2b00      	cmp	r3, #0
 8010872:	d006      	beq.n	8010882 <tcp_pcb_remove+0xf6>
 8010874:	4b08      	ldr	r3, [pc, #32]	; (8010898 <tcp_pcb_remove+0x10c>)
 8010876:	f640 0296 	movw	r2, #2198	; 0x896
 801087a:	490d      	ldr	r1, [pc, #52]	; (80108b0 <tcp_pcb_remove+0x124>)
 801087c:	4808      	ldr	r0, [pc, #32]	; (80108a0 <tcp_pcb_remove+0x114>)
 801087e:	f009 fda1 	bl	801a3c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	2200      	movs	r2, #0
 8010886:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	2200      	movs	r2, #0
 801088c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801088e:	bf00      	nop
 8010890:	3710      	adds	r7, #16
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	0801ce94 	.word	0x0801ce94
 801089c:	0801d4fc 	.word	0x0801d4fc
 80108a0:	0801ced8 	.word	0x0801ced8
 80108a4:	0801d518 	.word	0x0801d518
 80108a8:	0801d538 	.word	0x0801d538
 80108ac:	0801d550 	.word	0x0801d550
 80108b0:	0801d56c 	.word	0x0801d56c

080108b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d106      	bne.n	80108d0 <tcp_next_iss+0x1c>
 80108c2:	4b0a      	ldr	r3, [pc, #40]	; (80108ec <tcp_next_iss+0x38>)
 80108c4:	f640 02af 	movw	r2, #2223	; 0x8af
 80108c8:	4909      	ldr	r1, [pc, #36]	; (80108f0 <tcp_next_iss+0x3c>)
 80108ca:	480a      	ldr	r0, [pc, #40]	; (80108f4 <tcp_next_iss+0x40>)
 80108cc:	f009 fd7a 	bl	801a3c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80108d0:	4b09      	ldr	r3, [pc, #36]	; (80108f8 <tcp_next_iss+0x44>)
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	4b09      	ldr	r3, [pc, #36]	; (80108fc <tcp_next_iss+0x48>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4413      	add	r3, r2
 80108da:	4a07      	ldr	r2, [pc, #28]	; (80108f8 <tcp_next_iss+0x44>)
 80108dc:	6013      	str	r3, [r2, #0]
  return iss;
 80108de:	4b06      	ldr	r3, [pc, #24]	; (80108f8 <tcp_next_iss+0x44>)
 80108e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
 80108ea:	bf00      	nop
 80108ec:	0801ce94 	.word	0x0801ce94
 80108f0:	0801d584 	.word	0x0801d584
 80108f4:	0801ced8 	.word	0x0801ced8
 80108f8:	20000018 	.word	0x20000018
 80108fc:	2000bad4 	.word	0x2000bad4

08010900 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b086      	sub	sp, #24
 8010904:	af00      	add	r7, sp, #0
 8010906:	4603      	mov	r3, r0
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	607a      	str	r2, [r7, #4]
 801090c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d106      	bne.n	8010922 <tcp_eff_send_mss_netif+0x22>
 8010914:	4b14      	ldr	r3, [pc, #80]	; (8010968 <tcp_eff_send_mss_netif+0x68>)
 8010916:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801091a:	4914      	ldr	r1, [pc, #80]	; (801096c <tcp_eff_send_mss_netif+0x6c>)
 801091c:	4814      	ldr	r0, [pc, #80]	; (8010970 <tcp_eff_send_mss_netif+0x70>)
 801091e:	f009 fd51 	bl	801a3c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d101      	bne.n	801092c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010928:	89fb      	ldrh	r3, [r7, #14]
 801092a:	e019      	b.n	8010960 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010930:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010932:	8afb      	ldrh	r3, [r7, #22]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d012      	beq.n	801095e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010938:	2328      	movs	r3, #40	; 0x28
 801093a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801093c:	8afa      	ldrh	r2, [r7, #22]
 801093e:	8abb      	ldrh	r3, [r7, #20]
 8010940:	429a      	cmp	r2, r3
 8010942:	d904      	bls.n	801094e <tcp_eff_send_mss_netif+0x4e>
 8010944:	8afa      	ldrh	r2, [r7, #22]
 8010946:	8abb      	ldrh	r3, [r7, #20]
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	b29b      	uxth	r3, r3
 801094c:	e000      	b.n	8010950 <tcp_eff_send_mss_netif+0x50>
 801094e:	2300      	movs	r3, #0
 8010950:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010952:	8a7a      	ldrh	r2, [r7, #18]
 8010954:	89fb      	ldrh	r3, [r7, #14]
 8010956:	4293      	cmp	r3, r2
 8010958:	bf28      	it	cs
 801095a:	4613      	movcs	r3, r2
 801095c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801095e:	89fb      	ldrh	r3, [r7, #14]
}
 8010960:	4618      	mov	r0, r3
 8010962:	3718      	adds	r7, #24
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	0801ce94 	.word	0x0801ce94
 801096c:	0801d5a0 	.word	0x0801d5a0
 8010970:	0801ced8 	.word	0x0801ced8

08010974 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d119      	bne.n	80109bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010988:	4b10      	ldr	r3, [pc, #64]	; (80109cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801098a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801098e:	4910      	ldr	r1, [pc, #64]	; (80109d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010990:	4810      	ldr	r0, [pc, #64]	; (80109d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010992:	f009 fd17 	bl	801a3c4 <iprintf>

  while (pcb != NULL) {
 8010996:	e011      	b.n	80109bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d108      	bne.n	80109b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80109aa:	68f8      	ldr	r0, [r7, #12]
 80109ac:	f7fe fd3a 	bl	800f424 <tcp_abort>
      pcb = next;
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	60fb      	str	r3, [r7, #12]
 80109b4:	e002      	b.n	80109bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d1ea      	bne.n	8010998 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80109c2:	bf00      	nop
 80109c4:	3710      	adds	r7, #16
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	0801ce94 	.word	0x0801ce94
 80109d0:	0801d5c8 	.word	0x0801d5c8
 80109d4:	0801ced8 	.word	0x0801ced8

080109d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b084      	sub	sp, #16
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d02a      	beq.n	8010a3e <tcp_netif_ip_addr_changed+0x66>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d026      	beq.n	8010a3e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80109f0:	4b15      	ldr	r3, [pc, #84]	; (8010a48 <tcp_netif_ip_addr_changed+0x70>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4619      	mov	r1, r3
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f7ff ffbc 	bl	8010974 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80109fc:	4b13      	ldr	r3, [pc, #76]	; (8010a4c <tcp_netif_ip_addr_changed+0x74>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4619      	mov	r1, r3
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f7ff ffb6 	bl	8010974 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d017      	beq.n	8010a3e <tcp_netif_ip_addr_changed+0x66>
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d013      	beq.n	8010a3e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a16:	4b0e      	ldr	r3, [pc, #56]	; (8010a50 <tcp_netif_ip_addr_changed+0x78>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	60fb      	str	r3, [r7, #12]
 8010a1c:	e00c      	b.n	8010a38 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d103      	bne.n	8010a32 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	60fb      	str	r3, [r7, #12]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d1ef      	bne.n	8010a1e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010a3e:	bf00      	nop
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	2000bad0 	.word	0x2000bad0
 8010a4c:	2000badc 	.word	0x2000badc
 8010a50:	2000bad8 	.word	0x2000bad8

08010a54 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d007      	beq.n	8010a74 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7ff fb71 	bl	8010150 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2200      	movs	r2, #0
 8010a72:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010a74:	bf00      	nop
 8010a76:	3708      	adds	r7, #8
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010a7c:	b590      	push	{r4, r7, lr}
 8010a7e:	b08d      	sub	sp, #52	; 0x34
 8010a80:	af04      	add	r7, sp, #16
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d105      	bne.n	8010a98 <tcp_input+0x1c>
 8010a8c:	4b9b      	ldr	r3, [pc, #620]	; (8010cfc <tcp_input+0x280>)
 8010a8e:	2283      	movs	r2, #131	; 0x83
 8010a90:	499b      	ldr	r1, [pc, #620]	; (8010d00 <tcp_input+0x284>)
 8010a92:	489c      	ldr	r0, [pc, #624]	; (8010d04 <tcp_input+0x288>)
 8010a94:	f009 fc96 	bl	801a3c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	4a9a      	ldr	r2, [pc, #616]	; (8010d08 <tcp_input+0x28c>)
 8010a9e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	895b      	ldrh	r3, [r3, #10]
 8010aa4:	2b13      	cmp	r3, #19
 8010aa6:	f240 83c4 	bls.w	8011232 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010aaa:	4b98      	ldr	r3, [pc, #608]	; (8010d0c <tcp_input+0x290>)
 8010aac:	695a      	ldr	r2, [r3, #20]
 8010aae:	4b97      	ldr	r3, [pc, #604]	; (8010d0c <tcp_input+0x290>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	4610      	mov	r0, r2
 8010ab6:	f008 fb23 	bl	8019100 <ip4_addr_isbroadcast_u32>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	f040 83ba 	bne.w	8011236 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010ac2:	4b92      	ldr	r3, [pc, #584]	; (8010d0c <tcp_input+0x290>)
 8010ac4:	695b      	ldr	r3, [r3, #20]
 8010ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010aca:	2be0      	cmp	r3, #224	; 0xe0
 8010acc:	f000 83b3 	beq.w	8011236 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010ad0:	4b8d      	ldr	r3, [pc, #564]	; (8010d08 <tcp_input+0x28c>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	899b      	ldrh	r3, [r3, #12]
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fc fac1 	bl	800d060 <lwip_htons>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	0b1b      	lsrs	r3, r3, #12
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	009b      	lsls	r3, r3, #2
 8010ae8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010aea:	7cbb      	ldrb	r3, [r7, #18]
 8010aec:	2b13      	cmp	r3, #19
 8010aee:	f240 83a2 	bls.w	8011236 <tcp_input+0x7ba>
 8010af2:	7cbb      	ldrb	r3, [r7, #18]
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	891b      	ldrh	r3, [r3, #8]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	f200 839b 	bhi.w	8011236 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010b00:	7cbb      	ldrb	r3, [r7, #18]
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	3b14      	subs	r3, #20
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	4b81      	ldr	r3, [pc, #516]	; (8010d10 <tcp_input+0x294>)
 8010b0a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010b0c:	4b81      	ldr	r3, [pc, #516]	; (8010d14 <tcp_input+0x298>)
 8010b0e:	2200      	movs	r2, #0
 8010b10:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	895a      	ldrh	r2, [r3, #10]
 8010b16:	7cbb      	ldrb	r3, [r7, #18]
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d309      	bcc.n	8010b32 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010b1e:	4b7c      	ldr	r3, [pc, #496]	; (8010d10 <tcp_input+0x294>)
 8010b20:	881a      	ldrh	r2, [r3, #0]
 8010b22:	4b7d      	ldr	r3, [pc, #500]	; (8010d18 <tcp_input+0x29c>)
 8010b24:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010b26:	7cbb      	ldrb	r3, [r7, #18]
 8010b28:	4619      	mov	r1, r3
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f7fd fdfe 	bl	800e72c <pbuf_remove_header>
 8010b30:	e04e      	b.n	8010bd0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d105      	bne.n	8010b46 <tcp_input+0xca>
 8010b3a:	4b70      	ldr	r3, [pc, #448]	; (8010cfc <tcp_input+0x280>)
 8010b3c:	22c2      	movs	r2, #194	; 0xc2
 8010b3e:	4977      	ldr	r1, [pc, #476]	; (8010d1c <tcp_input+0x2a0>)
 8010b40:	4870      	ldr	r0, [pc, #448]	; (8010d04 <tcp_input+0x288>)
 8010b42:	f009 fc3f 	bl	801a3c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010b46:	2114      	movs	r1, #20
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7fd fdef 	bl	800e72c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	895a      	ldrh	r2, [r3, #10]
 8010b52:	4b71      	ldr	r3, [pc, #452]	; (8010d18 <tcp_input+0x29c>)
 8010b54:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010b56:	4b6e      	ldr	r3, [pc, #440]	; (8010d10 <tcp_input+0x294>)
 8010b58:	881a      	ldrh	r2, [r3, #0]
 8010b5a:	4b6f      	ldr	r3, [pc, #444]	; (8010d18 <tcp_input+0x29c>)
 8010b5c:	881b      	ldrh	r3, [r3, #0]
 8010b5e:	1ad3      	subs	r3, r2, r3
 8010b60:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010b62:	4b6d      	ldr	r3, [pc, #436]	; (8010d18 <tcp_input+0x29c>)
 8010b64:	881b      	ldrh	r3, [r3, #0]
 8010b66:	4619      	mov	r1, r3
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7fd fddf 	bl	800e72c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	895b      	ldrh	r3, [r3, #10]
 8010b74:	8a3a      	ldrh	r2, [r7, #16]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	f200 835f 	bhi.w	801123a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	4a64      	ldr	r2, [pc, #400]	; (8010d14 <tcp_input+0x298>)
 8010b84:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	8a3a      	ldrh	r2, [r7, #16]
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fd fdcc 	bl	800e72c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	891a      	ldrh	r2, [r3, #8]
 8010b98:	8a3b      	ldrh	r3, [r7, #16]
 8010b9a:	1ad3      	subs	r3, r2, r3
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	895b      	ldrh	r3, [r3, #10]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d005      	beq.n	8010bb6 <tcp_input+0x13a>
 8010baa:	4b54      	ldr	r3, [pc, #336]	; (8010cfc <tcp_input+0x280>)
 8010bac:	22df      	movs	r2, #223	; 0xdf
 8010bae:	495c      	ldr	r1, [pc, #368]	; (8010d20 <tcp_input+0x2a4>)
 8010bb0:	4854      	ldr	r0, [pc, #336]	; (8010d04 <tcp_input+0x288>)
 8010bb2:	f009 fc07 	bl	801a3c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	891a      	ldrh	r2, [r3, #8]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	891b      	ldrh	r3, [r3, #8]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d005      	beq.n	8010bd0 <tcp_input+0x154>
 8010bc4:	4b4d      	ldr	r3, [pc, #308]	; (8010cfc <tcp_input+0x280>)
 8010bc6:	22e0      	movs	r2, #224	; 0xe0
 8010bc8:	4956      	ldr	r1, [pc, #344]	; (8010d24 <tcp_input+0x2a8>)
 8010bca:	484e      	ldr	r0, [pc, #312]	; (8010d04 <tcp_input+0x288>)
 8010bcc:	f009 fbfa 	bl	801a3c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010bd0:	4b4d      	ldr	r3, [pc, #308]	; (8010d08 <tcp_input+0x28c>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	881b      	ldrh	r3, [r3, #0]
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	4b4b      	ldr	r3, [pc, #300]	; (8010d08 <tcp_input+0x28c>)
 8010bda:	681c      	ldr	r4, [r3, #0]
 8010bdc:	4610      	mov	r0, r2
 8010bde:	f7fc fa3f 	bl	800d060 <lwip_htons>
 8010be2:	4603      	mov	r3, r0
 8010be4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010be6:	4b48      	ldr	r3, [pc, #288]	; (8010d08 <tcp_input+0x28c>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	885b      	ldrh	r3, [r3, #2]
 8010bec:	b29a      	uxth	r2, r3
 8010bee:	4b46      	ldr	r3, [pc, #280]	; (8010d08 <tcp_input+0x28c>)
 8010bf0:	681c      	ldr	r4, [r3, #0]
 8010bf2:	4610      	mov	r0, r2
 8010bf4:	f7fc fa34 	bl	800d060 <lwip_htons>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010bfc:	4b42      	ldr	r3, [pc, #264]	; (8010d08 <tcp_input+0x28c>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	685a      	ldr	r2, [r3, #4]
 8010c02:	4b41      	ldr	r3, [pc, #260]	; (8010d08 <tcp_input+0x28c>)
 8010c04:	681c      	ldr	r4, [r3, #0]
 8010c06:	4610      	mov	r0, r2
 8010c08:	f7fc fa3f 	bl	800d08a <lwip_htonl>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	6063      	str	r3, [r4, #4]
 8010c10:	6863      	ldr	r3, [r4, #4]
 8010c12:	4a45      	ldr	r2, [pc, #276]	; (8010d28 <tcp_input+0x2ac>)
 8010c14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010c16:	4b3c      	ldr	r3, [pc, #240]	; (8010d08 <tcp_input+0x28c>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	689a      	ldr	r2, [r3, #8]
 8010c1c:	4b3a      	ldr	r3, [pc, #232]	; (8010d08 <tcp_input+0x28c>)
 8010c1e:	681c      	ldr	r4, [r3, #0]
 8010c20:	4610      	mov	r0, r2
 8010c22:	f7fc fa32 	bl	800d08a <lwip_htonl>
 8010c26:	4603      	mov	r3, r0
 8010c28:	60a3      	str	r3, [r4, #8]
 8010c2a:	68a3      	ldr	r3, [r4, #8]
 8010c2c:	4a3f      	ldr	r2, [pc, #252]	; (8010d2c <tcp_input+0x2b0>)
 8010c2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010c30:	4b35      	ldr	r3, [pc, #212]	; (8010d08 <tcp_input+0x28c>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	89db      	ldrh	r3, [r3, #14]
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	4b33      	ldr	r3, [pc, #204]	; (8010d08 <tcp_input+0x28c>)
 8010c3a:	681c      	ldr	r4, [r3, #0]
 8010c3c:	4610      	mov	r0, r2
 8010c3e:	f7fc fa0f 	bl	800d060 <lwip_htons>
 8010c42:	4603      	mov	r3, r0
 8010c44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010c46:	4b30      	ldr	r3, [pc, #192]	; (8010d08 <tcp_input+0x28c>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	899b      	ldrh	r3, [r3, #12]
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fc fa06 	bl	800d060 <lwip_htons>
 8010c54:	4603      	mov	r3, r0
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c5c:	b2da      	uxtb	r2, r3
 8010c5e:	4b34      	ldr	r3, [pc, #208]	; (8010d30 <tcp_input+0x2b4>)
 8010c60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	891a      	ldrh	r2, [r3, #8]
 8010c66:	4b33      	ldr	r3, [pc, #204]	; (8010d34 <tcp_input+0x2b8>)
 8010c68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010c6a:	4b31      	ldr	r3, [pc, #196]	; (8010d30 <tcp_input+0x2b4>)
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	f003 0303 	and.w	r3, r3, #3
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00c      	beq.n	8010c90 <tcp_input+0x214>
    tcplen++;
 8010c76:	4b2f      	ldr	r3, [pc, #188]	; (8010d34 <tcp_input+0x2b8>)
 8010c78:	881b      	ldrh	r3, [r3, #0]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	4b2d      	ldr	r3, [pc, #180]	; (8010d34 <tcp_input+0x2b8>)
 8010c80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	891a      	ldrh	r2, [r3, #8]
 8010c86:	4b2b      	ldr	r3, [pc, #172]	; (8010d34 <tcp_input+0x2b8>)
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	f200 82d7 	bhi.w	801123e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010c90:	2300      	movs	r3, #0
 8010c92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c94:	4b28      	ldr	r3, [pc, #160]	; (8010d38 <tcp_input+0x2bc>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	61fb      	str	r3, [r7, #28]
 8010c9a:	e09d      	b.n	8010dd8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010c9c:	69fb      	ldr	r3, [r7, #28]
 8010c9e:	7d1b      	ldrb	r3, [r3, #20]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d105      	bne.n	8010cb0 <tcp_input+0x234>
 8010ca4:	4b15      	ldr	r3, [pc, #84]	; (8010cfc <tcp_input+0x280>)
 8010ca6:	22fb      	movs	r2, #251	; 0xfb
 8010ca8:	4924      	ldr	r1, [pc, #144]	; (8010d3c <tcp_input+0x2c0>)
 8010caa:	4816      	ldr	r0, [pc, #88]	; (8010d04 <tcp_input+0x288>)
 8010cac:	f009 fb8a 	bl	801a3c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	7d1b      	ldrb	r3, [r3, #20]
 8010cb4:	2b0a      	cmp	r3, #10
 8010cb6:	d105      	bne.n	8010cc4 <tcp_input+0x248>
 8010cb8:	4b10      	ldr	r3, [pc, #64]	; (8010cfc <tcp_input+0x280>)
 8010cba:	22fc      	movs	r2, #252	; 0xfc
 8010cbc:	4920      	ldr	r1, [pc, #128]	; (8010d40 <tcp_input+0x2c4>)
 8010cbe:	4811      	ldr	r0, [pc, #68]	; (8010d04 <tcp_input+0x288>)
 8010cc0:	f009 fb80 	bl	801a3c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	7d1b      	ldrb	r3, [r3, #20]
 8010cc8:	2b01      	cmp	r3, #1
 8010cca:	d105      	bne.n	8010cd8 <tcp_input+0x25c>
 8010ccc:	4b0b      	ldr	r3, [pc, #44]	; (8010cfc <tcp_input+0x280>)
 8010cce:	22fd      	movs	r2, #253	; 0xfd
 8010cd0:	491c      	ldr	r1, [pc, #112]	; (8010d44 <tcp_input+0x2c8>)
 8010cd2:	480c      	ldr	r0, [pc, #48]	; (8010d04 <tcp_input+0x288>)
 8010cd4:	f009 fb76 	bl	801a3c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	7a1b      	ldrb	r3, [r3, #8]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d033      	beq.n	8010d48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010ce0:	69fb      	ldr	r3, [r7, #28]
 8010ce2:	7a1a      	ldrb	r2, [r3, #8]
 8010ce4:	4b09      	ldr	r3, [pc, #36]	; (8010d0c <tcp_input+0x290>)
 8010ce6:	685b      	ldr	r3, [r3, #4]
 8010ce8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010cec:	3301      	adds	r3, #1
 8010cee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d029      	beq.n	8010d48 <tcp_input+0x2cc>
      prev = pcb;
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	61bb      	str	r3, [r7, #24]
      continue;
 8010cf8:	e06b      	b.n	8010dd2 <tcp_input+0x356>
 8010cfa:	bf00      	nop
 8010cfc:	0801d5fc 	.word	0x0801d5fc
 8010d00:	0801d630 	.word	0x0801d630
 8010d04:	0801d648 	.word	0x0801d648
 8010d08:	20004bcc 	.word	0x20004bcc
 8010d0c:	2000839c 	.word	0x2000839c
 8010d10:	20004bd0 	.word	0x20004bd0
 8010d14:	20004bd4 	.word	0x20004bd4
 8010d18:	20004bd2 	.word	0x20004bd2
 8010d1c:	0801d670 	.word	0x0801d670
 8010d20:	0801d680 	.word	0x0801d680
 8010d24:	0801d68c 	.word	0x0801d68c
 8010d28:	20004bdc 	.word	0x20004bdc
 8010d2c:	20004be0 	.word	0x20004be0
 8010d30:	20004be8 	.word	0x20004be8
 8010d34:	20004be6 	.word	0x20004be6
 8010d38:	2000bad0 	.word	0x2000bad0
 8010d3c:	0801d6ac 	.word	0x0801d6ac
 8010d40:	0801d6d4 	.word	0x0801d6d4
 8010d44:	0801d700 	.word	0x0801d700
    }

    if (pcb->remote_port == tcphdr->src &&
 8010d48:	69fb      	ldr	r3, [r7, #28]
 8010d4a:	8b1a      	ldrh	r2, [r3, #24]
 8010d4c:	4b94      	ldr	r3, [pc, #592]	; (8010fa0 <tcp_input+0x524>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d13a      	bne.n	8010dce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	8ada      	ldrh	r2, [r3, #22]
 8010d5c:	4b90      	ldr	r3, [pc, #576]	; (8010fa0 <tcp_input+0x524>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	885b      	ldrh	r3, [r3, #2]
 8010d62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d132      	bne.n	8010dce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010d68:	69fb      	ldr	r3, [r7, #28]
 8010d6a:	685a      	ldr	r2, [r3, #4]
 8010d6c:	4b8d      	ldr	r3, [pc, #564]	; (8010fa4 <tcp_input+0x528>)
 8010d6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d12c      	bne.n	8010dce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	4b8a      	ldr	r3, [pc, #552]	; (8010fa4 <tcp_input+0x528>)
 8010d7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d126      	bne.n	8010dce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	69fa      	ldr	r2, [r7, #28]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d106      	bne.n	8010d98 <tcp_input+0x31c>
 8010d8a:	4b87      	ldr	r3, [pc, #540]	; (8010fa8 <tcp_input+0x52c>)
 8010d8c:	f240 120d 	movw	r2, #269	; 0x10d
 8010d90:	4986      	ldr	r1, [pc, #536]	; (8010fac <tcp_input+0x530>)
 8010d92:	4887      	ldr	r0, [pc, #540]	; (8010fb0 <tcp_input+0x534>)
 8010d94:	f009 fb16 	bl	801a3c4 <iprintf>
      if (prev != NULL) {
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00a      	beq.n	8010db4 <tcp_input+0x338>
        prev->next = pcb->next;
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	68da      	ldr	r2, [r3, #12]
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010da6:	4b83      	ldr	r3, [pc, #524]	; (8010fb4 <tcp_input+0x538>)
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	69fb      	ldr	r3, [r7, #28]
 8010dac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010dae:	4a81      	ldr	r2, [pc, #516]	; (8010fb4 <tcp_input+0x538>)
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	69fa      	ldr	r2, [r7, #28]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d111      	bne.n	8010de2 <tcp_input+0x366>
 8010dbe:	4b7a      	ldr	r3, [pc, #488]	; (8010fa8 <tcp_input+0x52c>)
 8010dc0:	f240 1215 	movw	r2, #277	; 0x115
 8010dc4:	497c      	ldr	r1, [pc, #496]	; (8010fb8 <tcp_input+0x53c>)
 8010dc6:	487a      	ldr	r0, [pc, #488]	; (8010fb0 <tcp_input+0x534>)
 8010dc8:	f009 fafc 	bl	801a3c4 <iprintf>
      break;
 8010dcc:	e009      	b.n	8010de2 <tcp_input+0x366>
    }
    prev = pcb;
 8010dce:	69fb      	ldr	r3, [r7, #28]
 8010dd0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	61fb      	str	r3, [r7, #28]
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	f47f af5e 	bne.w	8010c9c <tcp_input+0x220>
 8010de0:	e000      	b.n	8010de4 <tcp_input+0x368>
      break;
 8010de2:	bf00      	nop
  }

  if (pcb == NULL) {
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	f040 8095 	bne.w	8010f16 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dec:	4b73      	ldr	r3, [pc, #460]	; (8010fbc <tcp_input+0x540>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	61fb      	str	r3, [r7, #28]
 8010df2:	e03f      	b.n	8010e74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010df4:	69fb      	ldr	r3, [r7, #28]
 8010df6:	7d1b      	ldrb	r3, [r3, #20]
 8010df8:	2b0a      	cmp	r3, #10
 8010dfa:	d006      	beq.n	8010e0a <tcp_input+0x38e>
 8010dfc:	4b6a      	ldr	r3, [pc, #424]	; (8010fa8 <tcp_input+0x52c>)
 8010dfe:	f240 121f 	movw	r2, #287	; 0x11f
 8010e02:	496f      	ldr	r1, [pc, #444]	; (8010fc0 <tcp_input+0x544>)
 8010e04:	486a      	ldr	r0, [pc, #424]	; (8010fb0 <tcp_input+0x534>)
 8010e06:	f009 fadd 	bl	801a3c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	7a1b      	ldrb	r3, [r3, #8]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d009      	beq.n	8010e26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	7a1a      	ldrb	r2, [r3, #8]
 8010e16:	4b63      	ldr	r3, [pc, #396]	; (8010fa4 <tcp_input+0x528>)
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010e1e:	3301      	adds	r3, #1
 8010e20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d122      	bne.n	8010e6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	8b1a      	ldrh	r2, [r3, #24]
 8010e2a:	4b5d      	ldr	r3, [pc, #372]	; (8010fa0 <tcp_input+0x524>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	881b      	ldrh	r3, [r3, #0]
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d11b      	bne.n	8010e6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	8ada      	ldrh	r2, [r3, #22]
 8010e3a:	4b59      	ldr	r3, [pc, #356]	; (8010fa0 <tcp_input+0x524>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	885b      	ldrh	r3, [r3, #2]
 8010e40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d113      	bne.n	8010e6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	685a      	ldr	r2, [r3, #4]
 8010e4a:	4b56      	ldr	r3, [pc, #344]	; (8010fa4 <tcp_input+0x528>)
 8010e4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d10d      	bne.n	8010e6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	4b53      	ldr	r3, [pc, #332]	; (8010fa4 <tcp_input+0x528>)
 8010e58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d107      	bne.n	8010e6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010e5e:	69f8      	ldr	r0, [r7, #28]
 8010e60:	f000 fb52 	bl	8011508 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7fd fce7 	bl	800e838 <pbuf_free>
        return;
 8010e6a:	e1ee      	b.n	801124a <tcp_input+0x7ce>
        continue;
 8010e6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e6e:	69fb      	ldr	r3, [r7, #28]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	61fb      	str	r3, [r7, #28]
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d1bc      	bne.n	8010df4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e7e:	4b51      	ldr	r3, [pc, #324]	; (8010fc4 <tcp_input+0x548>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	617b      	str	r3, [r7, #20]
 8010e84:	e02a      	b.n	8010edc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	7a1b      	ldrb	r3, [r3, #8]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d00c      	beq.n	8010ea8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	7a1a      	ldrb	r2, [r3, #8]
 8010e92:	4b44      	ldr	r3, [pc, #272]	; (8010fa4 <tcp_input+0x528>)
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d002      	beq.n	8010ea8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	61bb      	str	r3, [r7, #24]
        continue;
 8010ea6:	e016      	b.n	8010ed6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	8ada      	ldrh	r2, [r3, #22]
 8010eac:	4b3c      	ldr	r3, [pc, #240]	; (8010fa0 <tcp_input+0x524>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	885b      	ldrh	r3, [r3, #2]
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d10c      	bne.n	8010ed2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	4b39      	ldr	r3, [pc, #228]	; (8010fa4 <tcp_input+0x528>)
 8010ebe:	695b      	ldr	r3, [r3, #20]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d00f      	beq.n	8010ee4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00d      	beq.n	8010ee6 <tcp_input+0x46a>
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d009      	beq.n	8010ee6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	68db      	ldr	r3, [r3, #12]
 8010eda:	617b      	str	r3, [r7, #20]
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d1d1      	bne.n	8010e86 <tcp_input+0x40a>
 8010ee2:	e000      	b.n	8010ee6 <tcp_input+0x46a>
            break;
 8010ee4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d014      	beq.n	8010f16 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00a      	beq.n	8010f08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	68da      	ldr	r2, [r3, #12]
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010efa:	4b32      	ldr	r3, [pc, #200]	; (8010fc4 <tcp_input+0x548>)
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010f02:	4a30      	ldr	r2, [pc, #192]	; (8010fc4 <tcp_input+0x548>)
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010f08:	6978      	ldr	r0, [r7, #20]
 8010f0a:	f000 f9ff 	bl	801130c <tcp_listen_input>
      }
      pbuf_free(p);
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f7fd fc92 	bl	800e838 <pbuf_free>
      return;
 8010f14:	e199      	b.n	801124a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f000 8160 	beq.w	80111de <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010f1e:	4b2a      	ldr	r3, [pc, #168]	; (8010fc8 <tcp_input+0x54c>)
 8010f20:	2200      	movs	r2, #0
 8010f22:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	891a      	ldrh	r2, [r3, #8]
 8010f28:	4b27      	ldr	r3, [pc, #156]	; (8010fc8 <tcp_input+0x54c>)
 8010f2a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010f2c:	4a26      	ldr	r2, [pc, #152]	; (8010fc8 <tcp_input+0x54c>)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010f32:	4b1b      	ldr	r3, [pc, #108]	; (8010fa0 <tcp_input+0x524>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4a24      	ldr	r2, [pc, #144]	; (8010fc8 <tcp_input+0x54c>)
 8010f38:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010f3a:	4b24      	ldr	r3, [pc, #144]	; (8010fcc <tcp_input+0x550>)
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010f40:	4b23      	ldr	r3, [pc, #140]	; (8010fd0 <tcp_input+0x554>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010f46:	4b23      	ldr	r3, [pc, #140]	; (8010fd4 <tcp_input+0x558>)
 8010f48:	2200      	movs	r2, #0
 8010f4a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010f4c:	4b22      	ldr	r3, [pc, #136]	; (8010fd8 <tcp_input+0x55c>)
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	f003 0308 	and.w	r3, r3, #8
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d006      	beq.n	8010f66 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	7b5b      	ldrb	r3, [r3, #13]
 8010f5c:	f043 0301 	orr.w	r3, r3, #1
 8010f60:	b2da      	uxtb	r2, r3
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d038      	beq.n	8010fe0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010f6e:	69f8      	ldr	r0, [r7, #28]
 8010f70:	f7ff f872 	bl	8010058 <tcp_process_refused_data>
 8010f74:	4603      	mov	r3, r0
 8010f76:	f113 0f0d 	cmn.w	r3, #13
 8010f7a:	d007      	beq.n	8010f8c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010f7c:	69fb      	ldr	r3, [r7, #28]
 8010f7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d02d      	beq.n	8010fe0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010f84:	4b15      	ldr	r3, [pc, #84]	; (8010fdc <tcp_input+0x560>)
 8010f86:	881b      	ldrh	r3, [r3, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d029      	beq.n	8010fe0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f040 8104 	bne.w	801119e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010f96:	69f8      	ldr	r0, [r7, #28]
 8010f98:	f003 fe26 	bl	8014be8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010f9c:	e0ff      	b.n	801119e <tcp_input+0x722>
 8010f9e:	bf00      	nop
 8010fa0:	20004bcc 	.word	0x20004bcc
 8010fa4:	2000839c 	.word	0x2000839c
 8010fa8:	0801d5fc 	.word	0x0801d5fc
 8010fac:	0801d728 	.word	0x0801d728
 8010fb0:	0801d648 	.word	0x0801d648
 8010fb4:	2000bad0 	.word	0x2000bad0
 8010fb8:	0801d754 	.word	0x0801d754
 8010fbc:	2000bae0 	.word	0x2000bae0
 8010fc0:	0801d780 	.word	0x0801d780
 8010fc4:	2000bad8 	.word	0x2000bad8
 8010fc8:	20004bbc 	.word	0x20004bbc
 8010fcc:	20004bec 	.word	0x20004bec
 8010fd0:	20004be9 	.word	0x20004be9
 8010fd4:	20004be4 	.word	0x20004be4
 8010fd8:	20004be8 	.word	0x20004be8
 8010fdc:	20004be6 	.word	0x20004be6
      }
    }
    tcp_input_pcb = pcb;
 8010fe0:	4a9b      	ldr	r2, [pc, #620]	; (8011250 <tcp_input+0x7d4>)
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010fe6:	69f8      	ldr	r0, [r7, #28]
 8010fe8:	f000 fb0a 	bl	8011600 <tcp_process>
 8010fec:	4603      	mov	r3, r0
 8010fee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010ff0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ff4:	f113 0f0d 	cmn.w	r3, #13
 8010ff8:	f000 80d3 	beq.w	80111a2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010ffc:	4b95      	ldr	r3, [pc, #596]	; (8011254 <tcp_input+0x7d8>)
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	f003 0308 	and.w	r3, r3, #8
 8011004:	2b00      	cmp	r3, #0
 8011006:	d015      	beq.n	8011034 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011008:	69fb      	ldr	r3, [r7, #28]
 801100a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801100e:	2b00      	cmp	r3, #0
 8011010:	d008      	beq.n	8011024 <tcp_input+0x5a8>
 8011012:	69fb      	ldr	r3, [r7, #28]
 8011014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011018:	69fa      	ldr	r2, [r7, #28]
 801101a:	6912      	ldr	r2, [r2, #16]
 801101c:	f06f 010d 	mvn.w	r1, #13
 8011020:	4610      	mov	r0, r2
 8011022:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011024:	69f9      	ldr	r1, [r7, #28]
 8011026:	488c      	ldr	r0, [pc, #560]	; (8011258 <tcp_input+0x7dc>)
 8011028:	f7ff fbb0 	bl	801078c <tcp_pcb_remove>
        tcp_free(pcb);
 801102c:	69f8      	ldr	r0, [r7, #28]
 801102e:	f7fd febf 	bl	800edb0 <tcp_free>
 8011032:	e0c1      	b.n	80111b8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8011034:	2300      	movs	r3, #0
 8011036:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011038:	4b88      	ldr	r3, [pc, #544]	; (801125c <tcp_input+0x7e0>)
 801103a:	881b      	ldrh	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d01d      	beq.n	801107c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011040:	4b86      	ldr	r3, [pc, #536]	; (801125c <tcp_input+0x7e0>)
 8011042:	881b      	ldrh	r3, [r3, #0]
 8011044:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801104c:	2b00      	cmp	r3, #0
 801104e:	d00a      	beq.n	8011066 <tcp_input+0x5ea>
 8011050:	69fb      	ldr	r3, [r7, #28]
 8011052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011056:	69fa      	ldr	r2, [r7, #28]
 8011058:	6910      	ldr	r0, [r2, #16]
 801105a:	89fa      	ldrh	r2, [r7, #14]
 801105c:	69f9      	ldr	r1, [r7, #28]
 801105e:	4798      	blx	r3
 8011060:	4603      	mov	r3, r0
 8011062:	74fb      	strb	r3, [r7, #19]
 8011064:	e001      	b.n	801106a <tcp_input+0x5ee>
 8011066:	2300      	movs	r3, #0
 8011068:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801106a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801106e:	f113 0f0d 	cmn.w	r3, #13
 8011072:	f000 8098 	beq.w	80111a6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011076:	4b79      	ldr	r3, [pc, #484]	; (801125c <tcp_input+0x7e0>)
 8011078:	2200      	movs	r2, #0
 801107a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801107c:	69f8      	ldr	r0, [r7, #28]
 801107e:	f000 f905 	bl	801128c <tcp_input_delayed_close>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	f040 8090 	bne.w	80111aa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801108a:	4b75      	ldr	r3, [pc, #468]	; (8011260 <tcp_input+0x7e4>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d041      	beq.n	8011116 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011092:	69fb      	ldr	r3, [r7, #28]
 8011094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011096:	2b00      	cmp	r3, #0
 8011098:	d006      	beq.n	80110a8 <tcp_input+0x62c>
 801109a:	4b72      	ldr	r3, [pc, #456]	; (8011264 <tcp_input+0x7e8>)
 801109c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80110a0:	4971      	ldr	r1, [pc, #452]	; (8011268 <tcp_input+0x7ec>)
 80110a2:	4872      	ldr	r0, [pc, #456]	; (801126c <tcp_input+0x7f0>)
 80110a4:	f009 f98e 	bl	801a3c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80110a8:	69fb      	ldr	r3, [r7, #28]
 80110aa:	8b5b      	ldrh	r3, [r3, #26]
 80110ac:	f003 0310 	and.w	r3, r3, #16
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d008      	beq.n	80110c6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80110b4:	4b6a      	ldr	r3, [pc, #424]	; (8011260 <tcp_input+0x7e4>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7fd fbbd 	bl	800e838 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80110be:	69f8      	ldr	r0, [r7, #28]
 80110c0:	f7fe f9b0 	bl	800f424 <tcp_abort>
            goto aborted;
 80110c4:	e078      	b.n	80111b8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d00c      	beq.n	80110ea <tcp_input+0x66e>
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	6918      	ldr	r0, [r3, #16]
 80110da:	4b61      	ldr	r3, [pc, #388]	; (8011260 <tcp_input+0x7e4>)
 80110dc:	681a      	ldr	r2, [r3, #0]
 80110de:	2300      	movs	r3, #0
 80110e0:	69f9      	ldr	r1, [r7, #28]
 80110e2:	47a0      	blx	r4
 80110e4:	4603      	mov	r3, r0
 80110e6:	74fb      	strb	r3, [r7, #19]
 80110e8:	e008      	b.n	80110fc <tcp_input+0x680>
 80110ea:	4b5d      	ldr	r3, [pc, #372]	; (8011260 <tcp_input+0x7e4>)
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	2300      	movs	r3, #0
 80110f0:	69f9      	ldr	r1, [r7, #28]
 80110f2:	2000      	movs	r0, #0
 80110f4:	f7ff f884 	bl	8010200 <tcp_recv_null>
 80110f8:	4603      	mov	r3, r0
 80110fa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80110fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011100:	f113 0f0d 	cmn.w	r3, #13
 8011104:	d053      	beq.n	80111ae <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011106:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d003      	beq.n	8011116 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801110e:	4b54      	ldr	r3, [pc, #336]	; (8011260 <tcp_input+0x7e4>)
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011116:	4b4f      	ldr	r3, [pc, #316]	; (8011254 <tcp_input+0x7d8>)
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	f003 0320 	and.w	r3, r3, #32
 801111e:	2b00      	cmp	r3, #0
 8011120:	d030      	beq.n	8011184 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8011122:	69fb      	ldr	r3, [r7, #28]
 8011124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011126:	2b00      	cmp	r3, #0
 8011128:	d009      	beq.n	801113e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801112a:	69fb      	ldr	r3, [r7, #28]
 801112c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801112e:	7b5a      	ldrb	r2, [r3, #13]
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011134:	f042 0220 	orr.w	r2, r2, #32
 8011138:	b2d2      	uxtb	r2, r2
 801113a:	735a      	strb	r2, [r3, #13]
 801113c:	e022      	b.n	8011184 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011142:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011146:	d005      	beq.n	8011154 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011148:	69fb      	ldr	r3, [r7, #28]
 801114a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801114c:	3301      	adds	r3, #1
 801114e:	b29a      	uxth	r2, r3
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011154:	69fb      	ldr	r3, [r7, #28]
 8011156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00b      	beq.n	8011176 <tcp_input+0x6fa>
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	6918      	ldr	r0, [r3, #16]
 8011168:	2300      	movs	r3, #0
 801116a:	2200      	movs	r2, #0
 801116c:	69f9      	ldr	r1, [r7, #28]
 801116e:	47a0      	blx	r4
 8011170:	4603      	mov	r3, r0
 8011172:	74fb      	strb	r3, [r7, #19]
 8011174:	e001      	b.n	801117a <tcp_input+0x6fe>
 8011176:	2300      	movs	r3, #0
 8011178:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801117a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801117e:	f113 0f0d 	cmn.w	r3, #13
 8011182:	d016      	beq.n	80111b2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011184:	4b32      	ldr	r3, [pc, #200]	; (8011250 <tcp_input+0x7d4>)
 8011186:	2200      	movs	r2, #0
 8011188:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801118a:	69f8      	ldr	r0, [r7, #28]
 801118c:	f000 f87e 	bl	801128c <tcp_input_delayed_close>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	d10f      	bne.n	80111b6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011196:	69f8      	ldr	r0, [r7, #28]
 8011198:	f002 ff10 	bl	8013fbc <tcp_output>
 801119c:	e00c      	b.n	80111b8 <tcp_input+0x73c>
        goto aborted;
 801119e:	bf00      	nop
 80111a0:	e00a      	b.n	80111b8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80111a2:	bf00      	nop
 80111a4:	e008      	b.n	80111b8 <tcp_input+0x73c>
              goto aborted;
 80111a6:	bf00      	nop
 80111a8:	e006      	b.n	80111b8 <tcp_input+0x73c>
          goto aborted;
 80111aa:	bf00      	nop
 80111ac:	e004      	b.n	80111b8 <tcp_input+0x73c>
            goto aborted;
 80111ae:	bf00      	nop
 80111b0:	e002      	b.n	80111b8 <tcp_input+0x73c>
              goto aborted;
 80111b2:	bf00      	nop
 80111b4:	e000      	b.n	80111b8 <tcp_input+0x73c>
          goto aborted;
 80111b6:	bf00      	nop
    tcp_input_pcb = NULL;
 80111b8:	4b25      	ldr	r3, [pc, #148]	; (8011250 <tcp_input+0x7d4>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80111be:	4b28      	ldr	r3, [pc, #160]	; (8011260 <tcp_input+0x7e4>)
 80111c0:	2200      	movs	r2, #0
 80111c2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80111c4:	4b2a      	ldr	r3, [pc, #168]	; (8011270 <tcp_input+0x7f4>)
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d03d      	beq.n	8011248 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80111cc:	4b28      	ldr	r3, [pc, #160]	; (8011270 <tcp_input+0x7f4>)
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7fd fb31 	bl	800e838 <pbuf_free>
      inseg.p = NULL;
 80111d6:	4b26      	ldr	r3, [pc, #152]	; (8011270 <tcp_input+0x7f4>)
 80111d8:	2200      	movs	r2, #0
 80111da:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80111dc:	e034      	b.n	8011248 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80111de:	4b25      	ldr	r3, [pc, #148]	; (8011274 <tcp_input+0x7f8>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	899b      	ldrh	r3, [r3, #12]
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fb ff3a 	bl	800d060 <lwip_htons>
 80111ec:	4603      	mov	r3, r0
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	f003 0304 	and.w	r3, r3, #4
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d118      	bne.n	801122a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111f8:	4b1f      	ldr	r3, [pc, #124]	; (8011278 <tcp_input+0x7fc>)
 80111fa:	6819      	ldr	r1, [r3, #0]
 80111fc:	4b1f      	ldr	r3, [pc, #124]	; (801127c <tcp_input+0x800>)
 80111fe:	881b      	ldrh	r3, [r3, #0]
 8011200:	461a      	mov	r2, r3
 8011202:	4b1f      	ldr	r3, [pc, #124]	; (8011280 <tcp_input+0x804>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011208:	4b1a      	ldr	r3, [pc, #104]	; (8011274 <tcp_input+0x7f8>)
 801120a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801120c:	885b      	ldrh	r3, [r3, #2]
 801120e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011210:	4a18      	ldr	r2, [pc, #96]	; (8011274 <tcp_input+0x7f8>)
 8011212:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011214:	8812      	ldrh	r2, [r2, #0]
 8011216:	b292      	uxth	r2, r2
 8011218:	9202      	str	r2, [sp, #8]
 801121a:	9301      	str	r3, [sp, #4]
 801121c:	4b19      	ldr	r3, [pc, #100]	; (8011284 <tcp_input+0x808>)
 801121e:	9300      	str	r3, [sp, #0]
 8011220:	4b19      	ldr	r3, [pc, #100]	; (8011288 <tcp_input+0x80c>)
 8011222:	4602      	mov	r2, r0
 8011224:	2000      	movs	r0, #0
 8011226:	f003 fc8d 	bl	8014b44 <tcp_rst>
    pbuf_free(p);
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f7fd fb04 	bl	800e838 <pbuf_free>
  return;
 8011230:	e00a      	b.n	8011248 <tcp_input+0x7cc>
    goto dropped;
 8011232:	bf00      	nop
 8011234:	e004      	b.n	8011240 <tcp_input+0x7c4>
dropped:
 8011236:	bf00      	nop
 8011238:	e002      	b.n	8011240 <tcp_input+0x7c4>
      goto dropped;
 801123a:	bf00      	nop
 801123c:	e000      	b.n	8011240 <tcp_input+0x7c4>
      goto dropped;
 801123e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7fd faf9 	bl	800e838 <pbuf_free>
 8011246:	e000      	b.n	801124a <tcp_input+0x7ce>
  return;
 8011248:	bf00      	nop
}
 801124a:	3724      	adds	r7, #36	; 0x24
 801124c:	46bd      	mov	sp, r7
 801124e:	bd90      	pop	{r4, r7, pc}
 8011250:	2000bae4 	.word	0x2000bae4
 8011254:	20004be9 	.word	0x20004be9
 8011258:	2000bad0 	.word	0x2000bad0
 801125c:	20004be4 	.word	0x20004be4
 8011260:	20004bec 	.word	0x20004bec
 8011264:	0801d5fc 	.word	0x0801d5fc
 8011268:	0801d7b0 	.word	0x0801d7b0
 801126c:	0801d648 	.word	0x0801d648
 8011270:	20004bbc 	.word	0x20004bbc
 8011274:	20004bcc 	.word	0x20004bcc
 8011278:	20004be0 	.word	0x20004be0
 801127c:	20004be6 	.word	0x20004be6
 8011280:	20004bdc 	.word	0x20004bdc
 8011284:	200083ac 	.word	0x200083ac
 8011288:	200083b0 	.word	0x200083b0

0801128c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d106      	bne.n	80112a8 <tcp_input_delayed_close+0x1c>
 801129a:	4b17      	ldr	r3, [pc, #92]	; (80112f8 <tcp_input_delayed_close+0x6c>)
 801129c:	f240 225a 	movw	r2, #602	; 0x25a
 80112a0:	4916      	ldr	r1, [pc, #88]	; (80112fc <tcp_input_delayed_close+0x70>)
 80112a2:	4817      	ldr	r0, [pc, #92]	; (8011300 <tcp_input_delayed_close+0x74>)
 80112a4:	f009 f88e 	bl	801a3c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80112a8:	4b16      	ldr	r3, [pc, #88]	; (8011304 <tcp_input_delayed_close+0x78>)
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	f003 0310 	and.w	r3, r3, #16
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d01c      	beq.n	80112ee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	8b5b      	ldrh	r3, [r3, #26]
 80112b8:	f003 0310 	and.w	r3, r3, #16
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d10d      	bne.n	80112dc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d008      	beq.n	80112dc <tcp_input_delayed_close+0x50>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	6912      	ldr	r2, [r2, #16]
 80112d4:	f06f 010e 	mvn.w	r1, #14
 80112d8:	4610      	mov	r0, r2
 80112da:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80112dc:	6879      	ldr	r1, [r7, #4]
 80112de:	480a      	ldr	r0, [pc, #40]	; (8011308 <tcp_input_delayed_close+0x7c>)
 80112e0:	f7ff fa54 	bl	801078c <tcp_pcb_remove>
    tcp_free(pcb);
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f7fd fd63 	bl	800edb0 <tcp_free>
    return 1;
 80112ea:	2301      	movs	r3, #1
 80112ec:	e000      	b.n	80112f0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80112ee:	2300      	movs	r3, #0
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	0801d5fc 	.word	0x0801d5fc
 80112fc:	0801d7cc 	.word	0x0801d7cc
 8011300:	0801d648 	.word	0x0801d648
 8011304:	20004be9 	.word	0x20004be9
 8011308:	2000bad0 	.word	0x2000bad0

0801130c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801130c:	b590      	push	{r4, r7, lr}
 801130e:	b08b      	sub	sp, #44	; 0x2c
 8011310:	af04      	add	r7, sp, #16
 8011312:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011314:	4b6f      	ldr	r3, [pc, #444]	; (80114d4 <tcp_listen_input+0x1c8>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	f003 0304 	and.w	r3, r3, #4
 801131c:	2b00      	cmp	r3, #0
 801131e:	f040 80d3 	bne.w	80114c8 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d106      	bne.n	8011336 <tcp_listen_input+0x2a>
 8011328:	4b6b      	ldr	r3, [pc, #428]	; (80114d8 <tcp_listen_input+0x1cc>)
 801132a:	f240 2281 	movw	r2, #641	; 0x281
 801132e:	496b      	ldr	r1, [pc, #428]	; (80114dc <tcp_listen_input+0x1d0>)
 8011330:	486b      	ldr	r0, [pc, #428]	; (80114e0 <tcp_listen_input+0x1d4>)
 8011332:	f009 f847 	bl	801a3c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011336:	4b67      	ldr	r3, [pc, #412]	; (80114d4 <tcp_listen_input+0x1c8>)
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	f003 0310 	and.w	r3, r3, #16
 801133e:	2b00      	cmp	r3, #0
 8011340:	d019      	beq.n	8011376 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011342:	4b68      	ldr	r3, [pc, #416]	; (80114e4 <tcp_listen_input+0x1d8>)
 8011344:	6819      	ldr	r1, [r3, #0]
 8011346:	4b68      	ldr	r3, [pc, #416]	; (80114e8 <tcp_listen_input+0x1dc>)
 8011348:	881b      	ldrh	r3, [r3, #0]
 801134a:	461a      	mov	r2, r3
 801134c:	4b67      	ldr	r3, [pc, #412]	; (80114ec <tcp_listen_input+0x1e0>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011352:	4b67      	ldr	r3, [pc, #412]	; (80114f0 <tcp_listen_input+0x1e4>)
 8011354:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011356:	885b      	ldrh	r3, [r3, #2]
 8011358:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801135a:	4a65      	ldr	r2, [pc, #404]	; (80114f0 <tcp_listen_input+0x1e4>)
 801135c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801135e:	8812      	ldrh	r2, [r2, #0]
 8011360:	b292      	uxth	r2, r2
 8011362:	9202      	str	r2, [sp, #8]
 8011364:	9301      	str	r3, [sp, #4]
 8011366:	4b63      	ldr	r3, [pc, #396]	; (80114f4 <tcp_listen_input+0x1e8>)
 8011368:	9300      	str	r3, [sp, #0]
 801136a:	4b63      	ldr	r3, [pc, #396]	; (80114f8 <tcp_listen_input+0x1ec>)
 801136c:	4602      	mov	r2, r0
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f003 fbe8 	bl	8014b44 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011374:	e0aa      	b.n	80114cc <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8011376:	4b57      	ldr	r3, [pc, #348]	; (80114d4 <tcp_listen_input+0x1c8>)
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	f003 0302 	and.w	r3, r3, #2
 801137e:	2b00      	cmp	r3, #0
 8011380:	f000 80a4 	beq.w	80114cc <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	7d5b      	ldrb	r3, [r3, #21]
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff f85d 	bl	8010448 <tcp_alloc>
 801138e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d111      	bne.n	80113ba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	699b      	ldr	r3, [r3, #24]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00a      	beq.n	80113b4 <tcp_listen_input+0xa8>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	699b      	ldr	r3, [r3, #24]
 80113a2:	687a      	ldr	r2, [r7, #4]
 80113a4:	6910      	ldr	r0, [r2, #16]
 80113a6:	f04f 32ff 	mov.w	r2, #4294967295
 80113aa:	2100      	movs	r1, #0
 80113ac:	4798      	blx	r3
 80113ae:	4603      	mov	r3, r0
 80113b0:	73bb      	strb	r3, [r7, #14]
      return;
 80113b2:	e08c      	b.n	80114ce <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80113b4:	23f0      	movs	r3, #240	; 0xf0
 80113b6:	73bb      	strb	r3, [r7, #14]
      return;
 80113b8:	e089      	b.n	80114ce <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80113ba:	4b50      	ldr	r3, [pc, #320]	; (80114fc <tcp_listen_input+0x1f0>)
 80113bc:	695a      	ldr	r2, [r3, #20]
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80113c2:	4b4e      	ldr	r3, [pc, #312]	; (80114fc <tcp_listen_input+0x1f0>)
 80113c4:	691a      	ldr	r2, [r3, #16]
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	8ada      	ldrh	r2, [r3, #22]
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80113d2:	4b47      	ldr	r3, [pc, #284]	; (80114f0 <tcp_listen_input+0x1e4>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	881b      	ldrh	r3, [r3, #0]
 80113d8:	b29a      	uxth	r2, r3
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	2203      	movs	r2, #3
 80113e2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80113e4:	4b41      	ldr	r3, [pc, #260]	; (80114ec <tcp_listen_input+0x1e0>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	1c5a      	adds	r2, r3, #1
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80113f6:	6978      	ldr	r0, [r7, #20]
 80113f8:	f7ff fa5c 	bl	80108b4 <tcp_next_iss>
 80113fc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	693a      	ldr	r2, [r7, #16]
 8011402:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	693a      	ldr	r2, [r7, #16]
 8011408:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	693a      	ldr	r2, [r7, #16]
 801140e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	693a      	ldr	r2, [r7, #16]
 8011414:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011416:	4b35      	ldr	r3, [pc, #212]	; (80114ec <tcp_listen_input+0x1e0>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	1e5a      	subs	r2, r3, #1
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	691a      	ldr	r2, [r3, #16]
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	7a5b      	ldrb	r3, [r3, #9]
 8011432:	f003 030c 	and.w	r3, r3, #12
 8011436:	b2da      	uxtb	r2, r3
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	7a1a      	ldrb	r2, [r3, #8]
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011444:	4b2e      	ldr	r3, [pc, #184]	; (8011500 <tcp_listen_input+0x1f4>)
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	60da      	str	r2, [r3, #12]
 801144c:	4a2c      	ldr	r2, [pc, #176]	; (8011500 <tcp_listen_input+0x1f4>)
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	6013      	str	r3, [r2, #0]
 8011452:	f003 fd39 	bl	8014ec8 <tcp_timer_needed>
 8011456:	4b2b      	ldr	r3, [pc, #172]	; (8011504 <tcp_listen_input+0x1f8>)
 8011458:	2201      	movs	r2, #1
 801145a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801145c:	6978      	ldr	r0, [r7, #20]
 801145e:	f001 fd8f 	bl	8012f80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011462:	4b23      	ldr	r3, [pc, #140]	; (80114f0 <tcp_listen_input+0x1e4>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	89db      	ldrh	r3, [r3, #14]
 8011468:	b29a      	uxth	r2, r3
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	3304      	adds	r3, #4
 8011484:	4618      	mov	r0, r3
 8011486:	f007 fb89 	bl	8018b9c <ip4_route>
 801148a:	4601      	mov	r1, r0
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	3304      	adds	r3, #4
 8011490:	461a      	mov	r2, r3
 8011492:	4620      	mov	r0, r4
 8011494:	f7ff fa34 	bl	8010900 <tcp_eff_send_mss_netif>
 8011498:	4603      	mov	r3, r0
 801149a:	461a      	mov	r2, r3
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80114a0:	2112      	movs	r1, #18
 80114a2:	6978      	ldr	r0, [r7, #20]
 80114a4:	f002 fc9c 	bl	8013de0 <tcp_enqueue_flags>
 80114a8:	4603      	mov	r3, r0
 80114aa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80114ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d004      	beq.n	80114be <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80114b4:	2100      	movs	r1, #0
 80114b6:	6978      	ldr	r0, [r7, #20]
 80114b8:	f7fd fef6 	bl	800f2a8 <tcp_abandon>
      return;
 80114bc:	e007      	b.n	80114ce <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80114be:	6978      	ldr	r0, [r7, #20]
 80114c0:	f002 fd7c 	bl	8013fbc <tcp_output>
  return;
 80114c4:	bf00      	nop
 80114c6:	e001      	b.n	80114cc <tcp_listen_input+0x1c0>
    return;
 80114c8:	bf00      	nop
 80114ca:	e000      	b.n	80114ce <tcp_listen_input+0x1c2>
  return;
 80114cc:	bf00      	nop
}
 80114ce:	371c      	adds	r7, #28
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd90      	pop	{r4, r7, pc}
 80114d4:	20004be8 	.word	0x20004be8
 80114d8:	0801d5fc 	.word	0x0801d5fc
 80114dc:	0801d7f4 	.word	0x0801d7f4
 80114e0:	0801d648 	.word	0x0801d648
 80114e4:	20004be0 	.word	0x20004be0
 80114e8:	20004be6 	.word	0x20004be6
 80114ec:	20004bdc 	.word	0x20004bdc
 80114f0:	20004bcc 	.word	0x20004bcc
 80114f4:	200083ac 	.word	0x200083ac
 80114f8:	200083b0 	.word	0x200083b0
 80114fc:	2000839c 	.word	0x2000839c
 8011500:	2000bad0 	.word	0x2000bad0
 8011504:	2000bacc 	.word	0x2000bacc

08011508 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b086      	sub	sp, #24
 801150c:	af04      	add	r7, sp, #16
 801150e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011510:	4b30      	ldr	r3, [pc, #192]	; (80115d4 <tcp_timewait_input+0xcc>)
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	f003 0304 	and.w	r3, r3, #4
 8011518:	2b00      	cmp	r3, #0
 801151a:	d154      	bne.n	80115c6 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d106      	bne.n	8011530 <tcp_timewait_input+0x28>
 8011522:	4b2d      	ldr	r3, [pc, #180]	; (80115d8 <tcp_timewait_input+0xd0>)
 8011524:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011528:	492c      	ldr	r1, [pc, #176]	; (80115dc <tcp_timewait_input+0xd4>)
 801152a:	482d      	ldr	r0, [pc, #180]	; (80115e0 <tcp_timewait_input+0xd8>)
 801152c:	f008 ff4a 	bl	801a3c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011530:	4b28      	ldr	r3, [pc, #160]	; (80115d4 <tcp_timewait_input+0xcc>)
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	f003 0302 	and.w	r3, r3, #2
 8011538:	2b00      	cmp	r3, #0
 801153a:	d02a      	beq.n	8011592 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801153c:	4b29      	ldr	r3, [pc, #164]	; (80115e4 <tcp_timewait_input+0xdc>)
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	2b00      	cmp	r3, #0
 8011548:	db2d      	blt.n	80115a6 <tcp_timewait_input+0x9e>
 801154a:	4b26      	ldr	r3, [pc, #152]	; (80115e4 <tcp_timewait_input+0xdc>)
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011552:	6879      	ldr	r1, [r7, #4]
 8011554:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011556:	440b      	add	r3, r1
 8011558:	1ad3      	subs	r3, r2, r3
 801155a:	2b00      	cmp	r3, #0
 801155c:	dc23      	bgt.n	80115a6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801155e:	4b22      	ldr	r3, [pc, #136]	; (80115e8 <tcp_timewait_input+0xe0>)
 8011560:	6819      	ldr	r1, [r3, #0]
 8011562:	4b22      	ldr	r3, [pc, #136]	; (80115ec <tcp_timewait_input+0xe4>)
 8011564:	881b      	ldrh	r3, [r3, #0]
 8011566:	461a      	mov	r2, r3
 8011568:	4b1e      	ldr	r3, [pc, #120]	; (80115e4 <tcp_timewait_input+0xdc>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801156e:	4b20      	ldr	r3, [pc, #128]	; (80115f0 <tcp_timewait_input+0xe8>)
 8011570:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011572:	885b      	ldrh	r3, [r3, #2]
 8011574:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011576:	4a1e      	ldr	r2, [pc, #120]	; (80115f0 <tcp_timewait_input+0xe8>)
 8011578:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801157a:	8812      	ldrh	r2, [r2, #0]
 801157c:	b292      	uxth	r2, r2
 801157e:	9202      	str	r2, [sp, #8]
 8011580:	9301      	str	r3, [sp, #4]
 8011582:	4b1c      	ldr	r3, [pc, #112]	; (80115f4 <tcp_timewait_input+0xec>)
 8011584:	9300      	str	r3, [sp, #0]
 8011586:	4b1c      	ldr	r3, [pc, #112]	; (80115f8 <tcp_timewait_input+0xf0>)
 8011588:	4602      	mov	r2, r0
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f003 fada 	bl	8014b44 <tcp_rst>
      return;
 8011590:	e01c      	b.n	80115cc <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8011592:	4b10      	ldr	r3, [pc, #64]	; (80115d4 <tcp_timewait_input+0xcc>)
 8011594:	781b      	ldrb	r3, [r3, #0]
 8011596:	f003 0301 	and.w	r3, r3, #1
 801159a:	2b00      	cmp	r3, #0
 801159c:	d003      	beq.n	80115a6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801159e:	4b17      	ldr	r3, [pc, #92]	; (80115fc <tcp_timewait_input+0xf4>)
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80115a6:	4b11      	ldr	r3, [pc, #68]	; (80115ec <tcp_timewait_input+0xe4>)
 80115a8:	881b      	ldrh	r3, [r3, #0]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d00d      	beq.n	80115ca <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	8b5b      	ldrh	r3, [r3, #26]
 80115b2:	f043 0302 	orr.w	r3, r3, #2
 80115b6:	b29a      	uxth	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f002 fcfd 	bl	8013fbc <tcp_output>
  }
  return;
 80115c2:	bf00      	nop
 80115c4:	e001      	b.n	80115ca <tcp_timewait_input+0xc2>
    return;
 80115c6:	bf00      	nop
 80115c8:	e000      	b.n	80115cc <tcp_timewait_input+0xc4>
  return;
 80115ca:	bf00      	nop
}
 80115cc:	3708      	adds	r7, #8
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
 80115d2:	bf00      	nop
 80115d4:	20004be8 	.word	0x20004be8
 80115d8:	0801d5fc 	.word	0x0801d5fc
 80115dc:	0801d814 	.word	0x0801d814
 80115e0:	0801d648 	.word	0x0801d648
 80115e4:	20004bdc 	.word	0x20004bdc
 80115e8:	20004be0 	.word	0x20004be0
 80115ec:	20004be6 	.word	0x20004be6
 80115f0:	20004bcc 	.word	0x20004bcc
 80115f4:	200083ac 	.word	0x200083ac
 80115f8:	200083b0 	.word	0x200083b0
 80115fc:	2000bad4 	.word	0x2000bad4

08011600 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011600:	b590      	push	{r4, r7, lr}
 8011602:	b08d      	sub	sp, #52	; 0x34
 8011604:	af04      	add	r7, sp, #16
 8011606:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011608:	2300      	movs	r3, #0
 801160a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801160c:	2300      	movs	r3, #0
 801160e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d106      	bne.n	8011624 <tcp_process+0x24>
 8011616:	4ba5      	ldr	r3, [pc, #660]	; (80118ac <tcp_process+0x2ac>)
 8011618:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801161c:	49a4      	ldr	r1, [pc, #656]	; (80118b0 <tcp_process+0x2b0>)
 801161e:	48a5      	ldr	r0, [pc, #660]	; (80118b4 <tcp_process+0x2b4>)
 8011620:	f008 fed0 	bl	801a3c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011624:	4ba4      	ldr	r3, [pc, #656]	; (80118b8 <tcp_process+0x2b8>)
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	f003 0304 	and.w	r3, r3, #4
 801162c:	2b00      	cmp	r3, #0
 801162e:	d04e      	beq.n	80116ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	7d1b      	ldrb	r3, [r3, #20]
 8011634:	2b02      	cmp	r3, #2
 8011636:	d108      	bne.n	801164a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801163c:	4b9f      	ldr	r3, [pc, #636]	; (80118bc <tcp_process+0x2bc>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	429a      	cmp	r2, r3
 8011642:	d123      	bne.n	801168c <tcp_process+0x8c>
        acceptable = 1;
 8011644:	2301      	movs	r3, #1
 8011646:	76fb      	strb	r3, [r7, #27]
 8011648:	e020      	b.n	801168c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801164e:	4b9c      	ldr	r3, [pc, #624]	; (80118c0 <tcp_process+0x2c0>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	429a      	cmp	r2, r3
 8011654:	d102      	bne.n	801165c <tcp_process+0x5c>
        acceptable = 1;
 8011656:	2301      	movs	r3, #1
 8011658:	76fb      	strb	r3, [r7, #27]
 801165a:	e017      	b.n	801168c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801165c:	4b98      	ldr	r3, [pc, #608]	; (80118c0 <tcp_process+0x2c0>)
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011664:	1ad3      	subs	r3, r2, r3
 8011666:	2b00      	cmp	r3, #0
 8011668:	db10      	blt.n	801168c <tcp_process+0x8c>
 801166a:	4b95      	ldr	r3, [pc, #596]	; (80118c0 <tcp_process+0x2c0>)
 801166c:	681a      	ldr	r2, [r3, #0]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011672:	6879      	ldr	r1, [r7, #4]
 8011674:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011676:	440b      	add	r3, r1
 8011678:	1ad3      	subs	r3, r2, r3
 801167a:	2b00      	cmp	r3, #0
 801167c:	dc06      	bgt.n	801168c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	8b5b      	ldrh	r3, [r3, #26]
 8011682:	f043 0302 	orr.w	r3, r3, #2
 8011686:	b29a      	uxth	r2, r3
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801168c:	7efb      	ldrb	r3, [r7, #27]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d01b      	beq.n	80116ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	7d1b      	ldrb	r3, [r3, #20]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d106      	bne.n	80116a8 <tcp_process+0xa8>
 801169a:	4b84      	ldr	r3, [pc, #528]	; (80118ac <tcp_process+0x2ac>)
 801169c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80116a0:	4988      	ldr	r1, [pc, #544]	; (80118c4 <tcp_process+0x2c4>)
 80116a2:	4884      	ldr	r0, [pc, #528]	; (80118b4 <tcp_process+0x2b4>)
 80116a4:	f008 fe8e 	bl	801a3c4 <iprintf>
      recv_flags |= TF_RESET;
 80116a8:	4b87      	ldr	r3, [pc, #540]	; (80118c8 <tcp_process+0x2c8>)
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	f043 0308 	orr.w	r3, r3, #8
 80116b0:	b2da      	uxtb	r2, r3
 80116b2:	4b85      	ldr	r3, [pc, #532]	; (80118c8 <tcp_process+0x2c8>)
 80116b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	8b5b      	ldrh	r3, [r3, #26]
 80116ba:	f023 0301 	bic.w	r3, r3, #1
 80116be:	b29a      	uxth	r2, r3
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80116c4:	f06f 030d 	mvn.w	r3, #13
 80116c8:	e37a      	b.n	8011dc0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80116ca:	2300      	movs	r3, #0
 80116cc:	e378      	b.n	8011dc0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80116ce:	4b7a      	ldr	r3, [pc, #488]	; (80118b8 <tcp_process+0x2b8>)
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	f003 0302 	and.w	r3, r3, #2
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d010      	beq.n	80116fc <tcp_process+0xfc>
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	7d1b      	ldrb	r3, [r3, #20]
 80116de:	2b02      	cmp	r3, #2
 80116e0:	d00c      	beq.n	80116fc <tcp_process+0xfc>
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	7d1b      	ldrb	r3, [r3, #20]
 80116e6:	2b03      	cmp	r3, #3
 80116e8:	d008      	beq.n	80116fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	8b5b      	ldrh	r3, [r3, #26]
 80116ee:	f043 0302 	orr.w	r3, r3, #2
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80116f8:	2300      	movs	r3, #0
 80116fa:	e361      	b.n	8011dc0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	8b5b      	ldrh	r3, [r3, #26]
 8011700:	f003 0310 	and.w	r3, r3, #16
 8011704:	2b00      	cmp	r3, #0
 8011706:	d103      	bne.n	8011710 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011708:	4b70      	ldr	r3, [pc, #448]	; (80118cc <tcp_process+0x2cc>)
 801170a:	681a      	ldr	r2, [r3, #0]
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2200      	movs	r2, #0
 8011714:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2200      	movs	r2, #0
 801171c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f001 fc2d 	bl	8012f80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	7d1b      	ldrb	r3, [r3, #20]
 801172a:	3b02      	subs	r3, #2
 801172c:	2b07      	cmp	r3, #7
 801172e:	f200 8337 	bhi.w	8011da0 <tcp_process+0x7a0>
 8011732:	a201      	add	r2, pc, #4	; (adr r2, 8011738 <tcp_process+0x138>)
 8011734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011738:	08011759 	.word	0x08011759
 801173c:	08011989 	.word	0x08011989
 8011740:	08011b01 	.word	0x08011b01
 8011744:	08011b2b 	.word	0x08011b2b
 8011748:	08011c4f 	.word	0x08011c4f
 801174c:	08011b01 	.word	0x08011b01
 8011750:	08011cdb 	.word	0x08011cdb
 8011754:	08011d6b 	.word	0x08011d6b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011758:	4b57      	ldr	r3, [pc, #348]	; (80118b8 <tcp_process+0x2b8>)
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	f003 0310 	and.w	r3, r3, #16
 8011760:	2b00      	cmp	r3, #0
 8011762:	f000 80e4 	beq.w	801192e <tcp_process+0x32e>
 8011766:	4b54      	ldr	r3, [pc, #336]	; (80118b8 <tcp_process+0x2b8>)
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	f003 0302 	and.w	r3, r3, #2
 801176e:	2b00      	cmp	r3, #0
 8011770:	f000 80dd 	beq.w	801192e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011778:	1c5a      	adds	r2, r3, #1
 801177a:	4b50      	ldr	r3, [pc, #320]	; (80118bc <tcp_process+0x2bc>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	429a      	cmp	r2, r3
 8011780:	f040 80d5 	bne.w	801192e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011784:	4b4e      	ldr	r3, [pc, #312]	; (80118c0 <tcp_process+0x2c0>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	1c5a      	adds	r2, r3, #1
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011796:	4b49      	ldr	r3, [pc, #292]	; (80118bc <tcp_process+0x2bc>)
 8011798:	681a      	ldr	r2, [r3, #0]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801179e:	4b4c      	ldr	r3, [pc, #304]	; (80118d0 <tcp_process+0x2d0>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	89db      	ldrh	r3, [r3, #14]
 80117a4:	b29a      	uxth	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80117b8:	4b41      	ldr	r3, [pc, #260]	; (80118c0 <tcp_process+0x2c0>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	1e5a      	subs	r2, r3, #1
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2204      	movs	r2, #4
 80117c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	3304      	adds	r3, #4
 80117d0:	4618      	mov	r0, r3
 80117d2:	f007 f9e3 	bl	8018b9c <ip4_route>
 80117d6:	4601      	mov	r1, r0
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	3304      	adds	r3, #4
 80117dc:	461a      	mov	r2, r3
 80117de:	4620      	mov	r0, r4
 80117e0:	f7ff f88e 	bl	8010900 <tcp_eff_send_mss_netif>
 80117e4:	4603      	mov	r3, r0
 80117e6:	461a      	mov	r2, r3
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117f0:	009a      	lsls	r2, r3, #2
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117f6:	005b      	lsls	r3, r3, #1
 80117f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80117fc:	428b      	cmp	r3, r1
 80117fe:	bf38      	it	cc
 8011800:	460b      	movcc	r3, r1
 8011802:	429a      	cmp	r2, r3
 8011804:	d204      	bcs.n	8011810 <tcp_process+0x210>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	b29b      	uxth	r3, r3
 801180e:	e00d      	b.n	801182c <tcp_process+0x22c>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011814:	005b      	lsls	r3, r3, #1
 8011816:	f241 121c 	movw	r2, #4380	; 0x111c
 801181a:	4293      	cmp	r3, r2
 801181c:	d904      	bls.n	8011828 <tcp_process+0x228>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011822:	005b      	lsls	r3, r3, #1
 8011824:	b29b      	uxth	r3, r3
 8011826:	e001      	b.n	801182c <tcp_process+0x22c>
 8011828:	f241 131c 	movw	r3, #4380	; 0x111c
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011838:	2b00      	cmp	r3, #0
 801183a:	d106      	bne.n	801184a <tcp_process+0x24a>
 801183c:	4b1b      	ldr	r3, [pc, #108]	; (80118ac <tcp_process+0x2ac>)
 801183e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011842:	4924      	ldr	r1, [pc, #144]	; (80118d4 <tcp_process+0x2d4>)
 8011844:	481b      	ldr	r0, [pc, #108]	; (80118b4 <tcp_process+0x2b4>)
 8011846:	f008 fdbd 	bl	801a3c4 <iprintf>
        --pcb->snd_queuelen;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011850:	3b01      	subs	r3, #1
 8011852:	b29a      	uxth	r2, r3
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801185e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011860:	69fb      	ldr	r3, [r7, #28]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d111      	bne.n	801188a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801186a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d106      	bne.n	8011880 <tcp_process+0x280>
 8011872:	4b0e      	ldr	r3, [pc, #56]	; (80118ac <tcp_process+0x2ac>)
 8011874:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011878:	4917      	ldr	r1, [pc, #92]	; (80118d8 <tcp_process+0x2d8>)
 801187a:	480e      	ldr	r0, [pc, #56]	; (80118b4 <tcp_process+0x2b4>)
 801187c:	f008 fda2 	bl	801a3c4 <iprintf>
          pcb->unsent = rseg->next;
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	681a      	ldr	r2, [r3, #0]
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	66da      	str	r2, [r3, #108]	; 0x6c
 8011888:	e003      	b.n	8011892 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801188a:	69fb      	ldr	r3, [r7, #28]
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011892:	69f8      	ldr	r0, [r7, #28]
 8011894:	f7fe fc70 	bl	8010178 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801189c:	2b00      	cmp	r3, #0
 801189e:	d11d      	bne.n	80118dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80118a8:	e01f      	b.n	80118ea <tcp_process+0x2ea>
 80118aa:	bf00      	nop
 80118ac:	0801d5fc 	.word	0x0801d5fc
 80118b0:	0801d834 	.word	0x0801d834
 80118b4:	0801d648 	.word	0x0801d648
 80118b8:	20004be8 	.word	0x20004be8
 80118bc:	20004be0 	.word	0x20004be0
 80118c0:	20004bdc 	.word	0x20004bdc
 80118c4:	0801d850 	.word	0x0801d850
 80118c8:	20004be9 	.word	0x20004be9
 80118cc:	2000bad4 	.word	0x2000bad4
 80118d0:	20004bcc 	.word	0x20004bcc
 80118d4:	0801d870 	.word	0x0801d870
 80118d8:	0801d888 	.word	0x0801d888
        } else {
          pcb->rtime = 0;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2200      	movs	r2, #0
 80118e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2200      	movs	r2, #0
 80118e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d00a      	beq.n	801190a <tcp_process+0x30a>
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118fa:	687a      	ldr	r2, [r7, #4]
 80118fc:	6910      	ldr	r0, [r2, #16]
 80118fe:	2200      	movs	r2, #0
 8011900:	6879      	ldr	r1, [r7, #4]
 8011902:	4798      	blx	r3
 8011904:	4603      	mov	r3, r0
 8011906:	76bb      	strb	r3, [r7, #26]
 8011908:	e001      	b.n	801190e <tcp_process+0x30e>
 801190a:	2300      	movs	r3, #0
 801190c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801190e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011912:	f113 0f0d 	cmn.w	r3, #13
 8011916:	d102      	bne.n	801191e <tcp_process+0x31e>
          return ERR_ABRT;
 8011918:	f06f 030c 	mvn.w	r3, #12
 801191c:	e250      	b.n	8011dc0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	8b5b      	ldrh	r3, [r3, #26]
 8011922:	f043 0302 	orr.w	r3, r3, #2
 8011926:	b29a      	uxth	r2, r3
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801192c:	e23a      	b.n	8011da4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801192e:	4b9d      	ldr	r3, [pc, #628]	; (8011ba4 <tcp_process+0x5a4>)
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	f003 0310 	and.w	r3, r3, #16
 8011936:	2b00      	cmp	r3, #0
 8011938:	f000 8234 	beq.w	8011da4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801193c:	4b9a      	ldr	r3, [pc, #616]	; (8011ba8 <tcp_process+0x5a8>)
 801193e:	6819      	ldr	r1, [r3, #0]
 8011940:	4b9a      	ldr	r3, [pc, #616]	; (8011bac <tcp_process+0x5ac>)
 8011942:	881b      	ldrh	r3, [r3, #0]
 8011944:	461a      	mov	r2, r3
 8011946:	4b9a      	ldr	r3, [pc, #616]	; (8011bb0 <tcp_process+0x5b0>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801194c:	4b99      	ldr	r3, [pc, #612]	; (8011bb4 <tcp_process+0x5b4>)
 801194e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011950:	885b      	ldrh	r3, [r3, #2]
 8011952:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011954:	4a97      	ldr	r2, [pc, #604]	; (8011bb4 <tcp_process+0x5b4>)
 8011956:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011958:	8812      	ldrh	r2, [r2, #0]
 801195a:	b292      	uxth	r2, r2
 801195c:	9202      	str	r2, [sp, #8]
 801195e:	9301      	str	r3, [sp, #4]
 8011960:	4b95      	ldr	r3, [pc, #596]	; (8011bb8 <tcp_process+0x5b8>)
 8011962:	9300      	str	r3, [sp, #0]
 8011964:	4b95      	ldr	r3, [pc, #596]	; (8011bbc <tcp_process+0x5bc>)
 8011966:	4602      	mov	r2, r0
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f003 f8eb 	bl	8014b44 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011974:	2b05      	cmp	r3, #5
 8011976:	f200 8215 	bhi.w	8011da4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2200      	movs	r2, #0
 801197e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f002 feab 	bl	80146dc <tcp_rexmit_rto>
      break;
 8011986:	e20d      	b.n	8011da4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011988:	4b86      	ldr	r3, [pc, #536]	; (8011ba4 <tcp_process+0x5a4>)
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	f003 0310 	and.w	r3, r3, #16
 8011990:	2b00      	cmp	r3, #0
 8011992:	f000 80a1 	beq.w	8011ad8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011996:	4b84      	ldr	r3, [pc, #528]	; (8011ba8 <tcp_process+0x5a8>)
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801199e:	1ad3      	subs	r3, r2, r3
 80119a0:	3b01      	subs	r3, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	db7e      	blt.n	8011aa4 <tcp_process+0x4a4>
 80119a6:	4b80      	ldr	r3, [pc, #512]	; (8011ba8 <tcp_process+0x5a8>)
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119ae:	1ad3      	subs	r3, r2, r3
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	dc77      	bgt.n	8011aa4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2204      	movs	r2, #4
 80119b8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d102      	bne.n	80119c8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80119c2:	23fa      	movs	r3, #250	; 0xfa
 80119c4:	76bb      	strb	r3, [r7, #26]
 80119c6:	e01d      	b.n	8011a04 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119cc:	699b      	ldr	r3, [r3, #24]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d106      	bne.n	80119e0 <tcp_process+0x3e0>
 80119d2:	4b7b      	ldr	r3, [pc, #492]	; (8011bc0 <tcp_process+0x5c0>)
 80119d4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80119d8:	497a      	ldr	r1, [pc, #488]	; (8011bc4 <tcp_process+0x5c4>)
 80119da:	487b      	ldr	r0, [pc, #492]	; (8011bc8 <tcp_process+0x5c8>)
 80119dc:	f008 fcf2 	bl	801a3c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119e4:	699b      	ldr	r3, [r3, #24]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d00a      	beq.n	8011a00 <tcp_process+0x400>
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119ee:	699b      	ldr	r3, [r3, #24]
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	6910      	ldr	r0, [r2, #16]
 80119f4:	2200      	movs	r2, #0
 80119f6:	6879      	ldr	r1, [r7, #4]
 80119f8:	4798      	blx	r3
 80119fa:	4603      	mov	r3, r0
 80119fc:	76bb      	strb	r3, [r7, #26]
 80119fe:	e001      	b.n	8011a04 <tcp_process+0x404>
 8011a00:	23f0      	movs	r3, #240	; 0xf0
 8011a02:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011a04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d00a      	beq.n	8011a22 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011a0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a10:	f113 0f0d 	cmn.w	r3, #13
 8011a14:	d002      	beq.n	8011a1c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f7fd fd04 	bl	800f424 <tcp_abort>
            }
            return ERR_ABRT;
 8011a1c:	f06f 030c 	mvn.w	r3, #12
 8011a20:	e1ce      	b.n	8011dc0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 fae0 	bl	8011fe8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011a28:	4b68      	ldr	r3, [pc, #416]	; (8011bcc <tcp_process+0x5cc>)
 8011a2a:	881b      	ldrh	r3, [r3, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d005      	beq.n	8011a3c <tcp_process+0x43c>
            recv_acked--;
 8011a30:	4b66      	ldr	r3, [pc, #408]	; (8011bcc <tcp_process+0x5cc>)
 8011a32:	881b      	ldrh	r3, [r3, #0]
 8011a34:	3b01      	subs	r3, #1
 8011a36:	b29a      	uxth	r2, r3
 8011a38:	4b64      	ldr	r3, [pc, #400]	; (8011bcc <tcp_process+0x5cc>)
 8011a3a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a40:	009a      	lsls	r2, r3, #2
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a46:	005b      	lsls	r3, r3, #1
 8011a48:	f241 111c 	movw	r1, #4380	; 0x111c
 8011a4c:	428b      	cmp	r3, r1
 8011a4e:	bf38      	it	cc
 8011a50:	460b      	movcc	r3, r1
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d204      	bcs.n	8011a60 <tcp_process+0x460>
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	e00d      	b.n	8011a7c <tcp_process+0x47c>
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a64:	005b      	lsls	r3, r3, #1
 8011a66:	f241 121c 	movw	r2, #4380	; 0x111c
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d904      	bls.n	8011a78 <tcp_process+0x478>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a72:	005b      	lsls	r3, r3, #1
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	e001      	b.n	8011a7c <tcp_process+0x47c>
 8011a78:	f241 131c 	movw	r3, #4380	; 0x111c
 8011a7c:	687a      	ldr	r2, [r7, #4]
 8011a7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011a82:	4b53      	ldr	r3, [pc, #332]	; (8011bd0 <tcp_process+0x5d0>)
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	f003 0320 	and.w	r3, r3, #32
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d037      	beq.n	8011afe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	8b5b      	ldrh	r3, [r3, #26]
 8011a92:	f043 0302 	orr.w	r3, r3, #2
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2207      	movs	r2, #7
 8011aa0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011aa2:	e02c      	b.n	8011afe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011aa4:	4b40      	ldr	r3, [pc, #256]	; (8011ba8 <tcp_process+0x5a8>)
 8011aa6:	6819      	ldr	r1, [r3, #0]
 8011aa8:	4b40      	ldr	r3, [pc, #256]	; (8011bac <tcp_process+0x5ac>)
 8011aaa:	881b      	ldrh	r3, [r3, #0]
 8011aac:	461a      	mov	r2, r3
 8011aae:	4b40      	ldr	r3, [pc, #256]	; (8011bb0 <tcp_process+0x5b0>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ab4:	4b3f      	ldr	r3, [pc, #252]	; (8011bb4 <tcp_process+0x5b4>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ab8:	885b      	ldrh	r3, [r3, #2]
 8011aba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011abc:	4a3d      	ldr	r2, [pc, #244]	; (8011bb4 <tcp_process+0x5b4>)
 8011abe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ac0:	8812      	ldrh	r2, [r2, #0]
 8011ac2:	b292      	uxth	r2, r2
 8011ac4:	9202      	str	r2, [sp, #8]
 8011ac6:	9301      	str	r3, [sp, #4]
 8011ac8:	4b3b      	ldr	r3, [pc, #236]	; (8011bb8 <tcp_process+0x5b8>)
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	4b3b      	ldr	r3, [pc, #236]	; (8011bbc <tcp_process+0x5bc>)
 8011ace:	4602      	mov	r2, r0
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f003 f837 	bl	8014b44 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011ad6:	e167      	b.n	8011da8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011ad8:	4b32      	ldr	r3, [pc, #200]	; (8011ba4 <tcp_process+0x5a4>)
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	f003 0302 	and.w	r3, r3, #2
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	f000 8161 	beq.w	8011da8 <tcp_process+0x7a8>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aea:	1e5a      	subs	r2, r3, #1
 8011aec:	4b30      	ldr	r3, [pc, #192]	; (8011bb0 <tcp_process+0x5b0>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	f040 8159 	bne.w	8011da8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f002 fe12 	bl	8014720 <tcp_rexmit>
      break;
 8011afc:	e154      	b.n	8011da8 <tcp_process+0x7a8>
 8011afe:	e153      	b.n	8011da8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f000 fa71 	bl	8011fe8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011b06:	4b32      	ldr	r3, [pc, #200]	; (8011bd0 <tcp_process+0x5d0>)
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	f003 0320 	and.w	r3, r3, #32
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f000 814c 	beq.w	8011dac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	8b5b      	ldrh	r3, [r3, #26]
 8011b18:	f043 0302 	orr.w	r3, r3, #2
 8011b1c:	b29a      	uxth	r2, r3
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2207      	movs	r2, #7
 8011b26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b28:	e140      	b.n	8011dac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f000 fa5c 	bl	8011fe8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011b30:	4b27      	ldr	r3, [pc, #156]	; (8011bd0 <tcp_process+0x5d0>)
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	f003 0320 	and.w	r3, r3, #32
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d071      	beq.n	8011c20 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b3c:	4b19      	ldr	r3, [pc, #100]	; (8011ba4 <tcp_process+0x5a4>)
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	f003 0310 	and.w	r3, r3, #16
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d060      	beq.n	8011c0a <tcp_process+0x60a>
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b4c:	4b16      	ldr	r3, [pc, #88]	; (8011ba8 <tcp_process+0x5a8>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d15a      	bne.n	8011c0a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d156      	bne.n	8011c0a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	8b5b      	ldrh	r3, [r3, #26]
 8011b60:	f043 0302 	orr.w	r3, r3, #2
 8011b64:	b29a      	uxth	r2, r3
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f7fe fdbe 	bl	80106ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011b70:	4b18      	ldr	r3, [pc, #96]	; (8011bd4 <tcp_process+0x5d4>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d105      	bne.n	8011b86 <tcp_process+0x586>
 8011b7a:	4b16      	ldr	r3, [pc, #88]	; (8011bd4 <tcp_process+0x5d4>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	4a14      	ldr	r2, [pc, #80]	; (8011bd4 <tcp_process+0x5d4>)
 8011b82:	6013      	str	r3, [r2, #0]
 8011b84:	e02e      	b.n	8011be4 <tcp_process+0x5e4>
 8011b86:	4b13      	ldr	r3, [pc, #76]	; (8011bd4 <tcp_process+0x5d4>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	617b      	str	r3, [r7, #20]
 8011b8c:	e027      	b.n	8011bde <tcp_process+0x5de>
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	68db      	ldr	r3, [r3, #12]
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d11f      	bne.n	8011bd8 <tcp_process+0x5d8>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	68da      	ldr	r2, [r3, #12]
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	60da      	str	r2, [r3, #12]
 8011ba0:	e020      	b.n	8011be4 <tcp_process+0x5e4>
 8011ba2:	bf00      	nop
 8011ba4:	20004be8 	.word	0x20004be8
 8011ba8:	20004be0 	.word	0x20004be0
 8011bac:	20004be6 	.word	0x20004be6
 8011bb0:	20004bdc 	.word	0x20004bdc
 8011bb4:	20004bcc 	.word	0x20004bcc
 8011bb8:	200083ac 	.word	0x200083ac
 8011bbc:	200083b0 	.word	0x200083b0
 8011bc0:	0801d5fc 	.word	0x0801d5fc
 8011bc4:	0801d89c 	.word	0x0801d89c
 8011bc8:	0801d648 	.word	0x0801d648
 8011bcc:	20004be4 	.word	0x20004be4
 8011bd0:	20004be9 	.word	0x20004be9
 8011bd4:	2000bad0 	.word	0x2000bad0
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	617b      	str	r3, [r7, #20]
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d1d4      	bne.n	8011b8e <tcp_process+0x58e>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	60da      	str	r2, [r3, #12]
 8011bea:	4b77      	ldr	r3, [pc, #476]	; (8011dc8 <tcp_process+0x7c8>)
 8011bec:	2201      	movs	r2, #1
 8011bee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	220a      	movs	r2, #10
 8011bf4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011bf6:	4b75      	ldr	r3, [pc, #468]	; (8011dcc <tcp_process+0x7cc>)
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	60da      	str	r2, [r3, #12]
 8011bfe:	4a73      	ldr	r2, [pc, #460]	; (8011dcc <tcp_process+0x7cc>)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6013      	str	r3, [r2, #0]
 8011c04:	f003 f960 	bl	8014ec8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011c08:	e0d2      	b.n	8011db0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	8b5b      	ldrh	r3, [r3, #26]
 8011c0e:	f043 0302 	orr.w	r3, r3, #2
 8011c12:	b29a      	uxth	r2, r3
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2208      	movs	r2, #8
 8011c1c:	751a      	strb	r2, [r3, #20]
      break;
 8011c1e:	e0c7      	b.n	8011db0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c20:	4b6b      	ldr	r3, [pc, #428]	; (8011dd0 <tcp_process+0x7d0>)
 8011c22:	781b      	ldrb	r3, [r3, #0]
 8011c24:	f003 0310 	and.w	r3, r3, #16
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	f000 80c1 	beq.w	8011db0 <tcp_process+0x7b0>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c32:	4b68      	ldr	r3, [pc, #416]	; (8011dd4 <tcp_process+0x7d4>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	429a      	cmp	r2, r3
 8011c38:	f040 80ba 	bne.w	8011db0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	f040 80b5 	bne.w	8011db0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2206      	movs	r2, #6
 8011c4a:	751a      	strb	r2, [r3, #20]
      break;
 8011c4c:	e0b0      	b.n	8011db0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f000 f9ca 	bl	8011fe8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011c54:	4b60      	ldr	r3, [pc, #384]	; (8011dd8 <tcp_process+0x7d8>)
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	f003 0320 	and.w	r3, r3, #32
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	f000 80a9 	beq.w	8011db4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	8b5b      	ldrh	r3, [r3, #26]
 8011c66:	f043 0302 	orr.w	r3, r3, #2
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7fe fd3b 	bl	80106ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011c76:	4b59      	ldr	r3, [pc, #356]	; (8011ddc <tcp_process+0x7dc>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	687a      	ldr	r2, [r7, #4]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d105      	bne.n	8011c8c <tcp_process+0x68c>
 8011c80:	4b56      	ldr	r3, [pc, #344]	; (8011ddc <tcp_process+0x7dc>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	68db      	ldr	r3, [r3, #12]
 8011c86:	4a55      	ldr	r2, [pc, #340]	; (8011ddc <tcp_process+0x7dc>)
 8011c88:	6013      	str	r3, [r2, #0]
 8011c8a:	e013      	b.n	8011cb4 <tcp_process+0x6b4>
 8011c8c:	4b53      	ldr	r3, [pc, #332]	; (8011ddc <tcp_process+0x7dc>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	613b      	str	r3, [r7, #16]
 8011c92:	e00c      	b.n	8011cae <tcp_process+0x6ae>
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d104      	bne.n	8011ca8 <tcp_process+0x6a8>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	68da      	ldr	r2, [r3, #12]
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	60da      	str	r2, [r3, #12]
 8011ca6:	e005      	b.n	8011cb4 <tcp_process+0x6b4>
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	68db      	ldr	r3, [r3, #12]
 8011cac:	613b      	str	r3, [r7, #16]
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d1ef      	bne.n	8011c94 <tcp_process+0x694>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	60da      	str	r2, [r3, #12]
 8011cba:	4b43      	ldr	r3, [pc, #268]	; (8011dc8 <tcp_process+0x7c8>)
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	220a      	movs	r2, #10
 8011cc4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011cc6:	4b41      	ldr	r3, [pc, #260]	; (8011dcc <tcp_process+0x7cc>)
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	60da      	str	r2, [r3, #12]
 8011cce:	4a3f      	ldr	r2, [pc, #252]	; (8011dcc <tcp_process+0x7cc>)
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6013      	str	r3, [r2, #0]
 8011cd4:	f003 f8f8 	bl	8014ec8 <tcp_timer_needed>
      }
      break;
 8011cd8:	e06c      	b.n	8011db4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 f984 	bl	8011fe8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011ce0:	4b3b      	ldr	r3, [pc, #236]	; (8011dd0 <tcp_process+0x7d0>)
 8011ce2:	781b      	ldrb	r3, [r3, #0]
 8011ce4:	f003 0310 	and.w	r3, r3, #16
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d065      	beq.n	8011db8 <tcp_process+0x7b8>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011cf0:	4b38      	ldr	r3, [pc, #224]	; (8011dd4 <tcp_process+0x7d4>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d15f      	bne.n	8011db8 <tcp_process+0x7b8>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d15b      	bne.n	8011db8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f7fe fcf3 	bl	80106ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011d06:	4b35      	ldr	r3, [pc, #212]	; (8011ddc <tcp_process+0x7dc>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d105      	bne.n	8011d1c <tcp_process+0x71c>
 8011d10:	4b32      	ldr	r3, [pc, #200]	; (8011ddc <tcp_process+0x7dc>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	68db      	ldr	r3, [r3, #12]
 8011d16:	4a31      	ldr	r2, [pc, #196]	; (8011ddc <tcp_process+0x7dc>)
 8011d18:	6013      	str	r3, [r2, #0]
 8011d1a:	e013      	b.n	8011d44 <tcp_process+0x744>
 8011d1c:	4b2f      	ldr	r3, [pc, #188]	; (8011ddc <tcp_process+0x7dc>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	60fb      	str	r3, [r7, #12]
 8011d22:	e00c      	b.n	8011d3e <tcp_process+0x73e>
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	687a      	ldr	r2, [r7, #4]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d104      	bne.n	8011d38 <tcp_process+0x738>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	68da      	ldr	r2, [r3, #12]
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	60da      	str	r2, [r3, #12]
 8011d36:	e005      	b.n	8011d44 <tcp_process+0x744>
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	68db      	ldr	r3, [r3, #12]
 8011d3c:	60fb      	str	r3, [r7, #12]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d1ef      	bne.n	8011d24 <tcp_process+0x724>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	60da      	str	r2, [r3, #12]
 8011d4a:	4b1f      	ldr	r3, [pc, #124]	; (8011dc8 <tcp_process+0x7c8>)
 8011d4c:	2201      	movs	r2, #1
 8011d4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	220a      	movs	r2, #10
 8011d54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011d56:	4b1d      	ldr	r3, [pc, #116]	; (8011dcc <tcp_process+0x7cc>)
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	60da      	str	r2, [r3, #12]
 8011d5e:	4a1b      	ldr	r2, [pc, #108]	; (8011dcc <tcp_process+0x7cc>)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6013      	str	r3, [r2, #0]
 8011d64:	f003 f8b0 	bl	8014ec8 <tcp_timer_needed>
      }
      break;
 8011d68:	e026      	b.n	8011db8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 f93c 	bl	8011fe8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011d70:	4b17      	ldr	r3, [pc, #92]	; (8011dd0 <tcp_process+0x7d0>)
 8011d72:	781b      	ldrb	r3, [r3, #0]
 8011d74:	f003 0310 	and.w	r3, r3, #16
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d01f      	beq.n	8011dbc <tcp_process+0x7bc>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d80:	4b14      	ldr	r3, [pc, #80]	; (8011dd4 <tcp_process+0x7d4>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d119      	bne.n	8011dbc <tcp_process+0x7bc>
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d115      	bne.n	8011dbc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011d90:	4b11      	ldr	r3, [pc, #68]	; (8011dd8 <tcp_process+0x7d8>)
 8011d92:	781b      	ldrb	r3, [r3, #0]
 8011d94:	f043 0310 	orr.w	r3, r3, #16
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	4b0f      	ldr	r3, [pc, #60]	; (8011dd8 <tcp_process+0x7d8>)
 8011d9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011d9e:	e00d      	b.n	8011dbc <tcp_process+0x7bc>
    default:
      break;
 8011da0:	bf00      	nop
 8011da2:	e00c      	b.n	8011dbe <tcp_process+0x7be>
      break;
 8011da4:	bf00      	nop
 8011da6:	e00a      	b.n	8011dbe <tcp_process+0x7be>
      break;
 8011da8:	bf00      	nop
 8011daa:	e008      	b.n	8011dbe <tcp_process+0x7be>
      break;
 8011dac:	bf00      	nop
 8011dae:	e006      	b.n	8011dbe <tcp_process+0x7be>
      break;
 8011db0:	bf00      	nop
 8011db2:	e004      	b.n	8011dbe <tcp_process+0x7be>
      break;
 8011db4:	bf00      	nop
 8011db6:	e002      	b.n	8011dbe <tcp_process+0x7be>
      break;
 8011db8:	bf00      	nop
 8011dba:	e000      	b.n	8011dbe <tcp_process+0x7be>
      break;
 8011dbc:	bf00      	nop
  }
  return ERR_OK;
 8011dbe:	2300      	movs	r3, #0
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3724      	adds	r7, #36	; 0x24
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd90      	pop	{r4, r7, pc}
 8011dc8:	2000bacc 	.word	0x2000bacc
 8011dcc:	2000bae0 	.word	0x2000bae0
 8011dd0:	20004be8 	.word	0x20004be8
 8011dd4:	20004be0 	.word	0x20004be0
 8011dd8:	20004be9 	.word	0x20004be9
 8011ddc:	2000bad0 	.word	0x2000bad0

08011de0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011de0:	b590      	push	{r4, r7, lr}
 8011de2:	b085      	sub	sp, #20
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d106      	bne.n	8011dfe <tcp_oos_insert_segment+0x1e>
 8011df0:	4b3b      	ldr	r3, [pc, #236]	; (8011ee0 <tcp_oos_insert_segment+0x100>)
 8011df2:	f240 421f 	movw	r2, #1055	; 0x41f
 8011df6:	493b      	ldr	r1, [pc, #236]	; (8011ee4 <tcp_oos_insert_segment+0x104>)
 8011df8:	483b      	ldr	r0, [pc, #236]	; (8011ee8 <tcp_oos_insert_segment+0x108>)
 8011dfa:	f008 fae3 	bl	801a3c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	899b      	ldrh	r3, [r3, #12]
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fb f92a 	bl	800d060 <lwip_htons>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	b2db      	uxtb	r3, r3
 8011e10:	f003 0301 	and.w	r3, r3, #1
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d028      	beq.n	8011e6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011e18:	6838      	ldr	r0, [r7, #0]
 8011e1a:	f7fe f999 	bl	8010150 <tcp_segs_free>
    next = NULL;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	603b      	str	r3, [r7, #0]
 8011e22:	e056      	b.n	8011ed2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	899b      	ldrh	r3, [r3, #12]
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7fb f917 	bl	800d060 <lwip_htons>
 8011e32:	4603      	mov	r3, r0
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	f003 0301 	and.w	r3, r3, #1
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d00d      	beq.n	8011e5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	899b      	ldrh	r3, [r3, #12]
 8011e44:	b29c      	uxth	r4, r3
 8011e46:	2001      	movs	r0, #1
 8011e48:	f7fb f90a 	bl	800d060 <lwip_htons>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	461a      	mov	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	4322      	orrs	r2, r4
 8011e56:	b292      	uxth	r2, r2
 8011e58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f7fe f987 	bl	8010178 <tcp_seg_free>
    while (next &&
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d00e      	beq.n	8011e8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	891b      	ldrh	r3, [r3, #8]
 8011e74:	461a      	mov	r2, r3
 8011e76:	4b1d      	ldr	r3, [pc, #116]	; (8011eec <tcp_oos_insert_segment+0x10c>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	441a      	add	r2, r3
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	68db      	ldr	r3, [r3, #12]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	6839      	ldr	r1, [r7, #0]
 8011e84:	8909      	ldrh	r1, [r1, #8]
 8011e86:	440b      	add	r3, r1
 8011e88:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	daca      	bge.n	8011e24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d01e      	beq.n	8011ed2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	891b      	ldrh	r3, [r3, #8]
 8011e98:	461a      	mov	r2, r3
 8011e9a:	4b14      	ldr	r3, [pc, #80]	; (8011eec <tcp_oos_insert_segment+0x10c>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	441a      	add	r2, r3
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	dd12      	ble.n	8011ed2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	4b0d      	ldr	r3, [pc, #52]	; (8011eec <tcp_oos_insert_segment+0x10c>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	1ad3      	subs	r3, r2, r3
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	685a      	ldr	r2, [r3, #4]
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	891b      	ldrh	r3, [r3, #8]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	4610      	mov	r0, r2
 8011ece:	f7fc fb2d 	bl	800e52c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	683a      	ldr	r2, [r7, #0]
 8011ed6:	601a      	str	r2, [r3, #0]
}
 8011ed8:	bf00      	nop
 8011eda:	3714      	adds	r7, #20
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd90      	pop	{r4, r7, pc}
 8011ee0:	0801d5fc 	.word	0x0801d5fc
 8011ee4:	0801d8bc 	.word	0x0801d8bc
 8011ee8:	0801d648 	.word	0x0801d648
 8011eec:	20004bdc 	.word	0x20004bdc

08011ef0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011ef0:	b5b0      	push	{r4, r5, r7, lr}
 8011ef2:	b086      	sub	sp, #24
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	607a      	str	r2, [r7, #4]
 8011efc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011efe:	e03e      	b.n	8011f7e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7fc fd20 	bl	800e954 <pbuf_clen>
 8011f14:	4603      	mov	r3, r0
 8011f16:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f1e:	8a7a      	ldrh	r2, [r7, #18]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d906      	bls.n	8011f32 <tcp_free_acked_segments+0x42>
 8011f24:	4b2a      	ldr	r3, [pc, #168]	; (8011fd0 <tcp_free_acked_segments+0xe0>)
 8011f26:	f240 4257 	movw	r2, #1111	; 0x457
 8011f2a:	492a      	ldr	r1, [pc, #168]	; (8011fd4 <tcp_free_acked_segments+0xe4>)
 8011f2c:	482a      	ldr	r0, [pc, #168]	; (8011fd8 <tcp_free_acked_segments+0xe8>)
 8011f2e:	f008 fa49 	bl	801a3c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011f38:	8a7b      	ldrh	r3, [r7, #18]
 8011f3a:	1ad3      	subs	r3, r2, r3
 8011f3c:	b29a      	uxth	r2, r3
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	891a      	ldrh	r2, [r3, #8]
 8011f48:	4b24      	ldr	r3, [pc, #144]	; (8011fdc <tcp_free_acked_segments+0xec>)
 8011f4a:	881b      	ldrh	r3, [r3, #0]
 8011f4c:	4413      	add	r3, r2
 8011f4e:	b29a      	uxth	r2, r3
 8011f50:	4b22      	ldr	r3, [pc, #136]	; (8011fdc <tcp_free_acked_segments+0xec>)
 8011f52:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011f54:	6978      	ldr	r0, [r7, #20]
 8011f56:	f7fe f90f 	bl	8010178 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d00c      	beq.n	8011f7e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d109      	bne.n	8011f7e <tcp_free_acked_segments+0x8e>
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d106      	bne.n	8011f7e <tcp_free_acked_segments+0x8e>
 8011f70:	4b17      	ldr	r3, [pc, #92]	; (8011fd0 <tcp_free_acked_segments+0xe0>)
 8011f72:	f240 4262 	movw	r2, #1122	; 0x462
 8011f76:	491a      	ldr	r1, [pc, #104]	; (8011fe0 <tcp_free_acked_segments+0xf0>)
 8011f78:	4817      	ldr	r0, [pc, #92]	; (8011fd8 <tcp_free_acked_segments+0xe8>)
 8011f7a:	f008 fa23 	bl	801a3c4 <iprintf>
  while (seg_list != NULL &&
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d020      	beq.n	8011fc6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	685b      	ldr	r3, [r3, #4]
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7fb f87d 	bl	800d08a <lwip_htonl>
 8011f90:	4604      	mov	r4, r0
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	891b      	ldrh	r3, [r3, #8]
 8011f96:	461d      	mov	r5, r3
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	899b      	ldrh	r3, [r3, #12]
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7fb f85d 	bl	800d060 <lwip_htons>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	f003 0303 	and.w	r3, r3, #3
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d001      	beq.n	8011fb6 <tcp_free_acked_segments+0xc6>
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	e000      	b.n	8011fb8 <tcp_free_acked_segments+0xc8>
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	442b      	add	r3, r5
 8011fba:	18e2      	adds	r2, r4, r3
 8011fbc:	4b09      	ldr	r3, [pc, #36]	; (8011fe4 <tcp_free_acked_segments+0xf4>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	dd9c      	ble.n	8011f00 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011fc6:	68bb      	ldr	r3, [r7, #8]
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3718      	adds	r7, #24
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bdb0      	pop	{r4, r5, r7, pc}
 8011fd0:	0801d5fc 	.word	0x0801d5fc
 8011fd4:	0801d8e4 	.word	0x0801d8e4
 8011fd8:	0801d648 	.word	0x0801d648
 8011fdc:	20004be4 	.word	0x20004be4
 8011fe0:	0801d90c 	.word	0x0801d90c
 8011fe4:	20004be0 	.word	0x20004be0

08011fe8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011fe8:	b5b0      	push	{r4, r5, r7, lr}
 8011fea:	b094      	sub	sp, #80	; 0x50
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d106      	bne.n	8012008 <tcp_receive+0x20>
 8011ffa:	4ba6      	ldr	r3, [pc, #664]	; (8012294 <tcp_receive+0x2ac>)
 8011ffc:	f240 427b 	movw	r2, #1147	; 0x47b
 8012000:	49a5      	ldr	r1, [pc, #660]	; (8012298 <tcp_receive+0x2b0>)
 8012002:	48a6      	ldr	r0, [pc, #664]	; (801229c <tcp_receive+0x2b4>)
 8012004:	f008 f9de 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	7d1b      	ldrb	r3, [r3, #20]
 801200c:	2b03      	cmp	r3, #3
 801200e:	d806      	bhi.n	801201e <tcp_receive+0x36>
 8012010:	4ba0      	ldr	r3, [pc, #640]	; (8012294 <tcp_receive+0x2ac>)
 8012012:	f240 427c 	movw	r2, #1148	; 0x47c
 8012016:	49a2      	ldr	r1, [pc, #648]	; (80122a0 <tcp_receive+0x2b8>)
 8012018:	48a0      	ldr	r0, [pc, #640]	; (801229c <tcp_receive+0x2b4>)
 801201a:	f008 f9d3 	bl	801a3c4 <iprintf>

  if (flags & TCP_ACK) {
 801201e:	4ba1      	ldr	r3, [pc, #644]	; (80122a4 <tcp_receive+0x2bc>)
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	f003 0310 	and.w	r3, r3, #16
 8012026:	2b00      	cmp	r3, #0
 8012028:	f000 8263 	beq.w	80124f2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012032:	461a      	mov	r2, r3
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012038:	4413      	add	r3, r2
 801203a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012040:	4b99      	ldr	r3, [pc, #612]	; (80122a8 <tcp_receive+0x2c0>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	1ad3      	subs	r3, r2, r3
 8012046:	2b00      	cmp	r3, #0
 8012048:	db1b      	blt.n	8012082 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801204e:	4b96      	ldr	r3, [pc, #600]	; (80122a8 <tcp_receive+0x2c0>)
 8012050:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012052:	429a      	cmp	r2, r3
 8012054:	d106      	bne.n	8012064 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801205a:	4b94      	ldr	r3, [pc, #592]	; (80122ac <tcp_receive+0x2c4>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	1ad3      	subs	r3, r2, r3
 8012060:	2b00      	cmp	r3, #0
 8012062:	db0e      	blt.n	8012082 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012068:	4b90      	ldr	r3, [pc, #576]	; (80122ac <tcp_receive+0x2c4>)
 801206a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801206c:	429a      	cmp	r2, r3
 801206e:	d125      	bne.n	80120bc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012070:	4b8f      	ldr	r3, [pc, #572]	; (80122b0 <tcp_receive+0x2c8>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	89db      	ldrh	r3, [r3, #14]
 8012076:	b29a      	uxth	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801207e:	429a      	cmp	r2, r3
 8012080:	d91c      	bls.n	80120bc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012082:	4b8b      	ldr	r3, [pc, #556]	; (80122b0 <tcp_receive+0x2c8>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	89db      	ldrh	r3, [r3, #14]
 8012088:	b29a      	uxth	r2, r3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801209c:	429a      	cmp	r2, r3
 801209e:	d205      	bcs.n	80120ac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80120ac:	4b7e      	ldr	r3, [pc, #504]	; (80122a8 <tcp_receive+0x2c0>)
 80120ae:	681a      	ldr	r2, [r3, #0]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80120b4:	4b7d      	ldr	r3, [pc, #500]	; (80122ac <tcp_receive+0x2c4>)
 80120b6:	681a      	ldr	r2, [r3, #0]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80120bc:	4b7b      	ldr	r3, [pc, #492]	; (80122ac <tcp_receive+0x2c4>)
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120c4:	1ad3      	subs	r3, r2, r3
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	dc58      	bgt.n	801217c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80120ca:	4b7a      	ldr	r3, [pc, #488]	; (80122b4 <tcp_receive+0x2cc>)
 80120cc:	881b      	ldrh	r3, [r3, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d14b      	bne.n	801216a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120d6:	687a      	ldr	r2, [r7, #4]
 80120d8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80120dc:	4413      	add	r3, r2
 80120de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d142      	bne.n	801216a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	db3d      	blt.n	801216a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120f2:	4b6e      	ldr	r3, [pc, #440]	; (80122ac <tcp_receive+0x2c4>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d137      	bne.n	801216a <tcp_receive+0x182>
              found_dupack = 1;
 80120fa:	2301      	movs	r3, #1
 80120fc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012104:	2bff      	cmp	r3, #255	; 0xff
 8012106:	d007      	beq.n	8012118 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801210e:	3301      	adds	r3, #1
 8012110:	b2da      	uxtb	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801211e:	2b03      	cmp	r3, #3
 8012120:	d91b      	bls.n	801215a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801212c:	4413      	add	r3, r2
 801212e:	b29a      	uxth	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012136:	429a      	cmp	r2, r3
 8012138:	d30a      	bcc.n	8012150 <tcp_receive+0x168>
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012144:	4413      	add	r3, r2
 8012146:	b29a      	uxth	r2, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801214e:	e004      	b.n	801215a <tcp_receive+0x172>
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012156:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012160:	2b02      	cmp	r3, #2
 8012162:	d902      	bls.n	801216a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f002 fb47 	bl	80147f8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801216a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801216c:	2b00      	cmp	r3, #0
 801216e:	f040 8160 	bne.w	8012432 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801217a:	e15a      	b.n	8012432 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801217c:	4b4b      	ldr	r3, [pc, #300]	; (80122ac <tcp_receive+0x2c4>)
 801217e:	681a      	ldr	r2, [r3, #0]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012184:	1ad3      	subs	r3, r2, r3
 8012186:	3b01      	subs	r3, #1
 8012188:	2b00      	cmp	r3, #0
 801218a:	f2c0 814d 	blt.w	8012428 <tcp_receive+0x440>
 801218e:	4b47      	ldr	r3, [pc, #284]	; (80122ac <tcp_receive+0x2c4>)
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012196:	1ad3      	subs	r3, r2, r3
 8012198:	2b00      	cmp	r3, #0
 801219a:	f300 8145 	bgt.w	8012428 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	8b5b      	ldrh	r3, [r3, #26]
 80121a2:	f003 0304 	and.w	r3, r3, #4
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d010      	beq.n	80121cc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	8b5b      	ldrh	r3, [r3, #26]
 80121ae:	f023 0304 	bic.w	r3, r3, #4
 80121b2:	b29a      	uxth	r2, r3
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2200      	movs	r2, #0
 80121d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121da:	10db      	asrs	r3, r3, #3
 80121dc:	b21b      	sxth	r3, r3
 80121de:	b29a      	uxth	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	4413      	add	r3, r2
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	b21a      	sxth	r2, r3
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80121f4:	4b2d      	ldr	r3, [pc, #180]	; (80122ac <tcp_receive+0x2c4>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	b29a      	uxth	r2, r3
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121fe:	b29b      	uxth	r3, r3
 8012200:	1ad3      	subs	r3, r2, r3
 8012202:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2200      	movs	r2, #0
 8012208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801220c:	4b27      	ldr	r3, [pc, #156]	; (80122ac <tcp_receive+0x2c4>)
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	7d1b      	ldrb	r3, [r3, #20]
 8012218:	2b03      	cmp	r3, #3
 801221a:	f240 8096 	bls.w	801234a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801222a:	429a      	cmp	r2, r3
 801222c:	d244      	bcs.n	80122b8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	8b5b      	ldrh	r3, [r3, #26]
 8012232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012236:	2b00      	cmp	r3, #0
 8012238:	d001      	beq.n	801223e <tcp_receive+0x256>
 801223a:	2301      	movs	r3, #1
 801223c:	e000      	b.n	8012240 <tcp_receive+0x258>
 801223e:	2302      	movs	r3, #2
 8012240:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012244:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012248:	b29a      	uxth	r2, r3
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801224e:	fb12 f303 	smulbb	r3, r2, r3
 8012252:	b29b      	uxth	r3, r3
 8012254:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012256:	4293      	cmp	r3, r2
 8012258:	bf28      	it	cs
 801225a:	4613      	movcs	r3, r2
 801225c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012264:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012266:	4413      	add	r3, r2
 8012268:	b29a      	uxth	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012270:	429a      	cmp	r2, r3
 8012272:	d309      	bcc.n	8012288 <tcp_receive+0x2a0>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801227a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801227c:	4413      	add	r3, r2
 801227e:	b29a      	uxth	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012286:	e060      	b.n	801234a <tcp_receive+0x362>
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801228e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012292:	e05a      	b.n	801234a <tcp_receive+0x362>
 8012294:	0801d5fc 	.word	0x0801d5fc
 8012298:	0801d92c 	.word	0x0801d92c
 801229c:	0801d648 	.word	0x0801d648
 80122a0:	0801d948 	.word	0x0801d948
 80122a4:	20004be8 	.word	0x20004be8
 80122a8:	20004bdc 	.word	0x20004bdc
 80122ac:	20004be0 	.word	0x20004be0
 80122b0:	20004bcc 	.word	0x20004bcc
 80122b4:	20004be6 	.word	0x20004be6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80122be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80122c0:	4413      	add	r3, r2
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d309      	bcc.n	80122e2 <tcp_receive+0x2fa>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80122d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80122d6:	4413      	add	r3, r2
 80122d8:	b29a      	uxth	r2, r3
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80122e0:	e004      	b.n	80122ec <tcp_receive+0x304>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d326      	bcc.n	801234a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012308:	1ad3      	subs	r3, r2, r3
 801230a:	b29a      	uxth	r2, r3
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801231c:	4413      	add	r3, r2
 801231e:	b29a      	uxth	r2, r3
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012326:	429a      	cmp	r2, r3
 8012328:	d30a      	bcc.n	8012340 <tcp_receive+0x358>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012334:	4413      	add	r3, r2
 8012336:	b29a      	uxth	r2, r3
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801233e:	e004      	b.n	801234a <tcp_receive+0x362>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012346:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012352:	4a98      	ldr	r2, [pc, #608]	; (80125b4 <tcp_receive+0x5cc>)
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7ff fdcb 	bl	8011ef0 <tcp_free_acked_segments>
 801235a:	4602      	mov	r2, r0
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012368:	4a93      	ldr	r2, [pc, #588]	; (80125b8 <tcp_receive+0x5d0>)
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f7ff fdc0 	bl	8011ef0 <tcp_free_acked_segments>
 8012370:	4602      	mov	r2, r0
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801237a:	2b00      	cmp	r3, #0
 801237c:	d104      	bne.n	8012388 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012384:	861a      	strh	r2, [r3, #48]	; 0x30
 8012386:	e002      	b.n	801238e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2200      	movs	r2, #0
 801238c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012398:	2b00      	cmp	r3, #0
 801239a:	d103      	bne.n	80123a4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80123aa:	4b84      	ldr	r3, [pc, #528]	; (80125bc <tcp_receive+0x5d4>)
 80123ac:	881b      	ldrh	r3, [r3, #0]
 80123ae:	4413      	add	r3, r2
 80123b0:	b29a      	uxth	r2, r3
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	8b5b      	ldrh	r3, [r3, #26]
 80123bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d035      	beq.n	8012430 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d118      	bne.n	80123fe <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d00c      	beq.n	80123ee <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	685b      	ldr	r3, [r3, #4]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7fa fe52 	bl	800d08a <lwip_htonl>
 80123e6:	4603      	mov	r3, r0
 80123e8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	dc20      	bgt.n	8012430 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	8b5b      	ldrh	r3, [r3, #26]
 80123f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80123f6:	b29a      	uxth	r2, r3
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123fc:	e018      	b.n	8012430 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	4618      	mov	r0, r3
 801240c:	f7fa fe3d 	bl	800d08a <lwip_htonl>
 8012410:	4603      	mov	r3, r0
 8012412:	1ae3      	subs	r3, r4, r3
 8012414:	2b00      	cmp	r3, #0
 8012416:	dc0b      	bgt.n	8012430 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	8b5b      	ldrh	r3, [r3, #26]
 801241c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012420:	b29a      	uxth	r2, r3
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012426:	e003      	b.n	8012430 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f002 fbdd 	bl	8014be8 <tcp_send_empty_ack>
 801242e:	e000      	b.n	8012432 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012430:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012436:	2b00      	cmp	r3, #0
 8012438:	d05b      	beq.n	80124f2 <tcp_receive+0x50a>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801243e:	4b60      	ldr	r3, [pc, #384]	; (80125c0 <tcp_receive+0x5d8>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	1ad3      	subs	r3, r2, r3
 8012444:	2b00      	cmp	r3, #0
 8012446:	da54      	bge.n	80124f2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012448:	4b5e      	ldr	r3, [pc, #376]	; (80125c4 <tcp_receive+0x5dc>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	b29a      	uxth	r2, r3
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012452:	b29b      	uxth	r3, r3
 8012454:	1ad3      	subs	r3, r2, r3
 8012456:	b29b      	uxth	r3, r3
 8012458:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801245c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012466:	10db      	asrs	r3, r3, #3
 8012468:	b21b      	sxth	r3, r3
 801246a:	b29b      	uxth	r3, r3
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	b29b      	uxth	r3, r3
 8012470:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801247a:	b29a      	uxth	r2, r3
 801247c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012480:	4413      	add	r3, r2
 8012482:	b29b      	uxth	r3, r3
 8012484:	b21a      	sxth	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801248a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801248e:	2b00      	cmp	r3, #0
 8012490:	da05      	bge.n	801249e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012492:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012496:	425b      	negs	r3, r3
 8012498:	b29b      	uxth	r3, r3
 801249a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801249e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80124a8:	109b      	asrs	r3, r3, #2
 80124aa:	b21b      	sxth	r3, r3
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	1ad3      	subs	r3, r2, r3
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80124bc:	b29a      	uxth	r2, r3
 80124be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124c2:	4413      	add	r3, r2
 80124c4:	b29b      	uxth	r3, r3
 80124c6:	b21a      	sxth	r2, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80124d2:	10db      	asrs	r3, r3, #3
 80124d4:	b21b      	sxth	r3, r3
 80124d6:	b29a      	uxth	r2, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80124de:	b29b      	uxth	r3, r3
 80124e0:	4413      	add	r3, r2
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	b21a      	sxth	r2, r3
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2200      	movs	r2, #0
 80124f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80124f2:	4b35      	ldr	r3, [pc, #212]	; (80125c8 <tcp_receive+0x5e0>)
 80124f4:	881b      	ldrh	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	f000 84e1 	beq.w	8012ebe <tcp_receive+0xed6>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	7d1b      	ldrb	r3, [r3, #20]
 8012500:	2b06      	cmp	r3, #6
 8012502:	f200 84dc 	bhi.w	8012ebe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801250a:	4b30      	ldr	r3, [pc, #192]	; (80125cc <tcp_receive+0x5e4>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	3b01      	subs	r3, #1
 8012512:	2b00      	cmp	r3, #0
 8012514:	f2c0 808e 	blt.w	8012634 <tcp_receive+0x64c>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801251c:	4b2a      	ldr	r3, [pc, #168]	; (80125c8 <tcp_receive+0x5e0>)
 801251e:	881b      	ldrh	r3, [r3, #0]
 8012520:	4619      	mov	r1, r3
 8012522:	4b2a      	ldr	r3, [pc, #168]	; (80125cc <tcp_receive+0x5e4>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	440b      	add	r3, r1
 8012528:	1ad3      	subs	r3, r2, r3
 801252a:	3301      	adds	r3, #1
 801252c:	2b00      	cmp	r3, #0
 801252e:	f300 8081 	bgt.w	8012634 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012532:	4b27      	ldr	r3, [pc, #156]	; (80125d0 <tcp_receive+0x5e8>)
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801253c:	4b23      	ldr	r3, [pc, #140]	; (80125cc <tcp_receive+0x5e4>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	1ad3      	subs	r3, r2, r3
 8012542:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012544:	4b22      	ldr	r3, [pc, #136]	; (80125d0 <tcp_receive+0x5e8>)
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d106      	bne.n	801255a <tcp_receive+0x572>
 801254c:	4b21      	ldr	r3, [pc, #132]	; (80125d4 <tcp_receive+0x5ec>)
 801254e:	f240 5294 	movw	r2, #1428	; 0x594
 8012552:	4921      	ldr	r1, [pc, #132]	; (80125d8 <tcp_receive+0x5f0>)
 8012554:	4821      	ldr	r0, [pc, #132]	; (80125dc <tcp_receive+0x5f4>)
 8012556:	f007 ff35 	bl	801a3c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012560:	4293      	cmp	r3, r2
 8012562:	d906      	bls.n	8012572 <tcp_receive+0x58a>
 8012564:	4b1b      	ldr	r3, [pc, #108]	; (80125d4 <tcp_receive+0x5ec>)
 8012566:	f240 5295 	movw	r2, #1429	; 0x595
 801256a:	491d      	ldr	r1, [pc, #116]	; (80125e0 <tcp_receive+0x5f8>)
 801256c:	481b      	ldr	r0, [pc, #108]	; (80125dc <tcp_receive+0x5f4>)
 801256e:	f007 ff29 	bl	801a3c4 <iprintf>
      off = (u16_t)off32;
 8012572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012574:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012578:	4b15      	ldr	r3, [pc, #84]	; (80125d0 <tcp_receive+0x5e8>)
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	891b      	ldrh	r3, [r3, #8]
 801257e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012582:	429a      	cmp	r2, r3
 8012584:	d906      	bls.n	8012594 <tcp_receive+0x5ac>
 8012586:	4b13      	ldr	r3, [pc, #76]	; (80125d4 <tcp_receive+0x5ec>)
 8012588:	f240 5297 	movw	r2, #1431	; 0x597
 801258c:	4915      	ldr	r1, [pc, #84]	; (80125e4 <tcp_receive+0x5fc>)
 801258e:	4813      	ldr	r0, [pc, #76]	; (80125dc <tcp_receive+0x5f4>)
 8012590:	f007 ff18 	bl	801a3c4 <iprintf>
      inseg.len -= off;
 8012594:	4b0e      	ldr	r3, [pc, #56]	; (80125d0 <tcp_receive+0x5e8>)
 8012596:	891a      	ldrh	r2, [r3, #8]
 8012598:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801259c:	1ad3      	subs	r3, r2, r3
 801259e:	b29a      	uxth	r2, r3
 80125a0:	4b0b      	ldr	r3, [pc, #44]	; (80125d0 <tcp_receive+0x5e8>)
 80125a2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80125a4:	4b0a      	ldr	r3, [pc, #40]	; (80125d0 <tcp_receive+0x5e8>)
 80125a6:	685b      	ldr	r3, [r3, #4]
 80125a8:	891a      	ldrh	r2, [r3, #8]
 80125aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80125b2:	e029      	b.n	8012608 <tcp_receive+0x620>
 80125b4:	0801d964 	.word	0x0801d964
 80125b8:	0801d96c 	.word	0x0801d96c
 80125bc:	20004be4 	.word	0x20004be4
 80125c0:	20004be0 	.word	0x20004be0
 80125c4:	2000bad4 	.word	0x2000bad4
 80125c8:	20004be6 	.word	0x20004be6
 80125cc:	20004bdc 	.word	0x20004bdc
 80125d0:	20004bbc 	.word	0x20004bbc
 80125d4:	0801d5fc 	.word	0x0801d5fc
 80125d8:	0801d974 	.word	0x0801d974
 80125dc:	0801d648 	.word	0x0801d648
 80125e0:	0801d984 	.word	0x0801d984
 80125e4:	0801d994 	.word	0x0801d994
        off -= p->len;
 80125e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125ea:	895b      	ldrh	r3, [r3, #10]
 80125ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125f0:	1ad3      	subs	r3, r2, r3
 80125f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80125f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80125fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80125fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125fe:	2200      	movs	r2, #0
 8012600:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801260a:	895b      	ldrh	r3, [r3, #10]
 801260c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012610:	429a      	cmp	r2, r3
 8012612:	d8e9      	bhi.n	80125e8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012614:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012618:	4619      	mov	r1, r3
 801261a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801261c:	f7fc f886 	bl	800e72c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012624:	4a91      	ldr	r2, [pc, #580]	; (801286c <tcp_receive+0x884>)
 8012626:	6013      	str	r3, [r2, #0]
 8012628:	4b91      	ldr	r3, [pc, #580]	; (8012870 <tcp_receive+0x888>)
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	4a8f      	ldr	r2, [pc, #572]	; (801286c <tcp_receive+0x884>)
 801262e:	6812      	ldr	r2, [r2, #0]
 8012630:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012632:	e00d      	b.n	8012650 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012634:	4b8d      	ldr	r3, [pc, #564]	; (801286c <tcp_receive+0x884>)
 8012636:	681a      	ldr	r2, [r3, #0]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801263c:	1ad3      	subs	r3, r2, r3
 801263e:	2b00      	cmp	r3, #0
 8012640:	da06      	bge.n	8012650 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	8b5b      	ldrh	r3, [r3, #26]
 8012646:	f043 0302 	orr.w	r3, r3, #2
 801264a:	b29a      	uxth	r2, r3
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012650:	4b86      	ldr	r3, [pc, #536]	; (801286c <tcp_receive+0x884>)
 8012652:	681a      	ldr	r2, [r3, #0]
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012658:	1ad3      	subs	r3, r2, r3
 801265a:	2b00      	cmp	r3, #0
 801265c:	f2c0 842a 	blt.w	8012eb4 <tcp_receive+0xecc>
 8012660:	4b82      	ldr	r3, [pc, #520]	; (801286c <tcp_receive+0x884>)
 8012662:	681a      	ldr	r2, [r3, #0]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012668:	6879      	ldr	r1, [r7, #4]
 801266a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801266c:	440b      	add	r3, r1
 801266e:	1ad3      	subs	r3, r2, r3
 8012670:	3301      	adds	r3, #1
 8012672:	2b00      	cmp	r3, #0
 8012674:	f300 841e 	bgt.w	8012eb4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801267c:	4b7b      	ldr	r3, [pc, #492]	; (801286c <tcp_receive+0x884>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	429a      	cmp	r2, r3
 8012682:	f040 829a 	bne.w	8012bba <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012686:	4b7a      	ldr	r3, [pc, #488]	; (8012870 <tcp_receive+0x888>)
 8012688:	891c      	ldrh	r4, [r3, #8]
 801268a:	4b79      	ldr	r3, [pc, #484]	; (8012870 <tcp_receive+0x888>)
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	899b      	ldrh	r3, [r3, #12]
 8012690:	b29b      	uxth	r3, r3
 8012692:	4618      	mov	r0, r3
 8012694:	f7fa fce4 	bl	800d060 <lwip_htons>
 8012698:	4603      	mov	r3, r0
 801269a:	b2db      	uxtb	r3, r3
 801269c:	f003 0303 	and.w	r3, r3, #3
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d001      	beq.n	80126a8 <tcp_receive+0x6c0>
 80126a4:	2301      	movs	r3, #1
 80126a6:	e000      	b.n	80126aa <tcp_receive+0x6c2>
 80126a8:	2300      	movs	r3, #0
 80126aa:	4423      	add	r3, r4
 80126ac:	b29a      	uxth	r2, r3
 80126ae:	4b71      	ldr	r3, [pc, #452]	; (8012874 <tcp_receive+0x88c>)
 80126b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80126b6:	4b6f      	ldr	r3, [pc, #444]	; (8012874 <tcp_receive+0x88c>)
 80126b8:	881b      	ldrh	r3, [r3, #0]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d275      	bcs.n	80127aa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80126be:	4b6c      	ldr	r3, [pc, #432]	; (8012870 <tcp_receive+0x888>)
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	899b      	ldrh	r3, [r3, #12]
 80126c4:	b29b      	uxth	r3, r3
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fa fcca 	bl	800d060 <lwip_htons>
 80126cc:	4603      	mov	r3, r0
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	f003 0301 	and.w	r3, r3, #1
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d01f      	beq.n	8012718 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80126d8:	4b65      	ldr	r3, [pc, #404]	; (8012870 <tcp_receive+0x888>)
 80126da:	68db      	ldr	r3, [r3, #12]
 80126dc:	899b      	ldrh	r3, [r3, #12]
 80126de:	b29b      	uxth	r3, r3
 80126e0:	b21b      	sxth	r3, r3
 80126e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80126e6:	b21c      	sxth	r4, r3
 80126e8:	4b61      	ldr	r3, [pc, #388]	; (8012870 <tcp_receive+0x888>)
 80126ea:	68db      	ldr	r3, [r3, #12]
 80126ec:	899b      	ldrh	r3, [r3, #12]
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7fa fcb5 	bl	800d060 <lwip_htons>
 80126f6:	4603      	mov	r3, r0
 80126f8:	b2db      	uxtb	r3, r3
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012700:	b29b      	uxth	r3, r3
 8012702:	4618      	mov	r0, r3
 8012704:	f7fa fcac 	bl	800d060 <lwip_htons>
 8012708:	4603      	mov	r3, r0
 801270a:	b21b      	sxth	r3, r3
 801270c:	4323      	orrs	r3, r4
 801270e:	b21a      	sxth	r2, r3
 8012710:	4b57      	ldr	r3, [pc, #348]	; (8012870 <tcp_receive+0x888>)
 8012712:	68db      	ldr	r3, [r3, #12]
 8012714:	b292      	uxth	r2, r2
 8012716:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801271c:	4b54      	ldr	r3, [pc, #336]	; (8012870 <tcp_receive+0x888>)
 801271e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012720:	4b53      	ldr	r3, [pc, #332]	; (8012870 <tcp_receive+0x888>)
 8012722:	68db      	ldr	r3, [r3, #12]
 8012724:	899b      	ldrh	r3, [r3, #12]
 8012726:	b29b      	uxth	r3, r3
 8012728:	4618      	mov	r0, r3
 801272a:	f7fa fc99 	bl	800d060 <lwip_htons>
 801272e:	4603      	mov	r3, r0
 8012730:	b2db      	uxtb	r3, r3
 8012732:	f003 0302 	and.w	r3, r3, #2
 8012736:	2b00      	cmp	r3, #0
 8012738:	d005      	beq.n	8012746 <tcp_receive+0x75e>
            inseg.len -= 1;
 801273a:	4b4d      	ldr	r3, [pc, #308]	; (8012870 <tcp_receive+0x888>)
 801273c:	891b      	ldrh	r3, [r3, #8]
 801273e:	3b01      	subs	r3, #1
 8012740:	b29a      	uxth	r2, r3
 8012742:	4b4b      	ldr	r3, [pc, #300]	; (8012870 <tcp_receive+0x888>)
 8012744:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012746:	4b4a      	ldr	r3, [pc, #296]	; (8012870 <tcp_receive+0x888>)
 8012748:	685a      	ldr	r2, [r3, #4]
 801274a:	4b49      	ldr	r3, [pc, #292]	; (8012870 <tcp_receive+0x888>)
 801274c:	891b      	ldrh	r3, [r3, #8]
 801274e:	4619      	mov	r1, r3
 8012750:	4610      	mov	r0, r2
 8012752:	f7fb feeb 	bl	800e52c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012756:	4b46      	ldr	r3, [pc, #280]	; (8012870 <tcp_receive+0x888>)
 8012758:	891c      	ldrh	r4, [r3, #8]
 801275a:	4b45      	ldr	r3, [pc, #276]	; (8012870 <tcp_receive+0x888>)
 801275c:	68db      	ldr	r3, [r3, #12]
 801275e:	899b      	ldrh	r3, [r3, #12]
 8012760:	b29b      	uxth	r3, r3
 8012762:	4618      	mov	r0, r3
 8012764:	f7fa fc7c 	bl	800d060 <lwip_htons>
 8012768:	4603      	mov	r3, r0
 801276a:	b2db      	uxtb	r3, r3
 801276c:	f003 0303 	and.w	r3, r3, #3
 8012770:	2b00      	cmp	r3, #0
 8012772:	d001      	beq.n	8012778 <tcp_receive+0x790>
 8012774:	2301      	movs	r3, #1
 8012776:	e000      	b.n	801277a <tcp_receive+0x792>
 8012778:	2300      	movs	r3, #0
 801277a:	4423      	add	r3, r4
 801277c:	b29a      	uxth	r2, r3
 801277e:	4b3d      	ldr	r3, [pc, #244]	; (8012874 <tcp_receive+0x88c>)
 8012780:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012782:	4b3c      	ldr	r3, [pc, #240]	; (8012874 <tcp_receive+0x88c>)
 8012784:	881b      	ldrh	r3, [r3, #0]
 8012786:	461a      	mov	r2, r3
 8012788:	4b38      	ldr	r3, [pc, #224]	; (801286c <tcp_receive+0x884>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	441a      	add	r2, r3
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012792:	6879      	ldr	r1, [r7, #4]
 8012794:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012796:	440b      	add	r3, r1
 8012798:	429a      	cmp	r2, r3
 801279a:	d006      	beq.n	80127aa <tcp_receive+0x7c2>
 801279c:	4b36      	ldr	r3, [pc, #216]	; (8012878 <tcp_receive+0x890>)
 801279e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80127a2:	4936      	ldr	r1, [pc, #216]	; (801287c <tcp_receive+0x894>)
 80127a4:	4836      	ldr	r0, [pc, #216]	; (8012880 <tcp_receive+0x898>)
 80127a6:	f007 fe0d 	bl	801a3c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	f000 80e7 	beq.w	8012982 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80127b4:	4b2e      	ldr	r3, [pc, #184]	; (8012870 <tcp_receive+0x888>)
 80127b6:	68db      	ldr	r3, [r3, #12]
 80127b8:	899b      	ldrh	r3, [r3, #12]
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	4618      	mov	r0, r3
 80127be:	f7fa fc4f 	bl	800d060 <lwip_htons>
 80127c2:	4603      	mov	r3, r0
 80127c4:	b2db      	uxtb	r3, r3
 80127c6:	f003 0301 	and.w	r3, r3, #1
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d010      	beq.n	80127f0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80127ce:	e00a      	b.n	80127e6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127da:	681a      	ldr	r2, [r3, #0]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80127e0:	68f8      	ldr	r0, [r7, #12]
 80127e2:	f7fd fcc9 	bl	8010178 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d1f0      	bne.n	80127d0 <tcp_receive+0x7e8>
 80127ee:	e0c8      	b.n	8012982 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80127f6:	e052      	b.n	801289e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80127f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	899b      	ldrh	r3, [r3, #12]
 80127fe:	b29b      	uxth	r3, r3
 8012800:	4618      	mov	r0, r3
 8012802:	f7fa fc2d 	bl	800d060 <lwip_htons>
 8012806:	4603      	mov	r3, r0
 8012808:	b2db      	uxtb	r3, r3
 801280a:	f003 0301 	and.w	r3, r3, #1
 801280e:	2b00      	cmp	r3, #0
 8012810:	d03d      	beq.n	801288e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012812:	4b17      	ldr	r3, [pc, #92]	; (8012870 <tcp_receive+0x888>)
 8012814:	68db      	ldr	r3, [r3, #12]
 8012816:	899b      	ldrh	r3, [r3, #12]
 8012818:	b29b      	uxth	r3, r3
 801281a:	4618      	mov	r0, r3
 801281c:	f7fa fc20 	bl	800d060 <lwip_htons>
 8012820:	4603      	mov	r3, r0
 8012822:	b2db      	uxtb	r3, r3
 8012824:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012828:	2b00      	cmp	r3, #0
 801282a:	d130      	bne.n	801288e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801282c:	4b10      	ldr	r3, [pc, #64]	; (8012870 <tcp_receive+0x888>)
 801282e:	68db      	ldr	r3, [r3, #12]
 8012830:	899b      	ldrh	r3, [r3, #12]
 8012832:	b29c      	uxth	r4, r3
 8012834:	2001      	movs	r0, #1
 8012836:	f7fa fc13 	bl	800d060 <lwip_htons>
 801283a:	4603      	mov	r3, r0
 801283c:	461a      	mov	r2, r3
 801283e:	4b0c      	ldr	r3, [pc, #48]	; (8012870 <tcp_receive+0x888>)
 8012840:	68db      	ldr	r3, [r3, #12]
 8012842:	4322      	orrs	r2, r4
 8012844:	b292      	uxth	r2, r2
 8012846:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012848:	4b09      	ldr	r3, [pc, #36]	; (8012870 <tcp_receive+0x888>)
 801284a:	891c      	ldrh	r4, [r3, #8]
 801284c:	4b08      	ldr	r3, [pc, #32]	; (8012870 <tcp_receive+0x888>)
 801284e:	68db      	ldr	r3, [r3, #12]
 8012850:	899b      	ldrh	r3, [r3, #12]
 8012852:	b29b      	uxth	r3, r3
 8012854:	4618      	mov	r0, r3
 8012856:	f7fa fc03 	bl	800d060 <lwip_htons>
 801285a:	4603      	mov	r3, r0
 801285c:	b2db      	uxtb	r3, r3
 801285e:	f003 0303 	and.w	r3, r3, #3
 8012862:	2b00      	cmp	r3, #0
 8012864:	d00e      	beq.n	8012884 <tcp_receive+0x89c>
 8012866:	2301      	movs	r3, #1
 8012868:	e00d      	b.n	8012886 <tcp_receive+0x89e>
 801286a:	bf00      	nop
 801286c:	20004bdc 	.word	0x20004bdc
 8012870:	20004bbc 	.word	0x20004bbc
 8012874:	20004be6 	.word	0x20004be6
 8012878:	0801d5fc 	.word	0x0801d5fc
 801287c:	0801d9a4 	.word	0x0801d9a4
 8012880:	0801d648 	.word	0x0801d648
 8012884:	2300      	movs	r3, #0
 8012886:	4423      	add	r3, r4
 8012888:	b29a      	uxth	r2, r3
 801288a:	4b98      	ldr	r3, [pc, #608]	; (8012aec <tcp_receive+0xb04>)
 801288c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801288e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012890:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012898:	6938      	ldr	r0, [r7, #16]
 801289a:	f7fd fc6d 	bl	8010178 <tcp_seg_free>
            while (next &&
 801289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d00e      	beq.n	80128c2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80128a4:	4b91      	ldr	r3, [pc, #580]	; (8012aec <tcp_receive+0xb04>)
 80128a6:	881b      	ldrh	r3, [r3, #0]
 80128a8:	461a      	mov	r2, r3
 80128aa:	4b91      	ldr	r3, [pc, #580]	; (8012af0 <tcp_receive+0xb08>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	441a      	add	r2, r3
 80128b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128b8:	8909      	ldrh	r1, [r1, #8]
 80128ba:	440b      	add	r3, r1
 80128bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80128be:	2b00      	cmp	r3, #0
 80128c0:	da9a      	bge.n	80127f8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80128c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d059      	beq.n	801297c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80128c8:	4b88      	ldr	r3, [pc, #544]	; (8012aec <tcp_receive+0xb04>)
 80128ca:	881b      	ldrh	r3, [r3, #0]
 80128cc:	461a      	mov	r2, r3
 80128ce:	4b88      	ldr	r3, [pc, #544]	; (8012af0 <tcp_receive+0xb08>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	441a      	add	r2, r3
 80128d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128d6:	68db      	ldr	r3, [r3, #12]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	1ad3      	subs	r3, r2, r3
            if (next &&
 80128dc:	2b00      	cmp	r3, #0
 80128de:	dd4d      	ble.n	801297c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80128e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	b29a      	uxth	r2, r3
 80128e8:	4b81      	ldr	r3, [pc, #516]	; (8012af0 <tcp_receive+0xb08>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	b29b      	uxth	r3, r3
 80128ee:	1ad3      	subs	r3, r2, r3
 80128f0:	b29a      	uxth	r2, r3
 80128f2:	4b80      	ldr	r3, [pc, #512]	; (8012af4 <tcp_receive+0xb0c>)
 80128f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80128f6:	4b7f      	ldr	r3, [pc, #508]	; (8012af4 <tcp_receive+0xb0c>)
 80128f8:	68db      	ldr	r3, [r3, #12]
 80128fa:	899b      	ldrh	r3, [r3, #12]
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	4618      	mov	r0, r3
 8012900:	f7fa fbae 	bl	800d060 <lwip_htons>
 8012904:	4603      	mov	r3, r0
 8012906:	b2db      	uxtb	r3, r3
 8012908:	f003 0302 	and.w	r3, r3, #2
 801290c:	2b00      	cmp	r3, #0
 801290e:	d005      	beq.n	801291c <tcp_receive+0x934>
                inseg.len -= 1;
 8012910:	4b78      	ldr	r3, [pc, #480]	; (8012af4 <tcp_receive+0xb0c>)
 8012912:	891b      	ldrh	r3, [r3, #8]
 8012914:	3b01      	subs	r3, #1
 8012916:	b29a      	uxth	r2, r3
 8012918:	4b76      	ldr	r3, [pc, #472]	; (8012af4 <tcp_receive+0xb0c>)
 801291a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801291c:	4b75      	ldr	r3, [pc, #468]	; (8012af4 <tcp_receive+0xb0c>)
 801291e:	685a      	ldr	r2, [r3, #4]
 8012920:	4b74      	ldr	r3, [pc, #464]	; (8012af4 <tcp_receive+0xb0c>)
 8012922:	891b      	ldrh	r3, [r3, #8]
 8012924:	4619      	mov	r1, r3
 8012926:	4610      	mov	r0, r2
 8012928:	f7fb fe00 	bl	800e52c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801292c:	4b71      	ldr	r3, [pc, #452]	; (8012af4 <tcp_receive+0xb0c>)
 801292e:	891c      	ldrh	r4, [r3, #8]
 8012930:	4b70      	ldr	r3, [pc, #448]	; (8012af4 <tcp_receive+0xb0c>)
 8012932:	68db      	ldr	r3, [r3, #12]
 8012934:	899b      	ldrh	r3, [r3, #12]
 8012936:	b29b      	uxth	r3, r3
 8012938:	4618      	mov	r0, r3
 801293a:	f7fa fb91 	bl	800d060 <lwip_htons>
 801293e:	4603      	mov	r3, r0
 8012940:	b2db      	uxtb	r3, r3
 8012942:	f003 0303 	and.w	r3, r3, #3
 8012946:	2b00      	cmp	r3, #0
 8012948:	d001      	beq.n	801294e <tcp_receive+0x966>
 801294a:	2301      	movs	r3, #1
 801294c:	e000      	b.n	8012950 <tcp_receive+0x968>
 801294e:	2300      	movs	r3, #0
 8012950:	4423      	add	r3, r4
 8012952:	b29a      	uxth	r2, r3
 8012954:	4b65      	ldr	r3, [pc, #404]	; (8012aec <tcp_receive+0xb04>)
 8012956:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012958:	4b64      	ldr	r3, [pc, #400]	; (8012aec <tcp_receive+0xb04>)
 801295a:	881b      	ldrh	r3, [r3, #0]
 801295c:	461a      	mov	r2, r3
 801295e:	4b64      	ldr	r3, [pc, #400]	; (8012af0 <tcp_receive+0xb08>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	441a      	add	r2, r3
 8012964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012966:	68db      	ldr	r3, [r3, #12]
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	429a      	cmp	r2, r3
 801296c:	d006      	beq.n	801297c <tcp_receive+0x994>
 801296e:	4b62      	ldr	r3, [pc, #392]	; (8012af8 <tcp_receive+0xb10>)
 8012970:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8012974:	4961      	ldr	r1, [pc, #388]	; (8012afc <tcp_receive+0xb14>)
 8012976:	4862      	ldr	r0, [pc, #392]	; (8012b00 <tcp_receive+0xb18>)
 8012978:	f007 fd24 	bl	801a3c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012980:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012982:	4b5a      	ldr	r3, [pc, #360]	; (8012aec <tcp_receive+0xb04>)
 8012984:	881b      	ldrh	r3, [r3, #0]
 8012986:	461a      	mov	r2, r3
 8012988:	4b59      	ldr	r3, [pc, #356]	; (8012af0 <tcp_receive+0xb08>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	441a      	add	r2, r3
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012996:	4b55      	ldr	r3, [pc, #340]	; (8012aec <tcp_receive+0xb04>)
 8012998:	881b      	ldrh	r3, [r3, #0]
 801299a:	429a      	cmp	r2, r3
 801299c:	d206      	bcs.n	80129ac <tcp_receive+0x9c4>
 801299e:	4b56      	ldr	r3, [pc, #344]	; (8012af8 <tcp_receive+0xb10>)
 80129a0:	f240 6207 	movw	r2, #1543	; 0x607
 80129a4:	4957      	ldr	r1, [pc, #348]	; (8012b04 <tcp_receive+0xb1c>)
 80129a6:	4856      	ldr	r0, [pc, #344]	; (8012b00 <tcp_receive+0xb18>)
 80129a8:	f007 fd0c 	bl	801a3c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80129b0:	4b4e      	ldr	r3, [pc, #312]	; (8012aec <tcp_receive+0xb04>)
 80129b2:	881b      	ldrh	r3, [r3, #0]
 80129b4:	1ad3      	subs	r3, r2, r3
 80129b6:	b29a      	uxth	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f7fc feb9 	bl	800f734 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80129c2:	4b4c      	ldr	r3, [pc, #304]	; (8012af4 <tcp_receive+0xb0c>)
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	891b      	ldrh	r3, [r3, #8]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d006      	beq.n	80129da <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80129cc:	4b49      	ldr	r3, [pc, #292]	; (8012af4 <tcp_receive+0xb0c>)
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	4a4d      	ldr	r2, [pc, #308]	; (8012b08 <tcp_receive+0xb20>)
 80129d2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80129d4:	4b47      	ldr	r3, [pc, #284]	; (8012af4 <tcp_receive+0xb0c>)
 80129d6:	2200      	movs	r2, #0
 80129d8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80129da:	4b46      	ldr	r3, [pc, #280]	; (8012af4 <tcp_receive+0xb0c>)
 80129dc:	68db      	ldr	r3, [r3, #12]
 80129de:	899b      	ldrh	r3, [r3, #12]
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7fa fb3c 	bl	800d060 <lwip_htons>
 80129e8:	4603      	mov	r3, r0
 80129ea:	b2db      	uxtb	r3, r3
 80129ec:	f003 0301 	and.w	r3, r3, #1
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	f000 80b8 	beq.w	8012b66 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80129f6:	4b45      	ldr	r3, [pc, #276]	; (8012b0c <tcp_receive+0xb24>)
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	f043 0320 	orr.w	r3, r3, #32
 80129fe:	b2da      	uxtb	r2, r3
 8012a00:	4b42      	ldr	r3, [pc, #264]	; (8012b0c <tcp_receive+0xb24>)
 8012a02:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012a04:	e0af      	b.n	8012b66 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a0a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	4a36      	ldr	r2, [pc, #216]	; (8012af0 <tcp_receive+0xb08>)
 8012a16:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	891b      	ldrh	r3, [r3, #8]
 8012a1c:	461c      	mov	r4, r3
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	68db      	ldr	r3, [r3, #12]
 8012a22:	899b      	ldrh	r3, [r3, #12]
 8012a24:	b29b      	uxth	r3, r3
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fa fb1a 	bl	800d060 <lwip_htons>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	b2db      	uxtb	r3, r3
 8012a30:	f003 0303 	and.w	r3, r3, #3
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d001      	beq.n	8012a3c <tcp_receive+0xa54>
 8012a38:	2301      	movs	r3, #1
 8012a3a:	e000      	b.n	8012a3e <tcp_receive+0xa56>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	191a      	adds	r2, r3, r4
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a44:	441a      	add	r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a4e:	461c      	mov	r4, r3
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	891b      	ldrh	r3, [r3, #8]
 8012a54:	461d      	mov	r5, r3
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	68db      	ldr	r3, [r3, #12]
 8012a5a:	899b      	ldrh	r3, [r3, #12]
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7fa fafe 	bl	800d060 <lwip_htons>
 8012a64:	4603      	mov	r3, r0
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	f003 0303 	and.w	r3, r3, #3
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d001      	beq.n	8012a74 <tcp_receive+0xa8c>
 8012a70:	2301      	movs	r3, #1
 8012a72:	e000      	b.n	8012a76 <tcp_receive+0xa8e>
 8012a74:	2300      	movs	r3, #0
 8012a76:	442b      	add	r3, r5
 8012a78:	429c      	cmp	r4, r3
 8012a7a:	d206      	bcs.n	8012a8a <tcp_receive+0xaa2>
 8012a7c:	4b1e      	ldr	r3, [pc, #120]	; (8012af8 <tcp_receive+0xb10>)
 8012a7e:	f240 622c 	movw	r2, #1580	; 0x62c
 8012a82:	4923      	ldr	r1, [pc, #140]	; (8012b10 <tcp_receive+0xb28>)
 8012a84:	481e      	ldr	r0, [pc, #120]	; (8012b00 <tcp_receive+0xb18>)
 8012a86:	f007 fc9d 	bl	801a3c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	891b      	ldrh	r3, [r3, #8]
 8012a8e:	461c      	mov	r4, r3
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	899b      	ldrh	r3, [r3, #12]
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fa fae1 	bl	800d060 <lwip_htons>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	b2db      	uxtb	r3, r3
 8012aa2:	f003 0303 	and.w	r3, r3, #3
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d001      	beq.n	8012aae <tcp_receive+0xac6>
 8012aaa:	2301      	movs	r3, #1
 8012aac:	e000      	b.n	8012ab0 <tcp_receive+0xac8>
 8012aae:	2300      	movs	r3, #0
 8012ab0:	1919      	adds	r1, r3, r4
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ab6:	b28b      	uxth	r3, r1
 8012ab8:	1ad3      	subs	r3, r2, r3
 8012aba:	b29a      	uxth	r2, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7fc fe37 	bl	800f734 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	891b      	ldrh	r3, [r3, #8]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d028      	beq.n	8012b22 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012ad0:	4b0d      	ldr	r3, [pc, #52]	; (8012b08 <tcp_receive+0xb20>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d01d      	beq.n	8012b14 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012ad8:	4b0b      	ldr	r3, [pc, #44]	; (8012b08 <tcp_receive+0xb20>)
 8012ada:	681a      	ldr	r2, [r3, #0]
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	4610      	mov	r0, r2
 8012ae4:	f7fb ff76 	bl	800e9d4 <pbuf_cat>
 8012ae8:	e018      	b.n	8012b1c <tcp_receive+0xb34>
 8012aea:	bf00      	nop
 8012aec:	20004be6 	.word	0x20004be6
 8012af0:	20004bdc 	.word	0x20004bdc
 8012af4:	20004bbc 	.word	0x20004bbc
 8012af8:	0801d5fc 	.word	0x0801d5fc
 8012afc:	0801d9dc 	.word	0x0801d9dc
 8012b00:	0801d648 	.word	0x0801d648
 8012b04:	0801da18 	.word	0x0801da18
 8012b08:	20004bec 	.word	0x20004bec
 8012b0c:	20004be9 	.word	0x20004be9
 8012b10:	0801da38 	.word	0x0801da38
            } else {
              recv_data = cseg->p;
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	4a70      	ldr	r2, [pc, #448]	; (8012cdc <tcp_receive+0xcf4>)
 8012b1a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	68db      	ldr	r3, [r3, #12]
 8012b26:	899b      	ldrh	r3, [r3, #12]
 8012b28:	b29b      	uxth	r3, r3
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7fa fa98 	bl	800d060 <lwip_htons>
 8012b30:	4603      	mov	r3, r0
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	f003 0301 	and.w	r3, r3, #1
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d00d      	beq.n	8012b58 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012b3c:	4b68      	ldr	r3, [pc, #416]	; (8012ce0 <tcp_receive+0xcf8>)
 8012b3e:	781b      	ldrb	r3, [r3, #0]
 8012b40:	f043 0320 	orr.w	r3, r3, #32
 8012b44:	b2da      	uxtb	r2, r3
 8012b46:	4b66      	ldr	r3, [pc, #408]	; (8012ce0 <tcp_receive+0xcf8>)
 8012b48:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	7d1b      	ldrb	r3, [r3, #20]
 8012b4e:	2b04      	cmp	r3, #4
 8012b50:	d102      	bne.n	8012b58 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2207      	movs	r2, #7
 8012b56:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	681a      	ldr	r2, [r3, #0]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012b60:	68b8      	ldr	r0, [r7, #8]
 8012b62:	f7fd fb09 	bl	8010178 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d008      	beq.n	8012b80 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	685a      	ldr	r2, [r3, #4]
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	f43f af43 	beq.w	8012a06 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	8b5b      	ldrh	r3, [r3, #26]
 8012b84:	f003 0301 	and.w	r3, r3, #1
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d00e      	beq.n	8012baa <tcp_receive+0xbc2>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	8b5b      	ldrh	r3, [r3, #26]
 8012b90:	f023 0301 	bic.w	r3, r3, #1
 8012b94:	b29a      	uxth	r2, r3
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	835a      	strh	r2, [r3, #26]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	8b5b      	ldrh	r3, [r3, #26]
 8012b9e:	f043 0302 	orr.w	r3, r3, #2
 8012ba2:	b29a      	uxth	r2, r3
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012ba8:	e188      	b.n	8012ebc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	8b5b      	ldrh	r3, [r3, #26]
 8012bae:	f043 0301 	orr.w	r3, r3, #1
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012bb8:	e180      	b.n	8012ebc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d106      	bne.n	8012bd0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012bc2:	4848      	ldr	r0, [pc, #288]	; (8012ce4 <tcp_receive+0xcfc>)
 8012bc4:	f7fd faf0 	bl	80101a8 <tcp_seg_copy>
 8012bc8:	4602      	mov	r2, r0
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	675a      	str	r2, [r3, #116]	; 0x74
 8012bce:	e16d      	b.n	8012eac <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8012bda:	e157      	b.n	8012e8c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bde:	68db      	ldr	r3, [r3, #12]
 8012be0:	685a      	ldr	r2, [r3, #4]
 8012be2:	4b41      	ldr	r3, [pc, #260]	; (8012ce8 <tcp_receive+0xd00>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d11d      	bne.n	8012c26 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012bea:	4b3e      	ldr	r3, [pc, #248]	; (8012ce4 <tcp_receive+0xcfc>)
 8012bec:	891a      	ldrh	r2, [r3, #8]
 8012bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf0:	891b      	ldrh	r3, [r3, #8]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	f240 814f 	bls.w	8012e96 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012bf8:	483a      	ldr	r0, [pc, #232]	; (8012ce4 <tcp_receive+0xcfc>)
 8012bfa:	f7fd fad5 	bl	80101a8 <tcp_seg_copy>
 8012bfe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	f000 8149 	beq.w	8012e9a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d003      	beq.n	8012c16 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c10:	697a      	ldr	r2, [r7, #20]
 8012c12:	601a      	str	r2, [r3, #0]
 8012c14:	e002      	b.n	8012c1c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	697a      	ldr	r2, [r7, #20]
 8012c1a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012c1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c1e:	6978      	ldr	r0, [r7, #20]
 8012c20:	f7ff f8de 	bl	8011de0 <tcp_oos_insert_segment>
                }
                break;
 8012c24:	e139      	b.n	8012e9a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d117      	bne.n	8012c5c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012c2c:	4b2e      	ldr	r3, [pc, #184]	; (8012ce8 <tcp_receive+0xd00>)
 8012c2e:	681a      	ldr	r2, [r3, #0]
 8012c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c32:	68db      	ldr	r3, [r3, #12]
 8012c34:	685b      	ldr	r3, [r3, #4]
 8012c36:	1ad3      	subs	r3, r2, r3
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	da57      	bge.n	8012cec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c3c:	4829      	ldr	r0, [pc, #164]	; (8012ce4 <tcp_receive+0xcfc>)
 8012c3e:	f7fd fab3 	bl	80101a8 <tcp_seg_copy>
 8012c42:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012c44:	69bb      	ldr	r3, [r7, #24]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	f000 8129 	beq.w	8012e9e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	69ba      	ldr	r2, [r7, #24]
 8012c50:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c54:	69b8      	ldr	r0, [r7, #24]
 8012c56:	f7ff f8c3 	bl	8011de0 <tcp_oos_insert_segment>
                  }
                  break;
 8012c5a:	e120      	b.n	8012e9e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012c5c:	4b22      	ldr	r3, [pc, #136]	; (8012ce8 <tcp_receive+0xd00>)
 8012c5e:	681a      	ldr	r2, [r3, #0]
 8012c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c62:	68db      	ldr	r3, [r3, #12]
 8012c64:	685b      	ldr	r3, [r3, #4]
 8012c66:	1ad3      	subs	r3, r2, r3
 8012c68:	3b01      	subs	r3, #1
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	db3e      	blt.n	8012cec <tcp_receive+0xd04>
 8012c6e:	4b1e      	ldr	r3, [pc, #120]	; (8012ce8 <tcp_receive+0xd00>)
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c74:	68db      	ldr	r3, [r3, #12]
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	1ad3      	subs	r3, r2, r3
 8012c7a:	3301      	adds	r3, #1
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	dc35      	bgt.n	8012cec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c80:	4818      	ldr	r0, [pc, #96]	; (8012ce4 <tcp_receive+0xcfc>)
 8012c82:	f7fd fa91 	bl	80101a8 <tcp_seg_copy>
 8012c86:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012c88:	69fb      	ldr	r3, [r7, #28]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	f000 8109 	beq.w	8012ea2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c98:	8912      	ldrh	r2, [r2, #8]
 8012c9a:	441a      	add	r2, r3
 8012c9c:	4b12      	ldr	r3, [pc, #72]	; (8012ce8 <tcp_receive+0xd00>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	1ad3      	subs	r3, r2, r3
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	dd12      	ble.n	8012ccc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012ca6:	4b10      	ldr	r3, [pc, #64]	; (8012ce8 <tcp_receive+0xd00>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cae:	68db      	ldr	r3, [r3, #12]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	b29b      	uxth	r3, r3
 8012cb4:	1ad3      	subs	r3, r2, r3
 8012cb6:	b29a      	uxth	r2, r3
 8012cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cbe:	685a      	ldr	r2, [r3, #4]
 8012cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cc2:	891b      	ldrh	r3, [r3, #8]
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	4610      	mov	r0, r2
 8012cc8:	f7fb fc30 	bl	800e52c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cce:	69fa      	ldr	r2, [r7, #28]
 8012cd0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012cd4:	69f8      	ldr	r0, [r7, #28]
 8012cd6:	f7ff f883 	bl	8011de0 <tcp_oos_insert_segment>
                  }
                  break;
 8012cda:	e0e2      	b.n	8012ea2 <tcp_receive+0xeba>
 8012cdc:	20004bec 	.word	0x20004bec
 8012ce0:	20004be9 	.word	0x20004be9
 8012ce4:	20004bbc 	.word	0x20004bbc
 8012ce8:	20004bdc 	.word	0x20004bdc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f040 80c6 	bne.w	8012e86 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012cfa:	4b80      	ldr	r3, [pc, #512]	; (8012efc <tcp_receive+0xf14>)
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d00:	68db      	ldr	r3, [r3, #12]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	f340 80bd 	ble.w	8012e86 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0e:	68db      	ldr	r3, [r3, #12]
 8012d10:	899b      	ldrh	r3, [r3, #12]
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fa f9a3 	bl	800d060 <lwip_htons>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	b2db      	uxtb	r3, r3
 8012d1e:	f003 0301 	and.w	r3, r3, #1
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	f040 80bf 	bne.w	8012ea6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012d28:	4875      	ldr	r0, [pc, #468]	; (8012f00 <tcp_receive+0xf18>)
 8012d2a:	f7fd fa3d 	bl	80101a8 <tcp_seg_copy>
 8012d2e:	4602      	mov	r2, r0
 8012d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	f000 80b6 	beq.w	8012eaa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d46:	8912      	ldrh	r2, [r2, #8]
 8012d48:	441a      	add	r2, r3
 8012d4a:	4b6c      	ldr	r3, [pc, #432]	; (8012efc <tcp_receive+0xf14>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	1ad3      	subs	r3, r2, r3
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	dd12      	ble.n	8012d7a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012d54:	4b69      	ldr	r3, [pc, #420]	; (8012efc <tcp_receive+0xf14>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	b29a      	uxth	r2, r3
 8012d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	1ad3      	subs	r3, r2, r3
 8012d64:	b29a      	uxth	r2, r3
 8012d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6c:	685a      	ldr	r2, [r3, #4]
 8012d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d70:	891b      	ldrh	r3, [r3, #8]
 8012d72:	4619      	mov	r1, r3
 8012d74:	4610      	mov	r0, r2
 8012d76:	f7fb fbd9 	bl	800e52c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012d7a:	4b62      	ldr	r3, [pc, #392]	; (8012f04 <tcp_receive+0xf1c>)
 8012d7c:	881b      	ldrh	r3, [r3, #0]
 8012d7e:	461a      	mov	r2, r3
 8012d80:	4b5e      	ldr	r3, [pc, #376]	; (8012efc <tcp_receive+0xf14>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	441a      	add	r2, r3
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d8a:	6879      	ldr	r1, [r7, #4]
 8012d8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d8e:	440b      	add	r3, r1
 8012d90:	1ad3      	subs	r3, r2, r3
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	f340 8089 	ble.w	8012eaa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	68db      	ldr	r3, [r3, #12]
 8012d9e:	899b      	ldrh	r3, [r3, #12]
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7fa f95c 	bl	800d060 <lwip_htons>
 8012da8:	4603      	mov	r3, r0
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	f003 0301 	and.w	r3, r3, #1
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d022      	beq.n	8012dfa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	899b      	ldrh	r3, [r3, #12]
 8012dbc:	b29b      	uxth	r3, r3
 8012dbe:	b21b      	sxth	r3, r3
 8012dc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012dc4:	b21c      	sxth	r4, r3
 8012dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	899b      	ldrh	r3, [r3, #12]
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fa f945 	bl	800d060 <lwip_htons>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	b2db      	uxtb	r3, r3
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012de0:	b29b      	uxth	r3, r3
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7fa f93c 	bl	800d060 <lwip_htons>
 8012de8:	4603      	mov	r3, r0
 8012dea:	b21b      	sxth	r3, r3
 8012dec:	4323      	orrs	r3, r4
 8012dee:	b21a      	sxth	r2, r3
 8012df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	68db      	ldr	r3, [r3, #12]
 8012df6:	b292      	uxth	r2, r2
 8012df8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dfe:	b29a      	uxth	r2, r3
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e04:	4413      	add	r3, r2
 8012e06:	b299      	uxth	r1, r3
 8012e08:	4b3c      	ldr	r3, [pc, #240]	; (8012efc <tcp_receive+0xf14>)
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	1a8a      	subs	r2, r1, r2
 8012e14:	b292      	uxth	r2, r2
 8012e16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	685a      	ldr	r2, [r3, #4]
 8012e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	891b      	ldrh	r3, [r3, #8]
 8012e24:	4619      	mov	r1, r3
 8012e26:	4610      	mov	r0, r2
 8012e28:	f7fb fb80 	bl	800e52c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	891c      	ldrh	r4, [r3, #8]
 8012e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	68db      	ldr	r3, [r3, #12]
 8012e38:	899b      	ldrh	r3, [r3, #12]
 8012e3a:	b29b      	uxth	r3, r3
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7fa f90f 	bl	800d060 <lwip_htons>
 8012e42:	4603      	mov	r3, r0
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	f003 0303 	and.w	r3, r3, #3
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d001      	beq.n	8012e52 <tcp_receive+0xe6a>
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e000      	b.n	8012e54 <tcp_receive+0xe6c>
 8012e52:	2300      	movs	r3, #0
 8012e54:	4423      	add	r3, r4
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	4b2a      	ldr	r3, [pc, #168]	; (8012f04 <tcp_receive+0xf1c>)
 8012e5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012e5c:	4b29      	ldr	r3, [pc, #164]	; (8012f04 <tcp_receive+0xf1c>)
 8012e5e:	881b      	ldrh	r3, [r3, #0]
 8012e60:	461a      	mov	r2, r3
 8012e62:	4b26      	ldr	r3, [pc, #152]	; (8012efc <tcp_receive+0xf14>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	441a      	add	r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e6c:	6879      	ldr	r1, [r7, #4]
 8012e6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e70:	440b      	add	r3, r1
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d019      	beq.n	8012eaa <tcp_receive+0xec2>
 8012e76:	4b24      	ldr	r3, [pc, #144]	; (8012f08 <tcp_receive+0xf20>)
 8012e78:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012e7c:	4923      	ldr	r1, [pc, #140]	; (8012f0c <tcp_receive+0xf24>)
 8012e7e:	4824      	ldr	r0, [pc, #144]	; (8012f10 <tcp_receive+0xf28>)
 8012e80:	f007 faa0 	bl	801a3c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012e84:	e011      	b.n	8012eaa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	f47f aea4 	bne.w	8012bdc <tcp_receive+0xbf4>
 8012e94:	e00a      	b.n	8012eac <tcp_receive+0xec4>
                break;
 8012e96:	bf00      	nop
 8012e98:	e008      	b.n	8012eac <tcp_receive+0xec4>
                break;
 8012e9a:	bf00      	nop
 8012e9c:	e006      	b.n	8012eac <tcp_receive+0xec4>
                  break;
 8012e9e:	bf00      	nop
 8012ea0:	e004      	b.n	8012eac <tcp_receive+0xec4>
                  break;
 8012ea2:	bf00      	nop
 8012ea4:	e002      	b.n	8012eac <tcp_receive+0xec4>
                  break;
 8012ea6:	bf00      	nop
 8012ea8:	e000      	b.n	8012eac <tcp_receive+0xec4>
                break;
 8012eaa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f001 fe9b 	bl	8014be8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012eb2:	e003      	b.n	8012ebc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f001 fe97 	bl	8014be8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012eba:	e01a      	b.n	8012ef2 <tcp_receive+0xf0a>
 8012ebc:	e019      	b.n	8012ef2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012ebe:	4b0f      	ldr	r3, [pc, #60]	; (8012efc <tcp_receive+0xf14>)
 8012ec0:	681a      	ldr	r2, [r3, #0]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec6:	1ad3      	subs	r3, r2, r3
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	db0a      	blt.n	8012ee2 <tcp_receive+0xefa>
 8012ecc:	4b0b      	ldr	r3, [pc, #44]	; (8012efc <tcp_receive+0xf14>)
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ed4:	6879      	ldr	r1, [r7, #4]
 8012ed6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ed8:	440b      	add	r3, r1
 8012eda:	1ad3      	subs	r3, r2, r3
 8012edc:	3301      	adds	r3, #1
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	dd07      	ble.n	8012ef2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	8b5b      	ldrh	r3, [r3, #26]
 8012ee6:	f043 0302 	orr.w	r3, r3, #2
 8012eea:	b29a      	uxth	r2, r3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012ef0:	e7ff      	b.n	8012ef2 <tcp_receive+0xf0a>
 8012ef2:	bf00      	nop
 8012ef4:	3750      	adds	r7, #80	; 0x50
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8012efa:	bf00      	nop
 8012efc:	20004bdc 	.word	0x20004bdc
 8012f00:	20004bbc 	.word	0x20004bbc
 8012f04:	20004be6 	.word	0x20004be6
 8012f08:	0801d5fc 	.word	0x0801d5fc
 8012f0c:	0801d9a4 	.word	0x0801d9a4
 8012f10:	0801d648 	.word	0x0801d648

08012f14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012f14:	b480      	push	{r7}
 8012f16:	b083      	sub	sp, #12
 8012f18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012f1a:	4b15      	ldr	r3, [pc, #84]	; (8012f70 <tcp_get_next_optbyte+0x5c>)
 8012f1c:	881b      	ldrh	r3, [r3, #0]
 8012f1e:	1c5a      	adds	r2, r3, #1
 8012f20:	b291      	uxth	r1, r2
 8012f22:	4a13      	ldr	r2, [pc, #76]	; (8012f70 <tcp_get_next_optbyte+0x5c>)
 8012f24:	8011      	strh	r1, [r2, #0]
 8012f26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012f28:	4b12      	ldr	r3, [pc, #72]	; (8012f74 <tcp_get_next_optbyte+0x60>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d004      	beq.n	8012f3a <tcp_get_next_optbyte+0x26>
 8012f30:	4b11      	ldr	r3, [pc, #68]	; (8012f78 <tcp_get_next_optbyte+0x64>)
 8012f32:	881b      	ldrh	r3, [r3, #0]
 8012f34:	88fa      	ldrh	r2, [r7, #6]
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d208      	bcs.n	8012f4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012f3a:	4b10      	ldr	r3, [pc, #64]	; (8012f7c <tcp_get_next_optbyte+0x68>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	3314      	adds	r3, #20
 8012f40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012f42:	88fb      	ldrh	r3, [r7, #6]
 8012f44:	683a      	ldr	r2, [r7, #0]
 8012f46:	4413      	add	r3, r2
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	e00b      	b.n	8012f64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012f4c:	88fb      	ldrh	r3, [r7, #6]
 8012f4e:	b2da      	uxtb	r2, r3
 8012f50:	4b09      	ldr	r3, [pc, #36]	; (8012f78 <tcp_get_next_optbyte+0x64>)
 8012f52:	881b      	ldrh	r3, [r3, #0]
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	1ad3      	subs	r3, r2, r3
 8012f58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012f5a:	4b06      	ldr	r3, [pc, #24]	; (8012f74 <tcp_get_next_optbyte+0x60>)
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	797b      	ldrb	r3, [r7, #5]
 8012f60:	4413      	add	r3, r2
 8012f62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	370c      	adds	r7, #12
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6e:	4770      	bx	lr
 8012f70:	20004bd8 	.word	0x20004bd8
 8012f74:	20004bd4 	.word	0x20004bd4
 8012f78:	20004bd2 	.word	0x20004bd2
 8012f7c:	20004bcc 	.word	0x20004bcc

08012f80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b084      	sub	sp, #16
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d106      	bne.n	8012f9c <tcp_parseopt+0x1c>
 8012f8e:	4b31      	ldr	r3, [pc, #196]	; (8013054 <tcp_parseopt+0xd4>)
 8012f90:	f240 727d 	movw	r2, #1917	; 0x77d
 8012f94:	4930      	ldr	r1, [pc, #192]	; (8013058 <tcp_parseopt+0xd8>)
 8012f96:	4831      	ldr	r0, [pc, #196]	; (801305c <tcp_parseopt+0xdc>)
 8012f98:	f007 fa14 	bl	801a3c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012f9c:	4b30      	ldr	r3, [pc, #192]	; (8013060 <tcp_parseopt+0xe0>)
 8012f9e:	881b      	ldrh	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d053      	beq.n	801304c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012fa4:	4b2f      	ldr	r3, [pc, #188]	; (8013064 <tcp_parseopt+0xe4>)
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	801a      	strh	r2, [r3, #0]
 8012faa:	e043      	b.n	8013034 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8012fac:	f7ff ffb2 	bl	8012f14 <tcp_get_next_optbyte>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012fb4:	7bfb      	ldrb	r3, [r7, #15]
 8012fb6:	2b01      	cmp	r3, #1
 8012fb8:	d03c      	beq.n	8013034 <tcp_parseopt+0xb4>
 8012fba:	2b02      	cmp	r3, #2
 8012fbc:	d002      	beq.n	8012fc4 <tcp_parseopt+0x44>
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d03f      	beq.n	8013042 <tcp_parseopt+0xc2>
 8012fc2:	e026      	b.n	8013012 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012fc4:	f7ff ffa6 	bl	8012f14 <tcp_get_next_optbyte>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b04      	cmp	r3, #4
 8012fcc:	d13b      	bne.n	8013046 <tcp_parseopt+0xc6>
 8012fce:	4b25      	ldr	r3, [pc, #148]	; (8013064 <tcp_parseopt+0xe4>)
 8012fd0:	881b      	ldrh	r3, [r3, #0]
 8012fd2:	3302      	adds	r3, #2
 8012fd4:	4a22      	ldr	r2, [pc, #136]	; (8013060 <tcp_parseopt+0xe0>)
 8012fd6:	8812      	ldrh	r2, [r2, #0]
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	dc34      	bgt.n	8013046 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012fdc:	f7ff ff9a 	bl	8012f14 <tcp_get_next_optbyte>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	021b      	lsls	r3, r3, #8
 8012fe6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012fe8:	f7ff ff94 	bl	8012f14 <tcp_get_next_optbyte>
 8012fec:	4603      	mov	r3, r0
 8012fee:	b29a      	uxth	r2, r3
 8012ff0:	89bb      	ldrh	r3, [r7, #12]
 8012ff2:	4313      	orrs	r3, r2
 8012ff4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012ff6:	89bb      	ldrh	r3, [r7, #12]
 8012ff8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012ffc:	d804      	bhi.n	8013008 <tcp_parseopt+0x88>
 8012ffe:	89bb      	ldrh	r3, [r7, #12]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d001      	beq.n	8013008 <tcp_parseopt+0x88>
 8013004:	89ba      	ldrh	r2, [r7, #12]
 8013006:	e001      	b.n	801300c <tcp_parseopt+0x8c>
 8013008:	f44f 7206 	mov.w	r2, #536	; 0x218
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013010:	e010      	b.n	8013034 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013012:	f7ff ff7f 	bl	8012f14 <tcp_get_next_optbyte>
 8013016:	4603      	mov	r3, r0
 8013018:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801301a:	7afb      	ldrb	r3, [r7, #11]
 801301c:	2b01      	cmp	r3, #1
 801301e:	d914      	bls.n	801304a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013020:	7afb      	ldrb	r3, [r7, #11]
 8013022:	b29a      	uxth	r2, r3
 8013024:	4b0f      	ldr	r3, [pc, #60]	; (8013064 <tcp_parseopt+0xe4>)
 8013026:	881b      	ldrh	r3, [r3, #0]
 8013028:	4413      	add	r3, r2
 801302a:	b29b      	uxth	r3, r3
 801302c:	3b02      	subs	r3, #2
 801302e:	b29a      	uxth	r2, r3
 8013030:	4b0c      	ldr	r3, [pc, #48]	; (8013064 <tcp_parseopt+0xe4>)
 8013032:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013034:	4b0b      	ldr	r3, [pc, #44]	; (8013064 <tcp_parseopt+0xe4>)
 8013036:	881a      	ldrh	r2, [r3, #0]
 8013038:	4b09      	ldr	r3, [pc, #36]	; (8013060 <tcp_parseopt+0xe0>)
 801303a:	881b      	ldrh	r3, [r3, #0]
 801303c:	429a      	cmp	r2, r3
 801303e:	d3b5      	bcc.n	8012fac <tcp_parseopt+0x2c>
 8013040:	e004      	b.n	801304c <tcp_parseopt+0xcc>
          return;
 8013042:	bf00      	nop
 8013044:	e002      	b.n	801304c <tcp_parseopt+0xcc>
            return;
 8013046:	bf00      	nop
 8013048:	e000      	b.n	801304c <tcp_parseopt+0xcc>
            return;
 801304a:	bf00      	nop
      }
    }
  }
}
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}
 8013052:	bf00      	nop
 8013054:	0801d5fc 	.word	0x0801d5fc
 8013058:	0801da60 	.word	0x0801da60
 801305c:	0801d648 	.word	0x0801d648
 8013060:	20004bd0 	.word	0x20004bd0
 8013064:	20004bd8 	.word	0x20004bd8

08013068 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013068:	b480      	push	{r7}
 801306a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801306c:	4b05      	ldr	r3, [pc, #20]	; (8013084 <tcp_trigger_input_pcb_close+0x1c>)
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	f043 0310 	orr.w	r3, r3, #16
 8013074:	b2da      	uxtb	r2, r3
 8013076:	4b03      	ldr	r3, [pc, #12]	; (8013084 <tcp_trigger_input_pcb_close+0x1c>)
 8013078:	701a      	strb	r2, [r3, #0]
}
 801307a:	bf00      	nop
 801307c:	46bd      	mov	sp, r7
 801307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013082:	4770      	bx	lr
 8013084:	20004be9 	.word	0x20004be9

08013088 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d00a      	beq.n	80130b0 <tcp_route+0x28>
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	7a1b      	ldrb	r3, [r3, #8]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d006      	beq.n	80130b0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	7a1b      	ldrb	r3, [r3, #8]
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fb f804 	bl	800e0b4 <netif_get_by_index>
 80130ac:	4603      	mov	r3, r0
 80130ae:	e003      	b.n	80130b8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f005 fd73 	bl	8018b9c <ip4_route>
 80130b6:	4603      	mov	r3, r0
  }
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3710      	adds	r7, #16
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80130c0:	b590      	push	{r4, r7, lr}
 80130c2:	b087      	sub	sp, #28
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	603b      	str	r3, [r7, #0]
 80130cc:	4613      	mov	r3, r2
 80130ce:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d105      	bne.n	80130e2 <tcp_create_segment+0x22>
 80130d6:	4b44      	ldr	r3, [pc, #272]	; (80131e8 <tcp_create_segment+0x128>)
 80130d8:	22a3      	movs	r2, #163	; 0xa3
 80130da:	4944      	ldr	r1, [pc, #272]	; (80131ec <tcp_create_segment+0x12c>)
 80130dc:	4844      	ldr	r0, [pc, #272]	; (80131f0 <tcp_create_segment+0x130>)
 80130de:	f007 f971 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d105      	bne.n	80130f4 <tcp_create_segment+0x34>
 80130e8:	4b3f      	ldr	r3, [pc, #252]	; (80131e8 <tcp_create_segment+0x128>)
 80130ea:	22a4      	movs	r2, #164	; 0xa4
 80130ec:	4941      	ldr	r1, [pc, #260]	; (80131f4 <tcp_create_segment+0x134>)
 80130ee:	4840      	ldr	r0, [pc, #256]	; (80131f0 <tcp_create_segment+0x130>)
 80130f0:	f007 f968 	bl	801a3c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80130f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	b2db      	uxtb	r3, r3
 80130fc:	f003 0304 	and.w	r3, r3, #4
 8013100:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013102:	2003      	movs	r0, #3
 8013104:	f7fa fc62 	bl	800d9cc <memp_malloc>
 8013108:	6138      	str	r0, [r7, #16]
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d104      	bne.n	801311a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013110:	68b8      	ldr	r0, [r7, #8]
 8013112:	f7fb fb91 	bl	800e838 <pbuf_free>
    return NULL;
 8013116:	2300      	movs	r3, #0
 8013118:	e061      	b.n	80131de <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013120:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	2200      	movs	r2, #0
 8013126:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013128:	693b      	ldr	r3, [r7, #16]
 801312a:	68ba      	ldr	r2, [r7, #8]
 801312c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	891a      	ldrh	r2, [r3, #8]
 8013132:	7dfb      	ldrb	r3, [r7, #23]
 8013134:	b29b      	uxth	r3, r3
 8013136:	429a      	cmp	r2, r3
 8013138:	d205      	bcs.n	8013146 <tcp_create_segment+0x86>
 801313a:	4b2b      	ldr	r3, [pc, #172]	; (80131e8 <tcp_create_segment+0x128>)
 801313c:	22b0      	movs	r2, #176	; 0xb0
 801313e:	492e      	ldr	r1, [pc, #184]	; (80131f8 <tcp_create_segment+0x138>)
 8013140:	482b      	ldr	r0, [pc, #172]	; (80131f0 <tcp_create_segment+0x130>)
 8013142:	f007 f93f 	bl	801a3c4 <iprintf>
  seg->len = p->tot_len - optlen;
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	891a      	ldrh	r2, [r3, #8]
 801314a:	7dfb      	ldrb	r3, [r7, #23]
 801314c:	b29b      	uxth	r3, r3
 801314e:	1ad3      	subs	r3, r2, r3
 8013150:	b29a      	uxth	r2, r3
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013156:	2114      	movs	r1, #20
 8013158:	68b8      	ldr	r0, [r7, #8]
 801315a:	f7fb fad7 	bl	800e70c <pbuf_add_header>
 801315e:	4603      	mov	r3, r0
 8013160:	2b00      	cmp	r3, #0
 8013162:	d004      	beq.n	801316e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013164:	6938      	ldr	r0, [r7, #16]
 8013166:	f7fd f807 	bl	8010178 <tcp_seg_free>
    return NULL;
 801316a:	2300      	movs	r3, #0
 801316c:	e037      	b.n	80131de <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	685a      	ldr	r2, [r3, #4]
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	8ada      	ldrh	r2, [r3, #22]
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	68dc      	ldr	r4, [r3, #12]
 8013180:	4610      	mov	r0, r2
 8013182:	f7f9 ff6d 	bl	800d060 <lwip_htons>
 8013186:	4603      	mov	r3, r0
 8013188:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	8b1a      	ldrh	r2, [r3, #24]
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	68dc      	ldr	r4, [r3, #12]
 8013192:	4610      	mov	r0, r2
 8013194:	f7f9 ff64 	bl	800d060 <lwip_htons>
 8013198:	4603      	mov	r3, r0
 801319a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	68dc      	ldr	r4, [r3, #12]
 80131a0:	6838      	ldr	r0, [r7, #0]
 80131a2:	f7f9 ff72 	bl	800d08a <lwip_htonl>
 80131a6:	4603      	mov	r3, r0
 80131a8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80131aa:	7dfb      	ldrb	r3, [r7, #23]
 80131ac:	089b      	lsrs	r3, r3, #2
 80131ae:	b2db      	uxtb	r3, r3
 80131b0:	b29b      	uxth	r3, r3
 80131b2:	3305      	adds	r3, #5
 80131b4:	b29b      	uxth	r3, r3
 80131b6:	031b      	lsls	r3, r3, #12
 80131b8:	b29a      	uxth	r2, r3
 80131ba:	79fb      	ldrb	r3, [r7, #7]
 80131bc:	b29b      	uxth	r3, r3
 80131be:	4313      	orrs	r3, r2
 80131c0:	b29a      	uxth	r2, r3
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	68dc      	ldr	r4, [r3, #12]
 80131c6:	4610      	mov	r0, r2
 80131c8:	f7f9 ff4a 	bl	800d060 <lwip_htons>
 80131cc:	4603      	mov	r3, r0
 80131ce:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	2200      	movs	r2, #0
 80131d6:	749a      	strb	r2, [r3, #18]
 80131d8:	2200      	movs	r2, #0
 80131da:	74da      	strb	r2, [r3, #19]
  return seg;
 80131dc:	693b      	ldr	r3, [r7, #16]
}
 80131de:	4618      	mov	r0, r3
 80131e0:	371c      	adds	r7, #28
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd90      	pop	{r4, r7, pc}
 80131e6:	bf00      	nop
 80131e8:	0801da7c 	.word	0x0801da7c
 80131ec:	0801dab0 	.word	0x0801dab0
 80131f0:	0801dad0 	.word	0x0801dad0
 80131f4:	0801daf8 	.word	0x0801daf8
 80131f8:	0801db1c 	.word	0x0801db1c

080131fc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b086      	sub	sp, #24
 8013200:	af00      	add	r7, sp, #0
 8013202:	607b      	str	r3, [r7, #4]
 8013204:	4603      	mov	r3, r0
 8013206:	73fb      	strb	r3, [r7, #15]
 8013208:	460b      	mov	r3, r1
 801320a:	81bb      	strh	r3, [r7, #12]
 801320c:	4613      	mov	r3, r2
 801320e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013210:	89bb      	ldrh	r3, [r7, #12]
 8013212:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d105      	bne.n	8013226 <tcp_pbuf_prealloc+0x2a>
 801321a:	4b30      	ldr	r3, [pc, #192]	; (80132dc <tcp_pbuf_prealloc+0xe0>)
 801321c:	22e8      	movs	r2, #232	; 0xe8
 801321e:	4930      	ldr	r1, [pc, #192]	; (80132e0 <tcp_pbuf_prealloc+0xe4>)
 8013220:	4830      	ldr	r0, [pc, #192]	; (80132e4 <tcp_pbuf_prealloc+0xe8>)
 8013222:	f007 f8cf 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013226:	6a3b      	ldr	r3, [r7, #32]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d105      	bne.n	8013238 <tcp_pbuf_prealloc+0x3c>
 801322c:	4b2b      	ldr	r3, [pc, #172]	; (80132dc <tcp_pbuf_prealloc+0xe0>)
 801322e:	22e9      	movs	r2, #233	; 0xe9
 8013230:	492d      	ldr	r1, [pc, #180]	; (80132e8 <tcp_pbuf_prealloc+0xec>)
 8013232:	482c      	ldr	r0, [pc, #176]	; (80132e4 <tcp_pbuf_prealloc+0xe8>)
 8013234:	f007 f8c6 	bl	801a3c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013238:	89ba      	ldrh	r2, [r7, #12]
 801323a:	897b      	ldrh	r3, [r7, #10]
 801323c:	429a      	cmp	r2, r3
 801323e:	d221      	bcs.n	8013284 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013240:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013244:	f003 0302 	and.w	r3, r3, #2
 8013248:	2b00      	cmp	r3, #0
 801324a:	d111      	bne.n	8013270 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801324c:	6a3b      	ldr	r3, [r7, #32]
 801324e:	8b5b      	ldrh	r3, [r3, #26]
 8013250:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013254:	2b00      	cmp	r3, #0
 8013256:	d115      	bne.n	8013284 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013258:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801325c:	2b00      	cmp	r3, #0
 801325e:	d007      	beq.n	8013270 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013260:	6a3b      	ldr	r3, [r7, #32]
 8013262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013264:	2b00      	cmp	r3, #0
 8013266:	d103      	bne.n	8013270 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013268:	6a3b      	ldr	r3, [r7, #32]
 801326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801326c:	2b00      	cmp	r3, #0
 801326e:	d009      	beq.n	8013284 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013270:	89bb      	ldrh	r3, [r7, #12]
 8013272:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013276:	f023 0203 	bic.w	r2, r3, #3
 801327a:	897b      	ldrh	r3, [r7, #10]
 801327c:	4293      	cmp	r3, r2
 801327e:	bf28      	it	cs
 8013280:	4613      	movcs	r3, r2
 8013282:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013284:	8af9      	ldrh	r1, [r7, #22]
 8013286:	7bfb      	ldrb	r3, [r7, #15]
 8013288:	f44f 7220 	mov.w	r2, #640	; 0x280
 801328c:	4618      	mov	r0, r3
 801328e:	f7fa fff3 	bl	800e278 <pbuf_alloc>
 8013292:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d101      	bne.n	801329e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801329a:	2300      	movs	r3, #0
 801329c:	e019      	b.n	80132d2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d006      	beq.n	80132b4 <tcp_pbuf_prealloc+0xb8>
 80132a6:	4b0d      	ldr	r3, [pc, #52]	; (80132dc <tcp_pbuf_prealloc+0xe0>)
 80132a8:	f240 120b 	movw	r2, #267	; 0x10b
 80132ac:	490f      	ldr	r1, [pc, #60]	; (80132ec <tcp_pbuf_prealloc+0xf0>)
 80132ae:	480d      	ldr	r0, [pc, #52]	; (80132e4 <tcp_pbuf_prealloc+0xe8>)
 80132b0:	f007 f888 	bl	801a3c4 <iprintf>
  *oversize = p->len - length;
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	895a      	ldrh	r2, [r3, #10]
 80132b8:	89bb      	ldrh	r3, [r7, #12]
 80132ba:	1ad3      	subs	r3, r2, r3
 80132bc:	b29a      	uxth	r2, r3
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	89ba      	ldrh	r2, [r7, #12]
 80132c6:	811a      	strh	r2, [r3, #8]
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	891a      	ldrh	r2, [r3, #8]
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	815a      	strh	r2, [r3, #10]
  return p;
 80132d0:	693b      	ldr	r3, [r7, #16]
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3718      	adds	r7, #24
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
 80132da:	bf00      	nop
 80132dc:	0801da7c 	.word	0x0801da7c
 80132e0:	0801db34 	.word	0x0801db34
 80132e4:	0801dad0 	.word	0x0801dad0
 80132e8:	0801db58 	.word	0x0801db58
 80132ec:	0801db78 	.word	0x0801db78

080132f0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
 80132f8:	460b      	mov	r3, r1
 80132fa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d106      	bne.n	8013310 <tcp_write_checks+0x20>
 8013302:	4b33      	ldr	r3, [pc, #204]	; (80133d0 <tcp_write_checks+0xe0>)
 8013304:	f240 1233 	movw	r2, #307	; 0x133
 8013308:	4932      	ldr	r1, [pc, #200]	; (80133d4 <tcp_write_checks+0xe4>)
 801330a:	4833      	ldr	r0, [pc, #204]	; (80133d8 <tcp_write_checks+0xe8>)
 801330c:	f007 f85a 	bl	801a3c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	7d1b      	ldrb	r3, [r3, #20]
 8013314:	2b04      	cmp	r3, #4
 8013316:	d00e      	beq.n	8013336 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801331c:	2b07      	cmp	r3, #7
 801331e:	d00a      	beq.n	8013336 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013324:	2b02      	cmp	r3, #2
 8013326:	d006      	beq.n	8013336 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801332c:	2b03      	cmp	r3, #3
 801332e:	d002      	beq.n	8013336 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013330:	f06f 030a 	mvn.w	r3, #10
 8013334:	e048      	b.n	80133c8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013336:	887b      	ldrh	r3, [r7, #2]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d101      	bne.n	8013340 <tcp_write_checks+0x50>
    return ERR_OK;
 801333c:	2300      	movs	r3, #0
 801333e:	e043      	b.n	80133c8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013346:	887a      	ldrh	r2, [r7, #2]
 8013348:	429a      	cmp	r2, r3
 801334a:	d909      	bls.n	8013360 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	8b5b      	ldrh	r3, [r3, #26]
 8013350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013354:	b29a      	uxth	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801335a:	f04f 33ff 	mov.w	r3, #4294967295
 801335e:	e033      	b.n	80133c8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013366:	2b08      	cmp	r3, #8
 8013368:	d909      	bls.n	801337e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	8b5b      	ldrh	r3, [r3, #26]
 801336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013372:	b29a      	uxth	r2, r3
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013378:	f04f 33ff 	mov.w	r3, #4294967295
 801337c:	e024      	b.n	80133c8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013384:	2b00      	cmp	r3, #0
 8013386:	d00f      	beq.n	80133a8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801338c:	2b00      	cmp	r3, #0
 801338e:	d11a      	bne.n	80133c6 <tcp_write_checks+0xd6>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013394:	2b00      	cmp	r3, #0
 8013396:	d116      	bne.n	80133c6 <tcp_write_checks+0xd6>
 8013398:	4b0d      	ldr	r3, [pc, #52]	; (80133d0 <tcp_write_checks+0xe0>)
 801339a:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801339e:	490f      	ldr	r1, [pc, #60]	; (80133dc <tcp_write_checks+0xec>)
 80133a0:	480d      	ldr	r0, [pc, #52]	; (80133d8 <tcp_write_checks+0xe8>)
 80133a2:	f007 f80f 	bl	801a3c4 <iprintf>
 80133a6:	e00e      	b.n	80133c6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d103      	bne.n	80133b8 <tcp_write_checks+0xc8>
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d006      	beq.n	80133c6 <tcp_write_checks+0xd6>
 80133b8:	4b05      	ldr	r3, [pc, #20]	; (80133d0 <tcp_write_checks+0xe0>)
 80133ba:	f240 1259 	movw	r2, #345	; 0x159
 80133be:	4908      	ldr	r1, [pc, #32]	; (80133e0 <tcp_write_checks+0xf0>)
 80133c0:	4805      	ldr	r0, [pc, #20]	; (80133d8 <tcp_write_checks+0xe8>)
 80133c2:	f006 ffff 	bl	801a3c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80133c6:	2300      	movs	r3, #0
}
 80133c8:	4618      	mov	r0, r3
 80133ca:	3708      	adds	r7, #8
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	0801da7c 	.word	0x0801da7c
 80133d4:	0801db8c 	.word	0x0801db8c
 80133d8:	0801dad0 	.word	0x0801dad0
 80133dc:	0801dbac 	.word	0x0801dbac
 80133e0:	0801dbe8 	.word	0x0801dbe8

080133e4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80133e4:	b590      	push	{r4, r7, lr}
 80133e6:	b09b      	sub	sp, #108	; 0x6c
 80133e8:	af04      	add	r7, sp, #16
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	60b9      	str	r1, [r7, #8]
 80133ee:	4611      	mov	r1, r2
 80133f0:	461a      	mov	r2, r3
 80133f2:	460b      	mov	r3, r1
 80133f4:	80fb      	strh	r3, [r7, #6]
 80133f6:	4613      	mov	r3, r2
 80133f8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80133fa:	2300      	movs	r3, #0
 80133fc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80133fe:	2300      	movs	r3, #0
 8013400:	653b      	str	r3, [r7, #80]	; 0x50
 8013402:	2300      	movs	r3, #0
 8013404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013406:	2300      	movs	r3, #0
 8013408:	64bb      	str	r3, [r7, #72]	; 0x48
 801340a:	2300      	movs	r3, #0
 801340c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801340e:	2300      	movs	r3, #0
 8013410:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013414:	2300      	movs	r3, #0
 8013416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801341a:	2300      	movs	r3, #0
 801341c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801341e:	2300      	movs	r3, #0
 8013420:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013422:	2300      	movs	r3, #0
 8013424:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d109      	bne.n	8013440 <tcp_write+0x5c>
 801342c:	4ba5      	ldr	r3, [pc, #660]	; (80136c4 <tcp_write+0x2e0>)
 801342e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013432:	49a5      	ldr	r1, [pc, #660]	; (80136c8 <tcp_write+0x2e4>)
 8013434:	48a5      	ldr	r0, [pc, #660]	; (80136cc <tcp_write+0x2e8>)
 8013436:	f006 ffc5 	bl	801a3c4 <iprintf>
 801343a:	f06f 030f 	mvn.w	r3, #15
 801343e:	e32c      	b.n	8013a9a <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013446:	085b      	lsrs	r3, r3, #1
 8013448:	b29a      	uxth	r2, r3
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801344e:	4293      	cmp	r3, r2
 8013450:	bf28      	it	cs
 8013452:	4613      	movcs	r3, r2
 8013454:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013458:	2b00      	cmp	r3, #0
 801345a:	d102      	bne.n	8013462 <tcp_write+0x7e>
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013460:	e000      	b.n	8013464 <tcp_write+0x80>
 8013462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013464:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d109      	bne.n	8013480 <tcp_write+0x9c>
 801346c:	4b95      	ldr	r3, [pc, #596]	; (80136c4 <tcp_write+0x2e0>)
 801346e:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8013472:	4997      	ldr	r1, [pc, #604]	; (80136d0 <tcp_write+0x2ec>)
 8013474:	4895      	ldr	r0, [pc, #596]	; (80136cc <tcp_write+0x2e8>)
 8013476:	f006 ffa5 	bl	801a3c4 <iprintf>
 801347a:	f06f 030f 	mvn.w	r3, #15
 801347e:	e30c      	b.n	8013a9a <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013480:	88fb      	ldrh	r3, [r7, #6]
 8013482:	4619      	mov	r1, r3
 8013484:	68f8      	ldr	r0, [r7, #12]
 8013486:	f7ff ff33 	bl	80132f0 <tcp_write_checks>
 801348a:	4603      	mov	r3, r0
 801348c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013490:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013494:	2b00      	cmp	r3, #0
 8013496:	d002      	beq.n	801349e <tcp_write+0xba>
    return err;
 8013498:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801349c:	e2fd      	b.n	8013a9a <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134a8:	2300      	movs	r3, #0
 80134aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	f000 80f7 	beq.w	80136a6 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134bc:	653b      	str	r3, [r7, #80]	; 0x50
 80134be:	e002      	b.n	80134c6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80134c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80134c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d1f8      	bne.n	80134c0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80134ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134d0:	7a9b      	ldrb	r3, [r3, #10]
 80134d2:	009b      	lsls	r3, r3, #2
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	f003 0304 	and.w	r3, r3, #4
 80134da:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80134dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80134de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134e0:	891b      	ldrh	r3, [r3, #8]
 80134e2:	4619      	mov	r1, r3
 80134e4:	8c3b      	ldrh	r3, [r7, #32]
 80134e6:	440b      	add	r3, r1
 80134e8:	429a      	cmp	r2, r3
 80134ea:	da06      	bge.n	80134fa <tcp_write+0x116>
 80134ec:	4b75      	ldr	r3, [pc, #468]	; (80136c4 <tcp_write+0x2e0>)
 80134ee:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80134f2:	4978      	ldr	r1, [pc, #480]	; (80136d4 <tcp_write+0x2f0>)
 80134f4:	4875      	ldr	r0, [pc, #468]	; (80136cc <tcp_write+0x2e8>)
 80134f6:	f006 ff65 	bl	801a3c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80134fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134fc:	891a      	ldrh	r2, [r3, #8]
 80134fe:	8c3b      	ldrh	r3, [r7, #32]
 8013500:	4413      	add	r3, r2
 8013502:	b29b      	uxth	r3, r3
 8013504:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013506:	1ad3      	subs	r3, r2, r3
 8013508:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013510:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013512:	8a7b      	ldrh	r3, [r7, #18]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d027      	beq.n	8013568 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013518:	8a7b      	ldrh	r3, [r7, #18]
 801351a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801351c:	429a      	cmp	r2, r3
 801351e:	d206      	bcs.n	801352e <tcp_write+0x14a>
 8013520:	4b68      	ldr	r3, [pc, #416]	; (80136c4 <tcp_write+0x2e0>)
 8013522:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013526:	496c      	ldr	r1, [pc, #432]	; (80136d8 <tcp_write+0x2f4>)
 8013528:	4868      	ldr	r0, [pc, #416]	; (80136cc <tcp_write+0x2e8>)
 801352a:	f006 ff4b 	bl	801a3c4 <iprintf>
      seg = last_unsent;
 801352e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013530:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013532:	8a7b      	ldrh	r3, [r7, #18]
 8013534:	88fa      	ldrh	r2, [r7, #6]
 8013536:	429a      	cmp	r2, r3
 8013538:	d901      	bls.n	801353e <tcp_write+0x15a>
 801353a:	8a7b      	ldrh	r3, [r7, #18]
 801353c:	e000      	b.n	8013540 <tcp_write+0x15c>
 801353e:	88fb      	ldrh	r3, [r7, #6]
 8013540:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013542:	4293      	cmp	r3, r2
 8013544:	bfa8      	it	ge
 8013546:	4613      	movge	r3, r2
 8013548:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801354a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801354e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013550:	4413      	add	r3, r2
 8013552:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013556:	8a7a      	ldrh	r2, [r7, #18]
 8013558:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801355a:	1ad3      	subs	r3, r2, r3
 801355c:	b29b      	uxth	r3, r3
 801355e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013560:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013562:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013564:	1ad3      	subs	r3, r2, r3
 8013566:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013568:	8a7b      	ldrh	r3, [r7, #18]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d00b      	beq.n	8013586 <tcp_write+0x1a2>
 801356e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013572:	88fb      	ldrh	r3, [r7, #6]
 8013574:	429a      	cmp	r2, r3
 8013576:	d006      	beq.n	8013586 <tcp_write+0x1a2>
 8013578:	4b52      	ldr	r3, [pc, #328]	; (80136c4 <tcp_write+0x2e0>)
 801357a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801357e:	4957      	ldr	r1, [pc, #348]	; (80136dc <tcp_write+0x2f8>)
 8013580:	4852      	ldr	r0, [pc, #328]	; (80136cc <tcp_write+0x2e8>)
 8013582:	f006 ff1f 	bl	801a3c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013586:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801358a:	88fb      	ldrh	r3, [r7, #6]
 801358c:	429a      	cmp	r2, r3
 801358e:	f080 8168 	bcs.w	8013862 <tcp_write+0x47e>
 8013592:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013594:	2b00      	cmp	r3, #0
 8013596:	f000 8164 	beq.w	8013862 <tcp_write+0x47e>
 801359a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801359c:	891b      	ldrh	r3, [r3, #8]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	f000 815f 	beq.w	8013862 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80135a4:	88fa      	ldrh	r2, [r7, #6]
 80135a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135aa:	1ad2      	subs	r2, r2, r3
 80135ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135ae:	4293      	cmp	r3, r2
 80135b0:	bfa8      	it	ge
 80135b2:	4613      	movge	r3, r2
 80135b4:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80135b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135b8:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80135ba:	797b      	ldrb	r3, [r7, #5]
 80135bc:	f003 0301 	and.w	r3, r3, #1
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d027      	beq.n	8013614 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80135c4:	f107 0012 	add.w	r0, r7, #18
 80135c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80135ca:	8bf9      	ldrh	r1, [r7, #30]
 80135cc:	2301      	movs	r3, #1
 80135ce:	9302      	str	r3, [sp, #8]
 80135d0:	797b      	ldrb	r3, [r7, #5]
 80135d2:	9301      	str	r3, [sp, #4]
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	9300      	str	r3, [sp, #0]
 80135d8:	4603      	mov	r3, r0
 80135da:	2000      	movs	r0, #0
 80135dc:	f7ff fe0e 	bl	80131fc <tcp_pbuf_prealloc>
 80135e0:	6578      	str	r0, [r7, #84]	; 0x54
 80135e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	f000 8226 	beq.w	8013a36 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80135ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135ec:	6858      	ldr	r0, [r3, #4]
 80135ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135f2:	68ba      	ldr	r2, [r7, #8]
 80135f4:	4413      	add	r3, r2
 80135f6:	8bfa      	ldrh	r2, [r7, #30]
 80135f8:	4619      	mov	r1, r3
 80135fa:	f006 fecf 	bl	801a39c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80135fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013600:	f7fb f9a8 	bl	800e954 <pbuf_clen>
 8013604:	4603      	mov	r3, r0
 8013606:	461a      	mov	r2, r3
 8013608:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801360c:	4413      	add	r3, r2
 801360e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013612:	e041      	b.n	8013698 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013616:	685b      	ldr	r3, [r3, #4]
 8013618:	637b      	str	r3, [r7, #52]	; 0x34
 801361a:	e002      	b.n	8013622 <tcp_write+0x23e>
 801361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	637b      	str	r3, [r7, #52]	; 0x34
 8013622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d1f8      	bne.n	801361c <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801362c:	7b1b      	ldrb	r3, [r3, #12]
 801362e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013632:	2b00      	cmp	r3, #0
 8013634:	d115      	bne.n	8013662 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801363c:	8952      	ldrh	r2, [r2, #10]
 801363e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013640:	68ba      	ldr	r2, [r7, #8]
 8013642:	429a      	cmp	r2, r3
 8013644:	d10d      	bne.n	8013662 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013646:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801364a:	2b00      	cmp	r3, #0
 801364c:	d006      	beq.n	801365c <tcp_write+0x278>
 801364e:	4b1d      	ldr	r3, [pc, #116]	; (80136c4 <tcp_write+0x2e0>)
 8013650:	f240 2231 	movw	r2, #561	; 0x231
 8013654:	4922      	ldr	r1, [pc, #136]	; (80136e0 <tcp_write+0x2fc>)
 8013656:	481d      	ldr	r0, [pc, #116]	; (80136cc <tcp_write+0x2e8>)
 8013658:	f006 feb4 	bl	801a3c4 <iprintf>
          extendlen = seglen;
 801365c:	8bfb      	ldrh	r3, [r7, #30]
 801365e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013660:	e01a      	b.n	8013698 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013662:	8bfb      	ldrh	r3, [r7, #30]
 8013664:	2201      	movs	r2, #1
 8013666:	4619      	mov	r1, r3
 8013668:	2000      	movs	r0, #0
 801366a:	f7fa fe05 	bl	800e278 <pbuf_alloc>
 801366e:	6578      	str	r0, [r7, #84]	; 0x54
 8013670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013672:	2b00      	cmp	r3, #0
 8013674:	f000 81e1 	beq.w	8013a3a <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801367c:	68ba      	ldr	r2, [r7, #8]
 801367e:	441a      	add	r2, r3
 8013680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013682:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013684:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013686:	f7fb f965 	bl	800e954 <pbuf_clen>
 801368a:	4603      	mov	r3, r0
 801368c:	461a      	mov	r2, r3
 801368e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013692:	4413      	add	r3, r2
 8013694:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013698:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801369c:	8bfb      	ldrh	r3, [r7, #30]
 801369e:	4413      	add	r3, r2
 80136a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80136a4:	e0dd      	b.n	8013862 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f000 80d8 	beq.w	8013862 <tcp_write+0x47e>
 80136b2:	4b04      	ldr	r3, [pc, #16]	; (80136c4 <tcp_write+0x2e0>)
 80136b4:	f240 224b 	movw	r2, #587	; 0x24b
 80136b8:	490a      	ldr	r1, [pc, #40]	; (80136e4 <tcp_write+0x300>)
 80136ba:	4804      	ldr	r0, [pc, #16]	; (80136cc <tcp_write+0x2e8>)
 80136bc:	f006 fe82 	bl	801a3c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80136c0:	e0cf      	b.n	8013862 <tcp_write+0x47e>
 80136c2:	bf00      	nop
 80136c4:	0801da7c 	.word	0x0801da7c
 80136c8:	0801dc1c 	.word	0x0801dc1c
 80136cc:	0801dad0 	.word	0x0801dad0
 80136d0:	0801dc34 	.word	0x0801dc34
 80136d4:	0801dc68 	.word	0x0801dc68
 80136d8:	0801dc80 	.word	0x0801dc80
 80136dc:	0801dca0 	.word	0x0801dca0
 80136e0:	0801dcc0 	.word	0x0801dcc0
 80136e4:	0801dcec 	.word	0x0801dcec
    struct pbuf *p;
    u16_t left = len - pos;
 80136e8:	88fa      	ldrh	r2, [r7, #6]
 80136ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136ee:	1ad3      	subs	r3, r2, r3
 80136f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80136f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80136f6:	b29b      	uxth	r3, r3
 80136f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80136fa:	1ad3      	subs	r3, r2, r3
 80136fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80136fe:	8b7a      	ldrh	r2, [r7, #26]
 8013700:	8bbb      	ldrh	r3, [r7, #28]
 8013702:	4293      	cmp	r3, r2
 8013704:	bf28      	it	cs
 8013706:	4613      	movcs	r3, r2
 8013708:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801370a:	797b      	ldrb	r3, [r7, #5]
 801370c:	f003 0301 	and.w	r3, r3, #1
 8013710:	2b00      	cmp	r3, #0
 8013712:	d036      	beq.n	8013782 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013714:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013718:	b29a      	uxth	r2, r3
 801371a:	8b3b      	ldrh	r3, [r7, #24]
 801371c:	4413      	add	r3, r2
 801371e:	b299      	uxth	r1, r3
 8013720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013722:	2b00      	cmp	r3, #0
 8013724:	bf0c      	ite	eq
 8013726:	2301      	moveq	r3, #1
 8013728:	2300      	movne	r3, #0
 801372a:	b2db      	uxtb	r3, r3
 801372c:	f107 0012 	add.w	r0, r7, #18
 8013730:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013732:	9302      	str	r3, [sp, #8]
 8013734:	797b      	ldrb	r3, [r7, #5]
 8013736:	9301      	str	r3, [sp, #4]
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	9300      	str	r3, [sp, #0]
 801373c:	4603      	mov	r3, r0
 801373e:	2036      	movs	r0, #54	; 0x36
 8013740:	f7ff fd5c 	bl	80131fc <tcp_pbuf_prealloc>
 8013744:	6338      	str	r0, [r7, #48]	; 0x30
 8013746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013748:	2b00      	cmp	r3, #0
 801374a:	f000 8178 	beq.w	8013a3e <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013750:	895b      	ldrh	r3, [r3, #10]
 8013752:	8b3a      	ldrh	r2, [r7, #24]
 8013754:	429a      	cmp	r2, r3
 8013756:	d906      	bls.n	8013766 <tcp_write+0x382>
 8013758:	4b8c      	ldr	r3, [pc, #560]	; (801398c <tcp_write+0x5a8>)
 801375a:	f240 2267 	movw	r2, #615	; 0x267
 801375e:	498c      	ldr	r1, [pc, #560]	; (8013990 <tcp_write+0x5ac>)
 8013760:	488c      	ldr	r0, [pc, #560]	; (8013994 <tcp_write+0x5b0>)
 8013762:	f006 fe2f 	bl	801a3c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013768:	685a      	ldr	r2, [r3, #4]
 801376a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801376e:	18d0      	adds	r0, r2, r3
 8013770:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013774:	68ba      	ldr	r2, [r7, #8]
 8013776:	4413      	add	r3, r2
 8013778:	8b3a      	ldrh	r2, [r7, #24]
 801377a:	4619      	mov	r1, r3
 801377c:	f006 fe0e 	bl	801a39c <memcpy>
 8013780:	e02f      	b.n	80137e2 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013782:	8a7b      	ldrh	r3, [r7, #18]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d006      	beq.n	8013796 <tcp_write+0x3b2>
 8013788:	4b80      	ldr	r3, [pc, #512]	; (801398c <tcp_write+0x5a8>)
 801378a:	f240 2271 	movw	r2, #625	; 0x271
 801378e:	4982      	ldr	r1, [pc, #520]	; (8013998 <tcp_write+0x5b4>)
 8013790:	4880      	ldr	r0, [pc, #512]	; (8013994 <tcp_write+0x5b0>)
 8013792:	f006 fe17 	bl	801a3c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013796:	8b3b      	ldrh	r3, [r7, #24]
 8013798:	2201      	movs	r2, #1
 801379a:	4619      	mov	r1, r3
 801379c:	2036      	movs	r0, #54	; 0x36
 801379e:	f7fa fd6b 	bl	800e278 <pbuf_alloc>
 80137a2:	6178      	str	r0, [r7, #20]
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	f000 814b 	beq.w	8013a42 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80137ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137b0:	68ba      	ldr	r2, [r7, #8]
 80137b2:	441a      	add	r2, r3
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80137b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80137bc:	b29b      	uxth	r3, r3
 80137be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80137c2:	4619      	mov	r1, r3
 80137c4:	2036      	movs	r0, #54	; 0x36
 80137c6:	f7fa fd57 	bl	800e278 <pbuf_alloc>
 80137ca:	6338      	str	r0, [r7, #48]	; 0x30
 80137cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d103      	bne.n	80137da <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80137d2:	6978      	ldr	r0, [r7, #20]
 80137d4:	f7fb f830 	bl	800e838 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80137d8:	e136      	b.n	8013a48 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80137da:	6979      	ldr	r1, [r7, #20]
 80137dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137de:	f7fb f8f9 	bl	800e9d4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80137e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137e4:	f7fb f8b6 	bl	800e954 <pbuf_clen>
 80137e8:	4603      	mov	r3, r0
 80137ea:	461a      	mov	r2, r3
 80137ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80137f0:	4413      	add	r3, r2
 80137f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80137f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80137fa:	2b09      	cmp	r3, #9
 80137fc:	d903      	bls.n	8013806 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80137fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013800:	f7fb f81a 	bl	800e838 <pbuf_free>
      goto memerr;
 8013804:	e120      	b.n	8013a48 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801380a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801380e:	441a      	add	r2, r3
 8013810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013814:	9300      	str	r3, [sp, #0]
 8013816:	4613      	mov	r3, r2
 8013818:	2200      	movs	r2, #0
 801381a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801381c:	68f8      	ldr	r0, [r7, #12]
 801381e:	f7ff fc4f 	bl	80130c0 <tcp_create_segment>
 8013822:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013826:	2b00      	cmp	r3, #0
 8013828:	f000 810d 	beq.w	8013a46 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801382c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801382e:	2b00      	cmp	r3, #0
 8013830:	d102      	bne.n	8013838 <tcp_write+0x454>
      queue = seg;
 8013832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013834:	647b      	str	r3, [r7, #68]	; 0x44
 8013836:	e00c      	b.n	8013852 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801383a:	2b00      	cmp	r3, #0
 801383c:	d106      	bne.n	801384c <tcp_write+0x468>
 801383e:	4b53      	ldr	r3, [pc, #332]	; (801398c <tcp_write+0x5a8>)
 8013840:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013844:	4955      	ldr	r1, [pc, #340]	; (801399c <tcp_write+0x5b8>)
 8013846:	4853      	ldr	r0, [pc, #332]	; (8013994 <tcp_write+0x5b0>)
 8013848:	f006 fdbc 	bl	801a3c4 <iprintf>
      prev_seg->next = seg;
 801384c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801384e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013850:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013854:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013856:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801385a:	8b3b      	ldrh	r3, [r7, #24]
 801385c:	4413      	add	r3, r2
 801385e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013862:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013866:	88fb      	ldrh	r3, [r7, #6]
 8013868:	429a      	cmp	r2, r3
 801386a:	f4ff af3d 	bcc.w	80136e8 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801386e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013870:	2b00      	cmp	r3, #0
 8013872:	d02c      	beq.n	80138ce <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	62fb      	str	r3, [r7, #44]	; 0x2c
 801387a:	e01e      	b.n	80138ba <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801387e:	891a      	ldrh	r2, [r3, #8]
 8013880:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013882:	4413      	add	r3, r2
 8013884:	b29a      	uxth	r2, r3
 8013886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013888:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d110      	bne.n	80138b4 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013898:	8952      	ldrh	r2, [r2, #10]
 801389a:	4413      	add	r3, r2
 801389c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801389e:	68b9      	ldr	r1, [r7, #8]
 80138a0:	4618      	mov	r0, r3
 80138a2:	f006 fd7b 	bl	801a39c <memcpy>
        p->len += oversize_used;
 80138a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a8:	895a      	ldrh	r2, [r3, #10]
 80138aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138ac:	4413      	add	r3, r2
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80138b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d1dd      	bne.n	801387c <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80138c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138c2:	891a      	ldrh	r2, [r3, #8]
 80138c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138c6:	4413      	add	r3, r2
 80138c8:	b29a      	uxth	r2, r3
 80138ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138cc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80138ce:	8a7a      	ldrh	r2, [r7, #18]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80138d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d018      	beq.n	801390e <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80138dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d106      	bne.n	80138f0 <tcp_write+0x50c>
 80138e2:	4b2a      	ldr	r3, [pc, #168]	; (801398c <tcp_write+0x5a8>)
 80138e4:	f240 22e1 	movw	r2, #737	; 0x2e1
 80138e8:	492d      	ldr	r1, [pc, #180]	; (80139a0 <tcp_write+0x5bc>)
 80138ea:	482a      	ldr	r0, [pc, #168]	; (8013994 <tcp_write+0x5b0>)
 80138ec:	f006 fd6a 	bl	801a3c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80138f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7fb f86c 	bl	800e9d4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80138fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138fe:	891a      	ldrh	r2, [r3, #8]
 8013900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013902:	891b      	ldrh	r3, [r3, #8]
 8013904:	4413      	add	r3, r2
 8013906:	b29a      	uxth	r2, r3
 8013908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801390a:	811a      	strh	r2, [r3, #8]
 801390c:	e037      	b.n	801397e <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801390e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013910:	2b00      	cmp	r3, #0
 8013912:	d034      	beq.n	801397e <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013916:	2b00      	cmp	r3, #0
 8013918:	d003      	beq.n	8013922 <tcp_write+0x53e>
 801391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801391c:	685b      	ldr	r3, [r3, #4]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d106      	bne.n	8013930 <tcp_write+0x54c>
 8013922:	4b1a      	ldr	r3, [pc, #104]	; (801398c <tcp_write+0x5a8>)
 8013924:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013928:	491e      	ldr	r1, [pc, #120]	; (80139a4 <tcp_write+0x5c0>)
 801392a:	481a      	ldr	r0, [pc, #104]	; (8013994 <tcp_write+0x5b0>)
 801392c:	f006 fd4a 	bl	801a3c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	62bb      	str	r3, [r7, #40]	; 0x28
 8013936:	e009      	b.n	801394c <tcp_write+0x568>
      p->tot_len += extendlen;
 8013938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801393a:	891a      	ldrh	r2, [r3, #8]
 801393c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801393e:	4413      	add	r3, r2
 8013940:	b29a      	uxth	r2, r3
 8013942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013944:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	62bb      	str	r3, [r7, #40]	; 0x28
 801394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d1f1      	bne.n	8013938 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8013954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013956:	891a      	ldrh	r2, [r3, #8]
 8013958:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801395a:	4413      	add	r3, r2
 801395c:	b29a      	uxth	r2, r3
 801395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013960:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013964:	895a      	ldrh	r2, [r3, #10]
 8013966:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013968:	4413      	add	r3, r2
 801396a:	b29a      	uxth	r2, r3
 801396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013972:	891a      	ldrh	r2, [r3, #8]
 8013974:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013976:	4413      	add	r3, r2
 8013978:	b29a      	uxth	r2, r3
 801397a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801397c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801397e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013980:	2b00      	cmp	r3, #0
 8013982:	d111      	bne.n	80139a8 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013988:	66da      	str	r2, [r3, #108]	; 0x6c
 801398a:	e010      	b.n	80139ae <tcp_write+0x5ca>
 801398c:	0801da7c 	.word	0x0801da7c
 8013990:	0801dd1c 	.word	0x0801dd1c
 8013994:	0801dad0 	.word	0x0801dad0
 8013998:	0801dd5c 	.word	0x0801dd5c
 801399c:	0801dd6c 	.word	0x0801dd6c
 80139a0:	0801dd80 	.word	0x0801dd80
 80139a4:	0801ddb8 	.word	0x0801ddb8
  } else {
    last_unsent->next = queue;
 80139a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139ac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80139b2:	88fb      	ldrh	r3, [r7, #6]
 80139b4:	441a      	add	r2, r3
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80139c0:	88fb      	ldrh	r3, [r7, #6]
 80139c2:	1ad3      	subs	r3, r2, r3
 80139c4:	b29a      	uxth	r2, r3
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80139d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d00e      	beq.n	80139fe <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d10a      	bne.n	80139fe <tcp_write+0x61a>
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d106      	bne.n	80139fe <tcp_write+0x61a>
 80139f0:	4b2c      	ldr	r3, [pc, #176]	; (8013aa4 <tcp_write+0x6c0>)
 80139f2:	f240 3213 	movw	r2, #787	; 0x313
 80139f6:	492c      	ldr	r1, [pc, #176]	; (8013aa8 <tcp_write+0x6c4>)
 80139f8:	482c      	ldr	r0, [pc, #176]	; (8013aac <tcp_write+0x6c8>)
 80139fa:	f006 fce3 	bl	801a3c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80139fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d016      	beq.n	8013a32 <tcp_write+0x64e>
 8013a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a06:	68db      	ldr	r3, [r3, #12]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d012      	beq.n	8013a32 <tcp_write+0x64e>
 8013a0c:	797b      	ldrb	r3, [r7, #5]
 8013a0e:	f003 0302 	and.w	r3, r3, #2
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d10d      	bne.n	8013a32 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a18:	68db      	ldr	r3, [r3, #12]
 8013a1a:	899b      	ldrh	r3, [r3, #12]
 8013a1c:	b29c      	uxth	r4, r3
 8013a1e:	2008      	movs	r0, #8
 8013a20:	f7f9 fb1e 	bl	800d060 <lwip_htons>
 8013a24:	4603      	mov	r3, r0
 8013a26:	461a      	mov	r2, r3
 8013a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a2a:	68db      	ldr	r3, [r3, #12]
 8013a2c:	4322      	orrs	r2, r4
 8013a2e:	b292      	uxth	r2, r2
 8013a30:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013a32:	2300      	movs	r3, #0
 8013a34:	e031      	b.n	8013a9a <tcp_write+0x6b6>
          goto memerr;
 8013a36:	bf00      	nop
 8013a38:	e006      	b.n	8013a48 <tcp_write+0x664>
            goto memerr;
 8013a3a:	bf00      	nop
 8013a3c:	e004      	b.n	8013a48 <tcp_write+0x664>
        goto memerr;
 8013a3e:	bf00      	nop
 8013a40:	e002      	b.n	8013a48 <tcp_write+0x664>
        goto memerr;
 8013a42:	bf00      	nop
 8013a44:	e000      	b.n	8013a48 <tcp_write+0x664>
      goto memerr;
 8013a46:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	8b5b      	ldrh	r3, [r3, #26]
 8013a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a50:	b29a      	uxth	r2, r3
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d002      	beq.n	8013a62 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8013a5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013a5e:	f7fa feeb 	bl	800e838 <pbuf_free>
  }
  if (queue != NULL) {
 8013a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d002      	beq.n	8013a6e <tcp_write+0x68a>
    tcp_segs_free(queue);
 8013a68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013a6a:	f7fc fb71 	bl	8010150 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d00e      	beq.n	8013a96 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d10a      	bne.n	8013a96 <tcp_write+0x6b2>
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d106      	bne.n	8013a96 <tcp_write+0x6b2>
 8013a88:	4b06      	ldr	r3, [pc, #24]	; (8013aa4 <tcp_write+0x6c0>)
 8013a8a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8013a8e:	4906      	ldr	r1, [pc, #24]	; (8013aa8 <tcp_write+0x6c4>)
 8013a90:	4806      	ldr	r0, [pc, #24]	; (8013aac <tcp_write+0x6c8>)
 8013a92:	f006 fc97 	bl	801a3c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	375c      	adds	r7, #92	; 0x5c
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd90      	pop	{r4, r7, pc}
 8013aa2:	bf00      	nop
 8013aa4:	0801da7c 	.word	0x0801da7c
 8013aa8:	0801ddf0 	.word	0x0801ddf0
 8013aac:	0801dad0 	.word	0x0801dad0

08013ab0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013ab0:	b590      	push	{r4, r7, lr}
 8013ab2:	b08b      	sub	sp, #44	; 0x2c
 8013ab4:	af02      	add	r7, sp, #8
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	460b      	mov	r3, r1
 8013aba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013abc:	2300      	movs	r3, #0
 8013abe:	61fb      	str	r3, [r7, #28]
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d106      	bne.n	8013adc <tcp_split_unsent_seg+0x2c>
 8013ace:	4b95      	ldr	r3, [pc, #596]	; (8013d24 <tcp_split_unsent_seg+0x274>)
 8013ad0:	f240 324b 	movw	r2, #843	; 0x34b
 8013ad4:	4994      	ldr	r1, [pc, #592]	; (8013d28 <tcp_split_unsent_seg+0x278>)
 8013ad6:	4895      	ldr	r0, [pc, #596]	; (8013d2c <tcp_split_unsent_seg+0x27c>)
 8013ad8:	f006 fc74 	bl	801a3c4 <iprintf>

  useg = pcb->unsent;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ae0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d102      	bne.n	8013aee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8013aec:	e116      	b.n	8013d1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013aee:	887b      	ldrh	r3, [r7, #2]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d109      	bne.n	8013b08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013af4:	4b8b      	ldr	r3, [pc, #556]	; (8013d24 <tcp_split_unsent_seg+0x274>)
 8013af6:	f240 3253 	movw	r2, #851	; 0x353
 8013afa:	498d      	ldr	r1, [pc, #564]	; (8013d30 <tcp_split_unsent_seg+0x280>)
 8013afc:	488b      	ldr	r0, [pc, #556]	; (8013d2c <tcp_split_unsent_seg+0x27c>)
 8013afe:	f006 fc61 	bl	801a3c4 <iprintf>
    return ERR_VAL;
 8013b02:	f06f 0305 	mvn.w	r3, #5
 8013b06:	e109      	b.n	8013d1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	891b      	ldrh	r3, [r3, #8]
 8013b0c:	887a      	ldrh	r2, [r7, #2]
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d301      	bcc.n	8013b16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013b12:	2300      	movs	r3, #0
 8013b14:	e102      	b.n	8013d1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b1a:	887a      	ldrh	r2, [r7, #2]
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d906      	bls.n	8013b2e <tcp_split_unsent_seg+0x7e>
 8013b20:	4b80      	ldr	r3, [pc, #512]	; (8013d24 <tcp_split_unsent_seg+0x274>)
 8013b22:	f240 325b 	movw	r2, #859	; 0x35b
 8013b26:	4983      	ldr	r1, [pc, #524]	; (8013d34 <tcp_split_unsent_seg+0x284>)
 8013b28:	4880      	ldr	r0, [pc, #512]	; (8013d2c <tcp_split_unsent_seg+0x27c>)
 8013b2a:	f006 fc4b 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	891b      	ldrh	r3, [r3, #8]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d106      	bne.n	8013b44 <tcp_split_unsent_seg+0x94>
 8013b36:	4b7b      	ldr	r3, [pc, #492]	; (8013d24 <tcp_split_unsent_seg+0x274>)
 8013b38:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013b3c:	497e      	ldr	r1, [pc, #504]	; (8013d38 <tcp_split_unsent_seg+0x288>)
 8013b3e:	487b      	ldr	r0, [pc, #492]	; (8013d2c <tcp_split_unsent_seg+0x27c>)
 8013b40:	f006 fc40 	bl	801a3c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	7a9b      	ldrb	r3, [r3, #10]
 8013b48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013b4a:	7bfb      	ldrb	r3, [r7, #15]
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	b2db      	uxtb	r3, r3
 8013b50:	f003 0304 	and.w	r3, r3, #4
 8013b54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	891a      	ldrh	r2, [r3, #8]
 8013b5a:	887b      	ldrh	r3, [r7, #2]
 8013b5c:	1ad3      	subs	r3, r2, r3
 8013b5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013b60:	7bbb      	ldrb	r3, [r7, #14]
 8013b62:	b29a      	uxth	r2, r3
 8013b64:	89bb      	ldrh	r3, [r7, #12]
 8013b66:	4413      	add	r3, r2
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b6e:	4619      	mov	r1, r3
 8013b70:	2036      	movs	r0, #54	; 0x36
 8013b72:	f7fa fb81 	bl	800e278 <pbuf_alloc>
 8013b76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	f000 80b7 	beq.w	8013cee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	685b      	ldr	r3, [r3, #4]
 8013b84:	891a      	ldrh	r2, [r3, #8]
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	891b      	ldrh	r3, [r3, #8]
 8013b8a:	1ad3      	subs	r3, r2, r3
 8013b8c:	b29a      	uxth	r2, r3
 8013b8e:	887b      	ldrh	r3, [r7, #2]
 8013b90:	4413      	add	r3, r2
 8013b92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	6858      	ldr	r0, [r3, #4]
 8013b98:	693b      	ldr	r3, [r7, #16]
 8013b9a:	685a      	ldr	r2, [r3, #4]
 8013b9c:	7bbb      	ldrb	r3, [r7, #14]
 8013b9e:	18d1      	adds	r1, r2, r3
 8013ba0:	897b      	ldrh	r3, [r7, #10]
 8013ba2:	89ba      	ldrh	r2, [r7, #12]
 8013ba4:	f7fb f84e 	bl	800ec44 <pbuf_copy_partial>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	461a      	mov	r2, r3
 8013bac:	89bb      	ldrh	r3, [r7, #12]
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	f040 809f 	bne.w	8013cf2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	899b      	ldrh	r3, [r3, #12]
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7f9 fa4f 	bl	800d060 <lwip_htons>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	b2db      	uxtb	r3, r3
 8013bc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013bca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013bcc:	2300      	movs	r3, #0
 8013bce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013bd0:	7efb      	ldrb	r3, [r7, #27]
 8013bd2:	f003 0308 	and.w	r3, r3, #8
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d007      	beq.n	8013bea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013bda:	7efb      	ldrb	r3, [r7, #27]
 8013bdc:	f023 0308 	bic.w	r3, r3, #8
 8013be0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013be2:	7ebb      	ldrb	r3, [r7, #26]
 8013be4:	f043 0308 	orr.w	r3, r3, #8
 8013be8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013bea:	7efb      	ldrb	r3, [r7, #27]
 8013bec:	f003 0301 	and.w	r3, r3, #1
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d007      	beq.n	8013c04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013bf4:	7efb      	ldrb	r3, [r7, #27]
 8013bf6:	f023 0301 	bic.w	r3, r3, #1
 8013bfa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013bfc:	7ebb      	ldrb	r3, [r7, #26]
 8013bfe:	f043 0301 	orr.w	r3, r3, #1
 8013c02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7f9 fa3d 	bl	800d08a <lwip_htonl>
 8013c10:	4602      	mov	r2, r0
 8013c12:	887b      	ldrh	r3, [r7, #2]
 8013c14:	18d1      	adds	r1, r2, r3
 8013c16:	7eba      	ldrb	r2, [r7, #26]
 8013c18:	7bfb      	ldrb	r3, [r7, #15]
 8013c1a:	9300      	str	r3, [sp, #0]
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	6939      	ldr	r1, [r7, #16]
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7ff fa4d 	bl	80130c0 <tcp_create_segment>
 8013c26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013c28:	69fb      	ldr	r3, [r7, #28]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d063      	beq.n	8013cf6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	685b      	ldr	r3, [r3, #4]
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fa fe8e 	bl	800e954 <pbuf_clen>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	461a      	mov	r2, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c42:	1a9b      	subs	r3, r3, r2
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	6858      	ldr	r0, [r3, #4]
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	891a      	ldrh	r2, [r3, #8]
 8013c56:	89bb      	ldrh	r3, [r7, #12]
 8013c58:	1ad3      	subs	r3, r2, r3
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	f7fa fc65 	bl	800e52c <pbuf_realloc>
  useg->len -= remainder;
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	891a      	ldrh	r2, [r3, #8]
 8013c66:	89bb      	ldrh	r3, [r7, #12]
 8013c68:	1ad3      	subs	r3, r2, r3
 8013c6a:	b29a      	uxth	r2, r3
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013c70:	697b      	ldr	r3, [r7, #20]
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	899b      	ldrh	r3, [r3, #12]
 8013c76:	b29c      	uxth	r4, r3
 8013c78:	7efb      	ldrb	r3, [r7, #27]
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7f9 f9ef 	bl	800d060 <lwip_htons>
 8013c82:	4603      	mov	r3, r0
 8013c84:	461a      	mov	r2, r3
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	68db      	ldr	r3, [r3, #12]
 8013c8a:	4322      	orrs	r2, r4
 8013c8c:	b292      	uxth	r2, r2
 8013c8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	685b      	ldr	r3, [r3, #4]
 8013c94:	4618      	mov	r0, r3
 8013c96:	f7fa fe5d 	bl	800e954 <pbuf_clen>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ca4:	4413      	add	r3, r2
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013cae:	69fb      	ldr	r3, [r7, #28]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fa fe4e 	bl	800e954 <pbuf_clen>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	461a      	mov	r2, r3
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cc2:	4413      	add	r3, r2
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	69fa      	ldr	r2, [r7, #28]
 8013cd8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013cda:	69fb      	ldr	r3, [r7, #28]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d103      	bne.n	8013cea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013cea:	2300      	movs	r3, #0
 8013cec:	e016      	b.n	8013d1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013cee:	bf00      	nop
 8013cf0:	e002      	b.n	8013cf8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013cf2:	bf00      	nop
 8013cf4:	e000      	b.n	8013cf8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013cf6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013cf8:	69fb      	ldr	r3, [r7, #28]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d006      	beq.n	8013d0c <tcp_split_unsent_seg+0x25c>
 8013cfe:	4b09      	ldr	r3, [pc, #36]	; (8013d24 <tcp_split_unsent_seg+0x274>)
 8013d00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013d04:	490d      	ldr	r1, [pc, #52]	; (8013d3c <tcp_split_unsent_seg+0x28c>)
 8013d06:	4809      	ldr	r0, [pc, #36]	; (8013d2c <tcp_split_unsent_seg+0x27c>)
 8013d08:	f006 fb5c 	bl	801a3c4 <iprintf>
  if (p != NULL) {
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d002      	beq.n	8013d18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013d12:	6938      	ldr	r0, [r7, #16]
 8013d14:	f7fa fd90 	bl	800e838 <pbuf_free>
  }

  return ERR_MEM;
 8013d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3724      	adds	r7, #36	; 0x24
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd90      	pop	{r4, r7, pc}
 8013d24:	0801da7c 	.word	0x0801da7c
 8013d28:	0801de10 	.word	0x0801de10
 8013d2c:	0801dad0 	.word	0x0801dad0
 8013d30:	0801de34 	.word	0x0801de34
 8013d34:	0801de58 	.word	0x0801de58
 8013d38:	0801de68 	.word	0x0801de68
 8013d3c:	0801de78 	.word	0x0801de78

08013d40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013d40:	b590      	push	{r4, r7, lr}
 8013d42:	b085      	sub	sp, #20
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d106      	bne.n	8013d5c <tcp_send_fin+0x1c>
 8013d4e:	4b21      	ldr	r3, [pc, #132]	; (8013dd4 <tcp_send_fin+0x94>)
 8013d50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013d54:	4920      	ldr	r1, [pc, #128]	; (8013dd8 <tcp_send_fin+0x98>)
 8013d56:	4821      	ldr	r0, [pc, #132]	; (8013ddc <tcp_send_fin+0x9c>)
 8013d58:	f006 fb34 	bl	801a3c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d02e      	beq.n	8013dc2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d68:	60fb      	str	r3, [r7, #12]
 8013d6a:	e002      	b.n	8013d72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d1f8      	bne.n	8013d6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	68db      	ldr	r3, [r3, #12]
 8013d7e:	899b      	ldrh	r3, [r3, #12]
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7f9 f96c 	bl	800d060 <lwip_htons>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	b2db      	uxtb	r3, r3
 8013d8c:	f003 0307 	and.w	r3, r3, #7
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d116      	bne.n	8013dc2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	68db      	ldr	r3, [r3, #12]
 8013d98:	899b      	ldrh	r3, [r3, #12]
 8013d9a:	b29c      	uxth	r4, r3
 8013d9c:	2001      	movs	r0, #1
 8013d9e:	f7f9 f95f 	bl	800d060 <lwip_htons>
 8013da2:	4603      	mov	r3, r0
 8013da4:	461a      	mov	r2, r3
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	4322      	orrs	r2, r4
 8013dac:	b292      	uxth	r2, r2
 8013dae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	8b5b      	ldrh	r3, [r3, #26]
 8013db4:	f043 0320 	orr.w	r3, r3, #32
 8013db8:	b29a      	uxth	r2, r3
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	e004      	b.n	8013dcc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013dc2:	2101      	movs	r1, #1
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f000 f80b 	bl	8013de0 <tcp_enqueue_flags>
 8013dca:	4603      	mov	r3, r0
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3714      	adds	r7, #20
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd90      	pop	{r4, r7, pc}
 8013dd4:	0801da7c 	.word	0x0801da7c
 8013dd8:	0801de84 	.word	0x0801de84
 8013ddc:	0801dad0 	.word	0x0801dad0

08013de0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b08a      	sub	sp, #40	; 0x28
 8013de4:	af02      	add	r7, sp, #8
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	460b      	mov	r3, r1
 8013dea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013dec:	2300      	movs	r3, #0
 8013dee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013df0:	2300      	movs	r3, #0
 8013df2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013df4:	78fb      	ldrb	r3, [r7, #3]
 8013df6:	f003 0303 	and.w	r3, r3, #3
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d106      	bne.n	8013e0c <tcp_enqueue_flags+0x2c>
 8013dfe:	4b67      	ldr	r3, [pc, #412]	; (8013f9c <tcp_enqueue_flags+0x1bc>)
 8013e00:	f240 4212 	movw	r2, #1042	; 0x412
 8013e04:	4966      	ldr	r1, [pc, #408]	; (8013fa0 <tcp_enqueue_flags+0x1c0>)
 8013e06:	4867      	ldr	r0, [pc, #412]	; (8013fa4 <tcp_enqueue_flags+0x1c4>)
 8013e08:	f006 fadc 	bl	801a3c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d106      	bne.n	8013e20 <tcp_enqueue_flags+0x40>
 8013e12:	4b62      	ldr	r3, [pc, #392]	; (8013f9c <tcp_enqueue_flags+0x1bc>)
 8013e14:	f240 4213 	movw	r2, #1043	; 0x413
 8013e18:	4963      	ldr	r1, [pc, #396]	; (8013fa8 <tcp_enqueue_flags+0x1c8>)
 8013e1a:	4862      	ldr	r0, [pc, #392]	; (8013fa4 <tcp_enqueue_flags+0x1c4>)
 8013e1c:	f006 fad2 	bl	801a3c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013e20:	78fb      	ldrb	r3, [r7, #3]
 8013e22:	f003 0302 	and.w	r3, r3, #2
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d001      	beq.n	8013e2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013e2e:	7ffb      	ldrb	r3, [r7, #31]
 8013e30:	009b      	lsls	r3, r3, #2
 8013e32:	b2db      	uxtb	r3, r3
 8013e34:	f003 0304 	and.w	r3, r3, #4
 8013e38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013e3a:	7dfb      	ldrb	r3, [r7, #23]
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e42:	4619      	mov	r1, r3
 8013e44:	2036      	movs	r0, #54	; 0x36
 8013e46:	f7fa fa17 	bl	800e278 <pbuf_alloc>
 8013e4a:	6138      	str	r0, [r7, #16]
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d109      	bne.n	8013e66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	8b5b      	ldrh	r3, [r3, #26]
 8013e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e5a:	b29a      	uxth	r2, r3
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013e60:	f04f 33ff 	mov.w	r3, #4294967295
 8013e64:	e095      	b.n	8013f92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	895a      	ldrh	r2, [r3, #10]
 8013e6a:	7dfb      	ldrb	r3, [r7, #23]
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d206      	bcs.n	8013e80 <tcp_enqueue_flags+0xa0>
 8013e72:	4b4a      	ldr	r3, [pc, #296]	; (8013f9c <tcp_enqueue_flags+0x1bc>)
 8013e74:	f240 423a 	movw	r2, #1082	; 0x43a
 8013e78:	494c      	ldr	r1, [pc, #304]	; (8013fac <tcp_enqueue_flags+0x1cc>)
 8013e7a:	484a      	ldr	r0, [pc, #296]	; (8013fa4 <tcp_enqueue_flags+0x1c4>)
 8013e7c:	f006 faa2 	bl	801a3c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013e84:	78fa      	ldrb	r2, [r7, #3]
 8013e86:	7ffb      	ldrb	r3, [r7, #31]
 8013e88:	9300      	str	r3, [sp, #0]
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	6939      	ldr	r1, [r7, #16]
 8013e8e:	6878      	ldr	r0, [r7, #4]
 8013e90:	f7ff f916 	bl	80130c0 <tcp_create_segment>
 8013e94:	60f8      	str	r0, [r7, #12]
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d109      	bne.n	8013eb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	8b5b      	ldrh	r3, [r3, #26]
 8013ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ea4:	b29a      	uxth	r2, r3
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8013eae:	e070      	b.n	8013f92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	68db      	ldr	r3, [r3, #12]
 8013eb4:	f003 0303 	and.w	r3, r3, #3
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d006      	beq.n	8013eca <tcp_enqueue_flags+0xea>
 8013ebc:	4b37      	ldr	r3, [pc, #220]	; (8013f9c <tcp_enqueue_flags+0x1bc>)
 8013ebe:	f240 4242 	movw	r2, #1090	; 0x442
 8013ec2:	493b      	ldr	r1, [pc, #236]	; (8013fb0 <tcp_enqueue_flags+0x1d0>)
 8013ec4:	4837      	ldr	r0, [pc, #220]	; (8013fa4 <tcp_enqueue_flags+0x1c4>)
 8013ec6:	f006 fa7d 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	891b      	ldrh	r3, [r3, #8]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d006      	beq.n	8013ee0 <tcp_enqueue_flags+0x100>
 8013ed2:	4b32      	ldr	r3, [pc, #200]	; (8013f9c <tcp_enqueue_flags+0x1bc>)
 8013ed4:	f240 4243 	movw	r2, #1091	; 0x443
 8013ed8:	4936      	ldr	r1, [pc, #216]	; (8013fb4 <tcp_enqueue_flags+0x1d4>)
 8013eda:	4832      	ldr	r0, [pc, #200]	; (8013fa4 <tcp_enqueue_flags+0x1c4>)
 8013edc:	f006 fa72 	bl	801a3c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d103      	bne.n	8013ef0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	68fa      	ldr	r2, [r7, #12]
 8013eec:	66da      	str	r2, [r3, #108]	; 0x6c
 8013eee:	e00d      	b.n	8013f0c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ef4:	61bb      	str	r3, [r7, #24]
 8013ef6:	e002      	b.n	8013efe <tcp_enqueue_flags+0x11e>
 8013ef8:	69bb      	ldr	r3, [r7, #24]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	61bb      	str	r3, [r7, #24]
 8013efe:	69bb      	ldr	r3, [r7, #24]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d1f8      	bne.n	8013ef8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013f06:	69bb      	ldr	r3, [r7, #24]
 8013f08:	68fa      	ldr	r2, [r7, #12]
 8013f0a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013f14:	78fb      	ldrb	r3, [r7, #3]
 8013f16:	f003 0302 	and.w	r3, r3, #2
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d104      	bne.n	8013f28 <tcp_enqueue_flags+0x148>
 8013f1e:	78fb      	ldrb	r3, [r7, #3]
 8013f20:	f003 0301 	and.w	r3, r3, #1
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d004      	beq.n	8013f32 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f2c:	1c5a      	adds	r2, r3, #1
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013f32:	78fb      	ldrb	r3, [r7, #3]
 8013f34:	f003 0301 	and.w	r3, r3, #1
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d006      	beq.n	8013f4a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	8b5b      	ldrh	r3, [r3, #26]
 8013f40:	f043 0320 	orr.w	r3, r3, #32
 8013f44:	b29a      	uxth	r2, r3
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fa fd00 	bl	800e954 <pbuf_clen>
 8013f54:	4603      	mov	r3, r0
 8013f56:	461a      	mov	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f5e:	4413      	add	r3, r2
 8013f60:	b29a      	uxth	r2, r3
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d00e      	beq.n	8013f90 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d10a      	bne.n	8013f90 <tcp_enqueue_flags+0x1b0>
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d106      	bne.n	8013f90 <tcp_enqueue_flags+0x1b0>
 8013f82:	4b06      	ldr	r3, [pc, #24]	; (8013f9c <tcp_enqueue_flags+0x1bc>)
 8013f84:	f240 4266 	movw	r2, #1126	; 0x466
 8013f88:	490b      	ldr	r1, [pc, #44]	; (8013fb8 <tcp_enqueue_flags+0x1d8>)
 8013f8a:	4806      	ldr	r0, [pc, #24]	; (8013fa4 <tcp_enqueue_flags+0x1c4>)
 8013f8c:	f006 fa1a 	bl	801a3c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013f90:	2300      	movs	r3, #0
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3720      	adds	r7, #32
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
 8013f9a:	bf00      	nop
 8013f9c:	0801da7c 	.word	0x0801da7c
 8013fa0:	0801dea0 	.word	0x0801dea0
 8013fa4:	0801dad0 	.word	0x0801dad0
 8013fa8:	0801def8 	.word	0x0801def8
 8013fac:	0801df18 	.word	0x0801df18
 8013fb0:	0801df54 	.word	0x0801df54
 8013fb4:	0801df6c 	.word	0x0801df6c
 8013fb8:	0801df98 	.word	0x0801df98

08013fbc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013fbc:	b5b0      	push	{r4, r5, r7, lr}
 8013fbe:	b08a      	sub	sp, #40	; 0x28
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d106      	bne.n	8013fd8 <tcp_output+0x1c>
 8013fca:	4ba0      	ldr	r3, [pc, #640]	; (801424c <tcp_output+0x290>)
 8013fcc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013fd0:	499f      	ldr	r1, [pc, #636]	; (8014250 <tcp_output+0x294>)
 8013fd2:	48a0      	ldr	r0, [pc, #640]	; (8014254 <tcp_output+0x298>)
 8013fd4:	f006 f9f6 	bl	801a3c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	7d1b      	ldrb	r3, [r3, #20]
 8013fdc:	2b01      	cmp	r3, #1
 8013fde:	d106      	bne.n	8013fee <tcp_output+0x32>
 8013fe0:	4b9a      	ldr	r3, [pc, #616]	; (801424c <tcp_output+0x290>)
 8013fe2:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8013fe6:	499c      	ldr	r1, [pc, #624]	; (8014258 <tcp_output+0x29c>)
 8013fe8:	489a      	ldr	r0, [pc, #616]	; (8014254 <tcp_output+0x298>)
 8013fea:	f006 f9eb 	bl	801a3c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013fee:	4b9b      	ldr	r3, [pc, #620]	; (801425c <tcp_output+0x2a0>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d101      	bne.n	8013ffc <tcp_output+0x40>
    return ERR_OK;
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	e1d2      	b.n	80143a2 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014008:	429a      	cmp	r2, r3
 801400a:	d203      	bcs.n	8014014 <tcp_output+0x58>
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014012:	e002      	b.n	801401a <tcp_output+0x5e>
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801401a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014020:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014024:	2b00      	cmp	r3, #0
 8014026:	d10b      	bne.n	8014040 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	8b5b      	ldrh	r3, [r3, #26]
 801402c:	f003 0302 	and.w	r3, r3, #2
 8014030:	2b00      	cmp	r3, #0
 8014032:	f000 81a9 	beq.w	8014388 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f000 fdd6 	bl	8014be8 <tcp_send_empty_ack>
 801403c:	4603      	mov	r3, r0
 801403e:	e1b0      	b.n	80143a2 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014040:	6879      	ldr	r1, [r7, #4]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	3304      	adds	r3, #4
 8014046:	461a      	mov	r2, r3
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f7ff f81d 	bl	8013088 <tcp_route>
 801404e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d102      	bne.n	801405c <tcp_output+0xa0>
    return ERR_RTE;
 8014056:	f06f 0303 	mvn.w	r3, #3
 801405a:	e1a2      	b.n	80143a2 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d003      	beq.n	801406a <tcp_output+0xae>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d111      	bne.n	801408e <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d002      	beq.n	8014076 <tcp_output+0xba>
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	3304      	adds	r3, #4
 8014074:	e000      	b.n	8014078 <tcp_output+0xbc>
 8014076:	2300      	movs	r3, #0
 8014078:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d102      	bne.n	8014086 <tcp_output+0xca>
      return ERR_RTE;
 8014080:	f06f 0303 	mvn.w	r3, #3
 8014084:	e18d      	b.n	80143a2 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014090:	68db      	ldr	r3, [r3, #12]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	4618      	mov	r0, r3
 8014096:	f7f8 fff8 	bl	800d08a <lwip_htonl>
 801409a:	4602      	mov	r2, r0
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140a0:	1ad3      	subs	r3, r2, r3
 80140a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140a4:	8912      	ldrh	r2, [r2, #8]
 80140a6:	4413      	add	r3, r2
 80140a8:	69ba      	ldr	r2, [r7, #24]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d227      	bcs.n	80140fe <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140b4:	461a      	mov	r2, r3
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	4293      	cmp	r3, r2
 80140ba:	d114      	bne.n	80140e6 <tcp_output+0x12a>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d110      	bne.n	80140e6 <tcp_output+0x12a>
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d10b      	bne.n	80140e6 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2200      	movs	r2, #0
 80140d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2201      	movs	r2, #1
 80140da:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2200      	movs	r2, #0
 80140e2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	8b5b      	ldrh	r3, [r3, #26]
 80140ea:	f003 0302 	and.w	r3, r3, #2
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	f000 814c 	beq.w	801438c <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f000 fd77 	bl	8014be8 <tcp_send_empty_ack>
 80140fa:	4603      	mov	r3, r0
 80140fc:	e151      	b.n	80143a2 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2200      	movs	r2, #0
 8014102:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801410a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801410c:	6a3b      	ldr	r3, [r7, #32]
 801410e:	2b00      	cmp	r3, #0
 8014110:	f000 811b 	beq.w	801434a <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8014114:	e002      	b.n	801411c <tcp_output+0x160>
 8014116:	6a3b      	ldr	r3, [r7, #32]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	623b      	str	r3, [r7, #32]
 801411c:	6a3b      	ldr	r3, [r7, #32]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d1f8      	bne.n	8014116 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014124:	e111      	b.n	801434a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014128:	68db      	ldr	r3, [r3, #12]
 801412a:	899b      	ldrh	r3, [r3, #12]
 801412c:	b29b      	uxth	r3, r3
 801412e:	4618      	mov	r0, r3
 8014130:	f7f8 ff96 	bl	800d060 <lwip_htons>
 8014134:	4603      	mov	r3, r0
 8014136:	b2db      	uxtb	r3, r3
 8014138:	f003 0304 	and.w	r3, r3, #4
 801413c:	2b00      	cmp	r3, #0
 801413e:	d006      	beq.n	801414e <tcp_output+0x192>
 8014140:	4b42      	ldr	r3, [pc, #264]	; (801424c <tcp_output+0x290>)
 8014142:	f240 5237 	movw	r2, #1335	; 0x537
 8014146:	4946      	ldr	r1, [pc, #280]	; (8014260 <tcp_output+0x2a4>)
 8014148:	4842      	ldr	r0, [pc, #264]	; (8014254 <tcp_output+0x298>)
 801414a:	f006 f93b 	bl	801a3c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014152:	2b00      	cmp	r3, #0
 8014154:	d01f      	beq.n	8014196 <tcp_output+0x1da>
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	8b5b      	ldrh	r3, [r3, #26]
 801415a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801415e:	2b00      	cmp	r3, #0
 8014160:	d119      	bne.n	8014196 <tcp_output+0x1da>
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014166:	2b00      	cmp	r3, #0
 8014168:	d00b      	beq.n	8014182 <tcp_output+0x1c6>
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d110      	bne.n	8014196 <tcp_output+0x1da>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014178:	891a      	ldrh	r2, [r3, #8]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801417e:	429a      	cmp	r2, r3
 8014180:	d209      	bcs.n	8014196 <tcp_output+0x1da>
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014188:	2b00      	cmp	r3, #0
 801418a:	d004      	beq.n	8014196 <tcp_output+0x1da>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014192:	2b08      	cmp	r3, #8
 8014194:	d901      	bls.n	801419a <tcp_output+0x1de>
 8014196:	2301      	movs	r3, #1
 8014198:	e000      	b.n	801419c <tcp_output+0x1e0>
 801419a:	2300      	movs	r3, #0
 801419c:	2b00      	cmp	r3, #0
 801419e:	d106      	bne.n	80141ae <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	8b5b      	ldrh	r3, [r3, #26]
 80141a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	f000 80e3 	beq.w	8014374 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	7d1b      	ldrb	r3, [r3, #20]
 80141b2:	2b02      	cmp	r3, #2
 80141b4:	d00d      	beq.n	80141d2 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80141b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b8:	68db      	ldr	r3, [r3, #12]
 80141ba:	899b      	ldrh	r3, [r3, #12]
 80141bc:	b29c      	uxth	r4, r3
 80141be:	2010      	movs	r0, #16
 80141c0:	f7f8 ff4e 	bl	800d060 <lwip_htons>
 80141c4:	4603      	mov	r3, r0
 80141c6:	461a      	mov	r2, r3
 80141c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	4322      	orrs	r2, r4
 80141ce:	b292      	uxth	r2, r2
 80141d0:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80141d2:	697a      	ldr	r2, [r7, #20]
 80141d4:	6879      	ldr	r1, [r7, #4]
 80141d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141d8:	f000 f908 	bl	80143ec <tcp_output_segment>
 80141dc:	4603      	mov	r3, r0
 80141de:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80141e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d009      	beq.n	80141fc <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	8b5b      	ldrh	r3, [r3, #26]
 80141ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141f0:	b29a      	uxth	r2, r3
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	835a      	strh	r2, [r3, #26]
      return err;
 80141f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141fa:	e0d2      	b.n	80143a2 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80141fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	7d1b      	ldrb	r3, [r3, #20]
 8014208:	2b02      	cmp	r3, #2
 801420a:	d006      	beq.n	801421a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	8b5b      	ldrh	r3, [r3, #26]
 8014210:	f023 0303 	bic.w	r3, r3, #3
 8014214:	b29a      	uxth	r2, r3
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421c:	68db      	ldr	r3, [r3, #12]
 801421e:	685b      	ldr	r3, [r3, #4]
 8014220:	4618      	mov	r0, r3
 8014222:	f7f8 ff32 	bl	800d08a <lwip_htonl>
 8014226:	4604      	mov	r4, r0
 8014228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422a:	891b      	ldrh	r3, [r3, #8]
 801422c:	461d      	mov	r5, r3
 801422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014230:	68db      	ldr	r3, [r3, #12]
 8014232:	899b      	ldrh	r3, [r3, #12]
 8014234:	b29b      	uxth	r3, r3
 8014236:	4618      	mov	r0, r3
 8014238:	f7f8 ff12 	bl	800d060 <lwip_htons>
 801423c:	4603      	mov	r3, r0
 801423e:	b2db      	uxtb	r3, r3
 8014240:	f003 0303 	and.w	r3, r3, #3
 8014244:	2b00      	cmp	r3, #0
 8014246:	d00d      	beq.n	8014264 <tcp_output+0x2a8>
 8014248:	2301      	movs	r3, #1
 801424a:	e00c      	b.n	8014266 <tcp_output+0x2aa>
 801424c:	0801da7c 	.word	0x0801da7c
 8014250:	0801dfc0 	.word	0x0801dfc0
 8014254:	0801dad0 	.word	0x0801dad0
 8014258:	0801dfd8 	.word	0x0801dfd8
 801425c:	2000bae4 	.word	0x2000bae4
 8014260:	0801e000 	.word	0x0801e000
 8014264:	2300      	movs	r3, #0
 8014266:	442b      	add	r3, r5
 8014268:	4423      	add	r3, r4
 801426a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	1ad3      	subs	r3, r2, r3
 8014274:	2b00      	cmp	r3, #0
 8014276:	da02      	bge.n	801427e <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	68ba      	ldr	r2, [r7, #8]
 801427c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014280:	891b      	ldrh	r3, [r3, #8]
 8014282:	461c      	mov	r4, r3
 8014284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	899b      	ldrh	r3, [r3, #12]
 801428a:	b29b      	uxth	r3, r3
 801428c:	4618      	mov	r0, r3
 801428e:	f7f8 fee7 	bl	800d060 <lwip_htons>
 8014292:	4603      	mov	r3, r0
 8014294:	b2db      	uxtb	r3, r3
 8014296:	f003 0303 	and.w	r3, r3, #3
 801429a:	2b00      	cmp	r3, #0
 801429c:	d001      	beq.n	80142a2 <tcp_output+0x2e6>
 801429e:	2301      	movs	r3, #1
 80142a0:	e000      	b.n	80142a4 <tcp_output+0x2e8>
 80142a2:	2300      	movs	r3, #0
 80142a4:	4423      	add	r3, r4
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d049      	beq.n	801433e <tcp_output+0x382>
      seg->next = NULL;
 80142aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ac:	2200      	movs	r2, #0
 80142ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d105      	bne.n	80142c4 <tcp_output+0x308>
        pcb->unacked = seg;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142bc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80142be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c0:	623b      	str	r3, [r7, #32]
 80142c2:	e03f      	b.n	8014344 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80142c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c6:	68db      	ldr	r3, [r3, #12]
 80142c8:	685b      	ldr	r3, [r3, #4]
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7f8 fedd 	bl	800d08a <lwip_htonl>
 80142d0:	4604      	mov	r4, r0
 80142d2:	6a3b      	ldr	r3, [r7, #32]
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	4618      	mov	r0, r3
 80142da:	f7f8 fed6 	bl	800d08a <lwip_htonl>
 80142de:	4603      	mov	r3, r0
 80142e0:	1ae3      	subs	r3, r4, r3
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	da24      	bge.n	8014330 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	3370      	adds	r3, #112	; 0x70
 80142ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80142ec:	e002      	b.n	80142f4 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80142ee:	69fb      	ldr	r3, [r7, #28]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80142f4:	69fb      	ldr	r3, [r7, #28]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d011      	beq.n	8014320 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	68db      	ldr	r3, [r3, #12]
 8014302:	685b      	ldr	r3, [r3, #4]
 8014304:	4618      	mov	r0, r3
 8014306:	f7f8 fec0 	bl	800d08a <lwip_htonl>
 801430a:	4604      	mov	r4, r0
 801430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430e:	68db      	ldr	r3, [r3, #12]
 8014310:	685b      	ldr	r3, [r3, #4]
 8014312:	4618      	mov	r0, r3
 8014314:	f7f8 feb9 	bl	800d08a <lwip_htonl>
 8014318:	4603      	mov	r3, r0
 801431a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801431c:	2b00      	cmp	r3, #0
 801431e:	dbe6      	blt.n	80142ee <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8014320:	69fb      	ldr	r3, [r7, #28]
 8014322:	681a      	ldr	r2, [r3, #0]
 8014324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014326:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801432c:	601a      	str	r2, [r3, #0]
 801432e:	e009      	b.n	8014344 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014330:	6a3b      	ldr	r3, [r7, #32]
 8014332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014334:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014336:	6a3b      	ldr	r3, [r7, #32]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	623b      	str	r3, [r7, #32]
 801433c:	e002      	b.n	8014344 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801433e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014340:	f7fb ff1a 	bl	8010178 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014348:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434c:	2b00      	cmp	r3, #0
 801434e:	d012      	beq.n	8014376 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014352:	68db      	ldr	r3, [r3, #12]
 8014354:	685b      	ldr	r3, [r3, #4]
 8014356:	4618      	mov	r0, r3
 8014358:	f7f8 fe97 	bl	800d08a <lwip_htonl>
 801435c:	4602      	mov	r2, r0
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014362:	1ad3      	subs	r3, r2, r3
 8014364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014366:	8912      	ldrh	r2, [r2, #8]
 8014368:	4413      	add	r3, r2
  while (seg != NULL &&
 801436a:	69ba      	ldr	r2, [r7, #24]
 801436c:	429a      	cmp	r2, r3
 801436e:	f4bf aeda 	bcs.w	8014126 <tcp_output+0x16a>
 8014372:	e000      	b.n	8014376 <tcp_output+0x3ba>
      break;
 8014374:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801437a:	2b00      	cmp	r3, #0
 801437c:	d108      	bne.n	8014390 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2200      	movs	r2, #0
 8014382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014386:	e004      	b.n	8014392 <tcp_output+0x3d6>
    goto output_done;
 8014388:	bf00      	nop
 801438a:	e002      	b.n	8014392 <tcp_output+0x3d6>
    goto output_done;
 801438c:	bf00      	nop
 801438e:	e000      	b.n	8014392 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014390:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	8b5b      	ldrh	r3, [r3, #26]
 8014396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801439a:	b29a      	uxth	r2, r3
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80143a0:	2300      	movs	r3, #0
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3728      	adds	r7, #40	; 0x28
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bdb0      	pop	{r4, r5, r7, pc}
 80143aa:	bf00      	nop

080143ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d106      	bne.n	80143c8 <tcp_output_segment_busy+0x1c>
 80143ba:	4b09      	ldr	r3, [pc, #36]	; (80143e0 <tcp_output_segment_busy+0x34>)
 80143bc:	f240 529a 	movw	r2, #1434	; 0x59a
 80143c0:	4908      	ldr	r1, [pc, #32]	; (80143e4 <tcp_output_segment_busy+0x38>)
 80143c2:	4809      	ldr	r0, [pc, #36]	; (80143e8 <tcp_output_segment_busy+0x3c>)
 80143c4:	f005 fffe 	bl	801a3c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	685b      	ldr	r3, [r3, #4]
 80143cc:	7b9b      	ldrb	r3, [r3, #14]
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d001      	beq.n	80143d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80143d2:	2301      	movs	r3, #1
 80143d4:	e000      	b.n	80143d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80143d6:	2300      	movs	r3, #0
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3708      	adds	r7, #8
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}
 80143e0:	0801da7c 	.word	0x0801da7c
 80143e4:	0801e018 	.word	0x0801e018
 80143e8:	0801dad0 	.word	0x0801dad0

080143ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80143ec:	b5b0      	push	{r4, r5, r7, lr}
 80143ee:	b08c      	sub	sp, #48	; 0x30
 80143f0:	af04      	add	r7, sp, #16
 80143f2:	60f8      	str	r0, [r7, #12]
 80143f4:	60b9      	str	r1, [r7, #8]
 80143f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d106      	bne.n	801440c <tcp_output_segment+0x20>
 80143fe:	4b64      	ldr	r3, [pc, #400]	; (8014590 <tcp_output_segment+0x1a4>)
 8014400:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014404:	4963      	ldr	r1, [pc, #396]	; (8014594 <tcp_output_segment+0x1a8>)
 8014406:	4864      	ldr	r0, [pc, #400]	; (8014598 <tcp_output_segment+0x1ac>)
 8014408:	f005 ffdc 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d106      	bne.n	8014420 <tcp_output_segment+0x34>
 8014412:	4b5f      	ldr	r3, [pc, #380]	; (8014590 <tcp_output_segment+0x1a4>)
 8014414:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014418:	4960      	ldr	r1, [pc, #384]	; (801459c <tcp_output_segment+0x1b0>)
 801441a:	485f      	ldr	r0, [pc, #380]	; (8014598 <tcp_output_segment+0x1ac>)
 801441c:	f005 ffd2 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <tcp_output_segment+0x48>
 8014426:	4b5a      	ldr	r3, [pc, #360]	; (8014590 <tcp_output_segment+0x1a4>)
 8014428:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801442c:	495c      	ldr	r1, [pc, #368]	; (80145a0 <tcp_output_segment+0x1b4>)
 801442e:	485a      	ldr	r0, [pc, #360]	; (8014598 <tcp_output_segment+0x1ac>)
 8014430:	f005 ffc8 	bl	801a3c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014434:	68f8      	ldr	r0, [r7, #12]
 8014436:	f7ff ffb9 	bl	80143ac <tcp_output_segment_busy>
 801443a:	4603      	mov	r3, r0
 801443c:	2b00      	cmp	r3, #0
 801443e:	d001      	beq.n	8014444 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014440:	2300      	movs	r3, #0
 8014442:	e0a0      	b.n	8014586 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	68dc      	ldr	r4, [r3, #12]
 801444c:	4610      	mov	r0, r2
 801444e:	f7f8 fe1c 	bl	800d08a <lwip_htonl>
 8014452:	4603      	mov	r3, r0
 8014454:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	68dc      	ldr	r4, [r3, #12]
 801445e:	4610      	mov	r0, r2
 8014460:	f7f8 fdfe 	bl	800d060 <lwip_htons>
 8014464:	4603      	mov	r3, r0
 8014466:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801446c:	68ba      	ldr	r2, [r7, #8]
 801446e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014470:	441a      	add	r2, r3
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	68db      	ldr	r3, [r3, #12]
 801447a:	3314      	adds	r3, #20
 801447c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	7a9b      	ldrb	r3, [r3, #10]
 8014482:	f003 0301 	and.w	r3, r3, #1
 8014486:	2b00      	cmp	r3, #0
 8014488:	d015      	beq.n	80144b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	3304      	adds	r3, #4
 801448e:	461a      	mov	r2, r3
 8014490:	6879      	ldr	r1, [r7, #4]
 8014492:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014496:	f7fc fa33 	bl	8010900 <tcp_eff_send_mss_netif>
 801449a:	4603      	mov	r3, r0
 801449c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801449e:	8b7b      	ldrh	r3, [r7, #26]
 80144a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7f8 fdf0 	bl	800d08a <lwip_htonl>
 80144aa:	4602      	mov	r2, r0
 80144ac:	69fb      	ldr	r3, [r7, #28]
 80144ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	3304      	adds	r3, #4
 80144b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80144bc:	2b00      	cmp	r3, #0
 80144be:	da02      	bge.n	80144c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	2200      	movs	r2, #0
 80144c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d10c      	bne.n	80144e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80144ce:	4b35      	ldr	r3, [pc, #212]	; (80145a4 <tcp_output_segment+0x1b8>)
 80144d0:	681a      	ldr	r2, [r3, #0]
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	68db      	ldr	r3, [r3, #12]
 80144da:	685b      	ldr	r3, [r3, #4]
 80144dc:	4618      	mov	r0, r3
 80144de:	f7f8 fdd4 	bl	800d08a <lwip_htonl>
 80144e2:	4602      	mov	r2, r0
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	461a      	mov	r2, r3
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	685b      	ldr	r3, [r3, #4]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	1ad3      	subs	r3, r2, r3
 80144f6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	685b      	ldr	r3, [r3, #4]
 80144fc:	8959      	ldrh	r1, [r3, #10]
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	8b3a      	ldrh	r2, [r7, #24]
 8014504:	1a8a      	subs	r2, r1, r2
 8014506:	b292      	uxth	r2, r2
 8014508:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	685b      	ldr	r3, [r3, #4]
 801450e:	8919      	ldrh	r1, [r3, #8]
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	685b      	ldr	r3, [r3, #4]
 8014514:	8b3a      	ldrh	r2, [r7, #24]
 8014516:	1a8a      	subs	r2, r1, r2
 8014518:	b292      	uxth	r2, r2
 801451a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	68fa      	ldr	r2, [r7, #12]
 8014522:	68d2      	ldr	r2, [r2, #12]
 8014524:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	68db      	ldr	r3, [r3, #12]
 801452a:	2200      	movs	r2, #0
 801452c:	741a      	strb	r2, [r3, #16]
 801452e:	2200      	movs	r2, #0
 8014530:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	68db      	ldr	r3, [r3, #12]
 8014536:	f103 0214 	add.w	r2, r3, #20
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	7a9b      	ldrb	r3, [r3, #10]
 801453e:	009b      	lsls	r3, r3, #2
 8014540:	f003 0304 	and.w	r3, r3, #4
 8014544:	4413      	add	r3, r2
 8014546:	69fa      	ldr	r2, [r7, #28]
 8014548:	429a      	cmp	r2, r3
 801454a:	d006      	beq.n	801455a <tcp_output_segment+0x16e>
 801454c:	4b10      	ldr	r3, [pc, #64]	; (8014590 <tcp_output_segment+0x1a4>)
 801454e:	f240 621c 	movw	r2, #1564	; 0x61c
 8014552:	4915      	ldr	r1, [pc, #84]	; (80145a8 <tcp_output_segment+0x1bc>)
 8014554:	4810      	ldr	r0, [pc, #64]	; (8014598 <tcp_output_segment+0x1ac>)
 8014556:	f005 ff35 	bl	801a3c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	6858      	ldr	r0, [r3, #4]
 801455e:	68b9      	ldr	r1, [r7, #8]
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	1d1c      	adds	r4, r3, #4
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	7add      	ldrb	r5, [r3, #11]
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	7a9b      	ldrb	r3, [r3, #10]
 801456c:	687a      	ldr	r2, [r7, #4]
 801456e:	9202      	str	r2, [sp, #8]
 8014570:	2206      	movs	r2, #6
 8014572:	9201      	str	r2, [sp, #4]
 8014574:	9300      	str	r3, [sp, #0]
 8014576:	462b      	mov	r3, r5
 8014578:	4622      	mov	r2, r4
 801457a:	f004 fce9 	bl	8018f50 <ip4_output_if>
 801457e:	4603      	mov	r3, r0
 8014580:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014586:	4618      	mov	r0, r3
 8014588:	3720      	adds	r7, #32
 801458a:	46bd      	mov	sp, r7
 801458c:	bdb0      	pop	{r4, r5, r7, pc}
 801458e:	bf00      	nop
 8014590:	0801da7c 	.word	0x0801da7c
 8014594:	0801e040 	.word	0x0801e040
 8014598:	0801dad0 	.word	0x0801dad0
 801459c:	0801e060 	.word	0x0801e060
 80145a0:	0801e080 	.word	0x0801e080
 80145a4:	2000bad4 	.word	0x2000bad4
 80145a8:	0801e0a4 	.word	0x0801e0a4

080145ac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80145ac:	b5b0      	push	{r4, r5, r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d106      	bne.n	80145c8 <tcp_rexmit_rto_prepare+0x1c>
 80145ba:	4b31      	ldr	r3, [pc, #196]	; (8014680 <tcp_rexmit_rto_prepare+0xd4>)
 80145bc:	f240 6263 	movw	r2, #1635	; 0x663
 80145c0:	4930      	ldr	r1, [pc, #192]	; (8014684 <tcp_rexmit_rto_prepare+0xd8>)
 80145c2:	4831      	ldr	r0, [pc, #196]	; (8014688 <tcp_rexmit_rto_prepare+0xdc>)
 80145c4:	f005 fefe 	bl	801a3c4 <iprintf>

  if (pcb->unacked == NULL) {
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d102      	bne.n	80145d6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80145d0:	f06f 0305 	mvn.w	r3, #5
 80145d4:	e050      	b.n	8014678 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145da:	60fb      	str	r3, [r7, #12]
 80145dc:	e00b      	b.n	80145f6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80145de:	68f8      	ldr	r0, [r7, #12]
 80145e0:	f7ff fee4 	bl	80143ac <tcp_output_segment_busy>
 80145e4:	4603      	mov	r3, r0
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d002      	beq.n	80145f0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80145ea:	f06f 0305 	mvn.w	r3, #5
 80145ee:	e043      	b.n	8014678 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	60fb      	str	r3, [r7, #12]
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d1ef      	bne.n	80145de <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80145fe:	68f8      	ldr	r0, [r7, #12]
 8014600:	f7ff fed4 	bl	80143ac <tcp_output_segment_busy>
 8014604:	4603      	mov	r3, r0
 8014606:	2b00      	cmp	r3, #0
 8014608:	d002      	beq.n	8014610 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801460a:	f06f 0305 	mvn.w	r3, #5
 801460e:	e033      	b.n	8014678 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2200      	movs	r2, #0
 8014624:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	8b5b      	ldrh	r3, [r3, #26]
 801462a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801462e:	b29a      	uxth	r2, r3
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	685b      	ldr	r3, [r3, #4]
 801463a:	4618      	mov	r0, r3
 801463c:	f7f8 fd25 	bl	800d08a <lwip_htonl>
 8014640:	4604      	mov	r4, r0
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	891b      	ldrh	r3, [r3, #8]
 8014646:	461d      	mov	r5, r3
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	68db      	ldr	r3, [r3, #12]
 801464c:	899b      	ldrh	r3, [r3, #12]
 801464e:	b29b      	uxth	r3, r3
 8014650:	4618      	mov	r0, r3
 8014652:	f7f8 fd05 	bl	800d060 <lwip_htons>
 8014656:	4603      	mov	r3, r0
 8014658:	b2db      	uxtb	r3, r3
 801465a:	f003 0303 	and.w	r3, r3, #3
 801465e:	2b00      	cmp	r3, #0
 8014660:	d001      	beq.n	8014666 <tcp_rexmit_rto_prepare+0xba>
 8014662:	2301      	movs	r3, #1
 8014664:	e000      	b.n	8014668 <tcp_rexmit_rto_prepare+0xbc>
 8014666:	2300      	movs	r3, #0
 8014668:	442b      	add	r3, r5
 801466a:	18e2      	adds	r2, r4, r3
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2200      	movs	r2, #0
 8014674:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014676:	2300      	movs	r3, #0
}
 8014678:	4618      	mov	r0, r3
 801467a:	3710      	adds	r7, #16
 801467c:	46bd      	mov	sp, r7
 801467e:	bdb0      	pop	{r4, r5, r7, pc}
 8014680:	0801da7c 	.word	0x0801da7c
 8014684:	0801e0b8 	.word	0x0801e0b8
 8014688:	0801dad0 	.word	0x0801dad0

0801468c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d106      	bne.n	80146a8 <tcp_rexmit_rto_commit+0x1c>
 801469a:	4b0d      	ldr	r3, [pc, #52]	; (80146d0 <tcp_rexmit_rto_commit+0x44>)
 801469c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80146a0:	490c      	ldr	r1, [pc, #48]	; (80146d4 <tcp_rexmit_rto_commit+0x48>)
 80146a2:	480d      	ldr	r0, [pc, #52]	; (80146d8 <tcp_rexmit_rto_commit+0x4c>)
 80146a4:	f005 fe8e 	bl	801a3c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146ae:	2bff      	cmp	r3, #255	; 0xff
 80146b0:	d007      	beq.n	80146c2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146b8:	3301      	adds	r3, #1
 80146ba:	b2da      	uxtb	r2, r3
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f7ff fc7a 	bl	8013fbc <tcp_output>
}
 80146c8:	bf00      	nop
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	0801da7c 	.word	0x0801da7c
 80146d4:	0801e0dc 	.word	0x0801e0dc
 80146d8:	0801dad0 	.word	0x0801dad0

080146dc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d106      	bne.n	80146f8 <tcp_rexmit_rto+0x1c>
 80146ea:	4b0a      	ldr	r3, [pc, #40]	; (8014714 <tcp_rexmit_rto+0x38>)
 80146ec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80146f0:	4909      	ldr	r1, [pc, #36]	; (8014718 <tcp_rexmit_rto+0x3c>)
 80146f2:	480a      	ldr	r0, [pc, #40]	; (801471c <tcp_rexmit_rto+0x40>)
 80146f4:	f005 fe66 	bl	801a3c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f7ff ff57 	bl	80145ac <tcp_rexmit_rto_prepare>
 80146fe:	4603      	mov	r3, r0
 8014700:	2b00      	cmp	r3, #0
 8014702:	d102      	bne.n	801470a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f7ff ffc1 	bl	801468c <tcp_rexmit_rto_commit>
  }
}
 801470a:	bf00      	nop
 801470c:	3708      	adds	r7, #8
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}
 8014712:	bf00      	nop
 8014714:	0801da7c 	.word	0x0801da7c
 8014718:	0801e100 	.word	0x0801e100
 801471c:	0801dad0 	.word	0x0801dad0

08014720 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014720:	b590      	push	{r4, r7, lr}
 8014722:	b085      	sub	sp, #20
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d106      	bne.n	801473c <tcp_rexmit+0x1c>
 801472e:	4b2f      	ldr	r3, [pc, #188]	; (80147ec <tcp_rexmit+0xcc>)
 8014730:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014734:	492e      	ldr	r1, [pc, #184]	; (80147f0 <tcp_rexmit+0xd0>)
 8014736:	482f      	ldr	r0, [pc, #188]	; (80147f4 <tcp_rexmit+0xd4>)
 8014738:	f005 fe44 	bl	801a3c4 <iprintf>

  if (pcb->unacked == NULL) {
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014740:	2b00      	cmp	r3, #0
 8014742:	d102      	bne.n	801474a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014744:	f06f 0305 	mvn.w	r3, #5
 8014748:	e04c      	b.n	80147e4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801474e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014750:	68b8      	ldr	r0, [r7, #8]
 8014752:	f7ff fe2b 	bl	80143ac <tcp_output_segment_busy>
 8014756:	4603      	mov	r3, r0
 8014758:	2b00      	cmp	r3, #0
 801475a:	d002      	beq.n	8014762 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801475c:	f06f 0305 	mvn.w	r3, #5
 8014760:	e040      	b.n	80147e4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	681a      	ldr	r2, [r3, #0]
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	336c      	adds	r3, #108	; 0x6c
 801476e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014770:	e002      	b.n	8014778 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d011      	beq.n	80147a4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	4618      	mov	r0, r3
 801478a:	f7f8 fc7e 	bl	800d08a <lwip_htonl>
 801478e:	4604      	mov	r4, r0
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	68db      	ldr	r3, [r3, #12]
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	4618      	mov	r0, r3
 8014798:	f7f8 fc77 	bl	800d08a <lwip_htonl>
 801479c:	4603      	mov	r3, r0
 801479e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	dbe6      	blt.n	8014772 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	681a      	ldr	r2, [r3, #0]
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	68ba      	ldr	r2, [r7, #8]
 80147b0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d103      	bne.n	80147c2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2200      	movs	r2, #0
 80147be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147c8:	2bff      	cmp	r3, #255	; 0xff
 80147ca:	d007      	beq.n	80147dc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147d2:	3301      	adds	r3, #1
 80147d4:	b2da      	uxtb	r2, r3
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2200      	movs	r2, #0
 80147e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80147e2:	2300      	movs	r3, #0
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3714      	adds	r7, #20
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd90      	pop	{r4, r7, pc}
 80147ec:	0801da7c 	.word	0x0801da7c
 80147f0:	0801e11c 	.word	0x0801e11c
 80147f4:	0801dad0 	.word	0x0801dad0

080147f8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d106      	bne.n	8014814 <tcp_rexmit_fast+0x1c>
 8014806:	4b2e      	ldr	r3, [pc, #184]	; (80148c0 <tcp_rexmit_fast+0xc8>)
 8014808:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801480c:	492d      	ldr	r1, [pc, #180]	; (80148c4 <tcp_rexmit_fast+0xcc>)
 801480e:	482e      	ldr	r0, [pc, #184]	; (80148c8 <tcp_rexmit_fast+0xd0>)
 8014810:	f005 fdd8 	bl	801a3c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014818:	2b00      	cmp	r3, #0
 801481a:	d04d      	beq.n	80148b8 <tcp_rexmit_fast+0xc0>
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	8b5b      	ldrh	r3, [r3, #26]
 8014820:	f003 0304 	and.w	r3, r3, #4
 8014824:	2b00      	cmp	r3, #0
 8014826:	d147      	bne.n	80148b8 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f7ff ff79 	bl	8014720 <tcp_rexmit>
 801482e:	4603      	mov	r3, r0
 8014830:	2b00      	cmp	r3, #0
 8014832:	d141      	bne.n	80148b8 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014840:	429a      	cmp	r2, r3
 8014842:	d207      	bcs.n	8014854 <tcp_rexmit_fast+0x5c>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801484a:	0fda      	lsrs	r2, r3, #31
 801484c:	4413      	add	r3, r2
 801484e:	105b      	asrs	r3, r3, #1
 8014850:	b29b      	uxth	r3, r3
 8014852:	e006      	b.n	8014862 <tcp_rexmit_fast+0x6a>
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801485a:	0fda      	lsrs	r2, r3, #31
 801485c:	4413      	add	r3, r2
 801485e:	105b      	asrs	r3, r3, #1
 8014860:	b29b      	uxth	r3, r3
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801486e:	461a      	mov	r2, r3
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014874:	005b      	lsls	r3, r3, #1
 8014876:	429a      	cmp	r2, r3
 8014878:	d206      	bcs.n	8014888 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	b29a      	uxth	r2, r3
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014892:	4619      	mov	r1, r3
 8014894:	0049      	lsls	r1, r1, #1
 8014896:	440b      	add	r3, r1
 8014898:	b29b      	uxth	r3, r3
 801489a:	4413      	add	r3, r2
 801489c:	b29a      	uxth	r2, r3
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	8b5b      	ldrh	r3, [r3, #26]
 80148a8:	f043 0304 	orr.w	r3, r3, #4
 80148ac:	b29a      	uxth	r2, r3
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2200      	movs	r2, #0
 80148b6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80148b8:	bf00      	nop
 80148ba:	3708      	adds	r7, #8
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}
 80148c0:	0801da7c 	.word	0x0801da7c
 80148c4:	0801e134 	.word	0x0801e134
 80148c8:	0801dad0 	.word	0x0801dad0

080148cc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b086      	sub	sp, #24
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	607b      	str	r3, [r7, #4]
 80148d6:	460b      	mov	r3, r1
 80148d8:	817b      	strh	r3, [r7, #10]
 80148da:	4613      	mov	r3, r2
 80148dc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80148de:	897a      	ldrh	r2, [r7, #10]
 80148e0:	893b      	ldrh	r3, [r7, #8]
 80148e2:	4413      	add	r3, r2
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	3314      	adds	r3, #20
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80148ee:	4619      	mov	r1, r3
 80148f0:	2022      	movs	r0, #34	; 0x22
 80148f2:	f7f9 fcc1 	bl	800e278 <pbuf_alloc>
 80148f6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d04e      	beq.n	801499c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80148fe:	697b      	ldr	r3, [r7, #20]
 8014900:	895b      	ldrh	r3, [r3, #10]
 8014902:	461a      	mov	r2, r3
 8014904:	897b      	ldrh	r3, [r7, #10]
 8014906:	3314      	adds	r3, #20
 8014908:	429a      	cmp	r2, r3
 801490a:	da06      	bge.n	801491a <tcp_output_alloc_header_common+0x4e>
 801490c:	4b26      	ldr	r3, [pc, #152]	; (80149a8 <tcp_output_alloc_header_common+0xdc>)
 801490e:	f240 7224 	movw	r2, #1828	; 0x724
 8014912:	4926      	ldr	r1, [pc, #152]	; (80149ac <tcp_output_alloc_header_common+0xe0>)
 8014914:	4826      	ldr	r0, [pc, #152]	; (80149b0 <tcp_output_alloc_header_common+0xe4>)
 8014916:	f005 fd55 	bl	801a3c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014920:	8c3b      	ldrh	r3, [r7, #32]
 8014922:	4618      	mov	r0, r3
 8014924:	f7f8 fb9c 	bl	800d060 <lwip_htons>
 8014928:	4603      	mov	r3, r0
 801492a:	461a      	mov	r2, r3
 801492c:	693b      	ldr	r3, [r7, #16]
 801492e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014932:	4618      	mov	r0, r3
 8014934:	f7f8 fb94 	bl	800d060 <lwip_htons>
 8014938:	4603      	mov	r3, r0
 801493a:	461a      	mov	r2, r3
 801493c:	693b      	ldr	r3, [r7, #16]
 801493e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014946:	68f8      	ldr	r0, [r7, #12]
 8014948:	f7f8 fb9f 	bl	800d08a <lwip_htonl>
 801494c:	4602      	mov	r2, r0
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014952:	897b      	ldrh	r3, [r7, #10]
 8014954:	089b      	lsrs	r3, r3, #2
 8014956:	b29b      	uxth	r3, r3
 8014958:	3305      	adds	r3, #5
 801495a:	b29b      	uxth	r3, r3
 801495c:	031b      	lsls	r3, r3, #12
 801495e:	b29a      	uxth	r2, r3
 8014960:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014964:	b29b      	uxth	r3, r3
 8014966:	4313      	orrs	r3, r2
 8014968:	b29b      	uxth	r3, r3
 801496a:	4618      	mov	r0, r3
 801496c:	f7f8 fb78 	bl	800d060 <lwip_htons>
 8014970:	4603      	mov	r3, r0
 8014972:	461a      	mov	r2, r3
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014978:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801497a:	4618      	mov	r0, r3
 801497c:	f7f8 fb70 	bl	800d060 <lwip_htons>
 8014980:	4603      	mov	r3, r0
 8014982:	461a      	mov	r2, r3
 8014984:	693b      	ldr	r3, [r7, #16]
 8014986:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014988:	693b      	ldr	r3, [r7, #16]
 801498a:	2200      	movs	r2, #0
 801498c:	741a      	strb	r2, [r3, #16]
 801498e:	2200      	movs	r2, #0
 8014990:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014992:	693b      	ldr	r3, [r7, #16]
 8014994:	2200      	movs	r2, #0
 8014996:	749a      	strb	r2, [r3, #18]
 8014998:	2200      	movs	r2, #0
 801499a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801499c:	697b      	ldr	r3, [r7, #20]
}
 801499e:	4618      	mov	r0, r3
 80149a0:	3718      	adds	r7, #24
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	bf00      	nop
 80149a8:	0801da7c 	.word	0x0801da7c
 80149ac:	0801e154 	.word	0x0801e154
 80149b0:	0801dad0 	.word	0x0801dad0

080149b4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80149b4:	b5b0      	push	{r4, r5, r7, lr}
 80149b6:	b08a      	sub	sp, #40	; 0x28
 80149b8:	af04      	add	r7, sp, #16
 80149ba:	60f8      	str	r0, [r7, #12]
 80149bc:	607b      	str	r3, [r7, #4]
 80149be:	460b      	mov	r3, r1
 80149c0:	817b      	strh	r3, [r7, #10]
 80149c2:	4613      	mov	r3, r2
 80149c4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d106      	bne.n	80149da <tcp_output_alloc_header+0x26>
 80149cc:	4b15      	ldr	r3, [pc, #84]	; (8014a24 <tcp_output_alloc_header+0x70>)
 80149ce:	f240 7242 	movw	r2, #1858	; 0x742
 80149d2:	4915      	ldr	r1, [pc, #84]	; (8014a28 <tcp_output_alloc_header+0x74>)
 80149d4:	4815      	ldr	r0, [pc, #84]	; (8014a2c <tcp_output_alloc_header+0x78>)
 80149d6:	f005 fcf5 	bl	801a3c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	8adb      	ldrh	r3, [r3, #22]
 80149e2:	68fa      	ldr	r2, [r7, #12]
 80149e4:	8b12      	ldrh	r2, [r2, #24]
 80149e6:	68f9      	ldr	r1, [r7, #12]
 80149e8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80149ea:	893d      	ldrh	r5, [r7, #8]
 80149ec:	897c      	ldrh	r4, [r7, #10]
 80149ee:	9103      	str	r1, [sp, #12]
 80149f0:	2110      	movs	r1, #16
 80149f2:	9102      	str	r1, [sp, #8]
 80149f4:	9201      	str	r2, [sp, #4]
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	462a      	mov	r2, r5
 80149fc:	4621      	mov	r1, r4
 80149fe:	f7ff ff65 	bl	80148cc <tcp_output_alloc_header_common>
 8014a02:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d006      	beq.n	8014a18 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a0e:	68fa      	ldr	r2, [r7, #12]
 8014a10:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014a12:	441a      	add	r2, r3
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014a18:	697b      	ldr	r3, [r7, #20]
}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	3718      	adds	r7, #24
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bdb0      	pop	{r4, r5, r7, pc}
 8014a22:	bf00      	nop
 8014a24:	0801da7c 	.word	0x0801da7c
 8014a28:	0801e184 	.word	0x0801e184
 8014a2c:	0801dad0 	.word	0x0801dad0

08014a30 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b088      	sub	sp, #32
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	60f8      	str	r0, [r7, #12]
 8014a38:	60b9      	str	r1, [r7, #8]
 8014a3a:	4611      	mov	r1, r2
 8014a3c:	461a      	mov	r2, r3
 8014a3e:	460b      	mov	r3, r1
 8014a40:	71fb      	strb	r3, [r7, #7]
 8014a42:	4613      	mov	r3, r2
 8014a44:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014a46:	2300      	movs	r3, #0
 8014a48:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d106      	bne.n	8014a5e <tcp_output_fill_options+0x2e>
 8014a50:	4b13      	ldr	r3, [pc, #76]	; (8014aa0 <tcp_output_fill_options+0x70>)
 8014a52:	f240 7256 	movw	r2, #1878	; 0x756
 8014a56:	4913      	ldr	r1, [pc, #76]	; (8014aa4 <tcp_output_fill_options+0x74>)
 8014a58:	4813      	ldr	r0, [pc, #76]	; (8014aa8 <tcp_output_fill_options+0x78>)
 8014a5a:	f005 fcb3 	bl	801a3c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	685b      	ldr	r3, [r3, #4]
 8014a62:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014a64:	69bb      	ldr	r3, [r7, #24]
 8014a66:	3314      	adds	r3, #20
 8014a68:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014a6a:	69bb      	ldr	r3, [r7, #24]
 8014a6c:	f103 0214 	add.w	r2, r3, #20
 8014a70:	8bfb      	ldrh	r3, [r7, #30]
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	4619      	mov	r1, r3
 8014a76:	79fb      	ldrb	r3, [r7, #7]
 8014a78:	009b      	lsls	r3, r3, #2
 8014a7a:	f003 0304 	and.w	r3, r3, #4
 8014a7e:	440b      	add	r3, r1
 8014a80:	4413      	add	r3, r2
 8014a82:	697a      	ldr	r2, [r7, #20]
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d006      	beq.n	8014a96 <tcp_output_fill_options+0x66>
 8014a88:	4b05      	ldr	r3, [pc, #20]	; (8014aa0 <tcp_output_fill_options+0x70>)
 8014a8a:	f240 7275 	movw	r2, #1909	; 0x775
 8014a8e:	4907      	ldr	r1, [pc, #28]	; (8014aac <tcp_output_fill_options+0x7c>)
 8014a90:	4805      	ldr	r0, [pc, #20]	; (8014aa8 <tcp_output_fill_options+0x78>)
 8014a92:	f005 fc97 	bl	801a3c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014a96:	bf00      	nop
 8014a98:	3720      	adds	r7, #32
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	0801da7c 	.word	0x0801da7c
 8014aa4:	0801e1ac 	.word	0x0801e1ac
 8014aa8:	0801dad0 	.word	0x0801dad0
 8014aac:	0801e0a4 	.word	0x0801e0a4

08014ab0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b08a      	sub	sp, #40	; 0x28
 8014ab4:	af04      	add	r7, sp, #16
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	60b9      	str	r1, [r7, #8]
 8014aba:	607a      	str	r2, [r7, #4]
 8014abc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d106      	bne.n	8014ad2 <tcp_output_control_segment+0x22>
 8014ac4:	4b1c      	ldr	r3, [pc, #112]	; (8014b38 <tcp_output_control_segment+0x88>)
 8014ac6:	f240 7287 	movw	r2, #1927	; 0x787
 8014aca:	491c      	ldr	r1, [pc, #112]	; (8014b3c <tcp_output_control_segment+0x8c>)
 8014acc:	481c      	ldr	r0, [pc, #112]	; (8014b40 <tcp_output_control_segment+0x90>)
 8014ace:	f005 fc79 	bl	801a3c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014ad2:	683a      	ldr	r2, [r7, #0]
 8014ad4:	6879      	ldr	r1, [r7, #4]
 8014ad6:	68f8      	ldr	r0, [r7, #12]
 8014ad8:	f7fe fad6 	bl	8013088 <tcp_route>
 8014adc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014ade:	693b      	ldr	r3, [r7, #16]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d102      	bne.n	8014aea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014ae4:	23fc      	movs	r3, #252	; 0xfc
 8014ae6:	75fb      	strb	r3, [r7, #23]
 8014ae8:	e01c      	b.n	8014b24 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d006      	beq.n	8014afe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	7adb      	ldrb	r3, [r3, #11]
 8014af4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	7a9b      	ldrb	r3, [r3, #10]
 8014afa:	757b      	strb	r3, [r7, #21]
 8014afc:	e003      	b.n	8014b06 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014afe:	23ff      	movs	r3, #255	; 0xff
 8014b00:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014b02:	2300      	movs	r3, #0
 8014b04:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014b06:	7dba      	ldrb	r2, [r7, #22]
 8014b08:	693b      	ldr	r3, [r7, #16]
 8014b0a:	9302      	str	r3, [sp, #8]
 8014b0c:	2306      	movs	r3, #6
 8014b0e:	9301      	str	r3, [sp, #4]
 8014b10:	7d7b      	ldrb	r3, [r7, #21]
 8014b12:	9300      	str	r3, [sp, #0]
 8014b14:	4613      	mov	r3, r2
 8014b16:	683a      	ldr	r2, [r7, #0]
 8014b18:	6879      	ldr	r1, [r7, #4]
 8014b1a:	68b8      	ldr	r0, [r7, #8]
 8014b1c:	f004 fa18 	bl	8018f50 <ip4_output_if>
 8014b20:	4603      	mov	r3, r0
 8014b22:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014b24:	68b8      	ldr	r0, [r7, #8]
 8014b26:	f7f9 fe87 	bl	800e838 <pbuf_free>
  return err;
 8014b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3718      	adds	r7, #24
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	0801da7c 	.word	0x0801da7c
 8014b3c:	0801e1d4 	.word	0x0801e1d4
 8014b40:	0801dad0 	.word	0x0801dad0

08014b44 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014b44:	b590      	push	{r4, r7, lr}
 8014b46:	b08b      	sub	sp, #44	; 0x2c
 8014b48:	af04      	add	r7, sp, #16
 8014b4a:	60f8      	str	r0, [r7, #12]
 8014b4c:	60b9      	str	r1, [r7, #8]
 8014b4e:	607a      	str	r2, [r7, #4]
 8014b50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d106      	bne.n	8014b66 <tcp_rst+0x22>
 8014b58:	4b1f      	ldr	r3, [pc, #124]	; (8014bd8 <tcp_rst+0x94>)
 8014b5a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014b5e:	491f      	ldr	r1, [pc, #124]	; (8014bdc <tcp_rst+0x98>)
 8014b60:	481f      	ldr	r0, [pc, #124]	; (8014be0 <tcp_rst+0x9c>)
 8014b62:	f005 fc2f 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d106      	bne.n	8014b7a <tcp_rst+0x36>
 8014b6c:	4b1a      	ldr	r3, [pc, #104]	; (8014bd8 <tcp_rst+0x94>)
 8014b6e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014b72:	491c      	ldr	r1, [pc, #112]	; (8014be4 <tcp_rst+0xa0>)
 8014b74:	481a      	ldr	r0, [pc, #104]	; (8014be0 <tcp_rst+0x9c>)
 8014b76:	f005 fc25 	bl	801a3c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014b7e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014b82:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014b84:	7dfb      	ldrb	r3, [r7, #23]
 8014b86:	b29c      	uxth	r4, r3
 8014b88:	68b8      	ldr	r0, [r7, #8]
 8014b8a:	f7f8 fa7e 	bl	800d08a <lwip_htonl>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	8abb      	ldrh	r3, [r7, #20]
 8014b92:	9303      	str	r3, [sp, #12]
 8014b94:	2314      	movs	r3, #20
 8014b96:	9302      	str	r3, [sp, #8]
 8014b98:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014b9a:	9301      	str	r3, [sp, #4]
 8014b9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014b9e:	9300      	str	r3, [sp, #0]
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	4621      	mov	r1, r4
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f7ff fe90 	bl	80148cc <tcp_output_alloc_header_common>
 8014bac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d00c      	beq.n	8014bce <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014bb4:	7dfb      	ldrb	r3, [r7, #23]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	6939      	ldr	r1, [r7, #16]
 8014bba:	68f8      	ldr	r0, [r7, #12]
 8014bbc:	f7ff ff38 	bl	8014a30 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc2:	683a      	ldr	r2, [r7, #0]
 8014bc4:	6939      	ldr	r1, [r7, #16]
 8014bc6:	68f8      	ldr	r0, [r7, #12]
 8014bc8:	f7ff ff72 	bl	8014ab0 <tcp_output_control_segment>
 8014bcc:	e000      	b.n	8014bd0 <tcp_rst+0x8c>
    return;
 8014bce:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014bd0:	371c      	adds	r7, #28
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd90      	pop	{r4, r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	0801da7c 	.word	0x0801da7c
 8014bdc:	0801e200 	.word	0x0801e200
 8014be0:	0801dad0 	.word	0x0801dad0
 8014be4:	0801e21c 	.word	0x0801e21c

08014be8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014be8:	b590      	push	{r4, r7, lr}
 8014bea:	b087      	sub	sp, #28
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d106      	bne.n	8014c0c <tcp_send_empty_ack+0x24>
 8014bfe:	4b28      	ldr	r3, [pc, #160]	; (8014ca0 <tcp_send_empty_ack+0xb8>)
 8014c00:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014c04:	4927      	ldr	r1, [pc, #156]	; (8014ca4 <tcp_send_empty_ack+0xbc>)
 8014c06:	4828      	ldr	r0, [pc, #160]	; (8014ca8 <tcp_send_empty_ack+0xc0>)
 8014c08:	f005 fbdc 	bl	801a3c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c0c:	7dfb      	ldrb	r3, [r7, #23]
 8014c0e:	009b      	lsls	r3, r3, #2
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	f003 0304 	and.w	r3, r3, #4
 8014c16:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014c18:	7d7b      	ldrb	r3, [r7, #21]
 8014c1a:	b29c      	uxth	r4, r3
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7f8 fa32 	bl	800d08a <lwip_htonl>
 8014c26:	4603      	mov	r3, r0
 8014c28:	2200      	movs	r2, #0
 8014c2a:	4621      	mov	r1, r4
 8014c2c:	6878      	ldr	r0, [r7, #4]
 8014c2e:	f7ff fec1 	bl	80149b4 <tcp_output_alloc_header>
 8014c32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c34:	693b      	ldr	r3, [r7, #16]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d109      	bne.n	8014c4e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	8b5b      	ldrh	r3, [r3, #26]
 8014c3e:	f043 0303 	orr.w	r3, r3, #3
 8014c42:	b29a      	uxth	r2, r3
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014c48:	f06f 0301 	mvn.w	r3, #1
 8014c4c:	e023      	b.n	8014c96 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014c4e:	7dbb      	ldrb	r3, [r7, #22]
 8014c50:	7dfa      	ldrb	r2, [r7, #23]
 8014c52:	6939      	ldr	r1, [r7, #16]
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f7ff feeb 	bl	8014a30 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c5a:	687a      	ldr	r2, [r7, #4]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	3304      	adds	r3, #4
 8014c60:	6939      	ldr	r1, [r7, #16]
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f7ff ff24 	bl	8014ab0 <tcp_output_control_segment>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d007      	beq.n	8014c84 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	8b5b      	ldrh	r3, [r3, #26]
 8014c78:	f043 0303 	orr.w	r3, r3, #3
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	835a      	strh	r2, [r3, #26]
 8014c82:	e006      	b.n	8014c92 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	8b5b      	ldrh	r3, [r3, #26]
 8014c88:	f023 0303 	bic.w	r3, r3, #3
 8014c8c:	b29a      	uxth	r2, r3
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	371c      	adds	r7, #28
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd90      	pop	{r4, r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	0801da7c 	.word	0x0801da7c
 8014ca4:	0801e238 	.word	0x0801e238
 8014ca8:	0801dad0 	.word	0x0801dad0

08014cac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014cac:	b590      	push	{r4, r7, lr}
 8014cae:	b087      	sub	sp, #28
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d106      	bne.n	8014ccc <tcp_keepalive+0x20>
 8014cbe:	4b18      	ldr	r3, [pc, #96]	; (8014d20 <tcp_keepalive+0x74>)
 8014cc0:	f640 0224 	movw	r2, #2084	; 0x824
 8014cc4:	4917      	ldr	r1, [pc, #92]	; (8014d24 <tcp_keepalive+0x78>)
 8014cc6:	4818      	ldr	r0, [pc, #96]	; (8014d28 <tcp_keepalive+0x7c>)
 8014cc8:	f005 fb7c 	bl	801a3c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014ccc:	7dfb      	ldrb	r3, [r7, #23]
 8014cce:	b29c      	uxth	r4, r3
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014cd4:	3b01      	subs	r3, #1
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f7f8 f9d7 	bl	800d08a <lwip_htonl>
 8014cdc:	4603      	mov	r3, r0
 8014cde:	2200      	movs	r2, #0
 8014ce0:	4621      	mov	r1, r4
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f7ff fe66 	bl	80149b4 <tcp_output_alloc_header>
 8014ce8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d102      	bne.n	8014cf6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8014cf4:	e010      	b.n	8014d18 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014cf6:	7dfb      	ldrb	r3, [r7, #23]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	6939      	ldr	r1, [r7, #16]
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f7ff fe97 	bl	8014a30 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d02:	687a      	ldr	r2, [r7, #4]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	3304      	adds	r3, #4
 8014d08:	6939      	ldr	r1, [r7, #16]
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f7ff fed0 	bl	8014ab0 <tcp_output_control_segment>
 8014d10:	4603      	mov	r3, r0
 8014d12:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	371c      	adds	r7, #28
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd90      	pop	{r4, r7, pc}
 8014d20:	0801da7c 	.word	0x0801da7c
 8014d24:	0801e258 	.word	0x0801e258
 8014d28:	0801dad0 	.word	0x0801dad0

08014d2c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014d2c:	b590      	push	{r4, r7, lr}
 8014d2e:	b08b      	sub	sp, #44	; 0x2c
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d34:	2300      	movs	r3, #0
 8014d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d106      	bne.n	8014d4e <tcp_zero_window_probe+0x22>
 8014d40:	4b4c      	ldr	r3, [pc, #304]	; (8014e74 <tcp_zero_window_probe+0x148>)
 8014d42:	f640 024f 	movw	r2, #2127	; 0x84f
 8014d46:	494c      	ldr	r1, [pc, #304]	; (8014e78 <tcp_zero_window_probe+0x14c>)
 8014d48:	484c      	ldr	r0, [pc, #304]	; (8014e7c <tcp_zero_window_probe+0x150>)
 8014d4a:	f005 fb3b 	bl	801a3c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d52:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014d54:	6a3b      	ldr	r3, [r7, #32]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d101      	bne.n	8014d5e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	e086      	b.n	8014e6c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d64:	2bff      	cmp	r3, #255	; 0xff
 8014d66:	d007      	beq.n	8014d78 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d6e:	3301      	adds	r3, #1
 8014d70:	b2da      	uxtb	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014d78:	6a3b      	ldr	r3, [r7, #32]
 8014d7a:	68db      	ldr	r3, [r3, #12]
 8014d7c:	899b      	ldrh	r3, [r3, #12]
 8014d7e:	b29b      	uxth	r3, r3
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7f8 f96d 	bl	800d060 <lwip_htons>
 8014d86:	4603      	mov	r3, r0
 8014d88:	b2db      	uxtb	r3, r3
 8014d8a:	f003 0301 	and.w	r3, r3, #1
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d005      	beq.n	8014d9e <tcp_zero_window_probe+0x72>
 8014d92:	6a3b      	ldr	r3, [r7, #32]
 8014d94:	891b      	ldrh	r3, [r3, #8]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d101      	bne.n	8014d9e <tcp_zero_window_probe+0x72>
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	e000      	b.n	8014da0 <tcp_zero_window_probe+0x74>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014da2:	7ffb      	ldrb	r3, [r7, #31]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	bf0c      	ite	eq
 8014da8:	2301      	moveq	r3, #1
 8014daa:	2300      	movne	r3, #0
 8014dac:	b2db      	uxtb	r3, r3
 8014dae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014db4:	b299      	uxth	r1, r3
 8014db6:	6a3b      	ldr	r3, [r7, #32]
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	8bba      	ldrh	r2, [r7, #28]
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f7ff fdf8 	bl	80149b4 <tcp_output_alloc_header>
 8014dc4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014dc6:	69bb      	ldr	r3, [r7, #24]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d102      	bne.n	8014dd2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd0:	e04c      	b.n	8014e6c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014dd2:	69bb      	ldr	r3, [r7, #24]
 8014dd4:	685b      	ldr	r3, [r3, #4]
 8014dd6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014dd8:	7ffb      	ldrb	r3, [r7, #31]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d011      	beq.n	8014e02 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	899b      	ldrh	r3, [r3, #12]
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	b21b      	sxth	r3, r3
 8014de6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014dea:	b21c      	sxth	r4, r3
 8014dec:	2011      	movs	r0, #17
 8014dee:	f7f8 f937 	bl	800d060 <lwip_htons>
 8014df2:	4603      	mov	r3, r0
 8014df4:	b21b      	sxth	r3, r3
 8014df6:	4323      	orrs	r3, r4
 8014df8:	b21b      	sxth	r3, r3
 8014dfa:	b29a      	uxth	r2, r3
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	819a      	strh	r2, [r3, #12]
 8014e00:	e010      	b.n	8014e24 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014e02:	69bb      	ldr	r3, [r7, #24]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	3314      	adds	r3, #20
 8014e08:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014e0a:	6a3b      	ldr	r3, [r7, #32]
 8014e0c:	6858      	ldr	r0, [r3, #4]
 8014e0e:	6a3b      	ldr	r3, [r7, #32]
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	891a      	ldrh	r2, [r3, #8]
 8014e14:	6a3b      	ldr	r3, [r7, #32]
 8014e16:	891b      	ldrh	r3, [r3, #8]
 8014e18:	1ad3      	subs	r3, r2, r3
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	6939      	ldr	r1, [r7, #16]
 8014e20:	f7f9 ff10 	bl	800ec44 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014e24:	6a3b      	ldr	r3, [r7, #32]
 8014e26:	68db      	ldr	r3, [r3, #12]
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7f8 f92d 	bl	800d08a <lwip_htonl>
 8014e30:	4603      	mov	r3, r0
 8014e32:	3301      	adds	r3, #1
 8014e34:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	1ad3      	subs	r3, r2, r3
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	da02      	bge.n	8014e48 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	68fa      	ldr	r2, [r7, #12]
 8014e46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	69b9      	ldr	r1, [r7, #24]
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f7ff fded 	bl	8014a30 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e56:	687a      	ldr	r2, [r7, #4]
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	3304      	adds	r3, #4
 8014e5c:	69b9      	ldr	r1, [r7, #24]
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f7ff fe26 	bl	8014ab0 <tcp_output_control_segment>
 8014e64:	4603      	mov	r3, r0
 8014e66:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014e68:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	372c      	adds	r7, #44	; 0x2c
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd90      	pop	{r4, r7, pc}
 8014e74:	0801da7c 	.word	0x0801da7c
 8014e78:	0801e274 	.word	0x0801e274
 8014e7c:	0801dad0 	.word	0x0801dad0

08014e80 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b082      	sub	sp, #8
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014e88:	f7f9 ffca 	bl	800ee20 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014e8c:	4b0a      	ldr	r3, [pc, #40]	; (8014eb8 <tcpip_tcp_timer+0x38>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d103      	bne.n	8014e9c <tcpip_tcp_timer+0x1c>
 8014e94:	4b09      	ldr	r3, [pc, #36]	; (8014ebc <tcpip_tcp_timer+0x3c>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d005      	beq.n	8014ea8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	4908      	ldr	r1, [pc, #32]	; (8014ec0 <tcpip_tcp_timer+0x40>)
 8014ea0:	20fa      	movs	r0, #250	; 0xfa
 8014ea2:	f000 f8f1 	bl	8015088 <sys_timeout>
 8014ea6:	e002      	b.n	8014eae <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014ea8:	4b06      	ldr	r3, [pc, #24]	; (8014ec4 <tcpip_tcp_timer+0x44>)
 8014eaa:	2200      	movs	r2, #0
 8014eac:	601a      	str	r2, [r3, #0]
  }
}
 8014eae:	bf00      	nop
 8014eb0:	3708      	adds	r7, #8
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	2000bad0 	.word	0x2000bad0
 8014ebc:	2000bae0 	.word	0x2000bae0
 8014ec0:	08014e81 	.word	0x08014e81
 8014ec4:	20004bf8 	.word	0x20004bf8

08014ec8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014ecc:	4b0a      	ldr	r3, [pc, #40]	; (8014ef8 <tcp_timer_needed+0x30>)
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d10f      	bne.n	8014ef4 <tcp_timer_needed+0x2c>
 8014ed4:	4b09      	ldr	r3, [pc, #36]	; (8014efc <tcp_timer_needed+0x34>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d103      	bne.n	8014ee4 <tcp_timer_needed+0x1c>
 8014edc:	4b08      	ldr	r3, [pc, #32]	; (8014f00 <tcp_timer_needed+0x38>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d007      	beq.n	8014ef4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014ee4:	4b04      	ldr	r3, [pc, #16]	; (8014ef8 <tcp_timer_needed+0x30>)
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014eea:	2200      	movs	r2, #0
 8014eec:	4905      	ldr	r1, [pc, #20]	; (8014f04 <tcp_timer_needed+0x3c>)
 8014eee:	20fa      	movs	r0, #250	; 0xfa
 8014ef0:	f000 f8ca 	bl	8015088 <sys_timeout>
  }
}
 8014ef4:	bf00      	nop
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	20004bf8 	.word	0x20004bf8
 8014efc:	2000bad0 	.word	0x2000bad0
 8014f00:	2000bae0 	.word	0x2000bae0
 8014f04:	08014e81 	.word	0x08014e81

08014f08 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	60b9      	str	r1, [r7, #8]
 8014f12:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014f14:	200a      	movs	r0, #10
 8014f16:	f7f8 fd59 	bl	800d9cc <memp_malloc>
 8014f1a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d109      	bne.n	8014f36 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d151      	bne.n	8014fcc <sys_timeout_abs+0xc4>
 8014f28:	4b2a      	ldr	r3, [pc, #168]	; (8014fd4 <sys_timeout_abs+0xcc>)
 8014f2a:	22be      	movs	r2, #190	; 0xbe
 8014f2c:	492a      	ldr	r1, [pc, #168]	; (8014fd8 <sys_timeout_abs+0xd0>)
 8014f2e:	482b      	ldr	r0, [pc, #172]	; (8014fdc <sys_timeout_abs+0xd4>)
 8014f30:	f005 fa48 	bl	801a3c4 <iprintf>
    return;
 8014f34:	e04a      	b.n	8014fcc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	2200      	movs	r2, #0
 8014f3a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	68ba      	ldr	r2, [r7, #8]
 8014f40:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	687a      	ldr	r2, [r7, #4]
 8014f46:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014f4e:	4b24      	ldr	r3, [pc, #144]	; (8014fe0 <sys_timeout_abs+0xd8>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d103      	bne.n	8014f5e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014f56:	4a22      	ldr	r2, [pc, #136]	; (8014fe0 <sys_timeout_abs+0xd8>)
 8014f58:	693b      	ldr	r3, [r7, #16]
 8014f5a:	6013      	str	r3, [r2, #0]
    return;
 8014f5c:	e037      	b.n	8014fce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	685a      	ldr	r2, [r3, #4]
 8014f62:	4b1f      	ldr	r3, [pc, #124]	; (8014fe0 <sys_timeout_abs+0xd8>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	1ad3      	subs	r3, r2, r3
 8014f6a:	0fdb      	lsrs	r3, r3, #31
 8014f6c:	f003 0301 	and.w	r3, r3, #1
 8014f70:	b2db      	uxtb	r3, r3
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d007      	beq.n	8014f86 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014f76:	4b1a      	ldr	r3, [pc, #104]	; (8014fe0 <sys_timeout_abs+0xd8>)
 8014f78:	681a      	ldr	r2, [r3, #0]
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014f7e:	4a18      	ldr	r2, [pc, #96]	; (8014fe0 <sys_timeout_abs+0xd8>)
 8014f80:	693b      	ldr	r3, [r7, #16]
 8014f82:	6013      	str	r3, [r2, #0]
 8014f84:	e023      	b.n	8014fce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014f86:	4b16      	ldr	r3, [pc, #88]	; (8014fe0 <sys_timeout_abs+0xd8>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	617b      	str	r3, [r7, #20]
 8014f8c:	e01a      	b.n	8014fc4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d00b      	beq.n	8014fae <sys_timeout_abs+0xa6>
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	685a      	ldr	r2, [r3, #4]
 8014f9a:	697b      	ldr	r3, [r7, #20]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	685b      	ldr	r3, [r3, #4]
 8014fa0:	1ad3      	subs	r3, r2, r3
 8014fa2:	0fdb      	lsrs	r3, r3, #31
 8014fa4:	f003 0301 	and.w	r3, r3, #1
 8014fa8:	b2db      	uxtb	r3, r3
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d007      	beq.n	8014fbe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	681a      	ldr	r2, [r3, #0]
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014fb6:	697b      	ldr	r3, [r7, #20]
 8014fb8:	693a      	ldr	r2, [r7, #16]
 8014fba:	601a      	str	r2, [r3, #0]
        break;
 8014fbc:	e007      	b.n	8014fce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	617b      	str	r3, [r7, #20]
 8014fc4:	697b      	ldr	r3, [r7, #20]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d1e1      	bne.n	8014f8e <sys_timeout_abs+0x86>
 8014fca:	e000      	b.n	8014fce <sys_timeout_abs+0xc6>
    return;
 8014fcc:	bf00      	nop
      }
    }
  }
}
 8014fce:	3718      	adds	r7, #24
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}
 8014fd4:	0801e298 	.word	0x0801e298
 8014fd8:	0801e2cc 	.word	0x0801e2cc
 8014fdc:	0801e30c 	.word	0x0801e30c
 8014fe0:	20004bf0 	.word	0x20004bf0

08014fe4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b086      	sub	sp, #24
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	685b      	ldr	r3, [r3, #4]
 8014ff4:	4798      	blx	r3

  now = sys_now();
 8014ff6:	f7f0 fec5 	bl	8005d84 <sys_now>
 8014ffa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	681a      	ldr	r2, [r3, #0]
 8015000:	4b0f      	ldr	r3, [pc, #60]	; (8015040 <lwip_cyclic_timer+0x5c>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	4413      	add	r3, r2
 8015006:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015008:	68fa      	ldr	r2, [r7, #12]
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	1ad3      	subs	r3, r2, r3
 801500e:	0fdb      	lsrs	r3, r3, #31
 8015010:	f003 0301 	and.w	r3, r3, #1
 8015014:	b2db      	uxtb	r3, r3
 8015016:	2b00      	cmp	r3, #0
 8015018:	d009      	beq.n	801502e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	4413      	add	r3, r2
 8015022:	687a      	ldr	r2, [r7, #4]
 8015024:	4907      	ldr	r1, [pc, #28]	; (8015044 <lwip_cyclic_timer+0x60>)
 8015026:	4618      	mov	r0, r3
 8015028:	f7ff ff6e 	bl	8014f08 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801502c:	e004      	b.n	8015038 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801502e:	687a      	ldr	r2, [r7, #4]
 8015030:	4904      	ldr	r1, [pc, #16]	; (8015044 <lwip_cyclic_timer+0x60>)
 8015032:	68f8      	ldr	r0, [r7, #12]
 8015034:	f7ff ff68 	bl	8014f08 <sys_timeout_abs>
}
 8015038:	bf00      	nop
 801503a:	3718      	adds	r7, #24
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}
 8015040:	20004bf4 	.word	0x20004bf4
 8015044:	08014fe5 	.word	0x08014fe5

08015048 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b082      	sub	sp, #8
 801504c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801504e:	2301      	movs	r3, #1
 8015050:	607b      	str	r3, [r7, #4]
 8015052:	e00e      	b.n	8015072 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015054:	4a0a      	ldr	r2, [pc, #40]	; (8015080 <sys_timeouts_init+0x38>)
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	00db      	lsls	r3, r3, #3
 8015060:	4a07      	ldr	r2, [pc, #28]	; (8015080 <sys_timeouts_init+0x38>)
 8015062:	4413      	add	r3, r2
 8015064:	461a      	mov	r2, r3
 8015066:	4907      	ldr	r1, [pc, #28]	; (8015084 <sys_timeouts_init+0x3c>)
 8015068:	f000 f80e 	bl	8015088 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	3301      	adds	r3, #1
 8015070:	607b      	str	r3, [r7, #4]
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	2b04      	cmp	r3, #4
 8015076:	d9ed      	bls.n	8015054 <sys_timeouts_init+0xc>
  }
}
 8015078:	bf00      	nop
 801507a:	3708      	adds	r7, #8
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	0801f300 	.word	0x0801f300
 8015084:	08014fe5 	.word	0x08014fe5

08015088 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b086      	sub	sp, #24
 801508c:	af00      	add	r7, sp, #0
 801508e:	60f8      	str	r0, [r7, #12]
 8015090:	60b9      	str	r1, [r7, #8]
 8015092:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801509a:	d306      	bcc.n	80150aa <sys_timeout+0x22>
 801509c:	4b0a      	ldr	r3, [pc, #40]	; (80150c8 <sys_timeout+0x40>)
 801509e:	f240 1229 	movw	r2, #297	; 0x129
 80150a2:	490a      	ldr	r1, [pc, #40]	; (80150cc <sys_timeout+0x44>)
 80150a4:	480a      	ldr	r0, [pc, #40]	; (80150d0 <sys_timeout+0x48>)
 80150a6:	f005 f98d 	bl	801a3c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80150aa:	f7f0 fe6b 	bl	8005d84 <sys_now>
 80150ae:	4602      	mov	r2, r0
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	4413      	add	r3, r2
 80150b4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	68b9      	ldr	r1, [r7, #8]
 80150ba:	6978      	ldr	r0, [r7, #20]
 80150bc:	f7ff ff24 	bl	8014f08 <sys_timeout_abs>
#endif
}
 80150c0:	bf00      	nop
 80150c2:	3718      	adds	r7, #24
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}
 80150c8:	0801e298 	.word	0x0801e298
 80150cc:	0801e334 	.word	0x0801e334
 80150d0:	0801e30c 	.word	0x0801e30c

080150d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b084      	sub	sp, #16
 80150d8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80150da:	f7f0 fe53 	bl	8005d84 <sys_now>
 80150de:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80150e0:	4b17      	ldr	r3, [pc, #92]	; (8015140 <sys_check_timeouts+0x6c>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d022      	beq.n	8015132 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	685b      	ldr	r3, [r3, #4]
 80150f0:	68fa      	ldr	r2, [r7, #12]
 80150f2:	1ad3      	subs	r3, r2, r3
 80150f4:	0fdb      	lsrs	r3, r3, #31
 80150f6:	f003 0301 	and.w	r3, r3, #1
 80150fa:	b2db      	uxtb	r3, r3
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d11a      	bne.n	8015136 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	4a0e      	ldr	r2, [pc, #56]	; (8015140 <sys_check_timeouts+0x6c>)
 8015106:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015108:	68bb      	ldr	r3, [r7, #8]
 801510a:	689b      	ldr	r3, [r3, #8]
 801510c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	68db      	ldr	r3, [r3, #12]
 8015112:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	4a0a      	ldr	r2, [pc, #40]	; (8015144 <sys_check_timeouts+0x70>)
 801511a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801511c:	68b9      	ldr	r1, [r7, #8]
 801511e:	200a      	movs	r0, #10
 8015120:	f7f8 fca6 	bl	800da70 <memp_free>
    if (handler != NULL) {
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d0da      	beq.n	80150e0 <sys_check_timeouts+0xc>
      handler(arg);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6838      	ldr	r0, [r7, #0]
 801512e:	4798      	blx	r3
  do {
 8015130:	e7d6      	b.n	80150e0 <sys_check_timeouts+0xc>
      return;
 8015132:	bf00      	nop
 8015134:	e000      	b.n	8015138 <sys_check_timeouts+0x64>
      return;
 8015136:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	20004bf0 	.word	0x20004bf0
 8015144:	20004bf4 	.word	0x20004bf4

08015148 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801514e:	4b16      	ldr	r3, [pc, #88]	; (80151a8 <sys_timeouts_sleeptime+0x60>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d102      	bne.n	801515c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015156:	f04f 33ff 	mov.w	r3, #4294967295
 801515a:	e020      	b.n	801519e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801515c:	f7f0 fe12 	bl	8005d84 <sys_now>
 8015160:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015162:	4b11      	ldr	r3, [pc, #68]	; (80151a8 <sys_timeouts_sleeptime+0x60>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	685a      	ldr	r2, [r3, #4]
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	1ad3      	subs	r3, r2, r3
 801516c:	0fdb      	lsrs	r3, r3, #31
 801516e:	f003 0301 	and.w	r3, r3, #1
 8015172:	b2db      	uxtb	r3, r3
 8015174:	2b00      	cmp	r3, #0
 8015176:	d001      	beq.n	801517c <sys_timeouts_sleeptime+0x34>
    return 0;
 8015178:	2300      	movs	r3, #0
 801517a:	e010      	b.n	801519e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801517c:	4b0a      	ldr	r3, [pc, #40]	; (80151a8 <sys_timeouts_sleeptime+0x60>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	685a      	ldr	r2, [r3, #4]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	1ad3      	subs	r3, r2, r3
 8015186:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	2b00      	cmp	r3, #0
 801518c:	da06      	bge.n	801519c <sys_timeouts_sleeptime+0x54>
 801518e:	4b07      	ldr	r3, [pc, #28]	; (80151ac <sys_timeouts_sleeptime+0x64>)
 8015190:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015194:	4906      	ldr	r1, [pc, #24]	; (80151b0 <sys_timeouts_sleeptime+0x68>)
 8015196:	4807      	ldr	r0, [pc, #28]	; (80151b4 <sys_timeouts_sleeptime+0x6c>)
 8015198:	f005 f914 	bl	801a3c4 <iprintf>
    return ret;
 801519c:	683b      	ldr	r3, [r7, #0]
  }
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3708      	adds	r7, #8
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
 80151a6:	bf00      	nop
 80151a8:	20004bf0 	.word	0x20004bf0
 80151ac:	0801e298 	.word	0x0801e298
 80151b0:	0801e36c 	.word	0x0801e36c
 80151b4:	0801e30c 	.word	0x0801e30c

080151b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80151bc:	f005 f97e 	bl	801a4bc <rand>
 80151c0:	4603      	mov	r3, r0
 80151c2:	b29b      	uxth	r3, r3
 80151c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80151c8:	b29b      	uxth	r3, r3
 80151ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80151ce:	b29a      	uxth	r2, r3
 80151d0:	4b01      	ldr	r3, [pc, #4]	; (80151d8 <udp_init+0x20>)
 80151d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80151d4:	bf00      	nop
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	2000001c 	.word	0x2000001c

080151dc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80151dc:	b480      	push	{r7}
 80151de:	b083      	sub	sp, #12
 80151e0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80151e2:	2300      	movs	r3, #0
 80151e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80151e6:	4b17      	ldr	r3, [pc, #92]	; (8015244 <udp_new_port+0x68>)
 80151e8:	881b      	ldrh	r3, [r3, #0]
 80151ea:	1c5a      	adds	r2, r3, #1
 80151ec:	b291      	uxth	r1, r2
 80151ee:	4a15      	ldr	r2, [pc, #84]	; (8015244 <udp_new_port+0x68>)
 80151f0:	8011      	strh	r1, [r2, #0]
 80151f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80151f6:	4293      	cmp	r3, r2
 80151f8:	d103      	bne.n	8015202 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80151fa:	4b12      	ldr	r3, [pc, #72]	; (8015244 <udp_new_port+0x68>)
 80151fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015200:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015202:	4b11      	ldr	r3, [pc, #68]	; (8015248 <udp_new_port+0x6c>)
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	603b      	str	r3, [r7, #0]
 8015208:	e011      	b.n	801522e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	8a5a      	ldrh	r2, [r3, #18]
 801520e:	4b0d      	ldr	r3, [pc, #52]	; (8015244 <udp_new_port+0x68>)
 8015210:	881b      	ldrh	r3, [r3, #0]
 8015212:	429a      	cmp	r2, r3
 8015214:	d108      	bne.n	8015228 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015216:	88fb      	ldrh	r3, [r7, #6]
 8015218:	3301      	adds	r3, #1
 801521a:	80fb      	strh	r3, [r7, #6]
 801521c:	88fb      	ldrh	r3, [r7, #6]
 801521e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015222:	d3e0      	bcc.n	80151e6 <udp_new_port+0xa>
        return 0;
 8015224:	2300      	movs	r3, #0
 8015226:	e007      	b.n	8015238 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	68db      	ldr	r3, [r3, #12]
 801522c:	603b      	str	r3, [r7, #0]
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d1ea      	bne.n	801520a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015234:	4b03      	ldr	r3, [pc, #12]	; (8015244 <udp_new_port+0x68>)
 8015236:	881b      	ldrh	r3, [r3, #0]
}
 8015238:	4618      	mov	r0, r3
 801523a:	370c      	adds	r7, #12
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr
 8015244:	2000001c 	.word	0x2000001c
 8015248:	2000bae8 	.word	0x2000bae8

0801524c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b084      	sub	sp, #16
 8015250:	af00      	add	r7, sp, #0
 8015252:	60f8      	str	r0, [r7, #12]
 8015254:	60b9      	str	r1, [r7, #8]
 8015256:	4613      	mov	r3, r2
 8015258:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d105      	bne.n	801526c <udp_input_local_match+0x20>
 8015260:	4b27      	ldr	r3, [pc, #156]	; (8015300 <udp_input_local_match+0xb4>)
 8015262:	2287      	movs	r2, #135	; 0x87
 8015264:	4927      	ldr	r1, [pc, #156]	; (8015304 <udp_input_local_match+0xb8>)
 8015266:	4828      	ldr	r0, [pc, #160]	; (8015308 <udp_input_local_match+0xbc>)
 8015268:	f005 f8ac 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801526c:	68bb      	ldr	r3, [r7, #8]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d105      	bne.n	801527e <udp_input_local_match+0x32>
 8015272:	4b23      	ldr	r3, [pc, #140]	; (8015300 <udp_input_local_match+0xb4>)
 8015274:	2288      	movs	r2, #136	; 0x88
 8015276:	4925      	ldr	r1, [pc, #148]	; (801530c <udp_input_local_match+0xc0>)
 8015278:	4823      	ldr	r0, [pc, #140]	; (8015308 <udp_input_local_match+0xbc>)
 801527a:	f005 f8a3 	bl	801a3c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	7a1b      	ldrb	r3, [r3, #8]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d00b      	beq.n	801529e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	7a1a      	ldrb	r2, [r3, #8]
 801528a:	4b21      	ldr	r3, [pc, #132]	; (8015310 <udp_input_local_match+0xc4>)
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015292:	3301      	adds	r3, #1
 8015294:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015296:	429a      	cmp	r2, r3
 8015298:	d001      	beq.n	801529e <udp_input_local_match+0x52>
    return 0;
 801529a:	2300      	movs	r3, #0
 801529c:	e02b      	b.n	80152f6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801529e:	79fb      	ldrb	r3, [r7, #7]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d018      	beq.n	80152d6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d013      	beq.n	80152d2 <udp_input_local_match+0x86>
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d00f      	beq.n	80152d2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80152b2:	4b17      	ldr	r3, [pc, #92]	; (8015310 <udp_input_local_match+0xc4>)
 80152b4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80152b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152ba:	d00a      	beq.n	80152d2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	681a      	ldr	r2, [r3, #0]
 80152c0:	4b13      	ldr	r3, [pc, #76]	; (8015310 <udp_input_local_match+0xc4>)
 80152c2:	695b      	ldr	r3, [r3, #20]
 80152c4:	405a      	eors	r2, r3
 80152c6:	68bb      	ldr	r3, [r7, #8]
 80152c8:	3308      	adds	r3, #8
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d110      	bne.n	80152f4 <udp_input_local_match+0xa8>
          return 1;
 80152d2:	2301      	movs	r3, #1
 80152d4:	e00f      	b.n	80152f6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d009      	beq.n	80152f0 <udp_input_local_match+0xa4>
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d005      	beq.n	80152f0 <udp_input_local_match+0xa4>
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	681a      	ldr	r2, [r3, #0]
 80152e8:	4b09      	ldr	r3, [pc, #36]	; (8015310 <udp_input_local_match+0xc4>)
 80152ea:	695b      	ldr	r3, [r3, #20]
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d101      	bne.n	80152f4 <udp_input_local_match+0xa8>
        return 1;
 80152f0:	2301      	movs	r3, #1
 80152f2:	e000      	b.n	80152f6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80152f4:	2300      	movs	r3, #0
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	3710      	adds	r7, #16
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bd80      	pop	{r7, pc}
 80152fe:	bf00      	nop
 8015300:	0801e380 	.word	0x0801e380
 8015304:	0801e3b0 	.word	0x0801e3b0
 8015308:	0801e3d4 	.word	0x0801e3d4
 801530c:	0801e3fc 	.word	0x0801e3fc
 8015310:	2000839c 	.word	0x2000839c

08015314 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015314:	b590      	push	{r4, r7, lr}
 8015316:	b08d      	sub	sp, #52	; 0x34
 8015318:	af02      	add	r7, sp, #8
 801531a:	6078      	str	r0, [r7, #4]
 801531c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801531e:	2300      	movs	r3, #0
 8015320:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d105      	bne.n	8015334 <udp_input+0x20>
 8015328:	4b7c      	ldr	r3, [pc, #496]	; (801551c <udp_input+0x208>)
 801532a:	22cf      	movs	r2, #207	; 0xcf
 801532c:	497c      	ldr	r1, [pc, #496]	; (8015520 <udp_input+0x20c>)
 801532e:	487d      	ldr	r0, [pc, #500]	; (8015524 <udp_input+0x210>)
 8015330:	f005 f848 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d105      	bne.n	8015346 <udp_input+0x32>
 801533a:	4b78      	ldr	r3, [pc, #480]	; (801551c <udp_input+0x208>)
 801533c:	22d0      	movs	r2, #208	; 0xd0
 801533e:	497a      	ldr	r1, [pc, #488]	; (8015528 <udp_input+0x214>)
 8015340:	4878      	ldr	r0, [pc, #480]	; (8015524 <udp_input+0x210>)
 8015342:	f005 f83f 	bl	801a3c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	895b      	ldrh	r3, [r3, #10]
 801534a:	2b07      	cmp	r3, #7
 801534c:	d803      	bhi.n	8015356 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f7f9 fa72 	bl	800e838 <pbuf_free>
    goto end;
 8015354:	e0de      	b.n	8015514 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	685b      	ldr	r3, [r3, #4]
 801535a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801535c:	4b73      	ldr	r3, [pc, #460]	; (801552c <udp_input+0x218>)
 801535e:	695a      	ldr	r2, [r3, #20]
 8015360:	4b72      	ldr	r3, [pc, #456]	; (801552c <udp_input+0x218>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	4619      	mov	r1, r3
 8015366:	4610      	mov	r0, r2
 8015368:	f003 feca 	bl	8019100 <ip4_addr_isbroadcast_u32>
 801536c:	4603      	mov	r3, r0
 801536e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	881b      	ldrh	r3, [r3, #0]
 8015374:	b29b      	uxth	r3, r3
 8015376:	4618      	mov	r0, r3
 8015378:	f7f7 fe72 	bl	800d060 <lwip_htons>
 801537c:	4603      	mov	r3, r0
 801537e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015380:	697b      	ldr	r3, [r7, #20]
 8015382:	885b      	ldrh	r3, [r3, #2]
 8015384:	b29b      	uxth	r3, r3
 8015386:	4618      	mov	r0, r3
 8015388:	f7f7 fe6a 	bl	800d060 <lwip_htons>
 801538c:	4603      	mov	r3, r0
 801538e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015390:	2300      	movs	r3, #0
 8015392:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015394:	2300      	movs	r3, #0
 8015396:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015398:	2300      	movs	r3, #0
 801539a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801539c:	4b64      	ldr	r3, [pc, #400]	; (8015530 <udp_input+0x21c>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	627b      	str	r3, [r7, #36]	; 0x24
 80153a2:	e054      	b.n	801544e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80153a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a6:	8a5b      	ldrh	r3, [r3, #18]
 80153a8:	89fa      	ldrh	r2, [r7, #14]
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d14a      	bne.n	8015444 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80153ae:	7cfb      	ldrb	r3, [r7, #19]
 80153b0:	461a      	mov	r2, r3
 80153b2:	6839      	ldr	r1, [r7, #0]
 80153b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153b6:	f7ff ff49 	bl	801524c <udp_input_local_match>
 80153ba:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d041      	beq.n	8015444 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80153c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c2:	7c1b      	ldrb	r3, [r3, #16]
 80153c4:	f003 0304 	and.w	r3, r3, #4
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d11d      	bne.n	8015408 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80153cc:	69fb      	ldr	r3, [r7, #28]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d102      	bne.n	80153d8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80153d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d4:	61fb      	str	r3, [r7, #28]
 80153d6:	e017      	b.n	8015408 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80153d8:	7cfb      	ldrb	r3, [r7, #19]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d014      	beq.n	8015408 <udp_input+0xf4>
 80153de:	4b53      	ldr	r3, [pc, #332]	; (801552c <udp_input+0x218>)
 80153e0:	695b      	ldr	r3, [r3, #20]
 80153e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153e6:	d10f      	bne.n	8015408 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80153e8:	69fb      	ldr	r3, [r7, #28]
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	3304      	adds	r3, #4
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d008      	beq.n	8015408 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80153f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f8:	681a      	ldr	r2, [r3, #0]
 80153fa:	683b      	ldr	r3, [r7, #0]
 80153fc:	3304      	adds	r3, #4
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	429a      	cmp	r2, r3
 8015402:	d101      	bne.n	8015408 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015406:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801540a:	8a9b      	ldrh	r3, [r3, #20]
 801540c:	8a3a      	ldrh	r2, [r7, #16]
 801540e:	429a      	cmp	r2, r3
 8015410:	d118      	bne.n	8015444 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015414:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015416:	2b00      	cmp	r3, #0
 8015418:	d005      	beq.n	8015426 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801541c:	685a      	ldr	r2, [r3, #4]
 801541e:	4b43      	ldr	r3, [pc, #268]	; (801552c <udp_input+0x218>)
 8015420:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015422:	429a      	cmp	r2, r3
 8015424:	d10e      	bne.n	8015444 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015426:	6a3b      	ldr	r3, [r7, #32]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d014      	beq.n	8015456 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801542e:	68da      	ldr	r2, [r3, #12]
 8015430:	6a3b      	ldr	r3, [r7, #32]
 8015432:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015434:	4b3e      	ldr	r3, [pc, #248]	; (8015530 <udp_input+0x21c>)
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801543a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801543c:	4a3c      	ldr	r2, [pc, #240]	; (8015530 <udp_input+0x21c>)
 801543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015440:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015442:	e008      	b.n	8015456 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015446:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544a:	68db      	ldr	r3, [r3, #12]
 801544c:	627b      	str	r3, [r7, #36]	; 0x24
 801544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015450:	2b00      	cmp	r3, #0
 8015452:	d1a7      	bne.n	80153a4 <udp_input+0x90>
 8015454:	e000      	b.n	8015458 <udp_input+0x144>
        break;
 8015456:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801545a:	2b00      	cmp	r3, #0
 801545c:	d101      	bne.n	8015462 <udp_input+0x14e>
    pcb = uncon_pcb;
 801545e:	69fb      	ldr	r3, [r7, #28]
 8015460:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015464:	2b00      	cmp	r3, #0
 8015466:	d002      	beq.n	801546e <udp_input+0x15a>
    for_us = 1;
 8015468:	2301      	movs	r3, #1
 801546a:	76fb      	strb	r3, [r7, #27]
 801546c:	e00a      	b.n	8015484 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	3304      	adds	r3, #4
 8015472:	681a      	ldr	r2, [r3, #0]
 8015474:	4b2d      	ldr	r3, [pc, #180]	; (801552c <udp_input+0x218>)
 8015476:	695b      	ldr	r3, [r3, #20]
 8015478:	429a      	cmp	r2, r3
 801547a:	bf0c      	ite	eq
 801547c:	2301      	moveq	r3, #1
 801547e:	2300      	movne	r3, #0
 8015480:	b2db      	uxtb	r3, r3
 8015482:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015484:	7efb      	ldrb	r3, [r7, #27]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d041      	beq.n	801550e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801548a:	2108      	movs	r1, #8
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	f7f9 f94d 	bl	800e72c <pbuf_remove_header>
 8015492:	4603      	mov	r3, r0
 8015494:	2b00      	cmp	r3, #0
 8015496:	d00a      	beq.n	80154ae <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015498:	4b20      	ldr	r3, [pc, #128]	; (801551c <udp_input+0x208>)
 801549a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801549e:	4925      	ldr	r1, [pc, #148]	; (8015534 <udp_input+0x220>)
 80154a0:	4820      	ldr	r0, [pc, #128]	; (8015524 <udp_input+0x210>)
 80154a2:	f004 ff8f 	bl	801a3c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f7f9 f9c6 	bl	800e838 <pbuf_free>
      goto end;
 80154ac:	e032      	b.n	8015514 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80154ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d012      	beq.n	80154da <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80154b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b6:	699b      	ldr	r3, [r3, #24]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d00a      	beq.n	80154d2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80154bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154be:	699c      	ldr	r4, [r3, #24]
 80154c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c2:	69d8      	ldr	r0, [r3, #28]
 80154c4:	8a3b      	ldrh	r3, [r7, #16]
 80154c6:	9300      	str	r3, [sp, #0]
 80154c8:	4b1b      	ldr	r3, [pc, #108]	; (8015538 <udp_input+0x224>)
 80154ca:	687a      	ldr	r2, [r7, #4]
 80154cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80154ce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80154d0:	e021      	b.n	8015516 <udp_input+0x202>
        pbuf_free(p);
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f7f9 f9b0 	bl	800e838 <pbuf_free>
        goto end;
 80154d8:	e01c      	b.n	8015514 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80154da:	7cfb      	ldrb	r3, [r7, #19]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d112      	bne.n	8015506 <udp_input+0x1f2>
 80154e0:	4b12      	ldr	r3, [pc, #72]	; (801552c <udp_input+0x218>)
 80154e2:	695b      	ldr	r3, [r3, #20]
 80154e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80154e8:	2be0      	cmp	r3, #224	; 0xe0
 80154ea:	d00c      	beq.n	8015506 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80154ec:	4b0f      	ldr	r3, [pc, #60]	; (801552c <udp_input+0x218>)
 80154ee:	899b      	ldrh	r3, [r3, #12]
 80154f0:	3308      	adds	r3, #8
 80154f2:	b29b      	uxth	r3, r3
 80154f4:	b21b      	sxth	r3, r3
 80154f6:	4619      	mov	r1, r3
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f7f9 f98a 	bl	800e812 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80154fe:	2103      	movs	r1, #3
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	f003 fac1 	bl	8018a88 <icmp_dest_unreach>
      pbuf_free(p);
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f7f9 f996 	bl	800e838 <pbuf_free>
  return;
 801550c:	e003      	b.n	8015516 <udp_input+0x202>
    pbuf_free(p);
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f7f9 f992 	bl	800e838 <pbuf_free>
  return;
 8015514:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015516:	372c      	adds	r7, #44	; 0x2c
 8015518:	46bd      	mov	sp, r7
 801551a:	bd90      	pop	{r4, r7, pc}
 801551c:	0801e380 	.word	0x0801e380
 8015520:	0801e424 	.word	0x0801e424
 8015524:	0801e3d4 	.word	0x0801e3d4
 8015528:	0801e43c 	.word	0x0801e43c
 801552c:	2000839c 	.word	0x2000839c
 8015530:	2000bae8 	.word	0x2000bae8
 8015534:	0801e458 	.word	0x0801e458
 8015538:	200083ac 	.word	0x200083ac

0801553c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b082      	sub	sp, #8
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
 8015544:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d109      	bne.n	8015560 <udp_send+0x24>
 801554c:	4b11      	ldr	r3, [pc, #68]	; (8015594 <udp_send+0x58>)
 801554e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015552:	4911      	ldr	r1, [pc, #68]	; (8015598 <udp_send+0x5c>)
 8015554:	4811      	ldr	r0, [pc, #68]	; (801559c <udp_send+0x60>)
 8015556:	f004 ff35 	bl	801a3c4 <iprintf>
 801555a:	f06f 030f 	mvn.w	r3, #15
 801555e:	e015      	b.n	801558c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d109      	bne.n	801557a <udp_send+0x3e>
 8015566:	4b0b      	ldr	r3, [pc, #44]	; (8015594 <udp_send+0x58>)
 8015568:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801556c:	490c      	ldr	r1, [pc, #48]	; (80155a0 <udp_send+0x64>)
 801556e:	480b      	ldr	r0, [pc, #44]	; (801559c <udp_send+0x60>)
 8015570:	f004 ff28 	bl	801a3c4 <iprintf>
 8015574:	f06f 030f 	mvn.w	r3, #15
 8015578:	e008      	b.n	801558c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	1d1a      	adds	r2, r3, #4
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	8a9b      	ldrh	r3, [r3, #20]
 8015582:	6839      	ldr	r1, [r7, #0]
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f000 f80d 	bl	80155a4 <udp_sendto>
 801558a:	4603      	mov	r3, r0
}
 801558c:	4618      	mov	r0, r3
 801558e:	3708      	adds	r7, #8
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	0801e380 	.word	0x0801e380
 8015598:	0801e474 	.word	0x0801e474
 801559c:	0801e3d4 	.word	0x0801e3d4
 80155a0:	0801e48c 	.word	0x0801e48c

080155a4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b088      	sub	sp, #32
 80155a8:	af02      	add	r7, sp, #8
 80155aa:	60f8      	str	r0, [r7, #12]
 80155ac:	60b9      	str	r1, [r7, #8]
 80155ae:	607a      	str	r2, [r7, #4]
 80155b0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d109      	bne.n	80155cc <udp_sendto+0x28>
 80155b8:	4b23      	ldr	r3, [pc, #140]	; (8015648 <udp_sendto+0xa4>)
 80155ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 80155be:	4923      	ldr	r1, [pc, #140]	; (801564c <udp_sendto+0xa8>)
 80155c0:	4823      	ldr	r0, [pc, #140]	; (8015650 <udp_sendto+0xac>)
 80155c2:	f004 feff 	bl	801a3c4 <iprintf>
 80155c6:	f06f 030f 	mvn.w	r3, #15
 80155ca:	e038      	b.n	801563e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80155cc:	68bb      	ldr	r3, [r7, #8]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d109      	bne.n	80155e6 <udp_sendto+0x42>
 80155d2:	4b1d      	ldr	r3, [pc, #116]	; (8015648 <udp_sendto+0xa4>)
 80155d4:	f240 2219 	movw	r2, #537	; 0x219
 80155d8:	491e      	ldr	r1, [pc, #120]	; (8015654 <udp_sendto+0xb0>)
 80155da:	481d      	ldr	r0, [pc, #116]	; (8015650 <udp_sendto+0xac>)
 80155dc:	f004 fef2 	bl	801a3c4 <iprintf>
 80155e0:	f06f 030f 	mvn.w	r3, #15
 80155e4:	e02b      	b.n	801563e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d109      	bne.n	8015600 <udp_sendto+0x5c>
 80155ec:	4b16      	ldr	r3, [pc, #88]	; (8015648 <udp_sendto+0xa4>)
 80155ee:	f240 221a 	movw	r2, #538	; 0x21a
 80155f2:	4919      	ldr	r1, [pc, #100]	; (8015658 <udp_sendto+0xb4>)
 80155f4:	4816      	ldr	r0, [pc, #88]	; (8015650 <udp_sendto+0xac>)
 80155f6:	f004 fee5 	bl	801a3c4 <iprintf>
 80155fa:	f06f 030f 	mvn.w	r3, #15
 80155fe:	e01e      	b.n	801563e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	7a1b      	ldrb	r3, [r3, #8]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d006      	beq.n	8015616 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	7a1b      	ldrb	r3, [r3, #8]
 801560c:	4618      	mov	r0, r3
 801560e:	f7f8 fd51 	bl	800e0b4 <netif_get_by_index>
 8015612:	6178      	str	r0, [r7, #20]
 8015614:	e003      	b.n	801561e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f003 fac0 	bl	8018b9c <ip4_route>
 801561c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801561e:	697b      	ldr	r3, [r7, #20]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d102      	bne.n	801562a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015624:	f06f 0303 	mvn.w	r3, #3
 8015628:	e009      	b.n	801563e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801562a:	887a      	ldrh	r2, [r7, #2]
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	9300      	str	r3, [sp, #0]
 8015630:	4613      	mov	r3, r2
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	68b9      	ldr	r1, [r7, #8]
 8015636:	68f8      	ldr	r0, [r7, #12]
 8015638:	f000 f810 	bl	801565c <udp_sendto_if>
 801563c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801563e:	4618      	mov	r0, r3
 8015640:	3718      	adds	r7, #24
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}
 8015646:	bf00      	nop
 8015648:	0801e380 	.word	0x0801e380
 801564c:	0801e4a4 	.word	0x0801e4a4
 8015650:	0801e3d4 	.word	0x0801e3d4
 8015654:	0801e4bc 	.word	0x0801e4bc
 8015658:	0801e4d8 	.word	0x0801e4d8

0801565c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b088      	sub	sp, #32
 8015660:	af02      	add	r7, sp, #8
 8015662:	60f8      	str	r0, [r7, #12]
 8015664:	60b9      	str	r1, [r7, #8]
 8015666:	607a      	str	r2, [r7, #4]
 8015668:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d109      	bne.n	8015684 <udp_sendto_if+0x28>
 8015670:	4b2e      	ldr	r3, [pc, #184]	; (801572c <udp_sendto_if+0xd0>)
 8015672:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015676:	492e      	ldr	r1, [pc, #184]	; (8015730 <udp_sendto_if+0xd4>)
 8015678:	482e      	ldr	r0, [pc, #184]	; (8015734 <udp_sendto_if+0xd8>)
 801567a:	f004 fea3 	bl	801a3c4 <iprintf>
 801567e:	f06f 030f 	mvn.w	r3, #15
 8015682:	e04f      	b.n	8015724 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d109      	bne.n	801569e <udp_sendto_if+0x42>
 801568a:	4b28      	ldr	r3, [pc, #160]	; (801572c <udp_sendto_if+0xd0>)
 801568c:	f240 2281 	movw	r2, #641	; 0x281
 8015690:	4929      	ldr	r1, [pc, #164]	; (8015738 <udp_sendto_if+0xdc>)
 8015692:	4828      	ldr	r0, [pc, #160]	; (8015734 <udp_sendto_if+0xd8>)
 8015694:	f004 fe96 	bl	801a3c4 <iprintf>
 8015698:	f06f 030f 	mvn.w	r3, #15
 801569c:	e042      	b.n	8015724 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d109      	bne.n	80156b8 <udp_sendto_if+0x5c>
 80156a4:	4b21      	ldr	r3, [pc, #132]	; (801572c <udp_sendto_if+0xd0>)
 80156a6:	f240 2282 	movw	r2, #642	; 0x282
 80156aa:	4924      	ldr	r1, [pc, #144]	; (801573c <udp_sendto_if+0xe0>)
 80156ac:	4821      	ldr	r0, [pc, #132]	; (8015734 <udp_sendto_if+0xd8>)
 80156ae:	f004 fe89 	bl	801a3c4 <iprintf>
 80156b2:	f06f 030f 	mvn.w	r3, #15
 80156b6:	e035      	b.n	8015724 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80156b8:	6a3b      	ldr	r3, [r7, #32]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d109      	bne.n	80156d2 <udp_sendto_if+0x76>
 80156be:	4b1b      	ldr	r3, [pc, #108]	; (801572c <udp_sendto_if+0xd0>)
 80156c0:	f240 2283 	movw	r2, #643	; 0x283
 80156c4:	491e      	ldr	r1, [pc, #120]	; (8015740 <udp_sendto_if+0xe4>)
 80156c6:	481b      	ldr	r0, [pc, #108]	; (8015734 <udp_sendto_if+0xd8>)
 80156c8:	f004 fe7c 	bl	801a3c4 <iprintf>
 80156cc:	f06f 030f 	mvn.w	r3, #15
 80156d0:	e028      	b.n	8015724 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d009      	beq.n	80156ec <udp_sendto_if+0x90>
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d005      	beq.n	80156ec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80156e8:	2be0      	cmp	r3, #224	; 0xe0
 80156ea:	d103      	bne.n	80156f4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80156ec:	6a3b      	ldr	r3, [r7, #32]
 80156ee:	3304      	adds	r3, #4
 80156f0:	617b      	str	r3, [r7, #20]
 80156f2:	e00b      	b.n	801570c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	681a      	ldr	r2, [r3, #0]
 80156f8:	6a3b      	ldr	r3, [r7, #32]
 80156fa:	3304      	adds	r3, #4
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	429a      	cmp	r2, r3
 8015700:	d002      	beq.n	8015708 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015702:	f06f 0303 	mvn.w	r3, #3
 8015706:	e00d      	b.n	8015724 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801570c:	887a      	ldrh	r2, [r7, #2]
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	9301      	str	r3, [sp, #4]
 8015712:	6a3b      	ldr	r3, [r7, #32]
 8015714:	9300      	str	r3, [sp, #0]
 8015716:	4613      	mov	r3, r2
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	68b9      	ldr	r1, [r7, #8]
 801571c:	68f8      	ldr	r0, [r7, #12]
 801571e:	f000 f811 	bl	8015744 <udp_sendto_if_src>
 8015722:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015724:	4618      	mov	r0, r3
 8015726:	3718      	adds	r7, #24
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}
 801572c:	0801e380 	.word	0x0801e380
 8015730:	0801e4f4 	.word	0x0801e4f4
 8015734:	0801e3d4 	.word	0x0801e3d4
 8015738:	0801e510 	.word	0x0801e510
 801573c:	0801e52c 	.word	0x0801e52c
 8015740:	0801e54c 	.word	0x0801e54c

08015744 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b08c      	sub	sp, #48	; 0x30
 8015748:	af04      	add	r7, sp, #16
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	607a      	str	r2, [r7, #4]
 8015750:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d109      	bne.n	801576c <udp_sendto_if_src+0x28>
 8015758:	4b65      	ldr	r3, [pc, #404]	; (80158f0 <udp_sendto_if_src+0x1ac>)
 801575a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801575e:	4965      	ldr	r1, [pc, #404]	; (80158f4 <udp_sendto_if_src+0x1b0>)
 8015760:	4865      	ldr	r0, [pc, #404]	; (80158f8 <udp_sendto_if_src+0x1b4>)
 8015762:	f004 fe2f 	bl	801a3c4 <iprintf>
 8015766:	f06f 030f 	mvn.w	r3, #15
 801576a:	e0bc      	b.n	80158e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d109      	bne.n	8015786 <udp_sendto_if_src+0x42>
 8015772:	4b5f      	ldr	r3, [pc, #380]	; (80158f0 <udp_sendto_if_src+0x1ac>)
 8015774:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015778:	4960      	ldr	r1, [pc, #384]	; (80158fc <udp_sendto_if_src+0x1b8>)
 801577a:	485f      	ldr	r0, [pc, #380]	; (80158f8 <udp_sendto_if_src+0x1b4>)
 801577c:	f004 fe22 	bl	801a3c4 <iprintf>
 8015780:	f06f 030f 	mvn.w	r3, #15
 8015784:	e0af      	b.n	80158e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d109      	bne.n	80157a0 <udp_sendto_if_src+0x5c>
 801578c:	4b58      	ldr	r3, [pc, #352]	; (80158f0 <udp_sendto_if_src+0x1ac>)
 801578e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015792:	495b      	ldr	r1, [pc, #364]	; (8015900 <udp_sendto_if_src+0x1bc>)
 8015794:	4858      	ldr	r0, [pc, #352]	; (80158f8 <udp_sendto_if_src+0x1b4>)
 8015796:	f004 fe15 	bl	801a3c4 <iprintf>
 801579a:	f06f 030f 	mvn.w	r3, #15
 801579e:	e0a2      	b.n	80158e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80157a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d109      	bne.n	80157ba <udp_sendto_if_src+0x76>
 80157a6:	4b52      	ldr	r3, [pc, #328]	; (80158f0 <udp_sendto_if_src+0x1ac>)
 80157a8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80157ac:	4955      	ldr	r1, [pc, #340]	; (8015904 <udp_sendto_if_src+0x1c0>)
 80157ae:	4852      	ldr	r0, [pc, #328]	; (80158f8 <udp_sendto_if_src+0x1b4>)
 80157b0:	f004 fe08 	bl	801a3c4 <iprintf>
 80157b4:	f06f 030f 	mvn.w	r3, #15
 80157b8:	e095      	b.n	80158e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80157ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d109      	bne.n	80157d4 <udp_sendto_if_src+0x90>
 80157c0:	4b4b      	ldr	r3, [pc, #300]	; (80158f0 <udp_sendto_if_src+0x1ac>)
 80157c2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80157c6:	4950      	ldr	r1, [pc, #320]	; (8015908 <udp_sendto_if_src+0x1c4>)
 80157c8:	484b      	ldr	r0, [pc, #300]	; (80158f8 <udp_sendto_if_src+0x1b4>)
 80157ca:	f004 fdfb 	bl	801a3c4 <iprintf>
 80157ce:	f06f 030f 	mvn.w	r3, #15
 80157d2:	e088      	b.n	80158e6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	8a5b      	ldrh	r3, [r3, #18]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d10f      	bne.n	80157fc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80157dc:	68f9      	ldr	r1, [r7, #12]
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	8a5b      	ldrh	r3, [r3, #18]
 80157e2:	461a      	mov	r2, r3
 80157e4:	68f8      	ldr	r0, [r7, #12]
 80157e6:	f000 f893 	bl	8015910 <udp_bind>
 80157ea:	4603      	mov	r3, r0
 80157ec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80157ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d002      	beq.n	80157fc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80157f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80157fa:	e074      	b.n	80158e6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	891b      	ldrh	r3, [r3, #8]
 8015800:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015804:	4293      	cmp	r3, r2
 8015806:	d902      	bls.n	801580e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015808:	f04f 33ff 	mov.w	r3, #4294967295
 801580c:	e06b      	b.n	80158e6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801580e:	2108      	movs	r1, #8
 8015810:	68b8      	ldr	r0, [r7, #8]
 8015812:	f7f8 ff7b 	bl	800e70c <pbuf_add_header>
 8015816:	4603      	mov	r3, r0
 8015818:	2b00      	cmp	r3, #0
 801581a:	d015      	beq.n	8015848 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801581c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015820:	2108      	movs	r1, #8
 8015822:	2022      	movs	r0, #34	; 0x22
 8015824:	f7f8 fd28 	bl	800e278 <pbuf_alloc>
 8015828:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801582a:	69fb      	ldr	r3, [r7, #28]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d102      	bne.n	8015836 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015830:	f04f 33ff 	mov.w	r3, #4294967295
 8015834:	e057      	b.n	80158e6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015836:	68bb      	ldr	r3, [r7, #8]
 8015838:	891b      	ldrh	r3, [r3, #8]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d006      	beq.n	801584c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801583e:	68b9      	ldr	r1, [r7, #8]
 8015840:	69f8      	ldr	r0, [r7, #28]
 8015842:	f7f9 f91d 	bl	800ea80 <pbuf_chain>
 8015846:	e001      	b.n	801584c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	895b      	ldrh	r3, [r3, #10]
 8015850:	2b07      	cmp	r3, #7
 8015852:	d806      	bhi.n	8015862 <udp_sendto_if_src+0x11e>
 8015854:	4b26      	ldr	r3, [pc, #152]	; (80158f0 <udp_sendto_if_src+0x1ac>)
 8015856:	f240 320e 	movw	r2, #782	; 0x30e
 801585a:	492c      	ldr	r1, [pc, #176]	; (801590c <udp_sendto_if_src+0x1c8>)
 801585c:	4826      	ldr	r0, [pc, #152]	; (80158f8 <udp_sendto_if_src+0x1b4>)
 801585e:	f004 fdb1 	bl	801a3c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015862:	69fb      	ldr	r3, [r7, #28]
 8015864:	685b      	ldr	r3, [r3, #4]
 8015866:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	8a5b      	ldrh	r3, [r3, #18]
 801586c:	4618      	mov	r0, r3
 801586e:	f7f7 fbf7 	bl	800d060 <lwip_htons>
 8015872:	4603      	mov	r3, r0
 8015874:	461a      	mov	r2, r3
 8015876:	697b      	ldr	r3, [r7, #20]
 8015878:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801587a:	887b      	ldrh	r3, [r7, #2]
 801587c:	4618      	mov	r0, r3
 801587e:	f7f7 fbef 	bl	800d060 <lwip_htons>
 8015882:	4603      	mov	r3, r0
 8015884:	461a      	mov	r2, r3
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	2200      	movs	r2, #0
 801588e:	719a      	strb	r2, [r3, #6]
 8015890:	2200      	movs	r2, #0
 8015892:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015894:	69fb      	ldr	r3, [r7, #28]
 8015896:	891b      	ldrh	r3, [r3, #8]
 8015898:	4618      	mov	r0, r3
 801589a:	f7f7 fbe1 	bl	800d060 <lwip_htons>
 801589e:	4603      	mov	r3, r0
 80158a0:	461a      	mov	r2, r3
 80158a2:	697b      	ldr	r3, [r7, #20]
 80158a4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80158a6:	2311      	movs	r3, #17
 80158a8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	7adb      	ldrb	r3, [r3, #11]
 80158ae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	7a9b      	ldrb	r3, [r3, #10]
 80158b4:	7cb9      	ldrb	r1, [r7, #18]
 80158b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158b8:	9202      	str	r2, [sp, #8]
 80158ba:	7cfa      	ldrb	r2, [r7, #19]
 80158bc:	9201      	str	r2, [sp, #4]
 80158be:	9300      	str	r3, [sp, #0]
 80158c0:	460b      	mov	r3, r1
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80158c6:	69f8      	ldr	r0, [r7, #28]
 80158c8:	f003 fb6c 	bl	8018fa4 <ip4_output_if_src>
 80158cc:	4603      	mov	r3, r0
 80158ce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80158d0:	69fa      	ldr	r2, [r7, #28]
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d004      	beq.n	80158e2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80158d8:	69f8      	ldr	r0, [r7, #28]
 80158da:	f7f8 ffad 	bl	800e838 <pbuf_free>
    q = NULL;
 80158de:	2300      	movs	r3, #0
 80158e0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80158e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3720      	adds	r7, #32
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	bf00      	nop
 80158f0:	0801e380 	.word	0x0801e380
 80158f4:	0801e56c 	.word	0x0801e56c
 80158f8:	0801e3d4 	.word	0x0801e3d4
 80158fc:	0801e58c 	.word	0x0801e58c
 8015900:	0801e5ac 	.word	0x0801e5ac
 8015904:	0801e5d0 	.word	0x0801e5d0
 8015908:	0801e5f4 	.word	0x0801e5f4
 801590c:	0801e618 	.word	0x0801e618

08015910 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b086      	sub	sp, #24
 8015914:	af00      	add	r7, sp, #0
 8015916:	60f8      	str	r0, [r7, #12]
 8015918:	60b9      	str	r1, [r7, #8]
 801591a:	4613      	mov	r3, r2
 801591c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801591e:	68bb      	ldr	r3, [r7, #8]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d101      	bne.n	8015928 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015924:	4b39      	ldr	r3, [pc, #228]	; (8015a0c <udp_bind+0xfc>)
 8015926:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d109      	bne.n	8015942 <udp_bind+0x32>
 801592e:	4b38      	ldr	r3, [pc, #224]	; (8015a10 <udp_bind+0x100>)
 8015930:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015934:	4937      	ldr	r1, [pc, #220]	; (8015a14 <udp_bind+0x104>)
 8015936:	4838      	ldr	r0, [pc, #224]	; (8015a18 <udp_bind+0x108>)
 8015938:	f004 fd44 	bl	801a3c4 <iprintf>
 801593c:	f06f 030f 	mvn.w	r3, #15
 8015940:	e060      	b.n	8015a04 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015942:	2300      	movs	r3, #0
 8015944:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015946:	4b35      	ldr	r3, [pc, #212]	; (8015a1c <udp_bind+0x10c>)
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	617b      	str	r3, [r7, #20]
 801594c:	e009      	b.n	8015962 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801594e:	68fa      	ldr	r2, [r7, #12]
 8015950:	697b      	ldr	r3, [r7, #20]
 8015952:	429a      	cmp	r2, r3
 8015954:	d102      	bne.n	801595c <udp_bind+0x4c>
      rebind = 1;
 8015956:	2301      	movs	r3, #1
 8015958:	74fb      	strb	r3, [r7, #19]
      break;
 801595a:	e005      	b.n	8015968 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	68db      	ldr	r3, [r3, #12]
 8015960:	617b      	str	r3, [r7, #20]
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d1f2      	bne.n	801594e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015968:	88fb      	ldrh	r3, [r7, #6]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d109      	bne.n	8015982 <udp_bind+0x72>
    port = udp_new_port();
 801596e:	f7ff fc35 	bl	80151dc <udp_new_port>
 8015972:	4603      	mov	r3, r0
 8015974:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015976:	88fb      	ldrh	r3, [r7, #6]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d12c      	bne.n	80159d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801597c:	f06f 0307 	mvn.w	r3, #7
 8015980:	e040      	b.n	8015a04 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015982:	4b26      	ldr	r3, [pc, #152]	; (8015a1c <udp_bind+0x10c>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	617b      	str	r3, [r7, #20]
 8015988:	e022      	b.n	80159d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801598a:	68fa      	ldr	r2, [r7, #12]
 801598c:	697b      	ldr	r3, [r7, #20]
 801598e:	429a      	cmp	r2, r3
 8015990:	d01b      	beq.n	80159ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015992:	697b      	ldr	r3, [r7, #20]
 8015994:	8a5b      	ldrh	r3, [r3, #18]
 8015996:	88fa      	ldrh	r2, [r7, #6]
 8015998:	429a      	cmp	r2, r3
 801599a:	d116      	bne.n	80159ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	681a      	ldr	r2, [r3, #0]
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d00d      	beq.n	80159c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d00a      	beq.n	80159c4 <udp_bind+0xb4>
 80159ae:	68bb      	ldr	r3, [r7, #8]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d006      	beq.n	80159c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80159b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d003      	beq.n	80159c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d102      	bne.n	80159ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80159c4:	f06f 0307 	mvn.w	r3, #7
 80159c8:	e01c      	b.n	8015a04 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	68db      	ldr	r3, [r3, #12]
 80159ce:	617b      	str	r3, [r7, #20]
 80159d0:	697b      	ldr	r3, [r7, #20]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d1d9      	bne.n	801598a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d002      	beq.n	80159e2 <udp_bind+0xd2>
 80159dc:	68bb      	ldr	r3, [r7, #8]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	e000      	b.n	80159e4 <udp_bind+0xd4>
 80159e2:	2300      	movs	r3, #0
 80159e4:	68fa      	ldr	r2, [r7, #12]
 80159e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	88fa      	ldrh	r2, [r7, #6]
 80159ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80159ee:	7cfb      	ldrb	r3, [r7, #19]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d106      	bne.n	8015a02 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80159f4:	4b09      	ldr	r3, [pc, #36]	; (8015a1c <udp_bind+0x10c>)
 80159f6:	681a      	ldr	r2, [r3, #0]
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80159fc:	4a07      	ldr	r2, [pc, #28]	; (8015a1c <udp_bind+0x10c>)
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015a02:	2300      	movs	r3, #0
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	3718      	adds	r7, #24
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	0801f328 	.word	0x0801f328
 8015a10:	0801e380 	.word	0x0801e380
 8015a14:	0801e648 	.word	0x0801e648
 8015a18:	0801e3d4 	.word	0x0801e3d4
 8015a1c:	2000bae8 	.word	0x2000bae8

08015a20 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8015a20:	b480      	push	{r7}
 8015a22:	b083      	sub	sp, #12
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
 8015a28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d007      	beq.n	8015a40 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015a36:	3301      	adds	r3, #1
 8015a38:	b2da      	uxtb	r2, r3
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8015a3e:	e002      	b.n	8015a46 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2200      	movs	r2, #0
 8015a44:	721a      	strb	r2, [r3, #8]
}
 8015a46:	bf00      	nop
 8015a48:	370c      	adds	r7, #12
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a50:	4770      	bx	lr
	...

08015a54 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b086      	sub	sp, #24
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	60f8      	str	r0, [r7, #12]
 8015a5c:	60b9      	str	r1, [r7, #8]
 8015a5e:	4613      	mov	r3, r2
 8015a60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d109      	bne.n	8015a7c <udp_connect+0x28>
 8015a68:	4b2c      	ldr	r3, [pc, #176]	; (8015b1c <udp_connect+0xc8>)
 8015a6a:	f240 4235 	movw	r2, #1077	; 0x435
 8015a6e:	492c      	ldr	r1, [pc, #176]	; (8015b20 <udp_connect+0xcc>)
 8015a70:	482c      	ldr	r0, [pc, #176]	; (8015b24 <udp_connect+0xd0>)
 8015a72:	f004 fca7 	bl	801a3c4 <iprintf>
 8015a76:	f06f 030f 	mvn.w	r3, #15
 8015a7a:	e04b      	b.n	8015b14 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d109      	bne.n	8015a96 <udp_connect+0x42>
 8015a82:	4b26      	ldr	r3, [pc, #152]	; (8015b1c <udp_connect+0xc8>)
 8015a84:	f240 4236 	movw	r2, #1078	; 0x436
 8015a88:	4927      	ldr	r1, [pc, #156]	; (8015b28 <udp_connect+0xd4>)
 8015a8a:	4826      	ldr	r0, [pc, #152]	; (8015b24 <udp_connect+0xd0>)
 8015a8c:	f004 fc9a 	bl	801a3c4 <iprintf>
 8015a90:	f06f 030f 	mvn.w	r3, #15
 8015a94:	e03e      	b.n	8015b14 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	8a5b      	ldrh	r3, [r3, #18]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d10f      	bne.n	8015abe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015a9e:	68f9      	ldr	r1, [r7, #12]
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	8a5b      	ldrh	r3, [r3, #18]
 8015aa4:	461a      	mov	r2, r3
 8015aa6:	68f8      	ldr	r0, [r7, #12]
 8015aa8:	f7ff ff32 	bl	8015910 <udp_bind>
 8015aac:	4603      	mov	r3, r0
 8015aae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8015ab0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d002      	beq.n	8015abe <udp_connect+0x6a>
      return err;
 8015ab8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015abc:	e02a      	b.n	8015b14 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015abe:	68bb      	ldr	r3, [r7, #8]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d002      	beq.n	8015aca <udp_connect+0x76>
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	e000      	b.n	8015acc <udp_connect+0x78>
 8015aca:	2300      	movs	r3, #0
 8015acc:	68fa      	ldr	r2, [r7, #12]
 8015ace:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	88fa      	ldrh	r2, [r7, #6]
 8015ad4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	7c1b      	ldrb	r3, [r3, #16]
 8015ada:	f043 0304 	orr.w	r3, r3, #4
 8015ade:	b2da      	uxtb	r2, r3
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015ae4:	4b11      	ldr	r3, [pc, #68]	; (8015b2c <udp_connect+0xd8>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	617b      	str	r3, [r7, #20]
 8015aea:	e008      	b.n	8015afe <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015aec:	68fa      	ldr	r2, [r7, #12]
 8015aee:	697b      	ldr	r3, [r7, #20]
 8015af0:	429a      	cmp	r2, r3
 8015af2:	d101      	bne.n	8015af8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015af4:	2300      	movs	r3, #0
 8015af6:	e00d      	b.n	8015b14 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	68db      	ldr	r3, [r3, #12]
 8015afc:	617b      	str	r3, [r7, #20]
 8015afe:	697b      	ldr	r3, [r7, #20]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d1f3      	bne.n	8015aec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015b04:	4b09      	ldr	r3, [pc, #36]	; (8015b2c <udp_connect+0xd8>)
 8015b06:	681a      	ldr	r2, [r3, #0]
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015b0c:	4a07      	ldr	r2, [pc, #28]	; (8015b2c <udp_connect+0xd8>)
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8015b12:	2300      	movs	r3, #0
}
 8015b14:	4618      	mov	r0, r3
 8015b16:	3718      	adds	r7, #24
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}
 8015b1c:	0801e380 	.word	0x0801e380
 8015b20:	0801e660 	.word	0x0801e660
 8015b24:	0801e3d4 	.word	0x0801e3d4
 8015b28:	0801e67c 	.word	0x0801e67c
 8015b2c:	2000bae8 	.word	0x2000bae8

08015b30 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b084      	sub	sp, #16
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	60f8      	str	r0, [r7, #12]
 8015b38:	60b9      	str	r1, [r7, #8]
 8015b3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d107      	bne.n	8015b52 <udp_recv+0x22>
 8015b42:	4b08      	ldr	r3, [pc, #32]	; (8015b64 <udp_recv+0x34>)
 8015b44:	f240 428a 	movw	r2, #1162	; 0x48a
 8015b48:	4907      	ldr	r1, [pc, #28]	; (8015b68 <udp_recv+0x38>)
 8015b4a:	4808      	ldr	r0, [pc, #32]	; (8015b6c <udp_recv+0x3c>)
 8015b4c:	f004 fc3a 	bl	801a3c4 <iprintf>
 8015b50:	e005      	b.n	8015b5e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	68ba      	ldr	r2, [r7, #8]
 8015b56:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	687a      	ldr	r2, [r7, #4]
 8015b5c:	61da      	str	r2, [r3, #28]
}
 8015b5e:	3710      	adds	r7, #16
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	0801e380 	.word	0x0801e380
 8015b68:	0801e6b4 	.word	0x0801e6b4
 8015b6c:	0801e3d4 	.word	0x0801e3d4

08015b70 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b084      	sub	sp, #16
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d107      	bne.n	8015b8e <udp_remove+0x1e>
 8015b7e:	4b19      	ldr	r3, [pc, #100]	; (8015be4 <udp_remove+0x74>)
 8015b80:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015b84:	4918      	ldr	r1, [pc, #96]	; (8015be8 <udp_remove+0x78>)
 8015b86:	4819      	ldr	r0, [pc, #100]	; (8015bec <udp_remove+0x7c>)
 8015b88:	f004 fc1c 	bl	801a3c4 <iprintf>
 8015b8c:	e026      	b.n	8015bdc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015b8e:	4b18      	ldr	r3, [pc, #96]	; (8015bf0 <udp_remove+0x80>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	687a      	ldr	r2, [r7, #4]
 8015b94:	429a      	cmp	r2, r3
 8015b96:	d105      	bne.n	8015ba4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015b98:	4b15      	ldr	r3, [pc, #84]	; (8015bf0 <udp_remove+0x80>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	68db      	ldr	r3, [r3, #12]
 8015b9e:	4a14      	ldr	r2, [pc, #80]	; (8015bf0 <udp_remove+0x80>)
 8015ba0:	6013      	str	r3, [r2, #0]
 8015ba2:	e017      	b.n	8015bd4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015ba4:	4b12      	ldr	r3, [pc, #72]	; (8015bf0 <udp_remove+0x80>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	60fb      	str	r3, [r7, #12]
 8015baa:	e010      	b.n	8015bce <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d009      	beq.n	8015bc8 <udp_remove+0x58>
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	68db      	ldr	r3, [r3, #12]
 8015bb8:	687a      	ldr	r2, [r7, #4]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d104      	bne.n	8015bc8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	68da      	ldr	r2, [r3, #12]
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	60da      	str	r2, [r3, #12]
        break;
 8015bc6:	e005      	b.n	8015bd4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	68db      	ldr	r3, [r3, #12]
 8015bcc:	60fb      	str	r3, [r7, #12]
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d1eb      	bne.n	8015bac <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015bd4:	6879      	ldr	r1, [r7, #4]
 8015bd6:	2000      	movs	r0, #0
 8015bd8:	f7f7 ff4a 	bl	800da70 <memp_free>
}
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}
 8015be2:	bf00      	nop
 8015be4:	0801e380 	.word	0x0801e380
 8015be8:	0801e6cc 	.word	0x0801e6cc
 8015bec:	0801e3d4 	.word	0x0801e3d4
 8015bf0:	2000bae8 	.word	0x2000bae8

08015bf4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b082      	sub	sp, #8
 8015bf8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015bfa:	2000      	movs	r0, #0
 8015bfc:	f7f7 fee6 	bl	800d9cc <memp_malloc>
 8015c00:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d007      	beq.n	8015c18 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015c08:	2220      	movs	r2, #32
 8015c0a:	2100      	movs	r1, #0
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f004 fbd0 	bl	801a3b2 <memset>
    pcb->ttl = UDP_TTL;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	22ff      	movs	r2, #255	; 0xff
 8015c16:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015c18:	687b      	ldr	r3, [r7, #4]
}
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	3708      	adds	r7, #8
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}

08015c22 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015c22:	b580      	push	{r7, lr}
 8015c24:	b084      	sub	sp, #16
 8015c26:	af00      	add	r7, sp, #0
 8015c28:	4603      	mov	r3, r0
 8015c2a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015c2c:	f7ff ffe2 	bl	8015bf4 <udp_new>
 8015c30:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015c32:	68fb      	ldr	r3, [r7, #12]
}
 8015c34:	4618      	mov	r0, r3
 8015c36:	3710      	adds	r7, #16
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}

08015c3c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b085      	sub	sp, #20
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d01e      	beq.n	8015c8a <udp_netif_ip_addr_changed+0x4e>
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d01a      	beq.n	8015c8a <udp_netif_ip_addr_changed+0x4e>
 8015c54:	683b      	ldr	r3, [r7, #0]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d017      	beq.n	8015c8a <udp_netif_ip_addr_changed+0x4e>
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d013      	beq.n	8015c8a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015c62:	4b0d      	ldr	r3, [pc, #52]	; (8015c98 <udp_netif_ip_addr_changed+0x5c>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	60fb      	str	r3, [r7, #12]
 8015c68:	e00c      	b.n	8015c84 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	681a      	ldr	r2, [r3, #0]
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	429a      	cmp	r2, r3
 8015c74:	d103      	bne.n	8015c7e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	681a      	ldr	r2, [r3, #0]
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	68db      	ldr	r3, [r3, #12]
 8015c82:	60fb      	str	r3, [r7, #12]
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d1ef      	bne.n	8015c6a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015c8a:	bf00      	nop
 8015c8c:	3714      	adds	r7, #20
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c94:	4770      	bx	lr
 8015c96:	bf00      	nop
 8015c98:	2000bae8 	.word	0x2000bae8

08015c9c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015ca0:	4b20      	ldr	r3, [pc, #128]	; (8015d24 <dhcp_inc_pcb_refcount+0x88>)
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d133      	bne.n	8015d10 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015ca8:	4b1f      	ldr	r3, [pc, #124]	; (8015d28 <dhcp_inc_pcb_refcount+0x8c>)
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d005      	beq.n	8015cbc <dhcp_inc_pcb_refcount+0x20>
 8015cb0:	4b1e      	ldr	r3, [pc, #120]	; (8015d2c <dhcp_inc_pcb_refcount+0x90>)
 8015cb2:	22e5      	movs	r2, #229	; 0xe5
 8015cb4:	491e      	ldr	r1, [pc, #120]	; (8015d30 <dhcp_inc_pcb_refcount+0x94>)
 8015cb6:	481f      	ldr	r0, [pc, #124]	; (8015d34 <dhcp_inc_pcb_refcount+0x98>)
 8015cb8:	f004 fb84 	bl	801a3c4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015cbc:	f7ff ff9a 	bl	8015bf4 <udp_new>
 8015cc0:	4602      	mov	r2, r0
 8015cc2:	4b19      	ldr	r3, [pc, #100]	; (8015d28 <dhcp_inc_pcb_refcount+0x8c>)
 8015cc4:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8015cc6:	4b18      	ldr	r3, [pc, #96]	; (8015d28 <dhcp_inc_pcb_refcount+0x8c>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d102      	bne.n	8015cd4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015cce:	f04f 33ff 	mov.w	r3, #4294967295
 8015cd2:	e024      	b.n	8015d1e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015cd4:	4b14      	ldr	r3, [pc, #80]	; (8015d28 <dhcp_inc_pcb_refcount+0x8c>)
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	7a5a      	ldrb	r2, [r3, #9]
 8015cda:	4b13      	ldr	r3, [pc, #76]	; (8015d28 <dhcp_inc_pcb_refcount+0x8c>)
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	f042 0220 	orr.w	r2, r2, #32
 8015ce2:	b2d2      	uxtb	r2, r2
 8015ce4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015ce6:	4b10      	ldr	r3, [pc, #64]	; (8015d28 <dhcp_inc_pcb_refcount+0x8c>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	2244      	movs	r2, #68	; 0x44
 8015cec:	4912      	ldr	r1, [pc, #72]	; (8015d38 <dhcp_inc_pcb_refcount+0x9c>)
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f7ff fe0e 	bl	8015910 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015cf4:	4b0c      	ldr	r3, [pc, #48]	; (8015d28 <dhcp_inc_pcb_refcount+0x8c>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	2243      	movs	r2, #67	; 0x43
 8015cfa:	490f      	ldr	r1, [pc, #60]	; (8015d38 <dhcp_inc_pcb_refcount+0x9c>)
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7ff fea9 	bl	8015a54 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015d02:	4b09      	ldr	r3, [pc, #36]	; (8015d28 <dhcp_inc_pcb_refcount+0x8c>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	2200      	movs	r2, #0
 8015d08:	490c      	ldr	r1, [pc, #48]	; (8015d3c <dhcp_inc_pcb_refcount+0xa0>)
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7ff ff10 	bl	8015b30 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015d10:	4b04      	ldr	r3, [pc, #16]	; (8015d24 <dhcp_inc_pcb_refcount+0x88>)
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	3301      	adds	r3, #1
 8015d16:	b2da      	uxtb	r2, r3
 8015d18:	4b02      	ldr	r3, [pc, #8]	; (8015d24 <dhcp_inc_pcb_refcount+0x88>)
 8015d1a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015d1c:	2300      	movs	r3, #0
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	bd80      	pop	{r7, pc}
 8015d22:	bf00      	nop
 8015d24:	20004c00 	.word	0x20004c00
 8015d28:	20004bfc 	.word	0x20004bfc
 8015d2c:	0801e6e4 	.word	0x0801e6e4
 8015d30:	0801e71c 	.word	0x0801e71c
 8015d34:	0801e744 	.word	0x0801e744
 8015d38:	0801f328 	.word	0x0801f328
 8015d3c:	080175f5 	.word	0x080175f5

08015d40 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015d44:	4b0e      	ldr	r3, [pc, #56]	; (8015d80 <dhcp_dec_pcb_refcount+0x40>)
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d105      	bne.n	8015d58 <dhcp_dec_pcb_refcount+0x18>
 8015d4c:	4b0d      	ldr	r3, [pc, #52]	; (8015d84 <dhcp_dec_pcb_refcount+0x44>)
 8015d4e:	22ff      	movs	r2, #255	; 0xff
 8015d50:	490d      	ldr	r1, [pc, #52]	; (8015d88 <dhcp_dec_pcb_refcount+0x48>)
 8015d52:	480e      	ldr	r0, [pc, #56]	; (8015d8c <dhcp_dec_pcb_refcount+0x4c>)
 8015d54:	f004 fb36 	bl	801a3c4 <iprintf>
  dhcp_pcb_refcount--;
 8015d58:	4b09      	ldr	r3, [pc, #36]	; (8015d80 <dhcp_dec_pcb_refcount+0x40>)
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	3b01      	subs	r3, #1
 8015d5e:	b2da      	uxtb	r2, r3
 8015d60:	4b07      	ldr	r3, [pc, #28]	; (8015d80 <dhcp_dec_pcb_refcount+0x40>)
 8015d62:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015d64:	4b06      	ldr	r3, [pc, #24]	; (8015d80 <dhcp_dec_pcb_refcount+0x40>)
 8015d66:	781b      	ldrb	r3, [r3, #0]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d107      	bne.n	8015d7c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015d6c:	4b08      	ldr	r3, [pc, #32]	; (8015d90 <dhcp_dec_pcb_refcount+0x50>)
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	4618      	mov	r0, r3
 8015d72:	f7ff fefd 	bl	8015b70 <udp_remove>
    dhcp_pcb = NULL;
 8015d76:	4b06      	ldr	r3, [pc, #24]	; (8015d90 <dhcp_dec_pcb_refcount+0x50>)
 8015d78:	2200      	movs	r2, #0
 8015d7a:	601a      	str	r2, [r3, #0]
  }
}
 8015d7c:	bf00      	nop
 8015d7e:	bd80      	pop	{r7, pc}
 8015d80:	20004c00 	.word	0x20004c00
 8015d84:	0801e6e4 	.word	0x0801e6e4
 8015d88:	0801e76c 	.word	0x0801e76c
 8015d8c:	0801e744 	.word	0x0801e744
 8015d90:	20004bfc 	.word	0x20004bfc

08015d94 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015da0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015da2:	210c      	movs	r1, #12
 8015da4:	68f8      	ldr	r0, [r7, #12]
 8015da6:	f001 f867 	bl	8016e78 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015daa:	4b06      	ldr	r3, [pc, #24]	; (8015dc4 <dhcp_handle_nak+0x30>)
 8015dac:	4a05      	ldr	r2, [pc, #20]	; (8015dc4 <dhcp_handle_nak+0x30>)
 8015dae:	4905      	ldr	r1, [pc, #20]	; (8015dc4 <dhcp_handle_nak+0x30>)
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f7f7 ffff 	bl	800ddb4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f000 fc5a 	bl	8016670 <dhcp_discover>
}
 8015dbc:	bf00      	nop
 8015dbe:	3710      	adds	r7, #16
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	0801f328 	.word	0x0801f328

08015dc8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015dd6:	2108      	movs	r1, #8
 8015dd8:	68f8      	ldr	r0, [r7, #12]
 8015dda:	f001 f84d 	bl	8016e78 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	331c      	adds	r3, #28
 8015de2:	2200      	movs	r2, #0
 8015de4:	4619      	mov	r1, r3
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f002 fb4c 	bl	8018484 <etharp_query>
 8015dec:	4603      	mov	r3, r0
 8015dee:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	799b      	ldrb	r3, [r3, #6]
 8015df4:	2bff      	cmp	r3, #255	; 0xff
 8015df6:	d005      	beq.n	8015e04 <dhcp_check+0x3c>
    dhcp->tries++;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	799b      	ldrb	r3, [r3, #6]
 8015dfc:	3301      	adds	r3, #1
 8015dfe:	b2da      	uxtb	r2, r3
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015e04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015e08:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015e0a:	893b      	ldrh	r3, [r7, #8]
 8015e0c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015e10:	4a06      	ldr	r2, [pc, #24]	; (8015e2c <dhcp_check+0x64>)
 8015e12:	fb82 1203 	smull	r1, r2, r2, r3
 8015e16:	1152      	asrs	r2, r2, #5
 8015e18:	17db      	asrs	r3, r3, #31
 8015e1a:	1ad3      	subs	r3, r2, r3
 8015e1c:	b29a      	uxth	r2, r3
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015e22:	bf00      	nop
 8015e24:	3710      	adds	r7, #16
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	10624dd3 	.word	0x10624dd3

08015e30 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b084      	sub	sp, #16
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e3e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015e40:	4b0c      	ldr	r3, [pc, #48]	; (8015e74 <dhcp_handle_offer+0x44>)
 8015e42:	789b      	ldrb	r3, [r3, #2]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d011      	beq.n	8015e6c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015e4e:	4b0a      	ldr	r3, [pc, #40]	; (8015e78 <dhcp_handle_offer+0x48>)
 8015e50:	689b      	ldr	r3, [r3, #8]
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7f7 f919 	bl	800d08a <lwip_htonl>
 8015e58:	4602      	mov	r2, r0
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	691a      	ldr	r2, [r3, #16]
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f000 f808 	bl	8015e7c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015e6c:	bf00      	nop
 8015e6e:	3710      	adds	r7, #16
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	2000baec 	.word	0x2000baec
 8015e78:	2000baf4 	.word	0x2000baf4

08015e7c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015e7c:	b5b0      	push	{r4, r5, r7, lr}
 8015e7e:	b08a      	sub	sp, #40	; 0x28
 8015e80:	af02      	add	r7, sp, #8
 8015e82:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d109      	bne.n	8015e9e <dhcp_select+0x22>
 8015e8a:	4b71      	ldr	r3, [pc, #452]	; (8016050 <dhcp_select+0x1d4>)
 8015e8c:	f240 1277 	movw	r2, #375	; 0x177
 8015e90:	4970      	ldr	r1, [pc, #448]	; (8016054 <dhcp_select+0x1d8>)
 8015e92:	4871      	ldr	r0, [pc, #452]	; (8016058 <dhcp_select+0x1dc>)
 8015e94:	f004 fa96 	bl	801a3c4 <iprintf>
 8015e98:	f06f 030f 	mvn.w	r3, #15
 8015e9c:	e0d3      	b.n	8016046 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ea2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015ea4:	69bb      	ldr	r3, [r7, #24]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d109      	bne.n	8015ebe <dhcp_select+0x42>
 8015eaa:	4b69      	ldr	r3, [pc, #420]	; (8016050 <dhcp_select+0x1d4>)
 8015eac:	f240 1279 	movw	r2, #377	; 0x179
 8015eb0:	496a      	ldr	r1, [pc, #424]	; (801605c <dhcp_select+0x1e0>)
 8015eb2:	4869      	ldr	r0, [pc, #420]	; (8016058 <dhcp_select+0x1dc>)
 8015eb4:	f004 fa86 	bl	801a3c4 <iprintf>
 8015eb8:	f06f 0305 	mvn.w	r3, #5
 8015ebc:	e0c3      	b.n	8016046 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015ebe:	2101      	movs	r1, #1
 8015ec0:	69b8      	ldr	r0, [r7, #24]
 8015ec2:	f000 ffd9 	bl	8016e78 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015ec6:	f107 030c 	add.w	r3, r7, #12
 8015eca:	2203      	movs	r2, #3
 8015ecc:	69b9      	ldr	r1, [r7, #24]
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f001 fc5c 	bl	801778c <dhcp_create_msg>
 8015ed4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015ed6:	697b      	ldr	r3, [r7, #20]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	f000 8085 	beq.w	8015fe8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015ee4:	89b8      	ldrh	r0, [r7, #12]
 8015ee6:	693b      	ldr	r3, [r7, #16]
 8015ee8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015eec:	2302      	movs	r3, #2
 8015eee:	2239      	movs	r2, #57	; 0x39
 8015ef0:	f000 ffdc 	bl	8016eac <dhcp_option>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015ef8:	89b8      	ldrh	r0, [r7, #12]
 8015efa:	693b      	ldr	r3, [r7, #16]
 8015efc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f04:	461a      	mov	r2, r3
 8015f06:	f001 f82b 	bl	8016f60 <dhcp_option_short>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015f0e:	89b8      	ldrh	r0, [r7, #12]
 8015f10:	693b      	ldr	r3, [r7, #16]
 8015f12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f16:	2304      	movs	r3, #4
 8015f18:	2232      	movs	r2, #50	; 0x32
 8015f1a:	f000 ffc7 	bl	8016eac <dhcp_option>
 8015f1e:	4603      	mov	r3, r0
 8015f20:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015f22:	89bc      	ldrh	r4, [r7, #12]
 8015f24:	693b      	ldr	r3, [r7, #16]
 8015f26:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015f2a:	69bb      	ldr	r3, [r7, #24]
 8015f2c:	69db      	ldr	r3, [r3, #28]
 8015f2e:	4618      	mov	r0, r3
 8015f30:	f7f7 f8ab 	bl	800d08a <lwip_htonl>
 8015f34:	4603      	mov	r3, r0
 8015f36:	461a      	mov	r2, r3
 8015f38:	4629      	mov	r1, r5
 8015f3a:	4620      	mov	r0, r4
 8015f3c:	f001 f842 	bl	8016fc4 <dhcp_option_long>
 8015f40:	4603      	mov	r3, r0
 8015f42:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015f44:	89b8      	ldrh	r0, [r7, #12]
 8015f46:	693b      	ldr	r3, [r7, #16]
 8015f48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f4c:	2304      	movs	r3, #4
 8015f4e:	2236      	movs	r2, #54	; 0x36
 8015f50:	f000 ffac 	bl	8016eac <dhcp_option>
 8015f54:	4603      	mov	r3, r0
 8015f56:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015f58:	89bc      	ldrh	r4, [r7, #12]
 8015f5a:	693b      	ldr	r3, [r7, #16]
 8015f5c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015f60:	69bb      	ldr	r3, [r7, #24]
 8015f62:	699b      	ldr	r3, [r3, #24]
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7f7 f890 	bl	800d08a <lwip_htonl>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	461a      	mov	r2, r3
 8015f6e:	4629      	mov	r1, r5
 8015f70:	4620      	mov	r0, r4
 8015f72:	f001 f827 	bl	8016fc4 <dhcp_option_long>
 8015f76:	4603      	mov	r3, r0
 8015f78:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015f7a:	89b8      	ldrh	r0, [r7, #12]
 8015f7c:	693b      	ldr	r3, [r7, #16]
 8015f7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f82:	2303      	movs	r3, #3
 8015f84:	2237      	movs	r2, #55	; 0x37
 8015f86:	f000 ff91 	bl	8016eac <dhcp_option>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015f8e:	2300      	movs	r3, #0
 8015f90:	77bb      	strb	r3, [r7, #30]
 8015f92:	e00e      	b.n	8015fb2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015f94:	89b8      	ldrh	r0, [r7, #12]
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f9c:	7fbb      	ldrb	r3, [r7, #30]
 8015f9e:	4a30      	ldr	r2, [pc, #192]	; (8016060 <dhcp_select+0x1e4>)
 8015fa0:	5cd3      	ldrb	r3, [r2, r3]
 8015fa2:	461a      	mov	r2, r3
 8015fa4:	f000 ffb6 	bl	8016f14 <dhcp_option_byte>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015fac:	7fbb      	ldrb	r3, [r7, #30]
 8015fae:	3301      	adds	r3, #1
 8015fb0:	77bb      	strb	r3, [r7, #30]
 8015fb2:	7fbb      	ldrb	r3, [r7, #30]
 8015fb4:	2b02      	cmp	r3, #2
 8015fb6:	d9ed      	bls.n	8015f94 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015fb8:	89b8      	ldrh	r0, [r7, #12]
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	33f0      	adds	r3, #240	; 0xf0
 8015fbe:	697a      	ldr	r2, [r7, #20]
 8015fc0:	4619      	mov	r1, r3
 8015fc2:	f001 fcb9 	bl	8017938 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015fc6:	4b27      	ldr	r3, [pc, #156]	; (8016064 <dhcp_select+0x1e8>)
 8015fc8:	6818      	ldr	r0, [r3, #0]
 8015fca:	4b27      	ldr	r3, [pc, #156]	; (8016068 <dhcp_select+0x1ec>)
 8015fcc:	9301      	str	r3, [sp, #4]
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	9300      	str	r3, [sp, #0]
 8015fd2:	2343      	movs	r3, #67	; 0x43
 8015fd4:	4a25      	ldr	r2, [pc, #148]	; (801606c <dhcp_select+0x1f0>)
 8015fd6:	6979      	ldr	r1, [r7, #20]
 8015fd8:	f7ff fbb4 	bl	8015744 <udp_sendto_if_src>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015fe0:	6978      	ldr	r0, [r7, #20]
 8015fe2:	f7f8 fc29 	bl	800e838 <pbuf_free>
 8015fe6:	e001      	b.n	8015fec <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015fe8:	23ff      	movs	r3, #255	; 0xff
 8015fea:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015fec:	69bb      	ldr	r3, [r7, #24]
 8015fee:	799b      	ldrb	r3, [r3, #6]
 8015ff0:	2bff      	cmp	r3, #255	; 0xff
 8015ff2:	d005      	beq.n	8016000 <dhcp_select+0x184>
    dhcp->tries++;
 8015ff4:	69bb      	ldr	r3, [r7, #24]
 8015ff6:	799b      	ldrb	r3, [r3, #6]
 8015ff8:	3301      	adds	r3, #1
 8015ffa:	b2da      	uxtb	r2, r3
 8015ffc:	69bb      	ldr	r3, [r7, #24]
 8015ffe:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016000:	69bb      	ldr	r3, [r7, #24]
 8016002:	799b      	ldrb	r3, [r3, #6]
 8016004:	2b05      	cmp	r3, #5
 8016006:	d80d      	bhi.n	8016024 <dhcp_select+0x1a8>
 8016008:	69bb      	ldr	r3, [r7, #24]
 801600a:	799b      	ldrb	r3, [r3, #6]
 801600c:	461a      	mov	r2, r3
 801600e:	2301      	movs	r3, #1
 8016010:	4093      	lsls	r3, r2
 8016012:	b29b      	uxth	r3, r3
 8016014:	461a      	mov	r2, r3
 8016016:	0152      	lsls	r2, r2, #5
 8016018:	1ad2      	subs	r2, r2, r3
 801601a:	0092      	lsls	r2, r2, #2
 801601c:	4413      	add	r3, r2
 801601e:	00db      	lsls	r3, r3, #3
 8016020:	b29b      	uxth	r3, r3
 8016022:	e001      	b.n	8016028 <dhcp_select+0x1ac>
 8016024:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016028:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801602a:	89fb      	ldrh	r3, [r7, #14]
 801602c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016030:	4a0f      	ldr	r2, [pc, #60]	; (8016070 <dhcp_select+0x1f4>)
 8016032:	fb82 1203 	smull	r1, r2, r2, r3
 8016036:	1152      	asrs	r2, r2, #5
 8016038:	17db      	asrs	r3, r3, #31
 801603a:	1ad3      	subs	r3, r2, r3
 801603c:	b29a      	uxth	r2, r3
 801603e:	69bb      	ldr	r3, [r7, #24]
 8016040:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016042:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016046:	4618      	mov	r0, r3
 8016048:	3720      	adds	r7, #32
 801604a:	46bd      	mov	sp, r7
 801604c:	bdb0      	pop	{r4, r5, r7, pc}
 801604e:	bf00      	nop
 8016050:	0801e6e4 	.word	0x0801e6e4
 8016054:	0801e790 	.word	0x0801e790
 8016058:	0801e744 	.word	0x0801e744
 801605c:	0801e7ac 	.word	0x0801e7ac
 8016060:	20000020 	.word	0x20000020
 8016064:	20004bfc 	.word	0x20004bfc
 8016068:	0801f328 	.word	0x0801f328
 801606c:	0801f32c 	.word	0x0801f32c
 8016070:	10624dd3 	.word	0x10624dd3

08016074 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801607a:	4b27      	ldr	r3, [pc, #156]	; (8016118 <dhcp_coarse_tmr+0xa4>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	607b      	str	r3, [r7, #4]
 8016080:	e042      	b.n	8016108 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016086:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d039      	beq.n	8016102 <dhcp_coarse_tmr+0x8e>
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	795b      	ldrb	r3, [r3, #5]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d035      	beq.n	8016102 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8016096:	683b      	ldr	r3, [r7, #0]
 8016098:	8a9b      	ldrh	r3, [r3, #20]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d012      	beq.n	80160c4 <dhcp_coarse_tmr+0x50>
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	8a5b      	ldrh	r3, [r3, #18]
 80160a2:	3301      	adds	r3, #1
 80160a4:	b29a      	uxth	r2, r3
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	825a      	strh	r2, [r3, #18]
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	8a5a      	ldrh	r2, [r3, #18]
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	8a9b      	ldrh	r3, [r3, #20]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	d106      	bne.n	80160c4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f000 fe44 	bl	8016d44 <dhcp_release_and_stop>
        dhcp_start(netif);
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f000 f969 	bl	8016394 <dhcp_start>
 80160c2:	e01e      	b.n	8016102 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	8a1b      	ldrh	r3, [r3, #16]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d00b      	beq.n	80160e4 <dhcp_coarse_tmr+0x70>
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	8a1b      	ldrh	r3, [r3, #16]
 80160d0:	1e5a      	subs	r2, r3, #1
 80160d2:	b291      	uxth	r1, r2
 80160d4:	683a      	ldr	r2, [r7, #0]
 80160d6:	8211      	strh	r1, [r2, #16]
 80160d8:	2b01      	cmp	r3, #1
 80160da:	d103      	bne.n	80160e4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 f8c6 	bl	801626e <dhcp_t2_timeout>
 80160e2:	e00e      	b.n	8016102 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80160e4:	683b      	ldr	r3, [r7, #0]
 80160e6:	89db      	ldrh	r3, [r3, #14]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d00a      	beq.n	8016102 <dhcp_coarse_tmr+0x8e>
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	89db      	ldrh	r3, [r3, #14]
 80160f0:	1e5a      	subs	r2, r3, #1
 80160f2:	b291      	uxth	r1, r2
 80160f4:	683a      	ldr	r2, [r7, #0]
 80160f6:	81d1      	strh	r1, [r2, #14]
 80160f8:	2b01      	cmp	r3, #1
 80160fa:	d102      	bne.n	8016102 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f000 f888 	bl	8016212 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	607b      	str	r3, [r7, #4]
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d1b9      	bne.n	8016082 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801610e:	bf00      	nop
 8016110:	3708      	adds	r7, #8
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}
 8016116:	bf00      	nop
 8016118:	2000bac0 	.word	0x2000bac0

0801611c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b082      	sub	sp, #8
 8016120:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8016122:	4b16      	ldr	r3, [pc, #88]	; (801617c <dhcp_fine_tmr+0x60>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	607b      	str	r3, [r7, #4]
 8016128:	e020      	b.n	801616c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801612e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d017      	beq.n	8016166 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	891b      	ldrh	r3, [r3, #8]
 801613a:	2b01      	cmp	r3, #1
 801613c:	d906      	bls.n	801614c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	891b      	ldrh	r3, [r3, #8]
 8016142:	3b01      	subs	r3, #1
 8016144:	b29a      	uxth	r2, r3
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	811a      	strh	r2, [r3, #8]
 801614a:	e00c      	b.n	8016166 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801614c:	683b      	ldr	r3, [r7, #0]
 801614e:	891b      	ldrh	r3, [r3, #8]
 8016150:	2b01      	cmp	r3, #1
 8016152:	d108      	bne.n	8016166 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8016154:	683b      	ldr	r3, [r7, #0]
 8016156:	891b      	ldrh	r3, [r3, #8]
 8016158:	3b01      	subs	r3, #1
 801615a:	b29a      	uxth	r2, r3
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f000 f80d 	bl	8016180 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	607b      	str	r3, [r7, #4]
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d1db      	bne.n	801612a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8016172:	bf00      	nop
 8016174:	3708      	adds	r7, #8
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}
 801617a:	bf00      	nop
 801617c:	2000bac0 	.word	0x2000bac0

08016180 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b084      	sub	sp, #16
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801618c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	795b      	ldrb	r3, [r3, #5]
 8016192:	2b0c      	cmp	r3, #12
 8016194:	d003      	beq.n	801619e <dhcp_timeout+0x1e>
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	795b      	ldrb	r3, [r3, #5]
 801619a:	2b06      	cmp	r3, #6
 801619c:	d103      	bne.n	80161a6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f000 fa66 	bl	8016670 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80161a4:	e031      	b.n	801620a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	795b      	ldrb	r3, [r3, #5]
 80161aa:	2b01      	cmp	r3, #1
 80161ac:	d10e      	bne.n	80161cc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	799b      	ldrb	r3, [r3, #6]
 80161b2:	2b05      	cmp	r3, #5
 80161b4:	d803      	bhi.n	80161be <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80161b6:	6878      	ldr	r0, [r7, #4]
 80161b8:	f7ff fe60 	bl	8015e7c <dhcp_select>
}
 80161bc:	e025      	b.n	801620a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f000 fdc0 	bl	8016d44 <dhcp_release_and_stop>
      dhcp_start(netif);
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f000 f8e5 	bl	8016394 <dhcp_start>
}
 80161ca:	e01e      	b.n	801620a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	795b      	ldrb	r3, [r3, #5]
 80161d0:	2b08      	cmp	r3, #8
 80161d2:	d10b      	bne.n	80161ec <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	799b      	ldrb	r3, [r3, #6]
 80161d8:	2b01      	cmp	r3, #1
 80161da:	d803      	bhi.n	80161e4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f7ff fdf3 	bl	8015dc8 <dhcp_check>
}
 80161e2:	e012      	b.n	801620a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80161e4:	6878      	ldr	r0, [r7, #4]
 80161e6:	f000 fae5 	bl	80167b4 <dhcp_bind>
}
 80161ea:	e00e      	b.n	801620a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	795b      	ldrb	r3, [r3, #5]
 80161f0:	2b03      	cmp	r3, #3
 80161f2:	d10a      	bne.n	801620a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	799b      	ldrb	r3, [r3, #6]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d803      	bhi.n	8016204 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f000 fceb 	bl	8016bd8 <dhcp_reboot>
}
 8016202:	e002      	b.n	801620a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f000 fa33 	bl	8016670 <dhcp_discover>
}
 801620a:	bf00      	nop
 801620c:	3710      	adds	r7, #16
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}

08016212 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8016212:	b580      	push	{r7, lr}
 8016214:	b084      	sub	sp, #16
 8016216:	af00      	add	r7, sp, #0
 8016218:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801621e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	795b      	ldrb	r3, [r3, #5]
 8016224:	2b01      	cmp	r3, #1
 8016226:	d007      	beq.n	8016238 <dhcp_t1_timeout+0x26>
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	795b      	ldrb	r3, [r3, #5]
 801622c:	2b0a      	cmp	r3, #10
 801622e:	d003      	beq.n	8016238 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016234:	2b05      	cmp	r3, #5
 8016236:	d116      	bne.n	8016266 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f000 fb95 	bl	8016968 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	899b      	ldrh	r3, [r3, #12]
 8016242:	461a      	mov	r2, r3
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	8a5b      	ldrh	r3, [r3, #18]
 8016248:	1ad3      	subs	r3, r2, r3
 801624a:	2b01      	cmp	r3, #1
 801624c:	dd0b      	ble.n	8016266 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	899b      	ldrh	r3, [r3, #12]
 8016252:	461a      	mov	r2, r3
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	8a5b      	ldrh	r3, [r3, #18]
 8016258:	1ad3      	subs	r3, r2, r3
 801625a:	0fda      	lsrs	r2, r3, #31
 801625c:	4413      	add	r3, r2
 801625e:	105b      	asrs	r3, r3, #1
 8016260:	b29a      	uxth	r2, r3
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8016266:	bf00      	nop
 8016268:	3710      	adds	r7, #16
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}

0801626e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801626e:	b580      	push	{r7, lr}
 8016270:	b084      	sub	sp, #16
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801627a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	795b      	ldrb	r3, [r3, #5]
 8016280:	2b01      	cmp	r3, #1
 8016282:	d00b      	beq.n	801629c <dhcp_t2_timeout+0x2e>
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	795b      	ldrb	r3, [r3, #5]
 8016288:	2b0a      	cmp	r3, #10
 801628a:	d007      	beq.n	801629c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016290:	2b05      	cmp	r3, #5
 8016292:	d003      	beq.n	801629c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	795b      	ldrb	r3, [r3, #5]
 8016298:	2b04      	cmp	r3, #4
 801629a:	d116      	bne.n	80162ca <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f000 fbff 	bl	8016aa0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	8a9b      	ldrh	r3, [r3, #20]
 80162a6:	461a      	mov	r2, r3
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	8a5b      	ldrh	r3, [r3, #18]
 80162ac:	1ad3      	subs	r3, r2, r3
 80162ae:	2b01      	cmp	r3, #1
 80162b0:	dd0b      	ble.n	80162ca <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	8a9b      	ldrh	r3, [r3, #20]
 80162b6:	461a      	mov	r2, r3
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	8a5b      	ldrh	r3, [r3, #18]
 80162bc:	1ad3      	subs	r3, r2, r3
 80162be:	0fda      	lsrs	r2, r3, #31
 80162c0:	4413      	add	r3, r2
 80162c2:	105b      	asrs	r3, r3, #1
 80162c4:	b29a      	uxth	r2, r3
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80162ca:	bf00      	nop
 80162cc:	3710      	adds	r7, #16
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
	...

080162d4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b084      	sub	sp, #16
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
 80162dc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162e2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	2200      	movs	r2, #0
 80162e8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	2200      	movs	r2, #0
 80162ee:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80162f0:	4b26      	ldr	r3, [pc, #152]	; (801638c <dhcp_handle_ack+0xb8>)
 80162f2:	78db      	ldrb	r3, [r3, #3]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d003      	beq.n	8016300 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80162f8:	4b25      	ldr	r3, [pc, #148]	; (8016390 <dhcp_handle_ack+0xbc>)
 80162fa:	68da      	ldr	r2, [r3, #12]
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8016300:	4b22      	ldr	r3, [pc, #136]	; (801638c <dhcp_handle_ack+0xb8>)
 8016302:	791b      	ldrb	r3, [r3, #4]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d004      	beq.n	8016312 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016308:	4b21      	ldr	r3, [pc, #132]	; (8016390 <dhcp_handle_ack+0xbc>)
 801630a:	691a      	ldr	r2, [r3, #16]
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	62da      	str	r2, [r3, #44]	; 0x2c
 8016310:	e004      	b.n	801631c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016316:	085a      	lsrs	r2, r3, #1
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801631c:	4b1b      	ldr	r3, [pc, #108]	; (801638c <dhcp_handle_ack+0xb8>)
 801631e:	795b      	ldrb	r3, [r3, #5]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d004      	beq.n	801632e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016324:	4b1a      	ldr	r3, [pc, #104]	; (8016390 <dhcp_handle_ack+0xbc>)
 8016326:	695a      	ldr	r2, [r3, #20]
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	631a      	str	r2, [r3, #48]	; 0x30
 801632c:	e007      	b.n	801633e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016332:	4613      	mov	r3, r2
 8016334:	00db      	lsls	r3, r3, #3
 8016336:	1a9b      	subs	r3, r3, r2
 8016338:	08da      	lsrs	r2, r3, #3
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	691a      	ldr	r2, [r3, #16]
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8016346:	4b11      	ldr	r3, [pc, #68]	; (801638c <dhcp_handle_ack+0xb8>)
 8016348:	799b      	ldrb	r3, [r3, #6]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d00b      	beq.n	8016366 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801634e:	4b10      	ldr	r3, [pc, #64]	; (8016390 <dhcp_handle_ack+0xbc>)
 8016350:	699b      	ldr	r3, [r3, #24]
 8016352:	4618      	mov	r0, r3
 8016354:	f7f6 fe99 	bl	800d08a <lwip_htonl>
 8016358:	4602      	mov	r2, r0
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	2201      	movs	r2, #1
 8016362:	71da      	strb	r2, [r3, #7]
 8016364:	e002      	b.n	801636c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	2200      	movs	r2, #0
 801636a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801636c:	4b07      	ldr	r3, [pc, #28]	; (801638c <dhcp_handle_ack+0xb8>)
 801636e:	79db      	ldrb	r3, [r3, #7]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d007      	beq.n	8016384 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8016374:	4b06      	ldr	r3, [pc, #24]	; (8016390 <dhcp_handle_ack+0xbc>)
 8016376:	69db      	ldr	r3, [r3, #28]
 8016378:	4618      	mov	r0, r3
 801637a:	f7f6 fe86 	bl	800d08a <lwip_htonl>
 801637e:	4602      	mov	r2, r0
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016384:	bf00      	nop
 8016386:	3710      	adds	r7, #16
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	2000baec 	.word	0x2000baec
 8016390:	2000baf4 	.word	0x2000baf4

08016394 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b084      	sub	sp, #16
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d109      	bne.n	80163b6 <dhcp_start+0x22>
 80163a2:	4b37      	ldr	r3, [pc, #220]	; (8016480 <dhcp_start+0xec>)
 80163a4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80163a8:	4936      	ldr	r1, [pc, #216]	; (8016484 <dhcp_start+0xf0>)
 80163aa:	4837      	ldr	r0, [pc, #220]	; (8016488 <dhcp_start+0xf4>)
 80163ac:	f004 f80a 	bl	801a3c4 <iprintf>
 80163b0:	f06f 030f 	mvn.w	r3, #15
 80163b4:	e060      	b.n	8016478 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80163bc:	f003 0301 	and.w	r3, r3, #1
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d109      	bne.n	80163d8 <dhcp_start+0x44>
 80163c4:	4b2e      	ldr	r3, [pc, #184]	; (8016480 <dhcp_start+0xec>)
 80163c6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80163ca:	4930      	ldr	r1, [pc, #192]	; (801648c <dhcp_start+0xf8>)
 80163cc:	482e      	ldr	r0, [pc, #184]	; (8016488 <dhcp_start+0xf4>)
 80163ce:	f003 fff9 	bl	801a3c4 <iprintf>
 80163d2:	f06f 030f 	mvn.w	r3, #15
 80163d6:	e04f      	b.n	8016478 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163dc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80163e2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80163e6:	d202      	bcs.n	80163ee <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80163e8:	f04f 33ff 	mov.w	r3, #4294967295
 80163ec:	e044      	b.n	8016478 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d10d      	bne.n	8016410 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80163f4:	2034      	movs	r0, #52	; 0x34
 80163f6:	f7f7 f967 	bl	800d6c8 <mem_malloc>
 80163fa:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d102      	bne.n	8016408 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8016402:	f04f 33ff 	mov.w	r3, #4294967295
 8016406:	e037      	b.n	8016478 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	68fa      	ldr	r2, [r7, #12]
 801640c:	625a      	str	r2, [r3, #36]	; 0x24
 801640e:	e005      	b.n	801641c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	791b      	ldrb	r3, [r3, #4]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d001      	beq.n	801641c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016418:	f7ff fc92 	bl	8015d40 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801641c:	2234      	movs	r2, #52	; 0x34
 801641e:	2100      	movs	r1, #0
 8016420:	68f8      	ldr	r0, [r7, #12]
 8016422:	f003 ffc6 	bl	801a3b2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8016426:	f7ff fc39 	bl	8015c9c <dhcp_inc_pcb_refcount>
 801642a:	4603      	mov	r3, r0
 801642c:	2b00      	cmp	r3, #0
 801642e:	d002      	beq.n	8016436 <dhcp_start+0xa2>
    return ERR_MEM;
 8016430:	f04f 33ff 	mov.w	r3, #4294967295
 8016434:	e020      	b.n	8016478 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	2201      	movs	r2, #1
 801643a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016442:	f003 0304 	and.w	r3, r3, #4
 8016446:	2b00      	cmp	r3, #0
 8016448:	d105      	bne.n	8016456 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801644a:	2102      	movs	r1, #2
 801644c:	68f8      	ldr	r0, [r7, #12]
 801644e:	f000 fd13 	bl	8016e78 <dhcp_set_state>
    return ERR_OK;
 8016452:	2300      	movs	r3, #0
 8016454:	e010      	b.n	8016478 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8016456:	6878      	ldr	r0, [r7, #4]
 8016458:	f000 f90a 	bl	8016670 <dhcp_discover>
 801645c:	4603      	mov	r3, r0
 801645e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016460:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d005      	beq.n	8016474 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f000 fc6b 	bl	8016d44 <dhcp_release_and_stop>
    return ERR_MEM;
 801646e:	f04f 33ff 	mov.w	r3, #4294967295
 8016472:	e001      	b.n	8016478 <dhcp_start+0xe4>
  }
  return result;
 8016474:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016478:	4618      	mov	r0, r3
 801647a:	3710      	adds	r7, #16
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}
 8016480:	0801e6e4 	.word	0x0801e6e4
 8016484:	0801e7c8 	.word	0x0801e7c8
 8016488:	0801e744 	.word	0x0801e744
 801648c:	0801e80c 	.word	0x0801e80c

08016490 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b084      	sub	sp, #16
 8016494:	af00      	add	r7, sp, #0
 8016496:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801649c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d037      	beq.n	8016514 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	795b      	ldrb	r3, [r3, #5]
 80164a8:	2b0a      	cmp	r3, #10
 80164aa:	d820      	bhi.n	80164ee <dhcp_network_changed+0x5e>
 80164ac:	a201      	add	r2, pc, #4	; (adr r2, 80164b4 <dhcp_network_changed+0x24>)
 80164ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164b2:	bf00      	nop
 80164b4:	08016519 	.word	0x08016519
 80164b8:	080164ef 	.word	0x080164ef
 80164bc:	080164ef 	.word	0x080164ef
 80164c0:	080164e1 	.word	0x080164e1
 80164c4:	080164e1 	.word	0x080164e1
 80164c8:	080164e1 	.word	0x080164e1
 80164cc:	080164ef 	.word	0x080164ef
 80164d0:	080164ef 	.word	0x080164ef
 80164d4:	080164ef 	.word	0x080164ef
 80164d8:	080164ef 	.word	0x080164ef
 80164dc:	080164e1 	.word	0x080164e1
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	2200      	movs	r2, #0
 80164e4:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f000 fb76 	bl	8016bd8 <dhcp_reboot>
      break;
 80164ec:	e015      	b.n	801651a <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	795b      	ldrb	r3, [r3, #5]
 80164f2:	2b0c      	cmp	r3, #12
 80164f4:	d906      	bls.n	8016504 <dhcp_network_changed+0x74>
 80164f6:	4b0a      	ldr	r3, [pc, #40]	; (8016520 <dhcp_network_changed+0x90>)
 80164f8:	f240 326d 	movw	r2, #877	; 0x36d
 80164fc:	4909      	ldr	r1, [pc, #36]	; (8016524 <dhcp_network_changed+0x94>)
 80164fe:	480a      	ldr	r0, [pc, #40]	; (8016528 <dhcp_network_changed+0x98>)
 8016500:	f003 ff60 	bl	801a3c4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	2200      	movs	r2, #0
 8016508:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f000 f8b0 	bl	8016670 <dhcp_discover>
      break;
 8016510:	bf00      	nop
 8016512:	e002      	b.n	801651a <dhcp_network_changed+0x8a>
    return;
 8016514:	bf00      	nop
 8016516:	e000      	b.n	801651a <dhcp_network_changed+0x8a>
      break;
 8016518:	bf00      	nop
  }
}
 801651a:	3710      	adds	r7, #16
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}
 8016520:	0801e6e4 	.word	0x0801e6e4
 8016524:	0801e830 	.word	0x0801e830
 8016528:	0801e744 	.word	0x0801e744

0801652c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b084      	sub	sp, #16
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d107      	bne.n	801654c <dhcp_arp_reply+0x20>
 801653c:	4b0e      	ldr	r3, [pc, #56]	; (8016578 <dhcp_arp_reply+0x4c>)
 801653e:	f240 328b 	movw	r2, #907	; 0x38b
 8016542:	490e      	ldr	r1, [pc, #56]	; (801657c <dhcp_arp_reply+0x50>)
 8016544:	480e      	ldr	r0, [pc, #56]	; (8016580 <dhcp_arp_reply+0x54>)
 8016546:	f003 ff3d 	bl	801a3c4 <iprintf>
 801654a:	e012      	b.n	8016572 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016550:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d00c      	beq.n	8016572 <dhcp_arp_reply+0x46>
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	795b      	ldrb	r3, [r3, #5]
 801655c:	2b08      	cmp	r3, #8
 801655e:	d108      	bne.n	8016572 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	681a      	ldr	r2, [r3, #0]
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	69db      	ldr	r3, [r3, #28]
 8016568:	429a      	cmp	r2, r3
 801656a:	d102      	bne.n	8016572 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	f000 f809 	bl	8016584 <dhcp_decline>
    }
  }
}
 8016572:	3710      	adds	r7, #16
 8016574:	46bd      	mov	sp, r7
 8016576:	bd80      	pop	{r7, pc}
 8016578:	0801e6e4 	.word	0x0801e6e4
 801657c:	0801e7c8 	.word	0x0801e7c8
 8016580:	0801e744 	.word	0x0801e744

08016584 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016584:	b5b0      	push	{r4, r5, r7, lr}
 8016586:	b08a      	sub	sp, #40	; 0x28
 8016588:	af02      	add	r7, sp, #8
 801658a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016590:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016592:	210c      	movs	r1, #12
 8016594:	69b8      	ldr	r0, [r7, #24]
 8016596:	f000 fc6f 	bl	8016e78 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801659a:	f107 030c 	add.w	r3, r7, #12
 801659e:	2204      	movs	r2, #4
 80165a0:	69b9      	ldr	r1, [r7, #24]
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f001 f8f2 	bl	801778c <dhcp_create_msg>
 80165a8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d035      	beq.n	801661c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80165b0:	697b      	ldr	r3, [r7, #20]
 80165b2:	685b      	ldr	r3, [r3, #4]
 80165b4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80165b6:	89b8      	ldrh	r0, [r7, #12]
 80165b8:	693b      	ldr	r3, [r7, #16]
 80165ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80165be:	2304      	movs	r3, #4
 80165c0:	2232      	movs	r2, #50	; 0x32
 80165c2:	f000 fc73 	bl	8016eac <dhcp_option>
 80165c6:	4603      	mov	r3, r0
 80165c8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80165ca:	89bc      	ldrh	r4, [r7, #12]
 80165cc:	693b      	ldr	r3, [r7, #16]
 80165ce:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80165d2:	69bb      	ldr	r3, [r7, #24]
 80165d4:	69db      	ldr	r3, [r3, #28]
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7f6 fd57 	bl	800d08a <lwip_htonl>
 80165dc:	4603      	mov	r3, r0
 80165de:	461a      	mov	r2, r3
 80165e0:	4629      	mov	r1, r5
 80165e2:	4620      	mov	r0, r4
 80165e4:	f000 fcee 	bl	8016fc4 <dhcp_option_long>
 80165e8:	4603      	mov	r3, r0
 80165ea:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80165ec:	89b8      	ldrh	r0, [r7, #12]
 80165ee:	693b      	ldr	r3, [r7, #16]
 80165f0:	33f0      	adds	r3, #240	; 0xf0
 80165f2:	697a      	ldr	r2, [r7, #20]
 80165f4:	4619      	mov	r1, r3
 80165f6:	f001 f99f 	bl	8017938 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80165fa:	4b19      	ldr	r3, [pc, #100]	; (8016660 <dhcp_decline+0xdc>)
 80165fc:	6818      	ldr	r0, [r3, #0]
 80165fe:	4b19      	ldr	r3, [pc, #100]	; (8016664 <dhcp_decline+0xe0>)
 8016600:	9301      	str	r3, [sp, #4]
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	9300      	str	r3, [sp, #0]
 8016606:	2343      	movs	r3, #67	; 0x43
 8016608:	4a17      	ldr	r2, [pc, #92]	; (8016668 <dhcp_decline+0xe4>)
 801660a:	6979      	ldr	r1, [r7, #20]
 801660c:	f7ff f89a 	bl	8015744 <udp_sendto_if_src>
 8016610:	4603      	mov	r3, r0
 8016612:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016614:	6978      	ldr	r0, [r7, #20]
 8016616:	f7f8 f90f 	bl	800e838 <pbuf_free>
 801661a:	e001      	b.n	8016620 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801661c:	23ff      	movs	r3, #255	; 0xff
 801661e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016620:	69bb      	ldr	r3, [r7, #24]
 8016622:	799b      	ldrb	r3, [r3, #6]
 8016624:	2bff      	cmp	r3, #255	; 0xff
 8016626:	d005      	beq.n	8016634 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016628:	69bb      	ldr	r3, [r7, #24]
 801662a:	799b      	ldrb	r3, [r3, #6]
 801662c:	3301      	adds	r3, #1
 801662e:	b2da      	uxtb	r2, r3
 8016630:	69bb      	ldr	r3, [r7, #24]
 8016632:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016634:	f242 7310 	movw	r3, #10000	; 0x2710
 8016638:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801663a:	89fb      	ldrh	r3, [r7, #14]
 801663c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016640:	4a0a      	ldr	r2, [pc, #40]	; (801666c <dhcp_decline+0xe8>)
 8016642:	fb82 1203 	smull	r1, r2, r2, r3
 8016646:	1152      	asrs	r2, r2, #5
 8016648:	17db      	asrs	r3, r3, #31
 801664a:	1ad3      	subs	r3, r2, r3
 801664c:	b29a      	uxth	r2, r3
 801664e:	69bb      	ldr	r3, [r7, #24]
 8016650:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016652:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016656:	4618      	mov	r0, r3
 8016658:	3720      	adds	r7, #32
 801665a:	46bd      	mov	sp, r7
 801665c:	bdb0      	pop	{r4, r5, r7, pc}
 801665e:	bf00      	nop
 8016660:	20004bfc 	.word	0x20004bfc
 8016664:	0801f328 	.word	0x0801f328
 8016668:	0801f32c 	.word	0x0801f32c
 801666c:	10624dd3 	.word	0x10624dd3

08016670 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b08a      	sub	sp, #40	; 0x28
 8016674:	af02      	add	r7, sp, #8
 8016676:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801667c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801667e:	2300      	movs	r3, #0
 8016680:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016682:	69bb      	ldr	r3, [r7, #24]
 8016684:	2200      	movs	r2, #0
 8016686:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8016688:	2106      	movs	r1, #6
 801668a:	69b8      	ldr	r0, [r7, #24]
 801668c:	f000 fbf4 	bl	8016e78 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016690:	f107 0308 	add.w	r3, r7, #8
 8016694:	2201      	movs	r2, #1
 8016696:	69b9      	ldr	r1, [r7, #24]
 8016698:	6878      	ldr	r0, [r7, #4]
 801669a:	f001 f877 	bl	801778c <dhcp_create_msg>
 801669e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80166a0:	693b      	ldr	r3, [r7, #16]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d04b      	beq.n	801673e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80166a6:	693b      	ldr	r3, [r7, #16]
 80166a8:	685b      	ldr	r3, [r3, #4]
 80166aa:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80166ac:	8938      	ldrh	r0, [r7, #8]
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166b4:	2302      	movs	r3, #2
 80166b6:	2239      	movs	r2, #57	; 0x39
 80166b8:	f000 fbf8 	bl	8016eac <dhcp_option>
 80166bc:	4603      	mov	r3, r0
 80166be:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80166c0:	8938      	ldrh	r0, [r7, #8]
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80166cc:	461a      	mov	r2, r3
 80166ce:	f000 fc47 	bl	8016f60 <dhcp_option_short>
 80166d2:	4603      	mov	r3, r0
 80166d4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80166d6:	8938      	ldrh	r0, [r7, #8]
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166de:	2303      	movs	r3, #3
 80166e0:	2237      	movs	r2, #55	; 0x37
 80166e2:	f000 fbe3 	bl	8016eac <dhcp_option>
 80166e6:	4603      	mov	r3, r0
 80166e8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80166ea:	2300      	movs	r3, #0
 80166ec:	77fb      	strb	r3, [r7, #31]
 80166ee:	e00e      	b.n	801670e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80166f0:	8938      	ldrh	r0, [r7, #8]
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166f8:	7ffb      	ldrb	r3, [r7, #31]
 80166fa:	4a29      	ldr	r2, [pc, #164]	; (80167a0 <dhcp_discover+0x130>)
 80166fc:	5cd3      	ldrb	r3, [r2, r3]
 80166fe:	461a      	mov	r2, r3
 8016700:	f000 fc08 	bl	8016f14 <dhcp_option_byte>
 8016704:	4603      	mov	r3, r0
 8016706:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016708:	7ffb      	ldrb	r3, [r7, #31]
 801670a:	3301      	adds	r3, #1
 801670c:	77fb      	strb	r3, [r7, #31]
 801670e:	7ffb      	ldrb	r3, [r7, #31]
 8016710:	2b02      	cmp	r3, #2
 8016712:	d9ed      	bls.n	80166f0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016714:	8938      	ldrh	r0, [r7, #8]
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	33f0      	adds	r3, #240	; 0xf0
 801671a:	693a      	ldr	r2, [r7, #16]
 801671c:	4619      	mov	r1, r3
 801671e:	f001 f90b 	bl	8017938 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016722:	4b20      	ldr	r3, [pc, #128]	; (80167a4 <dhcp_discover+0x134>)
 8016724:	6818      	ldr	r0, [r3, #0]
 8016726:	4b20      	ldr	r3, [pc, #128]	; (80167a8 <dhcp_discover+0x138>)
 8016728:	9301      	str	r3, [sp, #4]
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	9300      	str	r3, [sp, #0]
 801672e:	2343      	movs	r3, #67	; 0x43
 8016730:	4a1e      	ldr	r2, [pc, #120]	; (80167ac <dhcp_discover+0x13c>)
 8016732:	6939      	ldr	r1, [r7, #16]
 8016734:	f7ff f806 	bl	8015744 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016738:	6938      	ldr	r0, [r7, #16]
 801673a:	f7f8 f87d 	bl	800e838 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801673e:	69bb      	ldr	r3, [r7, #24]
 8016740:	799b      	ldrb	r3, [r3, #6]
 8016742:	2bff      	cmp	r3, #255	; 0xff
 8016744:	d005      	beq.n	8016752 <dhcp_discover+0xe2>
    dhcp->tries++;
 8016746:	69bb      	ldr	r3, [r7, #24]
 8016748:	799b      	ldrb	r3, [r3, #6]
 801674a:	3301      	adds	r3, #1
 801674c:	b2da      	uxtb	r2, r3
 801674e:	69bb      	ldr	r3, [r7, #24]
 8016750:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016752:	69bb      	ldr	r3, [r7, #24]
 8016754:	799b      	ldrb	r3, [r3, #6]
 8016756:	2b05      	cmp	r3, #5
 8016758:	d80d      	bhi.n	8016776 <dhcp_discover+0x106>
 801675a:	69bb      	ldr	r3, [r7, #24]
 801675c:	799b      	ldrb	r3, [r3, #6]
 801675e:	461a      	mov	r2, r3
 8016760:	2301      	movs	r3, #1
 8016762:	4093      	lsls	r3, r2
 8016764:	b29b      	uxth	r3, r3
 8016766:	461a      	mov	r2, r3
 8016768:	0152      	lsls	r2, r2, #5
 801676a:	1ad2      	subs	r2, r2, r3
 801676c:	0092      	lsls	r2, r2, #2
 801676e:	4413      	add	r3, r2
 8016770:	00db      	lsls	r3, r3, #3
 8016772:	b29b      	uxth	r3, r3
 8016774:	e001      	b.n	801677a <dhcp_discover+0x10a>
 8016776:	f64e 2360 	movw	r3, #60000	; 0xea60
 801677a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801677c:	897b      	ldrh	r3, [r7, #10]
 801677e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016782:	4a0b      	ldr	r2, [pc, #44]	; (80167b0 <dhcp_discover+0x140>)
 8016784:	fb82 1203 	smull	r1, r2, r2, r3
 8016788:	1152      	asrs	r2, r2, #5
 801678a:	17db      	asrs	r3, r3, #31
 801678c:	1ad3      	subs	r3, r2, r3
 801678e:	b29a      	uxth	r2, r3
 8016790:	69bb      	ldr	r3, [r7, #24]
 8016792:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016794:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016798:	4618      	mov	r0, r3
 801679a:	3720      	adds	r7, #32
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}
 80167a0:	20000020 	.word	0x20000020
 80167a4:	20004bfc 	.word	0x20004bfc
 80167a8:	0801f328 	.word	0x0801f328
 80167ac:	0801f32c 	.word	0x0801f32c
 80167b0:	10624dd3 	.word	0x10624dd3

080167b4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b088      	sub	sp, #32
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d107      	bne.n	80167d2 <dhcp_bind+0x1e>
 80167c2:	4b64      	ldr	r3, [pc, #400]	; (8016954 <dhcp_bind+0x1a0>)
 80167c4:	f240 4215 	movw	r2, #1045	; 0x415
 80167c8:	4963      	ldr	r1, [pc, #396]	; (8016958 <dhcp_bind+0x1a4>)
 80167ca:	4864      	ldr	r0, [pc, #400]	; (801695c <dhcp_bind+0x1a8>)
 80167cc:	f003 fdfa 	bl	801a3c4 <iprintf>
 80167d0:	e0bc      	b.n	801694c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167d6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80167d8:	69bb      	ldr	r3, [r7, #24]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d107      	bne.n	80167ee <dhcp_bind+0x3a>
 80167de:	4b5d      	ldr	r3, [pc, #372]	; (8016954 <dhcp_bind+0x1a0>)
 80167e0:	f240 4217 	movw	r2, #1047	; 0x417
 80167e4:	495e      	ldr	r1, [pc, #376]	; (8016960 <dhcp_bind+0x1ac>)
 80167e6:	485d      	ldr	r0, [pc, #372]	; (801695c <dhcp_bind+0x1a8>)
 80167e8:	f003 fdec 	bl	801a3c4 <iprintf>
 80167ec:	e0ae      	b.n	801694c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80167ee:	69bb      	ldr	r3, [r7, #24]
 80167f0:	2200      	movs	r2, #0
 80167f2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80167f4:	69bb      	ldr	r3, [r7, #24]
 80167f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167fc:	d019      	beq.n	8016832 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80167fe:	69bb      	ldr	r3, [r7, #24]
 8016800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016802:	331e      	adds	r3, #30
 8016804:	4a57      	ldr	r2, [pc, #348]	; (8016964 <dhcp_bind+0x1b0>)
 8016806:	fba2 2303 	umull	r2, r3, r2, r3
 801680a:	095b      	lsrs	r3, r3, #5
 801680c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016814:	d302      	bcc.n	801681c <dhcp_bind+0x68>
      timeout = 0xffff;
 8016816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801681a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801681c:	69fb      	ldr	r3, [r7, #28]
 801681e:	b29a      	uxth	r2, r3
 8016820:	69bb      	ldr	r3, [r7, #24]
 8016822:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016824:	69bb      	ldr	r3, [r7, #24]
 8016826:	8a9b      	ldrh	r3, [r3, #20]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d102      	bne.n	8016832 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801682c:	69bb      	ldr	r3, [r7, #24]
 801682e:	2201      	movs	r2, #1
 8016830:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016832:	69bb      	ldr	r3, [r7, #24]
 8016834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801683a:	d01d      	beq.n	8016878 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801683c:	69bb      	ldr	r3, [r7, #24]
 801683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016840:	331e      	adds	r3, #30
 8016842:	4a48      	ldr	r2, [pc, #288]	; (8016964 <dhcp_bind+0x1b0>)
 8016844:	fba2 2303 	umull	r2, r3, r2, r3
 8016848:	095b      	lsrs	r3, r3, #5
 801684a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016852:	d302      	bcc.n	801685a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016858:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801685a:	69fb      	ldr	r3, [r7, #28]
 801685c:	b29a      	uxth	r2, r3
 801685e:	69bb      	ldr	r3, [r7, #24]
 8016860:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016862:	69bb      	ldr	r3, [r7, #24]
 8016864:	895b      	ldrh	r3, [r3, #10]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d102      	bne.n	8016870 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801686a:	69bb      	ldr	r3, [r7, #24]
 801686c:	2201      	movs	r2, #1
 801686e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016870:	69bb      	ldr	r3, [r7, #24]
 8016872:	895a      	ldrh	r2, [r3, #10]
 8016874:	69bb      	ldr	r3, [r7, #24]
 8016876:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016878:	69bb      	ldr	r3, [r7, #24]
 801687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016880:	d01d      	beq.n	80168be <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016882:	69bb      	ldr	r3, [r7, #24]
 8016884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016886:	331e      	adds	r3, #30
 8016888:	4a36      	ldr	r2, [pc, #216]	; (8016964 <dhcp_bind+0x1b0>)
 801688a:	fba2 2303 	umull	r2, r3, r2, r3
 801688e:	095b      	lsrs	r3, r3, #5
 8016890:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016892:	69fb      	ldr	r3, [r7, #28]
 8016894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016898:	d302      	bcc.n	80168a0 <dhcp_bind+0xec>
      timeout = 0xffff;
 801689a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801689e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80168a0:	69fb      	ldr	r3, [r7, #28]
 80168a2:	b29a      	uxth	r2, r3
 80168a4:	69bb      	ldr	r3, [r7, #24]
 80168a6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80168a8:	69bb      	ldr	r3, [r7, #24]
 80168aa:	899b      	ldrh	r3, [r3, #12]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d102      	bne.n	80168b6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80168b0:	69bb      	ldr	r3, [r7, #24]
 80168b2:	2201      	movs	r2, #1
 80168b4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80168b6:	69bb      	ldr	r3, [r7, #24]
 80168b8:	899a      	ldrh	r2, [r3, #12]
 80168ba:	69bb      	ldr	r3, [r7, #24]
 80168bc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80168be:	69bb      	ldr	r3, [r7, #24]
 80168c0:	895a      	ldrh	r2, [r3, #10]
 80168c2:	69bb      	ldr	r3, [r7, #24]
 80168c4:	899b      	ldrh	r3, [r3, #12]
 80168c6:	429a      	cmp	r2, r3
 80168c8:	d306      	bcc.n	80168d8 <dhcp_bind+0x124>
 80168ca:	69bb      	ldr	r3, [r7, #24]
 80168cc:	899b      	ldrh	r3, [r3, #12]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d002      	beq.n	80168d8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80168d2:	69bb      	ldr	r3, [r7, #24]
 80168d4:	2200      	movs	r2, #0
 80168d6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80168d8:	69bb      	ldr	r3, [r7, #24]
 80168da:	79db      	ldrb	r3, [r3, #7]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d003      	beq.n	80168e8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80168e0:	69bb      	ldr	r3, [r7, #24]
 80168e2:	6a1b      	ldr	r3, [r3, #32]
 80168e4:	613b      	str	r3, [r7, #16]
 80168e6:	e014      	b.n	8016912 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80168e8:	69bb      	ldr	r3, [r7, #24]
 80168ea:	331c      	adds	r3, #28
 80168ec:	781b      	ldrb	r3, [r3, #0]
 80168ee:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80168f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	db02      	blt.n	80168fe <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80168f8:	23ff      	movs	r3, #255	; 0xff
 80168fa:	613b      	str	r3, [r7, #16]
 80168fc:	e009      	b.n	8016912 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80168fe:	7dfb      	ldrb	r3, [r7, #23]
 8016900:	2bbf      	cmp	r3, #191	; 0xbf
 8016902:	d903      	bls.n	801690c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8016904:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8016908:	613b      	str	r3, [r7, #16]
 801690a:	e002      	b.n	8016912 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801690c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016910:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8016912:	69bb      	ldr	r3, [r7, #24]
 8016914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016916:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d108      	bne.n	8016930 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801691e:	69bb      	ldr	r3, [r7, #24]
 8016920:	69da      	ldr	r2, [r3, #28]
 8016922:	693b      	ldr	r3, [r7, #16]
 8016924:	4013      	ands	r3, r2
 8016926:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801692e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016930:	210a      	movs	r1, #10
 8016932:	69b8      	ldr	r0, [r7, #24]
 8016934:	f000 faa0 	bl	8016e78 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8016938:	69bb      	ldr	r3, [r7, #24]
 801693a:	f103 011c 	add.w	r1, r3, #28
 801693e:	f107 030c 	add.w	r3, r7, #12
 8016942:	f107 0210 	add.w	r2, r7, #16
 8016946:	6878      	ldr	r0, [r7, #4]
 8016948:	f7f7 fa34 	bl	800ddb4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801694c:	3720      	adds	r7, #32
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	0801e6e4 	.word	0x0801e6e4
 8016958:	0801e844 	.word	0x0801e844
 801695c:	0801e744 	.word	0x0801e744
 8016960:	0801e860 	.word	0x0801e860
 8016964:	88888889 	.word	0x88888889

08016968 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b08a      	sub	sp, #40	; 0x28
 801696c:	af02      	add	r7, sp, #8
 801696e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016974:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8016976:	2105      	movs	r1, #5
 8016978:	69b8      	ldr	r0, [r7, #24]
 801697a:	f000 fa7d 	bl	8016e78 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801697e:	f107 030c 	add.w	r3, r7, #12
 8016982:	2203      	movs	r2, #3
 8016984:	69b9      	ldr	r1, [r7, #24]
 8016986:	6878      	ldr	r0, [r7, #4]
 8016988:	f000 ff00 	bl	801778c <dhcp_create_msg>
 801698c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d04e      	beq.n	8016a32 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016994:	697b      	ldr	r3, [r7, #20]
 8016996:	685b      	ldr	r3, [r3, #4]
 8016998:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801699a:	89b8      	ldrh	r0, [r7, #12]
 801699c:	693b      	ldr	r3, [r7, #16]
 801699e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169a2:	2302      	movs	r3, #2
 80169a4:	2239      	movs	r2, #57	; 0x39
 80169a6:	f000 fa81 	bl	8016eac <dhcp_option>
 80169aa:	4603      	mov	r3, r0
 80169ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80169ae:	89b8      	ldrh	r0, [r7, #12]
 80169b0:	693b      	ldr	r3, [r7, #16]
 80169b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80169ba:	461a      	mov	r2, r3
 80169bc:	f000 fad0 	bl	8016f60 <dhcp_option_short>
 80169c0:	4603      	mov	r3, r0
 80169c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80169c4:	89b8      	ldrh	r0, [r7, #12]
 80169c6:	693b      	ldr	r3, [r7, #16]
 80169c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169cc:	2303      	movs	r3, #3
 80169ce:	2237      	movs	r2, #55	; 0x37
 80169d0:	f000 fa6c 	bl	8016eac <dhcp_option>
 80169d4:	4603      	mov	r3, r0
 80169d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80169d8:	2300      	movs	r3, #0
 80169da:	77bb      	strb	r3, [r7, #30]
 80169dc:	e00e      	b.n	80169fc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80169de:	89b8      	ldrh	r0, [r7, #12]
 80169e0:	693b      	ldr	r3, [r7, #16]
 80169e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169e6:	7fbb      	ldrb	r3, [r7, #30]
 80169e8:	4a2a      	ldr	r2, [pc, #168]	; (8016a94 <dhcp_renew+0x12c>)
 80169ea:	5cd3      	ldrb	r3, [r2, r3]
 80169ec:	461a      	mov	r2, r3
 80169ee:	f000 fa91 	bl	8016f14 <dhcp_option_byte>
 80169f2:	4603      	mov	r3, r0
 80169f4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80169f6:	7fbb      	ldrb	r3, [r7, #30]
 80169f8:	3301      	adds	r3, #1
 80169fa:	77bb      	strb	r3, [r7, #30]
 80169fc:	7fbb      	ldrb	r3, [r7, #30]
 80169fe:	2b02      	cmp	r3, #2
 8016a00:	d9ed      	bls.n	80169de <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016a02:	89b8      	ldrh	r0, [r7, #12]
 8016a04:	693b      	ldr	r3, [r7, #16]
 8016a06:	33f0      	adds	r3, #240	; 0xf0
 8016a08:	697a      	ldr	r2, [r7, #20]
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	f000 ff94 	bl	8017938 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016a10:	4b21      	ldr	r3, [pc, #132]	; (8016a98 <dhcp_renew+0x130>)
 8016a12:	6818      	ldr	r0, [r3, #0]
 8016a14:	69bb      	ldr	r3, [r7, #24]
 8016a16:	f103 0218 	add.w	r2, r3, #24
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	9300      	str	r3, [sp, #0]
 8016a1e:	2343      	movs	r3, #67	; 0x43
 8016a20:	6979      	ldr	r1, [r7, #20]
 8016a22:	f7fe fe1b 	bl	801565c <udp_sendto_if>
 8016a26:	4603      	mov	r3, r0
 8016a28:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016a2a:	6978      	ldr	r0, [r7, #20]
 8016a2c:	f7f7 ff04 	bl	800e838 <pbuf_free>
 8016a30:	e001      	b.n	8016a36 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016a32:	23ff      	movs	r3, #255	; 0xff
 8016a34:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016a36:	69bb      	ldr	r3, [r7, #24]
 8016a38:	799b      	ldrb	r3, [r3, #6]
 8016a3a:	2bff      	cmp	r3, #255	; 0xff
 8016a3c:	d005      	beq.n	8016a4a <dhcp_renew+0xe2>
    dhcp->tries++;
 8016a3e:	69bb      	ldr	r3, [r7, #24]
 8016a40:	799b      	ldrb	r3, [r3, #6]
 8016a42:	3301      	adds	r3, #1
 8016a44:	b2da      	uxtb	r2, r3
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8016a4a:	69bb      	ldr	r3, [r7, #24]
 8016a4c:	799b      	ldrb	r3, [r3, #6]
 8016a4e:	2b09      	cmp	r3, #9
 8016a50:	d80a      	bhi.n	8016a68 <dhcp_renew+0x100>
 8016a52:	69bb      	ldr	r3, [r7, #24]
 8016a54:	799b      	ldrb	r3, [r3, #6]
 8016a56:	b29b      	uxth	r3, r3
 8016a58:	461a      	mov	r2, r3
 8016a5a:	0152      	lsls	r2, r2, #5
 8016a5c:	1ad2      	subs	r2, r2, r3
 8016a5e:	0092      	lsls	r2, r2, #2
 8016a60:	4413      	add	r3, r2
 8016a62:	011b      	lsls	r3, r3, #4
 8016a64:	b29b      	uxth	r3, r3
 8016a66:	e001      	b.n	8016a6c <dhcp_renew+0x104>
 8016a68:	f644 6320 	movw	r3, #20000	; 0x4e20
 8016a6c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016a6e:	89fb      	ldrh	r3, [r7, #14]
 8016a70:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016a74:	4a09      	ldr	r2, [pc, #36]	; (8016a9c <dhcp_renew+0x134>)
 8016a76:	fb82 1203 	smull	r1, r2, r2, r3
 8016a7a:	1152      	asrs	r2, r2, #5
 8016a7c:	17db      	asrs	r3, r3, #31
 8016a7e:	1ad3      	subs	r3, r2, r3
 8016a80:	b29a      	uxth	r2, r3
 8016a82:	69bb      	ldr	r3, [r7, #24]
 8016a84:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016a86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	3720      	adds	r7, #32
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}
 8016a92:	bf00      	nop
 8016a94:	20000020 	.word	0x20000020
 8016a98:	20004bfc 	.word	0x20004bfc
 8016a9c:	10624dd3 	.word	0x10624dd3

08016aa0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b08a      	sub	sp, #40	; 0x28
 8016aa4:	af02      	add	r7, sp, #8
 8016aa6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aac:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016aae:	2104      	movs	r1, #4
 8016ab0:	69b8      	ldr	r0, [r7, #24]
 8016ab2:	f000 f9e1 	bl	8016e78 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016ab6:	f107 030c 	add.w	r3, r7, #12
 8016aba:	2203      	movs	r2, #3
 8016abc:	69b9      	ldr	r1, [r7, #24]
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f000 fe64 	bl	801778c <dhcp_create_msg>
 8016ac4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d04c      	beq.n	8016b66 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016acc:	697b      	ldr	r3, [r7, #20]
 8016ace:	685b      	ldr	r3, [r3, #4]
 8016ad0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016ad2:	89b8      	ldrh	r0, [r7, #12]
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ada:	2302      	movs	r3, #2
 8016adc:	2239      	movs	r2, #57	; 0x39
 8016ade:	f000 f9e5 	bl	8016eac <dhcp_option>
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016ae6:	89b8      	ldrh	r0, [r7, #12]
 8016ae8:	693b      	ldr	r3, [r7, #16]
 8016aea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016af2:	461a      	mov	r2, r3
 8016af4:	f000 fa34 	bl	8016f60 <dhcp_option_short>
 8016af8:	4603      	mov	r3, r0
 8016afa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016afc:	89b8      	ldrh	r0, [r7, #12]
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016b04:	2303      	movs	r3, #3
 8016b06:	2237      	movs	r2, #55	; 0x37
 8016b08:	f000 f9d0 	bl	8016eac <dhcp_option>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016b10:	2300      	movs	r3, #0
 8016b12:	77bb      	strb	r3, [r7, #30]
 8016b14:	e00e      	b.n	8016b34 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016b16:	89b8      	ldrh	r0, [r7, #12]
 8016b18:	693b      	ldr	r3, [r7, #16]
 8016b1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016b1e:	7fbb      	ldrb	r3, [r7, #30]
 8016b20:	4a29      	ldr	r2, [pc, #164]	; (8016bc8 <dhcp_rebind+0x128>)
 8016b22:	5cd3      	ldrb	r3, [r2, r3]
 8016b24:	461a      	mov	r2, r3
 8016b26:	f000 f9f5 	bl	8016f14 <dhcp_option_byte>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016b2e:	7fbb      	ldrb	r3, [r7, #30]
 8016b30:	3301      	adds	r3, #1
 8016b32:	77bb      	strb	r3, [r7, #30]
 8016b34:	7fbb      	ldrb	r3, [r7, #30]
 8016b36:	2b02      	cmp	r3, #2
 8016b38:	d9ed      	bls.n	8016b16 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016b3a:	89b8      	ldrh	r0, [r7, #12]
 8016b3c:	693b      	ldr	r3, [r7, #16]
 8016b3e:	33f0      	adds	r3, #240	; 0xf0
 8016b40:	697a      	ldr	r2, [r7, #20]
 8016b42:	4619      	mov	r1, r3
 8016b44:	f000 fef8 	bl	8017938 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016b48:	4b20      	ldr	r3, [pc, #128]	; (8016bcc <dhcp_rebind+0x12c>)
 8016b4a:	6818      	ldr	r0, [r3, #0]
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	9300      	str	r3, [sp, #0]
 8016b50:	2343      	movs	r3, #67	; 0x43
 8016b52:	4a1f      	ldr	r2, [pc, #124]	; (8016bd0 <dhcp_rebind+0x130>)
 8016b54:	6979      	ldr	r1, [r7, #20]
 8016b56:	f7fe fd81 	bl	801565c <udp_sendto_if>
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016b5e:	6978      	ldr	r0, [r7, #20]
 8016b60:	f7f7 fe6a 	bl	800e838 <pbuf_free>
 8016b64:	e001      	b.n	8016b6a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016b66:	23ff      	movs	r3, #255	; 0xff
 8016b68:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016b6a:	69bb      	ldr	r3, [r7, #24]
 8016b6c:	799b      	ldrb	r3, [r3, #6]
 8016b6e:	2bff      	cmp	r3, #255	; 0xff
 8016b70:	d005      	beq.n	8016b7e <dhcp_rebind+0xde>
    dhcp->tries++;
 8016b72:	69bb      	ldr	r3, [r7, #24]
 8016b74:	799b      	ldrb	r3, [r3, #6]
 8016b76:	3301      	adds	r3, #1
 8016b78:	b2da      	uxtb	r2, r3
 8016b7a:	69bb      	ldr	r3, [r7, #24]
 8016b7c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016b7e:	69bb      	ldr	r3, [r7, #24]
 8016b80:	799b      	ldrb	r3, [r3, #6]
 8016b82:	2b09      	cmp	r3, #9
 8016b84:	d80a      	bhi.n	8016b9c <dhcp_rebind+0xfc>
 8016b86:	69bb      	ldr	r3, [r7, #24]
 8016b88:	799b      	ldrb	r3, [r3, #6]
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	461a      	mov	r2, r3
 8016b8e:	0152      	lsls	r2, r2, #5
 8016b90:	1ad2      	subs	r2, r2, r3
 8016b92:	0092      	lsls	r2, r2, #2
 8016b94:	4413      	add	r3, r2
 8016b96:	00db      	lsls	r3, r3, #3
 8016b98:	b29b      	uxth	r3, r3
 8016b9a:	e001      	b.n	8016ba0 <dhcp_rebind+0x100>
 8016b9c:	f242 7310 	movw	r3, #10000	; 0x2710
 8016ba0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016ba2:	89fb      	ldrh	r3, [r7, #14]
 8016ba4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016ba8:	4a0a      	ldr	r2, [pc, #40]	; (8016bd4 <dhcp_rebind+0x134>)
 8016baa:	fb82 1203 	smull	r1, r2, r2, r3
 8016bae:	1152      	asrs	r2, r2, #5
 8016bb0:	17db      	asrs	r3, r3, #31
 8016bb2:	1ad3      	subs	r3, r2, r3
 8016bb4:	b29a      	uxth	r2, r3
 8016bb6:	69bb      	ldr	r3, [r7, #24]
 8016bb8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016bba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	3720      	adds	r7, #32
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}
 8016bc6:	bf00      	nop
 8016bc8:	20000020 	.word	0x20000020
 8016bcc:	20004bfc 	.word	0x20004bfc
 8016bd0:	0801f32c 	.word	0x0801f32c
 8016bd4:	10624dd3 	.word	0x10624dd3

08016bd8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016bd8:	b5b0      	push	{r4, r5, r7, lr}
 8016bda:	b08a      	sub	sp, #40	; 0x28
 8016bdc:	af02      	add	r7, sp, #8
 8016bde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016be4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016be6:	2103      	movs	r1, #3
 8016be8:	69b8      	ldr	r0, [r7, #24]
 8016bea:	f000 f945 	bl	8016e78 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016bee:	f107 030c 	add.w	r3, r7, #12
 8016bf2:	2203      	movs	r2, #3
 8016bf4:	69b9      	ldr	r1, [r7, #24]
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f000 fdc8 	bl	801778c <dhcp_create_msg>
 8016bfc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d066      	beq.n	8016cd2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016c04:	697b      	ldr	r3, [r7, #20]
 8016c06:	685b      	ldr	r3, [r3, #4]
 8016c08:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016c0a:	89b8      	ldrh	r0, [r7, #12]
 8016c0c:	693b      	ldr	r3, [r7, #16]
 8016c0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c12:	2302      	movs	r3, #2
 8016c14:	2239      	movs	r2, #57	; 0x39
 8016c16:	f000 f949 	bl	8016eac <dhcp_option>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016c1e:	89b8      	ldrh	r0, [r7, #12]
 8016c20:	693b      	ldr	r3, [r7, #16]
 8016c22:	33f0      	adds	r3, #240	; 0xf0
 8016c24:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016c28:	4619      	mov	r1, r3
 8016c2a:	f000 f999 	bl	8016f60 <dhcp_option_short>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016c32:	89b8      	ldrh	r0, [r7, #12]
 8016c34:	693b      	ldr	r3, [r7, #16]
 8016c36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c3a:	2304      	movs	r3, #4
 8016c3c:	2232      	movs	r2, #50	; 0x32
 8016c3e:	f000 f935 	bl	8016eac <dhcp_option>
 8016c42:	4603      	mov	r3, r0
 8016c44:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016c46:	89bc      	ldrh	r4, [r7, #12]
 8016c48:	693b      	ldr	r3, [r7, #16]
 8016c4a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016c4e:	69bb      	ldr	r3, [r7, #24]
 8016c50:	69db      	ldr	r3, [r3, #28]
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7f6 fa19 	bl	800d08a <lwip_htonl>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	4629      	mov	r1, r5
 8016c5e:	4620      	mov	r0, r4
 8016c60:	f000 f9b0 	bl	8016fc4 <dhcp_option_long>
 8016c64:	4603      	mov	r3, r0
 8016c66:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016c68:	89b8      	ldrh	r0, [r7, #12]
 8016c6a:	693b      	ldr	r3, [r7, #16]
 8016c6c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c70:	2303      	movs	r3, #3
 8016c72:	2237      	movs	r2, #55	; 0x37
 8016c74:	f000 f91a 	bl	8016eac <dhcp_option>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	77bb      	strb	r3, [r7, #30]
 8016c80:	e00e      	b.n	8016ca0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016c82:	89b8      	ldrh	r0, [r7, #12]
 8016c84:	693b      	ldr	r3, [r7, #16]
 8016c86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c8a:	7fbb      	ldrb	r3, [r7, #30]
 8016c8c:	4a29      	ldr	r2, [pc, #164]	; (8016d34 <dhcp_reboot+0x15c>)
 8016c8e:	5cd3      	ldrb	r3, [r2, r3]
 8016c90:	461a      	mov	r2, r3
 8016c92:	f000 f93f 	bl	8016f14 <dhcp_option_byte>
 8016c96:	4603      	mov	r3, r0
 8016c98:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016c9a:	7fbb      	ldrb	r3, [r7, #30]
 8016c9c:	3301      	adds	r3, #1
 8016c9e:	77bb      	strb	r3, [r7, #30]
 8016ca0:	7fbb      	ldrb	r3, [r7, #30]
 8016ca2:	2b02      	cmp	r3, #2
 8016ca4:	d9ed      	bls.n	8016c82 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016ca6:	89b8      	ldrh	r0, [r7, #12]
 8016ca8:	693b      	ldr	r3, [r7, #16]
 8016caa:	33f0      	adds	r3, #240	; 0xf0
 8016cac:	697a      	ldr	r2, [r7, #20]
 8016cae:	4619      	mov	r1, r3
 8016cb0:	f000 fe42 	bl	8017938 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016cb4:	4b20      	ldr	r3, [pc, #128]	; (8016d38 <dhcp_reboot+0x160>)
 8016cb6:	6818      	ldr	r0, [r3, #0]
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	9300      	str	r3, [sp, #0]
 8016cbc:	2343      	movs	r3, #67	; 0x43
 8016cbe:	4a1f      	ldr	r2, [pc, #124]	; (8016d3c <dhcp_reboot+0x164>)
 8016cc0:	6979      	ldr	r1, [r7, #20]
 8016cc2:	f7fe fccb 	bl	801565c <udp_sendto_if>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016cca:	6978      	ldr	r0, [r7, #20]
 8016ccc:	f7f7 fdb4 	bl	800e838 <pbuf_free>
 8016cd0:	e001      	b.n	8016cd6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016cd2:	23ff      	movs	r3, #255	; 0xff
 8016cd4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016cd6:	69bb      	ldr	r3, [r7, #24]
 8016cd8:	799b      	ldrb	r3, [r3, #6]
 8016cda:	2bff      	cmp	r3, #255	; 0xff
 8016cdc:	d005      	beq.n	8016cea <dhcp_reboot+0x112>
    dhcp->tries++;
 8016cde:	69bb      	ldr	r3, [r7, #24]
 8016ce0:	799b      	ldrb	r3, [r3, #6]
 8016ce2:	3301      	adds	r3, #1
 8016ce4:	b2da      	uxtb	r2, r3
 8016ce6:	69bb      	ldr	r3, [r7, #24]
 8016ce8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016cea:	69bb      	ldr	r3, [r7, #24]
 8016cec:	799b      	ldrb	r3, [r3, #6]
 8016cee:	2b09      	cmp	r3, #9
 8016cf0:	d80a      	bhi.n	8016d08 <dhcp_reboot+0x130>
 8016cf2:	69bb      	ldr	r3, [r7, #24]
 8016cf4:	799b      	ldrb	r3, [r3, #6]
 8016cf6:	b29b      	uxth	r3, r3
 8016cf8:	461a      	mov	r2, r3
 8016cfa:	0152      	lsls	r2, r2, #5
 8016cfc:	1ad2      	subs	r2, r2, r3
 8016cfe:	0092      	lsls	r2, r2, #2
 8016d00:	4413      	add	r3, r2
 8016d02:	00db      	lsls	r3, r3, #3
 8016d04:	b29b      	uxth	r3, r3
 8016d06:	e001      	b.n	8016d0c <dhcp_reboot+0x134>
 8016d08:	f242 7310 	movw	r3, #10000	; 0x2710
 8016d0c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016d0e:	89fb      	ldrh	r3, [r7, #14]
 8016d10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016d14:	4a0a      	ldr	r2, [pc, #40]	; (8016d40 <dhcp_reboot+0x168>)
 8016d16:	fb82 1203 	smull	r1, r2, r2, r3
 8016d1a:	1152      	asrs	r2, r2, #5
 8016d1c:	17db      	asrs	r3, r3, #31
 8016d1e:	1ad3      	subs	r3, r2, r3
 8016d20:	b29a      	uxth	r2, r3
 8016d22:	69bb      	ldr	r3, [r7, #24]
 8016d24:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016d26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	3720      	adds	r7, #32
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	bdb0      	pop	{r4, r5, r7, pc}
 8016d32:	bf00      	nop
 8016d34:	20000020 	.word	0x20000020
 8016d38:	20004bfc 	.word	0x20004bfc
 8016d3c:	0801f32c 	.word	0x0801f32c
 8016d40:	10624dd3 	.word	0x10624dd3

08016d44 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016d44:	b5b0      	push	{r4, r5, r7, lr}
 8016d46:	b08a      	sub	sp, #40	; 0x28
 8016d48:	af02      	add	r7, sp, #8
 8016d4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d50:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016d52:	69fb      	ldr	r3, [r7, #28]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	f000 8084 	beq.w	8016e62 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8016d5a:	69fb      	ldr	r3, [r7, #28]
 8016d5c:	795b      	ldrb	r3, [r3, #5]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	f000 8081 	beq.w	8016e66 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016d64:	69fb      	ldr	r3, [r7, #28]
 8016d66:	699b      	ldr	r3, [r3, #24]
 8016d68:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8016d6a:	69fb      	ldr	r3, [r7, #28]
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016d70:	69fb      	ldr	r3, [r7, #28]
 8016d72:	2200      	movs	r2, #0
 8016d74:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016d76:	69fb      	ldr	r3, [r7, #28]
 8016d78:	2200      	movs	r2, #0
 8016d7a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016d7c:	69fb      	ldr	r3, [r7, #28]
 8016d7e:	2200      	movs	r2, #0
 8016d80:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016d82:	69fb      	ldr	r3, [r7, #28]
 8016d84:	2200      	movs	r2, #0
 8016d86:	631a      	str	r2, [r3, #48]	; 0x30
 8016d88:	69fb      	ldr	r3, [r7, #28]
 8016d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016d8c:	69fb      	ldr	r3, [r7, #28]
 8016d8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8016d90:	69fb      	ldr	r3, [r7, #28]
 8016d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d94:	69fb      	ldr	r3, [r7, #28]
 8016d96:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8016d98:	69fb      	ldr	r3, [r7, #28]
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	829a      	strh	r2, [r3, #20]
 8016d9e:	69fb      	ldr	r3, [r7, #28]
 8016da0:	8a9a      	ldrh	r2, [r3, #20]
 8016da2:	69fb      	ldr	r3, [r7, #28]
 8016da4:	825a      	strh	r2, [r3, #18]
 8016da6:	69fb      	ldr	r3, [r7, #28]
 8016da8:	8a5a      	ldrh	r2, [r3, #18]
 8016daa:	69fb      	ldr	r3, [r7, #28]
 8016dac:	821a      	strh	r2, [r3, #16]
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	8a1a      	ldrh	r2, [r3, #16]
 8016db2:	69fb      	ldr	r3, [r7, #28]
 8016db4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8016db6:	6878      	ldr	r0, [r7, #4]
 8016db8:	f000 fdec 	bl	8017994 <dhcp_supplied_address>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d03b      	beq.n	8016e3a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016dc2:	f107 030e 	add.w	r3, r7, #14
 8016dc6:	2207      	movs	r2, #7
 8016dc8:	69f9      	ldr	r1, [r7, #28]
 8016dca:	6878      	ldr	r0, [r7, #4]
 8016dcc:	f000 fcde 	bl	801778c <dhcp_create_msg>
 8016dd0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8016dd2:	69bb      	ldr	r3, [r7, #24]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d030      	beq.n	8016e3a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016dd8:	69bb      	ldr	r3, [r7, #24]
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016dde:	89f8      	ldrh	r0, [r7, #14]
 8016de0:	697b      	ldr	r3, [r7, #20]
 8016de2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016de6:	2304      	movs	r3, #4
 8016de8:	2236      	movs	r2, #54	; 0x36
 8016dea:	f000 f85f 	bl	8016eac <dhcp_option>
 8016dee:	4603      	mov	r3, r0
 8016df0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016df2:	89fc      	ldrh	r4, [r7, #14]
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016dfa:	693b      	ldr	r3, [r7, #16]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7f6 f944 	bl	800d08a <lwip_htonl>
 8016e02:	4603      	mov	r3, r0
 8016e04:	461a      	mov	r2, r3
 8016e06:	4629      	mov	r1, r5
 8016e08:	4620      	mov	r0, r4
 8016e0a:	f000 f8db 	bl	8016fc4 <dhcp_option_long>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016e12:	89f8      	ldrh	r0, [r7, #14]
 8016e14:	697b      	ldr	r3, [r7, #20]
 8016e16:	33f0      	adds	r3, #240	; 0xf0
 8016e18:	69ba      	ldr	r2, [r7, #24]
 8016e1a:	4619      	mov	r1, r3
 8016e1c:	f000 fd8c 	bl	8017938 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016e20:	4b13      	ldr	r3, [pc, #76]	; (8016e70 <dhcp_release_and_stop+0x12c>)
 8016e22:	6818      	ldr	r0, [r3, #0]
 8016e24:	f107 0210 	add.w	r2, r7, #16
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	9300      	str	r3, [sp, #0]
 8016e2c:	2343      	movs	r3, #67	; 0x43
 8016e2e:	69b9      	ldr	r1, [r7, #24]
 8016e30:	f7fe fc14 	bl	801565c <udp_sendto_if>
      pbuf_free(p_out);
 8016e34:	69b8      	ldr	r0, [r7, #24]
 8016e36:	f7f7 fcff 	bl	800e838 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016e3a:	4b0e      	ldr	r3, [pc, #56]	; (8016e74 <dhcp_release_and_stop+0x130>)
 8016e3c:	4a0d      	ldr	r2, [pc, #52]	; (8016e74 <dhcp_release_and_stop+0x130>)
 8016e3e:	490d      	ldr	r1, [pc, #52]	; (8016e74 <dhcp_release_and_stop+0x130>)
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f7f6 ffb7 	bl	800ddb4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016e46:	2100      	movs	r1, #0
 8016e48:	69f8      	ldr	r0, [r7, #28]
 8016e4a:	f000 f815 	bl	8016e78 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8016e4e:	69fb      	ldr	r3, [r7, #28]
 8016e50:	791b      	ldrb	r3, [r3, #4]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d008      	beq.n	8016e68 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016e56:	f7fe ff73 	bl	8015d40 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8016e5a:	69fb      	ldr	r3, [r7, #28]
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	711a      	strb	r2, [r3, #4]
 8016e60:	e002      	b.n	8016e68 <dhcp_release_and_stop+0x124>
    return;
 8016e62:	bf00      	nop
 8016e64:	e000      	b.n	8016e68 <dhcp_release_and_stop+0x124>
    return;
 8016e66:	bf00      	nop
  }
}
 8016e68:	3720      	adds	r7, #32
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8016e6e:	bf00      	nop
 8016e70:	20004bfc 	.word	0x20004bfc
 8016e74:	0801f328 	.word	0x0801f328

08016e78 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016e78:	b480      	push	{r7}
 8016e7a:	b083      	sub	sp, #12
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
 8016e80:	460b      	mov	r3, r1
 8016e82:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	795b      	ldrb	r3, [r3, #5]
 8016e88:	78fa      	ldrb	r2, [r7, #3]
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	d008      	beq.n	8016ea0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	78fa      	ldrb	r2, [r7, #3]
 8016e92:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2200      	movs	r2, #0
 8016e98:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	811a      	strh	r2, [r3, #8]
  }
}
 8016ea0:	bf00      	nop
 8016ea2:	370c      	adds	r7, #12
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eaa:	4770      	bx	lr

08016eac <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b082      	sub	sp, #8
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6039      	str	r1, [r7, #0]
 8016eb4:	4611      	mov	r1, r2
 8016eb6:	461a      	mov	r2, r3
 8016eb8:	4603      	mov	r3, r0
 8016eba:	80fb      	strh	r3, [r7, #6]
 8016ebc:	460b      	mov	r3, r1
 8016ebe:	717b      	strb	r3, [r7, #5]
 8016ec0:	4613      	mov	r3, r2
 8016ec2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016ec4:	88fa      	ldrh	r2, [r7, #6]
 8016ec6:	793b      	ldrb	r3, [r7, #4]
 8016ec8:	4413      	add	r3, r2
 8016eca:	3302      	adds	r3, #2
 8016ecc:	2b44      	cmp	r3, #68	; 0x44
 8016ece:	d906      	bls.n	8016ede <dhcp_option+0x32>
 8016ed0:	4b0d      	ldr	r3, [pc, #52]	; (8016f08 <dhcp_option+0x5c>)
 8016ed2:	f240 529a 	movw	r2, #1434	; 0x59a
 8016ed6:	490d      	ldr	r1, [pc, #52]	; (8016f0c <dhcp_option+0x60>)
 8016ed8:	480d      	ldr	r0, [pc, #52]	; (8016f10 <dhcp_option+0x64>)
 8016eda:	f003 fa73 	bl	801a3c4 <iprintf>
  options[options_out_len++] = option_type;
 8016ede:	88fb      	ldrh	r3, [r7, #6]
 8016ee0:	1c5a      	adds	r2, r3, #1
 8016ee2:	80fa      	strh	r2, [r7, #6]
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	683b      	ldr	r3, [r7, #0]
 8016ee8:	4413      	add	r3, r2
 8016eea:	797a      	ldrb	r2, [r7, #5]
 8016eec:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016eee:	88fb      	ldrh	r3, [r7, #6]
 8016ef0:	1c5a      	adds	r2, r3, #1
 8016ef2:	80fa      	strh	r2, [r7, #6]
 8016ef4:	461a      	mov	r2, r3
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	4413      	add	r3, r2
 8016efa:	793a      	ldrb	r2, [r7, #4]
 8016efc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016efe:	88fb      	ldrh	r3, [r7, #6]
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3708      	adds	r7, #8
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}
 8016f08:	0801e6e4 	.word	0x0801e6e4
 8016f0c:	0801e878 	.word	0x0801e878
 8016f10:	0801e744 	.word	0x0801e744

08016f14 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b082      	sub	sp, #8
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	6039      	str	r1, [r7, #0]
 8016f1e:	80fb      	strh	r3, [r7, #6]
 8016f20:	4613      	mov	r3, r2
 8016f22:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016f24:	88fb      	ldrh	r3, [r7, #6]
 8016f26:	2b43      	cmp	r3, #67	; 0x43
 8016f28:	d906      	bls.n	8016f38 <dhcp_option_byte+0x24>
 8016f2a:	4b0a      	ldr	r3, [pc, #40]	; (8016f54 <dhcp_option_byte+0x40>)
 8016f2c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016f30:	4909      	ldr	r1, [pc, #36]	; (8016f58 <dhcp_option_byte+0x44>)
 8016f32:	480a      	ldr	r0, [pc, #40]	; (8016f5c <dhcp_option_byte+0x48>)
 8016f34:	f003 fa46 	bl	801a3c4 <iprintf>
  options[options_out_len++] = value;
 8016f38:	88fb      	ldrh	r3, [r7, #6]
 8016f3a:	1c5a      	adds	r2, r3, #1
 8016f3c:	80fa      	strh	r2, [r7, #6]
 8016f3e:	461a      	mov	r2, r3
 8016f40:	683b      	ldr	r3, [r7, #0]
 8016f42:	4413      	add	r3, r2
 8016f44:	797a      	ldrb	r2, [r7, #5]
 8016f46:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016f48:	88fb      	ldrh	r3, [r7, #6]
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	3708      	adds	r7, #8
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}
 8016f52:	bf00      	nop
 8016f54:	0801e6e4 	.word	0x0801e6e4
 8016f58:	0801e8bc 	.word	0x0801e8bc
 8016f5c:	0801e744 	.word	0x0801e744

08016f60 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b082      	sub	sp, #8
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	4603      	mov	r3, r0
 8016f68:	6039      	str	r1, [r7, #0]
 8016f6a:	80fb      	strh	r3, [r7, #6]
 8016f6c:	4613      	mov	r3, r2
 8016f6e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016f70:	88fb      	ldrh	r3, [r7, #6]
 8016f72:	3302      	adds	r3, #2
 8016f74:	2b44      	cmp	r3, #68	; 0x44
 8016f76:	d906      	bls.n	8016f86 <dhcp_option_short+0x26>
 8016f78:	4b0f      	ldr	r3, [pc, #60]	; (8016fb8 <dhcp_option_short+0x58>)
 8016f7a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8016f7e:	490f      	ldr	r1, [pc, #60]	; (8016fbc <dhcp_option_short+0x5c>)
 8016f80:	480f      	ldr	r0, [pc, #60]	; (8016fc0 <dhcp_option_short+0x60>)
 8016f82:	f003 fa1f 	bl	801a3c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016f86:	88bb      	ldrh	r3, [r7, #4]
 8016f88:	0a1b      	lsrs	r3, r3, #8
 8016f8a:	b29a      	uxth	r2, r3
 8016f8c:	88fb      	ldrh	r3, [r7, #6]
 8016f8e:	1c59      	adds	r1, r3, #1
 8016f90:	80f9      	strh	r1, [r7, #6]
 8016f92:	4619      	mov	r1, r3
 8016f94:	683b      	ldr	r3, [r7, #0]
 8016f96:	440b      	add	r3, r1
 8016f98:	b2d2      	uxtb	r2, r2
 8016f9a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016f9c:	88fb      	ldrh	r3, [r7, #6]
 8016f9e:	1c5a      	adds	r2, r3, #1
 8016fa0:	80fa      	strh	r2, [r7, #6]
 8016fa2:	461a      	mov	r2, r3
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	4413      	add	r3, r2
 8016fa8:	88ba      	ldrh	r2, [r7, #4]
 8016faa:	b2d2      	uxtb	r2, r2
 8016fac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016fae:	88fb      	ldrh	r3, [r7, #6]
}
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	3708      	adds	r7, #8
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	bd80      	pop	{r7, pc}
 8016fb8:	0801e6e4 	.word	0x0801e6e4
 8016fbc:	0801e8f4 	.word	0x0801e8f4
 8016fc0:	0801e744 	.word	0x0801e744

08016fc4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b084      	sub	sp, #16
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	4603      	mov	r3, r0
 8016fcc:	60b9      	str	r1, [r7, #8]
 8016fce:	607a      	str	r2, [r7, #4]
 8016fd0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016fd2:	89fb      	ldrh	r3, [r7, #14]
 8016fd4:	3304      	adds	r3, #4
 8016fd6:	2b44      	cmp	r3, #68	; 0x44
 8016fd8:	d906      	bls.n	8016fe8 <dhcp_option_long+0x24>
 8016fda:	4b19      	ldr	r3, [pc, #100]	; (8017040 <dhcp_option_long+0x7c>)
 8016fdc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8016fe0:	4918      	ldr	r1, [pc, #96]	; (8017044 <dhcp_option_long+0x80>)
 8016fe2:	4819      	ldr	r0, [pc, #100]	; (8017048 <dhcp_option_long+0x84>)
 8016fe4:	f003 f9ee 	bl	801a3c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	0e1a      	lsrs	r2, r3, #24
 8016fec:	89fb      	ldrh	r3, [r7, #14]
 8016fee:	1c59      	adds	r1, r3, #1
 8016ff0:	81f9      	strh	r1, [r7, #14]
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	440b      	add	r3, r1
 8016ff8:	b2d2      	uxtb	r2, r2
 8016ffa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	0c1a      	lsrs	r2, r3, #16
 8017000:	89fb      	ldrh	r3, [r7, #14]
 8017002:	1c59      	adds	r1, r3, #1
 8017004:	81f9      	strh	r1, [r7, #14]
 8017006:	4619      	mov	r1, r3
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	440b      	add	r3, r1
 801700c:	b2d2      	uxtb	r2, r2
 801700e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	0a1a      	lsrs	r2, r3, #8
 8017014:	89fb      	ldrh	r3, [r7, #14]
 8017016:	1c59      	adds	r1, r3, #1
 8017018:	81f9      	strh	r1, [r7, #14]
 801701a:	4619      	mov	r1, r3
 801701c:	68bb      	ldr	r3, [r7, #8]
 801701e:	440b      	add	r3, r1
 8017020:	b2d2      	uxtb	r2, r2
 8017022:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017024:	89fb      	ldrh	r3, [r7, #14]
 8017026:	1c5a      	adds	r2, r3, #1
 8017028:	81fa      	strh	r2, [r7, #14]
 801702a:	461a      	mov	r2, r3
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	4413      	add	r3, r2
 8017030:	687a      	ldr	r2, [r7, #4]
 8017032:	b2d2      	uxtb	r2, r2
 8017034:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017036:	89fb      	ldrh	r3, [r7, #14]
}
 8017038:	4618      	mov	r0, r3
 801703a:	3710      	adds	r7, #16
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}
 8017040:	0801e6e4 	.word	0x0801e6e4
 8017044:	0801e930 	.word	0x0801e930
 8017048:	0801e744 	.word	0x0801e744

0801704c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801704c:	b580      	push	{r7, lr}
 801704e:	b090      	sub	sp, #64	; 0x40
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
 8017054:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8017056:	2300      	movs	r3, #0
 8017058:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801705a:	2300      	movs	r3, #0
 801705c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801705e:	2208      	movs	r2, #8
 8017060:	2100      	movs	r1, #0
 8017062:	48be      	ldr	r0, [pc, #760]	; (801735c <dhcp_parse_reply+0x310>)
 8017064:	f003 f9a5 	bl	801a3b2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	895b      	ldrh	r3, [r3, #10]
 801706c:	2b2b      	cmp	r3, #43	; 0x2b
 801706e:	d802      	bhi.n	8017076 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8017070:	f06f 0301 	mvn.w	r3, #1
 8017074:	e2a8      	b.n	80175c8 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	685b      	ldr	r3, [r3, #4]
 801707a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801707c:	23f0      	movs	r3, #240	; 0xf0
 801707e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	891b      	ldrh	r3, [r3, #8]
 8017084:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801708a:	e00c      	b.n	80170a6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801708e:	895b      	ldrh	r3, [r3, #10]
 8017090:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017092:	1ad3      	subs	r3, r2, r3
 8017094:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8017096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017098:	895b      	ldrh	r3, [r3, #10]
 801709a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801709c:	1ad3      	subs	r3, r2, r3
 801709e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80170a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80170a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d004      	beq.n	80170b6 <dhcp_parse_reply+0x6a>
 80170ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ae:	895b      	ldrh	r3, [r3, #10]
 80170b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80170b2:	429a      	cmp	r2, r3
 80170b4:	d2ea      	bcs.n	801708c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80170b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d102      	bne.n	80170c2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80170bc:	f06f 0301 	mvn.w	r3, #1
 80170c0:	e282      	b.n	80175c8 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80170c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80170c4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80170c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80170c8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80170ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170cc:	685b      	ldr	r3, [r3, #4]
 80170ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80170d0:	e23a      	b.n	8017548 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 80170d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80170d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80170d6:	4413      	add	r3, r2
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80170dc:	2300      	movs	r3, #0
 80170de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80170e2:	f04f 33ff 	mov.w	r3, #4294967295
 80170e6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80170e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80170ea:	3302      	adds	r3, #2
 80170ec:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80170ee:	8bfa      	ldrh	r2, [r7, #30]
 80170f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d202      	bcs.n	80170fc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80170f6:	f06f 0301 	mvn.w	r3, #1
 80170fa:	e265      	b.n	80175c8 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80170fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80170fe:	3301      	adds	r3, #1
 8017100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017102:	8952      	ldrh	r2, [r2, #10]
 8017104:	4293      	cmp	r3, r2
 8017106:	da07      	bge.n	8017118 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8017108:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801710a:	3301      	adds	r3, #1
 801710c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801710e:	4413      	add	r3, r2
 8017110:	781b      	ldrb	r3, [r3, #0]
 8017112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017116:	e00b      	b.n	8017130 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8017118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d004      	beq.n	801712a <dhcp_parse_reply+0xde>
 8017120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	685b      	ldr	r3, [r3, #4]
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	e000      	b.n	801712c <dhcp_parse_reply+0xe0>
 801712a:	2300      	movs	r3, #0
 801712c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8017130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017134:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8017138:	7dfb      	ldrb	r3, [r7, #23]
 801713a:	2b3b      	cmp	r3, #59	; 0x3b
 801713c:	f200 812d 	bhi.w	801739a <dhcp_parse_reply+0x34e>
 8017140:	a201      	add	r2, pc, #4	; (adr r2, 8017148 <dhcp_parse_reply+0xfc>)
 8017142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017146:	bf00      	nop
 8017148:	08017239 	.word	0x08017239
 801714c:	08017249 	.word	0x08017249
 8017150:	0801739b 	.word	0x0801739b
 8017154:	0801726b 	.word	0x0801726b
 8017158:	0801739b 	.word	0x0801739b
 801715c:	0801739b 	.word	0x0801739b
 8017160:	0801739b 	.word	0x0801739b
 8017164:	0801739b 	.word	0x0801739b
 8017168:	0801739b 	.word	0x0801739b
 801716c:	0801739b 	.word	0x0801739b
 8017170:	0801739b 	.word	0x0801739b
 8017174:	0801739b 	.word	0x0801739b
 8017178:	0801739b 	.word	0x0801739b
 801717c:	0801739b 	.word	0x0801739b
 8017180:	0801739b 	.word	0x0801739b
 8017184:	0801739b 	.word	0x0801739b
 8017188:	0801739b 	.word	0x0801739b
 801718c:	0801739b 	.word	0x0801739b
 8017190:	0801739b 	.word	0x0801739b
 8017194:	0801739b 	.word	0x0801739b
 8017198:	0801739b 	.word	0x0801739b
 801719c:	0801739b 	.word	0x0801739b
 80171a0:	0801739b 	.word	0x0801739b
 80171a4:	0801739b 	.word	0x0801739b
 80171a8:	0801739b 	.word	0x0801739b
 80171ac:	0801739b 	.word	0x0801739b
 80171b0:	0801739b 	.word	0x0801739b
 80171b4:	0801739b 	.word	0x0801739b
 80171b8:	0801739b 	.word	0x0801739b
 80171bc:	0801739b 	.word	0x0801739b
 80171c0:	0801739b 	.word	0x0801739b
 80171c4:	0801739b 	.word	0x0801739b
 80171c8:	0801739b 	.word	0x0801739b
 80171cc:	0801739b 	.word	0x0801739b
 80171d0:	0801739b 	.word	0x0801739b
 80171d4:	0801739b 	.word	0x0801739b
 80171d8:	0801739b 	.word	0x0801739b
 80171dc:	0801739b 	.word	0x0801739b
 80171e0:	0801739b 	.word	0x0801739b
 80171e4:	0801739b 	.word	0x0801739b
 80171e8:	0801739b 	.word	0x0801739b
 80171ec:	0801739b 	.word	0x0801739b
 80171f0:	0801739b 	.word	0x0801739b
 80171f4:	0801739b 	.word	0x0801739b
 80171f8:	0801739b 	.word	0x0801739b
 80171fc:	0801739b 	.word	0x0801739b
 8017200:	0801739b 	.word	0x0801739b
 8017204:	0801739b 	.word	0x0801739b
 8017208:	0801739b 	.word	0x0801739b
 801720c:	0801739b 	.word	0x0801739b
 8017210:	0801739b 	.word	0x0801739b
 8017214:	08017297 	.word	0x08017297
 8017218:	080172b9 	.word	0x080172b9
 801721c:	080172f5 	.word	0x080172f5
 8017220:	08017317 	.word	0x08017317
 8017224:	0801739b 	.word	0x0801739b
 8017228:	0801739b 	.word	0x0801739b
 801722c:	0801739b 	.word	0x0801739b
 8017230:	08017339 	.word	0x08017339
 8017234:	08017379 	.word	0x08017379
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017238:	2300      	movs	r3, #0
 801723a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801723e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8017246:	e0ac      	b.n	80173a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801724c:	2b04      	cmp	r3, #4
 801724e:	d009      	beq.n	8017264 <dhcp_parse_reply+0x218>
 8017250:	4b43      	ldr	r3, [pc, #268]	; (8017360 <dhcp_parse_reply+0x314>)
 8017252:	f240 622e 	movw	r2, #1582	; 0x62e
 8017256:	4943      	ldr	r1, [pc, #268]	; (8017364 <dhcp_parse_reply+0x318>)
 8017258:	4843      	ldr	r0, [pc, #268]	; (8017368 <dhcp_parse_reply+0x31c>)
 801725a:	f003 f8b3 	bl	801a3c4 <iprintf>
 801725e:	f06f 0305 	mvn.w	r3, #5
 8017262:	e1b1      	b.n	80175c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8017264:	2306      	movs	r3, #6
 8017266:	623b      	str	r3, [r7, #32]
        break;
 8017268:	e09b      	b.n	80173a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801726a:	2304      	movs	r3, #4
 801726c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8017270:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017274:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017278:	429a      	cmp	r2, r3
 801727a:	d209      	bcs.n	8017290 <dhcp_parse_reply+0x244>
 801727c:	4b38      	ldr	r3, [pc, #224]	; (8017360 <dhcp_parse_reply+0x314>)
 801727e:	f240 6233 	movw	r2, #1587	; 0x633
 8017282:	493a      	ldr	r1, [pc, #232]	; (801736c <dhcp_parse_reply+0x320>)
 8017284:	4838      	ldr	r0, [pc, #224]	; (8017368 <dhcp_parse_reply+0x31c>)
 8017286:	f003 f89d 	bl	801a3c4 <iprintf>
 801728a:	f06f 0305 	mvn.w	r3, #5
 801728e:	e19b      	b.n	80175c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017290:	2307      	movs	r3, #7
 8017292:	623b      	str	r3, [r7, #32]
        break;
 8017294:	e085      	b.n	80173a2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801729a:	2b04      	cmp	r3, #4
 801729c:	d009      	beq.n	80172b2 <dhcp_parse_reply+0x266>
 801729e:	4b30      	ldr	r3, [pc, #192]	; (8017360 <dhcp_parse_reply+0x314>)
 80172a0:	f240 6241 	movw	r2, #1601	; 0x641
 80172a4:	492f      	ldr	r1, [pc, #188]	; (8017364 <dhcp_parse_reply+0x318>)
 80172a6:	4830      	ldr	r0, [pc, #192]	; (8017368 <dhcp_parse_reply+0x31c>)
 80172a8:	f003 f88c 	bl	801a3c4 <iprintf>
 80172ac:	f06f 0305 	mvn.w	r3, #5
 80172b0:	e18a      	b.n	80175c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80172b2:	2303      	movs	r3, #3
 80172b4:	623b      	str	r3, [r7, #32]
        break;
 80172b6:	e074      	b.n	80173a2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80172b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172bc:	2b01      	cmp	r3, #1
 80172be:	d009      	beq.n	80172d4 <dhcp_parse_reply+0x288>
 80172c0:	4b27      	ldr	r3, [pc, #156]	; (8017360 <dhcp_parse_reply+0x314>)
 80172c2:	f240 624f 	movw	r2, #1615	; 0x64f
 80172c6:	492a      	ldr	r1, [pc, #168]	; (8017370 <dhcp_parse_reply+0x324>)
 80172c8:	4827      	ldr	r0, [pc, #156]	; (8017368 <dhcp_parse_reply+0x31c>)
 80172ca:	f003 f87b 	bl	801a3c4 <iprintf>
 80172ce:	f06f 0305 	mvn.w	r3, #5
 80172d2:	e179      	b.n	80175c8 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80172d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80172d6:	2bf0      	cmp	r3, #240	; 0xf0
 80172d8:	d009      	beq.n	80172ee <dhcp_parse_reply+0x2a2>
 80172da:	4b21      	ldr	r3, [pc, #132]	; (8017360 <dhcp_parse_reply+0x314>)
 80172dc:	f240 6251 	movw	r2, #1617	; 0x651
 80172e0:	4924      	ldr	r1, [pc, #144]	; (8017374 <dhcp_parse_reply+0x328>)
 80172e2:	4821      	ldr	r0, [pc, #132]	; (8017368 <dhcp_parse_reply+0x31c>)
 80172e4:	f003 f86e 	bl	801a3c4 <iprintf>
 80172e8:	f06f 0305 	mvn.w	r3, #5
 80172ec:	e16c      	b.n	80175c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80172ee:	2300      	movs	r3, #0
 80172f0:	623b      	str	r3, [r7, #32]
        break;
 80172f2:	e056      	b.n	80173a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80172f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172f8:	2b01      	cmp	r3, #1
 80172fa:	d009      	beq.n	8017310 <dhcp_parse_reply+0x2c4>
 80172fc:	4b18      	ldr	r3, [pc, #96]	; (8017360 <dhcp_parse_reply+0x314>)
 80172fe:	f240 6255 	movw	r2, #1621	; 0x655
 8017302:	491b      	ldr	r1, [pc, #108]	; (8017370 <dhcp_parse_reply+0x324>)
 8017304:	4818      	ldr	r0, [pc, #96]	; (8017368 <dhcp_parse_reply+0x31c>)
 8017306:	f003 f85d 	bl	801a3c4 <iprintf>
 801730a:	f06f 0305 	mvn.w	r3, #5
 801730e:	e15b      	b.n	80175c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017310:	2301      	movs	r3, #1
 8017312:	623b      	str	r3, [r7, #32]
        break;
 8017314:	e045      	b.n	80173a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801731a:	2b04      	cmp	r3, #4
 801731c:	d009      	beq.n	8017332 <dhcp_parse_reply+0x2e6>
 801731e:	4b10      	ldr	r3, [pc, #64]	; (8017360 <dhcp_parse_reply+0x314>)
 8017320:	f240 6259 	movw	r2, #1625	; 0x659
 8017324:	490f      	ldr	r1, [pc, #60]	; (8017364 <dhcp_parse_reply+0x318>)
 8017326:	4810      	ldr	r0, [pc, #64]	; (8017368 <dhcp_parse_reply+0x31c>)
 8017328:	f003 f84c 	bl	801a3c4 <iprintf>
 801732c:	f06f 0305 	mvn.w	r3, #5
 8017330:	e14a      	b.n	80175c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8017332:	2302      	movs	r3, #2
 8017334:	623b      	str	r3, [r7, #32]
        break;
 8017336:	e034      	b.n	80173a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801733c:	2b04      	cmp	r3, #4
 801733e:	d009      	beq.n	8017354 <dhcp_parse_reply+0x308>
 8017340:	4b07      	ldr	r3, [pc, #28]	; (8017360 <dhcp_parse_reply+0x314>)
 8017342:	f240 625d 	movw	r2, #1629	; 0x65d
 8017346:	4907      	ldr	r1, [pc, #28]	; (8017364 <dhcp_parse_reply+0x318>)
 8017348:	4807      	ldr	r0, [pc, #28]	; (8017368 <dhcp_parse_reply+0x31c>)
 801734a:	f003 f83b 	bl	801a3c4 <iprintf>
 801734e:	f06f 0305 	mvn.w	r3, #5
 8017352:	e139      	b.n	80175c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017354:	2304      	movs	r3, #4
 8017356:	623b      	str	r3, [r7, #32]
        break;
 8017358:	e023      	b.n	80173a2 <dhcp_parse_reply+0x356>
 801735a:	bf00      	nop
 801735c:	2000baec 	.word	0x2000baec
 8017360:	0801e6e4 	.word	0x0801e6e4
 8017364:	0801e96c 	.word	0x0801e96c
 8017368:	0801e744 	.word	0x0801e744
 801736c:	0801e978 	.word	0x0801e978
 8017370:	0801e98c 	.word	0x0801e98c
 8017374:	0801e998 	.word	0x0801e998
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801737c:	2b04      	cmp	r3, #4
 801737e:	d009      	beq.n	8017394 <dhcp_parse_reply+0x348>
 8017380:	4b93      	ldr	r3, [pc, #588]	; (80175d0 <dhcp_parse_reply+0x584>)
 8017382:	f240 6261 	movw	r2, #1633	; 0x661
 8017386:	4993      	ldr	r1, [pc, #588]	; (80175d4 <dhcp_parse_reply+0x588>)
 8017388:	4893      	ldr	r0, [pc, #588]	; (80175d8 <dhcp_parse_reply+0x58c>)
 801738a:	f003 f81b 	bl	801a3c4 <iprintf>
 801738e:	f06f 0305 	mvn.w	r3, #5
 8017392:	e119      	b.n	80175c8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8017394:	2305      	movs	r3, #5
 8017396:	623b      	str	r3, [r7, #32]
        break;
 8017398:	e003      	b.n	80173a2 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801739a:	2300      	movs	r3, #0
 801739c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80173a0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80173a2:	7dfb      	ldrb	r3, [r7, #23]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d103      	bne.n	80173b0 <dhcp_parse_reply+0x364>
      offset++;
 80173a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80173aa:	3301      	adds	r3, #1
 80173ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80173ae:	e0a1      	b.n	80174f4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80173b0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80173b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173b6:	4413      	add	r3, r2
 80173b8:	3302      	adds	r3, #2
 80173ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80173be:	db02      	blt.n	80173c6 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80173c0:	f06f 0301 	mvn.w	r3, #1
 80173c4:	e100      	b.n	80175c8 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80173c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173ca:	b29a      	uxth	r2, r3
 80173cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80173ce:	4413      	add	r3, r2
 80173d0:	b29b      	uxth	r3, r3
 80173d2:	3302      	adds	r3, #2
 80173d4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80173d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80173da:	2b00      	cmp	r3, #0
 80173dc:	f000 808a 	beq.w	80174f4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80173e0:	2300      	movs	r3, #0
 80173e2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80173e4:	6a3b      	ldr	r3, [r7, #32]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	db02      	blt.n	80173f0 <dhcp_parse_reply+0x3a4>
 80173ea:	6a3b      	ldr	r3, [r7, #32]
 80173ec:	2b07      	cmp	r3, #7
 80173ee:	dd06      	ble.n	80173fe <dhcp_parse_reply+0x3b2>
 80173f0:	4b77      	ldr	r3, [pc, #476]	; (80175d0 <dhcp_parse_reply+0x584>)
 80173f2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80173f6:	4979      	ldr	r1, [pc, #484]	; (80175dc <dhcp_parse_reply+0x590>)
 80173f8:	4877      	ldr	r0, [pc, #476]	; (80175d8 <dhcp_parse_reply+0x58c>)
 80173fa:	f002 ffe3 	bl	801a3c4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80173fe:	4a78      	ldr	r2, [pc, #480]	; (80175e0 <dhcp_parse_reply+0x594>)
 8017400:	6a3b      	ldr	r3, [r7, #32]
 8017402:	4413      	add	r3, r2
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d174      	bne.n	80174f4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801740a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801740e:	2b04      	cmp	r3, #4
 8017410:	bf28      	it	cs
 8017412:	2304      	movcs	r3, #4
 8017414:	b2db      	uxtb	r3, r3
 8017416:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017418:	8bfb      	ldrh	r3, [r7, #30]
 801741a:	8aba      	ldrh	r2, [r7, #20]
 801741c:	f107 0108 	add.w	r1, r7, #8
 8017420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017422:	f7f7 fc0f 	bl	800ec44 <pbuf_copy_partial>
 8017426:	4603      	mov	r3, r0
 8017428:	461a      	mov	r2, r3
 801742a:	8abb      	ldrh	r3, [r7, #20]
 801742c:	4293      	cmp	r3, r2
 801742e:	d002      	beq.n	8017436 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8017430:	f06f 0301 	mvn.w	r3, #1
 8017434:	e0c8      	b.n	80175c8 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8017436:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801743a:	2b04      	cmp	r3, #4
 801743c:	d933      	bls.n	80174a6 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801743e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017442:	f003 0303 	and.w	r3, r3, #3
 8017446:	b2db      	uxtb	r3, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	d009      	beq.n	8017460 <dhcp_parse_reply+0x414>
 801744c:	4b60      	ldr	r3, [pc, #384]	; (80175d0 <dhcp_parse_reply+0x584>)
 801744e:	f240 6281 	movw	r2, #1665	; 0x681
 8017452:	4964      	ldr	r1, [pc, #400]	; (80175e4 <dhcp_parse_reply+0x598>)
 8017454:	4860      	ldr	r0, [pc, #384]	; (80175d8 <dhcp_parse_reply+0x58c>)
 8017456:	f002 ffb5 	bl	801a3c4 <iprintf>
 801745a:	f06f 0305 	mvn.w	r3, #5
 801745e:	e0b3      	b.n	80175c8 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8017460:	4a5f      	ldr	r2, [pc, #380]	; (80175e0 <dhcp_parse_reply+0x594>)
 8017462:	6a3b      	ldr	r3, [r7, #32]
 8017464:	4413      	add	r3, r2
 8017466:	2201      	movs	r2, #1
 8017468:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801746a:	68bb      	ldr	r3, [r7, #8]
 801746c:	4618      	mov	r0, r3
 801746e:	f7f5 fe0c 	bl	800d08a <lwip_htonl>
 8017472:	4601      	mov	r1, r0
 8017474:	4a5c      	ldr	r2, [pc, #368]	; (80175e8 <dhcp_parse_reply+0x59c>)
 8017476:	6a3b      	ldr	r3, [r7, #32]
 8017478:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801747c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017480:	3b04      	subs	r3, #4
 8017482:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8017486:	8bfb      	ldrh	r3, [r7, #30]
 8017488:	3304      	adds	r3, #4
 801748a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801748c:	8a7a      	ldrh	r2, [r7, #18]
 801748e:	8bfb      	ldrh	r3, [r7, #30]
 8017490:	429a      	cmp	r2, r3
 8017492:	d202      	bcs.n	801749a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8017494:	f06f 0301 	mvn.w	r3, #1
 8017498:	e096      	b.n	80175c8 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801749a:	8a7b      	ldrh	r3, [r7, #18]
 801749c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801749e:	6a3b      	ldr	r3, [r7, #32]
 80174a0:	3301      	adds	r3, #1
 80174a2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80174a4:	e79e      	b.n	80173e4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80174a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80174aa:	2b04      	cmp	r3, #4
 80174ac:	d106      	bne.n	80174bc <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80174ae:	68bb      	ldr	r3, [r7, #8]
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7f5 fdea 	bl	800d08a <lwip_htonl>
 80174b6:	4603      	mov	r3, r0
 80174b8:	60bb      	str	r3, [r7, #8]
 80174ba:	e011      	b.n	80174e0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80174bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80174c0:	2b01      	cmp	r3, #1
 80174c2:	d009      	beq.n	80174d8 <dhcp_parse_reply+0x48c>
 80174c4:	4b42      	ldr	r3, [pc, #264]	; (80175d0 <dhcp_parse_reply+0x584>)
 80174c6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80174ca:	4948      	ldr	r1, [pc, #288]	; (80175ec <dhcp_parse_reply+0x5a0>)
 80174cc:	4842      	ldr	r0, [pc, #264]	; (80175d8 <dhcp_parse_reply+0x58c>)
 80174ce:	f002 ff79 	bl	801a3c4 <iprintf>
 80174d2:	f06f 0305 	mvn.w	r3, #5
 80174d6:	e077      	b.n	80175c8 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80174d8:	f107 0308 	add.w	r3, r7, #8
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80174e0:	4a3f      	ldr	r2, [pc, #252]	; (80175e0 <dhcp_parse_reply+0x594>)
 80174e2:	6a3b      	ldr	r3, [r7, #32]
 80174e4:	4413      	add	r3, r2
 80174e6:	2201      	movs	r2, #1
 80174e8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80174ea:	68ba      	ldr	r2, [r7, #8]
 80174ec:	493e      	ldr	r1, [pc, #248]	; (80175e8 <dhcp_parse_reply+0x59c>)
 80174ee:	6a3b      	ldr	r3, [r7, #32]
 80174f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80174f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f6:	895b      	ldrh	r3, [r3, #10]
 80174f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80174fa:	429a      	cmp	r2, r3
 80174fc:	d324      	bcc.n	8017548 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80174fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017500:	895b      	ldrh	r3, [r3, #10]
 8017502:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017504:	1ad3      	subs	r3, r2, r3
 8017506:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8017508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801750a:	895b      	ldrh	r3, [r3, #10]
 801750c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801750e:	1ad3      	subs	r3, r2, r3
 8017510:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8017512:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017514:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017516:	429a      	cmp	r2, r3
 8017518:	d213      	bcs.n	8017542 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017522:	2b00      	cmp	r3, #0
 8017524:	d109      	bne.n	801753a <dhcp_parse_reply+0x4ee>
 8017526:	4b2a      	ldr	r3, [pc, #168]	; (80175d0 <dhcp_parse_reply+0x584>)
 8017528:	f240 629d 	movw	r2, #1693	; 0x69d
 801752c:	4930      	ldr	r1, [pc, #192]	; (80175f0 <dhcp_parse_reply+0x5a4>)
 801752e:	482a      	ldr	r0, [pc, #168]	; (80175d8 <dhcp_parse_reply+0x58c>)
 8017530:	f002 ff48 	bl	801a3c4 <iprintf>
 8017534:	f06f 0305 	mvn.w	r3, #5
 8017538:	e046      	b.n	80175c8 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801753c:	685b      	ldr	r3, [r3, #4]
 801753e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017540:	e002      	b.n	8017548 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017542:	f06f 0301 	mvn.w	r3, #1
 8017546:	e03f      	b.n	80175c8 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801754a:	2b00      	cmp	r3, #0
 801754c:	d00a      	beq.n	8017564 <dhcp_parse_reply+0x518>
 801754e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017550:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017552:	429a      	cmp	r2, r3
 8017554:	d206      	bcs.n	8017564 <dhcp_parse_reply+0x518>
 8017556:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801755a:	4413      	add	r3, r2
 801755c:	781b      	ldrb	r3, [r3, #0]
 801755e:	2bff      	cmp	r3, #255	; 0xff
 8017560:	f47f adb7 	bne.w	80170d2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017564:	4b1e      	ldr	r3, [pc, #120]	; (80175e0 <dhcp_parse_reply+0x594>)
 8017566:	781b      	ldrb	r3, [r3, #0]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d018      	beq.n	801759e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801756c:	4b1e      	ldr	r3, [pc, #120]	; (80175e8 <dhcp_parse_reply+0x59c>)
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017572:	4b1b      	ldr	r3, [pc, #108]	; (80175e0 <dhcp_parse_reply+0x594>)
 8017574:	2200      	movs	r2, #0
 8017576:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	2b01      	cmp	r3, #1
 801757c:	d102      	bne.n	8017584 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801757e:	2301      	movs	r3, #1
 8017580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017582:	e00c      	b.n	801759e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	2b02      	cmp	r3, #2
 8017588:	d102      	bne.n	8017590 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801758a:	2301      	movs	r3, #1
 801758c:	62bb      	str	r3, [r7, #40]	; 0x28
 801758e:	e006      	b.n	801759e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	2b03      	cmp	r3, #3
 8017594:	d103      	bne.n	801759e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8017596:	2301      	movs	r3, #1
 8017598:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801759a:	2301      	movs	r3, #1
 801759c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d006      	beq.n	80175b2 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80175a4:	2300      	movs	r3, #0
 80175a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80175a8:	236c      	movs	r3, #108	; 0x6c
 80175aa:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80175ac:	23ec      	movs	r3, #236	; 0xec
 80175ae:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80175b0:	e569      	b.n	8017086 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80175b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d006      	beq.n	80175c6 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80175b8:	2300      	movs	r3, #0
 80175ba:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80175bc:	232c      	movs	r3, #44	; 0x2c
 80175be:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80175c0:	236c      	movs	r3, #108	; 0x6c
 80175c2:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80175c4:	e55f      	b.n	8017086 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80175c6:	2300      	movs	r3, #0
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	3740      	adds	r7, #64	; 0x40
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd80      	pop	{r7, pc}
 80175d0:	0801e6e4 	.word	0x0801e6e4
 80175d4:	0801e96c 	.word	0x0801e96c
 80175d8:	0801e744 	.word	0x0801e744
 80175dc:	0801e9b0 	.word	0x0801e9b0
 80175e0:	2000baec 	.word	0x2000baec
 80175e4:	0801e9c4 	.word	0x0801e9c4
 80175e8:	2000baf4 	.word	0x2000baf4
 80175ec:	0801e9dc 	.word	0x0801e9dc
 80175f0:	0801e9f0 	.word	0x0801e9f0

080175f4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b08a      	sub	sp, #40	; 0x28
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	60f8      	str	r0, [r7, #12]
 80175fc:	60b9      	str	r1, [r7, #8]
 80175fe:	607a      	str	r2, [r7, #4]
 8017600:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8017602:	4b5f      	ldr	r3, [pc, #380]	; (8017780 <dhcp_recv+0x18c>)
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017608:	6a3b      	ldr	r3, [r7, #32]
 801760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801760c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	685b      	ldr	r3, [r3, #4]
 8017612:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017614:	69fb      	ldr	r3, [r7, #28]
 8017616:	2b00      	cmp	r3, #0
 8017618:	f000 809d 	beq.w	8017756 <dhcp_recv+0x162>
 801761c:	69fb      	ldr	r3, [r7, #28]
 801761e:	791b      	ldrb	r3, [r3, #4]
 8017620:	2b00      	cmp	r3, #0
 8017622:	f000 8098 	beq.w	8017756 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	895b      	ldrh	r3, [r3, #10]
 801762a:	2b2b      	cmp	r3, #43	; 0x2b
 801762c:	f240 8095 	bls.w	801775a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017630:	69bb      	ldr	r3, [r7, #24]
 8017632:	781b      	ldrb	r3, [r3, #0]
 8017634:	2b02      	cmp	r3, #2
 8017636:	f040 8092 	bne.w	801775e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801763a:	2300      	movs	r3, #0
 801763c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017640:	e012      	b.n	8017668 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017646:	6a3a      	ldr	r2, [r7, #32]
 8017648:	4413      	add	r3, r2
 801764a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801764e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017652:	69b9      	ldr	r1, [r7, #24]
 8017654:	440b      	add	r3, r1
 8017656:	7f1b      	ldrb	r3, [r3, #28]
 8017658:	429a      	cmp	r2, r3
 801765a:	f040 8082 	bne.w	8017762 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801765e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017662:	3301      	adds	r3, #1
 8017664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017668:	6a3b      	ldr	r3, [r7, #32]
 801766a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801766e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017672:	429a      	cmp	r2, r3
 8017674:	d203      	bcs.n	801767e <dhcp_recv+0x8a>
 8017676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801767a:	2b05      	cmp	r3, #5
 801767c:	d9e1      	bls.n	8017642 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801767e:	69bb      	ldr	r3, [r7, #24]
 8017680:	685b      	ldr	r3, [r3, #4]
 8017682:	4618      	mov	r0, r3
 8017684:	f7f5 fd01 	bl	800d08a <lwip_htonl>
 8017688:	4602      	mov	r2, r0
 801768a:	69fb      	ldr	r3, [r7, #28]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	429a      	cmp	r2, r3
 8017690:	d169      	bne.n	8017766 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017692:	69f9      	ldr	r1, [r7, #28]
 8017694:	6878      	ldr	r0, [r7, #4]
 8017696:	f7ff fcd9 	bl	801704c <dhcp_parse_reply>
 801769a:	4603      	mov	r3, r0
 801769c:	2b00      	cmp	r3, #0
 801769e:	d164      	bne.n	801776a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80176a0:	4b38      	ldr	r3, [pc, #224]	; (8017784 <dhcp_recv+0x190>)
 80176a2:	785b      	ldrb	r3, [r3, #1]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d062      	beq.n	801776e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	685b      	ldr	r3, [r3, #4]
 80176ac:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80176ae:	4b36      	ldr	r3, [pc, #216]	; (8017788 <dhcp_recv+0x194>)
 80176b0:	685b      	ldr	r3, [r3, #4]
 80176b2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80176b4:	7cfb      	ldrb	r3, [r7, #19]
 80176b6:	2b05      	cmp	r3, #5
 80176b8:	d12a      	bne.n	8017710 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80176ba:	69fb      	ldr	r3, [r7, #28]
 80176bc:	795b      	ldrb	r3, [r3, #5]
 80176be:	2b01      	cmp	r3, #1
 80176c0:	d112      	bne.n	80176e8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80176c2:	6979      	ldr	r1, [r7, #20]
 80176c4:	6a38      	ldr	r0, [r7, #32]
 80176c6:	f7fe fe05 	bl	80162d4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80176ca:	6a3b      	ldr	r3, [r7, #32]
 80176cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80176d0:	f003 0308 	and.w	r3, r3, #8
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d003      	beq.n	80176e0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80176d8:	6a38      	ldr	r0, [r7, #32]
 80176da:	f7fe fb75 	bl	8015dc8 <dhcp_check>
 80176de:	e047      	b.n	8017770 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80176e0:	6a38      	ldr	r0, [r7, #32]
 80176e2:	f7ff f867 	bl	80167b4 <dhcp_bind>
 80176e6:	e043      	b.n	8017770 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80176e8:	69fb      	ldr	r3, [r7, #28]
 80176ea:	795b      	ldrb	r3, [r3, #5]
 80176ec:	2b03      	cmp	r3, #3
 80176ee:	d007      	beq.n	8017700 <dhcp_recv+0x10c>
 80176f0:	69fb      	ldr	r3, [r7, #28]
 80176f2:	795b      	ldrb	r3, [r3, #5]
 80176f4:	2b04      	cmp	r3, #4
 80176f6:	d003      	beq.n	8017700 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80176f8:	69fb      	ldr	r3, [r7, #28]
 80176fa:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80176fc:	2b05      	cmp	r3, #5
 80176fe:	d137      	bne.n	8017770 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8017700:	6979      	ldr	r1, [r7, #20]
 8017702:	6a38      	ldr	r0, [r7, #32]
 8017704:	f7fe fde6 	bl	80162d4 <dhcp_handle_ack>
      dhcp_bind(netif);
 8017708:	6a38      	ldr	r0, [r7, #32]
 801770a:	f7ff f853 	bl	80167b4 <dhcp_bind>
 801770e:	e02f      	b.n	8017770 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017710:	7cfb      	ldrb	r3, [r7, #19]
 8017712:	2b06      	cmp	r3, #6
 8017714:	d113      	bne.n	801773e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017716:	69fb      	ldr	r3, [r7, #28]
 8017718:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801771a:	2b03      	cmp	r3, #3
 801771c:	d00b      	beq.n	8017736 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801771e:	69fb      	ldr	r3, [r7, #28]
 8017720:	795b      	ldrb	r3, [r3, #5]
 8017722:	2b01      	cmp	r3, #1
 8017724:	d007      	beq.n	8017736 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017726:	69fb      	ldr	r3, [r7, #28]
 8017728:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801772a:	2b04      	cmp	r3, #4
 801772c:	d003      	beq.n	8017736 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801772e:	69fb      	ldr	r3, [r7, #28]
 8017730:	795b      	ldrb	r3, [r3, #5]
 8017732:	2b05      	cmp	r3, #5
 8017734:	d103      	bne.n	801773e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8017736:	6a38      	ldr	r0, [r7, #32]
 8017738:	f7fe fb2c 	bl	8015d94 <dhcp_handle_nak>
 801773c:	e018      	b.n	8017770 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801773e:	7cfb      	ldrb	r3, [r7, #19]
 8017740:	2b02      	cmp	r3, #2
 8017742:	d108      	bne.n	8017756 <dhcp_recv+0x162>
 8017744:	69fb      	ldr	r3, [r7, #28]
 8017746:	795b      	ldrb	r3, [r3, #5]
 8017748:	2b06      	cmp	r3, #6
 801774a:	d104      	bne.n	8017756 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801774c:	6979      	ldr	r1, [r7, #20]
 801774e:	6a38      	ldr	r0, [r7, #32]
 8017750:	f7fe fb6e 	bl	8015e30 <dhcp_handle_offer>
 8017754:	e00c      	b.n	8017770 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8017756:	bf00      	nop
 8017758:	e00a      	b.n	8017770 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801775a:	bf00      	nop
 801775c:	e008      	b.n	8017770 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801775e:	bf00      	nop
 8017760:	e006      	b.n	8017770 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8017762:	bf00      	nop
 8017764:	e004      	b.n	8017770 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8017766:	bf00      	nop
 8017768:	e002      	b.n	8017770 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801776a:	bf00      	nop
 801776c:	e000      	b.n	8017770 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801776e:	bf00      	nop
  pbuf_free(p);
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f7f7 f861 	bl	800e838 <pbuf_free>
}
 8017776:	bf00      	nop
 8017778:	3728      	adds	r7, #40	; 0x28
 801777a:	46bd      	mov	sp, r7
 801777c:	bd80      	pop	{r7, pc}
 801777e:	bf00      	nop
 8017780:	2000839c 	.word	0x2000839c
 8017784:	2000baec 	.word	0x2000baec
 8017788:	2000baf4 	.word	0x2000baf4

0801778c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b088      	sub	sp, #32
 8017790:	af00      	add	r7, sp, #0
 8017792:	60f8      	str	r0, [r7, #12]
 8017794:	60b9      	str	r1, [r7, #8]
 8017796:	603b      	str	r3, [r7, #0]
 8017798:	4613      	mov	r3, r2
 801779a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d108      	bne.n	80177b4 <dhcp_create_msg+0x28>
 80177a2:	4b5f      	ldr	r3, [pc, #380]	; (8017920 <dhcp_create_msg+0x194>)
 80177a4:	f240 7269 	movw	r2, #1897	; 0x769
 80177a8:	495e      	ldr	r1, [pc, #376]	; (8017924 <dhcp_create_msg+0x198>)
 80177aa:	485f      	ldr	r0, [pc, #380]	; (8017928 <dhcp_create_msg+0x19c>)
 80177ac:	f002 fe0a 	bl	801a3c4 <iprintf>
 80177b0:	2300      	movs	r3, #0
 80177b2:	e0b1      	b.n	8017918 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d108      	bne.n	80177cc <dhcp_create_msg+0x40>
 80177ba:	4b59      	ldr	r3, [pc, #356]	; (8017920 <dhcp_create_msg+0x194>)
 80177bc:	f240 726a 	movw	r2, #1898	; 0x76a
 80177c0:	495a      	ldr	r1, [pc, #360]	; (801792c <dhcp_create_msg+0x1a0>)
 80177c2:	4859      	ldr	r0, [pc, #356]	; (8017928 <dhcp_create_msg+0x19c>)
 80177c4:	f002 fdfe 	bl	801a3c4 <iprintf>
 80177c8:	2300      	movs	r3, #0
 80177ca:	e0a5      	b.n	8017918 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80177cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80177d0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80177d4:	2036      	movs	r0, #54	; 0x36
 80177d6:	f7f6 fd4f 	bl	800e278 <pbuf_alloc>
 80177da:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80177dc:	69bb      	ldr	r3, [r7, #24]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d101      	bne.n	80177e6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80177e2:	2300      	movs	r3, #0
 80177e4:	e098      	b.n	8017918 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80177e6:	69bb      	ldr	r3, [r7, #24]
 80177e8:	895b      	ldrh	r3, [r3, #10]
 80177ea:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80177ee:	d206      	bcs.n	80177fe <dhcp_create_msg+0x72>
 80177f0:	4b4b      	ldr	r3, [pc, #300]	; (8017920 <dhcp_create_msg+0x194>)
 80177f2:	f240 7272 	movw	r2, #1906	; 0x772
 80177f6:	494e      	ldr	r1, [pc, #312]	; (8017930 <dhcp_create_msg+0x1a4>)
 80177f8:	484b      	ldr	r0, [pc, #300]	; (8017928 <dhcp_create_msg+0x19c>)
 80177fa:	f002 fde3 	bl	801a3c4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80177fe:	79fb      	ldrb	r3, [r7, #7]
 8017800:	2b03      	cmp	r3, #3
 8017802:	d103      	bne.n	801780c <dhcp_create_msg+0x80>
 8017804:	68bb      	ldr	r3, [r7, #8]
 8017806:	795b      	ldrb	r3, [r3, #5]
 8017808:	2b03      	cmp	r3, #3
 801780a:	d10d      	bne.n	8017828 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801780c:	68bb      	ldr	r3, [r7, #8]
 801780e:	799b      	ldrb	r3, [r3, #6]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d105      	bne.n	8017820 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017814:	f002 fe52 	bl	801a4bc <rand>
 8017818:	4603      	mov	r3, r0
 801781a:	461a      	mov	r2, r3
 801781c:	4b45      	ldr	r3, [pc, #276]	; (8017934 <dhcp_create_msg+0x1a8>)
 801781e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017820:	4b44      	ldr	r3, [pc, #272]	; (8017934 <dhcp_create_msg+0x1a8>)
 8017822:	681a      	ldr	r2, [r3, #0]
 8017824:	68bb      	ldr	r3, [r7, #8]
 8017826:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017828:	69bb      	ldr	r3, [r7, #24]
 801782a:	685b      	ldr	r3, [r3, #4]
 801782c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801782e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8017832:	2100      	movs	r1, #0
 8017834:	6978      	ldr	r0, [r7, #20]
 8017836:	f002 fdbc 	bl	801a3b2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801783a:	697b      	ldr	r3, [r7, #20]
 801783c:	2201      	movs	r2, #1
 801783e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017840:	697b      	ldr	r3, [r7, #20]
 8017842:	2201      	movs	r2, #1
 8017844:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801784c:	697b      	ldr	r3, [r7, #20]
 801784e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017850:	68bb      	ldr	r3, [r7, #8]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	4618      	mov	r0, r3
 8017856:	f7f5 fc18 	bl	800d08a <lwip_htonl>
 801785a:	4602      	mov	r2, r0
 801785c:	697b      	ldr	r3, [r7, #20]
 801785e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017860:	79fb      	ldrb	r3, [r7, #7]
 8017862:	2b08      	cmp	r3, #8
 8017864:	d010      	beq.n	8017888 <dhcp_create_msg+0xfc>
 8017866:	79fb      	ldrb	r3, [r7, #7]
 8017868:	2b04      	cmp	r3, #4
 801786a:	d00d      	beq.n	8017888 <dhcp_create_msg+0xfc>
 801786c:	79fb      	ldrb	r3, [r7, #7]
 801786e:	2b07      	cmp	r3, #7
 8017870:	d00a      	beq.n	8017888 <dhcp_create_msg+0xfc>
 8017872:	79fb      	ldrb	r3, [r7, #7]
 8017874:	2b03      	cmp	r3, #3
 8017876:	d10c      	bne.n	8017892 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017878:	68bb      	ldr	r3, [r7, #8]
 801787a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801787c:	2b05      	cmp	r3, #5
 801787e:	d003      	beq.n	8017888 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017880:	68bb      	ldr	r3, [r7, #8]
 8017882:	795b      	ldrb	r3, [r3, #5]
 8017884:	2b04      	cmp	r3, #4
 8017886:	d104      	bne.n	8017892 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	3304      	adds	r3, #4
 801788c:	681a      	ldr	r2, [r3, #0]
 801788e:	697b      	ldr	r3, [r7, #20]
 8017890:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017892:	2300      	movs	r3, #0
 8017894:	83fb      	strh	r3, [r7, #30]
 8017896:	e00c      	b.n	80178b2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8017898:	8bfa      	ldrh	r2, [r7, #30]
 801789a:	8bfb      	ldrh	r3, [r7, #30]
 801789c:	68f9      	ldr	r1, [r7, #12]
 801789e:	440a      	add	r2, r1
 80178a0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80178a4:	697a      	ldr	r2, [r7, #20]
 80178a6:	4413      	add	r3, r2
 80178a8:	460a      	mov	r2, r1
 80178aa:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80178ac:	8bfb      	ldrh	r3, [r7, #30]
 80178ae:	3301      	adds	r3, #1
 80178b0:	83fb      	strh	r3, [r7, #30]
 80178b2:	8bfb      	ldrh	r3, [r7, #30]
 80178b4:	2b05      	cmp	r3, #5
 80178b6:	d9ef      	bls.n	8017898 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80178b8:	697b      	ldr	r3, [r7, #20]
 80178ba:	2200      	movs	r2, #0
 80178bc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80178c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80178c4:	2200      	movs	r2, #0
 80178c6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80178ca:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80178ce:	2200      	movs	r2, #0
 80178d0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80178d4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80178d8:	2200      	movs	r2, #0
 80178da:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80178de:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80178e2:	697b      	ldr	r3, [r7, #20]
 80178e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80178e8:	2301      	movs	r3, #1
 80178ea:	2235      	movs	r2, #53	; 0x35
 80178ec:	2000      	movs	r0, #0
 80178ee:	f7ff fadd 	bl	8016eac <dhcp_option>
 80178f2:	4603      	mov	r3, r0
 80178f4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80178f6:	697b      	ldr	r3, [r7, #20]
 80178f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80178fc:	79fa      	ldrb	r2, [r7, #7]
 80178fe:	8a7b      	ldrh	r3, [r7, #18]
 8017900:	4618      	mov	r0, r3
 8017902:	f7ff fb07 	bl	8016f14 <dhcp_option_byte>
 8017906:	4603      	mov	r3, r0
 8017908:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801790a:	683b      	ldr	r3, [r7, #0]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d002      	beq.n	8017916 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8017910:	683b      	ldr	r3, [r7, #0]
 8017912:	8a7a      	ldrh	r2, [r7, #18]
 8017914:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8017916:	69bb      	ldr	r3, [r7, #24]
}
 8017918:	4618      	mov	r0, r3
 801791a:	3720      	adds	r7, #32
 801791c:	46bd      	mov	sp, r7
 801791e:	bd80      	pop	{r7, pc}
 8017920:	0801e6e4 	.word	0x0801e6e4
 8017924:	0801ea04 	.word	0x0801ea04
 8017928:	0801e744 	.word	0x0801e744
 801792c:	0801ea24 	.word	0x0801ea24
 8017930:	0801ea44 	.word	0x0801ea44
 8017934:	20004c04 	.word	0x20004c04

08017938 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b084      	sub	sp, #16
 801793c:	af00      	add	r7, sp, #0
 801793e:	4603      	mov	r3, r0
 8017940:	60b9      	str	r1, [r7, #8]
 8017942:	607a      	str	r2, [r7, #4]
 8017944:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8017946:	89fb      	ldrh	r3, [r7, #14]
 8017948:	1c5a      	adds	r2, r3, #1
 801794a:	81fa      	strh	r2, [r7, #14]
 801794c:	461a      	mov	r2, r3
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	4413      	add	r3, r2
 8017952:	22ff      	movs	r2, #255	; 0xff
 8017954:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017956:	e007      	b.n	8017968 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8017958:	89fb      	ldrh	r3, [r7, #14]
 801795a:	1c5a      	adds	r2, r3, #1
 801795c:	81fa      	strh	r2, [r7, #14]
 801795e:	461a      	mov	r2, r3
 8017960:	68bb      	ldr	r3, [r7, #8]
 8017962:	4413      	add	r3, r2
 8017964:	2200      	movs	r2, #0
 8017966:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017968:	89fb      	ldrh	r3, [r7, #14]
 801796a:	2b43      	cmp	r3, #67	; 0x43
 801796c:	d904      	bls.n	8017978 <dhcp_option_trailer+0x40>
 801796e:	89fb      	ldrh	r3, [r7, #14]
 8017970:	f003 0303 	and.w	r3, r3, #3
 8017974:	2b00      	cmp	r3, #0
 8017976:	d002      	beq.n	801797e <dhcp_option_trailer+0x46>
 8017978:	89fb      	ldrh	r3, [r7, #14]
 801797a:	2b43      	cmp	r3, #67	; 0x43
 801797c:	d9ec      	bls.n	8017958 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801797e:	89fb      	ldrh	r3, [r7, #14]
 8017980:	33f0      	adds	r3, #240	; 0xf0
 8017982:	b29b      	uxth	r3, r3
 8017984:	4619      	mov	r1, r3
 8017986:	6878      	ldr	r0, [r7, #4]
 8017988:	f7f6 fdd0 	bl	800e52c <pbuf_realloc>
}
 801798c:	bf00      	nop
 801798e:	3710      	adds	r7, #16
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}

08017994 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8017994:	b480      	push	{r7}
 8017996:	b085      	sub	sp, #20
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d017      	beq.n	80179d2 <dhcp_supplied_address+0x3e>
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d013      	beq.n	80179d2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179ae:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	795b      	ldrb	r3, [r3, #5]
 80179b4:	2b0a      	cmp	r3, #10
 80179b6:	d007      	beq.n	80179c8 <dhcp_supplied_address+0x34>
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	795b      	ldrb	r3, [r3, #5]
 80179bc:	2b05      	cmp	r3, #5
 80179be:	d003      	beq.n	80179c8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80179c4:	2b04      	cmp	r3, #4
 80179c6:	d101      	bne.n	80179cc <dhcp_supplied_address+0x38>
 80179c8:	2301      	movs	r3, #1
 80179ca:	e000      	b.n	80179ce <dhcp_supplied_address+0x3a>
 80179cc:	2300      	movs	r3, #0
 80179ce:	b2db      	uxtb	r3, r3
 80179d0:	e000      	b.n	80179d4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80179d2:	2300      	movs	r3, #0
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3714      	adds	r7, #20
 80179d8:	46bd      	mov	sp, r7
 80179da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179de:	4770      	bx	lr

080179e0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80179e8:	4915      	ldr	r1, [pc, #84]	; (8017a40 <etharp_free_entry+0x60>)
 80179ea:	687a      	ldr	r2, [r7, #4]
 80179ec:	4613      	mov	r3, r2
 80179ee:	005b      	lsls	r3, r3, #1
 80179f0:	4413      	add	r3, r2
 80179f2:	00db      	lsls	r3, r3, #3
 80179f4:	440b      	add	r3, r1
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d013      	beq.n	8017a24 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80179fc:	4910      	ldr	r1, [pc, #64]	; (8017a40 <etharp_free_entry+0x60>)
 80179fe:	687a      	ldr	r2, [r7, #4]
 8017a00:	4613      	mov	r3, r2
 8017a02:	005b      	lsls	r3, r3, #1
 8017a04:	4413      	add	r3, r2
 8017a06:	00db      	lsls	r3, r3, #3
 8017a08:	440b      	add	r3, r1
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f7f6 ff13 	bl	800e838 <pbuf_free>
    arp_table[i].q = NULL;
 8017a12:	490b      	ldr	r1, [pc, #44]	; (8017a40 <etharp_free_entry+0x60>)
 8017a14:	687a      	ldr	r2, [r7, #4]
 8017a16:	4613      	mov	r3, r2
 8017a18:	005b      	lsls	r3, r3, #1
 8017a1a:	4413      	add	r3, r2
 8017a1c:	00db      	lsls	r3, r3, #3
 8017a1e:	440b      	add	r3, r1
 8017a20:	2200      	movs	r2, #0
 8017a22:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017a24:	4906      	ldr	r1, [pc, #24]	; (8017a40 <etharp_free_entry+0x60>)
 8017a26:	687a      	ldr	r2, [r7, #4]
 8017a28:	4613      	mov	r3, r2
 8017a2a:	005b      	lsls	r3, r3, #1
 8017a2c:	4413      	add	r3, r2
 8017a2e:	00db      	lsls	r3, r3, #3
 8017a30:	440b      	add	r3, r1
 8017a32:	3314      	adds	r3, #20
 8017a34:	2200      	movs	r2, #0
 8017a36:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017a38:	bf00      	nop
 8017a3a:	3708      	adds	r7, #8
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	20004c08 	.word	0x20004c08

08017a44 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b082      	sub	sp, #8
 8017a48:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	607b      	str	r3, [r7, #4]
 8017a4e:	e096      	b.n	8017b7e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017a50:	494f      	ldr	r1, [pc, #316]	; (8017b90 <etharp_tmr+0x14c>)
 8017a52:	687a      	ldr	r2, [r7, #4]
 8017a54:	4613      	mov	r3, r2
 8017a56:	005b      	lsls	r3, r3, #1
 8017a58:	4413      	add	r3, r2
 8017a5a:	00db      	lsls	r3, r3, #3
 8017a5c:	440b      	add	r3, r1
 8017a5e:	3314      	adds	r3, #20
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017a64:	78fb      	ldrb	r3, [r7, #3]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	f000 8086 	beq.w	8017b78 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017a6c:	4948      	ldr	r1, [pc, #288]	; (8017b90 <etharp_tmr+0x14c>)
 8017a6e:	687a      	ldr	r2, [r7, #4]
 8017a70:	4613      	mov	r3, r2
 8017a72:	005b      	lsls	r3, r3, #1
 8017a74:	4413      	add	r3, r2
 8017a76:	00db      	lsls	r3, r3, #3
 8017a78:	440b      	add	r3, r1
 8017a7a:	3312      	adds	r3, #18
 8017a7c:	881b      	ldrh	r3, [r3, #0]
 8017a7e:	3301      	adds	r3, #1
 8017a80:	b298      	uxth	r0, r3
 8017a82:	4943      	ldr	r1, [pc, #268]	; (8017b90 <etharp_tmr+0x14c>)
 8017a84:	687a      	ldr	r2, [r7, #4]
 8017a86:	4613      	mov	r3, r2
 8017a88:	005b      	lsls	r3, r3, #1
 8017a8a:	4413      	add	r3, r2
 8017a8c:	00db      	lsls	r3, r3, #3
 8017a8e:	440b      	add	r3, r1
 8017a90:	3312      	adds	r3, #18
 8017a92:	4602      	mov	r2, r0
 8017a94:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017a96:	493e      	ldr	r1, [pc, #248]	; (8017b90 <etharp_tmr+0x14c>)
 8017a98:	687a      	ldr	r2, [r7, #4]
 8017a9a:	4613      	mov	r3, r2
 8017a9c:	005b      	lsls	r3, r3, #1
 8017a9e:	4413      	add	r3, r2
 8017aa0:	00db      	lsls	r3, r3, #3
 8017aa2:	440b      	add	r3, r1
 8017aa4:	3312      	adds	r3, #18
 8017aa6:	881b      	ldrh	r3, [r3, #0]
 8017aa8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017aac:	d215      	bcs.n	8017ada <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017aae:	4938      	ldr	r1, [pc, #224]	; (8017b90 <etharp_tmr+0x14c>)
 8017ab0:	687a      	ldr	r2, [r7, #4]
 8017ab2:	4613      	mov	r3, r2
 8017ab4:	005b      	lsls	r3, r3, #1
 8017ab6:	4413      	add	r3, r2
 8017ab8:	00db      	lsls	r3, r3, #3
 8017aba:	440b      	add	r3, r1
 8017abc:	3314      	adds	r3, #20
 8017abe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017ac0:	2b01      	cmp	r3, #1
 8017ac2:	d10e      	bne.n	8017ae2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017ac4:	4932      	ldr	r1, [pc, #200]	; (8017b90 <etharp_tmr+0x14c>)
 8017ac6:	687a      	ldr	r2, [r7, #4]
 8017ac8:	4613      	mov	r3, r2
 8017aca:	005b      	lsls	r3, r3, #1
 8017acc:	4413      	add	r3, r2
 8017ace:	00db      	lsls	r3, r3, #3
 8017ad0:	440b      	add	r3, r1
 8017ad2:	3312      	adds	r3, #18
 8017ad4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017ad6:	2b04      	cmp	r3, #4
 8017ad8:	d903      	bls.n	8017ae2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	f7ff ff80 	bl	80179e0 <etharp_free_entry>
 8017ae0:	e04a      	b.n	8017b78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017ae2:	492b      	ldr	r1, [pc, #172]	; (8017b90 <etharp_tmr+0x14c>)
 8017ae4:	687a      	ldr	r2, [r7, #4]
 8017ae6:	4613      	mov	r3, r2
 8017ae8:	005b      	lsls	r3, r3, #1
 8017aea:	4413      	add	r3, r2
 8017aec:	00db      	lsls	r3, r3, #3
 8017aee:	440b      	add	r3, r1
 8017af0:	3314      	adds	r3, #20
 8017af2:	781b      	ldrb	r3, [r3, #0]
 8017af4:	2b03      	cmp	r3, #3
 8017af6:	d10a      	bne.n	8017b0e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017af8:	4925      	ldr	r1, [pc, #148]	; (8017b90 <etharp_tmr+0x14c>)
 8017afa:	687a      	ldr	r2, [r7, #4]
 8017afc:	4613      	mov	r3, r2
 8017afe:	005b      	lsls	r3, r3, #1
 8017b00:	4413      	add	r3, r2
 8017b02:	00db      	lsls	r3, r3, #3
 8017b04:	440b      	add	r3, r1
 8017b06:	3314      	adds	r3, #20
 8017b08:	2204      	movs	r2, #4
 8017b0a:	701a      	strb	r2, [r3, #0]
 8017b0c:	e034      	b.n	8017b78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017b0e:	4920      	ldr	r1, [pc, #128]	; (8017b90 <etharp_tmr+0x14c>)
 8017b10:	687a      	ldr	r2, [r7, #4]
 8017b12:	4613      	mov	r3, r2
 8017b14:	005b      	lsls	r3, r3, #1
 8017b16:	4413      	add	r3, r2
 8017b18:	00db      	lsls	r3, r3, #3
 8017b1a:	440b      	add	r3, r1
 8017b1c:	3314      	adds	r3, #20
 8017b1e:	781b      	ldrb	r3, [r3, #0]
 8017b20:	2b04      	cmp	r3, #4
 8017b22:	d10a      	bne.n	8017b3a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017b24:	491a      	ldr	r1, [pc, #104]	; (8017b90 <etharp_tmr+0x14c>)
 8017b26:	687a      	ldr	r2, [r7, #4]
 8017b28:	4613      	mov	r3, r2
 8017b2a:	005b      	lsls	r3, r3, #1
 8017b2c:	4413      	add	r3, r2
 8017b2e:	00db      	lsls	r3, r3, #3
 8017b30:	440b      	add	r3, r1
 8017b32:	3314      	adds	r3, #20
 8017b34:	2202      	movs	r2, #2
 8017b36:	701a      	strb	r2, [r3, #0]
 8017b38:	e01e      	b.n	8017b78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017b3a:	4915      	ldr	r1, [pc, #84]	; (8017b90 <etharp_tmr+0x14c>)
 8017b3c:	687a      	ldr	r2, [r7, #4]
 8017b3e:	4613      	mov	r3, r2
 8017b40:	005b      	lsls	r3, r3, #1
 8017b42:	4413      	add	r3, r2
 8017b44:	00db      	lsls	r3, r3, #3
 8017b46:	440b      	add	r3, r1
 8017b48:	3314      	adds	r3, #20
 8017b4a:	781b      	ldrb	r3, [r3, #0]
 8017b4c:	2b01      	cmp	r3, #1
 8017b4e:	d113      	bne.n	8017b78 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017b50:	490f      	ldr	r1, [pc, #60]	; (8017b90 <etharp_tmr+0x14c>)
 8017b52:	687a      	ldr	r2, [r7, #4]
 8017b54:	4613      	mov	r3, r2
 8017b56:	005b      	lsls	r3, r3, #1
 8017b58:	4413      	add	r3, r2
 8017b5a:	00db      	lsls	r3, r3, #3
 8017b5c:	440b      	add	r3, r1
 8017b5e:	3308      	adds	r3, #8
 8017b60:	6818      	ldr	r0, [r3, #0]
 8017b62:	687a      	ldr	r2, [r7, #4]
 8017b64:	4613      	mov	r3, r2
 8017b66:	005b      	lsls	r3, r3, #1
 8017b68:	4413      	add	r3, r2
 8017b6a:	00db      	lsls	r3, r3, #3
 8017b6c:	4a08      	ldr	r2, [pc, #32]	; (8017b90 <etharp_tmr+0x14c>)
 8017b6e:	4413      	add	r3, r2
 8017b70:	3304      	adds	r3, #4
 8017b72:	4619      	mov	r1, r3
 8017b74:	f000 fe72 	bl	801885c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	3301      	adds	r3, #1
 8017b7c:	607b      	str	r3, [r7, #4]
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	2b09      	cmp	r3, #9
 8017b82:	f77f af65 	ble.w	8017a50 <etharp_tmr+0xc>
      }
    }
  }
}
 8017b86:	bf00      	nop
 8017b88:	3708      	adds	r7, #8
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	bd80      	pop	{r7, pc}
 8017b8e:	bf00      	nop
 8017b90:	20004c08 	.word	0x20004c08

08017b94 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b08a      	sub	sp, #40	; 0x28
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	60f8      	str	r0, [r7, #12]
 8017b9c:	460b      	mov	r3, r1
 8017b9e:	607a      	str	r2, [r7, #4]
 8017ba0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017ba2:	230a      	movs	r3, #10
 8017ba4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017ba6:	230a      	movs	r3, #10
 8017ba8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017baa:	230a      	movs	r3, #10
 8017bac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017bb2:	230a      	movs	r3, #10
 8017bb4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	83bb      	strh	r3, [r7, #28]
 8017bba:	2300      	movs	r3, #0
 8017bbc:	837b      	strh	r3, [r7, #26]
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	843b      	strh	r3, [r7, #32]
 8017bc6:	e0ae      	b.n	8017d26 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017bc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017bcc:	49a6      	ldr	r1, [pc, #664]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017bce:	4613      	mov	r3, r2
 8017bd0:	005b      	lsls	r3, r3, #1
 8017bd2:	4413      	add	r3, r2
 8017bd4:	00db      	lsls	r3, r3, #3
 8017bd6:	440b      	add	r3, r1
 8017bd8:	3314      	adds	r3, #20
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017bde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017be2:	2b0a      	cmp	r3, #10
 8017be4:	d105      	bne.n	8017bf2 <etharp_find_entry+0x5e>
 8017be6:	7dfb      	ldrb	r3, [r7, #23]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d102      	bne.n	8017bf2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017bec:	8c3b      	ldrh	r3, [r7, #32]
 8017bee:	847b      	strh	r3, [r7, #34]	; 0x22
 8017bf0:	e095      	b.n	8017d1e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017bf2:	7dfb      	ldrb	r3, [r7, #23]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	f000 8092 	beq.w	8017d1e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017bfa:	7dfb      	ldrb	r3, [r7, #23]
 8017bfc:	2b01      	cmp	r3, #1
 8017bfe:	d009      	beq.n	8017c14 <etharp_find_entry+0x80>
 8017c00:	7dfb      	ldrb	r3, [r7, #23]
 8017c02:	2b01      	cmp	r3, #1
 8017c04:	d806      	bhi.n	8017c14 <etharp_find_entry+0x80>
 8017c06:	4b99      	ldr	r3, [pc, #612]	; (8017e6c <etharp_find_entry+0x2d8>)
 8017c08:	f44f 7292 	mov.w	r2, #292	; 0x124
 8017c0c:	4998      	ldr	r1, [pc, #608]	; (8017e70 <etharp_find_entry+0x2dc>)
 8017c0e:	4899      	ldr	r0, [pc, #612]	; (8017e74 <etharp_find_entry+0x2e0>)
 8017c10:	f002 fbd8 	bl	801a3c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d020      	beq.n	8017c5c <etharp_find_entry+0xc8>
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	6819      	ldr	r1, [r3, #0]
 8017c1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c22:	4891      	ldr	r0, [pc, #580]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017c24:	4613      	mov	r3, r2
 8017c26:	005b      	lsls	r3, r3, #1
 8017c28:	4413      	add	r3, r2
 8017c2a:	00db      	lsls	r3, r3, #3
 8017c2c:	4403      	add	r3, r0
 8017c2e:	3304      	adds	r3, #4
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	4299      	cmp	r1, r3
 8017c34:	d112      	bne.n	8017c5c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d00c      	beq.n	8017c56 <etharp_find_entry+0xc2>
 8017c3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c40:	4989      	ldr	r1, [pc, #548]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017c42:	4613      	mov	r3, r2
 8017c44:	005b      	lsls	r3, r3, #1
 8017c46:	4413      	add	r3, r2
 8017c48:	00db      	lsls	r3, r3, #3
 8017c4a:	440b      	add	r3, r1
 8017c4c:	3308      	adds	r3, #8
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	687a      	ldr	r2, [r7, #4]
 8017c52:	429a      	cmp	r2, r3
 8017c54:	d102      	bne.n	8017c5c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017c56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017c5a:	e100      	b.n	8017e5e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017c5c:	7dfb      	ldrb	r3, [r7, #23]
 8017c5e:	2b01      	cmp	r3, #1
 8017c60:	d140      	bne.n	8017ce4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017c62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c66:	4980      	ldr	r1, [pc, #512]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017c68:	4613      	mov	r3, r2
 8017c6a:	005b      	lsls	r3, r3, #1
 8017c6c:	4413      	add	r3, r2
 8017c6e:	00db      	lsls	r3, r3, #3
 8017c70:	440b      	add	r3, r1
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d01a      	beq.n	8017cae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017c78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c7c:	497a      	ldr	r1, [pc, #488]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017c7e:	4613      	mov	r3, r2
 8017c80:	005b      	lsls	r3, r3, #1
 8017c82:	4413      	add	r3, r2
 8017c84:	00db      	lsls	r3, r3, #3
 8017c86:	440b      	add	r3, r1
 8017c88:	3312      	adds	r3, #18
 8017c8a:	881b      	ldrh	r3, [r3, #0]
 8017c8c:	8bba      	ldrh	r2, [r7, #28]
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	d845      	bhi.n	8017d1e <etharp_find_entry+0x18a>
            old_queue = i;
 8017c92:	8c3b      	ldrh	r3, [r7, #32]
 8017c94:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017c96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c9a:	4973      	ldr	r1, [pc, #460]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017c9c:	4613      	mov	r3, r2
 8017c9e:	005b      	lsls	r3, r3, #1
 8017ca0:	4413      	add	r3, r2
 8017ca2:	00db      	lsls	r3, r3, #3
 8017ca4:	440b      	add	r3, r1
 8017ca6:	3312      	adds	r3, #18
 8017ca8:	881b      	ldrh	r3, [r3, #0]
 8017caa:	83bb      	strh	r3, [r7, #28]
 8017cac:	e037      	b.n	8017d1e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017cb2:	496d      	ldr	r1, [pc, #436]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017cb4:	4613      	mov	r3, r2
 8017cb6:	005b      	lsls	r3, r3, #1
 8017cb8:	4413      	add	r3, r2
 8017cba:	00db      	lsls	r3, r3, #3
 8017cbc:	440b      	add	r3, r1
 8017cbe:	3312      	adds	r3, #18
 8017cc0:	881b      	ldrh	r3, [r3, #0]
 8017cc2:	8b7a      	ldrh	r2, [r7, #26]
 8017cc4:	429a      	cmp	r2, r3
 8017cc6:	d82a      	bhi.n	8017d1e <etharp_find_entry+0x18a>
            old_pending = i;
 8017cc8:	8c3b      	ldrh	r3, [r7, #32]
 8017cca:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017ccc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017cd0:	4965      	ldr	r1, [pc, #404]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017cd2:	4613      	mov	r3, r2
 8017cd4:	005b      	lsls	r3, r3, #1
 8017cd6:	4413      	add	r3, r2
 8017cd8:	00db      	lsls	r3, r3, #3
 8017cda:	440b      	add	r3, r1
 8017cdc:	3312      	adds	r3, #18
 8017cde:	881b      	ldrh	r3, [r3, #0]
 8017ce0:	837b      	strh	r3, [r7, #26]
 8017ce2:	e01c      	b.n	8017d1e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017ce4:	7dfb      	ldrb	r3, [r7, #23]
 8017ce6:	2b01      	cmp	r3, #1
 8017ce8:	d919      	bls.n	8017d1e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017cea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017cee:	495e      	ldr	r1, [pc, #376]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017cf0:	4613      	mov	r3, r2
 8017cf2:	005b      	lsls	r3, r3, #1
 8017cf4:	4413      	add	r3, r2
 8017cf6:	00db      	lsls	r3, r3, #3
 8017cf8:	440b      	add	r3, r1
 8017cfa:	3312      	adds	r3, #18
 8017cfc:	881b      	ldrh	r3, [r3, #0]
 8017cfe:	8b3a      	ldrh	r2, [r7, #24]
 8017d00:	429a      	cmp	r2, r3
 8017d02:	d80c      	bhi.n	8017d1e <etharp_find_entry+0x18a>
            old_stable = i;
 8017d04:	8c3b      	ldrh	r3, [r7, #32]
 8017d06:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017d08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d0c:	4956      	ldr	r1, [pc, #344]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017d0e:	4613      	mov	r3, r2
 8017d10:	005b      	lsls	r3, r3, #1
 8017d12:	4413      	add	r3, r2
 8017d14:	00db      	lsls	r3, r3, #3
 8017d16:	440b      	add	r3, r1
 8017d18:	3312      	adds	r3, #18
 8017d1a:	881b      	ldrh	r3, [r3, #0]
 8017d1c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d1e:	8c3b      	ldrh	r3, [r7, #32]
 8017d20:	3301      	adds	r3, #1
 8017d22:	b29b      	uxth	r3, r3
 8017d24:	843b      	strh	r3, [r7, #32]
 8017d26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017d2a:	2b09      	cmp	r3, #9
 8017d2c:	f77f af4c 	ble.w	8017bc8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017d30:	7afb      	ldrb	r3, [r7, #11]
 8017d32:	f003 0302 	and.w	r3, r3, #2
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d108      	bne.n	8017d4c <etharp_find_entry+0x1b8>
 8017d3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017d3e:	2b0a      	cmp	r3, #10
 8017d40:	d107      	bne.n	8017d52 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017d42:	7afb      	ldrb	r3, [r7, #11]
 8017d44:	f003 0301 	and.w	r3, r3, #1
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d102      	bne.n	8017d52 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017d50:	e085      	b.n	8017e5e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017d52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017d56:	2b09      	cmp	r3, #9
 8017d58:	dc02      	bgt.n	8017d60 <etharp_find_entry+0x1cc>
    i = empty;
 8017d5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d5c:	843b      	strh	r3, [r7, #32]
 8017d5e:	e039      	b.n	8017dd4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017d60:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017d64:	2b09      	cmp	r3, #9
 8017d66:	dc14      	bgt.n	8017d92 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017d68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d6a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017d6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d70:	493d      	ldr	r1, [pc, #244]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017d72:	4613      	mov	r3, r2
 8017d74:	005b      	lsls	r3, r3, #1
 8017d76:	4413      	add	r3, r2
 8017d78:	00db      	lsls	r3, r3, #3
 8017d7a:	440b      	add	r3, r1
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d018      	beq.n	8017db4 <etharp_find_entry+0x220>
 8017d82:	4b3a      	ldr	r3, [pc, #232]	; (8017e6c <etharp_find_entry+0x2d8>)
 8017d84:	f240 126d 	movw	r2, #365	; 0x16d
 8017d88:	493b      	ldr	r1, [pc, #236]	; (8017e78 <etharp_find_entry+0x2e4>)
 8017d8a:	483a      	ldr	r0, [pc, #232]	; (8017e74 <etharp_find_entry+0x2e0>)
 8017d8c:	f002 fb1a 	bl	801a3c4 <iprintf>
 8017d90:	e010      	b.n	8017db4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017d92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017d96:	2b09      	cmp	r3, #9
 8017d98:	dc02      	bgt.n	8017da0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017d9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017d9c:	843b      	strh	r3, [r7, #32]
 8017d9e:	e009      	b.n	8017db4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017da0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017da4:	2b09      	cmp	r3, #9
 8017da6:	dc02      	bgt.n	8017dae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017da8:	8bfb      	ldrh	r3, [r7, #30]
 8017daa:	843b      	strh	r3, [r7, #32]
 8017dac:	e002      	b.n	8017db4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017dae:	f04f 33ff 	mov.w	r3, #4294967295
 8017db2:	e054      	b.n	8017e5e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017db4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017db8:	2b09      	cmp	r3, #9
 8017dba:	dd06      	ble.n	8017dca <etharp_find_entry+0x236>
 8017dbc:	4b2b      	ldr	r3, [pc, #172]	; (8017e6c <etharp_find_entry+0x2d8>)
 8017dbe:	f240 127f 	movw	r2, #383	; 0x17f
 8017dc2:	492e      	ldr	r1, [pc, #184]	; (8017e7c <etharp_find_entry+0x2e8>)
 8017dc4:	482b      	ldr	r0, [pc, #172]	; (8017e74 <etharp_find_entry+0x2e0>)
 8017dc6:	f002 fafd 	bl	801a3c4 <iprintf>
    etharp_free_entry(i);
 8017dca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f7ff fe06 	bl	80179e0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017dd4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017dd8:	2b09      	cmp	r3, #9
 8017dda:	dd06      	ble.n	8017dea <etharp_find_entry+0x256>
 8017ddc:	4b23      	ldr	r3, [pc, #140]	; (8017e6c <etharp_find_entry+0x2d8>)
 8017dde:	f240 1283 	movw	r2, #387	; 0x183
 8017de2:	4926      	ldr	r1, [pc, #152]	; (8017e7c <etharp_find_entry+0x2e8>)
 8017de4:	4823      	ldr	r0, [pc, #140]	; (8017e74 <etharp_find_entry+0x2e0>)
 8017de6:	f002 faed 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017dea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017dee:	491e      	ldr	r1, [pc, #120]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017df0:	4613      	mov	r3, r2
 8017df2:	005b      	lsls	r3, r3, #1
 8017df4:	4413      	add	r3, r2
 8017df6:	00db      	lsls	r3, r3, #3
 8017df8:	440b      	add	r3, r1
 8017dfa:	3314      	adds	r3, #20
 8017dfc:	781b      	ldrb	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d006      	beq.n	8017e10 <etharp_find_entry+0x27c>
 8017e02:	4b1a      	ldr	r3, [pc, #104]	; (8017e6c <etharp_find_entry+0x2d8>)
 8017e04:	f240 1285 	movw	r2, #389	; 0x185
 8017e08:	491d      	ldr	r1, [pc, #116]	; (8017e80 <etharp_find_entry+0x2ec>)
 8017e0a:	481a      	ldr	r0, [pc, #104]	; (8017e74 <etharp_find_entry+0x2e0>)
 8017e0c:	f002 fada 	bl	801a3c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d00b      	beq.n	8017e2e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017e16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	6819      	ldr	r1, [r3, #0]
 8017e1e:	4812      	ldr	r0, [pc, #72]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017e20:	4613      	mov	r3, r2
 8017e22:	005b      	lsls	r3, r3, #1
 8017e24:	4413      	add	r3, r2
 8017e26:	00db      	lsls	r3, r3, #3
 8017e28:	4403      	add	r3, r0
 8017e2a:	3304      	adds	r3, #4
 8017e2c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017e2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e32:	490d      	ldr	r1, [pc, #52]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017e34:	4613      	mov	r3, r2
 8017e36:	005b      	lsls	r3, r3, #1
 8017e38:	4413      	add	r3, r2
 8017e3a:	00db      	lsls	r3, r3, #3
 8017e3c:	440b      	add	r3, r1
 8017e3e:	3312      	adds	r3, #18
 8017e40:	2200      	movs	r2, #0
 8017e42:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017e44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e48:	4907      	ldr	r1, [pc, #28]	; (8017e68 <etharp_find_entry+0x2d4>)
 8017e4a:	4613      	mov	r3, r2
 8017e4c:	005b      	lsls	r3, r3, #1
 8017e4e:	4413      	add	r3, r2
 8017e50:	00db      	lsls	r3, r3, #3
 8017e52:	440b      	add	r3, r1
 8017e54:	3308      	adds	r3, #8
 8017e56:	687a      	ldr	r2, [r7, #4]
 8017e58:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017e5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017e5e:	4618      	mov	r0, r3
 8017e60:	3728      	adds	r7, #40	; 0x28
 8017e62:	46bd      	mov	sp, r7
 8017e64:	bd80      	pop	{r7, pc}
 8017e66:	bf00      	nop
 8017e68:	20004c08 	.word	0x20004c08
 8017e6c:	0801ea84 	.word	0x0801ea84
 8017e70:	0801eabc 	.word	0x0801eabc
 8017e74:	0801eafc 	.word	0x0801eafc
 8017e78:	0801eb24 	.word	0x0801eb24
 8017e7c:	0801eb3c 	.word	0x0801eb3c
 8017e80:	0801eb50 	.word	0x0801eb50

08017e84 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b088      	sub	sp, #32
 8017e88:	af02      	add	r7, sp, #8
 8017e8a:	60f8      	str	r0, [r7, #12]
 8017e8c:	60b9      	str	r1, [r7, #8]
 8017e8e:	607a      	str	r2, [r7, #4]
 8017e90:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e98:	2b06      	cmp	r3, #6
 8017e9a:	d006      	beq.n	8017eaa <etharp_update_arp_entry+0x26>
 8017e9c:	4b48      	ldr	r3, [pc, #288]	; (8017fc0 <etharp_update_arp_entry+0x13c>)
 8017e9e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017ea2:	4948      	ldr	r1, [pc, #288]	; (8017fc4 <etharp_update_arp_entry+0x140>)
 8017ea4:	4848      	ldr	r0, [pc, #288]	; (8017fc8 <etharp_update_arp_entry+0x144>)
 8017ea6:	f002 fa8d 	bl	801a3c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d012      	beq.n	8017ed6 <etharp_update_arp_entry+0x52>
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d00e      	beq.n	8017ed6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017eb8:	68bb      	ldr	r3, [r7, #8]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	68f9      	ldr	r1, [r7, #12]
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f001 f91e 	bl	8019100 <ip4_addr_isbroadcast_u32>
 8017ec4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d105      	bne.n	8017ed6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017eca:	68bb      	ldr	r3, [r7, #8]
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017ed2:	2be0      	cmp	r3, #224	; 0xe0
 8017ed4:	d102      	bne.n	8017edc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017ed6:	f06f 030f 	mvn.w	r3, #15
 8017eda:	e06c      	b.n	8017fb6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017edc:	78fb      	ldrb	r3, [r7, #3]
 8017ede:	68fa      	ldr	r2, [r7, #12]
 8017ee0:	4619      	mov	r1, r3
 8017ee2:	68b8      	ldr	r0, [r7, #8]
 8017ee4:	f7ff fe56 	bl	8017b94 <etharp_find_entry>
 8017ee8:	4603      	mov	r3, r0
 8017eea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017eec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	da02      	bge.n	8017efa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017ef4:	8afb      	ldrh	r3, [r7, #22]
 8017ef6:	b25b      	sxtb	r3, r3
 8017ef8:	e05d      	b.n	8017fb6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017efa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017efe:	4933      	ldr	r1, [pc, #204]	; (8017fcc <etharp_update_arp_entry+0x148>)
 8017f00:	4613      	mov	r3, r2
 8017f02:	005b      	lsls	r3, r3, #1
 8017f04:	4413      	add	r3, r2
 8017f06:	00db      	lsls	r3, r3, #3
 8017f08:	440b      	add	r3, r1
 8017f0a:	3314      	adds	r3, #20
 8017f0c:	2202      	movs	r2, #2
 8017f0e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017f10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f14:	492d      	ldr	r1, [pc, #180]	; (8017fcc <etharp_update_arp_entry+0x148>)
 8017f16:	4613      	mov	r3, r2
 8017f18:	005b      	lsls	r3, r3, #1
 8017f1a:	4413      	add	r3, r2
 8017f1c:	00db      	lsls	r3, r3, #3
 8017f1e:	440b      	add	r3, r1
 8017f20:	3308      	adds	r3, #8
 8017f22:	68fa      	ldr	r2, [r7, #12]
 8017f24:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017f26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f2a:	4613      	mov	r3, r2
 8017f2c:	005b      	lsls	r3, r3, #1
 8017f2e:	4413      	add	r3, r2
 8017f30:	00db      	lsls	r3, r3, #3
 8017f32:	3308      	adds	r3, #8
 8017f34:	4a25      	ldr	r2, [pc, #148]	; (8017fcc <etharp_update_arp_entry+0x148>)
 8017f36:	4413      	add	r3, r2
 8017f38:	3304      	adds	r3, #4
 8017f3a:	2206      	movs	r2, #6
 8017f3c:	6879      	ldr	r1, [r7, #4]
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f002 fa2c 	bl	801a39c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017f44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f48:	4920      	ldr	r1, [pc, #128]	; (8017fcc <etharp_update_arp_entry+0x148>)
 8017f4a:	4613      	mov	r3, r2
 8017f4c:	005b      	lsls	r3, r3, #1
 8017f4e:	4413      	add	r3, r2
 8017f50:	00db      	lsls	r3, r3, #3
 8017f52:	440b      	add	r3, r1
 8017f54:	3312      	adds	r3, #18
 8017f56:	2200      	movs	r2, #0
 8017f58:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017f5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f5e:	491b      	ldr	r1, [pc, #108]	; (8017fcc <etharp_update_arp_entry+0x148>)
 8017f60:	4613      	mov	r3, r2
 8017f62:	005b      	lsls	r3, r3, #1
 8017f64:	4413      	add	r3, r2
 8017f66:	00db      	lsls	r3, r3, #3
 8017f68:	440b      	add	r3, r1
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d021      	beq.n	8017fb4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017f70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f74:	4915      	ldr	r1, [pc, #84]	; (8017fcc <etharp_update_arp_entry+0x148>)
 8017f76:	4613      	mov	r3, r2
 8017f78:	005b      	lsls	r3, r3, #1
 8017f7a:	4413      	add	r3, r2
 8017f7c:	00db      	lsls	r3, r3, #3
 8017f7e:	440b      	add	r3, r1
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017f84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f88:	4910      	ldr	r1, [pc, #64]	; (8017fcc <etharp_update_arp_entry+0x148>)
 8017f8a:	4613      	mov	r3, r2
 8017f8c:	005b      	lsls	r3, r3, #1
 8017f8e:	4413      	add	r3, r2
 8017f90:	00db      	lsls	r3, r3, #3
 8017f92:	440b      	add	r3, r1
 8017f94:	2200      	movs	r2, #0
 8017f96:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017f9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017fa2:	9300      	str	r3, [sp, #0]
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6939      	ldr	r1, [r7, #16]
 8017fa8:	68f8      	ldr	r0, [r7, #12]
 8017faa:	f001 ffad 	bl	8019f08 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017fae:	6938      	ldr	r0, [r7, #16]
 8017fb0:	f7f6 fc42 	bl	800e838 <pbuf_free>
  }
  return ERR_OK;
 8017fb4:	2300      	movs	r3, #0
}
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	3718      	adds	r7, #24
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}
 8017fbe:	bf00      	nop
 8017fc0:	0801ea84 	.word	0x0801ea84
 8017fc4:	0801eb7c 	.word	0x0801eb7c
 8017fc8:	0801eafc 	.word	0x0801eafc
 8017fcc:	20004c08 	.word	0x20004c08

08017fd0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b084      	sub	sp, #16
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017fd8:	2300      	movs	r3, #0
 8017fda:	60fb      	str	r3, [r7, #12]
 8017fdc:	e01e      	b.n	801801c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017fde:	4913      	ldr	r1, [pc, #76]	; (801802c <etharp_cleanup_netif+0x5c>)
 8017fe0:	68fa      	ldr	r2, [r7, #12]
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	005b      	lsls	r3, r3, #1
 8017fe6:	4413      	add	r3, r2
 8017fe8:	00db      	lsls	r3, r3, #3
 8017fea:	440b      	add	r3, r1
 8017fec:	3314      	adds	r3, #20
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017ff2:	7afb      	ldrb	r3, [r7, #11]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d00e      	beq.n	8018016 <etharp_cleanup_netif+0x46>
 8017ff8:	490c      	ldr	r1, [pc, #48]	; (801802c <etharp_cleanup_netif+0x5c>)
 8017ffa:	68fa      	ldr	r2, [r7, #12]
 8017ffc:	4613      	mov	r3, r2
 8017ffe:	005b      	lsls	r3, r3, #1
 8018000:	4413      	add	r3, r2
 8018002:	00db      	lsls	r3, r3, #3
 8018004:	440b      	add	r3, r1
 8018006:	3308      	adds	r3, #8
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	687a      	ldr	r2, [r7, #4]
 801800c:	429a      	cmp	r2, r3
 801800e:	d102      	bne.n	8018016 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018010:	68f8      	ldr	r0, [r7, #12]
 8018012:	f7ff fce5 	bl	80179e0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	3301      	adds	r3, #1
 801801a:	60fb      	str	r3, [r7, #12]
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	2b09      	cmp	r3, #9
 8018020:	dddd      	ble.n	8017fde <etharp_cleanup_netif+0xe>
    }
  }
}
 8018022:	bf00      	nop
 8018024:	3710      	adds	r7, #16
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop
 801802c:	20004c08 	.word	0x20004c08

08018030 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018030:	b5b0      	push	{r4, r5, r7, lr}
 8018032:	b08a      	sub	sp, #40	; 0x28
 8018034:	af04      	add	r7, sp, #16
 8018036:	6078      	str	r0, [r7, #4]
 8018038:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801803a:	683b      	ldr	r3, [r7, #0]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d107      	bne.n	8018050 <etharp_input+0x20>
 8018040:	4b3f      	ldr	r3, [pc, #252]	; (8018140 <etharp_input+0x110>)
 8018042:	f240 228a 	movw	r2, #650	; 0x28a
 8018046:	493f      	ldr	r1, [pc, #252]	; (8018144 <etharp_input+0x114>)
 8018048:	483f      	ldr	r0, [pc, #252]	; (8018148 <etharp_input+0x118>)
 801804a:	f002 f9bb 	bl	801a3c4 <iprintf>
 801804e:	e074      	b.n	801813a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	685b      	ldr	r3, [r3, #4]
 8018054:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018056:	693b      	ldr	r3, [r7, #16]
 8018058:	881b      	ldrh	r3, [r3, #0]
 801805a:	b29b      	uxth	r3, r3
 801805c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018060:	d10c      	bne.n	801807c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018062:	693b      	ldr	r3, [r7, #16]
 8018064:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018066:	2b06      	cmp	r3, #6
 8018068:	d108      	bne.n	801807c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801806a:	693b      	ldr	r3, [r7, #16]
 801806c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801806e:	2b04      	cmp	r3, #4
 8018070:	d104      	bne.n	801807c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018072:	693b      	ldr	r3, [r7, #16]
 8018074:	885b      	ldrh	r3, [r3, #2]
 8018076:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018078:	2b08      	cmp	r3, #8
 801807a:	d003      	beq.n	8018084 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7f6 fbdb 	bl	800e838 <pbuf_free>
    return;
 8018082:	e05a      	b.n	801813a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018084:	693b      	ldr	r3, [r7, #16]
 8018086:	330e      	adds	r3, #14
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801808c:	693b      	ldr	r3, [r7, #16]
 801808e:	3318      	adds	r3, #24
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018094:	683b      	ldr	r3, [r7, #0]
 8018096:	3304      	adds	r3, #4
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d102      	bne.n	80180a4 <etharp_input+0x74>
    for_us = 0;
 801809e:	2300      	movs	r3, #0
 80180a0:	75fb      	strb	r3, [r7, #23]
 80180a2:	e009      	b.n	80180b8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80180a4:	68ba      	ldr	r2, [r7, #8]
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	3304      	adds	r3, #4
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	429a      	cmp	r2, r3
 80180ae:	bf0c      	ite	eq
 80180b0:	2301      	moveq	r3, #1
 80180b2:	2300      	movne	r3, #0
 80180b4:	b2db      	uxtb	r3, r3
 80180b6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80180b8:	693b      	ldr	r3, [r7, #16]
 80180ba:	f103 0208 	add.w	r2, r3, #8
 80180be:	7dfb      	ldrb	r3, [r7, #23]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d001      	beq.n	80180c8 <etharp_input+0x98>
 80180c4:	2301      	movs	r3, #1
 80180c6:	e000      	b.n	80180ca <etharp_input+0x9a>
 80180c8:	2302      	movs	r3, #2
 80180ca:	f107 010c 	add.w	r1, r7, #12
 80180ce:	6838      	ldr	r0, [r7, #0]
 80180d0:	f7ff fed8 	bl	8017e84 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80180d4:	693b      	ldr	r3, [r7, #16]
 80180d6:	88db      	ldrh	r3, [r3, #6]
 80180d8:	b29b      	uxth	r3, r3
 80180da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80180de:	d003      	beq.n	80180e8 <etharp_input+0xb8>
 80180e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80180e4:	d01e      	beq.n	8018124 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80180e6:	e025      	b.n	8018134 <etharp_input+0x104>
      if (for_us) {
 80180e8:	7dfb      	ldrb	r3, [r7, #23]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d021      	beq.n	8018132 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80180ee:	683b      	ldr	r3, [r7, #0]
 80180f0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80180f4:	693b      	ldr	r3, [r7, #16]
 80180f6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80180fa:	683b      	ldr	r3, [r7, #0]
 80180fc:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8018100:	683b      	ldr	r3, [r7, #0]
 8018102:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018104:	693a      	ldr	r2, [r7, #16]
 8018106:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018108:	2102      	movs	r1, #2
 801810a:	9103      	str	r1, [sp, #12]
 801810c:	f107 010c 	add.w	r1, r7, #12
 8018110:	9102      	str	r1, [sp, #8]
 8018112:	9201      	str	r2, [sp, #4]
 8018114:	9300      	str	r3, [sp, #0]
 8018116:	462b      	mov	r3, r5
 8018118:	4622      	mov	r2, r4
 801811a:	4601      	mov	r1, r0
 801811c:	6838      	ldr	r0, [r7, #0]
 801811e:	f000 faef 	bl	8018700 <etharp_raw>
      break;
 8018122:	e006      	b.n	8018132 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8018124:	f107 030c 	add.w	r3, r7, #12
 8018128:	4619      	mov	r1, r3
 801812a:	6838      	ldr	r0, [r7, #0]
 801812c:	f7fe f9fe 	bl	801652c <dhcp_arp_reply>
      break;
 8018130:	e000      	b.n	8018134 <etharp_input+0x104>
      break;
 8018132:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018134:	6878      	ldr	r0, [r7, #4]
 8018136:	f7f6 fb7f 	bl	800e838 <pbuf_free>
}
 801813a:	3718      	adds	r7, #24
 801813c:	46bd      	mov	sp, r7
 801813e:	bdb0      	pop	{r4, r5, r7, pc}
 8018140:	0801ea84 	.word	0x0801ea84
 8018144:	0801ebd4 	.word	0x0801ebd4
 8018148:	0801eafc 	.word	0x0801eafc

0801814c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b086      	sub	sp, #24
 8018150:	af02      	add	r7, sp, #8
 8018152:	60f8      	str	r0, [r7, #12]
 8018154:	60b9      	str	r1, [r7, #8]
 8018156:	4613      	mov	r3, r2
 8018158:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801815a:	79fa      	ldrb	r2, [r7, #7]
 801815c:	4944      	ldr	r1, [pc, #272]	; (8018270 <etharp_output_to_arp_index+0x124>)
 801815e:	4613      	mov	r3, r2
 8018160:	005b      	lsls	r3, r3, #1
 8018162:	4413      	add	r3, r2
 8018164:	00db      	lsls	r3, r3, #3
 8018166:	440b      	add	r3, r1
 8018168:	3314      	adds	r3, #20
 801816a:	781b      	ldrb	r3, [r3, #0]
 801816c:	2b01      	cmp	r3, #1
 801816e:	d806      	bhi.n	801817e <etharp_output_to_arp_index+0x32>
 8018170:	4b40      	ldr	r3, [pc, #256]	; (8018274 <etharp_output_to_arp_index+0x128>)
 8018172:	f240 22ef 	movw	r2, #751	; 0x2ef
 8018176:	4940      	ldr	r1, [pc, #256]	; (8018278 <etharp_output_to_arp_index+0x12c>)
 8018178:	4840      	ldr	r0, [pc, #256]	; (801827c <etharp_output_to_arp_index+0x130>)
 801817a:	f002 f923 	bl	801a3c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801817e:	79fa      	ldrb	r2, [r7, #7]
 8018180:	493b      	ldr	r1, [pc, #236]	; (8018270 <etharp_output_to_arp_index+0x124>)
 8018182:	4613      	mov	r3, r2
 8018184:	005b      	lsls	r3, r3, #1
 8018186:	4413      	add	r3, r2
 8018188:	00db      	lsls	r3, r3, #3
 801818a:	440b      	add	r3, r1
 801818c:	3314      	adds	r3, #20
 801818e:	781b      	ldrb	r3, [r3, #0]
 8018190:	2b02      	cmp	r3, #2
 8018192:	d153      	bne.n	801823c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018194:	79fa      	ldrb	r2, [r7, #7]
 8018196:	4936      	ldr	r1, [pc, #216]	; (8018270 <etharp_output_to_arp_index+0x124>)
 8018198:	4613      	mov	r3, r2
 801819a:	005b      	lsls	r3, r3, #1
 801819c:	4413      	add	r3, r2
 801819e:	00db      	lsls	r3, r3, #3
 80181a0:	440b      	add	r3, r1
 80181a2:	3312      	adds	r3, #18
 80181a4:	881b      	ldrh	r3, [r3, #0]
 80181a6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80181aa:	d919      	bls.n	80181e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80181ac:	79fa      	ldrb	r2, [r7, #7]
 80181ae:	4613      	mov	r3, r2
 80181b0:	005b      	lsls	r3, r3, #1
 80181b2:	4413      	add	r3, r2
 80181b4:	00db      	lsls	r3, r3, #3
 80181b6:	4a2e      	ldr	r2, [pc, #184]	; (8018270 <etharp_output_to_arp_index+0x124>)
 80181b8:	4413      	add	r3, r2
 80181ba:	3304      	adds	r3, #4
 80181bc:	4619      	mov	r1, r3
 80181be:	68f8      	ldr	r0, [r7, #12]
 80181c0:	f000 fb4c 	bl	801885c <etharp_request>
 80181c4:	4603      	mov	r3, r0
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d138      	bne.n	801823c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80181ca:	79fa      	ldrb	r2, [r7, #7]
 80181cc:	4928      	ldr	r1, [pc, #160]	; (8018270 <etharp_output_to_arp_index+0x124>)
 80181ce:	4613      	mov	r3, r2
 80181d0:	005b      	lsls	r3, r3, #1
 80181d2:	4413      	add	r3, r2
 80181d4:	00db      	lsls	r3, r3, #3
 80181d6:	440b      	add	r3, r1
 80181d8:	3314      	adds	r3, #20
 80181da:	2203      	movs	r2, #3
 80181dc:	701a      	strb	r2, [r3, #0]
 80181de:	e02d      	b.n	801823c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80181e0:	79fa      	ldrb	r2, [r7, #7]
 80181e2:	4923      	ldr	r1, [pc, #140]	; (8018270 <etharp_output_to_arp_index+0x124>)
 80181e4:	4613      	mov	r3, r2
 80181e6:	005b      	lsls	r3, r3, #1
 80181e8:	4413      	add	r3, r2
 80181ea:	00db      	lsls	r3, r3, #3
 80181ec:	440b      	add	r3, r1
 80181ee:	3312      	adds	r3, #18
 80181f0:	881b      	ldrh	r3, [r3, #0]
 80181f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80181f6:	d321      	bcc.n	801823c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80181f8:	79fa      	ldrb	r2, [r7, #7]
 80181fa:	4613      	mov	r3, r2
 80181fc:	005b      	lsls	r3, r3, #1
 80181fe:	4413      	add	r3, r2
 8018200:	00db      	lsls	r3, r3, #3
 8018202:	4a1b      	ldr	r2, [pc, #108]	; (8018270 <etharp_output_to_arp_index+0x124>)
 8018204:	4413      	add	r3, r2
 8018206:	1d19      	adds	r1, r3, #4
 8018208:	79fa      	ldrb	r2, [r7, #7]
 801820a:	4613      	mov	r3, r2
 801820c:	005b      	lsls	r3, r3, #1
 801820e:	4413      	add	r3, r2
 8018210:	00db      	lsls	r3, r3, #3
 8018212:	3308      	adds	r3, #8
 8018214:	4a16      	ldr	r2, [pc, #88]	; (8018270 <etharp_output_to_arp_index+0x124>)
 8018216:	4413      	add	r3, r2
 8018218:	3304      	adds	r3, #4
 801821a:	461a      	mov	r2, r3
 801821c:	68f8      	ldr	r0, [r7, #12]
 801821e:	f000 fafb 	bl	8018818 <etharp_request_dst>
 8018222:	4603      	mov	r3, r0
 8018224:	2b00      	cmp	r3, #0
 8018226:	d109      	bne.n	801823c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018228:	79fa      	ldrb	r2, [r7, #7]
 801822a:	4911      	ldr	r1, [pc, #68]	; (8018270 <etharp_output_to_arp_index+0x124>)
 801822c:	4613      	mov	r3, r2
 801822e:	005b      	lsls	r3, r3, #1
 8018230:	4413      	add	r3, r2
 8018232:	00db      	lsls	r3, r3, #3
 8018234:	440b      	add	r3, r1
 8018236:	3314      	adds	r3, #20
 8018238:	2203      	movs	r2, #3
 801823a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8018242:	79fa      	ldrb	r2, [r7, #7]
 8018244:	4613      	mov	r3, r2
 8018246:	005b      	lsls	r3, r3, #1
 8018248:	4413      	add	r3, r2
 801824a:	00db      	lsls	r3, r3, #3
 801824c:	3308      	adds	r3, #8
 801824e:	4a08      	ldr	r2, [pc, #32]	; (8018270 <etharp_output_to_arp_index+0x124>)
 8018250:	4413      	add	r3, r2
 8018252:	1d1a      	adds	r2, r3, #4
 8018254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018258:	9300      	str	r3, [sp, #0]
 801825a:	4613      	mov	r3, r2
 801825c:	460a      	mov	r2, r1
 801825e:	68b9      	ldr	r1, [r7, #8]
 8018260:	68f8      	ldr	r0, [r7, #12]
 8018262:	f001 fe51 	bl	8019f08 <ethernet_output>
 8018266:	4603      	mov	r3, r0
}
 8018268:	4618      	mov	r0, r3
 801826a:	3710      	adds	r7, #16
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}
 8018270:	20004c08 	.word	0x20004c08
 8018274:	0801ea84 	.word	0x0801ea84
 8018278:	0801ebf4 	.word	0x0801ebf4
 801827c:	0801eafc 	.word	0x0801eafc

08018280 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b08a      	sub	sp, #40	; 0x28
 8018284:	af02      	add	r7, sp, #8
 8018286:	60f8      	str	r0, [r7, #12]
 8018288:	60b9      	str	r1, [r7, #8]
 801828a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d106      	bne.n	80182a4 <etharp_output+0x24>
 8018296:	4b73      	ldr	r3, [pc, #460]	; (8018464 <etharp_output+0x1e4>)
 8018298:	f240 321e 	movw	r2, #798	; 0x31e
 801829c:	4972      	ldr	r1, [pc, #456]	; (8018468 <etharp_output+0x1e8>)
 801829e:	4873      	ldr	r0, [pc, #460]	; (801846c <etharp_output+0x1ec>)
 80182a0:	f002 f890 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80182a4:	68bb      	ldr	r3, [r7, #8]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d106      	bne.n	80182b8 <etharp_output+0x38>
 80182aa:	4b6e      	ldr	r3, [pc, #440]	; (8018464 <etharp_output+0x1e4>)
 80182ac:	f240 321f 	movw	r2, #799	; 0x31f
 80182b0:	496f      	ldr	r1, [pc, #444]	; (8018470 <etharp_output+0x1f0>)
 80182b2:	486e      	ldr	r0, [pc, #440]	; (801846c <etharp_output+0x1ec>)
 80182b4:	f002 f886 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d106      	bne.n	80182cc <etharp_output+0x4c>
 80182be:	4b69      	ldr	r3, [pc, #420]	; (8018464 <etharp_output+0x1e4>)
 80182c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80182c4:	496b      	ldr	r1, [pc, #428]	; (8018474 <etharp_output+0x1f4>)
 80182c6:	4869      	ldr	r0, [pc, #420]	; (801846c <etharp_output+0x1ec>)
 80182c8:	f002 f87c 	bl	801a3c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	68f9      	ldr	r1, [r7, #12]
 80182d2:	4618      	mov	r0, r3
 80182d4:	f000 ff14 	bl	8019100 <ip4_addr_isbroadcast_u32>
 80182d8:	4603      	mov	r3, r0
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d002      	beq.n	80182e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80182de:	4b66      	ldr	r3, [pc, #408]	; (8018478 <etharp_output+0x1f8>)
 80182e0:	61fb      	str	r3, [r7, #28]
 80182e2:	e0af      	b.n	8018444 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80182ec:	2be0      	cmp	r3, #224	; 0xe0
 80182ee:	d118      	bne.n	8018322 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80182f0:	2301      	movs	r3, #1
 80182f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80182f4:	2300      	movs	r3, #0
 80182f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80182f8:	235e      	movs	r3, #94	; 0x5e
 80182fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	3301      	adds	r3, #1
 8018300:	781b      	ldrb	r3, [r3, #0]
 8018302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018306:	b2db      	uxtb	r3, r3
 8018308:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	3302      	adds	r3, #2
 801830e:	781b      	ldrb	r3, [r3, #0]
 8018310:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	3303      	adds	r3, #3
 8018316:	781b      	ldrb	r3, [r3, #0]
 8018318:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801831a:	f107 0310 	add.w	r3, r7, #16
 801831e:	61fb      	str	r3, [r7, #28]
 8018320:	e090      	b.n	8018444 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	681a      	ldr	r2, [r3, #0]
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	3304      	adds	r3, #4
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	405a      	eors	r2, r3
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	3308      	adds	r3, #8
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	4013      	ands	r3, r2
 8018336:	2b00      	cmp	r3, #0
 8018338:	d012      	beq.n	8018360 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018340:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018344:	4293      	cmp	r3, r2
 8018346:	d00b      	beq.n	8018360 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	330c      	adds	r3, #12
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d003      	beq.n	801835a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	330c      	adds	r3, #12
 8018356:	61bb      	str	r3, [r7, #24]
 8018358:	e002      	b.n	8018360 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801835a:	f06f 0303 	mvn.w	r3, #3
 801835e:	e07d      	b.n	801845c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018360:	4b46      	ldr	r3, [pc, #280]	; (801847c <etharp_output+0x1fc>)
 8018362:	781b      	ldrb	r3, [r3, #0]
 8018364:	4619      	mov	r1, r3
 8018366:	4a46      	ldr	r2, [pc, #280]	; (8018480 <etharp_output+0x200>)
 8018368:	460b      	mov	r3, r1
 801836a:	005b      	lsls	r3, r3, #1
 801836c:	440b      	add	r3, r1
 801836e:	00db      	lsls	r3, r3, #3
 8018370:	4413      	add	r3, r2
 8018372:	3314      	adds	r3, #20
 8018374:	781b      	ldrb	r3, [r3, #0]
 8018376:	2b01      	cmp	r3, #1
 8018378:	d925      	bls.n	80183c6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801837a:	4b40      	ldr	r3, [pc, #256]	; (801847c <etharp_output+0x1fc>)
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	4619      	mov	r1, r3
 8018380:	4a3f      	ldr	r2, [pc, #252]	; (8018480 <etharp_output+0x200>)
 8018382:	460b      	mov	r3, r1
 8018384:	005b      	lsls	r3, r3, #1
 8018386:	440b      	add	r3, r1
 8018388:	00db      	lsls	r3, r3, #3
 801838a:	4413      	add	r3, r2
 801838c:	3308      	adds	r3, #8
 801838e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018390:	68fa      	ldr	r2, [r7, #12]
 8018392:	429a      	cmp	r2, r3
 8018394:	d117      	bne.n	80183c6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018396:	69bb      	ldr	r3, [r7, #24]
 8018398:	681a      	ldr	r2, [r3, #0]
 801839a:	4b38      	ldr	r3, [pc, #224]	; (801847c <etharp_output+0x1fc>)
 801839c:	781b      	ldrb	r3, [r3, #0]
 801839e:	4618      	mov	r0, r3
 80183a0:	4937      	ldr	r1, [pc, #220]	; (8018480 <etharp_output+0x200>)
 80183a2:	4603      	mov	r3, r0
 80183a4:	005b      	lsls	r3, r3, #1
 80183a6:	4403      	add	r3, r0
 80183a8:	00db      	lsls	r3, r3, #3
 80183aa:	440b      	add	r3, r1
 80183ac:	3304      	adds	r3, #4
 80183ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80183b0:	429a      	cmp	r2, r3
 80183b2:	d108      	bne.n	80183c6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80183b4:	4b31      	ldr	r3, [pc, #196]	; (801847c <etharp_output+0x1fc>)
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	461a      	mov	r2, r3
 80183ba:	68b9      	ldr	r1, [r7, #8]
 80183bc:	68f8      	ldr	r0, [r7, #12]
 80183be:	f7ff fec5 	bl	801814c <etharp_output_to_arp_index>
 80183c2:	4603      	mov	r3, r0
 80183c4:	e04a      	b.n	801845c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80183c6:	2300      	movs	r3, #0
 80183c8:	75fb      	strb	r3, [r7, #23]
 80183ca:	e031      	b.n	8018430 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80183cc:	7dfa      	ldrb	r2, [r7, #23]
 80183ce:	492c      	ldr	r1, [pc, #176]	; (8018480 <etharp_output+0x200>)
 80183d0:	4613      	mov	r3, r2
 80183d2:	005b      	lsls	r3, r3, #1
 80183d4:	4413      	add	r3, r2
 80183d6:	00db      	lsls	r3, r3, #3
 80183d8:	440b      	add	r3, r1
 80183da:	3314      	adds	r3, #20
 80183dc:	781b      	ldrb	r3, [r3, #0]
 80183de:	2b01      	cmp	r3, #1
 80183e0:	d923      	bls.n	801842a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80183e2:	7dfa      	ldrb	r2, [r7, #23]
 80183e4:	4926      	ldr	r1, [pc, #152]	; (8018480 <etharp_output+0x200>)
 80183e6:	4613      	mov	r3, r2
 80183e8:	005b      	lsls	r3, r3, #1
 80183ea:	4413      	add	r3, r2
 80183ec:	00db      	lsls	r3, r3, #3
 80183ee:	440b      	add	r3, r1
 80183f0:	3308      	adds	r3, #8
 80183f2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80183f4:	68fa      	ldr	r2, [r7, #12]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	d117      	bne.n	801842a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80183fa:	69bb      	ldr	r3, [r7, #24]
 80183fc:	6819      	ldr	r1, [r3, #0]
 80183fe:	7dfa      	ldrb	r2, [r7, #23]
 8018400:	481f      	ldr	r0, [pc, #124]	; (8018480 <etharp_output+0x200>)
 8018402:	4613      	mov	r3, r2
 8018404:	005b      	lsls	r3, r3, #1
 8018406:	4413      	add	r3, r2
 8018408:	00db      	lsls	r3, r3, #3
 801840a:	4403      	add	r3, r0
 801840c:	3304      	adds	r3, #4
 801840e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018410:	4299      	cmp	r1, r3
 8018412:	d10a      	bne.n	801842a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018414:	4a19      	ldr	r2, [pc, #100]	; (801847c <etharp_output+0x1fc>)
 8018416:	7dfb      	ldrb	r3, [r7, #23]
 8018418:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801841a:	7dfb      	ldrb	r3, [r7, #23]
 801841c:	461a      	mov	r2, r3
 801841e:	68b9      	ldr	r1, [r7, #8]
 8018420:	68f8      	ldr	r0, [r7, #12]
 8018422:	f7ff fe93 	bl	801814c <etharp_output_to_arp_index>
 8018426:	4603      	mov	r3, r0
 8018428:	e018      	b.n	801845c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801842a:	7dfb      	ldrb	r3, [r7, #23]
 801842c:	3301      	adds	r3, #1
 801842e:	75fb      	strb	r3, [r7, #23]
 8018430:	7dfb      	ldrb	r3, [r7, #23]
 8018432:	2b09      	cmp	r3, #9
 8018434:	d9ca      	bls.n	80183cc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018436:	68ba      	ldr	r2, [r7, #8]
 8018438:	69b9      	ldr	r1, [r7, #24]
 801843a:	68f8      	ldr	r0, [r7, #12]
 801843c:	f000 f822 	bl	8018484 <etharp_query>
 8018440:	4603      	mov	r3, r0
 8018442:	e00b      	b.n	801845c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801844a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801844e:	9300      	str	r3, [sp, #0]
 8018450:	69fb      	ldr	r3, [r7, #28]
 8018452:	68b9      	ldr	r1, [r7, #8]
 8018454:	68f8      	ldr	r0, [r7, #12]
 8018456:	f001 fd57 	bl	8019f08 <ethernet_output>
 801845a:	4603      	mov	r3, r0
}
 801845c:	4618      	mov	r0, r3
 801845e:	3720      	adds	r7, #32
 8018460:	46bd      	mov	sp, r7
 8018462:	bd80      	pop	{r7, pc}
 8018464:	0801ea84 	.word	0x0801ea84
 8018468:	0801ebd4 	.word	0x0801ebd4
 801846c:	0801eafc 	.word	0x0801eafc
 8018470:	0801ec24 	.word	0x0801ec24
 8018474:	0801ebc4 	.word	0x0801ebc4
 8018478:	0801f330 	.word	0x0801f330
 801847c:	20004cf8 	.word	0x20004cf8
 8018480:	20004c08 	.word	0x20004c08

08018484 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b08c      	sub	sp, #48	; 0x30
 8018488:	af02      	add	r7, sp, #8
 801848a:	60f8      	str	r0, [r7, #12]
 801848c:	60b9      	str	r1, [r7, #8]
 801848e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	332a      	adds	r3, #42	; 0x2a
 8018494:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018496:	23ff      	movs	r3, #255	; 0xff
 8018498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801849c:	2300      	movs	r3, #0
 801849e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80184a0:	68bb      	ldr	r3, [r7, #8]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	68f9      	ldr	r1, [r7, #12]
 80184a6:	4618      	mov	r0, r3
 80184a8:	f000 fe2a 	bl	8019100 <ip4_addr_isbroadcast_u32>
 80184ac:	4603      	mov	r3, r0
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d10c      	bne.n	80184cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80184b2:	68bb      	ldr	r3, [r7, #8]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80184ba:	2be0      	cmp	r3, #224	; 0xe0
 80184bc:	d006      	beq.n	80184cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80184be:	68bb      	ldr	r3, [r7, #8]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d003      	beq.n	80184cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80184c4:	68bb      	ldr	r3, [r7, #8]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d102      	bne.n	80184d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80184cc:	f06f 030f 	mvn.w	r3, #15
 80184d0:	e102      	b.n	80186d8 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80184d2:	68fa      	ldr	r2, [r7, #12]
 80184d4:	2101      	movs	r1, #1
 80184d6:	68b8      	ldr	r0, [r7, #8]
 80184d8:	f7ff fb5c 	bl	8017b94 <etharp_find_entry>
 80184dc:	4603      	mov	r3, r0
 80184de:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80184e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	da02      	bge.n	80184ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80184e8:	8a7b      	ldrh	r3, [r7, #18]
 80184ea:	b25b      	sxtb	r3, r3
 80184ec:	e0f4      	b.n	80186d8 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80184ee:	8a7b      	ldrh	r3, [r7, #18]
 80184f0:	2b7e      	cmp	r3, #126	; 0x7e
 80184f2:	d906      	bls.n	8018502 <etharp_query+0x7e>
 80184f4:	4b7a      	ldr	r3, [pc, #488]	; (80186e0 <etharp_query+0x25c>)
 80184f6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80184fa:	497a      	ldr	r1, [pc, #488]	; (80186e4 <etharp_query+0x260>)
 80184fc:	487a      	ldr	r0, [pc, #488]	; (80186e8 <etharp_query+0x264>)
 80184fe:	f001 ff61 	bl	801a3c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018502:	8a7b      	ldrh	r3, [r7, #18]
 8018504:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018506:	7c7a      	ldrb	r2, [r7, #17]
 8018508:	4978      	ldr	r1, [pc, #480]	; (80186ec <etharp_query+0x268>)
 801850a:	4613      	mov	r3, r2
 801850c:	005b      	lsls	r3, r3, #1
 801850e:	4413      	add	r3, r2
 8018510:	00db      	lsls	r3, r3, #3
 8018512:	440b      	add	r3, r1
 8018514:	3314      	adds	r3, #20
 8018516:	781b      	ldrb	r3, [r3, #0]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d115      	bne.n	8018548 <etharp_query+0xc4>
    is_new_entry = 1;
 801851c:	2301      	movs	r3, #1
 801851e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018520:	7c7a      	ldrb	r2, [r7, #17]
 8018522:	4972      	ldr	r1, [pc, #456]	; (80186ec <etharp_query+0x268>)
 8018524:	4613      	mov	r3, r2
 8018526:	005b      	lsls	r3, r3, #1
 8018528:	4413      	add	r3, r2
 801852a:	00db      	lsls	r3, r3, #3
 801852c:	440b      	add	r3, r1
 801852e:	3314      	adds	r3, #20
 8018530:	2201      	movs	r2, #1
 8018532:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018534:	7c7a      	ldrb	r2, [r7, #17]
 8018536:	496d      	ldr	r1, [pc, #436]	; (80186ec <etharp_query+0x268>)
 8018538:	4613      	mov	r3, r2
 801853a:	005b      	lsls	r3, r3, #1
 801853c:	4413      	add	r3, r2
 801853e:	00db      	lsls	r3, r3, #3
 8018540:	440b      	add	r3, r1
 8018542:	3308      	adds	r3, #8
 8018544:	68fa      	ldr	r2, [r7, #12]
 8018546:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018548:	7c7a      	ldrb	r2, [r7, #17]
 801854a:	4968      	ldr	r1, [pc, #416]	; (80186ec <etharp_query+0x268>)
 801854c:	4613      	mov	r3, r2
 801854e:	005b      	lsls	r3, r3, #1
 8018550:	4413      	add	r3, r2
 8018552:	00db      	lsls	r3, r3, #3
 8018554:	440b      	add	r3, r1
 8018556:	3314      	adds	r3, #20
 8018558:	781b      	ldrb	r3, [r3, #0]
 801855a:	2b01      	cmp	r3, #1
 801855c:	d011      	beq.n	8018582 <etharp_query+0xfe>
 801855e:	7c7a      	ldrb	r2, [r7, #17]
 8018560:	4962      	ldr	r1, [pc, #392]	; (80186ec <etharp_query+0x268>)
 8018562:	4613      	mov	r3, r2
 8018564:	005b      	lsls	r3, r3, #1
 8018566:	4413      	add	r3, r2
 8018568:	00db      	lsls	r3, r3, #3
 801856a:	440b      	add	r3, r1
 801856c:	3314      	adds	r3, #20
 801856e:	781b      	ldrb	r3, [r3, #0]
 8018570:	2b01      	cmp	r3, #1
 8018572:	d806      	bhi.n	8018582 <etharp_query+0xfe>
 8018574:	4b5a      	ldr	r3, [pc, #360]	; (80186e0 <etharp_query+0x25c>)
 8018576:	f240 32cf 	movw	r2, #975	; 0x3cf
 801857a:	495d      	ldr	r1, [pc, #372]	; (80186f0 <etharp_query+0x26c>)
 801857c:	485a      	ldr	r0, [pc, #360]	; (80186e8 <etharp_query+0x264>)
 801857e:	f001 ff21 	bl	801a3c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018582:	6a3b      	ldr	r3, [r7, #32]
 8018584:	2b00      	cmp	r3, #0
 8018586:	d102      	bne.n	801858e <etharp_query+0x10a>
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d10c      	bne.n	80185a8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801858e:	68b9      	ldr	r1, [r7, #8]
 8018590:	68f8      	ldr	r0, [r7, #12]
 8018592:	f000 f963 	bl	801885c <etharp_request>
 8018596:	4603      	mov	r3, r0
 8018598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d102      	bne.n	80185a8 <etharp_query+0x124>
      return result;
 80185a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80185a6:	e097      	b.n	80186d8 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d106      	bne.n	80185bc <etharp_query+0x138>
 80185ae:	4b4c      	ldr	r3, [pc, #304]	; (80186e0 <etharp_query+0x25c>)
 80185b0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80185b4:	494f      	ldr	r1, [pc, #316]	; (80186f4 <etharp_query+0x270>)
 80185b6:	484c      	ldr	r0, [pc, #304]	; (80186e8 <etharp_query+0x264>)
 80185b8:	f001 ff04 	bl	801a3c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80185bc:	7c7a      	ldrb	r2, [r7, #17]
 80185be:	494b      	ldr	r1, [pc, #300]	; (80186ec <etharp_query+0x268>)
 80185c0:	4613      	mov	r3, r2
 80185c2:	005b      	lsls	r3, r3, #1
 80185c4:	4413      	add	r3, r2
 80185c6:	00db      	lsls	r3, r3, #3
 80185c8:	440b      	add	r3, r1
 80185ca:	3314      	adds	r3, #20
 80185cc:	781b      	ldrb	r3, [r3, #0]
 80185ce:	2b01      	cmp	r3, #1
 80185d0:	d918      	bls.n	8018604 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80185d2:	4a49      	ldr	r2, [pc, #292]	; (80186f8 <etharp_query+0x274>)
 80185d4:	7c7b      	ldrb	r3, [r7, #17]
 80185d6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80185d8:	7c7a      	ldrb	r2, [r7, #17]
 80185da:	4613      	mov	r3, r2
 80185dc:	005b      	lsls	r3, r3, #1
 80185de:	4413      	add	r3, r2
 80185e0:	00db      	lsls	r3, r3, #3
 80185e2:	3308      	adds	r3, #8
 80185e4:	4a41      	ldr	r2, [pc, #260]	; (80186ec <etharp_query+0x268>)
 80185e6:	4413      	add	r3, r2
 80185e8:	1d1a      	adds	r2, r3, #4
 80185ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80185ee:	9300      	str	r3, [sp, #0]
 80185f0:	4613      	mov	r3, r2
 80185f2:	697a      	ldr	r2, [r7, #20]
 80185f4:	6879      	ldr	r1, [r7, #4]
 80185f6:	68f8      	ldr	r0, [r7, #12]
 80185f8:	f001 fc86 	bl	8019f08 <ethernet_output>
 80185fc:	4603      	mov	r3, r0
 80185fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018602:	e067      	b.n	80186d4 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018604:	7c7a      	ldrb	r2, [r7, #17]
 8018606:	4939      	ldr	r1, [pc, #228]	; (80186ec <etharp_query+0x268>)
 8018608:	4613      	mov	r3, r2
 801860a:	005b      	lsls	r3, r3, #1
 801860c:	4413      	add	r3, r2
 801860e:	00db      	lsls	r3, r3, #3
 8018610:	440b      	add	r3, r1
 8018612:	3314      	adds	r3, #20
 8018614:	781b      	ldrb	r3, [r3, #0]
 8018616:	2b01      	cmp	r3, #1
 8018618:	d15c      	bne.n	80186d4 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801861a:	2300      	movs	r3, #0
 801861c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018622:	e01c      	b.n	801865e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018624:	69fb      	ldr	r3, [r7, #28]
 8018626:	895a      	ldrh	r2, [r3, #10]
 8018628:	69fb      	ldr	r3, [r7, #28]
 801862a:	891b      	ldrh	r3, [r3, #8]
 801862c:	429a      	cmp	r2, r3
 801862e:	d10a      	bne.n	8018646 <etharp_query+0x1c2>
 8018630:	69fb      	ldr	r3, [r7, #28]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d006      	beq.n	8018646 <etharp_query+0x1c2>
 8018638:	4b29      	ldr	r3, [pc, #164]	; (80186e0 <etharp_query+0x25c>)
 801863a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801863e:	492f      	ldr	r1, [pc, #188]	; (80186fc <etharp_query+0x278>)
 8018640:	4829      	ldr	r0, [pc, #164]	; (80186e8 <etharp_query+0x264>)
 8018642:	f001 febf 	bl	801a3c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018646:	69fb      	ldr	r3, [r7, #28]
 8018648:	7b1b      	ldrb	r3, [r3, #12]
 801864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801864e:	2b00      	cmp	r3, #0
 8018650:	d002      	beq.n	8018658 <etharp_query+0x1d4>
        copy_needed = 1;
 8018652:	2301      	movs	r3, #1
 8018654:	61bb      	str	r3, [r7, #24]
        break;
 8018656:	e005      	b.n	8018664 <etharp_query+0x1e0>
      }
      p = p->next;
 8018658:	69fb      	ldr	r3, [r7, #28]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801865e:	69fb      	ldr	r3, [r7, #28]
 8018660:	2b00      	cmp	r3, #0
 8018662:	d1df      	bne.n	8018624 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8018664:	69bb      	ldr	r3, [r7, #24]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d007      	beq.n	801867a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801866a:	687a      	ldr	r2, [r7, #4]
 801866c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018670:	200e      	movs	r0, #14
 8018672:	f7f6 fb59 	bl	800ed28 <pbuf_clone>
 8018676:	61f8      	str	r0, [r7, #28]
 8018678:	e004      	b.n	8018684 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801867e:	69f8      	ldr	r0, [r7, #28]
 8018680:	f7f6 f980 	bl	800e984 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018684:	69fb      	ldr	r3, [r7, #28]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d021      	beq.n	80186ce <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801868a:	7c7a      	ldrb	r2, [r7, #17]
 801868c:	4917      	ldr	r1, [pc, #92]	; (80186ec <etharp_query+0x268>)
 801868e:	4613      	mov	r3, r2
 8018690:	005b      	lsls	r3, r3, #1
 8018692:	4413      	add	r3, r2
 8018694:	00db      	lsls	r3, r3, #3
 8018696:	440b      	add	r3, r1
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d00a      	beq.n	80186b4 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801869e:	7c7a      	ldrb	r2, [r7, #17]
 80186a0:	4912      	ldr	r1, [pc, #72]	; (80186ec <etharp_query+0x268>)
 80186a2:	4613      	mov	r3, r2
 80186a4:	005b      	lsls	r3, r3, #1
 80186a6:	4413      	add	r3, r2
 80186a8:	00db      	lsls	r3, r3, #3
 80186aa:	440b      	add	r3, r1
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	4618      	mov	r0, r3
 80186b0:	f7f6 f8c2 	bl	800e838 <pbuf_free>
      }
      arp_table[i].q = p;
 80186b4:	7c7a      	ldrb	r2, [r7, #17]
 80186b6:	490d      	ldr	r1, [pc, #52]	; (80186ec <etharp_query+0x268>)
 80186b8:	4613      	mov	r3, r2
 80186ba:	005b      	lsls	r3, r3, #1
 80186bc:	4413      	add	r3, r2
 80186be:	00db      	lsls	r3, r3, #3
 80186c0:	440b      	add	r3, r1
 80186c2:	69fa      	ldr	r2, [r7, #28]
 80186c4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80186c6:	2300      	movs	r3, #0
 80186c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80186cc:	e002      	b.n	80186d4 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80186ce:	23ff      	movs	r3, #255	; 0xff
 80186d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80186d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80186d8:	4618      	mov	r0, r3
 80186da:	3728      	adds	r7, #40	; 0x28
 80186dc:	46bd      	mov	sp, r7
 80186de:	bd80      	pop	{r7, pc}
 80186e0:	0801ea84 	.word	0x0801ea84
 80186e4:	0801ec30 	.word	0x0801ec30
 80186e8:	0801eafc 	.word	0x0801eafc
 80186ec:	20004c08 	.word	0x20004c08
 80186f0:	0801ec40 	.word	0x0801ec40
 80186f4:	0801ec24 	.word	0x0801ec24
 80186f8:	20004cf8 	.word	0x20004cf8
 80186fc:	0801ec68 	.word	0x0801ec68

08018700 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b08a      	sub	sp, #40	; 0x28
 8018704:	af02      	add	r7, sp, #8
 8018706:	60f8      	str	r0, [r7, #12]
 8018708:	60b9      	str	r1, [r7, #8]
 801870a:	607a      	str	r2, [r7, #4]
 801870c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801870e:	2300      	movs	r3, #0
 8018710:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d106      	bne.n	8018726 <etharp_raw+0x26>
 8018718:	4b3a      	ldr	r3, [pc, #232]	; (8018804 <etharp_raw+0x104>)
 801871a:	f240 4257 	movw	r2, #1111	; 0x457
 801871e:	493a      	ldr	r1, [pc, #232]	; (8018808 <etharp_raw+0x108>)
 8018720:	483a      	ldr	r0, [pc, #232]	; (801880c <etharp_raw+0x10c>)
 8018722:	f001 fe4f 	bl	801a3c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018726:	f44f 7220 	mov.w	r2, #640	; 0x280
 801872a:	211c      	movs	r1, #28
 801872c:	200e      	movs	r0, #14
 801872e:	f7f5 fda3 	bl	800e278 <pbuf_alloc>
 8018732:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018734:	69bb      	ldr	r3, [r7, #24]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d102      	bne.n	8018740 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801873a:	f04f 33ff 	mov.w	r3, #4294967295
 801873e:	e05d      	b.n	80187fc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018740:	69bb      	ldr	r3, [r7, #24]
 8018742:	895b      	ldrh	r3, [r3, #10]
 8018744:	2b1b      	cmp	r3, #27
 8018746:	d806      	bhi.n	8018756 <etharp_raw+0x56>
 8018748:	4b2e      	ldr	r3, [pc, #184]	; (8018804 <etharp_raw+0x104>)
 801874a:	f240 4263 	movw	r2, #1123	; 0x463
 801874e:	4930      	ldr	r1, [pc, #192]	; (8018810 <etharp_raw+0x110>)
 8018750:	482e      	ldr	r0, [pc, #184]	; (801880c <etharp_raw+0x10c>)
 8018752:	f001 fe37 	bl	801a3c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018756:	69bb      	ldr	r3, [r7, #24]
 8018758:	685b      	ldr	r3, [r3, #4]
 801875a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801875c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801875e:	4618      	mov	r0, r3
 8018760:	f7f4 fc7e 	bl	800d060 <lwip_htons>
 8018764:	4603      	mov	r3, r0
 8018766:	461a      	mov	r2, r3
 8018768:	697b      	ldr	r3, [r7, #20]
 801876a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018772:	2b06      	cmp	r3, #6
 8018774:	d006      	beq.n	8018784 <etharp_raw+0x84>
 8018776:	4b23      	ldr	r3, [pc, #140]	; (8018804 <etharp_raw+0x104>)
 8018778:	f240 426a 	movw	r2, #1130	; 0x46a
 801877c:	4925      	ldr	r1, [pc, #148]	; (8018814 <etharp_raw+0x114>)
 801877e:	4823      	ldr	r0, [pc, #140]	; (801880c <etharp_raw+0x10c>)
 8018780:	f001 fe20 	bl	801a3c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	3308      	adds	r3, #8
 8018788:	2206      	movs	r2, #6
 801878a:	6839      	ldr	r1, [r7, #0]
 801878c:	4618      	mov	r0, r3
 801878e:	f001 fe05 	bl	801a39c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018792:	697b      	ldr	r3, [r7, #20]
 8018794:	3312      	adds	r3, #18
 8018796:	2206      	movs	r2, #6
 8018798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801879a:	4618      	mov	r0, r3
 801879c:	f001 fdfe 	bl	801a39c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80187a0:	697b      	ldr	r3, [r7, #20]
 80187a2:	330e      	adds	r3, #14
 80187a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187a6:	6812      	ldr	r2, [r2, #0]
 80187a8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80187aa:	697b      	ldr	r3, [r7, #20]
 80187ac:	3318      	adds	r3, #24
 80187ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187b0:	6812      	ldr	r2, [r2, #0]
 80187b2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80187b4:	697b      	ldr	r3, [r7, #20]
 80187b6:	2200      	movs	r2, #0
 80187b8:	701a      	strb	r2, [r3, #0]
 80187ba:	2200      	movs	r2, #0
 80187bc:	f042 0201 	orr.w	r2, r2, #1
 80187c0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80187c2:	697b      	ldr	r3, [r7, #20]
 80187c4:	2200      	movs	r2, #0
 80187c6:	f042 0208 	orr.w	r2, r2, #8
 80187ca:	709a      	strb	r2, [r3, #2]
 80187cc:	2200      	movs	r2, #0
 80187ce:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80187d0:	697b      	ldr	r3, [r7, #20]
 80187d2:	2206      	movs	r2, #6
 80187d4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80187d6:	697b      	ldr	r3, [r7, #20]
 80187d8:	2204      	movs	r2, #4
 80187da:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80187dc:	f640 0306 	movw	r3, #2054	; 0x806
 80187e0:	9300      	str	r3, [sp, #0]
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	68ba      	ldr	r2, [r7, #8]
 80187e6:	69b9      	ldr	r1, [r7, #24]
 80187e8:	68f8      	ldr	r0, [r7, #12]
 80187ea:	f001 fb8d 	bl	8019f08 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80187ee:	69b8      	ldr	r0, [r7, #24]
 80187f0:	f7f6 f822 	bl	800e838 <pbuf_free>
  p = NULL;
 80187f4:	2300      	movs	r3, #0
 80187f6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80187f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80187fc:	4618      	mov	r0, r3
 80187fe:	3720      	adds	r7, #32
 8018800:	46bd      	mov	sp, r7
 8018802:	bd80      	pop	{r7, pc}
 8018804:	0801ea84 	.word	0x0801ea84
 8018808:	0801ebd4 	.word	0x0801ebd4
 801880c:	0801eafc 	.word	0x0801eafc
 8018810:	0801ec84 	.word	0x0801ec84
 8018814:	0801ecb8 	.word	0x0801ecb8

08018818 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b088      	sub	sp, #32
 801881c:	af04      	add	r7, sp, #16
 801881e:	60f8      	str	r0, [r7, #12]
 8018820:	60b9      	str	r1, [r7, #8]
 8018822:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018834:	2201      	movs	r2, #1
 8018836:	9203      	str	r2, [sp, #12]
 8018838:	68ba      	ldr	r2, [r7, #8]
 801883a:	9202      	str	r2, [sp, #8]
 801883c:	4a06      	ldr	r2, [pc, #24]	; (8018858 <etharp_request_dst+0x40>)
 801883e:	9201      	str	r2, [sp, #4]
 8018840:	9300      	str	r3, [sp, #0]
 8018842:	4603      	mov	r3, r0
 8018844:	687a      	ldr	r2, [r7, #4]
 8018846:	68f8      	ldr	r0, [r7, #12]
 8018848:	f7ff ff5a 	bl	8018700 <etharp_raw>
 801884c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801884e:	4618      	mov	r0, r3
 8018850:	3710      	adds	r7, #16
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}
 8018856:	bf00      	nop
 8018858:	0801f338 	.word	0x0801f338

0801885c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b082      	sub	sp, #8
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
 8018864:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018866:	4a05      	ldr	r2, [pc, #20]	; (801887c <etharp_request+0x20>)
 8018868:	6839      	ldr	r1, [r7, #0]
 801886a:	6878      	ldr	r0, [r7, #4]
 801886c:	f7ff ffd4 	bl	8018818 <etharp_request_dst>
 8018870:	4603      	mov	r3, r0
}
 8018872:	4618      	mov	r0, r3
 8018874:	3708      	adds	r7, #8
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}
 801887a:	bf00      	nop
 801887c:	0801f330 	.word	0x0801f330

08018880 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b08e      	sub	sp, #56	; 0x38
 8018884:	af04      	add	r7, sp, #16
 8018886:	6078      	str	r0, [r7, #4]
 8018888:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801888a:	4b79      	ldr	r3, [pc, #484]	; (8018a70 <icmp_input+0x1f0>)
 801888c:	689b      	ldr	r3, [r3, #8]
 801888e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018892:	781b      	ldrb	r3, [r3, #0]
 8018894:	f003 030f 	and.w	r3, r3, #15
 8018898:	b2db      	uxtb	r3, r3
 801889a:	009b      	lsls	r3, r3, #2
 801889c:	b2db      	uxtb	r3, r3
 801889e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80188a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80188a2:	2b13      	cmp	r3, #19
 80188a4:	f240 80cd 	bls.w	8018a42 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	895b      	ldrh	r3, [r3, #10]
 80188ac:	2b03      	cmp	r3, #3
 80188ae:	f240 80ca 	bls.w	8018a46 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	685b      	ldr	r3, [r3, #4]
 80188b6:	781b      	ldrb	r3, [r3, #0]
 80188b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80188bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	f000 80b7 	beq.w	8018a34 <icmp_input+0x1b4>
 80188c6:	2b08      	cmp	r3, #8
 80188c8:	f040 80b7 	bne.w	8018a3a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80188cc:	4b69      	ldr	r3, [pc, #420]	; (8018a74 <icmp_input+0x1f4>)
 80188ce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80188d0:	4b67      	ldr	r3, [pc, #412]	; (8018a70 <icmp_input+0x1f0>)
 80188d2:	695b      	ldr	r3, [r3, #20]
 80188d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80188d8:	2be0      	cmp	r3, #224	; 0xe0
 80188da:	f000 80bb 	beq.w	8018a54 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80188de:	4b64      	ldr	r3, [pc, #400]	; (8018a70 <icmp_input+0x1f0>)
 80188e0:	695a      	ldr	r2, [r3, #20]
 80188e2:	4b63      	ldr	r3, [pc, #396]	; (8018a70 <icmp_input+0x1f0>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	4619      	mov	r1, r3
 80188e8:	4610      	mov	r0, r2
 80188ea:	f000 fc09 	bl	8019100 <ip4_addr_isbroadcast_u32>
 80188ee:	4603      	mov	r3, r0
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	f040 80b1 	bne.w	8018a58 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	891b      	ldrh	r3, [r3, #8]
 80188fa:	2b07      	cmp	r3, #7
 80188fc:	f240 80a5 	bls.w	8018a4a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018900:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018902:	330e      	adds	r3, #14
 8018904:	4619      	mov	r1, r3
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f7f5 ff00 	bl	800e70c <pbuf_add_header>
 801890c:	4603      	mov	r3, r0
 801890e:	2b00      	cmp	r3, #0
 8018910:	d04b      	beq.n	80189aa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	891a      	ldrh	r2, [r3, #8]
 8018916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018918:	4413      	add	r3, r2
 801891a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	891b      	ldrh	r3, [r3, #8]
 8018920:	8b7a      	ldrh	r2, [r7, #26]
 8018922:	429a      	cmp	r2, r3
 8018924:	f0c0 809a 	bcc.w	8018a5c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018928:	8b7b      	ldrh	r3, [r7, #26]
 801892a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801892e:	4619      	mov	r1, r3
 8018930:	200e      	movs	r0, #14
 8018932:	f7f5 fca1 	bl	800e278 <pbuf_alloc>
 8018936:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018938:	697b      	ldr	r3, [r7, #20]
 801893a:	2b00      	cmp	r3, #0
 801893c:	f000 8090 	beq.w	8018a60 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018940:	697b      	ldr	r3, [r7, #20]
 8018942:	895b      	ldrh	r3, [r3, #10]
 8018944:	461a      	mov	r2, r3
 8018946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018948:	3308      	adds	r3, #8
 801894a:	429a      	cmp	r2, r3
 801894c:	d203      	bcs.n	8018956 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801894e:	6978      	ldr	r0, [r7, #20]
 8018950:	f7f5 ff72 	bl	800e838 <pbuf_free>
          goto icmperr;
 8018954:	e085      	b.n	8018a62 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018956:	697b      	ldr	r3, [r7, #20]
 8018958:	685b      	ldr	r3, [r3, #4]
 801895a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801895c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801895e:	4618      	mov	r0, r3
 8018960:	f001 fd1c 	bl	801a39c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018966:	4619      	mov	r1, r3
 8018968:	6978      	ldr	r0, [r7, #20]
 801896a:	f7f5 fedf 	bl	800e72c <pbuf_remove_header>
 801896e:	4603      	mov	r3, r0
 8018970:	2b00      	cmp	r3, #0
 8018972:	d009      	beq.n	8018988 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018974:	4b40      	ldr	r3, [pc, #256]	; (8018a78 <icmp_input+0x1f8>)
 8018976:	22b6      	movs	r2, #182	; 0xb6
 8018978:	4940      	ldr	r1, [pc, #256]	; (8018a7c <icmp_input+0x1fc>)
 801897a:	4841      	ldr	r0, [pc, #260]	; (8018a80 <icmp_input+0x200>)
 801897c:	f001 fd22 	bl	801a3c4 <iprintf>
          pbuf_free(r);
 8018980:	6978      	ldr	r0, [r7, #20]
 8018982:	f7f5 ff59 	bl	800e838 <pbuf_free>
          goto icmperr;
 8018986:	e06c      	b.n	8018a62 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018988:	6879      	ldr	r1, [r7, #4]
 801898a:	6978      	ldr	r0, [r7, #20]
 801898c:	f7f6 f888 	bl	800eaa0 <pbuf_copy>
 8018990:	4603      	mov	r3, r0
 8018992:	2b00      	cmp	r3, #0
 8018994:	d003      	beq.n	801899e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018996:	6978      	ldr	r0, [r7, #20]
 8018998:	f7f5 ff4e 	bl	800e838 <pbuf_free>
          goto icmperr;
 801899c:	e061      	b.n	8018a62 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801899e:	6878      	ldr	r0, [r7, #4]
 80189a0:	f7f5 ff4a 	bl	800e838 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80189a4:	697b      	ldr	r3, [r7, #20]
 80189a6:	607b      	str	r3, [r7, #4]
 80189a8:	e00f      	b.n	80189ca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80189aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189ac:	330e      	adds	r3, #14
 80189ae:	4619      	mov	r1, r3
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	f7f5 febb 	bl	800e72c <pbuf_remove_header>
 80189b6:	4603      	mov	r3, r0
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d006      	beq.n	80189ca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80189bc:	4b2e      	ldr	r3, [pc, #184]	; (8018a78 <icmp_input+0x1f8>)
 80189be:	22c7      	movs	r2, #199	; 0xc7
 80189c0:	4930      	ldr	r1, [pc, #192]	; (8018a84 <icmp_input+0x204>)
 80189c2:	482f      	ldr	r0, [pc, #188]	; (8018a80 <icmp_input+0x200>)
 80189c4:	f001 fcfe 	bl	801a3c4 <iprintf>
          goto icmperr;
 80189c8:	e04b      	b.n	8018a62 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	685b      	ldr	r3, [r3, #4]
 80189ce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80189d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189d2:	4619      	mov	r1, r3
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	f7f5 fe99 	bl	800e70c <pbuf_add_header>
 80189da:	4603      	mov	r3, r0
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d12b      	bne.n	8018a38 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	685b      	ldr	r3, [r3, #4]
 80189e4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80189e6:	69fb      	ldr	r3, [r7, #28]
 80189e8:	681a      	ldr	r2, [r3, #0]
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80189ee:	4b20      	ldr	r3, [pc, #128]	; (8018a70 <icmp_input+0x1f0>)
 80189f0:	691a      	ldr	r2, [r3, #16]
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	2200      	movs	r2, #0
 80189fa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80189fc:	693b      	ldr	r3, [r7, #16]
 80189fe:	2200      	movs	r2, #0
 8018a00:	709a      	strb	r2, [r3, #2]
 8018a02:	2200      	movs	r2, #0
 8018a04:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	22ff      	movs	r2, #255	; 0xff
 8018a0a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	2200      	movs	r2, #0
 8018a10:	729a      	strb	r2, [r3, #10]
 8018a12:	2200      	movs	r2, #0
 8018a14:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018a16:	683b      	ldr	r3, [r7, #0]
 8018a18:	9302      	str	r3, [sp, #8]
 8018a1a:	2301      	movs	r3, #1
 8018a1c:	9301      	str	r3, [sp, #4]
 8018a1e:	2300      	movs	r3, #0
 8018a20:	9300      	str	r3, [sp, #0]
 8018a22:	23ff      	movs	r3, #255	; 0xff
 8018a24:	2200      	movs	r2, #0
 8018a26:	69f9      	ldr	r1, [r7, #28]
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	f000 fa91 	bl	8018f50 <ip4_output_if>
 8018a2e:	4603      	mov	r3, r0
 8018a30:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018a32:	e001      	b.n	8018a38 <icmp_input+0x1b8>
      break;
 8018a34:	bf00      	nop
 8018a36:	e000      	b.n	8018a3a <icmp_input+0x1ba>
      break;
 8018a38:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018a3a:	6878      	ldr	r0, [r7, #4]
 8018a3c:	f7f5 fefc 	bl	800e838 <pbuf_free>
  return;
 8018a40:	e013      	b.n	8018a6a <icmp_input+0x1ea>
    goto lenerr;
 8018a42:	bf00      	nop
 8018a44:	e002      	b.n	8018a4c <icmp_input+0x1cc>
    goto lenerr;
 8018a46:	bf00      	nop
 8018a48:	e000      	b.n	8018a4c <icmp_input+0x1cc>
        goto lenerr;
 8018a4a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018a4c:	6878      	ldr	r0, [r7, #4]
 8018a4e:	f7f5 fef3 	bl	800e838 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018a52:	e00a      	b.n	8018a6a <icmp_input+0x1ea>
        goto icmperr;
 8018a54:	bf00      	nop
 8018a56:	e004      	b.n	8018a62 <icmp_input+0x1e2>
        goto icmperr;
 8018a58:	bf00      	nop
 8018a5a:	e002      	b.n	8018a62 <icmp_input+0x1e2>
          goto icmperr;
 8018a5c:	bf00      	nop
 8018a5e:	e000      	b.n	8018a62 <icmp_input+0x1e2>
          goto icmperr;
 8018a60:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f7f5 fee8 	bl	800e838 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018a68:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018a6a:	3728      	adds	r7, #40	; 0x28
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	bd80      	pop	{r7, pc}
 8018a70:	2000839c 	.word	0x2000839c
 8018a74:	200083b0 	.word	0x200083b0
 8018a78:	0801ecfc 	.word	0x0801ecfc
 8018a7c:	0801ed34 	.word	0x0801ed34
 8018a80:	0801ed6c 	.word	0x0801ed6c
 8018a84:	0801ed94 	.word	0x0801ed94

08018a88 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b082      	sub	sp, #8
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
 8018a90:	460b      	mov	r3, r1
 8018a92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018a94:	78fb      	ldrb	r3, [r7, #3]
 8018a96:	461a      	mov	r2, r3
 8018a98:	2103      	movs	r1, #3
 8018a9a:	6878      	ldr	r0, [r7, #4]
 8018a9c:	f000 f814 	bl	8018ac8 <icmp_send_response>
}
 8018aa0:	bf00      	nop
 8018aa2:	3708      	adds	r7, #8
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}

08018aa8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b082      	sub	sp, #8
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	460b      	mov	r3, r1
 8018ab2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018ab4:	78fb      	ldrb	r3, [r7, #3]
 8018ab6:	461a      	mov	r2, r3
 8018ab8:	210b      	movs	r1, #11
 8018aba:	6878      	ldr	r0, [r7, #4]
 8018abc:	f000 f804 	bl	8018ac8 <icmp_send_response>
}
 8018ac0:	bf00      	nop
 8018ac2:	3708      	adds	r7, #8
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd80      	pop	{r7, pc}

08018ac8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b08c      	sub	sp, #48	; 0x30
 8018acc:	af04      	add	r7, sp, #16
 8018ace:	6078      	str	r0, [r7, #4]
 8018ad0:	460b      	mov	r3, r1
 8018ad2:	70fb      	strb	r3, [r7, #3]
 8018ad4:	4613      	mov	r3, r2
 8018ad6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018ad8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018adc:	2124      	movs	r1, #36	; 0x24
 8018ade:	2022      	movs	r0, #34	; 0x22
 8018ae0:	f7f5 fbca 	bl	800e278 <pbuf_alloc>
 8018ae4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018ae6:	69fb      	ldr	r3, [r7, #28]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d04c      	beq.n	8018b86 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018aec:	69fb      	ldr	r3, [r7, #28]
 8018aee:	895b      	ldrh	r3, [r3, #10]
 8018af0:	2b23      	cmp	r3, #35	; 0x23
 8018af2:	d806      	bhi.n	8018b02 <icmp_send_response+0x3a>
 8018af4:	4b26      	ldr	r3, [pc, #152]	; (8018b90 <icmp_send_response+0xc8>)
 8018af6:	f240 1269 	movw	r2, #361	; 0x169
 8018afa:	4926      	ldr	r1, [pc, #152]	; (8018b94 <icmp_send_response+0xcc>)
 8018afc:	4826      	ldr	r0, [pc, #152]	; (8018b98 <icmp_send_response+0xd0>)
 8018afe:	f001 fc61 	bl	801a3c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	685b      	ldr	r3, [r3, #4]
 8018b06:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018b08:	69fb      	ldr	r3, [r7, #28]
 8018b0a:	685b      	ldr	r3, [r3, #4]
 8018b0c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018b0e:	697b      	ldr	r3, [r7, #20]
 8018b10:	78fa      	ldrb	r2, [r7, #3]
 8018b12:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018b14:	697b      	ldr	r3, [r7, #20]
 8018b16:	78ba      	ldrb	r2, [r7, #2]
 8018b18:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	2200      	movs	r2, #0
 8018b1e:	711a      	strb	r2, [r3, #4]
 8018b20:	2200      	movs	r2, #0
 8018b22:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018b24:	697b      	ldr	r3, [r7, #20]
 8018b26:	2200      	movs	r2, #0
 8018b28:	719a      	strb	r2, [r3, #6]
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018b2e:	69fb      	ldr	r3, [r7, #28]
 8018b30:	685b      	ldr	r3, [r3, #4]
 8018b32:	f103 0008 	add.w	r0, r3, #8
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	685b      	ldr	r3, [r3, #4]
 8018b3a:	221c      	movs	r2, #28
 8018b3c:	4619      	mov	r1, r3
 8018b3e:	f001 fc2d 	bl	801a39c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018b42:	69bb      	ldr	r3, [r7, #24]
 8018b44:	68db      	ldr	r3, [r3, #12]
 8018b46:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018b48:	f107 030c 	add.w	r3, r7, #12
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f000 f825 	bl	8018b9c <ip4_route>
 8018b52:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018b54:	693b      	ldr	r3, [r7, #16]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d011      	beq.n	8018b7e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018b5a:	697b      	ldr	r3, [r7, #20]
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	709a      	strb	r2, [r3, #2]
 8018b60:	2200      	movs	r2, #0
 8018b62:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018b64:	f107 020c 	add.w	r2, r7, #12
 8018b68:	693b      	ldr	r3, [r7, #16]
 8018b6a:	9302      	str	r3, [sp, #8]
 8018b6c:	2301      	movs	r3, #1
 8018b6e:	9301      	str	r3, [sp, #4]
 8018b70:	2300      	movs	r3, #0
 8018b72:	9300      	str	r3, [sp, #0]
 8018b74:	23ff      	movs	r3, #255	; 0xff
 8018b76:	2100      	movs	r1, #0
 8018b78:	69f8      	ldr	r0, [r7, #28]
 8018b7a:	f000 f9e9 	bl	8018f50 <ip4_output_if>
  }
  pbuf_free(q);
 8018b7e:	69f8      	ldr	r0, [r7, #28]
 8018b80:	f7f5 fe5a 	bl	800e838 <pbuf_free>
 8018b84:	e000      	b.n	8018b88 <icmp_send_response+0xc0>
    return;
 8018b86:	bf00      	nop
}
 8018b88:	3720      	adds	r7, #32
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	bd80      	pop	{r7, pc}
 8018b8e:	bf00      	nop
 8018b90:	0801ecfc 	.word	0x0801ecfc
 8018b94:	0801edc8 	.word	0x0801edc8
 8018b98:	0801ed6c 	.word	0x0801ed6c

08018b9c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018b9c:	b480      	push	{r7}
 8018b9e:	b085      	sub	sp, #20
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018ba4:	4b33      	ldr	r3, [pc, #204]	; (8018c74 <ip4_route+0xd8>)
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	60fb      	str	r3, [r7, #12]
 8018baa:	e036      	b.n	8018c1a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018bb2:	f003 0301 	and.w	r3, r3, #1
 8018bb6:	b2db      	uxtb	r3, r3
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d02b      	beq.n	8018c14 <ip4_route+0x78>
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018bc2:	089b      	lsrs	r3, r3, #2
 8018bc4:	f003 0301 	and.w	r3, r3, #1
 8018bc8:	b2db      	uxtb	r3, r3
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d022      	beq.n	8018c14 <ip4_route+0x78>
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	3304      	adds	r3, #4
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d01d      	beq.n	8018c14 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681a      	ldr	r2, [r3, #0]
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	3304      	adds	r3, #4
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	405a      	eors	r2, r3
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	3308      	adds	r3, #8
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	4013      	ands	r3, r2
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d101      	bne.n	8018bf4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	e038      	b.n	8018c66 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018bfa:	f003 0302 	and.w	r3, r3, #2
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d108      	bne.n	8018c14 <ip4_route+0x78>
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	681a      	ldr	r2, [r3, #0]
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	330c      	adds	r3, #12
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	429a      	cmp	r2, r3
 8018c0e:	d101      	bne.n	8018c14 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	e028      	b.n	8018c66 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	60fb      	str	r3, [r7, #12]
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d1c5      	bne.n	8018bac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018c20:	4b15      	ldr	r3, [pc, #84]	; (8018c78 <ip4_route+0xdc>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d01a      	beq.n	8018c5e <ip4_route+0xc2>
 8018c28:	4b13      	ldr	r3, [pc, #76]	; (8018c78 <ip4_route+0xdc>)
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c30:	f003 0301 	and.w	r3, r3, #1
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d012      	beq.n	8018c5e <ip4_route+0xc2>
 8018c38:	4b0f      	ldr	r3, [pc, #60]	; (8018c78 <ip4_route+0xdc>)
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c40:	f003 0304 	and.w	r3, r3, #4
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d00a      	beq.n	8018c5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018c48:	4b0b      	ldr	r3, [pc, #44]	; (8018c78 <ip4_route+0xdc>)
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	3304      	adds	r3, #4
 8018c4e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d004      	beq.n	8018c5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	b2db      	uxtb	r3, r3
 8018c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8018c5c:	d101      	bne.n	8018c62 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018c5e:	2300      	movs	r3, #0
 8018c60:	e001      	b.n	8018c66 <ip4_route+0xca>
  }

  return netif_default;
 8018c62:	4b05      	ldr	r3, [pc, #20]	; (8018c78 <ip4_route+0xdc>)
 8018c64:	681b      	ldr	r3, [r3, #0]
}
 8018c66:	4618      	mov	r0, r3
 8018c68:	3714      	adds	r7, #20
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c70:	4770      	bx	lr
 8018c72:	bf00      	nop
 8018c74:	2000bac0 	.word	0x2000bac0
 8018c78:	2000bac4 	.word	0x2000bac4

08018c7c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b082      	sub	sp, #8
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c8a:	f003 0301 	and.w	r3, r3, #1
 8018c8e:	b2db      	uxtb	r3, r3
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d016      	beq.n	8018cc2 <ip4_input_accept+0x46>
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	3304      	adds	r3, #4
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d011      	beq.n	8018cc2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018c9e:	4b0b      	ldr	r3, [pc, #44]	; (8018ccc <ip4_input_accept+0x50>)
 8018ca0:	695a      	ldr	r2, [r3, #20]
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	3304      	adds	r3, #4
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	429a      	cmp	r2, r3
 8018caa:	d008      	beq.n	8018cbe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018cac:	4b07      	ldr	r3, [pc, #28]	; (8018ccc <ip4_input_accept+0x50>)
 8018cae:	695b      	ldr	r3, [r3, #20]
 8018cb0:	6879      	ldr	r1, [r7, #4]
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	f000 fa24 	bl	8019100 <ip4_addr_isbroadcast_u32>
 8018cb8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d001      	beq.n	8018cc2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018cbe:	2301      	movs	r3, #1
 8018cc0:	e000      	b.n	8018cc4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018cc2:	2300      	movs	r3, #0
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3708      	adds	r7, #8
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	2000839c 	.word	0x2000839c

08018cd0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b088      	sub	sp, #32
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
 8018cd8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018cda:	2301      	movs	r3, #1
 8018cdc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	685b      	ldr	r3, [r3, #4]
 8018ce2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8018ce4:	69fb      	ldr	r3, [r7, #28]
 8018ce6:	781b      	ldrb	r3, [r3, #0]
 8018ce8:	091b      	lsrs	r3, r3, #4
 8018cea:	b2db      	uxtb	r3, r3
 8018cec:	2b04      	cmp	r3, #4
 8018cee:	d004      	beq.n	8018cfa <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018cf0:	6878      	ldr	r0, [r7, #4]
 8018cf2:	f7f5 fda1 	bl	800e838 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	e121      	b.n	8018f3e <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018cfa:	69fb      	ldr	r3, [r7, #28]
 8018cfc:	781b      	ldrb	r3, [r3, #0]
 8018cfe:	f003 030f 	and.w	r3, r3, #15
 8018d02:	b2db      	uxtb	r3, r3
 8018d04:	009b      	lsls	r3, r3, #2
 8018d06:	b2db      	uxtb	r3, r3
 8018d08:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018d0a:	69fb      	ldr	r3, [r7, #28]
 8018d0c:	885b      	ldrh	r3, [r3, #2]
 8018d0e:	b29b      	uxth	r3, r3
 8018d10:	4618      	mov	r0, r3
 8018d12:	f7f4 f9a5 	bl	800d060 <lwip_htons>
 8018d16:	4603      	mov	r3, r0
 8018d18:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	891b      	ldrh	r3, [r3, #8]
 8018d1e:	8a3a      	ldrh	r2, [r7, #16]
 8018d20:	429a      	cmp	r2, r3
 8018d22:	d204      	bcs.n	8018d2e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018d24:	8a3b      	ldrh	r3, [r7, #16]
 8018d26:	4619      	mov	r1, r3
 8018d28:	6878      	ldr	r0, [r7, #4]
 8018d2a:	f7f5 fbff 	bl	800e52c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	895b      	ldrh	r3, [r3, #10]
 8018d32:	8a7a      	ldrh	r2, [r7, #18]
 8018d34:	429a      	cmp	r2, r3
 8018d36:	d807      	bhi.n	8018d48 <ip4_input+0x78>
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	891b      	ldrh	r3, [r3, #8]
 8018d3c:	8a3a      	ldrh	r2, [r7, #16]
 8018d3e:	429a      	cmp	r2, r3
 8018d40:	d802      	bhi.n	8018d48 <ip4_input+0x78>
 8018d42:	8a7b      	ldrh	r3, [r7, #18]
 8018d44:	2b13      	cmp	r3, #19
 8018d46:	d804      	bhi.n	8018d52 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	f7f5 fd75 	bl	800e838 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	e0f5      	b.n	8018f3e <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018d52:	69fb      	ldr	r3, [r7, #28]
 8018d54:	691b      	ldr	r3, [r3, #16]
 8018d56:	4a7c      	ldr	r2, [pc, #496]	; (8018f48 <ip4_input+0x278>)
 8018d58:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018d5a:	69fb      	ldr	r3, [r7, #28]
 8018d5c:	68db      	ldr	r3, [r3, #12]
 8018d5e:	4a7a      	ldr	r2, [pc, #488]	; (8018f48 <ip4_input+0x278>)
 8018d60:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018d62:	4b79      	ldr	r3, [pc, #484]	; (8018f48 <ip4_input+0x278>)
 8018d64:	695b      	ldr	r3, [r3, #20]
 8018d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018d6a:	2be0      	cmp	r3, #224	; 0xe0
 8018d6c:	d112      	bne.n	8018d94 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018d74:	f003 0301 	and.w	r3, r3, #1
 8018d78:	b2db      	uxtb	r3, r3
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d007      	beq.n	8018d8e <ip4_input+0xbe>
 8018d7e:	683b      	ldr	r3, [r7, #0]
 8018d80:	3304      	adds	r3, #4
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d002      	beq.n	8018d8e <ip4_input+0xbe>
      netif = inp;
 8018d88:	683b      	ldr	r3, [r7, #0]
 8018d8a:	61bb      	str	r3, [r7, #24]
 8018d8c:	e02a      	b.n	8018de4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8018d8e:	2300      	movs	r3, #0
 8018d90:	61bb      	str	r3, [r7, #24]
 8018d92:	e027      	b.n	8018de4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018d94:	6838      	ldr	r0, [r7, #0]
 8018d96:	f7ff ff71 	bl	8018c7c <ip4_input_accept>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d002      	beq.n	8018da6 <ip4_input+0xd6>
      netif = inp;
 8018da0:	683b      	ldr	r3, [r7, #0]
 8018da2:	61bb      	str	r3, [r7, #24]
 8018da4:	e01e      	b.n	8018de4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8018da6:	2300      	movs	r3, #0
 8018da8:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018daa:	4b67      	ldr	r3, [pc, #412]	; (8018f48 <ip4_input+0x278>)
 8018dac:	695b      	ldr	r3, [r3, #20]
 8018dae:	b2db      	uxtb	r3, r3
 8018db0:	2b7f      	cmp	r3, #127	; 0x7f
 8018db2:	d017      	beq.n	8018de4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018db4:	4b65      	ldr	r3, [pc, #404]	; (8018f4c <ip4_input+0x27c>)
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	61bb      	str	r3, [r7, #24]
 8018dba:	e00e      	b.n	8018dda <ip4_input+0x10a>
          if (netif == inp) {
 8018dbc:	69ba      	ldr	r2, [r7, #24]
 8018dbe:	683b      	ldr	r3, [r7, #0]
 8018dc0:	429a      	cmp	r2, r3
 8018dc2:	d006      	beq.n	8018dd2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018dc4:	69b8      	ldr	r0, [r7, #24]
 8018dc6:	f7ff ff59 	bl	8018c7c <ip4_input_accept>
 8018dca:	4603      	mov	r3, r0
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d108      	bne.n	8018de2 <ip4_input+0x112>
 8018dd0:	e000      	b.n	8018dd4 <ip4_input+0x104>
            continue;
 8018dd2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018dd4:	69bb      	ldr	r3, [r7, #24]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	61bb      	str	r3, [r7, #24]
 8018dda:	69bb      	ldr	r3, [r7, #24]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d1ed      	bne.n	8018dbc <ip4_input+0xec>
 8018de0:	e000      	b.n	8018de4 <ip4_input+0x114>
            break;
 8018de2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018de4:	69bb      	ldr	r3, [r7, #24]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d111      	bne.n	8018e0e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018dea:	69fb      	ldr	r3, [r7, #28]
 8018dec:	7a5b      	ldrb	r3, [r3, #9]
 8018dee:	2b11      	cmp	r3, #17
 8018df0:	d10d      	bne.n	8018e0e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018df2:	8a7b      	ldrh	r3, [r7, #18]
 8018df4:	69fa      	ldr	r2, [r7, #28]
 8018df6:	4413      	add	r3, r2
 8018df8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	885b      	ldrh	r3, [r3, #2]
 8018dfe:	b29b      	uxth	r3, r3
 8018e00:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8018e04:	d103      	bne.n	8018e0e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018e0e:	697b      	ldr	r3, [r7, #20]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d017      	beq.n	8018e44 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018e14:	4b4c      	ldr	r3, [pc, #304]	; (8018f48 <ip4_input+0x278>)
 8018e16:	691b      	ldr	r3, [r3, #16]
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d013      	beq.n	8018e44 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018e1c:	4b4a      	ldr	r3, [pc, #296]	; (8018f48 <ip4_input+0x278>)
 8018e1e:	691b      	ldr	r3, [r3, #16]
 8018e20:	6839      	ldr	r1, [r7, #0]
 8018e22:	4618      	mov	r0, r3
 8018e24:	f000 f96c 	bl	8019100 <ip4_addr_isbroadcast_u32>
 8018e28:	4603      	mov	r3, r0
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d105      	bne.n	8018e3a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018e2e:	4b46      	ldr	r3, [pc, #280]	; (8018f48 <ip4_input+0x278>)
 8018e30:	691b      	ldr	r3, [r3, #16]
 8018e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018e36:	2be0      	cmp	r3, #224	; 0xe0
 8018e38:	d104      	bne.n	8018e44 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018e3a:	6878      	ldr	r0, [r7, #4]
 8018e3c:	f7f5 fcfc 	bl	800e838 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018e40:	2300      	movs	r3, #0
 8018e42:	e07c      	b.n	8018f3e <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018e44:	69bb      	ldr	r3, [r7, #24]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d104      	bne.n	8018e54 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018e4a:	6878      	ldr	r0, [r7, #4]
 8018e4c:	f7f5 fcf4 	bl	800e838 <pbuf_free>
    return ERR_OK;
 8018e50:	2300      	movs	r3, #0
 8018e52:	e074      	b.n	8018f3e <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018e54:	69fb      	ldr	r3, [r7, #28]
 8018e56:	88db      	ldrh	r3, [r3, #6]
 8018e58:	b29b      	uxth	r3, r3
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018e60:	4013      	ands	r3, r2
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d00b      	beq.n	8018e7e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018e66:	6878      	ldr	r0, [r7, #4]
 8018e68:	f000 fc90 	bl	801978c <ip4_reass>
 8018e6c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d101      	bne.n	8018e78 <ip4_input+0x1a8>
      return ERR_OK;
 8018e74:	2300      	movs	r3, #0
 8018e76:	e062      	b.n	8018f3e <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	685b      	ldr	r3, [r3, #4]
 8018e7c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018e7e:	4a32      	ldr	r2, [pc, #200]	; (8018f48 <ip4_input+0x278>)
 8018e80:	69bb      	ldr	r3, [r7, #24]
 8018e82:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018e84:	4a30      	ldr	r2, [pc, #192]	; (8018f48 <ip4_input+0x278>)
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018e8a:	4a2f      	ldr	r2, [pc, #188]	; (8018f48 <ip4_input+0x278>)
 8018e8c:	69fb      	ldr	r3, [r7, #28]
 8018e8e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018e90:	69fb      	ldr	r3, [r7, #28]
 8018e92:	781b      	ldrb	r3, [r3, #0]
 8018e94:	f003 030f 	and.w	r3, r3, #15
 8018e98:	b2db      	uxtb	r3, r3
 8018e9a:	009b      	lsls	r3, r3, #2
 8018e9c:	b2db      	uxtb	r3, r3
 8018e9e:	b29a      	uxth	r2, r3
 8018ea0:	4b29      	ldr	r3, [pc, #164]	; (8018f48 <ip4_input+0x278>)
 8018ea2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018ea4:	8a7b      	ldrh	r3, [r7, #18]
 8018ea6:	4619      	mov	r1, r3
 8018ea8:	6878      	ldr	r0, [r7, #4]
 8018eaa:	f7f5 fc3f 	bl	800e72c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018eae:	69fb      	ldr	r3, [r7, #28]
 8018eb0:	7a5b      	ldrb	r3, [r3, #9]
 8018eb2:	2b06      	cmp	r3, #6
 8018eb4:	d009      	beq.n	8018eca <ip4_input+0x1fa>
 8018eb6:	2b11      	cmp	r3, #17
 8018eb8:	d002      	beq.n	8018ec0 <ip4_input+0x1f0>
 8018eba:	2b01      	cmp	r3, #1
 8018ebc:	d00a      	beq.n	8018ed4 <ip4_input+0x204>
 8018ebe:	e00e      	b.n	8018ede <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018ec0:	6839      	ldr	r1, [r7, #0]
 8018ec2:	6878      	ldr	r0, [r7, #4]
 8018ec4:	f7fc fa26 	bl	8015314 <udp_input>
        break;
 8018ec8:	e026      	b.n	8018f18 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018eca:	6839      	ldr	r1, [r7, #0]
 8018ecc:	6878      	ldr	r0, [r7, #4]
 8018ece:	f7f7 fdd5 	bl	8010a7c <tcp_input>
        break;
 8018ed2:	e021      	b.n	8018f18 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018ed4:	6839      	ldr	r1, [r7, #0]
 8018ed6:	6878      	ldr	r0, [r7, #4]
 8018ed8:	f7ff fcd2 	bl	8018880 <icmp_input>
        break;
 8018edc:	e01c      	b.n	8018f18 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018ede:	4b1a      	ldr	r3, [pc, #104]	; (8018f48 <ip4_input+0x278>)
 8018ee0:	695b      	ldr	r3, [r3, #20]
 8018ee2:	69b9      	ldr	r1, [r7, #24]
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f000 f90b 	bl	8019100 <ip4_addr_isbroadcast_u32>
 8018eea:	4603      	mov	r3, r0
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d10f      	bne.n	8018f10 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018ef0:	4b15      	ldr	r3, [pc, #84]	; (8018f48 <ip4_input+0x278>)
 8018ef2:	695b      	ldr	r3, [r3, #20]
 8018ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018ef8:	2be0      	cmp	r3, #224	; 0xe0
 8018efa:	d009      	beq.n	8018f10 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018efc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018f00:	4619      	mov	r1, r3
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	f7f5 fc85 	bl	800e812 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018f08:	2102      	movs	r1, #2
 8018f0a:	6878      	ldr	r0, [r7, #4]
 8018f0c:	f7ff fdbc 	bl	8018a88 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018f10:	6878      	ldr	r0, [r7, #4]
 8018f12:	f7f5 fc91 	bl	800e838 <pbuf_free>
        break;
 8018f16:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018f18:	4b0b      	ldr	r3, [pc, #44]	; (8018f48 <ip4_input+0x278>)
 8018f1a:	2200      	movs	r2, #0
 8018f1c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018f1e:	4b0a      	ldr	r3, [pc, #40]	; (8018f48 <ip4_input+0x278>)
 8018f20:	2200      	movs	r2, #0
 8018f22:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018f24:	4b08      	ldr	r3, [pc, #32]	; (8018f48 <ip4_input+0x278>)
 8018f26:	2200      	movs	r2, #0
 8018f28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018f2a:	4b07      	ldr	r3, [pc, #28]	; (8018f48 <ip4_input+0x278>)
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018f30:	4b05      	ldr	r3, [pc, #20]	; (8018f48 <ip4_input+0x278>)
 8018f32:	2200      	movs	r2, #0
 8018f34:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018f36:	4b04      	ldr	r3, [pc, #16]	; (8018f48 <ip4_input+0x278>)
 8018f38:	2200      	movs	r2, #0
 8018f3a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018f3c:	2300      	movs	r3, #0
}
 8018f3e:	4618      	mov	r0, r3
 8018f40:	3720      	adds	r7, #32
 8018f42:	46bd      	mov	sp, r7
 8018f44:	bd80      	pop	{r7, pc}
 8018f46:	bf00      	nop
 8018f48:	2000839c 	.word	0x2000839c
 8018f4c:	2000bac0 	.word	0x2000bac0

08018f50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b08a      	sub	sp, #40	; 0x28
 8018f54:	af04      	add	r7, sp, #16
 8018f56:	60f8      	str	r0, [r7, #12]
 8018f58:	60b9      	str	r1, [r7, #8]
 8018f5a:	607a      	str	r2, [r7, #4]
 8018f5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018f5e:	68bb      	ldr	r3, [r7, #8]
 8018f60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d009      	beq.n	8018f7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018f68:	68bb      	ldr	r3, [r7, #8]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d003      	beq.n	8018f76 <ip4_output_if+0x26>
 8018f6e:	68bb      	ldr	r3, [r7, #8]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d102      	bne.n	8018f7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f78:	3304      	adds	r3, #4
 8018f7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018f7c:	78fa      	ldrb	r2, [r7, #3]
 8018f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f80:	9302      	str	r3, [sp, #8]
 8018f82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018f86:	9301      	str	r3, [sp, #4]
 8018f88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018f8c:	9300      	str	r3, [sp, #0]
 8018f8e:	4613      	mov	r3, r2
 8018f90:	687a      	ldr	r2, [r7, #4]
 8018f92:	6979      	ldr	r1, [r7, #20]
 8018f94:	68f8      	ldr	r0, [r7, #12]
 8018f96:	f000 f805 	bl	8018fa4 <ip4_output_if_src>
 8018f9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	3718      	adds	r7, #24
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	bd80      	pop	{r7, pc}

08018fa4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b088      	sub	sp, #32
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	60f8      	str	r0, [r7, #12]
 8018fac:	60b9      	str	r1, [r7, #8]
 8018fae:	607a      	str	r2, [r7, #4]
 8018fb0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	7b9b      	ldrb	r3, [r3, #14]
 8018fb6:	2b01      	cmp	r3, #1
 8018fb8:	d006      	beq.n	8018fc8 <ip4_output_if_src+0x24>
 8018fba:	4b4b      	ldr	r3, [pc, #300]	; (80190e8 <ip4_output_if_src+0x144>)
 8018fbc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018fc0:	494a      	ldr	r1, [pc, #296]	; (80190ec <ip4_output_if_src+0x148>)
 8018fc2:	484b      	ldr	r0, [pc, #300]	; (80190f0 <ip4_output_if_src+0x14c>)
 8018fc4:	f001 f9fe 	bl	801a3c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d060      	beq.n	8019090 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018fce:	2314      	movs	r3, #20
 8018fd0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018fd2:	2114      	movs	r1, #20
 8018fd4:	68f8      	ldr	r0, [r7, #12]
 8018fd6:	f7f5 fb99 	bl	800e70c <pbuf_add_header>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d002      	beq.n	8018fe6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018fe0:	f06f 0301 	mvn.w	r3, #1
 8018fe4:	e07c      	b.n	80190e0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	685b      	ldr	r3, [r3, #4]
 8018fea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	895b      	ldrh	r3, [r3, #10]
 8018ff0:	2b13      	cmp	r3, #19
 8018ff2:	d806      	bhi.n	8019002 <ip4_output_if_src+0x5e>
 8018ff4:	4b3c      	ldr	r3, [pc, #240]	; (80190e8 <ip4_output_if_src+0x144>)
 8018ff6:	f240 3289 	movw	r2, #905	; 0x389
 8018ffa:	493e      	ldr	r1, [pc, #248]	; (80190f4 <ip4_output_if_src+0x150>)
 8018ffc:	483c      	ldr	r0, [pc, #240]	; (80190f0 <ip4_output_if_src+0x14c>)
 8018ffe:	f001 f9e1 	bl	801a3c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019002:	69fb      	ldr	r3, [r7, #28]
 8019004:	78fa      	ldrb	r2, [r7, #3]
 8019006:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019008:	69fb      	ldr	r3, [r7, #28]
 801900a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801900e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681a      	ldr	r2, [r3, #0]
 8019014:	69fb      	ldr	r3, [r7, #28]
 8019016:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019018:	8b7b      	ldrh	r3, [r7, #26]
 801901a:	089b      	lsrs	r3, r3, #2
 801901c:	b29b      	uxth	r3, r3
 801901e:	b2db      	uxtb	r3, r3
 8019020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019024:	b2da      	uxtb	r2, r3
 8019026:	69fb      	ldr	r3, [r7, #28]
 8019028:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801902a:	69fb      	ldr	r3, [r7, #28]
 801902c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019030:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	891b      	ldrh	r3, [r3, #8]
 8019036:	4618      	mov	r0, r3
 8019038:	f7f4 f812 	bl	800d060 <lwip_htons>
 801903c:	4603      	mov	r3, r0
 801903e:	461a      	mov	r2, r3
 8019040:	69fb      	ldr	r3, [r7, #28]
 8019042:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019044:	69fb      	ldr	r3, [r7, #28]
 8019046:	2200      	movs	r2, #0
 8019048:	719a      	strb	r2, [r3, #6]
 801904a:	2200      	movs	r2, #0
 801904c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801904e:	4b2a      	ldr	r3, [pc, #168]	; (80190f8 <ip4_output_if_src+0x154>)
 8019050:	881b      	ldrh	r3, [r3, #0]
 8019052:	4618      	mov	r0, r3
 8019054:	f7f4 f804 	bl	800d060 <lwip_htons>
 8019058:	4603      	mov	r3, r0
 801905a:	461a      	mov	r2, r3
 801905c:	69fb      	ldr	r3, [r7, #28]
 801905e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019060:	4b25      	ldr	r3, [pc, #148]	; (80190f8 <ip4_output_if_src+0x154>)
 8019062:	881b      	ldrh	r3, [r3, #0]
 8019064:	3301      	adds	r3, #1
 8019066:	b29a      	uxth	r2, r3
 8019068:	4b23      	ldr	r3, [pc, #140]	; (80190f8 <ip4_output_if_src+0x154>)
 801906a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d104      	bne.n	801907c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019072:	4b22      	ldr	r3, [pc, #136]	; (80190fc <ip4_output_if_src+0x158>)
 8019074:	681a      	ldr	r2, [r3, #0]
 8019076:	69fb      	ldr	r3, [r7, #28]
 8019078:	60da      	str	r2, [r3, #12]
 801907a:	e003      	b.n	8019084 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	681a      	ldr	r2, [r3, #0]
 8019080:	69fb      	ldr	r3, [r7, #28]
 8019082:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019084:	69fb      	ldr	r3, [r7, #28]
 8019086:	2200      	movs	r2, #0
 8019088:	729a      	strb	r2, [r3, #10]
 801908a:	2200      	movs	r2, #0
 801908c:	72da      	strb	r2, [r3, #11]
 801908e:	e00f      	b.n	80190b0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	895b      	ldrh	r3, [r3, #10]
 8019094:	2b13      	cmp	r3, #19
 8019096:	d802      	bhi.n	801909e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019098:	f06f 0301 	mvn.w	r3, #1
 801909c:	e020      	b.n	80190e0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	685b      	ldr	r3, [r3, #4]
 80190a2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80190a4:	69fb      	ldr	r3, [r7, #28]
 80190a6:	691b      	ldr	r3, [r3, #16]
 80190a8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80190aa:	f107 0314 	add.w	r3, r7, #20
 80190ae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80190b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d00c      	beq.n	80190d2 <ip4_output_if_src+0x12e>
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	891a      	ldrh	r2, [r3, #8]
 80190bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d906      	bls.n	80190d2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80190c4:	687a      	ldr	r2, [r7, #4]
 80190c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80190c8:	68f8      	ldr	r0, [r7, #12]
 80190ca:	f000 fd4b 	bl	8019b64 <ip4_frag>
 80190ce:	4603      	mov	r3, r0
 80190d0:	e006      	b.n	80190e0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80190d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190d4:	695b      	ldr	r3, [r3, #20]
 80190d6:	687a      	ldr	r2, [r7, #4]
 80190d8:	68f9      	ldr	r1, [r7, #12]
 80190da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190dc:	4798      	blx	r3
 80190de:	4603      	mov	r3, r0
}
 80190e0:	4618      	mov	r0, r3
 80190e2:	3720      	adds	r7, #32
 80190e4:	46bd      	mov	sp, r7
 80190e6:	bd80      	pop	{r7, pc}
 80190e8:	0801edf4 	.word	0x0801edf4
 80190ec:	0801ee28 	.word	0x0801ee28
 80190f0:	0801ee34 	.word	0x0801ee34
 80190f4:	0801ee5c 	.word	0x0801ee5c
 80190f8:	20004cfa 	.word	0x20004cfa
 80190fc:	0801f328 	.word	0x0801f328

08019100 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019100:	b480      	push	{r7}
 8019102:	b085      	sub	sp, #20
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
 8019108:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019114:	d002      	beq.n	801911c <ip4_addr_isbroadcast_u32+0x1c>
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d101      	bne.n	8019120 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801911c:	2301      	movs	r3, #1
 801911e:	e02a      	b.n	8019176 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019120:	683b      	ldr	r3, [r7, #0]
 8019122:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019126:	f003 0302 	and.w	r3, r3, #2
 801912a:	2b00      	cmp	r3, #0
 801912c:	d101      	bne.n	8019132 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801912e:	2300      	movs	r3, #0
 8019130:	e021      	b.n	8019176 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019132:	683b      	ldr	r3, [r7, #0]
 8019134:	3304      	adds	r3, #4
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	687a      	ldr	r2, [r7, #4]
 801913a:	429a      	cmp	r2, r3
 801913c:	d101      	bne.n	8019142 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801913e:	2300      	movs	r3, #0
 8019140:	e019      	b.n	8019176 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019142:	68fa      	ldr	r2, [r7, #12]
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	3304      	adds	r3, #4
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	405a      	eors	r2, r3
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	3308      	adds	r3, #8
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	4013      	ands	r3, r2
 8019154:	2b00      	cmp	r3, #0
 8019156:	d10d      	bne.n	8019174 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019158:	683b      	ldr	r3, [r7, #0]
 801915a:	3308      	adds	r3, #8
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	43da      	mvns	r2, r3
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019164:	683b      	ldr	r3, [r7, #0]
 8019166:	3308      	adds	r3, #8
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801916c:	429a      	cmp	r2, r3
 801916e:	d101      	bne.n	8019174 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019170:	2301      	movs	r3, #1
 8019172:	e000      	b.n	8019176 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019174:	2300      	movs	r3, #0
  }
}
 8019176:	4618      	mov	r0, r3
 8019178:	3714      	adds	r7, #20
 801917a:	46bd      	mov	sp, r7
 801917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019180:	4770      	bx	lr
	...

08019184 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b084      	sub	sp, #16
 8019188:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801918a:	2300      	movs	r3, #0
 801918c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801918e:	4b12      	ldr	r3, [pc, #72]	; (80191d8 <ip_reass_tmr+0x54>)
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019194:	e018      	b.n	80191c8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	7fdb      	ldrb	r3, [r3, #31]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d00b      	beq.n	80191b6 <ip_reass_tmr+0x32>
      r->timer--;
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	7fdb      	ldrb	r3, [r3, #31]
 80191a2:	3b01      	subs	r3, #1
 80191a4:	b2da      	uxtb	r2, r3
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	60fb      	str	r3, [r7, #12]
 80191b4:	e008      	b.n	80191c8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80191c0:	68b9      	ldr	r1, [r7, #8]
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	f000 f80a 	bl	80191dc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d1e3      	bne.n	8019196 <ip_reass_tmr+0x12>
    }
  }
}
 80191ce:	bf00      	nop
 80191d0:	3710      	adds	r7, #16
 80191d2:	46bd      	mov	sp, r7
 80191d4:	bd80      	pop	{r7, pc}
 80191d6:	bf00      	nop
 80191d8:	20004cfc 	.word	0x20004cfc

080191dc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b088      	sub	sp, #32
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
 80191e4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80191e6:	2300      	movs	r3, #0
 80191e8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80191ea:	683a      	ldr	r2, [r7, #0]
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	429a      	cmp	r2, r3
 80191f0:	d105      	bne.n	80191fe <ip_reass_free_complete_datagram+0x22>
 80191f2:	4b45      	ldr	r3, [pc, #276]	; (8019308 <ip_reass_free_complete_datagram+0x12c>)
 80191f4:	22ab      	movs	r2, #171	; 0xab
 80191f6:	4945      	ldr	r1, [pc, #276]	; (801930c <ip_reass_free_complete_datagram+0x130>)
 80191f8:	4845      	ldr	r0, [pc, #276]	; (8019310 <ip_reass_free_complete_datagram+0x134>)
 80191fa:	f001 f8e3 	bl	801a3c4 <iprintf>
  if (prev != NULL) {
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d00a      	beq.n	801921a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	687a      	ldr	r2, [r7, #4]
 801920a:	429a      	cmp	r2, r3
 801920c:	d005      	beq.n	801921a <ip_reass_free_complete_datagram+0x3e>
 801920e:	4b3e      	ldr	r3, [pc, #248]	; (8019308 <ip_reass_free_complete_datagram+0x12c>)
 8019210:	22ad      	movs	r2, #173	; 0xad
 8019212:	4940      	ldr	r1, [pc, #256]	; (8019314 <ip_reass_free_complete_datagram+0x138>)
 8019214:	483e      	ldr	r0, [pc, #248]	; (8019310 <ip_reass_free_complete_datagram+0x134>)
 8019216:	f001 f8d5 	bl	801a3c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	685b      	ldr	r3, [r3, #4]
 801921e:	685b      	ldr	r3, [r3, #4]
 8019220:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019222:	697b      	ldr	r3, [r7, #20]
 8019224:	889b      	ldrh	r3, [r3, #4]
 8019226:	b29b      	uxth	r3, r3
 8019228:	2b00      	cmp	r3, #0
 801922a:	d12a      	bne.n	8019282 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	685b      	ldr	r3, [r3, #4]
 8019230:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019232:	697b      	ldr	r3, [r7, #20]
 8019234:	681a      	ldr	r2, [r3, #0]
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801923a:	69bb      	ldr	r3, [r7, #24]
 801923c:	6858      	ldr	r0, [r3, #4]
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	3308      	adds	r3, #8
 8019242:	2214      	movs	r2, #20
 8019244:	4619      	mov	r1, r3
 8019246:	f001 f8a9 	bl	801a39c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801924a:	2101      	movs	r1, #1
 801924c:	69b8      	ldr	r0, [r7, #24]
 801924e:	f7ff fc2b 	bl	8018aa8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019252:	69b8      	ldr	r0, [r7, #24]
 8019254:	f7f5 fb7e 	bl	800e954 <pbuf_clen>
 8019258:	4603      	mov	r3, r0
 801925a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801925c:	8bfa      	ldrh	r2, [r7, #30]
 801925e:	8a7b      	ldrh	r3, [r7, #18]
 8019260:	4413      	add	r3, r2
 8019262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019266:	db05      	blt.n	8019274 <ip_reass_free_complete_datagram+0x98>
 8019268:	4b27      	ldr	r3, [pc, #156]	; (8019308 <ip_reass_free_complete_datagram+0x12c>)
 801926a:	22bc      	movs	r2, #188	; 0xbc
 801926c:	492a      	ldr	r1, [pc, #168]	; (8019318 <ip_reass_free_complete_datagram+0x13c>)
 801926e:	4828      	ldr	r0, [pc, #160]	; (8019310 <ip_reass_free_complete_datagram+0x134>)
 8019270:	f001 f8a8 	bl	801a3c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019274:	8bfa      	ldrh	r2, [r7, #30]
 8019276:	8a7b      	ldrh	r3, [r7, #18]
 8019278:	4413      	add	r3, r2
 801927a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801927c:	69b8      	ldr	r0, [r7, #24]
 801927e:	f7f5 fadb 	bl	800e838 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	685b      	ldr	r3, [r3, #4]
 8019286:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019288:	e01f      	b.n	80192ca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801928a:	69bb      	ldr	r3, [r7, #24]
 801928c:	685b      	ldr	r3, [r3, #4]
 801928e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019290:	69bb      	ldr	r3, [r7, #24]
 8019292:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019294:	697b      	ldr	r3, [r7, #20]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801929a:	68f8      	ldr	r0, [r7, #12]
 801929c:	f7f5 fb5a 	bl	800e954 <pbuf_clen>
 80192a0:	4603      	mov	r3, r0
 80192a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80192a4:	8bfa      	ldrh	r2, [r7, #30]
 80192a6:	8a7b      	ldrh	r3, [r7, #18]
 80192a8:	4413      	add	r3, r2
 80192aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80192ae:	db05      	blt.n	80192bc <ip_reass_free_complete_datagram+0xe0>
 80192b0:	4b15      	ldr	r3, [pc, #84]	; (8019308 <ip_reass_free_complete_datagram+0x12c>)
 80192b2:	22cc      	movs	r2, #204	; 0xcc
 80192b4:	4918      	ldr	r1, [pc, #96]	; (8019318 <ip_reass_free_complete_datagram+0x13c>)
 80192b6:	4816      	ldr	r0, [pc, #88]	; (8019310 <ip_reass_free_complete_datagram+0x134>)
 80192b8:	f001 f884 	bl	801a3c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80192bc:	8bfa      	ldrh	r2, [r7, #30]
 80192be:	8a7b      	ldrh	r3, [r7, #18]
 80192c0:	4413      	add	r3, r2
 80192c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80192c4:	68f8      	ldr	r0, [r7, #12]
 80192c6:	f7f5 fab7 	bl	800e838 <pbuf_free>
  while (p != NULL) {
 80192ca:	69bb      	ldr	r3, [r7, #24]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d1dc      	bne.n	801928a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80192d0:	6839      	ldr	r1, [r7, #0]
 80192d2:	6878      	ldr	r0, [r7, #4]
 80192d4:	f000 f8c2 	bl	801945c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80192d8:	4b10      	ldr	r3, [pc, #64]	; (801931c <ip_reass_free_complete_datagram+0x140>)
 80192da:	881b      	ldrh	r3, [r3, #0]
 80192dc:	8bfa      	ldrh	r2, [r7, #30]
 80192de:	429a      	cmp	r2, r3
 80192e0:	d905      	bls.n	80192ee <ip_reass_free_complete_datagram+0x112>
 80192e2:	4b09      	ldr	r3, [pc, #36]	; (8019308 <ip_reass_free_complete_datagram+0x12c>)
 80192e4:	22d2      	movs	r2, #210	; 0xd2
 80192e6:	490e      	ldr	r1, [pc, #56]	; (8019320 <ip_reass_free_complete_datagram+0x144>)
 80192e8:	4809      	ldr	r0, [pc, #36]	; (8019310 <ip_reass_free_complete_datagram+0x134>)
 80192ea:	f001 f86b 	bl	801a3c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80192ee:	4b0b      	ldr	r3, [pc, #44]	; (801931c <ip_reass_free_complete_datagram+0x140>)
 80192f0:	881a      	ldrh	r2, [r3, #0]
 80192f2:	8bfb      	ldrh	r3, [r7, #30]
 80192f4:	1ad3      	subs	r3, r2, r3
 80192f6:	b29a      	uxth	r2, r3
 80192f8:	4b08      	ldr	r3, [pc, #32]	; (801931c <ip_reass_free_complete_datagram+0x140>)
 80192fa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80192fc:	8bfb      	ldrh	r3, [r7, #30]
}
 80192fe:	4618      	mov	r0, r3
 8019300:	3720      	adds	r7, #32
 8019302:	46bd      	mov	sp, r7
 8019304:	bd80      	pop	{r7, pc}
 8019306:	bf00      	nop
 8019308:	0801ee8c 	.word	0x0801ee8c
 801930c:	0801eec8 	.word	0x0801eec8
 8019310:	0801eed4 	.word	0x0801eed4
 8019314:	0801eefc 	.word	0x0801eefc
 8019318:	0801ef10 	.word	0x0801ef10
 801931c:	20004d00 	.word	0x20004d00
 8019320:	0801ef30 	.word	0x0801ef30

08019324 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b08a      	sub	sp, #40	; 0x28
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]
 801932c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801932e:	2300      	movs	r3, #0
 8019330:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019332:	2300      	movs	r3, #0
 8019334:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019336:	2300      	movs	r3, #0
 8019338:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801933a:	2300      	movs	r3, #0
 801933c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801933e:	2300      	movs	r3, #0
 8019340:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019342:	4b28      	ldr	r3, [pc, #160]	; (80193e4 <ip_reass_remove_oldest_datagram+0xc0>)
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019348:	e030      	b.n	80193ac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801934c:	695a      	ldr	r2, [r3, #20]
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	68db      	ldr	r3, [r3, #12]
 8019352:	429a      	cmp	r2, r3
 8019354:	d10c      	bne.n	8019370 <ip_reass_remove_oldest_datagram+0x4c>
 8019356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019358:	699a      	ldr	r2, [r3, #24]
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	691b      	ldr	r3, [r3, #16]
 801935e:	429a      	cmp	r2, r3
 8019360:	d106      	bne.n	8019370 <ip_reass_remove_oldest_datagram+0x4c>
 8019362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019364:	899a      	ldrh	r2, [r3, #12]
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	889b      	ldrh	r3, [r3, #4]
 801936a:	b29b      	uxth	r3, r3
 801936c:	429a      	cmp	r2, r3
 801936e:	d014      	beq.n	801939a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019370:	693b      	ldr	r3, [r7, #16]
 8019372:	3301      	adds	r3, #1
 8019374:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019376:	6a3b      	ldr	r3, [r7, #32]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d104      	bne.n	8019386 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801937e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019380:	69fb      	ldr	r3, [r7, #28]
 8019382:	61bb      	str	r3, [r7, #24]
 8019384:	e009      	b.n	801939a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019388:	7fda      	ldrb	r2, [r3, #31]
 801938a:	6a3b      	ldr	r3, [r7, #32]
 801938c:	7fdb      	ldrb	r3, [r3, #31]
 801938e:	429a      	cmp	r2, r3
 8019390:	d803      	bhi.n	801939a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019394:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019396:	69fb      	ldr	r3, [r7, #28]
 8019398:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d001      	beq.n	80193a6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80193a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80193a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80193ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d1cb      	bne.n	801934a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80193b2:	6a3b      	ldr	r3, [r7, #32]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d008      	beq.n	80193ca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80193b8:	69b9      	ldr	r1, [r7, #24]
 80193ba:	6a38      	ldr	r0, [r7, #32]
 80193bc:	f7ff ff0e 	bl	80191dc <ip_reass_free_complete_datagram>
 80193c0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80193c2:	697a      	ldr	r2, [r7, #20]
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	4413      	add	r3, r2
 80193c8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80193ca:	697a      	ldr	r2, [r7, #20]
 80193cc:	683b      	ldr	r3, [r7, #0]
 80193ce:	429a      	cmp	r2, r3
 80193d0:	da02      	bge.n	80193d8 <ip_reass_remove_oldest_datagram+0xb4>
 80193d2:	693b      	ldr	r3, [r7, #16]
 80193d4:	2b01      	cmp	r3, #1
 80193d6:	dcac      	bgt.n	8019332 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80193d8:	697b      	ldr	r3, [r7, #20]
}
 80193da:	4618      	mov	r0, r3
 80193dc:	3728      	adds	r7, #40	; 0x28
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}
 80193e2:	bf00      	nop
 80193e4:	20004cfc 	.word	0x20004cfc

080193e8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b084      	sub	sp, #16
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
 80193f0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80193f2:	2004      	movs	r0, #4
 80193f4:	f7f4 faea 	bl	800d9cc <memp_malloc>
 80193f8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d110      	bne.n	8019422 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019400:	6839      	ldr	r1, [r7, #0]
 8019402:	6878      	ldr	r0, [r7, #4]
 8019404:	f7ff ff8e 	bl	8019324 <ip_reass_remove_oldest_datagram>
 8019408:	4602      	mov	r2, r0
 801940a:	683b      	ldr	r3, [r7, #0]
 801940c:	4293      	cmp	r3, r2
 801940e:	dc03      	bgt.n	8019418 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019410:	2004      	movs	r0, #4
 8019412:	f7f4 fadb 	bl	800d9cc <memp_malloc>
 8019416:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d101      	bne.n	8019422 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801941e:	2300      	movs	r3, #0
 8019420:	e016      	b.n	8019450 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019422:	2220      	movs	r2, #32
 8019424:	2100      	movs	r1, #0
 8019426:	68f8      	ldr	r0, [r7, #12]
 8019428:	f000 ffc3 	bl	801a3b2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	220f      	movs	r2, #15
 8019430:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019432:	4b09      	ldr	r3, [pc, #36]	; (8019458 <ip_reass_enqueue_new_datagram+0x70>)
 8019434:	681a      	ldr	r2, [r3, #0]
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801943a:	4a07      	ldr	r2, [pc, #28]	; (8019458 <ip_reass_enqueue_new_datagram+0x70>)
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	3308      	adds	r3, #8
 8019444:	2214      	movs	r2, #20
 8019446:	6879      	ldr	r1, [r7, #4]
 8019448:	4618      	mov	r0, r3
 801944a:	f000 ffa7 	bl	801a39c <memcpy>
  return ipr;
 801944e:	68fb      	ldr	r3, [r7, #12]
}
 8019450:	4618      	mov	r0, r3
 8019452:	3710      	adds	r7, #16
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}
 8019458:	20004cfc 	.word	0x20004cfc

0801945c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b082      	sub	sp, #8
 8019460:	af00      	add	r7, sp, #0
 8019462:	6078      	str	r0, [r7, #4]
 8019464:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019466:	4b10      	ldr	r3, [pc, #64]	; (80194a8 <ip_reass_dequeue_datagram+0x4c>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	687a      	ldr	r2, [r7, #4]
 801946c:	429a      	cmp	r2, r3
 801946e:	d104      	bne.n	801947a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	4a0c      	ldr	r2, [pc, #48]	; (80194a8 <ip_reass_dequeue_datagram+0x4c>)
 8019476:	6013      	str	r3, [r2, #0]
 8019478:	e00d      	b.n	8019496 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801947a:	683b      	ldr	r3, [r7, #0]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d106      	bne.n	801948e <ip_reass_dequeue_datagram+0x32>
 8019480:	4b0a      	ldr	r3, [pc, #40]	; (80194ac <ip_reass_dequeue_datagram+0x50>)
 8019482:	f240 1245 	movw	r2, #325	; 0x145
 8019486:	490a      	ldr	r1, [pc, #40]	; (80194b0 <ip_reass_dequeue_datagram+0x54>)
 8019488:	480a      	ldr	r0, [pc, #40]	; (80194b4 <ip_reass_dequeue_datagram+0x58>)
 801948a:	f000 ff9b 	bl	801a3c4 <iprintf>
    prev->next = ipr->next;
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	681a      	ldr	r2, [r3, #0]
 8019492:	683b      	ldr	r3, [r7, #0]
 8019494:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019496:	6879      	ldr	r1, [r7, #4]
 8019498:	2004      	movs	r0, #4
 801949a:	f7f4 fae9 	bl	800da70 <memp_free>
}
 801949e:	bf00      	nop
 80194a0:	3708      	adds	r7, #8
 80194a2:	46bd      	mov	sp, r7
 80194a4:	bd80      	pop	{r7, pc}
 80194a6:	bf00      	nop
 80194a8:	20004cfc 	.word	0x20004cfc
 80194ac:	0801ee8c 	.word	0x0801ee8c
 80194b0:	0801ef54 	.word	0x0801ef54
 80194b4:	0801eed4 	.word	0x0801eed4

080194b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b08c      	sub	sp, #48	; 0x30
 80194bc:	af00      	add	r7, sp, #0
 80194be:	60f8      	str	r0, [r7, #12]
 80194c0:	60b9      	str	r1, [r7, #8]
 80194c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80194c4:	2300      	movs	r3, #0
 80194c6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80194c8:	2301      	movs	r3, #1
 80194ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80194cc:	68bb      	ldr	r3, [r7, #8]
 80194ce:	685b      	ldr	r3, [r3, #4]
 80194d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80194d2:	69fb      	ldr	r3, [r7, #28]
 80194d4:	885b      	ldrh	r3, [r3, #2]
 80194d6:	b29b      	uxth	r3, r3
 80194d8:	4618      	mov	r0, r3
 80194da:	f7f3 fdc1 	bl	800d060 <lwip_htons>
 80194de:	4603      	mov	r3, r0
 80194e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80194e2:	69fb      	ldr	r3, [r7, #28]
 80194e4:	781b      	ldrb	r3, [r3, #0]
 80194e6:	f003 030f 	and.w	r3, r3, #15
 80194ea:	b2db      	uxtb	r3, r3
 80194ec:	009b      	lsls	r3, r3, #2
 80194ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80194f0:	7e7b      	ldrb	r3, [r7, #25]
 80194f2:	b29b      	uxth	r3, r3
 80194f4:	8b7a      	ldrh	r2, [r7, #26]
 80194f6:	429a      	cmp	r2, r3
 80194f8:	d202      	bcs.n	8019500 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80194fa:	f04f 33ff 	mov.w	r3, #4294967295
 80194fe:	e135      	b.n	801976c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019500:	7e7b      	ldrb	r3, [r7, #25]
 8019502:	b29b      	uxth	r3, r3
 8019504:	8b7a      	ldrh	r2, [r7, #26]
 8019506:	1ad3      	subs	r3, r2, r3
 8019508:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801950a:	69fb      	ldr	r3, [r7, #28]
 801950c:	88db      	ldrh	r3, [r3, #6]
 801950e:	b29b      	uxth	r3, r3
 8019510:	4618      	mov	r0, r3
 8019512:	f7f3 fda5 	bl	800d060 <lwip_htons>
 8019516:	4603      	mov	r3, r0
 8019518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801951c:	b29b      	uxth	r3, r3
 801951e:	00db      	lsls	r3, r3, #3
 8019520:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019522:	68bb      	ldr	r3, [r7, #8]
 8019524:	685b      	ldr	r3, [r3, #4]
 8019526:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952a:	2200      	movs	r2, #0
 801952c:	701a      	strb	r2, [r3, #0]
 801952e:	2200      	movs	r2, #0
 8019530:	705a      	strb	r2, [r3, #1]
 8019532:	2200      	movs	r2, #0
 8019534:	709a      	strb	r2, [r3, #2]
 8019536:	2200      	movs	r2, #0
 8019538:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801953c:	8afa      	ldrh	r2, [r7, #22]
 801953e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019540:	8afa      	ldrh	r2, [r7, #22]
 8019542:	8b7b      	ldrh	r3, [r7, #26]
 8019544:	4413      	add	r3, r2
 8019546:	b29a      	uxth	r2, r3
 8019548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801954a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801954e:	88db      	ldrh	r3, [r3, #6]
 8019550:	b29b      	uxth	r3, r3
 8019552:	8afa      	ldrh	r2, [r7, #22]
 8019554:	429a      	cmp	r2, r3
 8019556:	d902      	bls.n	801955e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019558:	f04f 33ff 	mov.w	r3, #4294967295
 801955c:	e106      	b.n	801976c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	685b      	ldr	r3, [r3, #4]
 8019562:	627b      	str	r3, [r7, #36]	; 0x24
 8019564:	e068      	b.n	8019638 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019568:	685b      	ldr	r3, [r3, #4]
 801956a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801956e:	889b      	ldrh	r3, [r3, #4]
 8019570:	b29a      	uxth	r2, r3
 8019572:	693b      	ldr	r3, [r7, #16]
 8019574:	889b      	ldrh	r3, [r3, #4]
 8019576:	b29b      	uxth	r3, r3
 8019578:	429a      	cmp	r2, r3
 801957a:	d235      	bcs.n	80195e8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801957e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019580:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019584:	2b00      	cmp	r3, #0
 8019586:	d020      	beq.n	80195ca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801958a:	889b      	ldrh	r3, [r3, #4]
 801958c:	b29a      	uxth	r2, r3
 801958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019590:	88db      	ldrh	r3, [r3, #6]
 8019592:	b29b      	uxth	r3, r3
 8019594:	429a      	cmp	r2, r3
 8019596:	d307      	bcc.n	80195a8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801959a:	88db      	ldrh	r3, [r3, #6]
 801959c:	b29a      	uxth	r2, r3
 801959e:	693b      	ldr	r3, [r7, #16]
 80195a0:	889b      	ldrh	r3, [r3, #4]
 80195a2:	b29b      	uxth	r3, r3
 80195a4:	429a      	cmp	r2, r3
 80195a6:	d902      	bls.n	80195ae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80195a8:	f04f 33ff 	mov.w	r3, #4294967295
 80195ac:	e0de      	b.n	801976c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80195ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195b0:	68ba      	ldr	r2, [r7, #8]
 80195b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80195b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195b6:	88db      	ldrh	r3, [r3, #6]
 80195b8:	b29a      	uxth	r2, r3
 80195ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195bc:	889b      	ldrh	r3, [r3, #4]
 80195be:	b29b      	uxth	r3, r3
 80195c0:	429a      	cmp	r2, r3
 80195c2:	d03d      	beq.n	8019640 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80195c4:	2300      	movs	r3, #0
 80195c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80195c8:	e03a      	b.n	8019640 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80195ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195cc:	88db      	ldrh	r3, [r3, #6]
 80195ce:	b29a      	uxth	r2, r3
 80195d0:	693b      	ldr	r3, [r7, #16]
 80195d2:	889b      	ldrh	r3, [r3, #4]
 80195d4:	b29b      	uxth	r3, r3
 80195d6:	429a      	cmp	r2, r3
 80195d8:	d902      	bls.n	80195e0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80195da:	f04f 33ff 	mov.w	r3, #4294967295
 80195de:	e0c5      	b.n	801976c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	68ba      	ldr	r2, [r7, #8]
 80195e4:	605a      	str	r2, [r3, #4]
      break;
 80195e6:	e02b      	b.n	8019640 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80195e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ea:	889b      	ldrh	r3, [r3, #4]
 80195ec:	b29a      	uxth	r2, r3
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	889b      	ldrh	r3, [r3, #4]
 80195f2:	b29b      	uxth	r3, r3
 80195f4:	429a      	cmp	r2, r3
 80195f6:	d102      	bne.n	80195fe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80195f8:	f04f 33ff 	mov.w	r3, #4294967295
 80195fc:	e0b6      	b.n	801976c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80195fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019600:	889b      	ldrh	r3, [r3, #4]
 8019602:	b29a      	uxth	r2, r3
 8019604:	693b      	ldr	r3, [r7, #16]
 8019606:	88db      	ldrh	r3, [r3, #6]
 8019608:	b29b      	uxth	r3, r3
 801960a:	429a      	cmp	r2, r3
 801960c:	d202      	bcs.n	8019614 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801960e:	f04f 33ff 	mov.w	r3, #4294967295
 8019612:	e0ab      	b.n	801976c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019616:	2b00      	cmp	r3, #0
 8019618:	d009      	beq.n	801962e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801961c:	88db      	ldrh	r3, [r3, #6]
 801961e:	b29a      	uxth	r2, r3
 8019620:	693b      	ldr	r3, [r7, #16]
 8019622:	889b      	ldrh	r3, [r3, #4]
 8019624:	b29b      	uxth	r3, r3
 8019626:	429a      	cmp	r2, r3
 8019628:	d001      	beq.n	801962e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801962a:	2300      	movs	r3, #0
 801962c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801962e:	693b      	ldr	r3, [r7, #16]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019634:	693b      	ldr	r3, [r7, #16]
 8019636:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801963a:	2b00      	cmp	r3, #0
 801963c:	d193      	bne.n	8019566 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801963e:	e000      	b.n	8019642 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019640:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019644:	2b00      	cmp	r3, #0
 8019646:	d12d      	bne.n	80196a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801964a:	2b00      	cmp	r3, #0
 801964c:	d01c      	beq.n	8019688 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019650:	88db      	ldrh	r3, [r3, #6]
 8019652:	b29a      	uxth	r2, r3
 8019654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019656:	889b      	ldrh	r3, [r3, #4]
 8019658:	b29b      	uxth	r3, r3
 801965a:	429a      	cmp	r2, r3
 801965c:	d906      	bls.n	801966c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801965e:	4b45      	ldr	r3, [pc, #276]	; (8019774 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019660:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019664:	4944      	ldr	r1, [pc, #272]	; (8019778 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019666:	4845      	ldr	r0, [pc, #276]	; (801977c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019668:	f000 feac 	bl	801a3c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801966e:	68ba      	ldr	r2, [r7, #8]
 8019670:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019674:	88db      	ldrh	r3, [r3, #6]
 8019676:	b29a      	uxth	r2, r3
 8019678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801967a:	889b      	ldrh	r3, [r3, #4]
 801967c:	b29b      	uxth	r3, r3
 801967e:	429a      	cmp	r2, r3
 8019680:	d010      	beq.n	80196a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019682:	2300      	movs	r3, #0
 8019684:	623b      	str	r3, [r7, #32]
 8019686:	e00d      	b.n	80196a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	685b      	ldr	r3, [r3, #4]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d006      	beq.n	801969e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019690:	4b38      	ldr	r3, [pc, #224]	; (8019774 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019692:	f240 12bf 	movw	r2, #447	; 0x1bf
 8019696:	493a      	ldr	r1, [pc, #232]	; (8019780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019698:	4838      	ldr	r0, [pc, #224]	; (801977c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801969a:	f000 fe93 	bl	801a3c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	68ba      	ldr	r2, [r7, #8]
 80196a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d105      	bne.n	80196b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	7f9b      	ldrb	r3, [r3, #30]
 80196ae:	f003 0301 	and.w	r3, r3, #1
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d059      	beq.n	801976a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80196b6:	6a3b      	ldr	r3, [r7, #32]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d04f      	beq.n	801975c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	685b      	ldr	r3, [r3, #4]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d006      	beq.n	80196d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	685b      	ldr	r3, [r3, #4]
 80196c8:	685b      	ldr	r3, [r3, #4]
 80196ca:	889b      	ldrh	r3, [r3, #4]
 80196cc:	b29b      	uxth	r3, r3
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d002      	beq.n	80196d8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80196d2:	2300      	movs	r3, #0
 80196d4:	623b      	str	r3, [r7, #32]
 80196d6:	e041      	b.n	801975c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80196d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196da:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80196dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80196e2:	e012      	b.n	801970a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80196e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196e6:	685b      	ldr	r3, [r3, #4]
 80196e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80196ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196ec:	88db      	ldrh	r3, [r3, #6]
 80196ee:	b29a      	uxth	r2, r3
 80196f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196f2:	889b      	ldrh	r3, [r3, #4]
 80196f4:	b29b      	uxth	r3, r3
 80196f6:	429a      	cmp	r2, r3
 80196f8:	d002      	beq.n	8019700 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80196fa:	2300      	movs	r3, #0
 80196fc:	623b      	str	r3, [r7, #32]
            break;
 80196fe:	e007      	b.n	8019710 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019702:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801970c:	2b00      	cmp	r3, #0
 801970e:	d1e9      	bne.n	80196e4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019710:	6a3b      	ldr	r3, [r7, #32]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d022      	beq.n	801975c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	685b      	ldr	r3, [r3, #4]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d106      	bne.n	801972c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801971e:	4b15      	ldr	r3, [pc, #84]	; (8019774 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019720:	f240 12df 	movw	r2, #479	; 0x1df
 8019724:	4917      	ldr	r1, [pc, #92]	; (8019784 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019726:	4815      	ldr	r0, [pc, #84]	; (801977c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019728:	f000 fe4c 	bl	801a3c4 <iprintf>
          LWIP_ASSERT("sanity check",
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	685b      	ldr	r3, [r3, #4]
 8019730:	685b      	ldr	r3, [r3, #4]
 8019732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019734:	429a      	cmp	r2, r3
 8019736:	d106      	bne.n	8019746 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019738:	4b0e      	ldr	r3, [pc, #56]	; (8019774 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801973a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801973e:	4911      	ldr	r1, [pc, #68]	; (8019784 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019740:	480e      	ldr	r0, [pc, #56]	; (801977c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019742:	f000 fe3f 	bl	801a3c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d006      	beq.n	801975c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801974e:	4b09      	ldr	r3, [pc, #36]	; (8019774 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019750:	f240 12e3 	movw	r2, #483	; 0x1e3
 8019754:	490c      	ldr	r1, [pc, #48]	; (8019788 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019756:	4809      	ldr	r0, [pc, #36]	; (801977c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019758:	f000 fe34 	bl	801a3c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801975c:	6a3b      	ldr	r3, [r7, #32]
 801975e:	2b00      	cmp	r3, #0
 8019760:	bf14      	ite	ne
 8019762:	2301      	movne	r3, #1
 8019764:	2300      	moveq	r3, #0
 8019766:	b2db      	uxtb	r3, r3
 8019768:	e000      	b.n	801976c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801976a:	2300      	movs	r3, #0
}
 801976c:	4618      	mov	r0, r3
 801976e:	3730      	adds	r7, #48	; 0x30
 8019770:	46bd      	mov	sp, r7
 8019772:	bd80      	pop	{r7, pc}
 8019774:	0801ee8c 	.word	0x0801ee8c
 8019778:	0801ef70 	.word	0x0801ef70
 801977c:	0801eed4 	.word	0x0801eed4
 8019780:	0801ef90 	.word	0x0801ef90
 8019784:	0801efc8 	.word	0x0801efc8
 8019788:	0801efd8 	.word	0x0801efd8

0801978c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801978c:	b580      	push	{r7, lr}
 801978e:	b08e      	sub	sp, #56	; 0x38
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	685b      	ldr	r3, [r3, #4]
 8019798:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801979c:	781b      	ldrb	r3, [r3, #0]
 801979e:	f003 030f 	and.w	r3, r3, #15
 80197a2:	b2db      	uxtb	r3, r3
 80197a4:	009b      	lsls	r3, r3, #2
 80197a6:	b2db      	uxtb	r3, r3
 80197a8:	2b14      	cmp	r3, #20
 80197aa:	f040 8167 	bne.w	8019a7c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80197ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197b0:	88db      	ldrh	r3, [r3, #6]
 80197b2:	b29b      	uxth	r3, r3
 80197b4:	4618      	mov	r0, r3
 80197b6:	f7f3 fc53 	bl	800d060 <lwip_htons>
 80197ba:	4603      	mov	r3, r0
 80197bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80197c0:	b29b      	uxth	r3, r3
 80197c2:	00db      	lsls	r3, r3, #3
 80197c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80197c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197c8:	885b      	ldrh	r3, [r3, #2]
 80197ca:	b29b      	uxth	r3, r3
 80197cc:	4618      	mov	r0, r3
 80197ce:	f7f3 fc47 	bl	800d060 <lwip_htons>
 80197d2:	4603      	mov	r3, r0
 80197d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80197d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197d8:	781b      	ldrb	r3, [r3, #0]
 80197da:	f003 030f 	and.w	r3, r3, #15
 80197de:	b2db      	uxtb	r3, r3
 80197e0:	009b      	lsls	r3, r3, #2
 80197e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80197e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80197ea:	b29b      	uxth	r3, r3
 80197ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80197ee:	429a      	cmp	r2, r3
 80197f0:	f0c0 8146 	bcc.w	8019a80 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80197f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80197f8:	b29b      	uxth	r3, r3
 80197fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80197fc:	1ad3      	subs	r3, r2, r3
 80197fe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019800:	6878      	ldr	r0, [r7, #4]
 8019802:	f7f5 f8a7 	bl	800e954 <pbuf_clen>
 8019806:	4603      	mov	r3, r0
 8019808:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801980a:	4ba3      	ldr	r3, [pc, #652]	; (8019a98 <ip4_reass+0x30c>)
 801980c:	881b      	ldrh	r3, [r3, #0]
 801980e:	461a      	mov	r2, r3
 8019810:	8c3b      	ldrh	r3, [r7, #32]
 8019812:	4413      	add	r3, r2
 8019814:	2b0a      	cmp	r3, #10
 8019816:	dd10      	ble.n	801983a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019818:	8c3b      	ldrh	r3, [r7, #32]
 801981a:	4619      	mov	r1, r3
 801981c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801981e:	f7ff fd81 	bl	8019324 <ip_reass_remove_oldest_datagram>
 8019822:	4603      	mov	r3, r0
 8019824:	2b00      	cmp	r3, #0
 8019826:	f000 812d 	beq.w	8019a84 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801982a:	4b9b      	ldr	r3, [pc, #620]	; (8019a98 <ip4_reass+0x30c>)
 801982c:	881b      	ldrh	r3, [r3, #0]
 801982e:	461a      	mov	r2, r3
 8019830:	8c3b      	ldrh	r3, [r7, #32]
 8019832:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019834:	2b0a      	cmp	r3, #10
 8019836:	f300 8125 	bgt.w	8019a84 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801983a:	4b98      	ldr	r3, [pc, #608]	; (8019a9c <ip4_reass+0x310>)
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	633b      	str	r3, [r7, #48]	; 0x30
 8019840:	e015      	b.n	801986e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019844:	695a      	ldr	r2, [r3, #20]
 8019846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019848:	68db      	ldr	r3, [r3, #12]
 801984a:	429a      	cmp	r2, r3
 801984c:	d10c      	bne.n	8019868 <ip4_reass+0xdc>
 801984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019850:	699a      	ldr	r2, [r3, #24]
 8019852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019854:	691b      	ldr	r3, [r3, #16]
 8019856:	429a      	cmp	r2, r3
 8019858:	d106      	bne.n	8019868 <ip4_reass+0xdc>
 801985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801985c:	899a      	ldrh	r2, [r3, #12]
 801985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019860:	889b      	ldrh	r3, [r3, #4]
 8019862:	b29b      	uxth	r3, r3
 8019864:	429a      	cmp	r2, r3
 8019866:	d006      	beq.n	8019876 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	633b      	str	r3, [r7, #48]	; 0x30
 801986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019870:	2b00      	cmp	r3, #0
 8019872:	d1e6      	bne.n	8019842 <ip4_reass+0xb6>
 8019874:	e000      	b.n	8019878 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019876:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801987a:	2b00      	cmp	r3, #0
 801987c:	d109      	bne.n	8019892 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801987e:	8c3b      	ldrh	r3, [r7, #32]
 8019880:	4619      	mov	r1, r3
 8019882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019884:	f7ff fdb0 	bl	80193e8 <ip_reass_enqueue_new_datagram>
 8019888:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801988c:	2b00      	cmp	r3, #0
 801988e:	d11c      	bne.n	80198ca <ip4_reass+0x13e>
      goto nullreturn;
 8019890:	e0f9      	b.n	8019a86 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019894:	88db      	ldrh	r3, [r3, #6]
 8019896:	b29b      	uxth	r3, r3
 8019898:	4618      	mov	r0, r3
 801989a:	f7f3 fbe1 	bl	800d060 <lwip_htons>
 801989e:	4603      	mov	r3, r0
 80198a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d110      	bne.n	80198ca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80198a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198aa:	89db      	ldrh	r3, [r3, #14]
 80198ac:	4618      	mov	r0, r3
 80198ae:	f7f3 fbd7 	bl	800d060 <lwip_htons>
 80198b2:	4603      	mov	r3, r0
 80198b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d006      	beq.n	80198ca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80198bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198be:	3308      	adds	r3, #8
 80198c0:	2214      	movs	r2, #20
 80198c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80198c4:	4618      	mov	r0, r3
 80198c6:	f000 fd69 	bl	801a39c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80198ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198cc:	88db      	ldrh	r3, [r3, #6]
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	f003 0320 	and.w	r3, r3, #32
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	bf0c      	ite	eq
 80198d8:	2301      	moveq	r3, #1
 80198da:	2300      	movne	r3, #0
 80198dc:	b2db      	uxtb	r3, r3
 80198de:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80198e0:	69fb      	ldr	r3, [r7, #28]
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d00e      	beq.n	8019904 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80198e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80198e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80198ea:	4413      	add	r3, r2
 80198ec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80198ee:	8b7a      	ldrh	r2, [r7, #26]
 80198f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80198f2:	429a      	cmp	r2, r3
 80198f4:	f0c0 80a0 	bcc.w	8019a38 <ip4_reass+0x2ac>
 80198f8:	8b7b      	ldrh	r3, [r7, #26]
 80198fa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80198fe:	4293      	cmp	r3, r2
 8019900:	f200 809a 	bhi.w	8019a38 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019904:	69fa      	ldr	r2, [r7, #28]
 8019906:	6879      	ldr	r1, [r7, #4]
 8019908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801990a:	f7ff fdd5 	bl	80194b8 <ip_reass_chain_frag_into_datagram_and_validate>
 801990e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019910:	697b      	ldr	r3, [r7, #20]
 8019912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019916:	f000 8091 	beq.w	8019a3c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801991a:	4b5f      	ldr	r3, [pc, #380]	; (8019a98 <ip4_reass+0x30c>)
 801991c:	881a      	ldrh	r2, [r3, #0]
 801991e:	8c3b      	ldrh	r3, [r7, #32]
 8019920:	4413      	add	r3, r2
 8019922:	b29a      	uxth	r2, r3
 8019924:	4b5c      	ldr	r3, [pc, #368]	; (8019a98 <ip4_reass+0x30c>)
 8019926:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019928:	69fb      	ldr	r3, [r7, #28]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d00d      	beq.n	801994a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801992e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019932:	4413      	add	r3, r2
 8019934:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019938:	8a7a      	ldrh	r2, [r7, #18]
 801993a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801993e:	7f9b      	ldrb	r3, [r3, #30]
 8019940:	f043 0301 	orr.w	r3, r3, #1
 8019944:	b2da      	uxtb	r2, r3
 8019946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019948:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801994a:	697b      	ldr	r3, [r7, #20]
 801994c:	2b01      	cmp	r3, #1
 801994e:	d171      	bne.n	8019a34 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019952:	8b9b      	ldrh	r3, [r3, #28]
 8019954:	3314      	adds	r3, #20
 8019956:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801995a:	685b      	ldr	r3, [r3, #4]
 801995c:	685b      	ldr	r3, [r3, #4]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019964:	685b      	ldr	r3, [r3, #4]
 8019966:	685b      	ldr	r3, [r3, #4]
 8019968:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801996c:	3308      	adds	r3, #8
 801996e:	2214      	movs	r2, #20
 8019970:	4619      	mov	r1, r3
 8019972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019974:	f000 fd12 	bl	801a39c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019978:	8a3b      	ldrh	r3, [r7, #16]
 801997a:	4618      	mov	r0, r3
 801997c:	f7f3 fb70 	bl	800d060 <lwip_htons>
 8019980:	4603      	mov	r3, r0
 8019982:	461a      	mov	r2, r3
 8019984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019986:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801998a:	2200      	movs	r2, #0
 801998c:	719a      	strb	r2, [r3, #6]
 801998e:	2200      	movs	r2, #0
 8019990:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019994:	2200      	movs	r2, #0
 8019996:	729a      	strb	r2, [r3, #10]
 8019998:	2200      	movs	r2, #0
 801999a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801999e:	685b      	ldr	r3, [r3, #4]
 80199a0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80199a2:	e00d      	b.n	80199c0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80199a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199a6:	685b      	ldr	r3, [r3, #4]
 80199a8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80199aa:	2114      	movs	r1, #20
 80199ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80199ae:	f7f4 febd 	bl	800e72c <pbuf_remove_header>
      pbuf_cat(p, r);
 80199b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80199b4:	6878      	ldr	r0, [r7, #4]
 80199b6:	f7f5 f80d 	bl	800e9d4 <pbuf_cat>
      r = iprh->next_pbuf;
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80199c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d1ee      	bne.n	80199a4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80199c6:	4b35      	ldr	r3, [pc, #212]	; (8019a9c <ip4_reass+0x310>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80199cc:	429a      	cmp	r2, r3
 80199ce:	d102      	bne.n	80199d6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80199d0:	2300      	movs	r3, #0
 80199d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80199d4:	e010      	b.n	80199f8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80199d6:	4b31      	ldr	r3, [pc, #196]	; (8019a9c <ip4_reass+0x310>)
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80199dc:	e007      	b.n	80199ee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80199de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80199e4:	429a      	cmp	r2, r3
 80199e6:	d006      	beq.n	80199f6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80199e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80199ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d1f4      	bne.n	80199de <ip4_reass+0x252>
 80199f4:	e000      	b.n	80199f8 <ip4_reass+0x26c>
          break;
 80199f6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80199f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80199fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80199fc:	f7ff fd2e 	bl	801945c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019a00:	6878      	ldr	r0, [r7, #4]
 8019a02:	f7f4 ffa7 	bl	800e954 <pbuf_clen>
 8019a06:	4603      	mov	r3, r0
 8019a08:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019a0a:	4b23      	ldr	r3, [pc, #140]	; (8019a98 <ip4_reass+0x30c>)
 8019a0c:	881b      	ldrh	r3, [r3, #0]
 8019a0e:	8c3a      	ldrh	r2, [r7, #32]
 8019a10:	429a      	cmp	r2, r3
 8019a12:	d906      	bls.n	8019a22 <ip4_reass+0x296>
 8019a14:	4b22      	ldr	r3, [pc, #136]	; (8019aa0 <ip4_reass+0x314>)
 8019a16:	f240 229b 	movw	r2, #667	; 0x29b
 8019a1a:	4922      	ldr	r1, [pc, #136]	; (8019aa4 <ip4_reass+0x318>)
 8019a1c:	4822      	ldr	r0, [pc, #136]	; (8019aa8 <ip4_reass+0x31c>)
 8019a1e:	f000 fcd1 	bl	801a3c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019a22:	4b1d      	ldr	r3, [pc, #116]	; (8019a98 <ip4_reass+0x30c>)
 8019a24:	881a      	ldrh	r2, [r3, #0]
 8019a26:	8c3b      	ldrh	r3, [r7, #32]
 8019a28:	1ad3      	subs	r3, r2, r3
 8019a2a:	b29a      	uxth	r2, r3
 8019a2c:	4b1a      	ldr	r3, [pc, #104]	; (8019a98 <ip4_reass+0x30c>)
 8019a2e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	e02c      	b.n	8019a8e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019a34:	2300      	movs	r3, #0
 8019a36:	e02a      	b.n	8019a8e <ip4_reass+0x302>

nullreturn_ipr:
 8019a38:	bf00      	nop
 8019a3a:	e000      	b.n	8019a3e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8019a3c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d106      	bne.n	8019a52 <ip4_reass+0x2c6>
 8019a44:	4b16      	ldr	r3, [pc, #88]	; (8019aa0 <ip4_reass+0x314>)
 8019a46:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019a4a:	4918      	ldr	r1, [pc, #96]	; (8019aac <ip4_reass+0x320>)
 8019a4c:	4816      	ldr	r0, [pc, #88]	; (8019aa8 <ip4_reass+0x31c>)
 8019a4e:	f000 fcb9 	bl	801a3c4 <iprintf>
  if (ipr->p == NULL) {
 8019a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a54:	685b      	ldr	r3, [r3, #4]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d114      	bne.n	8019a84 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019a5a:	4b10      	ldr	r3, [pc, #64]	; (8019a9c <ip4_reass+0x310>)
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a60:	429a      	cmp	r2, r3
 8019a62:	d006      	beq.n	8019a72 <ip4_reass+0x2e6>
 8019a64:	4b0e      	ldr	r3, [pc, #56]	; (8019aa0 <ip4_reass+0x314>)
 8019a66:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019a6a:	4911      	ldr	r1, [pc, #68]	; (8019ab0 <ip4_reass+0x324>)
 8019a6c:	480e      	ldr	r0, [pc, #56]	; (8019aa8 <ip4_reass+0x31c>)
 8019a6e:	f000 fca9 	bl	801a3c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019a72:	2100      	movs	r1, #0
 8019a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a76:	f7ff fcf1 	bl	801945c <ip_reass_dequeue_datagram>
 8019a7a:	e004      	b.n	8019a86 <ip4_reass+0x2fa>
    goto nullreturn;
 8019a7c:	bf00      	nop
 8019a7e:	e002      	b.n	8019a86 <ip4_reass+0x2fa>
    goto nullreturn;
 8019a80:	bf00      	nop
 8019a82:	e000      	b.n	8019a86 <ip4_reass+0x2fa>
  }

nullreturn:
 8019a84:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019a86:	6878      	ldr	r0, [r7, #4]
 8019a88:	f7f4 fed6 	bl	800e838 <pbuf_free>
  return NULL;
 8019a8c:	2300      	movs	r3, #0
}
 8019a8e:	4618      	mov	r0, r3
 8019a90:	3738      	adds	r7, #56	; 0x38
 8019a92:	46bd      	mov	sp, r7
 8019a94:	bd80      	pop	{r7, pc}
 8019a96:	bf00      	nop
 8019a98:	20004d00 	.word	0x20004d00
 8019a9c:	20004cfc 	.word	0x20004cfc
 8019aa0:	0801ee8c 	.word	0x0801ee8c
 8019aa4:	0801effc 	.word	0x0801effc
 8019aa8:	0801eed4 	.word	0x0801eed4
 8019aac:	0801f018 	.word	0x0801f018
 8019ab0:	0801f024 	.word	0x0801f024

08019ab4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019ab8:	2005      	movs	r0, #5
 8019aba:	f7f3 ff87 	bl	800d9cc <memp_malloc>
 8019abe:	4603      	mov	r3, r0
}
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	bd80      	pop	{r7, pc}

08019ac4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b082      	sub	sp, #8
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d106      	bne.n	8019ae0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019ad2:	4b07      	ldr	r3, [pc, #28]	; (8019af0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019ad4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019ad8:	4906      	ldr	r1, [pc, #24]	; (8019af4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019ada:	4807      	ldr	r0, [pc, #28]	; (8019af8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019adc:	f000 fc72 	bl	801a3c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019ae0:	6879      	ldr	r1, [r7, #4]
 8019ae2:	2005      	movs	r0, #5
 8019ae4:	f7f3 ffc4 	bl	800da70 <memp_free>
}
 8019ae8:	bf00      	nop
 8019aea:	3708      	adds	r7, #8
 8019aec:	46bd      	mov	sp, r7
 8019aee:	bd80      	pop	{r7, pc}
 8019af0:	0801ee8c 	.word	0x0801ee8c
 8019af4:	0801f044 	.word	0x0801f044
 8019af8:	0801eed4 	.word	0x0801eed4

08019afc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b084      	sub	sp, #16
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d106      	bne.n	8019b1c <ipfrag_free_pbuf_custom+0x20>
 8019b0e:	4b11      	ldr	r3, [pc, #68]	; (8019b54 <ipfrag_free_pbuf_custom+0x58>)
 8019b10:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019b14:	4910      	ldr	r1, [pc, #64]	; (8019b58 <ipfrag_free_pbuf_custom+0x5c>)
 8019b16:	4811      	ldr	r0, [pc, #68]	; (8019b5c <ipfrag_free_pbuf_custom+0x60>)
 8019b18:	f000 fc54 	bl	801a3c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019b1c:	68fa      	ldr	r2, [r7, #12]
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	429a      	cmp	r2, r3
 8019b22:	d006      	beq.n	8019b32 <ipfrag_free_pbuf_custom+0x36>
 8019b24:	4b0b      	ldr	r3, [pc, #44]	; (8019b54 <ipfrag_free_pbuf_custom+0x58>)
 8019b26:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019b2a:	490d      	ldr	r1, [pc, #52]	; (8019b60 <ipfrag_free_pbuf_custom+0x64>)
 8019b2c:	480b      	ldr	r0, [pc, #44]	; (8019b5c <ipfrag_free_pbuf_custom+0x60>)
 8019b2e:	f000 fc49 	bl	801a3c4 <iprintf>
  if (pcr->original != NULL) {
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	695b      	ldr	r3, [r3, #20]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d004      	beq.n	8019b44 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	695b      	ldr	r3, [r3, #20]
 8019b3e:	4618      	mov	r0, r3
 8019b40:	f7f4 fe7a 	bl	800e838 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019b44:	68f8      	ldr	r0, [r7, #12]
 8019b46:	f7ff ffbd 	bl	8019ac4 <ip_frag_free_pbuf_custom_ref>
}
 8019b4a:	bf00      	nop
 8019b4c:	3710      	adds	r7, #16
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}
 8019b52:	bf00      	nop
 8019b54:	0801ee8c 	.word	0x0801ee8c
 8019b58:	0801f050 	.word	0x0801f050
 8019b5c:	0801eed4 	.word	0x0801eed4
 8019b60:	0801f05c 	.word	0x0801f05c

08019b64 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b094      	sub	sp, #80	; 0x50
 8019b68:	af02      	add	r7, sp, #8
 8019b6a:	60f8      	str	r0, [r7, #12]
 8019b6c:	60b9      	str	r1, [r7, #8]
 8019b6e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019b70:	2300      	movs	r3, #0
 8019b72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019b76:	68bb      	ldr	r3, [r7, #8]
 8019b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019b7a:	3b14      	subs	r3, #20
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	da00      	bge.n	8019b82 <ip4_frag+0x1e>
 8019b80:	3307      	adds	r3, #7
 8019b82:	10db      	asrs	r3, r3, #3
 8019b84:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019b86:	2314      	movs	r3, #20
 8019b88:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	685b      	ldr	r3, [r3, #4]
 8019b8e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b92:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b96:	781b      	ldrb	r3, [r3, #0]
 8019b98:	f003 030f 	and.w	r3, r3, #15
 8019b9c:	b2db      	uxtb	r3, r3
 8019b9e:	009b      	lsls	r3, r3, #2
 8019ba0:	b2db      	uxtb	r3, r3
 8019ba2:	2b14      	cmp	r3, #20
 8019ba4:	d002      	beq.n	8019bac <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019ba6:	f06f 0305 	mvn.w	r3, #5
 8019baa:	e10f      	b.n	8019dcc <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	895b      	ldrh	r3, [r3, #10]
 8019bb0:	2b13      	cmp	r3, #19
 8019bb2:	d809      	bhi.n	8019bc8 <ip4_frag+0x64>
 8019bb4:	4b87      	ldr	r3, [pc, #540]	; (8019dd4 <ip4_frag+0x270>)
 8019bb6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019bba:	4987      	ldr	r1, [pc, #540]	; (8019dd8 <ip4_frag+0x274>)
 8019bbc:	4887      	ldr	r0, [pc, #540]	; (8019ddc <ip4_frag+0x278>)
 8019bbe:	f000 fc01 	bl	801a3c4 <iprintf>
 8019bc2:	f06f 0305 	mvn.w	r3, #5
 8019bc6:	e101      	b.n	8019dcc <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bca:	88db      	ldrh	r3, [r3, #6]
 8019bcc:	b29b      	uxth	r3, r3
 8019bce:	4618      	mov	r0, r3
 8019bd0:	f7f3 fa46 	bl	800d060 <lwip_htons>
 8019bd4:	4603      	mov	r3, r0
 8019bd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019bd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019bda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019bde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019be2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019be8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	891b      	ldrh	r3, [r3, #8]
 8019bee:	3b14      	subs	r3, #20
 8019bf0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019bf4:	e0e0      	b.n	8019db8 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019bf6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019bf8:	00db      	lsls	r3, r3, #3
 8019bfa:	b29b      	uxth	r3, r3
 8019bfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019c00:	4293      	cmp	r3, r2
 8019c02:	bf28      	it	cs
 8019c04:	4613      	movcs	r3, r2
 8019c06:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019c08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019c0c:	2114      	movs	r1, #20
 8019c0e:	200e      	movs	r0, #14
 8019c10:	f7f4 fb32 	bl	800e278 <pbuf_alloc>
 8019c14:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	f000 80d4 	beq.w	8019dc6 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c20:	895b      	ldrh	r3, [r3, #10]
 8019c22:	2b13      	cmp	r3, #19
 8019c24:	d806      	bhi.n	8019c34 <ip4_frag+0xd0>
 8019c26:	4b6b      	ldr	r3, [pc, #428]	; (8019dd4 <ip4_frag+0x270>)
 8019c28:	f240 3225 	movw	r2, #805	; 0x325
 8019c2c:	496c      	ldr	r1, [pc, #432]	; (8019de0 <ip4_frag+0x27c>)
 8019c2e:	486b      	ldr	r0, [pc, #428]	; (8019ddc <ip4_frag+0x278>)
 8019c30:	f000 fbc8 	bl	801a3c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c36:	685b      	ldr	r3, [r3, #4]
 8019c38:	2214      	movs	r2, #20
 8019c3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	f000 fbad 	bl	801a39c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c44:	685b      	ldr	r3, [r3, #4]
 8019c46:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019c48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019c4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019c4e:	e064      	b.n	8019d1a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	895a      	ldrh	r2, [r3, #10]
 8019c54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019c56:	1ad3      	subs	r3, r2, r3
 8019c58:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	895b      	ldrh	r3, [r3, #10]
 8019c5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019c60:	429a      	cmp	r2, r3
 8019c62:	d906      	bls.n	8019c72 <ip4_frag+0x10e>
 8019c64:	4b5b      	ldr	r3, [pc, #364]	; (8019dd4 <ip4_frag+0x270>)
 8019c66:	f240 322d 	movw	r2, #813	; 0x32d
 8019c6a:	495e      	ldr	r1, [pc, #376]	; (8019de4 <ip4_frag+0x280>)
 8019c6c:	485b      	ldr	r0, [pc, #364]	; (8019ddc <ip4_frag+0x278>)
 8019c6e:	f000 fba9 	bl	801a3c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019c72:	8bfa      	ldrh	r2, [r7, #30]
 8019c74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019c78:	4293      	cmp	r3, r2
 8019c7a:	bf28      	it	cs
 8019c7c:	4613      	movcs	r3, r2
 8019c7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019c82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d105      	bne.n	8019c96 <ip4_frag+0x132>
        poff = 0;
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	60fb      	str	r3, [r7, #12]
        continue;
 8019c94:	e041      	b.n	8019d1a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019c96:	f7ff ff0d 	bl	8019ab4 <ip_frag_alloc_pbuf_custom_ref>
 8019c9a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019c9c:	69bb      	ldr	r3, [r7, #24]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d103      	bne.n	8019caa <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ca4:	f7f4 fdc8 	bl	800e838 <pbuf_free>
        goto memerr;
 8019ca8:	e08e      	b.n	8019dc8 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019caa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019cb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019cb2:	4413      	add	r3, r2
 8019cb4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019cb8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019cbc:	9201      	str	r2, [sp, #4]
 8019cbe:	9300      	str	r3, [sp, #0]
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	2241      	movs	r2, #65	; 0x41
 8019cc4:	2000      	movs	r0, #0
 8019cc6:	f7f4 fbfd 	bl	800e4c4 <pbuf_alloced_custom>
 8019cca:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019ccc:	697b      	ldr	r3, [r7, #20]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d106      	bne.n	8019ce0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019cd2:	69b8      	ldr	r0, [r7, #24]
 8019cd4:	f7ff fef6 	bl	8019ac4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019cd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019cda:	f7f4 fdad 	bl	800e838 <pbuf_free>
        goto memerr;
 8019cde:	e073      	b.n	8019dc8 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8019ce0:	68f8      	ldr	r0, [r7, #12]
 8019ce2:	f7f4 fe4f 	bl	800e984 <pbuf_ref>
      pcr->original = p;
 8019ce6:	69bb      	ldr	r3, [r7, #24]
 8019ce8:	68fa      	ldr	r2, [r7, #12]
 8019cea:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019cec:	69bb      	ldr	r3, [r7, #24]
 8019cee:	4a3e      	ldr	r2, [pc, #248]	; (8019de8 <ip4_frag+0x284>)
 8019cf0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019cf2:	6979      	ldr	r1, [r7, #20]
 8019cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019cf6:	f7f4 fe6d 	bl	800e9d4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019cfa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019cfe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019d02:	1ad3      	subs	r3, r2, r3
 8019d04:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019d08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d004      	beq.n	8019d1a <ip4_frag+0x1b6>
        poff = 0;
 8019d10:	2300      	movs	r3, #0
 8019d12:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019d1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d196      	bne.n	8019c50 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019d22:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019d24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019d28:	4413      	add	r3, r2
 8019d2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019d2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d30:	68bb      	ldr	r3, [r7, #8]
 8019d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019d34:	3b14      	subs	r3, #20
 8019d36:	429a      	cmp	r2, r3
 8019d38:	bfd4      	ite	le
 8019d3a:	2301      	movle	r3, #1
 8019d3c:	2300      	movgt	r3, #0
 8019d3e:	b2db      	uxtb	r3, r3
 8019d40:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019d42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019d46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019d4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019d4c:	6a3b      	ldr	r3, [r7, #32]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d002      	beq.n	8019d58 <ip4_frag+0x1f4>
 8019d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d003      	beq.n	8019d60 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019d58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019d5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019d5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019d60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019d62:	4618      	mov	r0, r3
 8019d64:	f7f3 f97c 	bl	800d060 <lwip_htons>
 8019d68:	4603      	mov	r3, r0
 8019d6a:	461a      	mov	r2, r3
 8019d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d6e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019d70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019d72:	3314      	adds	r3, #20
 8019d74:	b29b      	uxth	r3, r3
 8019d76:	4618      	mov	r0, r3
 8019d78:	f7f3 f972 	bl	800d060 <lwip_htons>
 8019d7c:	4603      	mov	r3, r0
 8019d7e:	461a      	mov	r2, r3
 8019d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d82:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d86:	2200      	movs	r2, #0
 8019d88:	729a      	strb	r2, [r3, #10]
 8019d8a:	2200      	movs	r2, #0
 8019d8c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019d8e:	68bb      	ldr	r3, [r7, #8]
 8019d90:	695b      	ldr	r3, [r3, #20]
 8019d92:	687a      	ldr	r2, [r7, #4]
 8019d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019d96:	68b8      	ldr	r0, [r7, #8]
 8019d98:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019d9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d9c:	f7f4 fd4c 	bl	800e838 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019da0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019da4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019da6:	1ad3      	subs	r3, r2, r3
 8019da8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019dac:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019db0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019db2:	4413      	add	r3, r2
 8019db4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019db8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	f47f af1a 	bne.w	8019bf6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019dc2:	2300      	movs	r3, #0
 8019dc4:	e002      	b.n	8019dcc <ip4_frag+0x268>
      goto memerr;
 8019dc6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019dcc:	4618      	mov	r0, r3
 8019dce:	3748      	adds	r7, #72	; 0x48
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bd80      	pop	{r7, pc}
 8019dd4:	0801ee8c 	.word	0x0801ee8c
 8019dd8:	0801f068 	.word	0x0801f068
 8019ddc:	0801eed4 	.word	0x0801eed4
 8019de0:	0801f084 	.word	0x0801f084
 8019de4:	0801f0a4 	.word	0x0801f0a4
 8019de8:	08019afd 	.word	0x08019afd

08019dec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b086      	sub	sp, #24
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	6078      	str	r0, [r7, #4]
 8019df4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019df6:	230e      	movs	r3, #14
 8019df8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	895b      	ldrh	r3, [r3, #10]
 8019dfe:	2b0e      	cmp	r3, #14
 8019e00:	d96e      	bls.n	8019ee0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	7bdb      	ldrb	r3, [r3, #15]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d106      	bne.n	8019e18 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019e0a:	683b      	ldr	r3, [r7, #0]
 8019e0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019e10:	3301      	adds	r3, #1
 8019e12:	b2da      	uxtb	r2, r3
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	685b      	ldr	r3, [r3, #4]
 8019e1c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019e1e:	693b      	ldr	r3, [r7, #16]
 8019e20:	7b1a      	ldrb	r2, [r3, #12]
 8019e22:	7b5b      	ldrb	r3, [r3, #13]
 8019e24:	021b      	lsls	r3, r3, #8
 8019e26:	4313      	orrs	r3, r2
 8019e28:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019e2a:	693b      	ldr	r3, [r7, #16]
 8019e2c:	781b      	ldrb	r3, [r3, #0]
 8019e2e:	f003 0301 	and.w	r3, r3, #1
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d023      	beq.n	8019e7e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019e36:	693b      	ldr	r3, [r7, #16]
 8019e38:	781b      	ldrb	r3, [r3, #0]
 8019e3a:	2b01      	cmp	r3, #1
 8019e3c:	d10f      	bne.n	8019e5e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019e3e:	693b      	ldr	r3, [r7, #16]
 8019e40:	785b      	ldrb	r3, [r3, #1]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d11b      	bne.n	8019e7e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019e46:	693b      	ldr	r3, [r7, #16]
 8019e48:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019e4a:	2b5e      	cmp	r3, #94	; 0x5e
 8019e4c:	d117      	bne.n	8019e7e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	7b5b      	ldrb	r3, [r3, #13]
 8019e52:	f043 0310 	orr.w	r3, r3, #16
 8019e56:	b2da      	uxtb	r2, r3
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	735a      	strb	r2, [r3, #13]
 8019e5c:	e00f      	b.n	8019e7e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019e5e:	693b      	ldr	r3, [r7, #16]
 8019e60:	2206      	movs	r2, #6
 8019e62:	4928      	ldr	r1, [pc, #160]	; (8019f04 <ethernet_input+0x118>)
 8019e64:	4618      	mov	r0, r3
 8019e66:	f000 fa8a 	bl	801a37e <memcmp>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d106      	bne.n	8019e7e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	7b5b      	ldrb	r3, [r3, #13]
 8019e74:	f043 0308 	orr.w	r3, r3, #8
 8019e78:	b2da      	uxtb	r2, r3
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019e7e:	89fb      	ldrh	r3, [r7, #14]
 8019e80:	2b08      	cmp	r3, #8
 8019e82:	d003      	beq.n	8019e8c <ethernet_input+0xa0>
 8019e84:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019e88:	d014      	beq.n	8019eb4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019e8a:	e032      	b.n	8019ef2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019e8c:	683b      	ldr	r3, [r7, #0]
 8019e8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019e92:	f003 0308 	and.w	r3, r3, #8
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d024      	beq.n	8019ee4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019e9a:	8afb      	ldrh	r3, [r7, #22]
 8019e9c:	4619      	mov	r1, r3
 8019e9e:	6878      	ldr	r0, [r7, #4]
 8019ea0:	f7f4 fc44 	bl	800e72c <pbuf_remove_header>
 8019ea4:	4603      	mov	r3, r0
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d11e      	bne.n	8019ee8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019eaa:	6839      	ldr	r1, [r7, #0]
 8019eac:	6878      	ldr	r0, [r7, #4]
 8019eae:	f7fe ff0f 	bl	8018cd0 <ip4_input>
      break;
 8019eb2:	e013      	b.n	8019edc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019eb4:	683b      	ldr	r3, [r7, #0]
 8019eb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019eba:	f003 0308 	and.w	r3, r3, #8
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d014      	beq.n	8019eec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019ec2:	8afb      	ldrh	r3, [r7, #22]
 8019ec4:	4619      	mov	r1, r3
 8019ec6:	6878      	ldr	r0, [r7, #4]
 8019ec8:	f7f4 fc30 	bl	800e72c <pbuf_remove_header>
 8019ecc:	4603      	mov	r3, r0
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d10e      	bne.n	8019ef0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019ed2:	6839      	ldr	r1, [r7, #0]
 8019ed4:	6878      	ldr	r0, [r7, #4]
 8019ed6:	f7fe f8ab 	bl	8018030 <etharp_input>
      break;
 8019eda:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019edc:	2300      	movs	r3, #0
 8019ede:	e00c      	b.n	8019efa <ethernet_input+0x10e>
    goto free_and_return;
 8019ee0:	bf00      	nop
 8019ee2:	e006      	b.n	8019ef2 <ethernet_input+0x106>
        goto free_and_return;
 8019ee4:	bf00      	nop
 8019ee6:	e004      	b.n	8019ef2 <ethernet_input+0x106>
        goto free_and_return;
 8019ee8:	bf00      	nop
 8019eea:	e002      	b.n	8019ef2 <ethernet_input+0x106>
        goto free_and_return;
 8019eec:	bf00      	nop
 8019eee:	e000      	b.n	8019ef2 <ethernet_input+0x106>
        goto free_and_return;
 8019ef0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019ef2:	6878      	ldr	r0, [r7, #4]
 8019ef4:	f7f4 fca0 	bl	800e838 <pbuf_free>
  return ERR_OK;
 8019ef8:	2300      	movs	r3, #0
}
 8019efa:	4618      	mov	r0, r3
 8019efc:	3718      	adds	r7, #24
 8019efe:	46bd      	mov	sp, r7
 8019f00:	bd80      	pop	{r7, pc}
 8019f02:	bf00      	nop
 8019f04:	0801f330 	.word	0x0801f330

08019f08 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b086      	sub	sp, #24
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	60f8      	str	r0, [r7, #12]
 8019f10:	60b9      	str	r1, [r7, #8]
 8019f12:	607a      	str	r2, [r7, #4]
 8019f14:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019f16:	8c3b      	ldrh	r3, [r7, #32]
 8019f18:	4618      	mov	r0, r3
 8019f1a:	f7f3 f8a1 	bl	800d060 <lwip_htons>
 8019f1e:	4603      	mov	r3, r0
 8019f20:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019f22:	210e      	movs	r1, #14
 8019f24:	68b8      	ldr	r0, [r7, #8]
 8019f26:	f7f4 fbf1 	bl	800e70c <pbuf_add_header>
 8019f2a:	4603      	mov	r3, r0
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d125      	bne.n	8019f7c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019f30:	68bb      	ldr	r3, [r7, #8]
 8019f32:	685b      	ldr	r3, [r3, #4]
 8019f34:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019f36:	693b      	ldr	r3, [r7, #16]
 8019f38:	8afa      	ldrh	r2, [r7, #22]
 8019f3a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019f3c:	693b      	ldr	r3, [r7, #16]
 8019f3e:	2206      	movs	r2, #6
 8019f40:	6839      	ldr	r1, [r7, #0]
 8019f42:	4618      	mov	r0, r3
 8019f44:	f000 fa2a 	bl	801a39c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019f48:	693b      	ldr	r3, [r7, #16]
 8019f4a:	3306      	adds	r3, #6
 8019f4c:	2206      	movs	r2, #6
 8019f4e:	6879      	ldr	r1, [r7, #4]
 8019f50:	4618      	mov	r0, r3
 8019f52:	f000 fa23 	bl	801a39c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019f5c:	2b06      	cmp	r3, #6
 8019f5e:	d006      	beq.n	8019f6e <ethernet_output+0x66>
 8019f60:	4b0a      	ldr	r3, [pc, #40]	; (8019f8c <ethernet_output+0x84>)
 8019f62:	f240 1233 	movw	r2, #307	; 0x133
 8019f66:	490a      	ldr	r1, [pc, #40]	; (8019f90 <ethernet_output+0x88>)
 8019f68:	480a      	ldr	r0, [pc, #40]	; (8019f94 <ethernet_output+0x8c>)
 8019f6a:	f000 fa2b 	bl	801a3c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	699b      	ldr	r3, [r3, #24]
 8019f72:	68b9      	ldr	r1, [r7, #8]
 8019f74:	68f8      	ldr	r0, [r7, #12]
 8019f76:	4798      	blx	r3
 8019f78:	4603      	mov	r3, r0
 8019f7a:	e002      	b.n	8019f82 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019f7c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019f7e:	f06f 0301 	mvn.w	r3, #1
}
 8019f82:	4618      	mov	r0, r3
 8019f84:	3718      	adds	r7, #24
 8019f86:	46bd      	mov	sp, r7
 8019f88:	bd80      	pop	{r7, pc}
 8019f8a:	bf00      	nop
 8019f8c:	0801f0b4 	.word	0x0801f0b4
 8019f90:	0801f0ec 	.word	0x0801f0ec
 8019f94:	0801f120 	.word	0x0801f120

08019f98 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019f98:	b580      	push	{r7, lr}
 8019f9a:	b082      	sub	sp, #8
 8019f9c:	af00      	add	r7, sp, #0
 8019f9e:	6078      	str	r0, [r7, #4]
 8019fa0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8019fa2:	683b      	ldr	r3, [r7, #0]
 8019fa4:	2200      	movs	r2, #0
 8019fa6:	2104      	movs	r1, #4
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7ec fbfd 	bl	80067a8 <osMessageQueueNew>
 8019fae:	4602      	mov	r2, r0
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d102      	bne.n	8019fc2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8019fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8019fc0:	e000      	b.n	8019fc4 <sys_mbox_new+0x2c>

  return ERR_OK;
 8019fc2:	2300      	movs	r3, #0
}
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	3708      	adds	r7, #8
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	bd80      	pop	{r7, pc}

08019fcc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b082      	sub	sp, #8
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	4618      	mov	r0, r3
 8019fda:	f7ec fd51 	bl	8006a80 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	f7ec fd7e 	bl	8006ae4 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019fe8:	bf00      	nop
 8019fea:	3708      	adds	r7, #8
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}

08019ff0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b084      	sub	sp, #16
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
 8019ff8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	6818      	ldr	r0, [r3, #0]
 8019ffe:	4639      	mov	r1, r7
 801a000:	2300      	movs	r3, #0
 801a002:	2200      	movs	r2, #0
 801a004:	f7ec fc56 	bl	80068b4 <osMessageQueuePut>
 801a008:	4603      	mov	r3, r0
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d102      	bne.n	801a014 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801a00e:	2300      	movs	r3, #0
 801a010:	73fb      	strb	r3, [r7, #15]
 801a012:	e001      	b.n	801a018 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a014:	23ff      	movs	r3, #255	; 0xff
 801a016:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a01c:	4618      	mov	r0, r3
 801a01e:	3710      	adds	r7, #16
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}

0801a024 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b086      	sub	sp, #24
 801a028:	af00      	add	r7, sp, #0
 801a02a:	60f8      	str	r0, [r7, #12]
 801a02c:	60b9      	str	r1, [r7, #8]
 801a02e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801a030:	f7eb ffe4 	bl	8005ffc <osKernelGetTickCount>
 801a034:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d013      	beq.n	801a064 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	6818      	ldr	r0, [r3, #0]
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	2200      	movs	r2, #0
 801a044:	68b9      	ldr	r1, [r7, #8]
 801a046:	f7ec fca9 	bl	800699c <osMessageQueueGet>
 801a04a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801a04c:	693b      	ldr	r3, [r7, #16]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d105      	bne.n	801a05e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801a052:	f7eb ffd3 	bl	8005ffc <osKernelGetTickCount>
 801a056:	4602      	mov	r2, r0
 801a058:	697b      	ldr	r3, [r7, #20]
 801a05a:	1ad3      	subs	r3, r2, r3
 801a05c:	e00f      	b.n	801a07e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a05e:	f04f 33ff 	mov.w	r3, #4294967295
 801a062:	e00c      	b.n	801a07e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801a064:	68fb      	ldr	r3, [r7, #12]
 801a066:	6818      	ldr	r0, [r3, #0]
 801a068:	f04f 33ff 	mov.w	r3, #4294967295
 801a06c:	2200      	movs	r2, #0
 801a06e:	68b9      	ldr	r1, [r7, #8]
 801a070:	f7ec fc94 	bl	800699c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801a074:	f7eb ffc2 	bl	8005ffc <osKernelGetTickCount>
 801a078:	4602      	mov	r2, r0
 801a07a:	697b      	ldr	r3, [r7, #20]
 801a07c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801a07e:	4618      	mov	r0, r3
 801a080:	3718      	adds	r7, #24
 801a082:	46bd      	mov	sp, r7
 801a084:	bd80      	pop	{r7, pc}

0801a086 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801a086:	b580      	push	{r7, lr}
 801a088:	b082      	sub	sp, #8
 801a08a:	af00      	add	r7, sp, #0
 801a08c:	6078      	str	r0, [r7, #4]
 801a08e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	6818      	ldr	r0, [r3, #0]
 801a094:	2300      	movs	r3, #0
 801a096:	2200      	movs	r2, #0
 801a098:	6839      	ldr	r1, [r7, #0]
 801a09a:	f7ec fc7f 	bl	800699c <osMessageQueueGet>
 801a09e:	4603      	mov	r3, r0
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d101      	bne.n	801a0a8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	e001      	b.n	801a0ac <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801a0a8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	3708      	adds	r7, #8
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	bd80      	pop	{r7, pc}

0801a0b4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a0b4:	b480      	push	{r7}
 801a0b6:	b083      	sub	sp, #12
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d101      	bne.n	801a0c8 <sys_mbox_valid+0x14>
    return 0;
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	e000      	b.n	801a0ca <sys_mbox_valid+0x16>
  else
    return 1;
 801a0c8:	2301      	movs	r3, #1
}
 801a0ca:	4618      	mov	r0, r3
 801a0cc:	370c      	adds	r7, #12
 801a0ce:	46bd      	mov	sp, r7
 801a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d4:	4770      	bx	lr

0801a0d6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801a0d6:	b480      	push	{r7}
 801a0d8:	b083      	sub	sp, #12
 801a0da:	af00      	add	r7, sp, #0
 801a0dc:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	2200      	movs	r2, #0
 801a0e2:	601a      	str	r2, [r3, #0]
}
 801a0e4:	bf00      	nop
 801a0e6:	370c      	adds	r7, #12
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ee:	4770      	bx	lr

0801a0f0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b082      	sub	sp, #8
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
 801a0f8:	460b      	mov	r3, r1
 801a0fa:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801a0fc:	78fb      	ldrb	r3, [r7, #3]
 801a0fe:	2200      	movs	r2, #0
 801a100:	4619      	mov	r1, r3
 801a102:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a106:	f7ec f9bd 	bl	8006484 <osSemaphoreNew>
 801a10a:	4602      	mov	r2, r0
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d102      	bne.n	801a11e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a118:	f04f 33ff 	mov.w	r3, #4294967295
 801a11c:	e009      	b.n	801a132 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801a11e:	78fb      	ldrb	r3, [r7, #3]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d105      	bne.n	801a130 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	2100      	movs	r1, #0
 801a12a:	4618      	mov	r0, r3
 801a12c:	f7ec fa48 	bl	80065c0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801a130:	2300      	movs	r3, #0
}
 801a132:	4618      	mov	r0, r3
 801a134:	3708      	adds	r7, #8
 801a136:	46bd      	mov	sp, r7
 801a138:	bd80      	pop	{r7, pc}

0801a13a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801a13a:	b580      	push	{r7, lr}
 801a13c:	b084      	sub	sp, #16
 801a13e:	af00      	add	r7, sp, #0
 801a140:	6078      	str	r0, [r7, #4]
 801a142:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801a144:	f7eb ff5a 	bl	8005ffc <osKernelGetTickCount>
 801a148:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801a14a:	683b      	ldr	r3, [r7, #0]
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d011      	beq.n	801a174 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	6839      	ldr	r1, [r7, #0]
 801a156:	4618      	mov	r0, r3
 801a158:	f7ec fa32 	bl	80065c0 <osSemaphoreAcquire>
 801a15c:	4603      	mov	r3, r0
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d105      	bne.n	801a16e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801a162:	f7eb ff4b 	bl	8005ffc <osKernelGetTickCount>
 801a166:	4602      	mov	r2, r0
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	1ad3      	subs	r3, r2, r3
 801a16c:	e012      	b.n	801a194 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a16e:	f04f 33ff 	mov.w	r3, #4294967295
 801a172:	e00f      	b.n	801a194 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801a174:	bf00      	nop
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	f04f 31ff 	mov.w	r1, #4294967295
 801a17e:	4618      	mov	r0, r3
 801a180:	f7ec fa1e 	bl	80065c0 <osSemaphoreAcquire>
 801a184:	4603      	mov	r3, r0
 801a186:	2b00      	cmp	r3, #0
 801a188:	d1f5      	bne.n	801a176 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801a18a:	f7eb ff37 	bl	8005ffc <osKernelGetTickCount>
 801a18e:	4602      	mov	r2, r0
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801a194:	4618      	mov	r0, r3
 801a196:	3710      	adds	r7, #16
 801a198:	46bd      	mov	sp, r7
 801a19a:	bd80      	pop	{r7, pc}

0801a19c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801a19c:	b580      	push	{r7, lr}
 801a19e:	b082      	sub	sp, #8
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	f7ec fa6f 	bl	800668c <osSemaphoreRelease>
}
 801a1ae:	bf00      	nop
 801a1b0:	3708      	adds	r7, #8
 801a1b2:	46bd      	mov	sp, r7
 801a1b4:	bd80      	pop	{r7, pc}

0801a1b6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801a1b6:	b580      	push	{r7, lr}
 801a1b8:	b082      	sub	sp, #8
 801a1ba:	af00      	add	r7, sp, #0
 801a1bc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	f7ec faba 	bl	800673c <osSemaphoreDelete>
}
 801a1c8:	bf00      	nop
 801a1ca:	3708      	adds	r7, #8
 801a1cc:	46bd      	mov	sp, r7
 801a1ce:	bd80      	pop	{r7, pc}

0801a1d0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801a1d0:	b480      	push	{r7}
 801a1d2:	b083      	sub	sp, #12
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d101      	bne.n	801a1e4 <sys_sem_valid+0x14>
    return 0;
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	e000      	b.n	801a1e6 <sys_sem_valid+0x16>
  else
    return 1;
 801a1e4:	2301      	movs	r3, #1
}
 801a1e6:	4618      	mov	r0, r3
 801a1e8:	370c      	adds	r7, #12
 801a1ea:	46bd      	mov	sp, r7
 801a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f0:	4770      	bx	lr

0801a1f2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801a1f2:	b480      	push	{r7}
 801a1f4:	b083      	sub	sp, #12
 801a1f6:	af00      	add	r7, sp, #0
 801a1f8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	2200      	movs	r2, #0
 801a1fe:	601a      	str	r2, [r3, #0]
}
 801a200:	bf00      	nop
 801a202:	370c      	adds	r7, #12
 801a204:	46bd      	mov	sp, r7
 801a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a20a:	4770      	bx	lr

0801a20c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a20c:	b580      	push	{r7, lr}
 801a20e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801a210:	2000      	movs	r0, #0
 801a212:	f7eb ffef 	bl	80061f4 <osMutexNew>
 801a216:	4602      	mov	r2, r0
 801a218:	4b01      	ldr	r3, [pc, #4]	; (801a220 <sys_init+0x14>)
 801a21a:	601a      	str	r2, [r3, #0]
#endif
}
 801a21c:	bf00      	nop
 801a21e:	bd80      	pop	{r7, pc}
 801a220:	2000bb18 	.word	0x2000bb18

0801a224 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a224:	b580      	push	{r7, lr}
 801a226:	b082      	sub	sp, #8
 801a228:	af00      	add	r7, sp, #0
 801a22a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801a22c:	2000      	movs	r0, #0
 801a22e:	f7eb ffe1 	bl	80061f4 <osMutexNew>
 801a232:	4602      	mov	r2, r0
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d102      	bne.n	801a246 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a240:	f04f 33ff 	mov.w	r3, #4294967295
 801a244:	e000      	b.n	801a248 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a246:	2300      	movs	r3, #0
}
 801a248:	4618      	mov	r0, r3
 801a24a:	3708      	adds	r7, #8
 801a24c:	46bd      	mov	sp, r7
 801a24e:	bd80      	pop	{r7, pc}

0801a250 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b082      	sub	sp, #8
 801a254:	af00      	add	r7, sp, #0
 801a256:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	f04f 31ff 	mov.w	r1, #4294967295
 801a260:	4618      	mov	r0, r3
 801a262:	f7ec f861 	bl	8006328 <osMutexAcquire>
#endif
}
 801a266:	bf00      	nop
 801a268:	3708      	adds	r7, #8
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bd80      	pop	{r7, pc}

0801a26e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a26e:	b580      	push	{r7, lr}
 801a270:	b082      	sub	sp, #8
 801a272:	af00      	add	r7, sp, #0
 801a274:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	4618      	mov	r0, r3
 801a27c:	f7ec f8b2 	bl	80063e4 <osMutexRelease>
}
 801a280:	bf00      	nop
 801a282:	3708      	adds	r7, #8
 801a284:	46bd      	mov	sp, r7
 801a286:	bd80      	pop	{r7, pc}

0801a288 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a288:	b580      	push	{r7, lr}
 801a28a:	b08e      	sub	sp, #56	; 0x38
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	60f8      	str	r0, [r7, #12]
 801a290:	60b9      	str	r1, [r7, #8]
 801a292:	607a      	str	r2, [r7, #4]
 801a294:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801a296:	f107 0314 	add.w	r3, r7, #20
 801a29a:	2224      	movs	r2, #36	; 0x24
 801a29c:	2100      	movs	r1, #0
 801a29e:	4618      	mov	r0, r3
 801a2a0:	f000 f887 	bl	801a3b2 <memset>
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	617b      	str	r3, [r7, #20]
 801a2a8:	683b      	ldr	r3, [r7, #0]
 801a2aa:	62bb      	str	r3, [r7, #40]	; 0x28
 801a2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801a2b0:	f107 0314 	add.w	r3, r7, #20
 801a2b4:	461a      	mov	r2, r3
 801a2b6:	6879      	ldr	r1, [r7, #4]
 801a2b8:	68b8      	ldr	r0, [r7, #8]
 801a2ba:	f7eb fec7 	bl	800604c <osThreadNew>
 801a2be:	4603      	mov	r3, r0
#endif
}
 801a2c0:	4618      	mov	r0, r3
 801a2c2:	3738      	adds	r7, #56	; 0x38
 801a2c4:	46bd      	mov	sp, r7
 801a2c6:	bd80      	pop	{r7, pc}

0801a2c8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801a2cc:	4b04      	ldr	r3, [pc, #16]	; (801a2e0 <sys_arch_protect+0x18>)
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	f04f 31ff 	mov.w	r1, #4294967295
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7ec f827 	bl	8006328 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801a2da:	2301      	movs	r3, #1
}
 801a2dc:	4618      	mov	r0, r3
 801a2de:	bd80      	pop	{r7, pc}
 801a2e0:	2000bb18 	.word	0x2000bb18

0801a2e4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a2e4:	b580      	push	{r7, lr}
 801a2e6:	b082      	sub	sp, #8
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a2ec:	4b04      	ldr	r3, [pc, #16]	; (801a300 <sys_arch_unprotect+0x1c>)
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f7ec f877 	bl	80063e4 <osMutexRelease>
}
 801a2f6:	bf00      	nop
 801a2f8:	3708      	adds	r7, #8
 801a2fa:	46bd      	mov	sp, r7
 801a2fc:	bd80      	pop	{r7, pc}
 801a2fe:	bf00      	nop
 801a300:	2000bb18 	.word	0x2000bb18

0801a304 <atoi>:
 801a304:	220a      	movs	r2, #10
 801a306:	2100      	movs	r1, #0
 801a308:	f000 b988 	b.w	801a61c <strtol>

0801a30c <__libc_init_array>:
 801a30c:	b570      	push	{r4, r5, r6, lr}
 801a30e:	4e0d      	ldr	r6, [pc, #52]	; (801a344 <__libc_init_array+0x38>)
 801a310:	4c0d      	ldr	r4, [pc, #52]	; (801a348 <__libc_init_array+0x3c>)
 801a312:	1ba4      	subs	r4, r4, r6
 801a314:	10a4      	asrs	r4, r4, #2
 801a316:	2500      	movs	r5, #0
 801a318:	42a5      	cmp	r5, r4
 801a31a:	d109      	bne.n	801a330 <__libc_init_array+0x24>
 801a31c:	4e0b      	ldr	r6, [pc, #44]	; (801a34c <__libc_init_array+0x40>)
 801a31e:	4c0c      	ldr	r4, [pc, #48]	; (801a350 <__libc_init_array+0x44>)
 801a320:	f001 f874 	bl	801b40c <_init>
 801a324:	1ba4      	subs	r4, r4, r6
 801a326:	10a4      	asrs	r4, r4, #2
 801a328:	2500      	movs	r5, #0
 801a32a:	42a5      	cmp	r5, r4
 801a32c:	d105      	bne.n	801a33a <__libc_init_array+0x2e>
 801a32e:	bd70      	pop	{r4, r5, r6, pc}
 801a330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a334:	4798      	blx	r3
 801a336:	3501      	adds	r5, #1
 801a338:	e7ee      	b.n	801a318 <__libc_init_array+0xc>
 801a33a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a33e:	4798      	blx	r3
 801a340:	3501      	adds	r5, #1
 801a342:	e7f2      	b.n	801a32a <__libc_init_array+0x1e>
 801a344:	0801f4ec 	.word	0x0801f4ec
 801a348:	0801f4ec 	.word	0x0801f4ec
 801a34c:	0801f4ec 	.word	0x0801f4ec
 801a350:	0801f4f0 	.word	0x0801f4f0

0801a354 <__locale_ctype_ptr_l>:
 801a354:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801a358:	4770      	bx	lr

0801a35a <__ascii_mbtowc>:
 801a35a:	b082      	sub	sp, #8
 801a35c:	b901      	cbnz	r1, 801a360 <__ascii_mbtowc+0x6>
 801a35e:	a901      	add	r1, sp, #4
 801a360:	b142      	cbz	r2, 801a374 <__ascii_mbtowc+0x1a>
 801a362:	b14b      	cbz	r3, 801a378 <__ascii_mbtowc+0x1e>
 801a364:	7813      	ldrb	r3, [r2, #0]
 801a366:	600b      	str	r3, [r1, #0]
 801a368:	7812      	ldrb	r2, [r2, #0]
 801a36a:	1c10      	adds	r0, r2, #0
 801a36c:	bf18      	it	ne
 801a36e:	2001      	movne	r0, #1
 801a370:	b002      	add	sp, #8
 801a372:	4770      	bx	lr
 801a374:	4610      	mov	r0, r2
 801a376:	e7fb      	b.n	801a370 <__ascii_mbtowc+0x16>
 801a378:	f06f 0001 	mvn.w	r0, #1
 801a37c:	e7f8      	b.n	801a370 <__ascii_mbtowc+0x16>

0801a37e <memcmp>:
 801a37e:	b530      	push	{r4, r5, lr}
 801a380:	2400      	movs	r4, #0
 801a382:	42a2      	cmp	r2, r4
 801a384:	d101      	bne.n	801a38a <memcmp+0xc>
 801a386:	2000      	movs	r0, #0
 801a388:	e007      	b.n	801a39a <memcmp+0x1c>
 801a38a:	5d03      	ldrb	r3, [r0, r4]
 801a38c:	3401      	adds	r4, #1
 801a38e:	190d      	adds	r5, r1, r4
 801a390:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801a394:	42ab      	cmp	r3, r5
 801a396:	d0f4      	beq.n	801a382 <memcmp+0x4>
 801a398:	1b58      	subs	r0, r3, r5
 801a39a:	bd30      	pop	{r4, r5, pc}

0801a39c <memcpy>:
 801a39c:	b510      	push	{r4, lr}
 801a39e:	1e43      	subs	r3, r0, #1
 801a3a0:	440a      	add	r2, r1
 801a3a2:	4291      	cmp	r1, r2
 801a3a4:	d100      	bne.n	801a3a8 <memcpy+0xc>
 801a3a6:	bd10      	pop	{r4, pc}
 801a3a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a3ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a3b0:	e7f7      	b.n	801a3a2 <memcpy+0x6>

0801a3b2 <memset>:
 801a3b2:	4402      	add	r2, r0
 801a3b4:	4603      	mov	r3, r0
 801a3b6:	4293      	cmp	r3, r2
 801a3b8:	d100      	bne.n	801a3bc <memset+0xa>
 801a3ba:	4770      	bx	lr
 801a3bc:	f803 1b01 	strb.w	r1, [r3], #1
 801a3c0:	e7f9      	b.n	801a3b6 <memset+0x4>
	...

0801a3c4 <iprintf>:
 801a3c4:	b40f      	push	{r0, r1, r2, r3}
 801a3c6:	4b0a      	ldr	r3, [pc, #40]	; (801a3f0 <iprintf+0x2c>)
 801a3c8:	b513      	push	{r0, r1, r4, lr}
 801a3ca:	681c      	ldr	r4, [r3, #0]
 801a3cc:	b124      	cbz	r4, 801a3d8 <iprintf+0x14>
 801a3ce:	69a3      	ldr	r3, [r4, #24]
 801a3d0:	b913      	cbnz	r3, 801a3d8 <iprintf+0x14>
 801a3d2:	4620      	mov	r0, r4
 801a3d4:	f000 faf6 	bl	801a9c4 <__sinit>
 801a3d8:	ab05      	add	r3, sp, #20
 801a3da:	9a04      	ldr	r2, [sp, #16]
 801a3dc:	68a1      	ldr	r1, [r4, #8]
 801a3de:	9301      	str	r3, [sp, #4]
 801a3e0:	4620      	mov	r0, r4
 801a3e2:	f000 fcb7 	bl	801ad54 <_vfiprintf_r>
 801a3e6:	b002      	add	sp, #8
 801a3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3ec:	b004      	add	sp, #16
 801a3ee:	4770      	bx	lr
 801a3f0:	20000024 	.word	0x20000024

0801a3f4 <_puts_r>:
 801a3f4:	b570      	push	{r4, r5, r6, lr}
 801a3f6:	460e      	mov	r6, r1
 801a3f8:	4605      	mov	r5, r0
 801a3fa:	b118      	cbz	r0, 801a404 <_puts_r+0x10>
 801a3fc:	6983      	ldr	r3, [r0, #24]
 801a3fe:	b90b      	cbnz	r3, 801a404 <_puts_r+0x10>
 801a400:	f000 fae0 	bl	801a9c4 <__sinit>
 801a404:	69ab      	ldr	r3, [r5, #24]
 801a406:	68ac      	ldr	r4, [r5, #8]
 801a408:	b913      	cbnz	r3, 801a410 <_puts_r+0x1c>
 801a40a:	4628      	mov	r0, r5
 801a40c:	f000 fada 	bl	801a9c4 <__sinit>
 801a410:	4b23      	ldr	r3, [pc, #140]	; (801a4a0 <_puts_r+0xac>)
 801a412:	429c      	cmp	r4, r3
 801a414:	d117      	bne.n	801a446 <_puts_r+0x52>
 801a416:	686c      	ldr	r4, [r5, #4]
 801a418:	89a3      	ldrh	r3, [r4, #12]
 801a41a:	071b      	lsls	r3, r3, #28
 801a41c:	d51d      	bpl.n	801a45a <_puts_r+0x66>
 801a41e:	6923      	ldr	r3, [r4, #16]
 801a420:	b1db      	cbz	r3, 801a45a <_puts_r+0x66>
 801a422:	3e01      	subs	r6, #1
 801a424:	68a3      	ldr	r3, [r4, #8]
 801a426:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a42a:	3b01      	subs	r3, #1
 801a42c:	60a3      	str	r3, [r4, #8]
 801a42e:	b9e9      	cbnz	r1, 801a46c <_puts_r+0x78>
 801a430:	2b00      	cmp	r3, #0
 801a432:	da2e      	bge.n	801a492 <_puts_r+0x9e>
 801a434:	4622      	mov	r2, r4
 801a436:	210a      	movs	r1, #10
 801a438:	4628      	mov	r0, r5
 801a43a:	f000 f905 	bl	801a648 <__swbuf_r>
 801a43e:	3001      	adds	r0, #1
 801a440:	d011      	beq.n	801a466 <_puts_r+0x72>
 801a442:	200a      	movs	r0, #10
 801a444:	e011      	b.n	801a46a <_puts_r+0x76>
 801a446:	4b17      	ldr	r3, [pc, #92]	; (801a4a4 <_puts_r+0xb0>)
 801a448:	429c      	cmp	r4, r3
 801a44a:	d101      	bne.n	801a450 <_puts_r+0x5c>
 801a44c:	68ac      	ldr	r4, [r5, #8]
 801a44e:	e7e3      	b.n	801a418 <_puts_r+0x24>
 801a450:	4b15      	ldr	r3, [pc, #84]	; (801a4a8 <_puts_r+0xb4>)
 801a452:	429c      	cmp	r4, r3
 801a454:	bf08      	it	eq
 801a456:	68ec      	ldreq	r4, [r5, #12]
 801a458:	e7de      	b.n	801a418 <_puts_r+0x24>
 801a45a:	4621      	mov	r1, r4
 801a45c:	4628      	mov	r0, r5
 801a45e:	f000 f953 	bl	801a708 <__swsetup_r>
 801a462:	2800      	cmp	r0, #0
 801a464:	d0dd      	beq.n	801a422 <_puts_r+0x2e>
 801a466:	f04f 30ff 	mov.w	r0, #4294967295
 801a46a:	bd70      	pop	{r4, r5, r6, pc}
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	da04      	bge.n	801a47a <_puts_r+0x86>
 801a470:	69a2      	ldr	r2, [r4, #24]
 801a472:	429a      	cmp	r2, r3
 801a474:	dc06      	bgt.n	801a484 <_puts_r+0x90>
 801a476:	290a      	cmp	r1, #10
 801a478:	d004      	beq.n	801a484 <_puts_r+0x90>
 801a47a:	6823      	ldr	r3, [r4, #0]
 801a47c:	1c5a      	adds	r2, r3, #1
 801a47e:	6022      	str	r2, [r4, #0]
 801a480:	7019      	strb	r1, [r3, #0]
 801a482:	e7cf      	b.n	801a424 <_puts_r+0x30>
 801a484:	4622      	mov	r2, r4
 801a486:	4628      	mov	r0, r5
 801a488:	f000 f8de 	bl	801a648 <__swbuf_r>
 801a48c:	3001      	adds	r0, #1
 801a48e:	d1c9      	bne.n	801a424 <_puts_r+0x30>
 801a490:	e7e9      	b.n	801a466 <_puts_r+0x72>
 801a492:	6823      	ldr	r3, [r4, #0]
 801a494:	200a      	movs	r0, #10
 801a496:	1c5a      	adds	r2, r3, #1
 801a498:	6022      	str	r2, [r4, #0]
 801a49a:	7018      	strb	r0, [r3, #0]
 801a49c:	e7e5      	b.n	801a46a <_puts_r+0x76>
 801a49e:	bf00      	nop
 801a4a0:	0801f470 	.word	0x0801f470
 801a4a4:	0801f490 	.word	0x0801f490
 801a4a8:	0801f450 	.word	0x0801f450

0801a4ac <puts>:
 801a4ac:	4b02      	ldr	r3, [pc, #8]	; (801a4b8 <puts+0xc>)
 801a4ae:	4601      	mov	r1, r0
 801a4b0:	6818      	ldr	r0, [r3, #0]
 801a4b2:	f7ff bf9f 	b.w	801a3f4 <_puts_r>
 801a4b6:	bf00      	nop
 801a4b8:	20000024 	.word	0x20000024

0801a4bc <rand>:
 801a4bc:	b538      	push	{r3, r4, r5, lr}
 801a4be:	4b13      	ldr	r3, [pc, #76]	; (801a50c <rand+0x50>)
 801a4c0:	681c      	ldr	r4, [r3, #0]
 801a4c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a4c4:	b97b      	cbnz	r3, 801a4e6 <rand+0x2a>
 801a4c6:	2018      	movs	r0, #24
 801a4c8:	f000 fb6a 	bl	801aba0 <malloc>
 801a4cc:	4a10      	ldr	r2, [pc, #64]	; (801a510 <rand+0x54>)
 801a4ce:	4b11      	ldr	r3, [pc, #68]	; (801a514 <rand+0x58>)
 801a4d0:	63a0      	str	r0, [r4, #56]	; 0x38
 801a4d2:	e9c0 2300 	strd	r2, r3, [r0]
 801a4d6:	4b10      	ldr	r3, [pc, #64]	; (801a518 <rand+0x5c>)
 801a4d8:	6083      	str	r3, [r0, #8]
 801a4da:	230b      	movs	r3, #11
 801a4dc:	8183      	strh	r3, [r0, #12]
 801a4de:	2201      	movs	r2, #1
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a4e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a4e8:	480c      	ldr	r0, [pc, #48]	; (801a51c <rand+0x60>)
 801a4ea:	690a      	ldr	r2, [r1, #16]
 801a4ec:	694b      	ldr	r3, [r1, #20]
 801a4ee:	4c0c      	ldr	r4, [pc, #48]	; (801a520 <rand+0x64>)
 801a4f0:	4350      	muls	r0, r2
 801a4f2:	fb04 0003 	mla	r0, r4, r3, r0
 801a4f6:	fba2 2304 	umull	r2, r3, r2, r4
 801a4fa:	4403      	add	r3, r0
 801a4fc:	1c54      	adds	r4, r2, #1
 801a4fe:	f143 0500 	adc.w	r5, r3, #0
 801a502:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801a506:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801a50a:	bd38      	pop	{r3, r4, r5, pc}
 801a50c:	20000024 	.word	0x20000024
 801a510:	abcd330e 	.word	0xabcd330e
 801a514:	e66d1234 	.word	0xe66d1234
 801a518:	0005deec 	.word	0x0005deec
 801a51c:	5851f42d 	.word	0x5851f42d
 801a520:	4c957f2d 	.word	0x4c957f2d

0801a524 <_strtol_l.isra.0>:
 801a524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a528:	4680      	mov	r8, r0
 801a52a:	4689      	mov	r9, r1
 801a52c:	4692      	mov	sl, r2
 801a52e:	461e      	mov	r6, r3
 801a530:	460f      	mov	r7, r1
 801a532:	463d      	mov	r5, r7
 801a534:	9808      	ldr	r0, [sp, #32]
 801a536:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a53a:	f7ff ff0b 	bl	801a354 <__locale_ctype_ptr_l>
 801a53e:	4420      	add	r0, r4
 801a540:	7843      	ldrb	r3, [r0, #1]
 801a542:	f013 0308 	ands.w	r3, r3, #8
 801a546:	d132      	bne.n	801a5ae <_strtol_l.isra.0+0x8a>
 801a548:	2c2d      	cmp	r4, #45	; 0x2d
 801a54a:	d132      	bne.n	801a5b2 <_strtol_l.isra.0+0x8e>
 801a54c:	787c      	ldrb	r4, [r7, #1]
 801a54e:	1cbd      	adds	r5, r7, #2
 801a550:	2201      	movs	r2, #1
 801a552:	2e00      	cmp	r6, #0
 801a554:	d05d      	beq.n	801a612 <_strtol_l.isra.0+0xee>
 801a556:	2e10      	cmp	r6, #16
 801a558:	d109      	bne.n	801a56e <_strtol_l.isra.0+0x4a>
 801a55a:	2c30      	cmp	r4, #48	; 0x30
 801a55c:	d107      	bne.n	801a56e <_strtol_l.isra.0+0x4a>
 801a55e:	782b      	ldrb	r3, [r5, #0]
 801a560:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a564:	2b58      	cmp	r3, #88	; 0x58
 801a566:	d14f      	bne.n	801a608 <_strtol_l.isra.0+0xe4>
 801a568:	786c      	ldrb	r4, [r5, #1]
 801a56a:	2610      	movs	r6, #16
 801a56c:	3502      	adds	r5, #2
 801a56e:	2a00      	cmp	r2, #0
 801a570:	bf14      	ite	ne
 801a572:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801a576:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801a57a:	2700      	movs	r7, #0
 801a57c:	fbb1 fcf6 	udiv	ip, r1, r6
 801a580:	4638      	mov	r0, r7
 801a582:	fb06 1e1c 	mls	lr, r6, ip, r1
 801a586:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801a58a:	2b09      	cmp	r3, #9
 801a58c:	d817      	bhi.n	801a5be <_strtol_l.isra.0+0x9a>
 801a58e:	461c      	mov	r4, r3
 801a590:	42a6      	cmp	r6, r4
 801a592:	dd23      	ble.n	801a5dc <_strtol_l.isra.0+0xb8>
 801a594:	1c7b      	adds	r3, r7, #1
 801a596:	d007      	beq.n	801a5a8 <_strtol_l.isra.0+0x84>
 801a598:	4584      	cmp	ip, r0
 801a59a:	d31c      	bcc.n	801a5d6 <_strtol_l.isra.0+0xb2>
 801a59c:	d101      	bne.n	801a5a2 <_strtol_l.isra.0+0x7e>
 801a59e:	45a6      	cmp	lr, r4
 801a5a0:	db19      	blt.n	801a5d6 <_strtol_l.isra.0+0xb2>
 801a5a2:	fb00 4006 	mla	r0, r0, r6, r4
 801a5a6:	2701      	movs	r7, #1
 801a5a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a5ac:	e7eb      	b.n	801a586 <_strtol_l.isra.0+0x62>
 801a5ae:	462f      	mov	r7, r5
 801a5b0:	e7bf      	b.n	801a532 <_strtol_l.isra.0+0xe>
 801a5b2:	2c2b      	cmp	r4, #43	; 0x2b
 801a5b4:	bf04      	itt	eq
 801a5b6:	1cbd      	addeq	r5, r7, #2
 801a5b8:	787c      	ldrbeq	r4, [r7, #1]
 801a5ba:	461a      	mov	r2, r3
 801a5bc:	e7c9      	b.n	801a552 <_strtol_l.isra.0+0x2e>
 801a5be:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801a5c2:	2b19      	cmp	r3, #25
 801a5c4:	d801      	bhi.n	801a5ca <_strtol_l.isra.0+0xa6>
 801a5c6:	3c37      	subs	r4, #55	; 0x37
 801a5c8:	e7e2      	b.n	801a590 <_strtol_l.isra.0+0x6c>
 801a5ca:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801a5ce:	2b19      	cmp	r3, #25
 801a5d0:	d804      	bhi.n	801a5dc <_strtol_l.isra.0+0xb8>
 801a5d2:	3c57      	subs	r4, #87	; 0x57
 801a5d4:	e7dc      	b.n	801a590 <_strtol_l.isra.0+0x6c>
 801a5d6:	f04f 37ff 	mov.w	r7, #4294967295
 801a5da:	e7e5      	b.n	801a5a8 <_strtol_l.isra.0+0x84>
 801a5dc:	1c7b      	adds	r3, r7, #1
 801a5de:	d108      	bne.n	801a5f2 <_strtol_l.isra.0+0xce>
 801a5e0:	2322      	movs	r3, #34	; 0x22
 801a5e2:	f8c8 3000 	str.w	r3, [r8]
 801a5e6:	4608      	mov	r0, r1
 801a5e8:	f1ba 0f00 	cmp.w	sl, #0
 801a5ec:	d107      	bne.n	801a5fe <_strtol_l.isra.0+0xda>
 801a5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5f2:	b102      	cbz	r2, 801a5f6 <_strtol_l.isra.0+0xd2>
 801a5f4:	4240      	negs	r0, r0
 801a5f6:	f1ba 0f00 	cmp.w	sl, #0
 801a5fa:	d0f8      	beq.n	801a5ee <_strtol_l.isra.0+0xca>
 801a5fc:	b10f      	cbz	r7, 801a602 <_strtol_l.isra.0+0xde>
 801a5fe:	f105 39ff 	add.w	r9, r5, #4294967295
 801a602:	f8ca 9000 	str.w	r9, [sl]
 801a606:	e7f2      	b.n	801a5ee <_strtol_l.isra.0+0xca>
 801a608:	2430      	movs	r4, #48	; 0x30
 801a60a:	2e00      	cmp	r6, #0
 801a60c:	d1af      	bne.n	801a56e <_strtol_l.isra.0+0x4a>
 801a60e:	2608      	movs	r6, #8
 801a610:	e7ad      	b.n	801a56e <_strtol_l.isra.0+0x4a>
 801a612:	2c30      	cmp	r4, #48	; 0x30
 801a614:	d0a3      	beq.n	801a55e <_strtol_l.isra.0+0x3a>
 801a616:	260a      	movs	r6, #10
 801a618:	e7a9      	b.n	801a56e <_strtol_l.isra.0+0x4a>
	...

0801a61c <strtol>:
 801a61c:	4b08      	ldr	r3, [pc, #32]	; (801a640 <strtol+0x24>)
 801a61e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a620:	681c      	ldr	r4, [r3, #0]
 801a622:	4d08      	ldr	r5, [pc, #32]	; (801a644 <strtol+0x28>)
 801a624:	6a23      	ldr	r3, [r4, #32]
 801a626:	2b00      	cmp	r3, #0
 801a628:	bf08      	it	eq
 801a62a:	462b      	moveq	r3, r5
 801a62c:	9300      	str	r3, [sp, #0]
 801a62e:	4613      	mov	r3, r2
 801a630:	460a      	mov	r2, r1
 801a632:	4601      	mov	r1, r0
 801a634:	4620      	mov	r0, r4
 801a636:	f7ff ff75 	bl	801a524 <_strtol_l.isra.0>
 801a63a:	b003      	add	sp, #12
 801a63c:	bd30      	pop	{r4, r5, pc}
 801a63e:	bf00      	nop
 801a640:	20000024 	.word	0x20000024
 801a644:	20000088 	.word	0x20000088

0801a648 <__swbuf_r>:
 801a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a64a:	460e      	mov	r6, r1
 801a64c:	4614      	mov	r4, r2
 801a64e:	4605      	mov	r5, r0
 801a650:	b118      	cbz	r0, 801a65a <__swbuf_r+0x12>
 801a652:	6983      	ldr	r3, [r0, #24]
 801a654:	b90b      	cbnz	r3, 801a65a <__swbuf_r+0x12>
 801a656:	f000 f9b5 	bl	801a9c4 <__sinit>
 801a65a:	4b21      	ldr	r3, [pc, #132]	; (801a6e0 <__swbuf_r+0x98>)
 801a65c:	429c      	cmp	r4, r3
 801a65e:	d12a      	bne.n	801a6b6 <__swbuf_r+0x6e>
 801a660:	686c      	ldr	r4, [r5, #4]
 801a662:	69a3      	ldr	r3, [r4, #24]
 801a664:	60a3      	str	r3, [r4, #8]
 801a666:	89a3      	ldrh	r3, [r4, #12]
 801a668:	071a      	lsls	r2, r3, #28
 801a66a:	d52e      	bpl.n	801a6ca <__swbuf_r+0x82>
 801a66c:	6923      	ldr	r3, [r4, #16]
 801a66e:	b363      	cbz	r3, 801a6ca <__swbuf_r+0x82>
 801a670:	6923      	ldr	r3, [r4, #16]
 801a672:	6820      	ldr	r0, [r4, #0]
 801a674:	1ac0      	subs	r0, r0, r3
 801a676:	6963      	ldr	r3, [r4, #20]
 801a678:	b2f6      	uxtb	r6, r6
 801a67a:	4283      	cmp	r3, r0
 801a67c:	4637      	mov	r7, r6
 801a67e:	dc04      	bgt.n	801a68a <__swbuf_r+0x42>
 801a680:	4621      	mov	r1, r4
 801a682:	4628      	mov	r0, r5
 801a684:	f000 f934 	bl	801a8f0 <_fflush_r>
 801a688:	bb28      	cbnz	r0, 801a6d6 <__swbuf_r+0x8e>
 801a68a:	68a3      	ldr	r3, [r4, #8]
 801a68c:	3b01      	subs	r3, #1
 801a68e:	60a3      	str	r3, [r4, #8]
 801a690:	6823      	ldr	r3, [r4, #0]
 801a692:	1c5a      	adds	r2, r3, #1
 801a694:	6022      	str	r2, [r4, #0]
 801a696:	701e      	strb	r6, [r3, #0]
 801a698:	6963      	ldr	r3, [r4, #20]
 801a69a:	3001      	adds	r0, #1
 801a69c:	4283      	cmp	r3, r0
 801a69e:	d004      	beq.n	801a6aa <__swbuf_r+0x62>
 801a6a0:	89a3      	ldrh	r3, [r4, #12]
 801a6a2:	07db      	lsls	r3, r3, #31
 801a6a4:	d519      	bpl.n	801a6da <__swbuf_r+0x92>
 801a6a6:	2e0a      	cmp	r6, #10
 801a6a8:	d117      	bne.n	801a6da <__swbuf_r+0x92>
 801a6aa:	4621      	mov	r1, r4
 801a6ac:	4628      	mov	r0, r5
 801a6ae:	f000 f91f 	bl	801a8f0 <_fflush_r>
 801a6b2:	b190      	cbz	r0, 801a6da <__swbuf_r+0x92>
 801a6b4:	e00f      	b.n	801a6d6 <__swbuf_r+0x8e>
 801a6b6:	4b0b      	ldr	r3, [pc, #44]	; (801a6e4 <__swbuf_r+0x9c>)
 801a6b8:	429c      	cmp	r4, r3
 801a6ba:	d101      	bne.n	801a6c0 <__swbuf_r+0x78>
 801a6bc:	68ac      	ldr	r4, [r5, #8]
 801a6be:	e7d0      	b.n	801a662 <__swbuf_r+0x1a>
 801a6c0:	4b09      	ldr	r3, [pc, #36]	; (801a6e8 <__swbuf_r+0xa0>)
 801a6c2:	429c      	cmp	r4, r3
 801a6c4:	bf08      	it	eq
 801a6c6:	68ec      	ldreq	r4, [r5, #12]
 801a6c8:	e7cb      	b.n	801a662 <__swbuf_r+0x1a>
 801a6ca:	4621      	mov	r1, r4
 801a6cc:	4628      	mov	r0, r5
 801a6ce:	f000 f81b 	bl	801a708 <__swsetup_r>
 801a6d2:	2800      	cmp	r0, #0
 801a6d4:	d0cc      	beq.n	801a670 <__swbuf_r+0x28>
 801a6d6:	f04f 37ff 	mov.w	r7, #4294967295
 801a6da:	4638      	mov	r0, r7
 801a6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6de:	bf00      	nop
 801a6e0:	0801f470 	.word	0x0801f470
 801a6e4:	0801f490 	.word	0x0801f490
 801a6e8:	0801f450 	.word	0x0801f450

0801a6ec <__ascii_wctomb>:
 801a6ec:	b149      	cbz	r1, 801a702 <__ascii_wctomb+0x16>
 801a6ee:	2aff      	cmp	r2, #255	; 0xff
 801a6f0:	bf85      	ittet	hi
 801a6f2:	238a      	movhi	r3, #138	; 0x8a
 801a6f4:	6003      	strhi	r3, [r0, #0]
 801a6f6:	700a      	strbls	r2, [r1, #0]
 801a6f8:	f04f 30ff 	movhi.w	r0, #4294967295
 801a6fc:	bf98      	it	ls
 801a6fe:	2001      	movls	r0, #1
 801a700:	4770      	bx	lr
 801a702:	4608      	mov	r0, r1
 801a704:	4770      	bx	lr
	...

0801a708 <__swsetup_r>:
 801a708:	4b32      	ldr	r3, [pc, #200]	; (801a7d4 <__swsetup_r+0xcc>)
 801a70a:	b570      	push	{r4, r5, r6, lr}
 801a70c:	681d      	ldr	r5, [r3, #0]
 801a70e:	4606      	mov	r6, r0
 801a710:	460c      	mov	r4, r1
 801a712:	b125      	cbz	r5, 801a71e <__swsetup_r+0x16>
 801a714:	69ab      	ldr	r3, [r5, #24]
 801a716:	b913      	cbnz	r3, 801a71e <__swsetup_r+0x16>
 801a718:	4628      	mov	r0, r5
 801a71a:	f000 f953 	bl	801a9c4 <__sinit>
 801a71e:	4b2e      	ldr	r3, [pc, #184]	; (801a7d8 <__swsetup_r+0xd0>)
 801a720:	429c      	cmp	r4, r3
 801a722:	d10f      	bne.n	801a744 <__swsetup_r+0x3c>
 801a724:	686c      	ldr	r4, [r5, #4]
 801a726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a72a:	b29a      	uxth	r2, r3
 801a72c:	0715      	lsls	r5, r2, #28
 801a72e:	d42c      	bmi.n	801a78a <__swsetup_r+0x82>
 801a730:	06d0      	lsls	r0, r2, #27
 801a732:	d411      	bmi.n	801a758 <__swsetup_r+0x50>
 801a734:	2209      	movs	r2, #9
 801a736:	6032      	str	r2, [r6, #0]
 801a738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a73c:	81a3      	strh	r3, [r4, #12]
 801a73e:	f04f 30ff 	mov.w	r0, #4294967295
 801a742:	e03e      	b.n	801a7c2 <__swsetup_r+0xba>
 801a744:	4b25      	ldr	r3, [pc, #148]	; (801a7dc <__swsetup_r+0xd4>)
 801a746:	429c      	cmp	r4, r3
 801a748:	d101      	bne.n	801a74e <__swsetup_r+0x46>
 801a74a:	68ac      	ldr	r4, [r5, #8]
 801a74c:	e7eb      	b.n	801a726 <__swsetup_r+0x1e>
 801a74e:	4b24      	ldr	r3, [pc, #144]	; (801a7e0 <__swsetup_r+0xd8>)
 801a750:	429c      	cmp	r4, r3
 801a752:	bf08      	it	eq
 801a754:	68ec      	ldreq	r4, [r5, #12]
 801a756:	e7e6      	b.n	801a726 <__swsetup_r+0x1e>
 801a758:	0751      	lsls	r1, r2, #29
 801a75a:	d512      	bpl.n	801a782 <__swsetup_r+0x7a>
 801a75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a75e:	b141      	cbz	r1, 801a772 <__swsetup_r+0x6a>
 801a760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a764:	4299      	cmp	r1, r3
 801a766:	d002      	beq.n	801a76e <__swsetup_r+0x66>
 801a768:	4630      	mov	r0, r6
 801a76a:	f000 fa21 	bl	801abb0 <_free_r>
 801a76e:	2300      	movs	r3, #0
 801a770:	6363      	str	r3, [r4, #52]	; 0x34
 801a772:	89a3      	ldrh	r3, [r4, #12]
 801a774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a778:	81a3      	strh	r3, [r4, #12]
 801a77a:	2300      	movs	r3, #0
 801a77c:	6063      	str	r3, [r4, #4]
 801a77e:	6923      	ldr	r3, [r4, #16]
 801a780:	6023      	str	r3, [r4, #0]
 801a782:	89a3      	ldrh	r3, [r4, #12]
 801a784:	f043 0308 	orr.w	r3, r3, #8
 801a788:	81a3      	strh	r3, [r4, #12]
 801a78a:	6923      	ldr	r3, [r4, #16]
 801a78c:	b94b      	cbnz	r3, 801a7a2 <__swsetup_r+0x9a>
 801a78e:	89a3      	ldrh	r3, [r4, #12]
 801a790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a798:	d003      	beq.n	801a7a2 <__swsetup_r+0x9a>
 801a79a:	4621      	mov	r1, r4
 801a79c:	4630      	mov	r0, r6
 801a79e:	f000 f9bf 	bl	801ab20 <__smakebuf_r>
 801a7a2:	89a2      	ldrh	r2, [r4, #12]
 801a7a4:	f012 0301 	ands.w	r3, r2, #1
 801a7a8:	d00c      	beq.n	801a7c4 <__swsetup_r+0xbc>
 801a7aa:	2300      	movs	r3, #0
 801a7ac:	60a3      	str	r3, [r4, #8]
 801a7ae:	6963      	ldr	r3, [r4, #20]
 801a7b0:	425b      	negs	r3, r3
 801a7b2:	61a3      	str	r3, [r4, #24]
 801a7b4:	6923      	ldr	r3, [r4, #16]
 801a7b6:	b953      	cbnz	r3, 801a7ce <__swsetup_r+0xc6>
 801a7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a7c0:	d1ba      	bne.n	801a738 <__swsetup_r+0x30>
 801a7c2:	bd70      	pop	{r4, r5, r6, pc}
 801a7c4:	0792      	lsls	r2, r2, #30
 801a7c6:	bf58      	it	pl
 801a7c8:	6963      	ldrpl	r3, [r4, #20]
 801a7ca:	60a3      	str	r3, [r4, #8]
 801a7cc:	e7f2      	b.n	801a7b4 <__swsetup_r+0xac>
 801a7ce:	2000      	movs	r0, #0
 801a7d0:	e7f7      	b.n	801a7c2 <__swsetup_r+0xba>
 801a7d2:	bf00      	nop
 801a7d4:	20000024 	.word	0x20000024
 801a7d8:	0801f470 	.word	0x0801f470
 801a7dc:	0801f490 	.word	0x0801f490
 801a7e0:	0801f450 	.word	0x0801f450

0801a7e4 <__sflush_r>:
 801a7e4:	898a      	ldrh	r2, [r1, #12]
 801a7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7ea:	4605      	mov	r5, r0
 801a7ec:	0710      	lsls	r0, r2, #28
 801a7ee:	460c      	mov	r4, r1
 801a7f0:	d458      	bmi.n	801a8a4 <__sflush_r+0xc0>
 801a7f2:	684b      	ldr	r3, [r1, #4]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	dc05      	bgt.n	801a804 <__sflush_r+0x20>
 801a7f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	dc02      	bgt.n	801a804 <__sflush_r+0x20>
 801a7fe:	2000      	movs	r0, #0
 801a800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a806:	2e00      	cmp	r6, #0
 801a808:	d0f9      	beq.n	801a7fe <__sflush_r+0x1a>
 801a80a:	2300      	movs	r3, #0
 801a80c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a810:	682f      	ldr	r7, [r5, #0]
 801a812:	6a21      	ldr	r1, [r4, #32]
 801a814:	602b      	str	r3, [r5, #0]
 801a816:	d032      	beq.n	801a87e <__sflush_r+0x9a>
 801a818:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a81a:	89a3      	ldrh	r3, [r4, #12]
 801a81c:	075a      	lsls	r2, r3, #29
 801a81e:	d505      	bpl.n	801a82c <__sflush_r+0x48>
 801a820:	6863      	ldr	r3, [r4, #4]
 801a822:	1ac0      	subs	r0, r0, r3
 801a824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a826:	b10b      	cbz	r3, 801a82c <__sflush_r+0x48>
 801a828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a82a:	1ac0      	subs	r0, r0, r3
 801a82c:	2300      	movs	r3, #0
 801a82e:	4602      	mov	r2, r0
 801a830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a832:	6a21      	ldr	r1, [r4, #32]
 801a834:	4628      	mov	r0, r5
 801a836:	47b0      	blx	r6
 801a838:	1c43      	adds	r3, r0, #1
 801a83a:	89a3      	ldrh	r3, [r4, #12]
 801a83c:	d106      	bne.n	801a84c <__sflush_r+0x68>
 801a83e:	6829      	ldr	r1, [r5, #0]
 801a840:	291d      	cmp	r1, #29
 801a842:	d848      	bhi.n	801a8d6 <__sflush_r+0xf2>
 801a844:	4a29      	ldr	r2, [pc, #164]	; (801a8ec <__sflush_r+0x108>)
 801a846:	40ca      	lsrs	r2, r1
 801a848:	07d6      	lsls	r6, r2, #31
 801a84a:	d544      	bpl.n	801a8d6 <__sflush_r+0xf2>
 801a84c:	2200      	movs	r2, #0
 801a84e:	6062      	str	r2, [r4, #4]
 801a850:	04d9      	lsls	r1, r3, #19
 801a852:	6922      	ldr	r2, [r4, #16]
 801a854:	6022      	str	r2, [r4, #0]
 801a856:	d504      	bpl.n	801a862 <__sflush_r+0x7e>
 801a858:	1c42      	adds	r2, r0, #1
 801a85a:	d101      	bne.n	801a860 <__sflush_r+0x7c>
 801a85c:	682b      	ldr	r3, [r5, #0]
 801a85e:	b903      	cbnz	r3, 801a862 <__sflush_r+0x7e>
 801a860:	6560      	str	r0, [r4, #84]	; 0x54
 801a862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a864:	602f      	str	r7, [r5, #0]
 801a866:	2900      	cmp	r1, #0
 801a868:	d0c9      	beq.n	801a7fe <__sflush_r+0x1a>
 801a86a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a86e:	4299      	cmp	r1, r3
 801a870:	d002      	beq.n	801a878 <__sflush_r+0x94>
 801a872:	4628      	mov	r0, r5
 801a874:	f000 f99c 	bl	801abb0 <_free_r>
 801a878:	2000      	movs	r0, #0
 801a87a:	6360      	str	r0, [r4, #52]	; 0x34
 801a87c:	e7c0      	b.n	801a800 <__sflush_r+0x1c>
 801a87e:	2301      	movs	r3, #1
 801a880:	4628      	mov	r0, r5
 801a882:	47b0      	blx	r6
 801a884:	1c41      	adds	r1, r0, #1
 801a886:	d1c8      	bne.n	801a81a <__sflush_r+0x36>
 801a888:	682b      	ldr	r3, [r5, #0]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d0c5      	beq.n	801a81a <__sflush_r+0x36>
 801a88e:	2b1d      	cmp	r3, #29
 801a890:	d001      	beq.n	801a896 <__sflush_r+0xb2>
 801a892:	2b16      	cmp	r3, #22
 801a894:	d101      	bne.n	801a89a <__sflush_r+0xb6>
 801a896:	602f      	str	r7, [r5, #0]
 801a898:	e7b1      	b.n	801a7fe <__sflush_r+0x1a>
 801a89a:	89a3      	ldrh	r3, [r4, #12]
 801a89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8a0:	81a3      	strh	r3, [r4, #12]
 801a8a2:	e7ad      	b.n	801a800 <__sflush_r+0x1c>
 801a8a4:	690f      	ldr	r7, [r1, #16]
 801a8a6:	2f00      	cmp	r7, #0
 801a8a8:	d0a9      	beq.n	801a7fe <__sflush_r+0x1a>
 801a8aa:	0793      	lsls	r3, r2, #30
 801a8ac:	680e      	ldr	r6, [r1, #0]
 801a8ae:	bf08      	it	eq
 801a8b0:	694b      	ldreq	r3, [r1, #20]
 801a8b2:	600f      	str	r7, [r1, #0]
 801a8b4:	bf18      	it	ne
 801a8b6:	2300      	movne	r3, #0
 801a8b8:	eba6 0807 	sub.w	r8, r6, r7
 801a8bc:	608b      	str	r3, [r1, #8]
 801a8be:	f1b8 0f00 	cmp.w	r8, #0
 801a8c2:	dd9c      	ble.n	801a7fe <__sflush_r+0x1a>
 801a8c4:	4643      	mov	r3, r8
 801a8c6:	463a      	mov	r2, r7
 801a8c8:	6a21      	ldr	r1, [r4, #32]
 801a8ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a8cc:	4628      	mov	r0, r5
 801a8ce:	47b0      	blx	r6
 801a8d0:	2800      	cmp	r0, #0
 801a8d2:	dc06      	bgt.n	801a8e2 <__sflush_r+0xfe>
 801a8d4:	89a3      	ldrh	r3, [r4, #12]
 801a8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8da:	81a3      	strh	r3, [r4, #12]
 801a8dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a8e0:	e78e      	b.n	801a800 <__sflush_r+0x1c>
 801a8e2:	4407      	add	r7, r0
 801a8e4:	eba8 0800 	sub.w	r8, r8, r0
 801a8e8:	e7e9      	b.n	801a8be <__sflush_r+0xda>
 801a8ea:	bf00      	nop
 801a8ec:	20400001 	.word	0x20400001

0801a8f0 <_fflush_r>:
 801a8f0:	b538      	push	{r3, r4, r5, lr}
 801a8f2:	690b      	ldr	r3, [r1, #16]
 801a8f4:	4605      	mov	r5, r0
 801a8f6:	460c      	mov	r4, r1
 801a8f8:	b1db      	cbz	r3, 801a932 <_fflush_r+0x42>
 801a8fa:	b118      	cbz	r0, 801a904 <_fflush_r+0x14>
 801a8fc:	6983      	ldr	r3, [r0, #24]
 801a8fe:	b90b      	cbnz	r3, 801a904 <_fflush_r+0x14>
 801a900:	f000 f860 	bl	801a9c4 <__sinit>
 801a904:	4b0c      	ldr	r3, [pc, #48]	; (801a938 <_fflush_r+0x48>)
 801a906:	429c      	cmp	r4, r3
 801a908:	d109      	bne.n	801a91e <_fflush_r+0x2e>
 801a90a:	686c      	ldr	r4, [r5, #4]
 801a90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a910:	b17b      	cbz	r3, 801a932 <_fflush_r+0x42>
 801a912:	4621      	mov	r1, r4
 801a914:	4628      	mov	r0, r5
 801a916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a91a:	f7ff bf63 	b.w	801a7e4 <__sflush_r>
 801a91e:	4b07      	ldr	r3, [pc, #28]	; (801a93c <_fflush_r+0x4c>)
 801a920:	429c      	cmp	r4, r3
 801a922:	d101      	bne.n	801a928 <_fflush_r+0x38>
 801a924:	68ac      	ldr	r4, [r5, #8]
 801a926:	e7f1      	b.n	801a90c <_fflush_r+0x1c>
 801a928:	4b05      	ldr	r3, [pc, #20]	; (801a940 <_fflush_r+0x50>)
 801a92a:	429c      	cmp	r4, r3
 801a92c:	bf08      	it	eq
 801a92e:	68ec      	ldreq	r4, [r5, #12]
 801a930:	e7ec      	b.n	801a90c <_fflush_r+0x1c>
 801a932:	2000      	movs	r0, #0
 801a934:	bd38      	pop	{r3, r4, r5, pc}
 801a936:	bf00      	nop
 801a938:	0801f470 	.word	0x0801f470
 801a93c:	0801f490 	.word	0x0801f490
 801a940:	0801f450 	.word	0x0801f450

0801a944 <std>:
 801a944:	2300      	movs	r3, #0
 801a946:	b510      	push	{r4, lr}
 801a948:	4604      	mov	r4, r0
 801a94a:	e9c0 3300 	strd	r3, r3, [r0]
 801a94e:	6083      	str	r3, [r0, #8]
 801a950:	8181      	strh	r1, [r0, #12]
 801a952:	6643      	str	r3, [r0, #100]	; 0x64
 801a954:	81c2      	strh	r2, [r0, #14]
 801a956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a95a:	6183      	str	r3, [r0, #24]
 801a95c:	4619      	mov	r1, r3
 801a95e:	2208      	movs	r2, #8
 801a960:	305c      	adds	r0, #92	; 0x5c
 801a962:	f7ff fd26 	bl	801a3b2 <memset>
 801a966:	4b05      	ldr	r3, [pc, #20]	; (801a97c <std+0x38>)
 801a968:	6263      	str	r3, [r4, #36]	; 0x24
 801a96a:	4b05      	ldr	r3, [pc, #20]	; (801a980 <std+0x3c>)
 801a96c:	62a3      	str	r3, [r4, #40]	; 0x28
 801a96e:	4b05      	ldr	r3, [pc, #20]	; (801a984 <std+0x40>)
 801a970:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a972:	4b05      	ldr	r3, [pc, #20]	; (801a988 <std+0x44>)
 801a974:	6224      	str	r4, [r4, #32]
 801a976:	6323      	str	r3, [r4, #48]	; 0x30
 801a978:	bd10      	pop	{r4, pc}
 801a97a:	bf00      	nop
 801a97c:	0801b2b1 	.word	0x0801b2b1
 801a980:	0801b2d3 	.word	0x0801b2d3
 801a984:	0801b30b 	.word	0x0801b30b
 801a988:	0801b32f 	.word	0x0801b32f

0801a98c <_cleanup_r>:
 801a98c:	4901      	ldr	r1, [pc, #4]	; (801a994 <_cleanup_r+0x8>)
 801a98e:	f000 b885 	b.w	801aa9c <_fwalk_reent>
 801a992:	bf00      	nop
 801a994:	0801a8f1 	.word	0x0801a8f1

0801a998 <__sfmoreglue>:
 801a998:	b570      	push	{r4, r5, r6, lr}
 801a99a:	1e4a      	subs	r2, r1, #1
 801a99c:	2568      	movs	r5, #104	; 0x68
 801a99e:	4355      	muls	r5, r2
 801a9a0:	460e      	mov	r6, r1
 801a9a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a9a6:	f000 f951 	bl	801ac4c <_malloc_r>
 801a9aa:	4604      	mov	r4, r0
 801a9ac:	b140      	cbz	r0, 801a9c0 <__sfmoreglue+0x28>
 801a9ae:	2100      	movs	r1, #0
 801a9b0:	e9c0 1600 	strd	r1, r6, [r0]
 801a9b4:	300c      	adds	r0, #12
 801a9b6:	60a0      	str	r0, [r4, #8]
 801a9b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a9bc:	f7ff fcf9 	bl	801a3b2 <memset>
 801a9c0:	4620      	mov	r0, r4
 801a9c2:	bd70      	pop	{r4, r5, r6, pc}

0801a9c4 <__sinit>:
 801a9c4:	6983      	ldr	r3, [r0, #24]
 801a9c6:	b510      	push	{r4, lr}
 801a9c8:	4604      	mov	r4, r0
 801a9ca:	bb33      	cbnz	r3, 801aa1a <__sinit+0x56>
 801a9cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a9d0:	6503      	str	r3, [r0, #80]	; 0x50
 801a9d2:	4b12      	ldr	r3, [pc, #72]	; (801aa1c <__sinit+0x58>)
 801a9d4:	4a12      	ldr	r2, [pc, #72]	; (801aa20 <__sinit+0x5c>)
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	6282      	str	r2, [r0, #40]	; 0x28
 801a9da:	4298      	cmp	r0, r3
 801a9dc:	bf04      	itt	eq
 801a9de:	2301      	moveq	r3, #1
 801a9e0:	6183      	streq	r3, [r0, #24]
 801a9e2:	f000 f81f 	bl	801aa24 <__sfp>
 801a9e6:	6060      	str	r0, [r4, #4]
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	f000 f81b 	bl	801aa24 <__sfp>
 801a9ee:	60a0      	str	r0, [r4, #8]
 801a9f0:	4620      	mov	r0, r4
 801a9f2:	f000 f817 	bl	801aa24 <__sfp>
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	60e0      	str	r0, [r4, #12]
 801a9fa:	2104      	movs	r1, #4
 801a9fc:	6860      	ldr	r0, [r4, #4]
 801a9fe:	f7ff ffa1 	bl	801a944 <std>
 801aa02:	2201      	movs	r2, #1
 801aa04:	2109      	movs	r1, #9
 801aa06:	68a0      	ldr	r0, [r4, #8]
 801aa08:	f7ff ff9c 	bl	801a944 <std>
 801aa0c:	2202      	movs	r2, #2
 801aa0e:	2112      	movs	r1, #18
 801aa10:	68e0      	ldr	r0, [r4, #12]
 801aa12:	f7ff ff97 	bl	801a944 <std>
 801aa16:	2301      	movs	r3, #1
 801aa18:	61a3      	str	r3, [r4, #24]
 801aa1a:	bd10      	pop	{r4, pc}
 801aa1c:	0801f340 	.word	0x0801f340
 801aa20:	0801a98d 	.word	0x0801a98d

0801aa24 <__sfp>:
 801aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa26:	4b1b      	ldr	r3, [pc, #108]	; (801aa94 <__sfp+0x70>)
 801aa28:	681e      	ldr	r6, [r3, #0]
 801aa2a:	69b3      	ldr	r3, [r6, #24]
 801aa2c:	4607      	mov	r7, r0
 801aa2e:	b913      	cbnz	r3, 801aa36 <__sfp+0x12>
 801aa30:	4630      	mov	r0, r6
 801aa32:	f7ff ffc7 	bl	801a9c4 <__sinit>
 801aa36:	3648      	adds	r6, #72	; 0x48
 801aa38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801aa3c:	3b01      	subs	r3, #1
 801aa3e:	d503      	bpl.n	801aa48 <__sfp+0x24>
 801aa40:	6833      	ldr	r3, [r6, #0]
 801aa42:	b133      	cbz	r3, 801aa52 <__sfp+0x2e>
 801aa44:	6836      	ldr	r6, [r6, #0]
 801aa46:	e7f7      	b.n	801aa38 <__sfp+0x14>
 801aa48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801aa4c:	b16d      	cbz	r5, 801aa6a <__sfp+0x46>
 801aa4e:	3468      	adds	r4, #104	; 0x68
 801aa50:	e7f4      	b.n	801aa3c <__sfp+0x18>
 801aa52:	2104      	movs	r1, #4
 801aa54:	4638      	mov	r0, r7
 801aa56:	f7ff ff9f 	bl	801a998 <__sfmoreglue>
 801aa5a:	6030      	str	r0, [r6, #0]
 801aa5c:	2800      	cmp	r0, #0
 801aa5e:	d1f1      	bne.n	801aa44 <__sfp+0x20>
 801aa60:	230c      	movs	r3, #12
 801aa62:	603b      	str	r3, [r7, #0]
 801aa64:	4604      	mov	r4, r0
 801aa66:	4620      	mov	r0, r4
 801aa68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa6a:	4b0b      	ldr	r3, [pc, #44]	; (801aa98 <__sfp+0x74>)
 801aa6c:	6665      	str	r5, [r4, #100]	; 0x64
 801aa6e:	e9c4 5500 	strd	r5, r5, [r4]
 801aa72:	60a5      	str	r5, [r4, #8]
 801aa74:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801aa78:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801aa7c:	2208      	movs	r2, #8
 801aa7e:	4629      	mov	r1, r5
 801aa80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aa84:	f7ff fc95 	bl	801a3b2 <memset>
 801aa88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aa8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aa90:	e7e9      	b.n	801aa66 <__sfp+0x42>
 801aa92:	bf00      	nop
 801aa94:	0801f340 	.word	0x0801f340
 801aa98:	ffff0001 	.word	0xffff0001

0801aa9c <_fwalk_reent>:
 801aa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aaa0:	4680      	mov	r8, r0
 801aaa2:	4689      	mov	r9, r1
 801aaa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801aaa8:	2600      	movs	r6, #0
 801aaaa:	b914      	cbnz	r4, 801aab2 <_fwalk_reent+0x16>
 801aaac:	4630      	mov	r0, r6
 801aaae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aab2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801aab6:	3f01      	subs	r7, #1
 801aab8:	d501      	bpl.n	801aabe <_fwalk_reent+0x22>
 801aaba:	6824      	ldr	r4, [r4, #0]
 801aabc:	e7f5      	b.n	801aaaa <_fwalk_reent+0xe>
 801aabe:	89ab      	ldrh	r3, [r5, #12]
 801aac0:	2b01      	cmp	r3, #1
 801aac2:	d907      	bls.n	801aad4 <_fwalk_reent+0x38>
 801aac4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aac8:	3301      	adds	r3, #1
 801aaca:	d003      	beq.n	801aad4 <_fwalk_reent+0x38>
 801aacc:	4629      	mov	r1, r5
 801aace:	4640      	mov	r0, r8
 801aad0:	47c8      	blx	r9
 801aad2:	4306      	orrs	r6, r0
 801aad4:	3568      	adds	r5, #104	; 0x68
 801aad6:	e7ee      	b.n	801aab6 <_fwalk_reent+0x1a>

0801aad8 <__swhatbuf_r>:
 801aad8:	b570      	push	{r4, r5, r6, lr}
 801aada:	460e      	mov	r6, r1
 801aadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aae0:	2900      	cmp	r1, #0
 801aae2:	b096      	sub	sp, #88	; 0x58
 801aae4:	4614      	mov	r4, r2
 801aae6:	461d      	mov	r5, r3
 801aae8:	da07      	bge.n	801aafa <__swhatbuf_r+0x22>
 801aaea:	2300      	movs	r3, #0
 801aaec:	602b      	str	r3, [r5, #0]
 801aaee:	89b3      	ldrh	r3, [r6, #12]
 801aaf0:	061a      	lsls	r2, r3, #24
 801aaf2:	d410      	bmi.n	801ab16 <__swhatbuf_r+0x3e>
 801aaf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aaf8:	e00e      	b.n	801ab18 <__swhatbuf_r+0x40>
 801aafa:	466a      	mov	r2, sp
 801aafc:	f000 fc3e 	bl	801b37c <_fstat_r>
 801ab00:	2800      	cmp	r0, #0
 801ab02:	dbf2      	blt.n	801aaea <__swhatbuf_r+0x12>
 801ab04:	9a01      	ldr	r2, [sp, #4]
 801ab06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ab0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ab0e:	425a      	negs	r2, r3
 801ab10:	415a      	adcs	r2, r3
 801ab12:	602a      	str	r2, [r5, #0]
 801ab14:	e7ee      	b.n	801aaf4 <__swhatbuf_r+0x1c>
 801ab16:	2340      	movs	r3, #64	; 0x40
 801ab18:	2000      	movs	r0, #0
 801ab1a:	6023      	str	r3, [r4, #0]
 801ab1c:	b016      	add	sp, #88	; 0x58
 801ab1e:	bd70      	pop	{r4, r5, r6, pc}

0801ab20 <__smakebuf_r>:
 801ab20:	898b      	ldrh	r3, [r1, #12]
 801ab22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ab24:	079d      	lsls	r5, r3, #30
 801ab26:	4606      	mov	r6, r0
 801ab28:	460c      	mov	r4, r1
 801ab2a:	d507      	bpl.n	801ab3c <__smakebuf_r+0x1c>
 801ab2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ab30:	6023      	str	r3, [r4, #0]
 801ab32:	6123      	str	r3, [r4, #16]
 801ab34:	2301      	movs	r3, #1
 801ab36:	6163      	str	r3, [r4, #20]
 801ab38:	b002      	add	sp, #8
 801ab3a:	bd70      	pop	{r4, r5, r6, pc}
 801ab3c:	ab01      	add	r3, sp, #4
 801ab3e:	466a      	mov	r2, sp
 801ab40:	f7ff ffca 	bl	801aad8 <__swhatbuf_r>
 801ab44:	9900      	ldr	r1, [sp, #0]
 801ab46:	4605      	mov	r5, r0
 801ab48:	4630      	mov	r0, r6
 801ab4a:	f000 f87f 	bl	801ac4c <_malloc_r>
 801ab4e:	b948      	cbnz	r0, 801ab64 <__smakebuf_r+0x44>
 801ab50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab54:	059a      	lsls	r2, r3, #22
 801ab56:	d4ef      	bmi.n	801ab38 <__smakebuf_r+0x18>
 801ab58:	f023 0303 	bic.w	r3, r3, #3
 801ab5c:	f043 0302 	orr.w	r3, r3, #2
 801ab60:	81a3      	strh	r3, [r4, #12]
 801ab62:	e7e3      	b.n	801ab2c <__smakebuf_r+0xc>
 801ab64:	4b0d      	ldr	r3, [pc, #52]	; (801ab9c <__smakebuf_r+0x7c>)
 801ab66:	62b3      	str	r3, [r6, #40]	; 0x28
 801ab68:	89a3      	ldrh	r3, [r4, #12]
 801ab6a:	6020      	str	r0, [r4, #0]
 801ab6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab70:	81a3      	strh	r3, [r4, #12]
 801ab72:	9b00      	ldr	r3, [sp, #0]
 801ab74:	6163      	str	r3, [r4, #20]
 801ab76:	9b01      	ldr	r3, [sp, #4]
 801ab78:	6120      	str	r0, [r4, #16]
 801ab7a:	b15b      	cbz	r3, 801ab94 <__smakebuf_r+0x74>
 801ab7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab80:	4630      	mov	r0, r6
 801ab82:	f000 fc0d 	bl	801b3a0 <_isatty_r>
 801ab86:	b128      	cbz	r0, 801ab94 <__smakebuf_r+0x74>
 801ab88:	89a3      	ldrh	r3, [r4, #12]
 801ab8a:	f023 0303 	bic.w	r3, r3, #3
 801ab8e:	f043 0301 	orr.w	r3, r3, #1
 801ab92:	81a3      	strh	r3, [r4, #12]
 801ab94:	89a3      	ldrh	r3, [r4, #12]
 801ab96:	431d      	orrs	r5, r3
 801ab98:	81a5      	strh	r5, [r4, #12]
 801ab9a:	e7cd      	b.n	801ab38 <__smakebuf_r+0x18>
 801ab9c:	0801a98d 	.word	0x0801a98d

0801aba0 <malloc>:
 801aba0:	4b02      	ldr	r3, [pc, #8]	; (801abac <malloc+0xc>)
 801aba2:	4601      	mov	r1, r0
 801aba4:	6818      	ldr	r0, [r3, #0]
 801aba6:	f000 b851 	b.w	801ac4c <_malloc_r>
 801abaa:	bf00      	nop
 801abac:	20000024 	.word	0x20000024

0801abb0 <_free_r>:
 801abb0:	b538      	push	{r3, r4, r5, lr}
 801abb2:	4605      	mov	r5, r0
 801abb4:	2900      	cmp	r1, #0
 801abb6:	d045      	beq.n	801ac44 <_free_r+0x94>
 801abb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801abbc:	1f0c      	subs	r4, r1, #4
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	bfb8      	it	lt
 801abc2:	18e4      	addlt	r4, r4, r3
 801abc4:	f000 fc0e 	bl	801b3e4 <__malloc_lock>
 801abc8:	4a1f      	ldr	r2, [pc, #124]	; (801ac48 <_free_r+0x98>)
 801abca:	6813      	ldr	r3, [r2, #0]
 801abcc:	4610      	mov	r0, r2
 801abce:	b933      	cbnz	r3, 801abde <_free_r+0x2e>
 801abd0:	6063      	str	r3, [r4, #4]
 801abd2:	6014      	str	r4, [r2, #0]
 801abd4:	4628      	mov	r0, r5
 801abd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abda:	f000 bc04 	b.w	801b3e6 <__malloc_unlock>
 801abde:	42a3      	cmp	r3, r4
 801abe0:	d90c      	bls.n	801abfc <_free_r+0x4c>
 801abe2:	6821      	ldr	r1, [r4, #0]
 801abe4:	1862      	adds	r2, r4, r1
 801abe6:	4293      	cmp	r3, r2
 801abe8:	bf04      	itt	eq
 801abea:	681a      	ldreq	r2, [r3, #0]
 801abec:	685b      	ldreq	r3, [r3, #4]
 801abee:	6063      	str	r3, [r4, #4]
 801abf0:	bf04      	itt	eq
 801abf2:	1852      	addeq	r2, r2, r1
 801abf4:	6022      	streq	r2, [r4, #0]
 801abf6:	6004      	str	r4, [r0, #0]
 801abf8:	e7ec      	b.n	801abd4 <_free_r+0x24>
 801abfa:	4613      	mov	r3, r2
 801abfc:	685a      	ldr	r2, [r3, #4]
 801abfe:	b10a      	cbz	r2, 801ac04 <_free_r+0x54>
 801ac00:	42a2      	cmp	r2, r4
 801ac02:	d9fa      	bls.n	801abfa <_free_r+0x4a>
 801ac04:	6819      	ldr	r1, [r3, #0]
 801ac06:	1858      	adds	r0, r3, r1
 801ac08:	42a0      	cmp	r0, r4
 801ac0a:	d10b      	bne.n	801ac24 <_free_r+0x74>
 801ac0c:	6820      	ldr	r0, [r4, #0]
 801ac0e:	4401      	add	r1, r0
 801ac10:	1858      	adds	r0, r3, r1
 801ac12:	4282      	cmp	r2, r0
 801ac14:	6019      	str	r1, [r3, #0]
 801ac16:	d1dd      	bne.n	801abd4 <_free_r+0x24>
 801ac18:	6810      	ldr	r0, [r2, #0]
 801ac1a:	6852      	ldr	r2, [r2, #4]
 801ac1c:	605a      	str	r2, [r3, #4]
 801ac1e:	4401      	add	r1, r0
 801ac20:	6019      	str	r1, [r3, #0]
 801ac22:	e7d7      	b.n	801abd4 <_free_r+0x24>
 801ac24:	d902      	bls.n	801ac2c <_free_r+0x7c>
 801ac26:	230c      	movs	r3, #12
 801ac28:	602b      	str	r3, [r5, #0]
 801ac2a:	e7d3      	b.n	801abd4 <_free_r+0x24>
 801ac2c:	6820      	ldr	r0, [r4, #0]
 801ac2e:	1821      	adds	r1, r4, r0
 801ac30:	428a      	cmp	r2, r1
 801ac32:	bf04      	itt	eq
 801ac34:	6811      	ldreq	r1, [r2, #0]
 801ac36:	6852      	ldreq	r2, [r2, #4]
 801ac38:	6062      	str	r2, [r4, #4]
 801ac3a:	bf04      	itt	eq
 801ac3c:	1809      	addeq	r1, r1, r0
 801ac3e:	6021      	streq	r1, [r4, #0]
 801ac40:	605c      	str	r4, [r3, #4]
 801ac42:	e7c7      	b.n	801abd4 <_free_r+0x24>
 801ac44:	bd38      	pop	{r3, r4, r5, pc}
 801ac46:	bf00      	nop
 801ac48:	20004d04 	.word	0x20004d04

0801ac4c <_malloc_r>:
 801ac4c:	b570      	push	{r4, r5, r6, lr}
 801ac4e:	1ccd      	adds	r5, r1, #3
 801ac50:	f025 0503 	bic.w	r5, r5, #3
 801ac54:	3508      	adds	r5, #8
 801ac56:	2d0c      	cmp	r5, #12
 801ac58:	bf38      	it	cc
 801ac5a:	250c      	movcc	r5, #12
 801ac5c:	2d00      	cmp	r5, #0
 801ac5e:	4606      	mov	r6, r0
 801ac60:	db01      	blt.n	801ac66 <_malloc_r+0x1a>
 801ac62:	42a9      	cmp	r1, r5
 801ac64:	d903      	bls.n	801ac6e <_malloc_r+0x22>
 801ac66:	230c      	movs	r3, #12
 801ac68:	6033      	str	r3, [r6, #0]
 801ac6a:	2000      	movs	r0, #0
 801ac6c:	bd70      	pop	{r4, r5, r6, pc}
 801ac6e:	f000 fbb9 	bl	801b3e4 <__malloc_lock>
 801ac72:	4a21      	ldr	r2, [pc, #132]	; (801acf8 <_malloc_r+0xac>)
 801ac74:	6814      	ldr	r4, [r2, #0]
 801ac76:	4621      	mov	r1, r4
 801ac78:	b991      	cbnz	r1, 801aca0 <_malloc_r+0x54>
 801ac7a:	4c20      	ldr	r4, [pc, #128]	; (801acfc <_malloc_r+0xb0>)
 801ac7c:	6823      	ldr	r3, [r4, #0]
 801ac7e:	b91b      	cbnz	r3, 801ac88 <_malloc_r+0x3c>
 801ac80:	4630      	mov	r0, r6
 801ac82:	f000 fb05 	bl	801b290 <_sbrk_r>
 801ac86:	6020      	str	r0, [r4, #0]
 801ac88:	4629      	mov	r1, r5
 801ac8a:	4630      	mov	r0, r6
 801ac8c:	f000 fb00 	bl	801b290 <_sbrk_r>
 801ac90:	1c43      	adds	r3, r0, #1
 801ac92:	d124      	bne.n	801acde <_malloc_r+0x92>
 801ac94:	230c      	movs	r3, #12
 801ac96:	6033      	str	r3, [r6, #0]
 801ac98:	4630      	mov	r0, r6
 801ac9a:	f000 fba4 	bl	801b3e6 <__malloc_unlock>
 801ac9e:	e7e4      	b.n	801ac6a <_malloc_r+0x1e>
 801aca0:	680b      	ldr	r3, [r1, #0]
 801aca2:	1b5b      	subs	r3, r3, r5
 801aca4:	d418      	bmi.n	801acd8 <_malloc_r+0x8c>
 801aca6:	2b0b      	cmp	r3, #11
 801aca8:	d90f      	bls.n	801acca <_malloc_r+0x7e>
 801acaa:	600b      	str	r3, [r1, #0]
 801acac:	50cd      	str	r5, [r1, r3]
 801acae:	18cc      	adds	r4, r1, r3
 801acb0:	4630      	mov	r0, r6
 801acb2:	f000 fb98 	bl	801b3e6 <__malloc_unlock>
 801acb6:	f104 000b 	add.w	r0, r4, #11
 801acba:	1d23      	adds	r3, r4, #4
 801acbc:	f020 0007 	bic.w	r0, r0, #7
 801acc0:	1ac3      	subs	r3, r0, r3
 801acc2:	d0d3      	beq.n	801ac6c <_malloc_r+0x20>
 801acc4:	425a      	negs	r2, r3
 801acc6:	50e2      	str	r2, [r4, r3]
 801acc8:	e7d0      	b.n	801ac6c <_malloc_r+0x20>
 801acca:	428c      	cmp	r4, r1
 801accc:	684b      	ldr	r3, [r1, #4]
 801acce:	bf16      	itet	ne
 801acd0:	6063      	strne	r3, [r4, #4]
 801acd2:	6013      	streq	r3, [r2, #0]
 801acd4:	460c      	movne	r4, r1
 801acd6:	e7eb      	b.n	801acb0 <_malloc_r+0x64>
 801acd8:	460c      	mov	r4, r1
 801acda:	6849      	ldr	r1, [r1, #4]
 801acdc:	e7cc      	b.n	801ac78 <_malloc_r+0x2c>
 801acde:	1cc4      	adds	r4, r0, #3
 801ace0:	f024 0403 	bic.w	r4, r4, #3
 801ace4:	42a0      	cmp	r0, r4
 801ace6:	d005      	beq.n	801acf4 <_malloc_r+0xa8>
 801ace8:	1a21      	subs	r1, r4, r0
 801acea:	4630      	mov	r0, r6
 801acec:	f000 fad0 	bl	801b290 <_sbrk_r>
 801acf0:	3001      	adds	r0, #1
 801acf2:	d0cf      	beq.n	801ac94 <_malloc_r+0x48>
 801acf4:	6025      	str	r5, [r4, #0]
 801acf6:	e7db      	b.n	801acb0 <_malloc_r+0x64>
 801acf8:	20004d04 	.word	0x20004d04
 801acfc:	20004d08 	.word	0x20004d08

0801ad00 <__sfputc_r>:
 801ad00:	6893      	ldr	r3, [r2, #8]
 801ad02:	3b01      	subs	r3, #1
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	b410      	push	{r4}
 801ad08:	6093      	str	r3, [r2, #8]
 801ad0a:	da08      	bge.n	801ad1e <__sfputc_r+0x1e>
 801ad0c:	6994      	ldr	r4, [r2, #24]
 801ad0e:	42a3      	cmp	r3, r4
 801ad10:	db01      	blt.n	801ad16 <__sfputc_r+0x16>
 801ad12:	290a      	cmp	r1, #10
 801ad14:	d103      	bne.n	801ad1e <__sfputc_r+0x1e>
 801ad16:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad1a:	f7ff bc95 	b.w	801a648 <__swbuf_r>
 801ad1e:	6813      	ldr	r3, [r2, #0]
 801ad20:	1c58      	adds	r0, r3, #1
 801ad22:	6010      	str	r0, [r2, #0]
 801ad24:	7019      	strb	r1, [r3, #0]
 801ad26:	4608      	mov	r0, r1
 801ad28:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad2c:	4770      	bx	lr

0801ad2e <__sfputs_r>:
 801ad2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad30:	4606      	mov	r6, r0
 801ad32:	460f      	mov	r7, r1
 801ad34:	4614      	mov	r4, r2
 801ad36:	18d5      	adds	r5, r2, r3
 801ad38:	42ac      	cmp	r4, r5
 801ad3a:	d101      	bne.n	801ad40 <__sfputs_r+0x12>
 801ad3c:	2000      	movs	r0, #0
 801ad3e:	e007      	b.n	801ad50 <__sfputs_r+0x22>
 801ad40:	463a      	mov	r2, r7
 801ad42:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad46:	4630      	mov	r0, r6
 801ad48:	f7ff ffda 	bl	801ad00 <__sfputc_r>
 801ad4c:	1c43      	adds	r3, r0, #1
 801ad4e:	d1f3      	bne.n	801ad38 <__sfputs_r+0xa>
 801ad50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ad54 <_vfiprintf_r>:
 801ad54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad58:	460c      	mov	r4, r1
 801ad5a:	b09d      	sub	sp, #116	; 0x74
 801ad5c:	4617      	mov	r7, r2
 801ad5e:	461d      	mov	r5, r3
 801ad60:	4606      	mov	r6, r0
 801ad62:	b118      	cbz	r0, 801ad6c <_vfiprintf_r+0x18>
 801ad64:	6983      	ldr	r3, [r0, #24]
 801ad66:	b90b      	cbnz	r3, 801ad6c <_vfiprintf_r+0x18>
 801ad68:	f7ff fe2c 	bl	801a9c4 <__sinit>
 801ad6c:	4b7c      	ldr	r3, [pc, #496]	; (801af60 <_vfiprintf_r+0x20c>)
 801ad6e:	429c      	cmp	r4, r3
 801ad70:	d158      	bne.n	801ae24 <_vfiprintf_r+0xd0>
 801ad72:	6874      	ldr	r4, [r6, #4]
 801ad74:	89a3      	ldrh	r3, [r4, #12]
 801ad76:	0718      	lsls	r0, r3, #28
 801ad78:	d55e      	bpl.n	801ae38 <_vfiprintf_r+0xe4>
 801ad7a:	6923      	ldr	r3, [r4, #16]
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d05b      	beq.n	801ae38 <_vfiprintf_r+0xe4>
 801ad80:	2300      	movs	r3, #0
 801ad82:	9309      	str	r3, [sp, #36]	; 0x24
 801ad84:	2320      	movs	r3, #32
 801ad86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ad8a:	2330      	movs	r3, #48	; 0x30
 801ad8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ad90:	9503      	str	r5, [sp, #12]
 801ad92:	f04f 0b01 	mov.w	fp, #1
 801ad96:	46b8      	mov	r8, r7
 801ad98:	4645      	mov	r5, r8
 801ad9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ad9e:	b10b      	cbz	r3, 801ada4 <_vfiprintf_r+0x50>
 801ada0:	2b25      	cmp	r3, #37	; 0x25
 801ada2:	d154      	bne.n	801ae4e <_vfiprintf_r+0xfa>
 801ada4:	ebb8 0a07 	subs.w	sl, r8, r7
 801ada8:	d00b      	beq.n	801adc2 <_vfiprintf_r+0x6e>
 801adaa:	4653      	mov	r3, sl
 801adac:	463a      	mov	r2, r7
 801adae:	4621      	mov	r1, r4
 801adb0:	4630      	mov	r0, r6
 801adb2:	f7ff ffbc 	bl	801ad2e <__sfputs_r>
 801adb6:	3001      	adds	r0, #1
 801adb8:	f000 80c2 	beq.w	801af40 <_vfiprintf_r+0x1ec>
 801adbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adbe:	4453      	add	r3, sl
 801adc0:	9309      	str	r3, [sp, #36]	; 0x24
 801adc2:	f898 3000 	ldrb.w	r3, [r8]
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	f000 80ba 	beq.w	801af40 <_vfiprintf_r+0x1ec>
 801adcc:	2300      	movs	r3, #0
 801adce:	f04f 32ff 	mov.w	r2, #4294967295
 801add2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801add6:	9304      	str	r3, [sp, #16]
 801add8:	9307      	str	r3, [sp, #28]
 801adda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801adde:	931a      	str	r3, [sp, #104]	; 0x68
 801ade0:	46a8      	mov	r8, r5
 801ade2:	2205      	movs	r2, #5
 801ade4:	f818 1b01 	ldrb.w	r1, [r8], #1
 801ade8:	485e      	ldr	r0, [pc, #376]	; (801af64 <_vfiprintf_r+0x210>)
 801adea:	f7e5 fa01 	bl	80001f0 <memchr>
 801adee:	9b04      	ldr	r3, [sp, #16]
 801adf0:	bb78      	cbnz	r0, 801ae52 <_vfiprintf_r+0xfe>
 801adf2:	06d9      	lsls	r1, r3, #27
 801adf4:	bf44      	itt	mi
 801adf6:	2220      	movmi	r2, #32
 801adf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801adfc:	071a      	lsls	r2, r3, #28
 801adfe:	bf44      	itt	mi
 801ae00:	222b      	movmi	r2, #43	; 0x2b
 801ae02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ae06:	782a      	ldrb	r2, [r5, #0]
 801ae08:	2a2a      	cmp	r2, #42	; 0x2a
 801ae0a:	d02a      	beq.n	801ae62 <_vfiprintf_r+0x10e>
 801ae0c:	9a07      	ldr	r2, [sp, #28]
 801ae0e:	46a8      	mov	r8, r5
 801ae10:	2000      	movs	r0, #0
 801ae12:	250a      	movs	r5, #10
 801ae14:	4641      	mov	r1, r8
 801ae16:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ae1a:	3b30      	subs	r3, #48	; 0x30
 801ae1c:	2b09      	cmp	r3, #9
 801ae1e:	d969      	bls.n	801aef4 <_vfiprintf_r+0x1a0>
 801ae20:	b360      	cbz	r0, 801ae7c <_vfiprintf_r+0x128>
 801ae22:	e024      	b.n	801ae6e <_vfiprintf_r+0x11a>
 801ae24:	4b50      	ldr	r3, [pc, #320]	; (801af68 <_vfiprintf_r+0x214>)
 801ae26:	429c      	cmp	r4, r3
 801ae28:	d101      	bne.n	801ae2e <_vfiprintf_r+0xda>
 801ae2a:	68b4      	ldr	r4, [r6, #8]
 801ae2c:	e7a2      	b.n	801ad74 <_vfiprintf_r+0x20>
 801ae2e:	4b4f      	ldr	r3, [pc, #316]	; (801af6c <_vfiprintf_r+0x218>)
 801ae30:	429c      	cmp	r4, r3
 801ae32:	bf08      	it	eq
 801ae34:	68f4      	ldreq	r4, [r6, #12]
 801ae36:	e79d      	b.n	801ad74 <_vfiprintf_r+0x20>
 801ae38:	4621      	mov	r1, r4
 801ae3a:	4630      	mov	r0, r6
 801ae3c:	f7ff fc64 	bl	801a708 <__swsetup_r>
 801ae40:	2800      	cmp	r0, #0
 801ae42:	d09d      	beq.n	801ad80 <_vfiprintf_r+0x2c>
 801ae44:	f04f 30ff 	mov.w	r0, #4294967295
 801ae48:	b01d      	add	sp, #116	; 0x74
 801ae4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae4e:	46a8      	mov	r8, r5
 801ae50:	e7a2      	b.n	801ad98 <_vfiprintf_r+0x44>
 801ae52:	4a44      	ldr	r2, [pc, #272]	; (801af64 <_vfiprintf_r+0x210>)
 801ae54:	1a80      	subs	r0, r0, r2
 801ae56:	fa0b f000 	lsl.w	r0, fp, r0
 801ae5a:	4318      	orrs	r0, r3
 801ae5c:	9004      	str	r0, [sp, #16]
 801ae5e:	4645      	mov	r5, r8
 801ae60:	e7be      	b.n	801ade0 <_vfiprintf_r+0x8c>
 801ae62:	9a03      	ldr	r2, [sp, #12]
 801ae64:	1d11      	adds	r1, r2, #4
 801ae66:	6812      	ldr	r2, [r2, #0]
 801ae68:	9103      	str	r1, [sp, #12]
 801ae6a:	2a00      	cmp	r2, #0
 801ae6c:	db01      	blt.n	801ae72 <_vfiprintf_r+0x11e>
 801ae6e:	9207      	str	r2, [sp, #28]
 801ae70:	e004      	b.n	801ae7c <_vfiprintf_r+0x128>
 801ae72:	4252      	negs	r2, r2
 801ae74:	f043 0302 	orr.w	r3, r3, #2
 801ae78:	9207      	str	r2, [sp, #28]
 801ae7a:	9304      	str	r3, [sp, #16]
 801ae7c:	f898 3000 	ldrb.w	r3, [r8]
 801ae80:	2b2e      	cmp	r3, #46	; 0x2e
 801ae82:	d10e      	bne.n	801aea2 <_vfiprintf_r+0x14e>
 801ae84:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ae88:	2b2a      	cmp	r3, #42	; 0x2a
 801ae8a:	d138      	bne.n	801aefe <_vfiprintf_r+0x1aa>
 801ae8c:	9b03      	ldr	r3, [sp, #12]
 801ae8e:	1d1a      	adds	r2, r3, #4
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	9203      	str	r2, [sp, #12]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	bfb8      	it	lt
 801ae98:	f04f 33ff 	movlt.w	r3, #4294967295
 801ae9c:	f108 0802 	add.w	r8, r8, #2
 801aea0:	9305      	str	r3, [sp, #20]
 801aea2:	4d33      	ldr	r5, [pc, #204]	; (801af70 <_vfiprintf_r+0x21c>)
 801aea4:	f898 1000 	ldrb.w	r1, [r8]
 801aea8:	2203      	movs	r2, #3
 801aeaa:	4628      	mov	r0, r5
 801aeac:	f7e5 f9a0 	bl	80001f0 <memchr>
 801aeb0:	b140      	cbz	r0, 801aec4 <_vfiprintf_r+0x170>
 801aeb2:	2340      	movs	r3, #64	; 0x40
 801aeb4:	1b40      	subs	r0, r0, r5
 801aeb6:	fa03 f000 	lsl.w	r0, r3, r0
 801aeba:	9b04      	ldr	r3, [sp, #16]
 801aebc:	4303      	orrs	r3, r0
 801aebe:	f108 0801 	add.w	r8, r8, #1
 801aec2:	9304      	str	r3, [sp, #16]
 801aec4:	f898 1000 	ldrb.w	r1, [r8]
 801aec8:	482a      	ldr	r0, [pc, #168]	; (801af74 <_vfiprintf_r+0x220>)
 801aeca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aece:	2206      	movs	r2, #6
 801aed0:	f108 0701 	add.w	r7, r8, #1
 801aed4:	f7e5 f98c 	bl	80001f0 <memchr>
 801aed8:	2800      	cmp	r0, #0
 801aeda:	d037      	beq.n	801af4c <_vfiprintf_r+0x1f8>
 801aedc:	4b26      	ldr	r3, [pc, #152]	; (801af78 <_vfiprintf_r+0x224>)
 801aede:	bb1b      	cbnz	r3, 801af28 <_vfiprintf_r+0x1d4>
 801aee0:	9b03      	ldr	r3, [sp, #12]
 801aee2:	3307      	adds	r3, #7
 801aee4:	f023 0307 	bic.w	r3, r3, #7
 801aee8:	3308      	adds	r3, #8
 801aeea:	9303      	str	r3, [sp, #12]
 801aeec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aeee:	444b      	add	r3, r9
 801aef0:	9309      	str	r3, [sp, #36]	; 0x24
 801aef2:	e750      	b.n	801ad96 <_vfiprintf_r+0x42>
 801aef4:	fb05 3202 	mla	r2, r5, r2, r3
 801aef8:	2001      	movs	r0, #1
 801aefa:	4688      	mov	r8, r1
 801aefc:	e78a      	b.n	801ae14 <_vfiprintf_r+0xc0>
 801aefe:	2300      	movs	r3, #0
 801af00:	f108 0801 	add.w	r8, r8, #1
 801af04:	9305      	str	r3, [sp, #20]
 801af06:	4619      	mov	r1, r3
 801af08:	250a      	movs	r5, #10
 801af0a:	4640      	mov	r0, r8
 801af0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af10:	3a30      	subs	r2, #48	; 0x30
 801af12:	2a09      	cmp	r2, #9
 801af14:	d903      	bls.n	801af1e <_vfiprintf_r+0x1ca>
 801af16:	2b00      	cmp	r3, #0
 801af18:	d0c3      	beq.n	801aea2 <_vfiprintf_r+0x14e>
 801af1a:	9105      	str	r1, [sp, #20]
 801af1c:	e7c1      	b.n	801aea2 <_vfiprintf_r+0x14e>
 801af1e:	fb05 2101 	mla	r1, r5, r1, r2
 801af22:	2301      	movs	r3, #1
 801af24:	4680      	mov	r8, r0
 801af26:	e7f0      	b.n	801af0a <_vfiprintf_r+0x1b6>
 801af28:	ab03      	add	r3, sp, #12
 801af2a:	9300      	str	r3, [sp, #0]
 801af2c:	4622      	mov	r2, r4
 801af2e:	4b13      	ldr	r3, [pc, #76]	; (801af7c <_vfiprintf_r+0x228>)
 801af30:	a904      	add	r1, sp, #16
 801af32:	4630      	mov	r0, r6
 801af34:	f3af 8000 	nop.w
 801af38:	f1b0 3fff 	cmp.w	r0, #4294967295
 801af3c:	4681      	mov	r9, r0
 801af3e:	d1d5      	bne.n	801aeec <_vfiprintf_r+0x198>
 801af40:	89a3      	ldrh	r3, [r4, #12]
 801af42:	065b      	lsls	r3, r3, #25
 801af44:	f53f af7e 	bmi.w	801ae44 <_vfiprintf_r+0xf0>
 801af48:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af4a:	e77d      	b.n	801ae48 <_vfiprintf_r+0xf4>
 801af4c:	ab03      	add	r3, sp, #12
 801af4e:	9300      	str	r3, [sp, #0]
 801af50:	4622      	mov	r2, r4
 801af52:	4b0a      	ldr	r3, [pc, #40]	; (801af7c <_vfiprintf_r+0x228>)
 801af54:	a904      	add	r1, sp, #16
 801af56:	4630      	mov	r0, r6
 801af58:	f000 f888 	bl	801b06c <_printf_i>
 801af5c:	e7ec      	b.n	801af38 <_vfiprintf_r+0x1e4>
 801af5e:	bf00      	nop
 801af60:	0801f470 	.word	0x0801f470
 801af64:	0801f4b0 	.word	0x0801f4b0
 801af68:	0801f490 	.word	0x0801f490
 801af6c:	0801f450 	.word	0x0801f450
 801af70:	0801f4b6 	.word	0x0801f4b6
 801af74:	0801f4ba 	.word	0x0801f4ba
 801af78:	00000000 	.word	0x00000000
 801af7c:	0801ad2f 	.word	0x0801ad2f

0801af80 <_printf_common>:
 801af80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af84:	4691      	mov	r9, r2
 801af86:	461f      	mov	r7, r3
 801af88:	688a      	ldr	r2, [r1, #8]
 801af8a:	690b      	ldr	r3, [r1, #16]
 801af8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801af90:	4293      	cmp	r3, r2
 801af92:	bfb8      	it	lt
 801af94:	4613      	movlt	r3, r2
 801af96:	f8c9 3000 	str.w	r3, [r9]
 801af9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801af9e:	4606      	mov	r6, r0
 801afa0:	460c      	mov	r4, r1
 801afa2:	b112      	cbz	r2, 801afaa <_printf_common+0x2a>
 801afa4:	3301      	adds	r3, #1
 801afa6:	f8c9 3000 	str.w	r3, [r9]
 801afaa:	6823      	ldr	r3, [r4, #0]
 801afac:	0699      	lsls	r1, r3, #26
 801afae:	bf42      	ittt	mi
 801afb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 801afb4:	3302      	addmi	r3, #2
 801afb6:	f8c9 3000 	strmi.w	r3, [r9]
 801afba:	6825      	ldr	r5, [r4, #0]
 801afbc:	f015 0506 	ands.w	r5, r5, #6
 801afc0:	d107      	bne.n	801afd2 <_printf_common+0x52>
 801afc2:	f104 0a19 	add.w	sl, r4, #25
 801afc6:	68e3      	ldr	r3, [r4, #12]
 801afc8:	f8d9 2000 	ldr.w	r2, [r9]
 801afcc:	1a9b      	subs	r3, r3, r2
 801afce:	42ab      	cmp	r3, r5
 801afd0:	dc28      	bgt.n	801b024 <_printf_common+0xa4>
 801afd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801afd6:	6822      	ldr	r2, [r4, #0]
 801afd8:	3300      	adds	r3, #0
 801afda:	bf18      	it	ne
 801afdc:	2301      	movne	r3, #1
 801afde:	0692      	lsls	r2, r2, #26
 801afe0:	d42d      	bmi.n	801b03e <_printf_common+0xbe>
 801afe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801afe6:	4639      	mov	r1, r7
 801afe8:	4630      	mov	r0, r6
 801afea:	47c0      	blx	r8
 801afec:	3001      	adds	r0, #1
 801afee:	d020      	beq.n	801b032 <_printf_common+0xb2>
 801aff0:	6823      	ldr	r3, [r4, #0]
 801aff2:	68e5      	ldr	r5, [r4, #12]
 801aff4:	f8d9 2000 	ldr.w	r2, [r9]
 801aff8:	f003 0306 	and.w	r3, r3, #6
 801affc:	2b04      	cmp	r3, #4
 801affe:	bf08      	it	eq
 801b000:	1aad      	subeq	r5, r5, r2
 801b002:	68a3      	ldr	r3, [r4, #8]
 801b004:	6922      	ldr	r2, [r4, #16]
 801b006:	bf0c      	ite	eq
 801b008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b00c:	2500      	movne	r5, #0
 801b00e:	4293      	cmp	r3, r2
 801b010:	bfc4      	itt	gt
 801b012:	1a9b      	subgt	r3, r3, r2
 801b014:	18ed      	addgt	r5, r5, r3
 801b016:	f04f 0900 	mov.w	r9, #0
 801b01a:	341a      	adds	r4, #26
 801b01c:	454d      	cmp	r5, r9
 801b01e:	d11a      	bne.n	801b056 <_printf_common+0xd6>
 801b020:	2000      	movs	r0, #0
 801b022:	e008      	b.n	801b036 <_printf_common+0xb6>
 801b024:	2301      	movs	r3, #1
 801b026:	4652      	mov	r2, sl
 801b028:	4639      	mov	r1, r7
 801b02a:	4630      	mov	r0, r6
 801b02c:	47c0      	blx	r8
 801b02e:	3001      	adds	r0, #1
 801b030:	d103      	bne.n	801b03a <_printf_common+0xba>
 801b032:	f04f 30ff 	mov.w	r0, #4294967295
 801b036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b03a:	3501      	adds	r5, #1
 801b03c:	e7c3      	b.n	801afc6 <_printf_common+0x46>
 801b03e:	18e1      	adds	r1, r4, r3
 801b040:	1c5a      	adds	r2, r3, #1
 801b042:	2030      	movs	r0, #48	; 0x30
 801b044:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b048:	4422      	add	r2, r4
 801b04a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b04e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b052:	3302      	adds	r3, #2
 801b054:	e7c5      	b.n	801afe2 <_printf_common+0x62>
 801b056:	2301      	movs	r3, #1
 801b058:	4622      	mov	r2, r4
 801b05a:	4639      	mov	r1, r7
 801b05c:	4630      	mov	r0, r6
 801b05e:	47c0      	blx	r8
 801b060:	3001      	adds	r0, #1
 801b062:	d0e6      	beq.n	801b032 <_printf_common+0xb2>
 801b064:	f109 0901 	add.w	r9, r9, #1
 801b068:	e7d8      	b.n	801b01c <_printf_common+0x9c>
	...

0801b06c <_printf_i>:
 801b06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b070:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801b074:	460c      	mov	r4, r1
 801b076:	7e09      	ldrb	r1, [r1, #24]
 801b078:	b085      	sub	sp, #20
 801b07a:	296e      	cmp	r1, #110	; 0x6e
 801b07c:	4617      	mov	r7, r2
 801b07e:	4606      	mov	r6, r0
 801b080:	4698      	mov	r8, r3
 801b082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b084:	f000 80b3 	beq.w	801b1ee <_printf_i+0x182>
 801b088:	d822      	bhi.n	801b0d0 <_printf_i+0x64>
 801b08a:	2963      	cmp	r1, #99	; 0x63
 801b08c:	d036      	beq.n	801b0fc <_printf_i+0x90>
 801b08e:	d80a      	bhi.n	801b0a6 <_printf_i+0x3a>
 801b090:	2900      	cmp	r1, #0
 801b092:	f000 80b9 	beq.w	801b208 <_printf_i+0x19c>
 801b096:	2958      	cmp	r1, #88	; 0x58
 801b098:	f000 8083 	beq.w	801b1a2 <_printf_i+0x136>
 801b09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b0a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b0a4:	e032      	b.n	801b10c <_printf_i+0xa0>
 801b0a6:	2964      	cmp	r1, #100	; 0x64
 801b0a8:	d001      	beq.n	801b0ae <_printf_i+0x42>
 801b0aa:	2969      	cmp	r1, #105	; 0x69
 801b0ac:	d1f6      	bne.n	801b09c <_printf_i+0x30>
 801b0ae:	6820      	ldr	r0, [r4, #0]
 801b0b0:	6813      	ldr	r3, [r2, #0]
 801b0b2:	0605      	lsls	r5, r0, #24
 801b0b4:	f103 0104 	add.w	r1, r3, #4
 801b0b8:	d52a      	bpl.n	801b110 <_printf_i+0xa4>
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	6011      	str	r1, [r2, #0]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	da03      	bge.n	801b0ca <_printf_i+0x5e>
 801b0c2:	222d      	movs	r2, #45	; 0x2d
 801b0c4:	425b      	negs	r3, r3
 801b0c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b0ca:	486f      	ldr	r0, [pc, #444]	; (801b288 <_printf_i+0x21c>)
 801b0cc:	220a      	movs	r2, #10
 801b0ce:	e039      	b.n	801b144 <_printf_i+0xd8>
 801b0d0:	2973      	cmp	r1, #115	; 0x73
 801b0d2:	f000 809d 	beq.w	801b210 <_printf_i+0x1a4>
 801b0d6:	d808      	bhi.n	801b0ea <_printf_i+0x7e>
 801b0d8:	296f      	cmp	r1, #111	; 0x6f
 801b0da:	d020      	beq.n	801b11e <_printf_i+0xb2>
 801b0dc:	2970      	cmp	r1, #112	; 0x70
 801b0de:	d1dd      	bne.n	801b09c <_printf_i+0x30>
 801b0e0:	6823      	ldr	r3, [r4, #0]
 801b0e2:	f043 0320 	orr.w	r3, r3, #32
 801b0e6:	6023      	str	r3, [r4, #0]
 801b0e8:	e003      	b.n	801b0f2 <_printf_i+0x86>
 801b0ea:	2975      	cmp	r1, #117	; 0x75
 801b0ec:	d017      	beq.n	801b11e <_printf_i+0xb2>
 801b0ee:	2978      	cmp	r1, #120	; 0x78
 801b0f0:	d1d4      	bne.n	801b09c <_printf_i+0x30>
 801b0f2:	2378      	movs	r3, #120	; 0x78
 801b0f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b0f8:	4864      	ldr	r0, [pc, #400]	; (801b28c <_printf_i+0x220>)
 801b0fa:	e055      	b.n	801b1a8 <_printf_i+0x13c>
 801b0fc:	6813      	ldr	r3, [r2, #0]
 801b0fe:	1d19      	adds	r1, r3, #4
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	6011      	str	r1, [r2, #0]
 801b104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b10c:	2301      	movs	r3, #1
 801b10e:	e08c      	b.n	801b22a <_printf_i+0x1be>
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	6011      	str	r1, [r2, #0]
 801b114:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b118:	bf18      	it	ne
 801b11a:	b21b      	sxthne	r3, r3
 801b11c:	e7cf      	b.n	801b0be <_printf_i+0x52>
 801b11e:	6813      	ldr	r3, [r2, #0]
 801b120:	6825      	ldr	r5, [r4, #0]
 801b122:	1d18      	adds	r0, r3, #4
 801b124:	6010      	str	r0, [r2, #0]
 801b126:	0628      	lsls	r0, r5, #24
 801b128:	d501      	bpl.n	801b12e <_printf_i+0xc2>
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	e002      	b.n	801b134 <_printf_i+0xc8>
 801b12e:	0668      	lsls	r0, r5, #25
 801b130:	d5fb      	bpl.n	801b12a <_printf_i+0xbe>
 801b132:	881b      	ldrh	r3, [r3, #0]
 801b134:	4854      	ldr	r0, [pc, #336]	; (801b288 <_printf_i+0x21c>)
 801b136:	296f      	cmp	r1, #111	; 0x6f
 801b138:	bf14      	ite	ne
 801b13a:	220a      	movne	r2, #10
 801b13c:	2208      	moveq	r2, #8
 801b13e:	2100      	movs	r1, #0
 801b140:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b144:	6865      	ldr	r5, [r4, #4]
 801b146:	60a5      	str	r5, [r4, #8]
 801b148:	2d00      	cmp	r5, #0
 801b14a:	f2c0 8095 	blt.w	801b278 <_printf_i+0x20c>
 801b14e:	6821      	ldr	r1, [r4, #0]
 801b150:	f021 0104 	bic.w	r1, r1, #4
 801b154:	6021      	str	r1, [r4, #0]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d13d      	bne.n	801b1d6 <_printf_i+0x16a>
 801b15a:	2d00      	cmp	r5, #0
 801b15c:	f040 808e 	bne.w	801b27c <_printf_i+0x210>
 801b160:	4665      	mov	r5, ip
 801b162:	2a08      	cmp	r2, #8
 801b164:	d10b      	bne.n	801b17e <_printf_i+0x112>
 801b166:	6823      	ldr	r3, [r4, #0]
 801b168:	07db      	lsls	r3, r3, #31
 801b16a:	d508      	bpl.n	801b17e <_printf_i+0x112>
 801b16c:	6923      	ldr	r3, [r4, #16]
 801b16e:	6862      	ldr	r2, [r4, #4]
 801b170:	429a      	cmp	r2, r3
 801b172:	bfde      	ittt	le
 801b174:	2330      	movle	r3, #48	; 0x30
 801b176:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b17a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b17e:	ebac 0305 	sub.w	r3, ip, r5
 801b182:	6123      	str	r3, [r4, #16]
 801b184:	f8cd 8000 	str.w	r8, [sp]
 801b188:	463b      	mov	r3, r7
 801b18a:	aa03      	add	r2, sp, #12
 801b18c:	4621      	mov	r1, r4
 801b18e:	4630      	mov	r0, r6
 801b190:	f7ff fef6 	bl	801af80 <_printf_common>
 801b194:	3001      	adds	r0, #1
 801b196:	d14d      	bne.n	801b234 <_printf_i+0x1c8>
 801b198:	f04f 30ff 	mov.w	r0, #4294967295
 801b19c:	b005      	add	sp, #20
 801b19e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b1a2:	4839      	ldr	r0, [pc, #228]	; (801b288 <_printf_i+0x21c>)
 801b1a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b1a8:	6813      	ldr	r3, [r2, #0]
 801b1aa:	6821      	ldr	r1, [r4, #0]
 801b1ac:	1d1d      	adds	r5, r3, #4
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	6015      	str	r5, [r2, #0]
 801b1b2:	060a      	lsls	r2, r1, #24
 801b1b4:	d50b      	bpl.n	801b1ce <_printf_i+0x162>
 801b1b6:	07ca      	lsls	r2, r1, #31
 801b1b8:	bf44      	itt	mi
 801b1ba:	f041 0120 	orrmi.w	r1, r1, #32
 801b1be:	6021      	strmi	r1, [r4, #0]
 801b1c0:	b91b      	cbnz	r3, 801b1ca <_printf_i+0x15e>
 801b1c2:	6822      	ldr	r2, [r4, #0]
 801b1c4:	f022 0220 	bic.w	r2, r2, #32
 801b1c8:	6022      	str	r2, [r4, #0]
 801b1ca:	2210      	movs	r2, #16
 801b1cc:	e7b7      	b.n	801b13e <_printf_i+0xd2>
 801b1ce:	064d      	lsls	r5, r1, #25
 801b1d0:	bf48      	it	mi
 801b1d2:	b29b      	uxthmi	r3, r3
 801b1d4:	e7ef      	b.n	801b1b6 <_printf_i+0x14a>
 801b1d6:	4665      	mov	r5, ip
 801b1d8:	fbb3 f1f2 	udiv	r1, r3, r2
 801b1dc:	fb02 3311 	mls	r3, r2, r1, r3
 801b1e0:	5cc3      	ldrb	r3, [r0, r3]
 801b1e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b1e6:	460b      	mov	r3, r1
 801b1e8:	2900      	cmp	r1, #0
 801b1ea:	d1f5      	bne.n	801b1d8 <_printf_i+0x16c>
 801b1ec:	e7b9      	b.n	801b162 <_printf_i+0xf6>
 801b1ee:	6813      	ldr	r3, [r2, #0]
 801b1f0:	6825      	ldr	r5, [r4, #0]
 801b1f2:	6961      	ldr	r1, [r4, #20]
 801b1f4:	1d18      	adds	r0, r3, #4
 801b1f6:	6010      	str	r0, [r2, #0]
 801b1f8:	0628      	lsls	r0, r5, #24
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	d501      	bpl.n	801b202 <_printf_i+0x196>
 801b1fe:	6019      	str	r1, [r3, #0]
 801b200:	e002      	b.n	801b208 <_printf_i+0x19c>
 801b202:	066a      	lsls	r2, r5, #25
 801b204:	d5fb      	bpl.n	801b1fe <_printf_i+0x192>
 801b206:	8019      	strh	r1, [r3, #0]
 801b208:	2300      	movs	r3, #0
 801b20a:	6123      	str	r3, [r4, #16]
 801b20c:	4665      	mov	r5, ip
 801b20e:	e7b9      	b.n	801b184 <_printf_i+0x118>
 801b210:	6813      	ldr	r3, [r2, #0]
 801b212:	1d19      	adds	r1, r3, #4
 801b214:	6011      	str	r1, [r2, #0]
 801b216:	681d      	ldr	r5, [r3, #0]
 801b218:	6862      	ldr	r2, [r4, #4]
 801b21a:	2100      	movs	r1, #0
 801b21c:	4628      	mov	r0, r5
 801b21e:	f7e4 ffe7 	bl	80001f0 <memchr>
 801b222:	b108      	cbz	r0, 801b228 <_printf_i+0x1bc>
 801b224:	1b40      	subs	r0, r0, r5
 801b226:	6060      	str	r0, [r4, #4]
 801b228:	6863      	ldr	r3, [r4, #4]
 801b22a:	6123      	str	r3, [r4, #16]
 801b22c:	2300      	movs	r3, #0
 801b22e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b232:	e7a7      	b.n	801b184 <_printf_i+0x118>
 801b234:	6923      	ldr	r3, [r4, #16]
 801b236:	462a      	mov	r2, r5
 801b238:	4639      	mov	r1, r7
 801b23a:	4630      	mov	r0, r6
 801b23c:	47c0      	blx	r8
 801b23e:	3001      	adds	r0, #1
 801b240:	d0aa      	beq.n	801b198 <_printf_i+0x12c>
 801b242:	6823      	ldr	r3, [r4, #0]
 801b244:	079b      	lsls	r3, r3, #30
 801b246:	d413      	bmi.n	801b270 <_printf_i+0x204>
 801b248:	68e0      	ldr	r0, [r4, #12]
 801b24a:	9b03      	ldr	r3, [sp, #12]
 801b24c:	4298      	cmp	r0, r3
 801b24e:	bfb8      	it	lt
 801b250:	4618      	movlt	r0, r3
 801b252:	e7a3      	b.n	801b19c <_printf_i+0x130>
 801b254:	2301      	movs	r3, #1
 801b256:	464a      	mov	r2, r9
 801b258:	4639      	mov	r1, r7
 801b25a:	4630      	mov	r0, r6
 801b25c:	47c0      	blx	r8
 801b25e:	3001      	adds	r0, #1
 801b260:	d09a      	beq.n	801b198 <_printf_i+0x12c>
 801b262:	3501      	adds	r5, #1
 801b264:	68e3      	ldr	r3, [r4, #12]
 801b266:	9a03      	ldr	r2, [sp, #12]
 801b268:	1a9b      	subs	r3, r3, r2
 801b26a:	42ab      	cmp	r3, r5
 801b26c:	dcf2      	bgt.n	801b254 <_printf_i+0x1e8>
 801b26e:	e7eb      	b.n	801b248 <_printf_i+0x1dc>
 801b270:	2500      	movs	r5, #0
 801b272:	f104 0919 	add.w	r9, r4, #25
 801b276:	e7f5      	b.n	801b264 <_printf_i+0x1f8>
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d1ac      	bne.n	801b1d6 <_printf_i+0x16a>
 801b27c:	7803      	ldrb	r3, [r0, #0]
 801b27e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b282:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b286:	e76c      	b.n	801b162 <_printf_i+0xf6>
 801b288:	0801f4c1 	.word	0x0801f4c1
 801b28c:	0801f4d2 	.word	0x0801f4d2

0801b290 <_sbrk_r>:
 801b290:	b538      	push	{r3, r4, r5, lr}
 801b292:	4c06      	ldr	r4, [pc, #24]	; (801b2ac <_sbrk_r+0x1c>)
 801b294:	2300      	movs	r3, #0
 801b296:	4605      	mov	r5, r0
 801b298:	4608      	mov	r0, r1
 801b29a:	6023      	str	r3, [r4, #0]
 801b29c:	f7e5 ff14 	bl	80010c8 <_sbrk>
 801b2a0:	1c43      	adds	r3, r0, #1
 801b2a2:	d102      	bne.n	801b2aa <_sbrk_r+0x1a>
 801b2a4:	6823      	ldr	r3, [r4, #0]
 801b2a6:	b103      	cbz	r3, 801b2aa <_sbrk_r+0x1a>
 801b2a8:	602b      	str	r3, [r5, #0]
 801b2aa:	bd38      	pop	{r3, r4, r5, pc}
 801b2ac:	2000bb14 	.word	0x2000bb14

0801b2b0 <__sread>:
 801b2b0:	b510      	push	{r4, lr}
 801b2b2:	460c      	mov	r4, r1
 801b2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2b8:	f000 f896 	bl	801b3e8 <_read_r>
 801b2bc:	2800      	cmp	r0, #0
 801b2be:	bfab      	itete	ge
 801b2c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b2c2:	89a3      	ldrhlt	r3, [r4, #12]
 801b2c4:	181b      	addge	r3, r3, r0
 801b2c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b2ca:	bfac      	ite	ge
 801b2cc:	6563      	strge	r3, [r4, #84]	; 0x54
 801b2ce:	81a3      	strhlt	r3, [r4, #12]
 801b2d0:	bd10      	pop	{r4, pc}

0801b2d2 <__swrite>:
 801b2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2d6:	461f      	mov	r7, r3
 801b2d8:	898b      	ldrh	r3, [r1, #12]
 801b2da:	05db      	lsls	r3, r3, #23
 801b2dc:	4605      	mov	r5, r0
 801b2de:	460c      	mov	r4, r1
 801b2e0:	4616      	mov	r6, r2
 801b2e2:	d505      	bpl.n	801b2f0 <__swrite+0x1e>
 801b2e4:	2302      	movs	r3, #2
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2ec:	f000 f868 	bl	801b3c0 <_lseek_r>
 801b2f0:	89a3      	ldrh	r3, [r4, #12]
 801b2f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b2fa:	81a3      	strh	r3, [r4, #12]
 801b2fc:	4632      	mov	r2, r6
 801b2fe:	463b      	mov	r3, r7
 801b300:	4628      	mov	r0, r5
 801b302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b306:	f000 b817 	b.w	801b338 <_write_r>

0801b30a <__sseek>:
 801b30a:	b510      	push	{r4, lr}
 801b30c:	460c      	mov	r4, r1
 801b30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b312:	f000 f855 	bl	801b3c0 <_lseek_r>
 801b316:	1c43      	adds	r3, r0, #1
 801b318:	89a3      	ldrh	r3, [r4, #12]
 801b31a:	bf15      	itete	ne
 801b31c:	6560      	strne	r0, [r4, #84]	; 0x54
 801b31e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b326:	81a3      	strheq	r3, [r4, #12]
 801b328:	bf18      	it	ne
 801b32a:	81a3      	strhne	r3, [r4, #12]
 801b32c:	bd10      	pop	{r4, pc}

0801b32e <__sclose>:
 801b32e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b332:	f000 b813 	b.w	801b35c <_close_r>
	...

0801b338 <_write_r>:
 801b338:	b538      	push	{r3, r4, r5, lr}
 801b33a:	4c07      	ldr	r4, [pc, #28]	; (801b358 <_write_r+0x20>)
 801b33c:	4605      	mov	r5, r0
 801b33e:	4608      	mov	r0, r1
 801b340:	4611      	mov	r1, r2
 801b342:	2200      	movs	r2, #0
 801b344:	6022      	str	r2, [r4, #0]
 801b346:	461a      	mov	r2, r3
 801b348:	f7e5 fe56 	bl	8000ff8 <_write>
 801b34c:	1c43      	adds	r3, r0, #1
 801b34e:	d102      	bne.n	801b356 <_write_r+0x1e>
 801b350:	6823      	ldr	r3, [r4, #0]
 801b352:	b103      	cbz	r3, 801b356 <_write_r+0x1e>
 801b354:	602b      	str	r3, [r5, #0]
 801b356:	bd38      	pop	{r3, r4, r5, pc}
 801b358:	2000bb14 	.word	0x2000bb14

0801b35c <_close_r>:
 801b35c:	b538      	push	{r3, r4, r5, lr}
 801b35e:	4c06      	ldr	r4, [pc, #24]	; (801b378 <_close_r+0x1c>)
 801b360:	2300      	movs	r3, #0
 801b362:	4605      	mov	r5, r0
 801b364:	4608      	mov	r0, r1
 801b366:	6023      	str	r3, [r4, #0]
 801b368:	f7e5 fe7a 	bl	8001060 <_close>
 801b36c:	1c43      	adds	r3, r0, #1
 801b36e:	d102      	bne.n	801b376 <_close_r+0x1a>
 801b370:	6823      	ldr	r3, [r4, #0]
 801b372:	b103      	cbz	r3, 801b376 <_close_r+0x1a>
 801b374:	602b      	str	r3, [r5, #0]
 801b376:	bd38      	pop	{r3, r4, r5, pc}
 801b378:	2000bb14 	.word	0x2000bb14

0801b37c <_fstat_r>:
 801b37c:	b538      	push	{r3, r4, r5, lr}
 801b37e:	4c07      	ldr	r4, [pc, #28]	; (801b39c <_fstat_r+0x20>)
 801b380:	2300      	movs	r3, #0
 801b382:	4605      	mov	r5, r0
 801b384:	4608      	mov	r0, r1
 801b386:	4611      	mov	r1, r2
 801b388:	6023      	str	r3, [r4, #0]
 801b38a:	f7e5 fe75 	bl	8001078 <_fstat>
 801b38e:	1c43      	adds	r3, r0, #1
 801b390:	d102      	bne.n	801b398 <_fstat_r+0x1c>
 801b392:	6823      	ldr	r3, [r4, #0]
 801b394:	b103      	cbz	r3, 801b398 <_fstat_r+0x1c>
 801b396:	602b      	str	r3, [r5, #0]
 801b398:	bd38      	pop	{r3, r4, r5, pc}
 801b39a:	bf00      	nop
 801b39c:	2000bb14 	.word	0x2000bb14

0801b3a0 <_isatty_r>:
 801b3a0:	b538      	push	{r3, r4, r5, lr}
 801b3a2:	4c06      	ldr	r4, [pc, #24]	; (801b3bc <_isatty_r+0x1c>)
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	4605      	mov	r5, r0
 801b3a8:	4608      	mov	r0, r1
 801b3aa:	6023      	str	r3, [r4, #0]
 801b3ac:	f7e5 fe74 	bl	8001098 <_isatty>
 801b3b0:	1c43      	adds	r3, r0, #1
 801b3b2:	d102      	bne.n	801b3ba <_isatty_r+0x1a>
 801b3b4:	6823      	ldr	r3, [r4, #0]
 801b3b6:	b103      	cbz	r3, 801b3ba <_isatty_r+0x1a>
 801b3b8:	602b      	str	r3, [r5, #0]
 801b3ba:	bd38      	pop	{r3, r4, r5, pc}
 801b3bc:	2000bb14 	.word	0x2000bb14

0801b3c0 <_lseek_r>:
 801b3c0:	b538      	push	{r3, r4, r5, lr}
 801b3c2:	4c07      	ldr	r4, [pc, #28]	; (801b3e0 <_lseek_r+0x20>)
 801b3c4:	4605      	mov	r5, r0
 801b3c6:	4608      	mov	r0, r1
 801b3c8:	4611      	mov	r1, r2
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	6022      	str	r2, [r4, #0]
 801b3ce:	461a      	mov	r2, r3
 801b3d0:	f7e5 fe6d 	bl	80010ae <_lseek>
 801b3d4:	1c43      	adds	r3, r0, #1
 801b3d6:	d102      	bne.n	801b3de <_lseek_r+0x1e>
 801b3d8:	6823      	ldr	r3, [r4, #0]
 801b3da:	b103      	cbz	r3, 801b3de <_lseek_r+0x1e>
 801b3dc:	602b      	str	r3, [r5, #0]
 801b3de:	bd38      	pop	{r3, r4, r5, pc}
 801b3e0:	2000bb14 	.word	0x2000bb14

0801b3e4 <__malloc_lock>:
 801b3e4:	4770      	bx	lr

0801b3e6 <__malloc_unlock>:
 801b3e6:	4770      	bx	lr

0801b3e8 <_read_r>:
 801b3e8:	b538      	push	{r3, r4, r5, lr}
 801b3ea:	4c07      	ldr	r4, [pc, #28]	; (801b408 <_read_r+0x20>)
 801b3ec:	4605      	mov	r5, r0
 801b3ee:	4608      	mov	r0, r1
 801b3f0:	4611      	mov	r1, r2
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	6022      	str	r2, [r4, #0]
 801b3f6:	461a      	mov	r2, r3
 801b3f8:	f7e5 fde0 	bl	8000fbc <_read>
 801b3fc:	1c43      	adds	r3, r0, #1
 801b3fe:	d102      	bne.n	801b406 <_read_r+0x1e>
 801b400:	6823      	ldr	r3, [r4, #0]
 801b402:	b103      	cbz	r3, 801b406 <_read_r+0x1e>
 801b404:	602b      	str	r3, [r5, #0]
 801b406:	bd38      	pop	{r3, r4, r5, pc}
 801b408:	2000bb14 	.word	0x2000bb14

0801b40c <_init>:
 801b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b40e:	bf00      	nop
 801b410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b412:	bc08      	pop	{r3}
 801b414:	469e      	mov	lr, r3
 801b416:	4770      	bx	lr

0801b418 <_fini>:
 801b418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b41a:	bf00      	nop
 801b41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b41e:	bc08      	pop	{r3}
 801b420:	469e      	mov	lr, r3
 801b422:	4770      	bx	lr
