
spi_reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a1dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004090  0801a38c  0801a38c  0002a38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e41c  0801e41c  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801e41c  0801e41c  0002e41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e424  0801e424  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e424  0801e424  0002e424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e428  0801e428  0002e428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801e42c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000af90  200001f0  0801e61c  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b180  0801e61c  0003b180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c09b  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000856a  00000000  00000000  0007c2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000028f8  00000000  00000000  00084828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002788  00000000  00000000  00087120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000378ea  00000000  00000000  000898a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003129e  00000000  00000000  000c1192  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001054ac  00000000  00000000  000f2430  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f78dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b240  00000000  00000000  001f7958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a374 	.word	0x0801a374

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	0801a374 	.word	0x0801a374

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	2000020c 	.word	0x2000020c
 80005c0:	20000260 	.word	0x20000260

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fd43 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f825 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f91d 	bl	8000810 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d6:	f000 f8c3 	bl	8000760 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005da:	f000 f8eb 	bl	80007b4 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005de:	f000 f88d 	bl	80006fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Welcome to the SPI Reader\r\n");
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <main+0x4c>)
 80005e4:	f018 ff16 	bl	8019414 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <main+0x50>)
 80005ea:	1d3c      	adds	r4, r7, #4
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 fbff 	bl	8005e02 <osThreadCreate>
 8000604:	4602      	mov	r2, r0
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <main+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060a:	f005 fbe3 	bl	8005dd4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x4a>
 8000610:	0801a38c 	.word	0x0801a38c
 8000614:	0801a3b4 	.word	0x0801a3b4
 8000618:	200043a0 	.word	0x200043a0

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f018 fe75 	bl	801931a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <SystemClock_Config+0xd8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <SystemClock_Config+0xd8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xd8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xdc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a24      	ldr	r2, [pc, #144]	; (80006f8 <SystemClock_Config+0xdc>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	; 0xa8
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fae9 	bl	8002c78 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f9fc 	bl	8000aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fd42 	bl	8003158 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 f9e5 	bl	8000aa8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_2);
 80006de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80006e2:	2100      	movs	r1, #0
 80006e4:	2001      	movs	r0, #1
 80006e6:	f002 fe1d 	bl	8003324 <HAL_RCC_MCOConfig>
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_SPI1_Init+0x5c>)
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <MX_SPI1_Init+0x60>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_SPI1_Init+0x5c>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_SPI1_Init+0x5c>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_SPI1_Init+0x5c>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_SPI1_Init+0x5c>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_SPI1_Init+0x5c>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_SPI1_Init+0x5c>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_SPI1_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_SPI1_Init+0x5c>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_SPI1_Init+0x5c>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_SPI1_Init+0x5c>)
 800073e:	220a      	movs	r2, #10
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_SPI1_Init+0x5c>)
 8000744:	f002 ff94 	bl	8003670 <HAL_SPI_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800074e:	f000 f9ab 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200047ec 	.word	0x200047ec
 800075c:	40013000 	.word	0x40013000

08000760 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART3_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000798:	f003 fee8 	bl	800456c <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f981 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200043a4 	.word	0x200043a4
 80007b0:	40004800 	.word	0x40004800

080007b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2201      	movs	r2, #1
 80007dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	f002 f921 	bl	8002a3e <HAL_PCD_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f951 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200043e4 	.word	0x200043e4

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b58      	ldr	r3, [pc, #352]	; (800098c <MX_GPIO_Init+0x17c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a57      	ldr	r2, [pc, #348]	; (800098c <MX_GPIO_Init+0x17c>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b55      	ldr	r3, [pc, #340]	; (800098c <MX_GPIO_Init+0x17c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <MX_GPIO_Init+0x17c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a50      	ldr	r2, [pc, #320]	; (800098c <MX_GPIO_Init+0x17c>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b4e      	ldr	r3, [pc, #312]	; (800098c <MX_GPIO_Init+0x17c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b4a      	ldr	r3, [pc, #296]	; (800098c <MX_GPIO_Init+0x17c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a49      	ldr	r2, [pc, #292]	; (800098c <MX_GPIO_Init+0x17c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b47      	ldr	r3, [pc, #284]	; (800098c <MX_GPIO_Init+0x17c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b43      	ldr	r3, [pc, #268]	; (800098c <MX_GPIO_Init+0x17c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a42      	ldr	r2, [pc, #264]	; (800098c <MX_GPIO_Init+0x17c>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b40      	ldr	r3, [pc, #256]	; (800098c <MX_GPIO_Init+0x17c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b3c      	ldr	r3, [pc, #240]	; (800098c <MX_GPIO_Init+0x17c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a3b      	ldr	r2, [pc, #236]	; (800098c <MX_GPIO_Init+0x17c>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b39      	ldr	r3, [pc, #228]	; (800098c <MX_GPIO_Init+0x17c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b35      	ldr	r3, [pc, #212]	; (800098c <MX_GPIO_Init+0x17c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a34      	ldr	r2, [pc, #208]	; (800098c <MX_GPIO_Init+0x17c>)
 80008bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b32      	ldr	r3, [pc, #200]	; (800098c <MX_GPIO_Init+0x17c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008d4:	482e      	ldr	r0, [pc, #184]	; (8000990 <MX_GPIO_Init+0x180>)
 80008d6:	f002 f875 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	482d      	ldr	r0, [pc, #180]	; (8000994 <MX_GPIO_Init+0x184>)
 80008e0:	f002 f870 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_GPIO_Init+0x188>)
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4828      	ldr	r0, [pc, #160]	; (800099c <MX_GPIO_Init+0x18c>)
 80008fa:	f001 feb9 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008fe:	f244 0381 	movw	r3, #16513	; 0x4081
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	481e      	ldr	r0, [pc, #120]	; (8000990 <MX_GPIO_Init+0x180>)
 8000918:	f001 feaa 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4818      	ldr	r0, [pc, #96]	; (8000994 <MX_GPIO_Init+0x184>)
 8000934:	f001 fe9c 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4812      	ldr	r0, [pc, #72]	; (8000994 <MX_GPIO_Init+0x184>)
 800094c:	f001 fe90 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <MX_GPIO_Init+0x18c>)
 800096e:	f001 fe7f 	bl	8002670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2028      	movs	r0, #40	; 0x28
 8000978:	f000 fc88 	bl	800128c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800097c:	2028      	movs	r0, #40	; 0x28
 800097e:	f000 fca1 	bl	80012c4 <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	; 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40020400 	.word	0x40020400
 8000994:	40021800 	.word	0x40021800
 8000998:	10110000 	.word	0x10110000
 800099c:	40020800 	.word	0x40020800

080009a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b092      	sub	sp, #72	; 0x48
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80009a8:	f004 fd42 	bl	8005430 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  int local_IP;
 struct dhcp *dhcp_data;
  dhcp_data =netif_dhcp_data(&gnetif);
 80009ac:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <StartDefaultTask+0xd4>)
 80009ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  local_IP =dhcp_data->offered_ip_addr.addr;
 80009b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
  printf("IP %d.%d.%d.%d\n\r",(local_IP & 0xff), ((local_IP >> 8) & 0xff), ((local_IP >> 16) & 0xff), (local_IP >> 24));
 80009b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ba:	b2d9      	uxtb	r1, r3
 80009bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009be:	121b      	asrs	r3, r3, #8
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c4:	141b      	asrs	r3, r3, #16
 80009c6:	b2d8      	uxtb	r0, r3
 80009c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ca:	161b      	asrs	r3, r3, #24
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	4603      	mov	r3, r0
 80009d0:	4829      	ldr	r0, [pc, #164]	; (8000a78 <StartDefaultTask+0xd8>)
 80009d2:	f018 fcab 	bl	801932c <iprintf>
  int server_fd, new_socket;
      struct sockaddr_in address;
      int opt = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
      int addrlen = sizeof(address);
 80009da:	2310      	movs	r3, #16
 80009dc:	61bb      	str	r3, [r7, #24]
      uint8_t data[10];

      // Creating socket file descriptor
     server_fd = socket(AF_INET, SOCK_STREAM, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2101      	movs	r1, #1
 80009e2:	2002      	movs	r0, #2
 80009e4:	f00a fd3c 	bl	800b460 <lwip_socket>
 80009e8:	6378      	str	r0, [r7, #52]	; 0x34

      // Forcefully attaching socket to the port 8080
      setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
 80009ea:	f107 021c 	add.w	r2, r7, #28
 80009ee:	2304      	movs	r3, #4
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	f44f 7201 	mov.w	r2, #516	; 0x204
 80009f8:	f640 71ff 	movw	r1, #4095	; 0xfff
 80009fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80009fe:	f00a ff2f 	bl	800b860 <lwip_setsockopt>
                                                    &opt, sizeof(opt));
      address.sin_family = AF_INET;
 8000a02:	2302      	movs	r3, #2
 8000a04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      address.sin_addr.s_addr = htonl(INADDR_ANY);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f00b fac6 	bl	800bf9a <lwip_htonl>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
      address.sin_port = htons( PORT );
 8000a12:	f244 206b 	movw	r0, #17003	; 0x426b
 8000a16:	f00b faab 	bl	800bf70 <lwip_htons>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	847b      	strh	r3, [r7, #34]	; 0x22
      bind(server_fd, (struct sockaddr *)&address, sizeof(address));
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2210      	movs	r2, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000a28:	f00a fb48 	bl	800b0bc <lwip_bind>
      listen(server_fd, 3);
 8000a2c:	2103      	movs	r1, #3
 8000a2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000a30:	f00a fbb2 	bl	800b198 <lwip_listen>
     new_socket = accept(server_fd, (struct sockaddr *)&address, ( __socklen_t*)&addrlen);
 8000a34:	f107 0218 	add.w	r2, r7, #24
 8000a38:	f107 0320 	add.w	r3, r7, #32
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000a40:	f00a fa1e 	bl	800ae80 <lwip_accept>
 8000a44:	6338      	str	r0, [r7, #48]	; 0x30
  for(;;)
  {
	      // Forcefully attaching socket to the port 8080


	 if (HAL_SPI_Receive(&hspi1,(uint8_t*)data, 10, 0xFFFF)== HAL_OK)
 8000a46:	f107 010c 	add.w	r1, r7, #12
 8000a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a4e:	220a      	movs	r2, #10
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <StartDefaultTask+0xdc>)
 8000a52:	f002 fe71 	bl	8003738 <HAL_SPI_Receive>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f4      	bne.n	8000a46 <StartDefaultTask+0xa6>
			 {
	      send(new_socket , data , 10 , 0 );
 8000a5c:	f107 010c 	add.w	r1, r7, #12
 8000a60:	2300      	movs	r3, #0
 8000a62:	220a      	movs	r2, #10
 8000a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a66:	f00a fbeb 	bl	800b240 <lwip_send>
	      printf("Message sent\r\n");
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <StartDefaultTask+0xe0>)
 8000a6c:	f018 fcd2 	bl	8019414 <puts>
	 if (HAL_SPI_Receive(&hspi1,(uint8_t*)data, 10, 0xFFFF)== HAL_OK)
 8000a70:	e7e9      	b.n	8000a46 <StartDefaultTask+0xa6>
 8000a72:	bf00      	nop
 8000a74:	20004890 	.word	0x20004890
 8000a78:	0801a3d0 	.word	0x0801a3d0
 8000a7c:	200047ec 	.word	0x200047ec
 8000a80:	0801a3e4 	.word	0x0801a3e4

08000a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a96:	f000 faff 	bl	8001098 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40001000 	.word	0x40001000

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aae:	e7fe      	b.n	8000aae <Error_Handler+0x6>

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_MspInit+0x54>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_MspInit+0x54>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x54>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_MspInit+0x54>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_MspInit+0x54>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_MspInit+0x54>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	210f      	movs	r1, #15
 8000af2:	f06f 0001 	mvn.w	r0, #1
 8000af6:	f000 fbc9 	bl	800128c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a2c      	ldr	r2, [pc, #176]	; (8000bd8 <HAL_SPI_MspInit+0xd0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d151      	bne.n	8000bce <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <HAL_SPI_MspInit+0xd4>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a2a      	ldr	r2, [pc, #168]	; (8000bdc <HAL_SPI_MspInit+0xd4>)
 8000b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <HAL_SPI_MspInit+0xd4>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <HAL_SPI_MspInit+0xd4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <HAL_SPI_MspInit+0xd4>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <HAL_SPI_MspInit+0xd4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_SPI_MspInit+0xd4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <HAL_SPI_MspInit+0xd4>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <HAL_SPI_MspInit+0xd4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b7e:	2370      	movs	r3, #112	; 0x70
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <HAL_SPI_MspInit+0xd8>)
 8000b9a:	f001 fd69 	bl	8002670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b9e:	2320      	movs	r3, #32
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <HAL_SPI_MspInit+0xdc>)
 8000bba:	f001 fd59 	bl	8002670 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2105      	movs	r1, #5
 8000bc2:	2023      	movs	r0, #35	; 0x23
 8000bc4:	f000 fb62 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000bc8:	2023      	movs	r0, #35	; 0x23
 8000bca:	f000 fb7b 	bl	80012c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020400 	.word	0x40020400

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_UART_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12c      	bne.n	8000c64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c54:	2307      	movs	r3, #7
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_UART_MspInit+0x8c>)
 8000c60:	f001 fd06 	bl	8002670 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40004800 	.word	0x40004800
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020c00 	.word	0x40020c00

08000c78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c98:	d13f      	bne.n	8000d1a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <HAL_PCD_MspInit+0xac>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a20      	ldr	r2, [pc, #128]	; (8000d24 <HAL_PCD_MspInit+0xac>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <HAL_PCD_MspInit+0xac>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cb6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cc8:	230a      	movs	r3, #10
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4815      	ldr	r0, [pc, #84]	; (8000d28 <HAL_PCD_MspInit+0xb0>)
 8000cd4:	f001 fccc 	bl	8002670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480e      	ldr	r0, [pc, #56]	; (8000d28 <HAL_PCD_MspInit+0xb0>)
 8000cee:	f001 fcbf 	bl	8002670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_PCD_MspInit+0xac>)
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <HAL_PCD_MspInit+0xac>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6353      	str	r3, [r2, #52]	; 0x34
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_PCD_MspInit+0xac>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_PCD_MspInit+0xac>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_PCD_MspInit+0xac>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	2036      	movs	r0, #54	; 0x36
 8000d42:	f000 faa3 	bl	800128c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d46:	2036      	movs	r0, #54	; 0x36
 8000d48:	f000 fabc 	bl	80012c4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_InitTick+0xa4>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_InitTick+0xa4>)
 8000d56:	f043 0310 	orr.w	r3, r3, #16
 8000d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_InitTick+0xa4>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d68:	f107 0210 	add.w	r2, r7, #16
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 fc4a 	bl	800360c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d78:	f002 fc20 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_InitTick+0xa8>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	0c9b      	lsrs	r3, r3, #18
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_InitTick+0xac>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_InitTick+0xb0>)
 8000d94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_InitTick+0xac>)
 8000d98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_InitTick+0xac>)
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_InitTick+0xac>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_InitTick+0xac>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <HAL_InitTick+0xac>)
 8000db2:	f003 f99d 	bl	80040f0 <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d104      	bne.n	8000dc6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dbc:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <HAL_InitTick+0xac>)
 8000dbe:	f003 f9cc 	bl	800415a <HAL_TIM_Base_Start_IT>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	431bde83 	.word	0x431bde83
 8000dd8:	20004844 	.word	0x20004844
 8000ddc:	40001000 	.word	0x40001000

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <SPI1_IRQHandler+0x10>)
 8000e12:	f002 ff3d 	bl	8003c90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200047ec 	.word	0x200047ec

08000e20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e28:	f001 fde6 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM6_DAC_IRQHandler+0x10>)
 8000e36:	f003 f9b4 	bl	80041a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20004844 	.word	0x20004844

08000e44 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <ETH_IRQHandler+0x10>)
 8000e4a:	f000 fe51 	bl	8001af0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200061a4 	.word	0x200061a4

08000e58 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <ETH_WKUP_IRQHandler+0x10>)
 8000e5e:	f000 fe47 	bl	8001af0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200061a4 	.word	0x200061a4

08000e6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e00a      	b.n	8000e94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e7e:	f3af 8000 	nop.w
 8000e82:	4601      	mov	r1, r0
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	b2ca      	uxtb	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf0      	blt.n	8000e7e <_read+0x12>
	}

return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <_write>:

__attribute__((weak)) int _write(int file, char *data, int len)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d008      	beq.n	8000ecc <_write+0x24>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d005      	beq.n	8000ecc <_write+0x24>
	   {
	      errno = EBADF;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <_write+0x4c>)
 8000ec2:	2209      	movs	r2, #9
 8000ec4:	601a      	str	r2, [r3, #0]
	      return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e00f      	b.n	8000eec <_write+0x44>
	   }

	   // arbitrary timeout 1000
	   HAL_StatusTypeDef status =
	      HAL_UART_Transmit(&huart3, (uint8_t*)data, len, 1000);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b29a      	uxth	r2, r3
	   HAL_StatusTypeDef status =
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <_write+0x50>)
 8000ed8:	f003 fb95 	bl	8004606 <HAL_UART_Transmit>
 8000edc:	4603      	mov	r3, r0
 8000ede:	75fb      	strb	r3, [r7, #23]

	   // return # of bytes written - as best we can tell
	   return (status == HAL_OK ? len : 0);
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <_write+0x42>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	e000      	b.n	8000eec <_write+0x44>
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000b178 	.word	0x2000b178
 8000ef8:	200043a4 	.word	0x200043a4

08000efc <_close>:

int _close(int file)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	return -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f24:	605a      	str	r2, [r3, #4]
	return 0;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_isatty>:

int _isatty(int file)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	return 1;
 8000f3c:	2301      	movs	r3, #1
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
	return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d205      	bcs.n	8000fa0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <_sbrk+0x6c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	20030000 	.word	0x20030000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	20000460 	.word	0x20000460
 8000fcc:	2000b180 	.word	0x2000b180
 8000fd0:	2000b178 	.word	0x2000b178

08000fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <SystemInit+0x28>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <SystemInit+0x28>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SystemInit+0x28>)
 8000fea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fee:	609a      	str	r2, [r3, #8]
#endif
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001004:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001006:	e003      	b.n	8001010 <LoopCopyDataInit>

08001008 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800100a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800100c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800100e:	3104      	adds	r1, #4

08001010 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001014:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001016:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001018:	d3f6      	bcc.n	8001008 <CopyDataInit>
  ldr  r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800101c:	e002      	b.n	8001024 <LoopFillZerobss>

0800101e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800101e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001020:	f842 3b04 	str.w	r3, [r2], #4

08001024 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001026:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001028:	d3f9      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102a:	f7ff ffd3 	bl	8000fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f018 f921 	bl	8019274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fac7 	bl	80005c4 <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001038:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800103c:	0801e42c 	.word	0x0801e42c
  ldr  r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001044:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001048:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800104c:	2000b180 	.word	0x2000b180

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_Init+0x40>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_Init+0x40>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x40>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f8fa 	bl	8001276 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fe52 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fd12 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20004884 	.word	0x20004884

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20004884 	.word	0x20004884

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_Delay+0x40>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000008 	.word	0x20000008

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff4c 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129e:	f7ff ff61 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	6978      	ldr	r0, [r7, #20]
 80012aa:	f7ff ffb1 	bl	8001210 <NVIC_EncodePriority>
 80012ae:	4602      	mov	r2, r0
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff80 	bl	80011bc <__NVIC_SetPriority>
}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff54 	bl	8001180 <__NVIC_EnableIRQ>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d004      	beq.n	80012fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00c      	b.n	8001318 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2205      	movs	r2, #5
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0201 	bic.w	r2, r2, #1
 8001314:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001334:	4baa      	ldr	r3, [pc, #680]	; (80015e0 <HAL_ETH_Init+0x2bc>)
 8001336:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e185      	b.n	8001656 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f004 f8d6 	bl	8005510 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	4b9e      	ldr	r3, [pc, #632]	; (80015e4 <HAL_ETH_Init+0x2c0>)
 800136a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136c:	4a9d      	ldr	r2, [pc, #628]	; (80015e4 <HAL_ETH_Init+0x2c0>)
 800136e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001372:	6453      	str	r3, [r2, #68]	; 0x44
 8001374:	4b9b      	ldr	r3, [pc, #620]	; (80015e4 <HAL_ETH_Init+0x2c0>)
 8001376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001380:	4b99      	ldr	r3, [pc, #612]	; (80015e8 <HAL_ETH_Init+0x2c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4a98      	ldr	r2, [pc, #608]	; (80015e8 <HAL_ETH_Init+0x2c4>)
 8001386:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800138a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800138c:	4b96      	ldr	r3, [pc, #600]	; (80015e8 <HAL_ETH_Init+0x2c4>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4994      	ldr	r1, [pc, #592]	; (80015e8 <HAL_ETH_Init+0x2c4>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013b2:	f7ff fe85 	bl	80010c0 <HAL_GetTick>
 80013b6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013b8:	e011      	b.n	80013de <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80013ba:	f7ff fe81 	bl	80010c0 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013c8:	d909      	bls.n	80013de <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2203      	movs	r2, #3
 80013ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e13b      	b.n	8001656 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e4      	bne.n	80013ba <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f023 031c 	bic.w	r3, r3, #28
 80013fe:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001400:	f002 f8d0 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 8001404:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4a78      	ldr	r2, [pc, #480]	; (80015ec <HAL_ETH_Init+0x2c8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d908      	bls.n	8001420 <HAL_ETH_Init+0xfc>
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4a77      	ldr	r2, [pc, #476]	; (80015f0 <HAL_ETH_Init+0x2cc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d804      	bhi.n	8001420 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e027      	b.n	8001470 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	4a73      	ldr	r2, [pc, #460]	; (80015f0 <HAL_ETH_Init+0x2cc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d908      	bls.n	800143a <HAL_ETH_Init+0x116>
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	4a72      	ldr	r2, [pc, #456]	; (80015f4 <HAL_ETH_Init+0x2d0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d804      	bhi.n	800143a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f043 030c 	orr.w	r3, r3, #12
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	e01a      	b.n	8001470 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	4a6d      	ldr	r2, [pc, #436]	; (80015f4 <HAL_ETH_Init+0x2d0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d903      	bls.n	800144a <HAL_ETH_Init+0x126>
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4a6c      	ldr	r2, [pc, #432]	; (80015f8 <HAL_ETH_Init+0x2d4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d911      	bls.n	800146e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4a6a      	ldr	r2, [pc, #424]	; (80015f8 <HAL_ETH_Init+0x2d4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d908      	bls.n	8001464 <HAL_ETH_Init+0x140>
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4a69      	ldr	r2, [pc, #420]	; (80015fc <HAL_ETH_Init+0x2d8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d804      	bhi.n	8001464 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	e005      	b.n	8001470 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	e000      	b.n	8001470 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800146e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001478:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800147c:	2100      	movs	r1, #0
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fc19 	bl	8001cb6 <HAL_ETH_WritePHYRegister>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800148e:	6939      	ldr	r1, [r7, #16]
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 fdcf 	bl	8002034 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0d9      	b.n	8001656 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80014a2:	20ff      	movs	r0, #255	; 0xff
 80014a4:	f7ff fe18 	bl	80010d8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80a7 	beq.w	8001600 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014b2:	f7ff fe05 	bl	80010c0 <HAL_GetTick>
 80014b6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	461a      	mov	r2, r3
 80014be:	2101      	movs	r1, #1
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fb90 	bl	8001be6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80014c6:	f7ff fdfb 	bl	80010c0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d90f      	bls.n	80014f8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014dc:	6939      	ldr	r1, [r7, #16]
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fda8 	bl	8002034 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e0ae      	b.n	8001656 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0da      	beq.n	80014b8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001502:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001506:	2100      	movs	r1, #0
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fbd4 	bl	8001cb6 <HAL_ETH_WritePHYRegister>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00b      	beq.n	800152c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001518:	6939      	ldr	r1, [r7, #16]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 fd8a 	bl	8002034 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001528:	2301      	movs	r3, #1
 800152a:	e094      	b.n	8001656 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800152c:	f7ff fdc8 	bl	80010c0 <HAL_GetTick>
 8001530:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	461a      	mov	r2, r3
 8001538:	2101      	movs	r1, #1
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fb53 	bl	8001be6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001540:	f7ff fdbe 	bl	80010c0 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d90f      	bls.n	8001572 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001556:	6939      	ldr	r1, [r7, #16]
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fd6b 	bl	8002034 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e071      	b.n	8001656 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0da      	beq.n	8001532 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	461a      	mov	r2, r3
 8001582:	211f      	movs	r1, #31
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fb2e 	bl	8001be6 <HAL_ETH_ReadPHYRegister>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00b      	beq.n	80015a8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fd4c 	bl	8002034 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015a4:	2301      	movs	r3, #1
 80015a6:	e056      	b.n	8001656 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	e002      	b.n	80015c2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	e037      	b.n	8001644 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	e032      	b.n	8001644 <HAL_ETH_Init+0x320>
 80015de:	bf00      	nop
 80015e0:	03938700 	.word	0x03938700
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40013800 	.word	0x40013800
 80015ec:	01312cff 	.word	0x01312cff
 80015f0:	02160ebf 	.word	0x02160ebf
 80015f4:	039386ff 	.word	0x039386ff
 80015f8:	05f5e0ff 	.word	0x05f5e0ff
 80015fc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001610:	4313      	orrs	r3, r2
 8001612:	b29b      	uxth	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	2100      	movs	r1, #0
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 fb4c 	bl	8001cb6 <HAL_ETH_WritePHYRegister>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fd02 	bl	8002034 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e00c      	b.n	8001656 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800163c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001640:	f7ff fd4a 	bl	80010d8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001644:	6939      	ldr	r1, [r7, #16]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fcf4 	bl	8002034 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop

08001660 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_ETH_DMATxDescListInit+0x20>
 800167c:	2302      	movs	r3, #2
 800167e:	e052      	b.n	8001726 <HAL_ETH_DMATxDescListInit+0xc6>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2202      	movs	r2, #2
 800168c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e030      	b.n	80016fe <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	015b      	lsls	r3, r3, #5
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	4413      	add	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016ac:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d105      	bne.n	80016d6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	3b01      	subs	r3, #1
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d208      	bcs.n	80016f2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3301      	adds	r3, #1
 80016e4:	015b      	lsls	r3, r3, #5
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	4413      	add	r3, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	e002      	b.n	80016f8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d3ca      	bcc.n	800169c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001710:	3310      	adds	r3, #16
 8001712:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	371c      	adds	r7, #28
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001732:	b480      	push	{r7}
 8001734:	b087      	sub	sp, #28
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ETH_DMARxDescListInit+0x20>
 800174e:	2302      	movs	r3, #2
 8001750:	e056      	b.n	8001800 <HAL_ETH_DMARxDescListInit+0xce>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2202      	movs	r2, #2
 800175e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e034      	b.n	80017d8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	015b      	lsls	r3, r3, #5
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	4413      	add	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800177e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001786:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	461a      	mov	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d208      	bcs.n	80017cc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	015b      	lsls	r3, r3, #5
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	e002      	b.n	80017d2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3c6      	bcc.n	800176e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ea:	330c      	adds	r3, #12
 80017ec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_ETH_TransmitFrame+0x24>
 800182c:	2302      	movs	r3, #2
 800182e:	e0cd      	b.n	80019cc <HAL_ETH_TransmitFrame+0x1c0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2202      	movs	r2, #2
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001856:	2301      	movs	r3, #1
 8001858:	e0b8      	b.n	80019cc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	da09      	bge.n	8001878 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2212      	movs	r2, #18
 8001868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0a9      	b.n	80019cc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800187e:	4293      	cmp	r3, r2
 8001880:	d915      	bls.n	80018ae <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	4a54      	ldr	r2, [pc, #336]	; (80019d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0a9b      	lsrs	r3, r3, #10
 800188c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	4b51      	ldr	r3, [pc, #324]	; (80019d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001892:	fba3 1302 	umull	r1, r3, r3, r2
 8001896:	0a9b      	lsrs	r3, r3, #10
 8001898:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e001      	b.n	80018b2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80018ae:	2301      	movs	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d11c      	bne.n	80018f2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80018c6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018d2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018e2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	461a      	mov	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80018f0:	e04b      	b.n	800198a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	e044      	b.n	8001982 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001906:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d107      	bne.n	800191e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800191c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001926:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3b01      	subs	r3, #1
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	429a      	cmp	r2, r3
 8001930:	d116      	bne.n	8001960 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001940:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	4a25      	ldr	r2, [pc, #148]	; (80019dc <HAL_ETH_TransmitFrame+0x1d0>)
 8001946:	fb02 f203 	mul.w	r2, r2, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	4413      	add	r3, r2
 800194e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001952:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800195e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800196e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	3301      	adds	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	429a      	cmp	r2, r3
 8001988:	d3b6      	bcc.n	80018f8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001992:	3314      	adds	r3, #20
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00d      	beq.n	80019ba <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a6:	3314      	adds	r3, #20
 80019a8:	2204      	movs	r2, #4
 80019aa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b4:	3304      	adds	r3, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	ac02b00b 	.word	0xac02b00b
 80019dc:	fffffa0c 	.word	0xfffffa0c

080019e0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e074      	b.n	8001ae4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2202      	movs	r2, #2
 8001a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a0a:	e05a      	b.n	8001ac2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a20:	d10d      	bne.n	8001a3e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a3c:	e041      	b.n	8001ac2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10b      	bne.n	8001a64 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
 8001a62:	e02e      	b.n	8001ac2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d103      	bne.n	8001a86 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a92:	1f1a      	subs	r2, r3, #4
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e010      	b.n	8001ae4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db02      	blt.n	8001ad2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d99c      	bls.n	8001a0c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b00:	3314      	adds	r3, #20
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b08:	2b40      	cmp	r3, #64	; 0x40
 8001b0a:	d112      	bne.n	8001b32 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f003 fdd5 	bl	80056bc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1a:	3314      	adds	r3, #20
 8001b1c:	2240      	movs	r2, #64	; 0x40
 8001b1e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b30:	e01b      	b.n	8001b6a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3a:	3314      	adds	r3, #20
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d111      	bne.n	8001b6a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f839 	bl	8001bbe <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b54:	3314      	adds	r3, #20
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b72:	3314      	adds	r3, #20
 8001b74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b78:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	3314      	adds	r3, #20
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8e:	d112      	bne.n	8001bb6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f81e 	bl	8001bd2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9e:	3314      	adds	r3, #20
 8001ba0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ba4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b82      	cmp	r3, #130	; 0x82
 8001c06:	d101      	bne.n	8001c0c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e050      	b.n	8001cae <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2282      	movs	r2, #130	; 0x82
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f003 031c 	and.w	r3, r3, #28
 8001c22:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8a1b      	ldrh	r3, [r3, #16]
 8001c28:	02db      	lsls	r3, r3, #11
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c32:	897b      	ldrh	r3, [r7, #10]
 8001c34:	019b      	lsls	r3, r3, #6
 8001c36:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f023 0302 	bic.w	r3, r3, #2
 8001c46:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c58:	f7ff fa32 	bl	80010c0 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c5e:	e015      	b.n	8001c8c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c60:	f7ff fa2e 	bl	80010c0 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d309      	bcc.n	8001c84 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e014      	b.n	8001cae <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1e4      	bne.n	8001c60 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b42      	cmp	r3, #66	; 0x42
 8001cd6:	d101      	bne.n	8001cdc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e04e      	b.n	8001d7a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2242      	movs	r2, #66	; 0x42
 8001ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 031c 	and.w	r3, r3, #28
 8001cf2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8a1b      	ldrh	r3, [r3, #16]
 8001cf8:	02db      	lsls	r3, r3, #11
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d02:	897b      	ldrh	r3, [r7, #10]
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d32:	f7ff f9c5 	bl	80010c0 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d38:	e015      	b.n	8001d66 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d3a:	f7ff f9c1 	bl	80010c0 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d309      	bcc.n	8001d5e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e00d      	b.n	8001d7a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e4      	bne.n	8001d3a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_ETH_Start+0x16>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e01f      	b.n	8001dd8 <HAL_ETH_Start+0x56>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fb45 	bl	8002438 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fb7c 	bl	80024ac <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fc13 	bl	80025e0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fbb0 	bl	8002520 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fbdd 	bl	8002580 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_ETH_Stop+0x16>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e01f      	b.n	8001e36 <HAL_ETH_Stop+0x56>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fba2 	bl	8002550 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fbcf 	bl	80025b0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fb67 	bl	80024e6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fbe1 	bl	80025e0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fb27 	bl	8002472 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_ETH_ConfigMAC+0x1c>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e0e4      	b.n	8002026 <HAL_ETH_ConfigMAC+0x1e6>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80b1 	beq.w	8001fd6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4b6c      	ldr	r3, [pc, #432]	; (8002030 <HAL_ETH_ConfigMAC+0x1f0>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001e8c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001e92:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001e98:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001e9e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ea4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001eaa:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001eb0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001eb6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001ebc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001ec2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001ec8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001ece:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7ff f8f6 	bl	80010d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001efc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001f02:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001f08:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001f0e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f14:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f1a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f26:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f28:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f32:	2001      	movs	r0, #1
 8001f34:	f7ff f8d0 	bl	80010d8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f48:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f52:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f62:	4013      	ands	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001f70:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001f76:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001f7c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001f82:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001f88:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7ff f899 	bl	80010d8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f7ff f886 	bl	80010d8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	61da      	str	r2, [r3, #28]
 8001fd4:	e01e      	b.n	8002014 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001fe4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002006:	2001      	movs	r0, #1
 8002008:	f7ff f866 	bl	80010d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	ff20810f 	.word	0xff20810f

08002034 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0b0      	sub	sp, #192	; 0xc0
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002050:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002058:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002062:	2300      	movs	r3, #0
 8002064:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800207a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800207e:	663b      	str	r3, [r7, #96]	; 0x60
 8002080:	e001      	b.n	8002086 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002090:	2300      	movs	r3, #0
 8002092:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80020a0:	2340      	movs	r3, #64	; 0x40
 80020a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002108:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800210c:	4bac      	ldr	r3, [pc, #688]	; (80023c0 <ETH_MACDMAConfig+0x38c>)
 800210e:	4013      	ands	r3, r2
 8002110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002114:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002118:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800211a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800211c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002120:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002126:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800212a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800212c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800212e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002134:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002138:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800213a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800213c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800213e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002140:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002144:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002148:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800214a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800215c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002168:	2001      	movs	r0, #1
 800216a:	f7fe ffb5 	bl	80010d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002176:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002178:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800217a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800217c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800217e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002180:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002182:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002186:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800218c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800218e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002192:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002194:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002198:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800219c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80021a4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021a6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7fe ff90 	bl	80010d8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021ca:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021d4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021e8:	4013      	ands	r3, r2
 80021ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80021ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021f2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80021f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80021f8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80021fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80021fe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002204:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800220a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800220c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002210:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002212:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002224:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002230:	2001      	movs	r0, #1
 8002232:	f7fe ff51 	bl	80010d8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800223e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002240:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002244:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800225a:	2001      	movs	r0, #1
 800225c:	f7fe ff3c 	bl	80010d8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002268:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800226e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002272:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002278:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800227c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800228e:	2304      	movs	r3, #4
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800229e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022be:	3318      	adds	r3, #24
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <ETH_MACDMAConfig+0x390>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022d2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80022d4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022d6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80022d8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80022da:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80022dc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80022de:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80022e0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80022e2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80022e4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80022e6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80022e8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80022ea:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80022ee:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80022f2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002306:	3318      	adds	r3, #24
 8002308:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800230c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	3318      	adds	r3, #24
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800231e:	2001      	movs	r0, #1
 8002320:	f7fe feda 	bl	80010d8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232c:	3318      	adds	r3, #24
 800232e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002332:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002338:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800233a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800233c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002340:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002344:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002348:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800234a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800234c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800234e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800236c:	2001      	movs	r0, #1
 800236e:	f7fe feb3 	bl	80010d8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800237e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d10f      	bne.n	80023a8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002390:	331c      	adds	r3, #28
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800239c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a4:	331c      	adds	r3, #28
 80023a6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	461a      	mov	r2, r3
 80023ae:	2100      	movs	r1, #0
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f809 	bl	80023c8 <ETH_MACAddressConfig>
}
 80023b6:	bf00      	nop
 80023b8:	37c0      	adds	r7, #192	; 0xc0
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	ff20810f 	.word	0xff20810f
 80023c4:	f8de3f23 	.word	0xf8de3f23

080023c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3305      	adds	r3, #5
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	3204      	adds	r2, #4
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <ETH_MACAddressConfig+0x68>)
 80023ea:	4413      	add	r3, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3303      	adds	r3, #3
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	061a      	lsls	r2, r3, #24
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3302      	adds	r3, #2
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3301      	adds	r3, #1
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	4313      	orrs	r3, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <ETH_MACAddressConfig+0x6c>)
 800241a:	4413      	add	r3, r2
 800241c:	461a      	mov	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	6013      	str	r3, [r2, #0]
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40028040 	.word	0x40028040
 8002434:	40028044 	.word	0x40028044

08002438 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0208 	orr.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800245c:	2001      	movs	r0, #1
 800245e:	f000 f8e9 	bl	8002634 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	601a      	str	r2, [r3, #0]
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0208 	bic.w	r2, r2, #8
 800248c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002496:	2001      	movs	r0, #1
 8002498:	f000 f8cc 	bl	8002634 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0204 	orr.w	r2, r2, #4
 80024c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f000 f8af 	bl	8002634 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	601a      	str	r2, [r3, #0]
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0204 	bic.w	r2, r2, #4
 8002500:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800250a:	2001      	movs	r0, #1
 800250c:	f000 f892 	bl	8002634 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002530:	3318      	adds	r3, #24
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800253c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002540:	3318      	adds	r3, #24
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002560:	3318      	adds	r3, #24
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800256c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002570:	3318      	adds	r3, #24
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002590:	3318      	adds	r3, #24
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0202 	orr.w	r2, r2, #2
 800259c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a0:	3318      	adds	r3, #24
 80025a2:	601a      	str	r2, [r3, #0]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c0:	3318      	adds	r3, #24
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0202 	bic.w	r2, r2, #2
 80025cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d0:	3318      	adds	r3, #24
 80025d2:	601a      	str	r2, [r3, #0]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f4:	3318      	adds	r3, #24
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002604:	3318      	adds	r3, #24
 8002606:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002610:	3318      	adds	r3, #24
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002616:	2001      	movs	r0, #1
 8002618:	f000 f80c 	bl	8002634 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002626:	3318      	adds	r3, #24
 8002628:	601a      	str	r2, [r3, #0]
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <ETH_Delay+0x34>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0a      	ldr	r2, [pc, #40]	; (800266c <ETH_Delay+0x38>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0a5b      	lsrs	r3, r3, #9
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002650:	bf00      	nop
  } 
  while (Delay --);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1e5a      	subs	r2, r3, #1
 8002656:	60fa      	str	r2, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f9      	bne.n	8002650 <ETH_Delay+0x1c>
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	20000000 	.word	0x20000000
 800266c:	10624dd3 	.word	0x10624dd3

08002670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	e177      	b.n	800297c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800268c:	2201      	movs	r2, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	f040 8166 	bne.w	8002976 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d00b      	beq.n	80026ca <HAL_GPIO_Init+0x5a>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026be:	2b11      	cmp	r3, #17
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b12      	cmp	r3, #18
 80026c8:	d130      	bne.n	800272c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2203      	movs	r2, #3
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 0201 	and.w	r2, r3, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0xfc>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b12      	cmp	r3, #18
 800276a:	d123      	bne.n	80027b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	08da      	lsrs	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3208      	adds	r2, #8
 8002774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	220f      	movs	r2, #15
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	08da      	lsrs	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3208      	adds	r2, #8
 80027ae:	69b9      	ldr	r1, [r7, #24]
 80027b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0203 	and.w	r2, r3, #3
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80c0 	beq.w	8002976 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b65      	ldr	r3, [pc, #404]	; (8002990 <HAL_GPIO_Init+0x320>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a64      	ldr	r2, [pc, #400]	; (8002990 <HAL_GPIO_Init+0x320>)
 8002800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b62      	ldr	r3, [pc, #392]	; (8002990 <HAL_GPIO_Init+0x320>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002812:	4a60      	ldr	r2, [pc, #384]	; (8002994 <HAL_GPIO_Init+0x324>)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	3302      	adds	r3, #2
 800281a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	220f      	movs	r2, #15
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a57      	ldr	r2, [pc, #348]	; (8002998 <HAL_GPIO_Init+0x328>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d037      	beq.n	80028ae <HAL_GPIO_Init+0x23e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a56      	ldr	r2, [pc, #344]	; (800299c <HAL_GPIO_Init+0x32c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d031      	beq.n	80028aa <HAL_GPIO_Init+0x23a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a55      	ldr	r2, [pc, #340]	; (80029a0 <HAL_GPIO_Init+0x330>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d02b      	beq.n	80028a6 <HAL_GPIO_Init+0x236>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a54      	ldr	r2, [pc, #336]	; (80029a4 <HAL_GPIO_Init+0x334>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d025      	beq.n	80028a2 <HAL_GPIO_Init+0x232>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a53      	ldr	r2, [pc, #332]	; (80029a8 <HAL_GPIO_Init+0x338>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01f      	beq.n	800289e <HAL_GPIO_Init+0x22e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_GPIO_Init+0x33c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d019      	beq.n	800289a <HAL_GPIO_Init+0x22a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a51      	ldr	r2, [pc, #324]	; (80029b0 <HAL_GPIO_Init+0x340>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_GPIO_Init+0x226>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a50      	ldr	r2, [pc, #320]	; (80029b4 <HAL_GPIO_Init+0x344>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00d      	beq.n	8002892 <HAL_GPIO_Init+0x222>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4f      	ldr	r2, [pc, #316]	; (80029b8 <HAL_GPIO_Init+0x348>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d007      	beq.n	800288e <HAL_GPIO_Init+0x21e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4e      	ldr	r2, [pc, #312]	; (80029bc <HAL_GPIO_Init+0x34c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_GPIO_Init+0x21a>
 8002886:	2309      	movs	r3, #9
 8002888:	e012      	b.n	80028b0 <HAL_GPIO_Init+0x240>
 800288a:	230a      	movs	r3, #10
 800288c:	e010      	b.n	80028b0 <HAL_GPIO_Init+0x240>
 800288e:	2308      	movs	r3, #8
 8002890:	e00e      	b.n	80028b0 <HAL_GPIO_Init+0x240>
 8002892:	2307      	movs	r3, #7
 8002894:	e00c      	b.n	80028b0 <HAL_GPIO_Init+0x240>
 8002896:	2306      	movs	r3, #6
 8002898:	e00a      	b.n	80028b0 <HAL_GPIO_Init+0x240>
 800289a:	2305      	movs	r3, #5
 800289c:	e008      	b.n	80028b0 <HAL_GPIO_Init+0x240>
 800289e:	2304      	movs	r3, #4
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x240>
 80028a2:	2303      	movs	r3, #3
 80028a4:	e004      	b.n	80028b0 <HAL_GPIO_Init+0x240>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e002      	b.n	80028b0 <HAL_GPIO_Init+0x240>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_GPIO_Init+0x240>
 80028ae:	2300      	movs	r3, #0
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	f002 0203 	and.w	r2, r2, #3
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	4093      	lsls	r3, r2
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c0:	4934      	ldr	r1, [pc, #208]	; (8002994 <HAL_GPIO_Init+0x324>)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	3302      	adds	r3, #2
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ce:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <HAL_GPIO_Init+0x350>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f2:	4a33      	ldr	r2, [pc, #204]	; (80029c0 <HAL_GPIO_Init+0x350>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028f8:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <HAL_GPIO_Init+0x350>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800291c:	4a28      	ldr	r2, [pc, #160]	; (80029c0 <HAL_GPIO_Init+0x350>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002922:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_GPIO_Init+0x350>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002946:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <HAL_GPIO_Init+0x350>)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_GPIO_Init+0x350>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002970:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <HAL_GPIO_Init+0x350>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3301      	adds	r3, #1
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b0f      	cmp	r3, #15
 8002980:	f67f ae84 	bls.w	800268c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002984:	bf00      	nop
 8002986:	3724      	adds	r7, #36	; 0x24
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40023800 	.word	0x40023800
 8002994:	40013800 	.word	0x40013800
 8002998:	40020000 	.word	0x40020000
 800299c:	40020400 	.word	0x40020400
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40021400 	.word	0x40021400
 80029b0:	40021800 	.word	0x40021800
 80029b4:	40021c00 	.word	0x40021c00
 80029b8:	40022000 	.word	0x40022000
 80029bc:	40022400 	.word	0x40022400
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e0:	e003      	b.n	80029ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	041a      	lsls	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	619a      	str	r2, [r3, #24]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f806 	bl	8002a28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a40:	b08f      	sub	sp, #60	; 0x3c
 8002a42:	af0a      	add	r7, sp, #40	; 0x28
 8002a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e10f      	b.n	8002c70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe f904 	bl	8000c78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fa79 	bl	8004f86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	687e      	ldr	r6, [r7, #4]
 8002a9c:	466d      	mov	r5, sp
 8002a9e:	f106 0410 	add.w	r4, r6, #16
 8002aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ab2:	1d33      	adds	r3, r6, #4
 8002ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab6:	6838      	ldr	r0, [r7, #0]
 8002ab8:	f002 fa04 	bl	8004ec4 <USB_CoreInit>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0d0      	b.n	8002c70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fa67 	bl	8004fa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e04a      	b.n	8002b76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	333d      	adds	r3, #61	; 0x3d
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	333c      	adds	r3, #60	; 0x3c
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	b298      	uxth	r0, r3
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3342      	adds	r3, #66	; 0x42
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	333f      	adds	r3, #63	; 0x3f
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	3344      	adds	r3, #68	; 0x44
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	3348      	adds	r3, #72	; 0x48
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3350      	adds	r3, #80	; 0x50
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	3301      	adds	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3af      	bcc.n	8002ae0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e044      	b.n	8002c10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d3b5      	bcc.n	8002b86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	687e      	ldr	r6, [r7, #4]
 8002c22:	466d      	mov	r5, sp
 8002c24:	f106 0410 	add.w	r4, r6, #16
 8002c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c34:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c38:	1d33      	adds	r3, r6, #4
 8002c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3c:	6838      	ldr	r0, [r7, #0]
 8002c3e:	f002 f9dd 	bl	8004ffc <USB_DevInit>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e00d      	b.n	8002c70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 fb8c 	bl	8005386 <USB_DevDisconnect>

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e25b      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d075      	beq.n	8002d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c96:	4ba3      	ldr	r3, [pc, #652]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d00c      	beq.n	8002cbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca2:	4ba0      	ldr	r3, [pc, #640]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d112      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cae:	4b9d      	ldr	r3, [pc, #628]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cba:	d10b      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	4b99      	ldr	r3, [pc, #612]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d05b      	beq.n	8002d80 <HAL_RCC_OscConfig+0x108>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d157      	bne.n	8002d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e236      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cdc:	d106      	bne.n	8002cec <HAL_RCC_OscConfig+0x74>
 8002cde:	4b91      	ldr	r3, [pc, #580]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a90      	ldr	r2, [pc, #576]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e01d      	b.n	8002d28 <HAL_RCC_OscConfig+0xb0>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x98>
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a8a      	ldr	r2, [pc, #552]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b88      	ldr	r3, [pc, #544]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a87      	ldr	r2, [pc, #540]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0xb0>
 8002d10:	4b84      	ldr	r3, [pc, #528]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a83      	ldr	r2, [pc, #524]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4b81      	ldr	r3, [pc, #516]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a80      	ldr	r2, [pc, #512]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe f9c6 	bl	80010c0 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d38:	f7fe f9c2 	bl	80010c0 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1fb      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0xc0>
 8002d56:	e014      	b.n	8002d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe f9b2 	bl	80010c0 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe f9ae 	bl	80010c0 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1e7      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0xe8>
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d063      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8e:	4b65      	ldr	r3, [pc, #404]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9a:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d11c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da6:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d116      	bne.n	8002de0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	4b5c      	ldr	r3, [pc, #368]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x152>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1bb      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dca:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4952      	ldr	r1, [pc, #328]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	e03a      	b.n	8002e56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de8:	4b4f      	ldr	r3, [pc, #316]	; (8002f28 <HAL_RCC_OscConfig+0x2b0>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fe f967 	bl	80010c0 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fe f963 	bl	80010c0 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e19c      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4940      	ldr	r1, [pc, #256]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCC_OscConfig+0x2b0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe f946 	bl	80010c0 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e38:	f7fe f942 	bl	80010c0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e17b      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d030      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HAL_RCC_OscConfig+0x2b4>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe f926 	bl	80010c0 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fe f922 	bl	80010c0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e15b      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x200>
 8002e96:	e015      	b.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_RCC_OscConfig+0x2b4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9e:	f7fe f90f 	bl	80010c0 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea6:	f7fe f90b 	bl	80010c0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e144      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a0 	beq.w	8003012 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x2b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d121      	bne.n	8002f52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <HAL_RCC_OscConfig+0x2b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <HAL_RCC_OscConfig+0x2b8>)
 8002f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe f8d1 	bl	80010c0 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f20:	e011      	b.n	8002f46 <HAL_RCC_OscConfig+0x2ce>
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	42470000 	.word	0x42470000
 8002f2c:	42470e80 	.word	0x42470e80
 8002f30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f34:	f7fe f8c4 	bl	80010c0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0fd      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b81      	ldr	r3, [pc, #516]	; (800314c <HAL_RCC_OscConfig+0x4d4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d106      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2f0>
 8002f5a:	4b7d      	ldr	r3, [pc, #500]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a7c      	ldr	r2, [pc, #496]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
 8002f66:	e01c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x32a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b05      	cmp	r3, #5
 8002f6e:	d10c      	bne.n	8002f8a <HAL_RCC_OscConfig+0x312>
 8002f70:	4b77      	ldr	r3, [pc, #476]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a76      	ldr	r2, [pc, #472]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f76:	f043 0304 	orr.w	r3, r3, #4
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7c:	4b74      	ldr	r3, [pc, #464]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a73      	ldr	r2, [pc, #460]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	e00b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x32a>
 8002f8a:	4b71      	ldr	r3, [pc, #452]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a70      	ldr	r2, [pc, #448]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a6d      	ldr	r2, [pc, #436]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f9c:	f023 0304 	bic.w	r3, r3, #4
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d015      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fe f889 	bl	80010c0 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe f885 	bl	80010c0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0bc      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ee      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x33a>
 8002fd4:	e014      	b.n	8003000 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe f873 	bl	80010c0 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fe f86f 	bl	80010c0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0a6      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff4:	4b56      	ldr	r3, [pc, #344]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ee      	bne.n	8002fde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d105      	bne.n	8003012 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003006:	4b52      	ldr	r3, [pc, #328]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a51      	ldr	r2, [pc, #324]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 800300c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8092 	beq.w	8003140 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800301c:	4b4c      	ldr	r3, [pc, #304]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b08      	cmp	r3, #8
 8003026:	d05c      	beq.n	80030e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d141      	bne.n	80030b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b48      	ldr	r3, [pc, #288]	; (8003154 <HAL_RCC_OscConfig+0x4dc>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe f843 	bl	80010c0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe f83f 	bl	80010c0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e078      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	019b      	lsls	r3, r3, #6
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	061b      	lsls	r3, r3, #24
 8003080:	4933      	ldr	r1, [pc, #204]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003086:	4b33      	ldr	r3, [pc, #204]	; (8003154 <HAL_RCC_OscConfig+0x4dc>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe f818 	bl	80010c0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003094:	f7fe f814 	bl	80010c0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e04d      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x41c>
 80030b2:	e045      	b.n	8003140 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_RCC_OscConfig+0x4dc>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7fe f801 	bl	80010c0 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fd fffd 	bl	80010c0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e036      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d4:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f0      	bne.n	80030c2 <HAL_RCC_OscConfig+0x44a>
 80030e0:	e02e      	b.n	8003140 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e029      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d11c      	bne.n	800313c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d115      	bne.n	800313c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003116:	4013      	ands	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800311c:	4293      	cmp	r3, r2
 800311e:	d10d      	bne.n	800313c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d106      	bne.n	800313c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40007000 	.word	0x40007000
 8003150:	40023800 	.word	0x40023800
 8003154:	42470060 	.word	0x42470060

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0cc      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b68      	ldr	r3, [pc, #416]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d90c      	bls.n	8003194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b8      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a58      	ldr	r2, [pc, #352]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	494d      	ldr	r1, [pc, #308]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d044      	beq.n	8003278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d119      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d003      	beq.n	8003216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003212:	2b03      	cmp	r3, #3
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b3f      	ldr	r3, [pc, #252]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e06f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e067      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003236:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4934      	ldr	r1, [pc, #208]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003248:	f7fd ff3a 	bl	80010c0 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	e00a      	b.n	8003266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fd ff36 	bl	80010c0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e04f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 020c 	and.w	r2, r3, #12
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	429a      	cmp	r2, r3
 8003276:	d1eb      	bne.n	8003250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d20c      	bcs.n	80032a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e032      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4916      	ldr	r1, [pc, #88]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	490e      	ldr	r1, [pc, #56]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032de:	f000 f889 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80032e2:	4601      	mov	r1, r0
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	5cd3      	ldrb	r3, [r2, r3]
 80032f2:	fa21 f303 	lsr.w	r3, r1, r3
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fd14 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00
 8003314:	40023800 	.word	0x40023800
 8003318:	0801e0d8 	.word	0x0801e0d8
 800331c:	20000000 	.word	0x20000000
 8003320:	20000004 	.word	0x20000004

08003324 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08c      	sub	sp, #48	; 0x30
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d129      	bne.n	800338a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_RCC_MCOConfig+0xc4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <HAL_RCC_MCOConfig+0xc4>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <HAL_RCC_MCOConfig+0xc4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335c:	2303      	movs	r3, #3
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003368:	f107 031c 	add.w	r3, r7, #28
 800336c:	4619      	mov	r1, r3
 800336e:	481f      	ldr	r0, [pc, #124]	; (80033ec <HAL_RCC_MCOConfig+0xc8>)
 8003370:	f7ff f97e 	bl	8002670 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003374:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <HAL_RCC_MCOConfig+0xc4>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	430b      	orrs	r3, r1
 8003382:	4919      	ldr	r1, [pc, #100]	; (80033e8 <HAL_RCC_MCOConfig+0xc4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003388:	e029      	b.n	80033de <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <HAL_RCC_MCOConfig+0xc4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a15      	ldr	r2, [pc, #84]	; (80033e8 <HAL_RCC_MCOConfig+0xc4>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <HAL_RCC_MCOConfig+0xc4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80033a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b0:	2303      	movs	r3, #3
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80033bc:	f107 031c 	add.w	r3, r7, #28
 80033c0:	4619      	mov	r1, r3
 80033c2:	480b      	ldr	r0, [pc, #44]	; (80033f0 <HAL_RCC_MCOConfig+0xcc>)
 80033c4:	f7ff f954 	bl	8002670 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <HAL_RCC_MCOConfig+0xc4>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	00d9      	lsls	r1, r3, #3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	430b      	orrs	r3, r1
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCC_MCOConfig+0xc4>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
}
 80033de:	bf00      	nop
 80033e0:	3730      	adds	r7, #48	; 0x30
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40020000 	.word	0x40020000
 80033f0:	40020800 	.word	0x40020800

080033f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	2300      	movs	r3, #0
 8003404:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800340a:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b04      	cmp	r3, #4
 8003414:	d007      	beq.n	8003426 <HAL_RCC_GetSysClockFreq+0x32>
 8003416:	2b08      	cmp	r3, #8
 8003418:	d008      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x38>
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 80b4 	bne.w	8003588 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b5e      	ldr	r3, [pc, #376]	; (800359c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003422:	60bb      	str	r3, [r7, #8]
       break;
 8003424:	e0b3      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003426:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003428:	60bb      	str	r3, [r7, #8]
      break;
 800342a:	e0b0      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800342c:	4b5a      	ldr	r3, [pc, #360]	; (8003598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003434:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003436:	4b58      	ldr	r3, [pc, #352]	; (8003598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d04a      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003442:	4b55      	ldr	r3, [pc, #340]	; (8003598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	f04f 0400 	mov.w	r4, #0
 800344c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	ea03 0501 	and.w	r5, r3, r1
 8003458:	ea04 0602 	and.w	r6, r4, r2
 800345c:	4629      	mov	r1, r5
 800345e:	4632      	mov	r2, r6
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	f04f 0400 	mov.w	r4, #0
 8003468:	0154      	lsls	r4, r2, #5
 800346a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800346e:	014b      	lsls	r3, r1, #5
 8003470:	4619      	mov	r1, r3
 8003472:	4622      	mov	r2, r4
 8003474:	1b49      	subs	r1, r1, r5
 8003476:	eb62 0206 	sbc.w	r2, r2, r6
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	f04f 0400 	mov.w	r4, #0
 8003482:	0194      	lsls	r4, r2, #6
 8003484:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003488:	018b      	lsls	r3, r1, #6
 800348a:	1a5b      	subs	r3, r3, r1
 800348c:	eb64 0402 	sbc.w	r4, r4, r2
 8003490:	f04f 0100 	mov.w	r1, #0
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	00e2      	lsls	r2, r4, #3
 800349a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800349e:	00d9      	lsls	r1, r3, #3
 80034a0:	460b      	mov	r3, r1
 80034a2:	4614      	mov	r4, r2
 80034a4:	195b      	adds	r3, r3, r5
 80034a6:	eb44 0406 	adc.w	r4, r4, r6
 80034aa:	f04f 0100 	mov.w	r1, #0
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	0262      	lsls	r2, r4, #9
 80034b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034b8:	0259      	lsls	r1, r3, #9
 80034ba:	460b      	mov	r3, r1
 80034bc:	4614      	mov	r4, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	4621      	mov	r1, r4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f04f 0400 	mov.w	r4, #0
 80034c8:	461a      	mov	r2, r3
 80034ca:	4623      	mov	r3, r4
 80034cc:	f7fc fee0 	bl	8000290 <__aeabi_uldivmod>
 80034d0:	4603      	mov	r3, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e049      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d8:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	099b      	lsrs	r3, r3, #6
 80034de:	f04f 0400 	mov.w	r4, #0
 80034e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	ea03 0501 	and.w	r5, r3, r1
 80034ee:	ea04 0602 	and.w	r6, r4, r2
 80034f2:	4629      	mov	r1, r5
 80034f4:	4632      	mov	r2, r6
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	f04f 0400 	mov.w	r4, #0
 80034fe:	0154      	lsls	r4, r2, #5
 8003500:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003504:	014b      	lsls	r3, r1, #5
 8003506:	4619      	mov	r1, r3
 8003508:	4622      	mov	r2, r4
 800350a:	1b49      	subs	r1, r1, r5
 800350c:	eb62 0206 	sbc.w	r2, r2, r6
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	f04f 0400 	mov.w	r4, #0
 8003518:	0194      	lsls	r4, r2, #6
 800351a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800351e:	018b      	lsls	r3, r1, #6
 8003520:	1a5b      	subs	r3, r3, r1
 8003522:	eb64 0402 	sbc.w	r4, r4, r2
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	00e2      	lsls	r2, r4, #3
 8003530:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003534:	00d9      	lsls	r1, r3, #3
 8003536:	460b      	mov	r3, r1
 8003538:	4614      	mov	r4, r2
 800353a:	195b      	adds	r3, r3, r5
 800353c:	eb44 0406 	adc.w	r4, r4, r6
 8003540:	f04f 0100 	mov.w	r1, #0
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	02a2      	lsls	r2, r4, #10
 800354a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800354e:	0299      	lsls	r1, r3, #10
 8003550:	460b      	mov	r3, r1
 8003552:	4614      	mov	r4, r2
 8003554:	4618      	mov	r0, r3
 8003556:	4621      	mov	r1, r4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f04f 0400 	mov.w	r4, #0
 800355e:	461a      	mov	r2, r3
 8003560:	4623      	mov	r3, r4
 8003562:	f7fc fe95 	bl	8000290 <__aeabi_uldivmod>
 8003566:	4603      	mov	r3, r0
 8003568:	460c      	mov	r4, r1
 800356a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	3301      	adds	r3, #1
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	60bb      	str	r3, [r7, #8]
      break;
 8003586:	e002      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800358a:	60bb      	str	r3, [r7, #8]
      break;
 800358c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358e:	68bb      	ldr	r3, [r7, #8]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	007a1200 	.word	0x007a1200

080035a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20000000 	.word	0x20000000

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035c0:	f7ff fff0 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035c4:	4601      	mov	r1, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0a9b      	lsrs	r3, r3, #10
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4a03      	ldr	r2, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	0801e0e8 	.word	0x0801e0e8

080035e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035e8:	f7ff ffdc 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035ec:	4601      	mov	r1, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0b5b      	lsrs	r3, r3, #13
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4a03      	ldr	r2, [pc, #12]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	0801e0e8 	.word	0x0801e0e8

0800360c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	220f      	movs	r2, #15
 800361a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_RCC_GetClockConfig+0x5c>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0203 	and.w	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <HAL_RCC_GetClockConfig+0x5c>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCC_GetClockConfig+0x5c>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCC_GetClockConfig+0x5c>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	08db      	lsrs	r3, r3, #3
 8003646:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <HAL_RCC_GetClockConfig+0x60>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 020f 	and.w	r2, r3, #15
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800
 800366c:	40023c00 	.word	0x40023c00

08003670 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e056      	b.n	8003730 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fd fa33 	bl	8000b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	ea42 0103 	orr.w	r1, r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	f003 0104 	and.w	r1, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800371e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003754:	d112      	bne.n	800377c <HAL_SPI_Receive+0x44>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10e      	bne.n	800377c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2204      	movs	r2, #4
 8003762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f8e9 	bl	800394a <HAL_SPI_TransmitReceive>
 8003778:	4603      	mov	r3, r0
 800377a:	e0e2      	b.n	8003942 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_SPI_Receive+0x52>
 8003786:	2302      	movs	r3, #2
 8003788:	e0db      	b.n	8003942 <HAL_SPI_Receive+0x20a>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003792:	f7fd fc95 	bl	80010c0 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d002      	beq.n	80037aa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037a4:	2302      	movs	r3, #2
 80037a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037a8:	e0c2      	b.n	8003930 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_SPI_Receive+0x7e>
 80037b0:	88fb      	ldrh	r3, [r7, #6]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037ba:	e0b9      	b.n	8003930 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2204      	movs	r2, #4
 80037c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	88fa      	ldrh	r2, [r7, #6]
 80037d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	88fa      	ldrh	r2, [r7, #6]
 80037da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003802:	d107      	bne.n	8003814 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003812:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d007      	beq.n	8003832 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003830:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d162      	bne.n	8003900 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800383a:	e02e      	b.n	800389a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b01      	cmp	r3, #1
 8003848:	d115      	bne.n	8003876 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f103 020c 	add.w	r2, r3, #12
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003874:	e011      	b.n	800389a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003876:	f7fd fc23 	bl	80010c0 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d803      	bhi.n	800388e <HAL_SPI_Receive+0x156>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d102      	bne.n	8003894 <HAL_SPI_Receive+0x15c>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003898:	e04a      	b.n	8003930 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1cb      	bne.n	800383c <HAL_SPI_Receive+0x104>
 80038a4:	e031      	b.n	800390a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d113      	bne.n	80038dc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	b292      	uxth	r2, r2
 80038c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	1c9a      	adds	r2, r3, #2
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038da:	e011      	b.n	8003900 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038dc:	f7fd fbf0 	bl	80010c0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d803      	bhi.n	80038f4 <HAL_SPI_Receive+0x1bc>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d102      	bne.n	80038fa <HAL_SPI_Receive+0x1c2>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d102      	bne.n	8003900 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038fe:	e017      	b.n	8003930 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1cd      	bne.n	80038a6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	6839      	ldr	r1, [r7, #0]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fb46 	bl	8003fa0 <SPI_EndRxTransaction>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	75fb      	strb	r3, [r7, #23]
 800392c:	e000      	b.n	8003930 <HAL_SPI_Receive+0x1f8>
  }

error :
 800392e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b08c      	sub	sp, #48	; 0x30
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003958:	2301      	movs	r3, #1
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x26>
 800396c:	2302      	movs	r3, #2
 800396e:	e18a      	b.n	8003c86 <HAL_SPI_TransmitReceive+0x33c>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003978:	f7fd fba2 	bl	80010c0 <HAL_GetTick>
 800397c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003996:	2b01      	cmp	r3, #1
 8003998:	d00f      	beq.n	80039ba <HAL_SPI_TransmitReceive+0x70>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039a0:	d107      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x68>
 80039aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d003      	beq.n	80039ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
 80039b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039b8:	e15b      	b.n	8003c72 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x82>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x82>
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039d2:	e14e      	b.n	8003c72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d003      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2205      	movs	r2, #5
 80039e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	887a      	ldrh	r2, [r7, #2]
 80039f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	887a      	ldrh	r2, [r7, #2]
 80039fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	887a      	ldrh	r2, [r7, #2]
 8003a0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	887a      	ldrh	r2, [r7, #2]
 8003a10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d007      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a44:	d178      	bne.n	8003b38 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x10a>
 8003a4e:	8b7b      	ldrh	r3, [r7, #26]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d166      	bne.n	8003b22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	881a      	ldrh	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	1c9a      	adds	r2, r3, #2
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a78:	e053      	b.n	8003b22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d11b      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x176>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x176>
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d113      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	881a      	ldrh	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	1c9a      	adds	r2, r3, #2
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d119      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x1b8>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d014      	beq.n	8003b02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	1c9a      	adds	r2, r3, #2
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003afe:	2301      	movs	r3, #1
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b02:	f7fd fadd 	bl	80010c0 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d807      	bhi.n	8003b22 <HAL_SPI_TransmitReceive+0x1d8>
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d003      	beq.n	8003b22 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b20:	e0a7      	b.n	8003c72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1a6      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x130>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1a1      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x130>
 8003b36:	e07c      	b.n	8003c32 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_SPI_TransmitReceive+0x1fc>
 8003b40:	8b7b      	ldrh	r3, [r7, #26]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d16b      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b6c:	e057      	b.n	8003c1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d11c      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x26c>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d017      	beq.n	8003bb6 <HAL_SPI_TransmitReceive+0x26c>
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d114      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d119      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x2ae>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d014      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bf8:	f7fd fa62 	bl	80010c0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d803      	bhi.n	8003c10 <HAL_SPI_TransmitReceive+0x2c6>
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d102      	bne.n	8003c16 <HAL_SPI_TransmitReceive+0x2cc>
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c1c:	e029      	b.n	8003c72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1a2      	bne.n	8003b6e <HAL_SPI_TransmitReceive+0x224>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d19d      	bne.n	8003b6e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fa18 	bl	800406c <SPI_EndRxTxTransaction>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c4e:	e010      	b.n	8003c72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	e000      	b.n	8003c72 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3730      	adds	r7, #48	; 0x30
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	099b      	lsrs	r3, r3, #6
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10f      	bne.n	8003cd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
    return;
 8003cd2:	e0d8      	b.n	8003e86 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_SPI_IRQHandler+0x66>
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	09db      	lsrs	r3, r3, #7
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
    return;
 8003cf4:	e0c7      	b.n	8003e86 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10c      	bne.n	8003d1c <HAL_SPI_IRQHandler+0x8c>
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80b5 	beq.w	8003e86 <HAL_SPI_IRQHandler+0x1f6>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80ae 	beq.w	8003e86 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d023      	beq.n	8003d7e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d011      	beq.n	8003d66 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f043 0204 	orr.w	r2, r3, #4
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	e00b      	b.n	8003d7e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	693b      	ldr	r3, [r7, #16]
        return;
 8003d7c:	e083      	b.n	8003e86 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d014      	beq.n	8003db4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	f043 0201 	orr.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00c      	beq.n	8003dda <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	f043 0208 	orr.w	r2, r3, #8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d050      	beq.n	8003e84 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003df0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <HAL_SPI_IRQHandler+0x17e>
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d034      	beq.n	8003e78 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0203 	bic.w	r2, r2, #3
 8003e1c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d011      	beq.n	8003e4a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <HAL_SPI_IRQHandler+0x1fc>)
 8003e2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd fa54 	bl	80012e0 <HAL_DMA_Abort_IT>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e56:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <HAL_SPI_IRQHandler+0x1fc>)
 8003e58:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd fa3e 	bl	80012e0 <HAL_DMA_Abort_IT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e76:	e003      	b.n	8003e80 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f809 	bl	8003e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e7e:	e000      	b.n	8003e82 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e80:	bf00      	nop
    return;
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
  }
}
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	08003ea5 	.word	0x08003ea5

08003e90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff ffe6 	bl	8003e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003edc:	e04c      	b.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d048      	beq.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003ee6:	f7fd f8eb 	bl	80010c0 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d902      	bls.n	8003efc <SPI_WaitFlagStateUntilTimeout+0x30>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d13d      	bne.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f14:	d111      	bne.n	8003f3a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1e:	d004      	beq.n	8003f2a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f28:	d107      	bne.n	8003f3a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f42:	d10f      	bne.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e00f      	b.n	8003f98 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4013      	ands	r3, r2
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d1a3      	bne.n	8003ede <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb4:	d111      	bne.n	8003fda <SPI_EndRxTransaction+0x3a>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fbe:	d004      	beq.n	8003fca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc8:	d107      	bne.n	8003fda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe2:	d12a      	bne.n	800403a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fec:	d012      	beq.n	8004014 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff ff67 	bl	8003ecc <SPI_WaitFlagStateUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d02d      	beq.n	8004060 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e026      	b.n	8004062 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2200      	movs	r2, #0
 800401c:	2101      	movs	r1, #1
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff ff54 	bl	8003ecc <SPI_WaitFlagStateUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01a      	beq.n	8004060 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e013      	b.n	8004062 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2200      	movs	r2, #0
 8004042:	2101      	movs	r1, #1
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff ff41 	bl	8003ecc <SPI_WaitFlagStateUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e000      	b.n	8004062 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004078:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <SPI_EndRxTxTransaction+0x7c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <SPI_EndRxTxTransaction+0x80>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	0d5b      	lsrs	r3, r3, #21
 8004084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004088:	fb02 f303 	mul.w	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004096:	d112      	bne.n	80040be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2200      	movs	r2, #0
 80040a0:	2180      	movs	r1, #128	; 0x80
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f7ff ff12 	bl	8003ecc <SPI_WaitFlagStateUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	f043 0220 	orr.w	r2, r3, #32
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e00f      	b.n	80040de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b80      	cmp	r3, #128	; 0x80
 80040d6:	d0f2      	beq.n	80040be <SPI_EndRxTxTransaction+0x52>
 80040d8:	e000      	b.n	80040dc <SPI_EndRxTxTransaction+0x70>
        break;
 80040da:	bf00      	nop
  }

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000000 	.word	0x20000000
 80040ec:	165e9f81 	.word	0x165e9f81

080040f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e01d      	b.n	800413e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f815 	bl	8004146 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f000 f968 	bl	8004404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b06      	cmp	r3, #6
 8004182:	d007      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d122      	bne.n	80041fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d11b      	bne.n	80041fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f06f 0202 	mvn.w	r2, #2
 80041ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f8ee 	bl	80043c6 <HAL_TIM_IC_CaptureCallback>
 80041ea:	e005      	b.n	80041f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f8e0 	bl	80043b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f8f1 	bl	80043da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d122      	bne.n	8004252 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d11b      	bne.n	8004252 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f06f 0204 	mvn.w	r2, #4
 8004222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8c4 	bl	80043c6 <HAL_TIM_IC_CaptureCallback>
 800423e:	e005      	b.n	800424c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8b6 	bl	80043b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8c7 	bl	80043da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b08      	cmp	r3, #8
 800425e:	d122      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b08      	cmp	r3, #8
 800426c:	d11b      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f06f 0208 	mvn.w	r2, #8
 8004276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2204      	movs	r2, #4
 800427c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f89a 	bl	80043c6 <HAL_TIM_IC_CaptureCallback>
 8004292:	e005      	b.n	80042a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f88c 	bl	80043b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f89d 	bl	80043da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d122      	bne.n	80042fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d11b      	bne.n	80042fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f06f 0210 	mvn.w	r2, #16
 80042ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2208      	movs	r2, #8
 80042d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f870 	bl	80043c6 <HAL_TIM_IC_CaptureCallback>
 80042e6:	e005      	b.n	80042f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f862 	bl	80043b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f873 	bl	80043da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d10e      	bne.n	8004326 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d107      	bne.n	8004326 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f06f 0201 	mvn.w	r2, #1
 800431e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fc fbaf 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d10e      	bne.n	8004352 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	d107      	bne.n	8004352 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800434a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f903 	bl	8004558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d10e      	bne.n	800437e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436a:	2b40      	cmp	r3, #64	; 0x40
 800436c:	d107      	bne.n	800437e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f838 	bl	80043ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b20      	cmp	r3, #32
 800438a:	d10e      	bne.n	80043aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b20      	cmp	r3, #32
 8004398:	d107      	bne.n	80043aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f06f 0220 	mvn.w	r2, #32
 80043a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8cd 	bl	8004544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a40      	ldr	r2, [pc, #256]	; (8004518 <TIM_Base_SetConfig+0x114>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d013      	beq.n	8004444 <TIM_Base_SetConfig+0x40>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004422:	d00f      	beq.n	8004444 <TIM_Base_SetConfig+0x40>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a3d      	ldr	r2, [pc, #244]	; (800451c <TIM_Base_SetConfig+0x118>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00b      	beq.n	8004444 <TIM_Base_SetConfig+0x40>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a3c      	ldr	r2, [pc, #240]	; (8004520 <TIM_Base_SetConfig+0x11c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d007      	beq.n	8004444 <TIM_Base_SetConfig+0x40>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a3b      	ldr	r2, [pc, #236]	; (8004524 <TIM_Base_SetConfig+0x120>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d003      	beq.n	8004444 <TIM_Base_SetConfig+0x40>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a3a      	ldr	r2, [pc, #232]	; (8004528 <TIM_Base_SetConfig+0x124>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d108      	bne.n	8004456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <TIM_Base_SetConfig+0x114>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d02b      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004464:	d027      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a2c      	ldr	r2, [pc, #176]	; (800451c <TIM_Base_SetConfig+0x118>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d023      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a2b      	ldr	r2, [pc, #172]	; (8004520 <TIM_Base_SetConfig+0x11c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01f      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <TIM_Base_SetConfig+0x120>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d01b      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a29      	ldr	r2, [pc, #164]	; (8004528 <TIM_Base_SetConfig+0x124>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d017      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a28      	ldr	r2, [pc, #160]	; (800452c <TIM_Base_SetConfig+0x128>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a27      	ldr	r2, [pc, #156]	; (8004530 <TIM_Base_SetConfig+0x12c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00f      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a26      	ldr	r2, [pc, #152]	; (8004534 <TIM_Base_SetConfig+0x130>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00b      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a25      	ldr	r2, [pc, #148]	; (8004538 <TIM_Base_SetConfig+0x134>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d007      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a24      	ldr	r2, [pc, #144]	; (800453c <TIM_Base_SetConfig+0x138>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d003      	beq.n	80044b6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a23      	ldr	r2, [pc, #140]	; (8004540 <TIM_Base_SetConfig+0x13c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d108      	bne.n	80044c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <TIM_Base_SetConfig+0x114>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_Base_SetConfig+0xf8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a0c      	ldr	r2, [pc, #48]	; (8004528 <TIM_Base_SetConfig+0x124>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d103      	bne.n	8004504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	615a      	str	r2, [r3, #20]
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40010400 	.word	0x40010400
 800452c:	40014000 	.word	0x40014000
 8004530:	40014400 	.word	0x40014400
 8004534:	40014800 	.word	0x40014800
 8004538:	40001800 	.word	0x40001800
 800453c:	40001c00 	.word	0x40001c00
 8004540:	40002000 	.word	0x40002000

08004544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e03f      	b.n	80045fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc fb28 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2224      	movs	r2, #36	; 0x24
 800459c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f90b 	bl	80047cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b088      	sub	sp, #32
 800460a:	af02      	add	r7, sp, #8
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	4613      	mov	r3, r2
 8004614:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b20      	cmp	r3, #32
 8004624:	f040 8083 	bne.w	800472e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_UART_Transmit+0x2e>
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e07b      	b.n	8004730 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_UART_Transmit+0x40>
 8004642:	2302      	movs	r3, #2
 8004644:	e074      	b.n	8004730 <HAL_UART_Transmit+0x12a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2221      	movs	r2, #33	; 0x21
 8004658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800465c:	f7fc fd30 	bl	80010c0 <HAL_GetTick>
 8004660:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004676:	e042      	b.n	80046fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	d122      	bne.n	80046d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	2180      	movs	r1, #128	; 0x80
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f84c 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e042      	b.n	8004730 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3302      	adds	r3, #2
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	e017      	b.n	80046fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	e013      	b.n	80046fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f829 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e01f      	b.n	8004730 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	60ba      	str	r2, [r7, #8]
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1b7      	bne.n	8004678 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2200      	movs	r2, #0
 8004710:	2140      	movs	r1, #64	; 0x40
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f810 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e006      	b.n	8004730 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	e000      	b.n	8004730 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004748:	e02c      	b.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d028      	beq.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <UART_WaitOnFlagUntilTimeout+0x30>
 8004758:	f7fc fcb2 	bl	80010c0 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	429a      	cmp	r2, r3
 8004766:	d21d      	bcs.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004776:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e00f      	b.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4013      	ands	r3, r2
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d0c3      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800480e:	f023 030c 	bic.w	r3, r3, #12
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	430b      	orrs	r3, r1
 800481a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483a:	f040 818b 	bne.w	8004b54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4ac1      	ldr	r2, [pc, #772]	; (8004b48 <UART_SetConfig+0x37c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d005      	beq.n	8004854 <UART_SetConfig+0x88>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4abf      	ldr	r2, [pc, #764]	; (8004b4c <UART_SetConfig+0x380>)
 800484e:	4293      	cmp	r3, r2
 8004850:	f040 80bd 	bne.w	80049ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004854:	f7fe fec6 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8004858:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	461d      	mov	r5, r3
 800485e:	f04f 0600 	mov.w	r6, #0
 8004862:	46a8      	mov	r8, r5
 8004864:	46b1      	mov	r9, r6
 8004866:	eb18 0308 	adds.w	r3, r8, r8
 800486a:	eb49 0409 	adc.w	r4, r9, r9
 800486e:	4698      	mov	r8, r3
 8004870:	46a1      	mov	r9, r4
 8004872:	eb18 0805 	adds.w	r8, r8, r5
 8004876:	eb49 0906 	adc.w	r9, r9, r6
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004886:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800488a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800488e:	4688      	mov	r8, r1
 8004890:	4691      	mov	r9, r2
 8004892:	eb18 0005 	adds.w	r0, r8, r5
 8004896:	eb49 0106 	adc.w	r1, r9, r6
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	461d      	mov	r5, r3
 80048a0:	f04f 0600 	mov.w	r6, #0
 80048a4:	196b      	adds	r3, r5, r5
 80048a6:	eb46 0406 	adc.w	r4, r6, r6
 80048aa:	461a      	mov	r2, r3
 80048ac:	4623      	mov	r3, r4
 80048ae:	f7fb fcef 	bl	8000290 <__aeabi_uldivmod>
 80048b2:	4603      	mov	r3, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	461a      	mov	r2, r3
 80048b8:	4ba5      	ldr	r3, [pc, #660]	; (8004b50 <UART_SetConfig+0x384>)
 80048ba:	fba3 2302 	umull	r2, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	461d      	mov	r5, r3
 80048c8:	f04f 0600 	mov.w	r6, #0
 80048cc:	46a9      	mov	r9, r5
 80048ce:	46b2      	mov	sl, r6
 80048d0:	eb19 0309 	adds.w	r3, r9, r9
 80048d4:	eb4a 040a 	adc.w	r4, sl, sl
 80048d8:	4699      	mov	r9, r3
 80048da:	46a2      	mov	sl, r4
 80048dc:	eb19 0905 	adds.w	r9, r9, r5
 80048e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80048e4:	f04f 0100 	mov.w	r1, #0
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048f8:	4689      	mov	r9, r1
 80048fa:	4692      	mov	sl, r2
 80048fc:	eb19 0005 	adds.w	r0, r9, r5
 8004900:	eb4a 0106 	adc.w	r1, sl, r6
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	461d      	mov	r5, r3
 800490a:	f04f 0600 	mov.w	r6, #0
 800490e:	196b      	adds	r3, r5, r5
 8004910:	eb46 0406 	adc.w	r4, r6, r6
 8004914:	461a      	mov	r2, r3
 8004916:	4623      	mov	r3, r4
 8004918:	f7fb fcba 	bl	8000290 <__aeabi_uldivmod>
 800491c:	4603      	mov	r3, r0
 800491e:	460c      	mov	r4, r1
 8004920:	461a      	mov	r2, r3
 8004922:	4b8b      	ldr	r3, [pc, #556]	; (8004b50 <UART_SetConfig+0x384>)
 8004924:	fba3 1302 	umull	r1, r3, r3, r2
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	2164      	movs	r1, #100	; 0x64
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	3332      	adds	r3, #50	; 0x32
 8004936:	4a86      	ldr	r2, [pc, #536]	; (8004b50 <UART_SetConfig+0x384>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004944:	4498      	add	r8, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	461d      	mov	r5, r3
 800494a:	f04f 0600 	mov.w	r6, #0
 800494e:	46a9      	mov	r9, r5
 8004950:	46b2      	mov	sl, r6
 8004952:	eb19 0309 	adds.w	r3, r9, r9
 8004956:	eb4a 040a 	adc.w	r4, sl, sl
 800495a:	4699      	mov	r9, r3
 800495c:	46a2      	mov	sl, r4
 800495e:	eb19 0905 	adds.w	r9, r9, r5
 8004962:	eb4a 0a06 	adc.w	sl, sl, r6
 8004966:	f04f 0100 	mov.w	r1, #0
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004972:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004976:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800497a:	4689      	mov	r9, r1
 800497c:	4692      	mov	sl, r2
 800497e:	eb19 0005 	adds.w	r0, r9, r5
 8004982:	eb4a 0106 	adc.w	r1, sl, r6
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	461d      	mov	r5, r3
 800498c:	f04f 0600 	mov.w	r6, #0
 8004990:	196b      	adds	r3, r5, r5
 8004992:	eb46 0406 	adc.w	r4, r6, r6
 8004996:	461a      	mov	r2, r3
 8004998:	4623      	mov	r3, r4
 800499a:	f7fb fc79 	bl	8000290 <__aeabi_uldivmod>
 800499e:	4603      	mov	r3, r0
 80049a0:	460c      	mov	r4, r1
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b6a      	ldr	r3, [pc, #424]	; (8004b50 <UART_SetConfig+0x384>)
 80049a6:	fba3 1302 	umull	r1, r3, r3, r2
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2164      	movs	r1, #100	; 0x64
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	3332      	adds	r3, #50	; 0x32
 80049b8:	4a65      	ldr	r2, [pc, #404]	; (8004b50 <UART_SetConfig+0x384>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	f003 0207 	and.w	r2, r3, #7
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4442      	add	r2, r8
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	e26f      	b.n	8004eae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ce:	f7fe fdf5 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 80049d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	461d      	mov	r5, r3
 80049d8:	f04f 0600 	mov.w	r6, #0
 80049dc:	46a8      	mov	r8, r5
 80049de:	46b1      	mov	r9, r6
 80049e0:	eb18 0308 	adds.w	r3, r8, r8
 80049e4:	eb49 0409 	adc.w	r4, r9, r9
 80049e8:	4698      	mov	r8, r3
 80049ea:	46a1      	mov	r9, r4
 80049ec:	eb18 0805 	adds.w	r8, r8, r5
 80049f0:	eb49 0906 	adc.w	r9, r9, r6
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a08:	4688      	mov	r8, r1
 8004a0a:	4691      	mov	r9, r2
 8004a0c:	eb18 0005 	adds.w	r0, r8, r5
 8004a10:	eb49 0106 	adc.w	r1, r9, r6
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	461d      	mov	r5, r3
 8004a1a:	f04f 0600 	mov.w	r6, #0
 8004a1e:	196b      	adds	r3, r5, r5
 8004a20:	eb46 0406 	adc.w	r4, r6, r6
 8004a24:	461a      	mov	r2, r3
 8004a26:	4623      	mov	r3, r4
 8004a28:	f7fb fc32 	bl	8000290 <__aeabi_uldivmod>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <UART_SetConfig+0x384>)
 8004a34:	fba3 2302 	umull	r2, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	461d      	mov	r5, r3
 8004a42:	f04f 0600 	mov.w	r6, #0
 8004a46:	46a9      	mov	r9, r5
 8004a48:	46b2      	mov	sl, r6
 8004a4a:	eb19 0309 	adds.w	r3, r9, r9
 8004a4e:	eb4a 040a 	adc.w	r4, sl, sl
 8004a52:	4699      	mov	r9, r3
 8004a54:	46a2      	mov	sl, r4
 8004a56:	eb19 0905 	adds.w	r9, r9, r5
 8004a5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a5e:	f04f 0100 	mov.w	r1, #0
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a72:	4689      	mov	r9, r1
 8004a74:	4692      	mov	sl, r2
 8004a76:	eb19 0005 	adds.w	r0, r9, r5
 8004a7a:	eb4a 0106 	adc.w	r1, sl, r6
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	461d      	mov	r5, r3
 8004a84:	f04f 0600 	mov.w	r6, #0
 8004a88:	196b      	adds	r3, r5, r5
 8004a8a:	eb46 0406 	adc.w	r4, r6, r6
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4623      	mov	r3, r4
 8004a92:	f7fb fbfd 	bl	8000290 <__aeabi_uldivmod>
 8004a96:	4603      	mov	r3, r0
 8004a98:	460c      	mov	r4, r1
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <UART_SetConfig+0x384>)
 8004a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2164      	movs	r1, #100	; 0x64
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	3332      	adds	r3, #50	; 0x32
 8004ab0:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <UART_SetConfig+0x384>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004abe:	4498      	add	r8, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	461d      	mov	r5, r3
 8004ac4:	f04f 0600 	mov.w	r6, #0
 8004ac8:	46a9      	mov	r9, r5
 8004aca:	46b2      	mov	sl, r6
 8004acc:	eb19 0309 	adds.w	r3, r9, r9
 8004ad0:	eb4a 040a 	adc.w	r4, sl, sl
 8004ad4:	4699      	mov	r9, r3
 8004ad6:	46a2      	mov	sl, r4
 8004ad8:	eb19 0905 	adds.w	r9, r9, r5
 8004adc:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ae0:	f04f 0100 	mov.w	r1, #0
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004af0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004af4:	4689      	mov	r9, r1
 8004af6:	4692      	mov	sl, r2
 8004af8:	eb19 0005 	adds.w	r0, r9, r5
 8004afc:	eb4a 0106 	adc.w	r1, sl, r6
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	461d      	mov	r5, r3
 8004b06:	f04f 0600 	mov.w	r6, #0
 8004b0a:	196b      	adds	r3, r5, r5
 8004b0c:	eb46 0406 	adc.w	r4, r6, r6
 8004b10:	461a      	mov	r2, r3
 8004b12:	4623      	mov	r3, r4
 8004b14:	f7fb fbbc 	bl	8000290 <__aeabi_uldivmod>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <UART_SetConfig+0x384>)
 8004b20:	fba3 1302 	umull	r1, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	2164      	movs	r1, #100	; 0x64
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	3332      	adds	r3, #50	; 0x32
 8004b32:	4a07      	ldr	r2, [pc, #28]	; (8004b50 <UART_SetConfig+0x384>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	f003 0207 	and.w	r2, r3, #7
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4442      	add	r2, r8
 8004b44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b46:	e1b2      	b.n	8004eae <UART_SetConfig+0x6e2>
 8004b48:	40011000 	.word	0x40011000
 8004b4c:	40011400 	.word	0x40011400
 8004b50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4ad7      	ldr	r2, [pc, #860]	; (8004eb8 <UART_SetConfig+0x6ec>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d005      	beq.n	8004b6a <UART_SetConfig+0x39e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4ad6      	ldr	r2, [pc, #856]	; (8004ebc <UART_SetConfig+0x6f0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	f040 80d1 	bne.w	8004d0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b6a:	f7fe fd3b 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8004b6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	469a      	mov	sl, r3
 8004b74:	f04f 0b00 	mov.w	fp, #0
 8004b78:	46d0      	mov	r8, sl
 8004b7a:	46d9      	mov	r9, fp
 8004b7c:	eb18 0308 	adds.w	r3, r8, r8
 8004b80:	eb49 0409 	adc.w	r4, r9, r9
 8004b84:	4698      	mov	r8, r3
 8004b86:	46a1      	mov	r9, r4
 8004b88:	eb18 080a 	adds.w	r8, r8, sl
 8004b8c:	eb49 090b 	adc.w	r9, r9, fp
 8004b90:	f04f 0100 	mov.w	r1, #0
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ba0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ba4:	4688      	mov	r8, r1
 8004ba6:	4691      	mov	r9, r2
 8004ba8:	eb1a 0508 	adds.w	r5, sl, r8
 8004bac:	eb4b 0609 	adc.w	r6, fp, r9
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	f04f 0400 	mov.w	r4, #0
 8004bc2:	0094      	lsls	r4, r2, #2
 8004bc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bc8:	008b      	lsls	r3, r1, #2
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4623      	mov	r3, r4
 8004bce:	4628      	mov	r0, r5
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	f7fb fb5d 	bl	8000290 <__aeabi_uldivmod>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	461a      	mov	r2, r3
 8004bdc:	4bb8      	ldr	r3, [pc, #736]	; (8004ec0 <UART_SetConfig+0x6f4>)
 8004bde:	fba3 2302 	umull	r2, r3, r3, r2
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	469b      	mov	fp, r3
 8004bec:	f04f 0c00 	mov.w	ip, #0
 8004bf0:	46d9      	mov	r9, fp
 8004bf2:	46e2      	mov	sl, ip
 8004bf4:	eb19 0309 	adds.w	r3, r9, r9
 8004bf8:	eb4a 040a 	adc.w	r4, sl, sl
 8004bfc:	4699      	mov	r9, r3
 8004bfe:	46a2      	mov	sl, r4
 8004c00:	eb19 090b 	adds.w	r9, r9, fp
 8004c04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c1c:	4689      	mov	r9, r1
 8004c1e:	4692      	mov	sl, r2
 8004c20:	eb1b 0509 	adds.w	r5, fp, r9
 8004c24:	eb4c 060a 	adc.w	r6, ip, sl
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	f04f 0400 	mov.w	r4, #0
 8004c3a:	0094      	lsls	r4, r2, #2
 8004c3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c40:	008b      	lsls	r3, r1, #2
 8004c42:	461a      	mov	r2, r3
 8004c44:	4623      	mov	r3, r4
 8004c46:	4628      	mov	r0, r5
 8004c48:	4631      	mov	r1, r6
 8004c4a:	f7fb fb21 	bl	8000290 <__aeabi_uldivmod>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	460c      	mov	r4, r1
 8004c52:	461a      	mov	r2, r3
 8004c54:	4b9a      	ldr	r3, [pc, #616]	; (8004ec0 <UART_SetConfig+0x6f4>)
 8004c56:	fba3 1302 	umull	r1, r3, r3, r2
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	2164      	movs	r1, #100	; 0x64
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	3332      	adds	r3, #50	; 0x32
 8004c68:	4a95      	ldr	r2, [pc, #596]	; (8004ec0 <UART_SetConfig+0x6f4>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c74:	4498      	add	r8, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	469b      	mov	fp, r3
 8004c7a:	f04f 0c00 	mov.w	ip, #0
 8004c7e:	46d9      	mov	r9, fp
 8004c80:	46e2      	mov	sl, ip
 8004c82:	eb19 0309 	adds.w	r3, r9, r9
 8004c86:	eb4a 040a 	adc.w	r4, sl, sl
 8004c8a:	4699      	mov	r9, r3
 8004c8c:	46a2      	mov	sl, r4
 8004c8e:	eb19 090b 	adds.w	r9, r9, fp
 8004c92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c96:	f04f 0100 	mov.w	r1, #0
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ca2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ca6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004caa:	4689      	mov	r9, r1
 8004cac:	4692      	mov	sl, r2
 8004cae:	eb1b 0509 	adds.w	r5, fp, r9
 8004cb2:	eb4c 060a 	adc.w	r6, ip, sl
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	f04f 0400 	mov.w	r4, #0
 8004cc8:	0094      	lsls	r4, r2, #2
 8004cca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cce:	008b      	lsls	r3, r1, #2
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4623      	mov	r3, r4
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	f7fb fada 	bl	8000290 <__aeabi_uldivmod>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4b77      	ldr	r3, [pc, #476]	; (8004ec0 <UART_SetConfig+0x6f4>)
 8004ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce8:	095b      	lsrs	r3, r3, #5
 8004cea:	2164      	movs	r1, #100	; 0x64
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	3332      	adds	r3, #50	; 0x32
 8004cf6:	4a72      	ldr	r2, [pc, #456]	; (8004ec0 <UART_SetConfig+0x6f4>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	f003 020f 	and.w	r2, r3, #15
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4442      	add	r2, r8
 8004d08:	609a      	str	r2, [r3, #8]
 8004d0a:	e0d0      	b.n	8004eae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f7fe fc56 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004d10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	469a      	mov	sl, r3
 8004d16:	f04f 0b00 	mov.w	fp, #0
 8004d1a:	46d0      	mov	r8, sl
 8004d1c:	46d9      	mov	r9, fp
 8004d1e:	eb18 0308 	adds.w	r3, r8, r8
 8004d22:	eb49 0409 	adc.w	r4, r9, r9
 8004d26:	4698      	mov	r8, r3
 8004d28:	46a1      	mov	r9, r4
 8004d2a:	eb18 080a 	adds.w	r8, r8, sl
 8004d2e:	eb49 090b 	adc.w	r9, r9, fp
 8004d32:	f04f 0100 	mov.w	r1, #0
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d46:	4688      	mov	r8, r1
 8004d48:	4691      	mov	r9, r2
 8004d4a:	eb1a 0508 	adds.w	r5, sl, r8
 8004d4e:	eb4b 0609 	adc.w	r6, fp, r9
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4619      	mov	r1, r3
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	f04f 0400 	mov.w	r4, #0
 8004d64:	0094      	lsls	r4, r2, #2
 8004d66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d6a:	008b      	lsls	r3, r1, #2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	4628      	mov	r0, r5
 8004d72:	4631      	mov	r1, r6
 8004d74:	f7fb fa8c 	bl	8000290 <__aeabi_uldivmod>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b50      	ldr	r3, [pc, #320]	; (8004ec0 <UART_SetConfig+0x6f4>)
 8004d80:	fba3 2302 	umull	r2, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	469b      	mov	fp, r3
 8004d8e:	f04f 0c00 	mov.w	ip, #0
 8004d92:	46d9      	mov	r9, fp
 8004d94:	46e2      	mov	sl, ip
 8004d96:	eb19 0309 	adds.w	r3, r9, r9
 8004d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8004d9e:	4699      	mov	r9, r3
 8004da0:	46a2      	mov	sl, r4
 8004da2:	eb19 090b 	adds.w	r9, r9, fp
 8004da6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004daa:	f04f 0100 	mov.w	r1, #0
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dbe:	4689      	mov	r9, r1
 8004dc0:	4692      	mov	sl, r2
 8004dc2:	eb1b 0509 	adds.w	r5, fp, r9
 8004dc6:	eb4c 060a 	adc.w	r6, ip, sl
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	f04f 0400 	mov.w	r4, #0
 8004ddc:	0094      	lsls	r4, r2, #2
 8004dde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004de2:	008b      	lsls	r3, r1, #2
 8004de4:	461a      	mov	r2, r3
 8004de6:	4623      	mov	r3, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	4631      	mov	r1, r6
 8004dec:	f7fb fa50 	bl	8000290 <__aeabi_uldivmod>
 8004df0:	4603      	mov	r3, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b32      	ldr	r3, [pc, #200]	; (8004ec0 <UART_SetConfig+0x6f4>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	2164      	movs	r1, #100	; 0x64
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	3332      	adds	r3, #50	; 0x32
 8004e0a:	4a2d      	ldr	r2, [pc, #180]	; (8004ec0 <UART_SetConfig+0x6f4>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e16:	4498      	add	r8, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	469b      	mov	fp, r3
 8004e1c:	f04f 0c00 	mov.w	ip, #0
 8004e20:	46d9      	mov	r9, fp
 8004e22:	46e2      	mov	sl, ip
 8004e24:	eb19 0309 	adds.w	r3, r9, r9
 8004e28:	eb4a 040a 	adc.w	r4, sl, sl
 8004e2c:	4699      	mov	r9, r3
 8004e2e:	46a2      	mov	sl, r4
 8004e30:	eb19 090b 	adds.w	r9, r9, fp
 8004e34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e38:	f04f 0100 	mov.w	r1, #0
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e4c:	4689      	mov	r9, r1
 8004e4e:	4692      	mov	sl, r2
 8004e50:	eb1b 0509 	adds.w	r5, fp, r9
 8004e54:	eb4c 060a 	adc.w	r6, ip, sl
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	f04f 0400 	mov.w	r4, #0
 8004e6a:	0094      	lsls	r4, r2, #2
 8004e6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e70:	008b      	lsls	r3, r1, #2
 8004e72:	461a      	mov	r2, r3
 8004e74:	4623      	mov	r3, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	4631      	mov	r1, r6
 8004e7a:	f7fb fa09 	bl	8000290 <__aeabi_uldivmod>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	460c      	mov	r4, r1
 8004e82:	461a      	mov	r2, r3
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <UART_SetConfig+0x6f4>)
 8004e86:	fba3 1302 	umull	r1, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2164      	movs	r1, #100	; 0x64
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	3332      	adds	r3, #50	; 0x32
 8004e98:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <UART_SetConfig+0x6f4>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	f003 020f 	and.w	r2, r3, #15
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4442      	add	r2, r8
 8004eaa:	609a      	str	r2, [r3, #8]
}
 8004eac:	e7ff      	b.n	8004eae <UART_SetConfig+0x6e2>
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb8:	40011000 	.word	0x40011000
 8004ebc:	40011400 	.word	0x40011400
 8004ec0:	51eb851f 	.word	0x51eb851f

08004ec4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	f107 001c 	add.w	r0, r7, #28
 8004ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d122      	bne.n	8004f22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d105      	bne.n	8004f16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fa56 	bl	80053c8 <USB_CoreReset>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	73fb      	strb	r3, [r7, #15]
 8004f20:	e01a      	b.n	8004f58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fa4a 	bl	80053c8 <USB_CoreReset>
 8004f34:	4603      	mov	r3, r0
 8004f36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
 8004f4a:	e005      	b.n	8004f58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10b      	bne.n	8004f76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f043 0206 	orr.w	r2, r3, #6
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f82:	b004      	add	sp, #16
 8004f84:	4770      	bx	lr

08004f86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0201 	bic.w	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d106      	bne.n	8004fd4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	e00b      	b.n	8004fec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e001      	b.n	8004fec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e003      	b.n	8004ff4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004fec:	2032      	movs	r0, #50	; 0x32
 8004fee:	f7fc f873 	bl	80010d8 <HAL_Delay>

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800500a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	e009      	b.n	8005030 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3340      	adds	r3, #64	; 0x40
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	2200      	movs	r2, #0
 8005028:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3301      	adds	r3, #1
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b0e      	cmp	r3, #14
 8005034:	d9f2      	bls.n	800501c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11c      	bne.n	8005076 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800504a:	f043 0302 	orr.w	r3, r3, #2
 800504e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
 8005074:	e00b      	b.n	800508e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005094:	461a      	mov	r2, r3
 8005096:	2300      	movs	r3, #0
 8005098:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a0:	4619      	mov	r1, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	461a      	mov	r2, r3
 80050aa:	680b      	ldr	r3, [r1, #0]
 80050ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d10c      	bne.n	80050ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d104      	bne.n	80050c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050ba:	2100      	movs	r1, #0
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f949 	bl	8005354 <USB_SetDevSpeed>
 80050c2:	e008      	b.n	80050d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050c4:	2101      	movs	r1, #1
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f944 	bl	8005354 <USB_SetDevSpeed>
 80050cc:	e003      	b.n	80050d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050ce:	2103      	movs	r1, #3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f93f 	bl	8005354 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050d6:	2110      	movs	r1, #16
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f8f3 	bl	80052c4 <USB_FlushTxFifo>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f911 	bl	8005310 <USB_FlushRxFifo>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	461a      	mov	r2, r3
 8005100:	2300      	movs	r3, #0
 8005102:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510a:	461a      	mov	r2, r3
 800510c:	2300      	movs	r3, #0
 800510e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	461a      	mov	r2, r3
 8005118:	2300      	movs	r3, #0
 800511a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	e043      	b.n	80051aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005138:	d118      	bne.n	800516c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	461a      	mov	r2, r3
 800514e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	e013      	b.n	800517e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005162:	461a      	mov	r2, r3
 8005164:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e008      	b.n	800517e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	461a      	mov	r2, r3
 800517a:	2300      	movs	r3, #0
 800517c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	461a      	mov	r2, r3
 800518c:	2300      	movs	r3, #0
 800518e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	461a      	mov	r2, r3
 800519e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	3301      	adds	r3, #1
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d3b7      	bcc.n	8005122 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b2:	2300      	movs	r3, #0
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e043      	b.n	8005240 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ce:	d118      	bne.n	8005202 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	461a      	mov	r2, r3
 80051e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e013      	b.n	8005214 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	461a      	mov	r2, r3
 80051fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	e008      	b.n	8005214 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	461a      	mov	r2, r3
 8005210:	2300      	movs	r3, #0
 8005212:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	461a      	mov	r2, r3
 8005222:	2300      	movs	r3, #0
 8005224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	461a      	mov	r2, r3
 8005234:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005238:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3301      	adds	r3, #1
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	429a      	cmp	r2, r3
 8005246:	d3b7      	bcc.n	80051b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005268:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f043 0210 	orr.w	r2, r3, #16
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699a      	ldr	r2, [r3, #24]
 8005280:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <USB_DevInit+0x2c4>)
 8005282:	4313      	orrs	r3, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f043 0208 	orr.w	r2, r3, #8
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800529a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d107      	bne.n	80052b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a8:	f043 0304 	orr.w	r3, r3, #4
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052bc:	b004      	add	sp, #16
 80052be:	4770      	bx	lr
 80052c0:	803c3800 	.word	0x803c3800

080052c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	019b      	lsls	r3, r3, #6
 80052d6:	f043 0220 	orr.w	r2, r3, #32
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4a09      	ldr	r2, [pc, #36]	; (800530c <USB_FlushTxFifo+0x48>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e006      	b.n	80052fe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d0f0      	beq.n	80052de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	00030d40 	.word	0x00030d40

08005310 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2210      	movs	r2, #16
 8005320:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3301      	adds	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a09      	ldr	r2, [pc, #36]	; (8005350 <USB_FlushRxFifo+0x40>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d901      	bls.n	8005334 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e006      	b.n	8005342 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b10      	cmp	r3, #16
 800533e:	d0f0      	beq.n	8005322 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	00030d40 	.word	0x00030d40

08005354 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005374:	4313      	orrs	r3, r2
 8005376:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053a0:	f023 0303 	bic.w	r3, r3, #3
 80053a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b4:	f043 0302 	orr.w	r3, r3, #2
 80053b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4a13      	ldr	r2, [pc, #76]	; (800542c <USB_CoreReset+0x64>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e01b      	b.n	800541e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	daf2      	bge.n	80053d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f043 0201 	orr.w	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3301      	adds	r3, #1
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a09      	ldr	r2, [pc, #36]	; (800542c <USB_CoreReset+0x64>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e006      	b.n	800541e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d0f0      	beq.n	80053fe <USB_CoreReset+0x36>

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	00030d40 	.word	0x00030d40

08005430 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005430:	b5b0      	push	{r4, r5, r7, lr}
 8005432:	b08e      	sub	sp, #56	; 0x38
 8005434:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005436:	2100      	movs	r1, #0
 8005438:	2000      	movs	r0, #0
 800543a:	f006 fd4f 	bl	800bedc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <MX_LWIP_Init+0xb8>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005444:	4b29      	ldr	r3, [pc, #164]	; (80054ec <MX_LWIP_Init+0xbc>)
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800544a:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <MX_LWIP_Init+0xc0>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005450:	4b28      	ldr	r3, [pc, #160]	; (80054f4 <MX_LWIP_Init+0xc4>)
 8005452:	9302      	str	r3, [sp, #8]
 8005454:	4b28      	ldr	r3, [pc, #160]	; (80054f8 <MX_LWIP_Init+0xc8>)
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	2300      	movs	r3, #0
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <MX_LWIP_Init+0xc0>)
 800545e:	4a23      	ldr	r2, [pc, #140]	; (80054ec <MX_LWIP_Init+0xbc>)
 8005460:	4921      	ldr	r1, [pc, #132]	; (80054e8 <MX_LWIP_Init+0xb8>)
 8005462:	4826      	ldr	r0, [pc, #152]	; (80054fc <MX_LWIP_Init+0xcc>)
 8005464:	f007 fabe 	bl	800c9e4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005468:	4824      	ldr	r0, [pc, #144]	; (80054fc <MX_LWIP_Init+0xcc>)
 800546a:	f007 fc75 	bl	800cd58 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800546e:	4b23      	ldr	r3, [pc, #140]	; (80054fc <MX_LWIP_Init+0xcc>)
 8005470:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005474:	089b      	lsrs	r3, r3, #2
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005480:	481e      	ldr	r0, [pc, #120]	; (80054fc <MX_LWIP_Init+0xcc>)
 8005482:	f007 fc79 	bl	800cd78 <netif_set_up>
 8005486:	e002      	b.n	800548e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005488:	481c      	ldr	r0, [pc, #112]	; (80054fc <MX_LWIP_Init+0xcc>)
 800548a:	f007 fce1 	bl	800ce50 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800548e:	491c      	ldr	r1, [pc, #112]	; (8005500 <MX_LWIP_Init+0xd0>)
 8005490:	481a      	ldr	r0, [pc, #104]	; (80054fc <MX_LWIP_Init+0xcc>)
 8005492:	f007 fd77 	bl	800cf84 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8005496:	2300      	movs	r3, #0
 8005498:	623b      	str	r3, [r7, #32]
 800549a:	2300      	movs	r3, #0
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800549e:	f107 0320 	add.w	r3, r7, #32
 80054a2:	2101      	movs	r1, #1
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fda9 	bl	8005ffc <osSemaphoreCreate>
 80054aa:	4602      	mov	r2, r0
 80054ac:	4b15      	ldr	r3, [pc, #84]	; (8005504 <MX_LWIP_Init+0xd4>)
 80054ae:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80054b0:	4b15      	ldr	r3, [pc, #84]	; (8005508 <MX_LWIP_Init+0xd8>)
 80054b2:	4a12      	ldr	r2, [pc, #72]	; (80054fc <MX_LWIP_Init+0xcc>)
 80054b4:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80054b6:	4b13      	ldr	r3, [pc, #76]	; (8005504 <MX_LWIP_Init+0xd4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a13      	ldr	r2, [pc, #76]	; (8005508 <MX_LWIP_Init+0xd8>)
 80054bc:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80054be:	4b13      	ldr	r3, [pc, #76]	; (800550c <MX_LWIP_Init+0xdc>)
 80054c0:	1d3c      	adds	r4, r7, #4
 80054c2:	461d      	mov	r5, r3
 80054c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80054d0:	1d3b      	adds	r3, r7, #4
 80054d2:	490d      	ldr	r1, [pc, #52]	; (8005508 <MX_LWIP_Init+0xd8>)
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fc94 	bl	8005e02 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80054da:	4808      	ldr	r0, [pc, #32]	; (80054fc <MX_LWIP_Init+0xcc>)
 80054dc:	f00f fee2 	bl	80152a4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80054e0:	bf00      	nop
 80054e2:	3728      	adds	r7, #40	; 0x28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bdb0      	pop	{r4, r5, r7, pc}
 80054e8:	200048c8 	.word	0x200048c8
 80054ec:	200048cc 	.word	0x200048cc
 80054f0:	200048d0 	.word	0x200048d0
 80054f4:	0800bded 	.word	0x0800bded
 80054f8:	08005b91 	.word	0x08005b91
 80054fc:	20004890 	.word	0x20004890
 8005500:	08005c75 	.word	0x08005c75
 8005504:	20000464 	.word	0x20000464
 8005508:	20004888 	.word	0x20004888
 800550c:	0801a3fc 	.word	0x0801a3fc

08005510 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08e      	sub	sp, #56	; 0x38
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	609a      	str	r2, [r3, #8]
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a5d      	ldr	r2, [pc, #372]	; (80056a4 <HAL_ETH_MspInit+0x194>)
 800552e:	4293      	cmp	r3, r2
 8005530:	f040 80b4 	bne.w	800569c <HAL_ETH_MspInit+0x18c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005534:	2300      	movs	r3, #0
 8005536:	623b      	str	r3, [r7, #32]
 8005538:	4b5b      	ldr	r3, [pc, #364]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	4a5a      	ldr	r2, [pc, #360]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 800553e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005542:	6313      	str	r3, [r2, #48]	; 0x30
 8005544:	4b58      	ldr	r3, [pc, #352]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554c:	623b      	str	r3, [r7, #32]
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	2300      	movs	r3, #0
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	4b54      	ldr	r3, [pc, #336]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4a53      	ldr	r2, [pc, #332]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 800555a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800555e:	6313      	str	r3, [r2, #48]	; 0x30
 8005560:	4b51      	ldr	r3, [pc, #324]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	4b4d      	ldr	r3, [pc, #308]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	4a4c      	ldr	r2, [pc, #304]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 8005576:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800557a:	6313      	str	r3, [r2, #48]	; 0x30
 800557c:	4b4a      	ldr	r3, [pc, #296]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	4b46      	ldr	r3, [pc, #280]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	4a45      	ldr	r2, [pc, #276]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 8005592:	f043 0304 	orr.w	r3, r3, #4
 8005596:	6313      	str	r3, [r2, #48]	; 0x30
 8005598:	4b43      	ldr	r3, [pc, #268]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055a4:	2300      	movs	r3, #0
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	4b3f      	ldr	r3, [pc, #252]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	4a3e      	ldr	r2, [pc, #248]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	6313      	str	r3, [r2, #48]	; 0x30
 80055b4:	4b3c      	ldr	r3, [pc, #240]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	4b38      	ldr	r3, [pc, #224]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	4a37      	ldr	r2, [pc, #220]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 80055ca:	f043 0302 	orr.w	r3, r3, #2
 80055ce:	6313      	str	r3, [r2, #48]	; 0x30
 80055d0:	4b35      	ldr	r3, [pc, #212]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
 80055e0:	4b31      	ldr	r3, [pc, #196]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	4a30      	ldr	r2, [pc, #192]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 80055e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ea:	6313      	str	r3, [r2, #48]	; 0x30
 80055ec:	4b2e      	ldr	r3, [pc, #184]	; (80056a8 <HAL_ETH_MspInit+0x198>)
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80055f8:	2332      	movs	r3, #50	; 0x32
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055fc:	2302      	movs	r3, #2
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005600:	2300      	movs	r3, #0
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005604:	2303      	movs	r3, #3
 8005606:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005608:	230b      	movs	r3, #11
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800560c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005610:	4619      	mov	r1, r3
 8005612:	4826      	ldr	r0, [pc, #152]	; (80056ac <HAL_ETH_MspInit+0x19c>)
 8005614:	f7fd f82c 	bl	8002670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005618:	2386      	movs	r3, #134	; 0x86
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800561c:	2302      	movs	r3, #2
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005620:	2300      	movs	r3, #0
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005624:	2303      	movs	r3, #3
 8005626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005628:	230b      	movs	r3, #11
 800562a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800562c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005630:	4619      	mov	r1, r3
 8005632:	481f      	ldr	r0, [pc, #124]	; (80056b0 <HAL_ETH_MspInit+0x1a0>)
 8005634:	f7fd f81c 	bl	8002670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563e:	2302      	movs	r3, #2
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005642:	2300      	movs	r3, #0
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005646:	2303      	movs	r3, #3
 8005648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800564a:	230b      	movs	r3, #11
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800564e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005652:	4619      	mov	r1, r3
 8005654:	4817      	ldr	r0, [pc, #92]	; (80056b4 <HAL_ETH_MspInit+0x1a4>)
 8005656:	f7fd f80b 	bl	8002670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800565a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005660:	2302      	movs	r3, #2
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005664:	2300      	movs	r3, #0
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005668:	2303      	movs	r3, #3
 800566a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800566c:	230b      	movs	r3, #11
 800566e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005674:	4619      	mov	r1, r3
 8005676:	4810      	ldr	r0, [pc, #64]	; (80056b8 <HAL_ETH_MspInit+0x1a8>)
 8005678:	f7fc fffa 	bl	8002670 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800567c:	2200      	movs	r2, #0
 800567e:	2105      	movs	r1, #5
 8005680:	203d      	movs	r0, #61	; 0x3d
 8005682:	f7fb fe03 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005686:	203d      	movs	r0, #61	; 0x3d
 8005688:	f7fb fe1c 	bl	80012c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800568c:	2200      	movs	r2, #0
 800568e:	2105      	movs	r1, #5
 8005690:	203e      	movs	r0, #62	; 0x3e
 8005692:	f7fb fdfb 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8005696:	203e      	movs	r0, #62	; 0x3e
 8005698:	f7fb fe14 	bl	80012c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800569c:	bf00      	nop
 800569e:	3738      	adds	r7, #56	; 0x38
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40028000 	.word	0x40028000
 80056a8:	40023800 	.word	0x40023800
 80056ac:	40020800 	.word	0x40020800
 80056b0:	40020000 	.word	0x40020000
 80056b4:	40020400 	.word	0x40020400
 80056b8:	40021800 	.word	0x40021800

080056bc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80056c4:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <HAL_ETH_RxCpltCallback+0x1c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fd19 	bl	8006100 <osSemaphoreRelease>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000468 	.word	0x20000468

080056dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80056dc:	b5b0      	push	{r4, r5, r7, lr}
 80056de:	b090      	sub	sp, #64	; 0x40
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80056e8:	4b60      	ldr	r3, [pc, #384]	; (800586c <low_level_init+0x190>)
 80056ea:	4a61      	ldr	r2, [pc, #388]	; (8005870 <low_level_init+0x194>)
 80056ec:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80056ee:	4b5f      	ldr	r3, [pc, #380]	; (800586c <low_level_init+0x190>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80056f4:	4b5d      	ldr	r3, [pc, #372]	; (800586c <low_level_init+0x190>)
 80056f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056fa:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80056fc:	4b5b      	ldr	r3, [pc, #364]	; (800586c <low_level_init+0x190>)
 80056fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005702:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005704:	4b59      	ldr	r3, [pc, #356]	; (800586c <low_level_init+0x190>)
 8005706:	2200      	movs	r2, #0
 8005708:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8005716:	23e1      	movs	r3, #225	; 0xe1
 8005718:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800571c:	2300      	movs	r3, #0
 800571e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8005722:	2300      	movs	r3, #0
 8005724:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8005728:	2300      	movs	r3, #0
 800572a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800572e:	4a4f      	ldr	r2, [pc, #316]	; (800586c <low_level_init+0x190>)
 8005730:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005734:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005736:	4b4d      	ldr	r3, [pc, #308]	; (800586c <low_level_init+0x190>)
 8005738:	2201      	movs	r2, #1
 800573a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800573c:	4b4b      	ldr	r3, [pc, #300]	; (800586c <low_level_init+0x190>)
 800573e:	2200      	movs	r2, #0
 8005740:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005742:	4b4a      	ldr	r3, [pc, #296]	; (800586c <low_level_init+0x190>)
 8005744:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005748:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800574a:	4848      	ldr	r0, [pc, #288]	; (800586c <low_level_init+0x190>)
 800574c:	f7fb fdea 	bl	8001324 <HAL_ETH_Init>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005756:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800575a:	2b00      	cmp	r3, #0
 800575c:	d108      	bne.n	8005770 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005764:	f043 0304 	orr.w	r3, r3, #4
 8005768:	b2da      	uxtb	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005770:	2304      	movs	r3, #4
 8005772:	4a40      	ldr	r2, [pc, #256]	; (8005874 <low_level_init+0x198>)
 8005774:	4940      	ldr	r1, [pc, #256]	; (8005878 <low_level_init+0x19c>)
 8005776:	483d      	ldr	r0, [pc, #244]	; (800586c <low_level_init+0x190>)
 8005778:	f7fb ff72 	bl	8001660 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800577c:	2304      	movs	r3, #4
 800577e:	4a3f      	ldr	r2, [pc, #252]	; (800587c <low_level_init+0x1a0>)
 8005780:	493f      	ldr	r1, [pc, #252]	; (8005880 <low_level_init+0x1a4>)
 8005782:	483a      	ldr	r0, [pc, #232]	; (800586c <low_level_init+0x190>)
 8005784:	f7fb ffd5 	bl	8001732 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2206      	movs	r2, #6
 800578c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005790:	4b36      	ldr	r3, [pc, #216]	; (800586c <low_level_init+0x190>)
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800579c:	4b33      	ldr	r3, [pc, #204]	; (800586c <low_level_init+0x190>)
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	785a      	ldrb	r2, [r3, #1]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80057a8:	4b30      	ldr	r3, [pc, #192]	; (800586c <low_level_init+0x190>)
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	789a      	ldrb	r2, [r3, #2]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80057b4:	4b2d      	ldr	r3, [pc, #180]	; (800586c <low_level_init+0x190>)
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	78da      	ldrb	r2, [r3, #3]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80057c0:	4b2a      	ldr	r3, [pc, #168]	; (800586c <low_level_init+0x190>)
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	791a      	ldrb	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80057cc:	4b27      	ldr	r3, [pc, #156]	; (800586c <low_level_init+0x190>)
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	795a      	ldrb	r2, [r3, #5]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80057de:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057e6:	f043 030a 	orr.w	r3, r3, #10
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80057f2:	2300      	movs	r3, #0
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f6:	2300      	movs	r3, #0
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80057fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057fe:	2101      	movs	r1, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fbfb 	bl	8005ffc <osSemaphoreCreate>
 8005806:	4602      	mov	r2, r0
 8005808:	4b1e      	ldr	r3, [pc, #120]	; (8005884 <low_level_init+0x1a8>)
 800580a:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800580c:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <low_level_init+0x1ac>)
 800580e:	f107 040c 	add.w	r4, r7, #12
 8005812:	461d      	mov	r5, r3
 8005814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005818:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800581c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005820:	f107 030c 	add.w	r3, r7, #12
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	4618      	mov	r0, r3
 8005828:	f000 faeb 	bl	8005e02 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800582c:	480f      	ldr	r0, [pc, #60]	; (800586c <low_level_init+0x190>)
 800582e:	f7fc faa8 	bl	8001d82 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005836:	461a      	mov	r2, r3
 8005838:	211d      	movs	r1, #29
 800583a:	480c      	ldr	r0, [pc, #48]	; (800586c <low_level_init+0x190>)
 800583c:	f7fc f9d3 	bl	8001be6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	f043 030b 	orr.w	r3, r3, #11
 8005846:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	461a      	mov	r2, r3
 800584c:	211d      	movs	r1, #29
 800584e:	4807      	ldr	r0, [pc, #28]	; (800586c <low_level_init+0x190>)
 8005850:	f7fc fa31 	bl	8001cb6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005854:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005858:	461a      	mov	r2, r3
 800585a:	211d      	movs	r1, #29
 800585c:	4803      	ldr	r0, [pc, #12]	; (800586c <low_level_init+0x190>)
 800585e:	f7fc f9c2 	bl	8001be6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005862:	bf00      	nop
 8005864:	3740      	adds	r7, #64	; 0x40
 8005866:	46bd      	mov	sp, r7
 8005868:	bdb0      	pop	{r4, r5, r7, pc}
 800586a:	bf00      	nop
 800586c:	200061a4 	.word	0x200061a4
 8005870:	40028000 	.word	0x40028000
 8005874:	200061ec 	.word	0x200061ec
 8005878:	200048d4 	.word	0x200048d4
 800587c:	20004954 	.word	0x20004954
 8005880:	20006124 	.word	0x20006124
 8005884:	20000468 	.word	0x20000468
 8005888:	0801a420 	.word	0x0801a420

0800588c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	; 0x28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005896:	4b4b      	ldr	r3, [pc, #300]	; (80059c4 <low_level_output+0x138>)
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80058ae:	4b45      	ldr	r3, [pc, #276]	; (80059c4 <low_level_output+0x138>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	e05a      	b.n	8005974 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da03      	bge.n	80058ce <low_level_output+0x42>
      {
        errval = ERR_USE;
 80058c6:	23f8      	movs	r3, #248	; 0xf8
 80058c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80058cc:	e05c      	b.n	8005988 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	895b      	ldrh	r3, [r3, #10]
 80058d2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80058d8:	e02f      	b.n	800593a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	18d0      	adds	r0, r2, r3
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	18d1      	adds	r1, r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80058ee:	3304      	adds	r3, #4
 80058f0:	461a      	mov	r2, r3
 80058f2:	f013 fd07 	bl	8019304 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	da03      	bge.n	800590c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005904:	23f8      	movs	r3, #248	; 0xf8
 8005906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800590a:	e03d      	b.n	8005988 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800591c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005928:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005934:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4413      	add	r3, r2
 8005940:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005944:	4293      	cmp	r3, r2
 8005946:	d8c8      	bhi.n	80058da <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	18d0      	adds	r0, r2, r3
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4413      	add	r3, r2
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4619      	mov	r1, r3
 800595a:	f013 fcd3 	bl	8019304 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	623b      	str	r3, [r7, #32]
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1a1      	bne.n	80058be <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	4811      	ldr	r0, [pc, #68]	; (80059c4 <low_level_output+0x138>)
 800597e:	f7fb ff45 	bl	800180c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005988:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <low_level_output+0x138>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005990:	3314      	adds	r3, #20
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00d      	beq.n	80059b8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <low_level_output+0x138>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a4:	3314      	adds	r3, #20
 80059a6:	2220      	movs	r2, #32
 80059a8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80059aa:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <low_level_output+0x138>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b2:	3304      	adds	r3, #4
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80059b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3728      	adds	r7, #40	; 0x28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	200061a4 	.word	0x200061a4

080059c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08c      	sub	sp, #48	; 0x30
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80059ec:	484f      	ldr	r0, [pc, #316]	; (8005b2c <low_level_input+0x164>)
 80059ee:	f7fb fff7 	bl	80019e0 <HAL_ETH_GetReceivedFrame_IT>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <low_level_input+0x34>

    return NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e092      	b.n	8005b22 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80059fc:	4b4b      	ldr	r3, [pc, #300]	; (8005b2c <low_level_input+0x164>)
 80059fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a00:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005a02:	4b4a      	ldr	r3, [pc, #296]	; (8005b2c <low_level_input+0x164>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005a08:	89fb      	ldrh	r3, [r7, #14]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005a0e:	89fb      	ldrh	r3, [r7, #14]
 8005a10:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005a14:	4619      	mov	r1, r3
 8005a16:	2000      	movs	r0, #0
 8005a18:	f007 fbb6 	bl	800d188 <pbuf_alloc>
 8005a1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d04b      	beq.n	8005abc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005a24:	4b41      	ldr	r3, [pc, #260]	; (8005b2c <low_level_input+0x164>)
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a32:	e040      	b.n	8005ab6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	895b      	ldrh	r3, [r3, #10]
 8005a38:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005a3e:	e021      	b.n	8005a84 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	18d0      	adds	r0, r2, r3
 8005a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	18d1      	adds	r1, r2, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005a54:	3304      	adds	r3, #4
 8005a56:	461a      	mov	r2, r3
 8005a58:	f013 fc54 	bl	8019304 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005a72:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005a7e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d8d6      	bhi.n	8005a40 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	18d0      	adds	r0, r2, r3
 8005a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	f013 fc2e 	bl	8019304 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	4413      	add	r3, r2
 8005aae:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1bb      	bne.n	8005a34 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005abc:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <low_level_input+0x164>)
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	e00b      	b.n	8005ae0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3301      	adds	r3, #1
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <low_level_input+0x164>)
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d3ee      	bcc.n	8005ac8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005aea:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <low_level_input+0x164>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005af0:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <low_level_input+0x164>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af8:	3314      	adds	r3, #20
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00d      	beq.n	8005b20 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005b04:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <low_level_input+0x164>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	2280      	movs	r2, #128	; 0x80
 8005b10:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <low_level_input+0x164>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3730      	adds	r7, #48	; 0x30
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	200061a4 	.word	0x200061a4

08005b30 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005b3c:	4b12      	ldr	r3, [pc, #72]	; (8005b88 <ethernetif_input+0x58>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f04f 31ff 	mov.w	r1, #4294967295
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fa8d 	bl	8006064 <osSemaphoreWait>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1f5      	bne.n	8005b3c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005b50:	480e      	ldr	r0, [pc, #56]	; (8005b8c <ethernetif_input+0x5c>)
 8005b52:	f013 fb2b 	bl	80191ac <sys_mutex_lock>
        p = low_level_input( netif );
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff ff36 	bl	80059c8 <low_level_input>
 8005b5c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	68f9      	ldr	r1, [r7, #12]
 8005b6a:	68b8      	ldr	r0, [r7, #8]
 8005b6c:	4798      	blx	r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005b74:	68b8      	ldr	r0, [r7, #8]
 8005b76:	f007 fde7 	bl	800d748 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005b7a:	4804      	ldr	r0, [pc, #16]	; (8005b8c <ethernetif_input+0x5c>)
 8005b7c:	f013 fb25 	bl	80191ca <sys_mutex_unlock>
      } while(p!=NULL);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e4      	bne.n	8005b50 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005b86:	e7d9      	b.n	8005b3c <ethernetif_input+0xc>
 8005b88:	20000468 	.word	0x20000468
 8005b8c:	200079fc 	.word	0x200079fc

08005b90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <ethernetif_init+0x1c>
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <ethernetif_init+0x48>)
 8005ba0:	f240 2239 	movw	r2, #569	; 0x239
 8005ba4:	490d      	ldr	r1, [pc, #52]	; (8005bdc <ethernetif_init+0x4c>)
 8005ba6:	480e      	ldr	r0, [pc, #56]	; (8005be0 <ethernetif_init+0x50>)
 8005ba8:	f013 fbc0 	bl	801932c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2273      	movs	r2, #115	; 0x73
 8005bb0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2274      	movs	r2, #116	; 0x74
 8005bb8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <ethernetif_init+0x54>)
 8005bc0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <ethernetif_init+0x58>)
 8005bc6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fd87 	bl	80056dc <low_level_init>

  return ERR_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	0801a43c 	.word	0x0801a43c
 8005bdc:	0801a458 	.word	0x0801a458
 8005be0:	0801a468 	.word	0x0801a468
 8005be4:	08017191 	.word	0x08017191
 8005be8:	0800588d 	.word	0x0800588d

08005bec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005bf0:	f7fb fa66 	bl	80010c0 <HAL_GetTick>
 8005bf4:	4603      	mov	r3, r0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005c0c:	f107 0308 	add.w	r3, r7, #8
 8005c10:	461a      	mov	r2, r3
 8005c12:	2101      	movs	r1, #1
 8005c14:	4816      	ldr	r0, [pc, #88]	; (8005c70 <ethernetif_set_link+0x74>)
 8005c16:	f7fb ffe6 	bl	8001be6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d108      	bne.n	8005c44 <ethernetif_set_link+0x48>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f007 f939 	bl	800ceb4 <netif_set_link_up>
 8005c42:	e011      	b.n	8005c68 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c4c:	089b      	lsrs	r3, r3, #2
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <ethernetif_set_link+0x6c>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d104      	bne.n	8005c68 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f007 f95e 	bl	800cf24 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005c68:	20c8      	movs	r0, #200	; 0xc8
 8005c6a:	f000 f916 	bl	8005e9a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005c6e:	e7cd      	b.n	8005c0c <ethernetif_set_link+0x10>
 8005c70:	200061a4 	.word	0x200061a4

08005c74 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c8a:	089b      	lsrs	r3, r3, #2
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d05d      	beq.n	8005d52 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005c96:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d03f      	beq.n	8005d1e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005c9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4830      	ldr	r0, [pc, #192]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005ca6:	f7fc f806 	bl	8001cb6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005caa:	f7fb fa09 	bl	80010c0 <HAL_GetTick>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005cb2:	f107 0308 	add.w	r3, r7, #8
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2101      	movs	r1, #1
 8005cba:	482b      	ldr	r0, [pc, #172]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005cbc:	f7fb ff93 	bl	8001be6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005cc0:	f7fb f9fe 	bl	80010c0 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cce:	d828      	bhi.n	8005d22 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0eb      	beq.n	8005cb2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005cda:	f107 0308 	add.w	r3, r7, #8
 8005cde:	461a      	mov	r2, r3
 8005ce0:	211f      	movs	r1, #31
 8005ce2:	4821      	ldr	r0, [pc, #132]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005ce4:	f7fb ff7f 	bl	8001be6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e002      	b.n	8005d02 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005d0c:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	609a      	str	r2, [r3, #8]
 8005d12:	e016      	b.n	8005d42 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005d14:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d1a:	609a      	str	r2, [r3, #8]
 8005d1c:	e011      	b.n	8005d42 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005d1e:	bf00      	nop
 8005d20:	e000      	b.n	8005d24 <ethernetif_update_config+0xb0>
          goto error;
 8005d22:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005d24:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	08db      	lsrs	r3, r3, #3
 8005d2a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005d2c:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005d34:	4313      	orrs	r3, r2
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	480a      	ldr	r0, [pc, #40]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005d3e:	f7fb ffba 	bl	8001cb6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005d42:	2100      	movs	r1, #0
 8005d44:	4808      	ldr	r0, [pc, #32]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005d46:	f7fc f87b 	bl	8001e40 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005d4a:	4807      	ldr	r0, [pc, #28]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005d4c:	f7fc f819 	bl	8001d82 <HAL_ETH_Start>
 8005d50:	e002      	b.n	8005d58 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005d52:	4805      	ldr	r0, [pc, #20]	; (8005d68 <ethernetif_update_config+0xf4>)
 8005d54:	f7fc f844 	bl	8001de0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f807 	bl	8005d6c <ethernetif_notify_conn_changed>
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200061a4 	.word	0x200061a4

08005d6c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d92:	2b84      	cmp	r3, #132	; 0x84
 8005d94:	d005      	beq.n	8005da2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3303      	adds	r3, #3
 8005da0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005da2:	68fb      	ldr	r3, [r7, #12]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db6:	f3ef 8305 	mrs	r3, IPSR
 8005dba:	607b      	str	r3, [r7, #4]
  return(result);
 8005dbc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bf14      	ite	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	2300      	moveq	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005dd8:	f001 fd08 	bl	80077ec <vTaskStartScheduler>
  
  return osOK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005de6:	f7ff ffe3 	bl	8005db0 <inHandlerMode>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005df0:	f001 fe14 	bl	8007a1c <xTaskGetTickCountFromISR>
 8005df4:	4603      	mov	r3, r0
 8005df6:	e002      	b.n	8005dfe <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005df8:	f001 fe00 	bl	80079fc <xTaskGetTickCount>
 8005dfc:	4603      	mov	r3, r0
  }
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e04:	b089      	sub	sp, #36	; 0x24
 8005e06:	af04      	add	r7, sp, #16
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d020      	beq.n	8005e56 <osThreadCreate+0x54>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01c      	beq.n	8005e56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685c      	ldr	r4, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681d      	ldr	r5, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691e      	ldr	r6, [r3, #16]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff ffa6 	bl	8005d80 <makeFreeRtosPriority>
 8005e34:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e3e:	9202      	str	r2, [sp, #8]
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	9100      	str	r1, [sp, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	4632      	mov	r2, r6
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f001 fb0a 	bl	8007464 <xTaskCreateStatic>
 8005e50:	4603      	mov	r3, r0
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e01c      	b.n	8005e90 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685c      	ldr	r4, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e62:	b29e      	uxth	r6, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff ff88 	bl	8005d80 <makeFreeRtosPriority>
 8005e70:	4602      	mov	r2, r0
 8005e72:	f107 030c 	add.w	r3, r7, #12
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	9200      	str	r2, [sp, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4620      	mov	r0, r4
 8005e82:	f001 fb49 	bl	8007518 <xTaskCreate>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d001      	beq.n	8005e90 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e000      	b.n	8005e92 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e90:	68fb      	ldr	r3, [r7, #12]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <osDelay+0x16>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	e000      	b.n	8005eb2 <osDelay+0x18>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fc66 	bl	8007784 <vTaskDelay>
  
  return osOK;
 8005eb8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	2001      	movs	r0, #1
 8005eda:	f000 fc80 	bl	80067de <xQueueCreateMutexStatic>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	e003      	b.n	8005eea <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	f000 fc63 	bl	80067ae <xQueueCreateMutex>
 8005ee8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <osMutexWait+0x18>
    return osErrorParameter;
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	e03a      	b.n	8005f82 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f16:	d103      	bne.n	8005f20 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	e009      	b.n	8005f34 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d006      	beq.n	8005f34 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <osMutexWait+0x40>
      ticks = 1;
 8005f30:	2301      	movs	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005f34:	f7ff ff3c 	bl	8005db0 <inHandlerMode>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d017      	beq.n	8005f6e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005f3e:	f107 0308 	add.w	r3, r7, #8
 8005f42:	461a      	mov	r2, r3
 8005f44:	2100      	movs	r1, #0
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 f860 	bl	800700c <xQueueReceiveFromISR>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d001      	beq.n	8005f56 <osMutexWait+0x62>
      return osErrorOS;
 8005f52:	23ff      	movs	r3, #255	; 0xff
 8005f54:	e015      	b.n	8005f82 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d011      	beq.n	8005f80 <osMutexWait+0x8c>
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <osMutexWait+0x98>)
 8005f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	e008      	b.n	8005f80 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005f6e:	68f9      	ldr	r1, [r7, #12]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 ff43 	bl	8006dfc <xQueueSemaphoreTake>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d001      	beq.n	8005f80 <osMutexWait+0x8c>
    return osErrorOS;
 8005f7c:	23ff      	movs	r3, #255	; 0xff
 8005f7e:	e000      	b.n	8005f82 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	e000ed04 	.word	0xe000ed04

08005f90 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005fa0:	f7ff ff06 	bl	8005db0 <inHandlerMode>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d016      	beq.n	8005fd8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005faa:	f107 0308 	add.w	r3, r7, #8
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fdbd 	bl	8006b30 <xQueueGiveFromISR>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d001      	beq.n	8005fc0 <osMutexRelease+0x30>
      return osErrorOS;
 8005fbc:	23ff      	movs	r3, #255	; 0xff
 8005fbe:	e017      	b.n	8005ff0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d013      	beq.n	8005fee <osMutexRelease+0x5e>
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <osMutexRelease+0x68>)
 8005fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	e00a      	b.n	8005fee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fc18 	bl	8006814 <xQueueGenericSend>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d001      	beq.n	8005fee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005fea:	23ff      	movs	r3, #255	; 0xff
 8005fec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d010      	beq.n	8006030 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10b      	bne.n	800602c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	2303      	movs	r3, #3
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	2200      	movs	r2, #0
 8006020:	2100      	movs	r1, #0
 8006022:	2001      	movs	r0, #1
 8006024:	f000 fad8 	bl	80065d8 <xQueueGenericCreateStatic>
 8006028:	4603      	mov	r3, r0
 800602a:	e016      	b.n	800605a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	e014      	b.n	800605a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d110      	bne.n	8006058 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8006036:	2203      	movs	r2, #3
 8006038:	2100      	movs	r1, #0
 800603a:	2001      	movs	r0, #1
 800603c:	f000 fb3f 	bl	80066be <xQueueGenericCreate>
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <osSemaphoreCreate+0x58>
 8006048:	2300      	movs	r3, #0
 800604a:	2200      	movs	r2, #0
 800604c:	2100      	movs	r1, #0
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fbe0 	bl	8006814 <xQueueGenericSend>
      return sema;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	e000      	b.n	800605a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006058:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800606e:	2300      	movs	r3, #0
 8006070:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	e03a      	b.n	80060f2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d103      	bne.n	8006090 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006088:	f04f 33ff 	mov.w	r3, #4294967295
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	e009      	b.n	80060a4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d006      	beq.n	80060a4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <osSemaphoreWait+0x40>
      ticks = 1;
 80060a0:	2301      	movs	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80060a4:	f7ff fe84 	bl	8005db0 <inHandlerMode>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d017      	beq.n	80060de <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80060ae:	f107 0308 	add.w	r3, r7, #8
 80060b2:	461a      	mov	r2, r3
 80060b4:	2100      	movs	r1, #0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 ffa8 	bl	800700c <xQueueReceiveFromISR>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d001      	beq.n	80060c6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80060c2:	23ff      	movs	r3, #255	; 0xff
 80060c4:	e015      	b.n	80060f2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d011      	beq.n	80060f0 <osSemaphoreWait+0x8c>
 80060cc:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <osSemaphoreWait+0x98>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	e008      	b.n	80060f0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80060de:	68f9      	ldr	r1, [r7, #12]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fe8b 	bl	8006dfc <xQueueSemaphoreTake>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d001      	beq.n	80060f0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80060ec:	23ff      	movs	r3, #255	; 0xff
 80060ee:	e000      	b.n	80060f2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	e000ed04 	.word	0xe000ed04

08006100 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800610c:	2300      	movs	r3, #0
 800610e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006110:	f7ff fe4e 	bl	8005db0 <inHandlerMode>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d016      	beq.n	8006148 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800611a:	f107 0308 	add.w	r3, r7, #8
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fd05 	bl	8006b30 <xQueueGiveFromISR>
 8006126:	4603      	mov	r3, r0
 8006128:	2b01      	cmp	r3, #1
 800612a:	d001      	beq.n	8006130 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800612c:	23ff      	movs	r3, #255	; 0xff
 800612e:	e017      	b.n	8006160 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d013      	beq.n	800615e <osSemaphoreRelease+0x5e>
 8006136:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <osSemaphoreRelease+0x68>)
 8006138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	e00a      	b.n	800615e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006148:	2300      	movs	r3, #0
 800614a:	2200      	movs	r2, #0
 800614c:	2100      	movs	r1, #0
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fb60 	bl	8006814 <xQueueGenericSend>
 8006154:	4603      	mov	r3, r0
 8006156:	2b01      	cmp	r3, #1
 8006158:	d001      	beq.n	800615e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800615a:	23ff      	movs	r3, #255	; 0xff
 800615c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800615e:	68fb      	ldr	r3, [r7, #12]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006174:	f7ff fe1c 	bl	8005db0 <inHandlerMode>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800617e:	2382      	movs	r3, #130	; 0x82
 8006180:	e003      	b.n	800618a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fff9 	bl	800717a <vQueueDelete>

  return osOK; 
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006192:	b590      	push	{r4, r7, lr}
 8006194:	b085      	sub	sp, #20
 8006196:	af02      	add	r7, sp, #8
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d012      	beq.n	80061ca <osMessageCreate+0x38>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00e      	beq.n	80061ca <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6859      	ldr	r1, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68dc      	ldr	r4, [r3, #12]
 80061bc:	2300      	movs	r3, #0
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	4623      	mov	r3, r4
 80061c2:	f000 fa09 	bl	80065d8 <xQueueGenericCreateStatic>
 80061c6:	4603      	mov	r3, r0
 80061c8:	e008      	b.n	80061dc <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	4619      	mov	r1, r3
 80061d6:	f000 fa72 	bl	80066be <xQueueGenericCreate>
 80061da:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd90      	pop	{r4, r7, pc}

080061e4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <osMessagePut+0x1e>
    ticks = 1;
 80061fe:	2301      	movs	r3, #1
 8006200:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006202:	f7ff fdd5 	bl	8005db0 <inHandlerMode>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d018      	beq.n	800623e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800620c:	f107 0210 	add.w	r2, r7, #16
 8006210:	f107 0108 	add.w	r1, r7, #8
 8006214:	2300      	movs	r3, #0
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fbf6 	bl	8006a08 <xQueueGenericSendFromISR>
 800621c:	4603      	mov	r3, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	d001      	beq.n	8006226 <osMessagePut+0x42>
      return osErrorOS;
 8006222:	23ff      	movs	r3, #255	; 0xff
 8006224:	e018      	b.n	8006258 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d014      	beq.n	8006256 <osMessagePut+0x72>
 800622c:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <osMessagePut+0x7c>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	e00b      	b.n	8006256 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800623e:	f107 0108 	add.w	r1, r7, #8
 8006242:	2300      	movs	r3, #0
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fae4 	bl	8006814 <xQueueGenericSend>
 800624c:	4603      	mov	r3, r0
 800624e:	2b01      	cmp	r3, #1
 8006250:	d001      	beq.n	8006256 <osMessagePut+0x72>
      return osErrorOS;
 8006252:	23ff      	movs	r3, #255	; 0xff
 8006254:	e000      	b.n	8006258 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b08b      	sub	sp, #44	; 0x2c
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800627e:	2380      	movs	r3, #128	; 0x80
 8006280:	617b      	str	r3, [r7, #20]
    return event;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	461c      	mov	r4, r3
 8006286:	f107 0314 	add.w	r3, r7, #20
 800628a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800628e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006292:	e054      	b.n	800633e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006294:	2300      	movs	r3, #0
 8006296:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d103      	bne.n	80062ac <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80062a4:	f04f 33ff 	mov.w	r3, #4294967295
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
 80062aa:	e009      	b.n	80062c0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d006      	beq.n	80062c0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <osMessageGet+0x5c>
      ticks = 1;
 80062bc:	2301      	movs	r3, #1
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80062c0:	f7ff fd76 	bl	8005db0 <inHandlerMode>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01c      	beq.n	8006304 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80062ca:	f107 0220 	add.w	r2, r7, #32
 80062ce:	f107 0314 	add.w	r3, r7, #20
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	68b8      	ldr	r0, [r7, #8]
 80062d8:	f000 fe98 	bl	800700c <xQueueReceiveFromISR>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d102      	bne.n	80062e8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80062e2:	2310      	movs	r3, #16
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	e001      	b.n	80062ec <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d01d      	beq.n	800632e <osMessageGet+0xca>
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <osMessageGet+0xe4>)
 80062f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	e014      	b.n	800632e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006304:	f107 0314 	add.w	r3, r7, #20
 8006308:	3304      	adds	r3, #4
 800630a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630c:	4619      	mov	r1, r3
 800630e:	68b8      	ldr	r0, [r7, #8]
 8006310:	f000 fc98 	bl	8006c44 <xQueueReceive>
 8006314:	4603      	mov	r3, r0
 8006316:	2b01      	cmp	r3, #1
 8006318:	d102      	bne.n	8006320 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800631a:	2310      	movs	r3, #16
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	e006      	b.n	800632e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <osMessageGet+0xc6>
 8006326:	2300      	movs	r3, #0
 8006328:	e000      	b.n	800632c <osMessageGet+0xc8>
 800632a:	2340      	movs	r3, #64	; 0x40
 800632c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	461c      	mov	r4, r3
 8006332:	f107 0314 	add.w	r3, r7, #20
 8006336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800633a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	372c      	adds	r7, #44	; 0x2c
 8006342:	46bd      	mov	sp, r7
 8006344:	bd90      	pop	{r4, r7, pc}
 8006346:	bf00      	nop
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006354:	f7ff fd2c 	bl	8005db0 <inHandlerMode>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 feee 	bl	8007140 <uxQueueMessagesWaitingFromISR>
 8006364:	4603      	mov	r3, r0
 8006366:	e003      	b.n	8006370 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fecc 	bl	8007106 <uxQueueMessagesWaiting>
 800636e:	4603      	mov	r3, r0
  }
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006380:	f7ff fd16 	bl	8005db0 <inHandlerMode>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <osMessageDelete+0x16>
    return osErrorISR;
 800638a:	2382      	movs	r3, #130	; 0x82
 800638c:	e003      	b.n	8006396 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fef3 	bl	800717a <vQueueDelete>

  return osOK; 
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f103 0208 	add.w	r2, r3, #8
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f103 0208 	add.w	r2, r3, #8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f103 0208 	add.w	r2, r3, #8
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]
}
 8006434:	bf00      	nop
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d103      	bne.n	8006460 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e00c      	b.n	800647a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3308      	adds	r3, #8
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	e002      	b.n	800646e <vListInsert+0x2e>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	429a      	cmp	r2, r3
 8006478:	d2f6      	bcs.n	8006468 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	601a      	str	r2, [r3, #0]
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6892      	ldr	r2, [r2, #8]
 80064c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6852      	ldr	r2, [r2, #4]
 80064d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d103      	bne.n	80064e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	1e5a      	subs	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d109      	bne.n	8006530 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	e7fe      	b.n	800652e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006530:	f002 f8cc 	bl	80086cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653c:	68f9      	ldr	r1, [r7, #12]
 800653e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	441a      	add	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	3b01      	subs	r3, #1
 8006562:	68f9      	ldr	r1, [r7, #12]
 8006564:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006566:	fb01 f303 	mul.w	r3, r1, r3
 800656a:	441a      	add	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	22ff      	movs	r2, #255	; 0xff
 8006574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	22ff      	movs	r2, #255	; 0xff
 800657c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d114      	bne.n	80065b0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d01a      	beq.n	80065c4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3310      	adds	r3, #16
 8006592:	4618      	mov	r0, r3
 8006594:	f001 fb8a 	bl	8007cac <xTaskRemoveFromEventList>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d012      	beq.n	80065c4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800659e:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <xQueueGenericReset+0xcc>)
 80065a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	e009      	b.n	80065c4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3310      	adds	r3, #16
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff fef2 	bl	800639e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3324      	adds	r3, #36	; 0x24
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff feed 	bl	800639e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065c4:	f002 f8b0 	bl	8008728 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065c8:	2301      	movs	r3, #1
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08e      	sub	sp, #56	; 0x38
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <xQueueGenericCreateStatic+0x28>
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fe:	e7fe      	b.n	80065fe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <xQueueGenericCreateStatic+0x42>
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
 8006618:	e7fe      	b.n	8006618 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <xQueueGenericCreateStatic+0x4e>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <xQueueGenericCreateStatic+0x52>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <xQueueGenericCreateStatic+0x54>
 800662a:	2300      	movs	r3, #0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d109      	bne.n	8006644 <xQueueGenericCreateStatic+0x6c>
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	623b      	str	r3, [r7, #32]
 8006642:	e7fe      	b.n	8006642 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <xQueueGenericCreateStatic+0x78>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <xQueueGenericCreateStatic+0x7c>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <xQueueGenericCreateStatic+0x7e>
 8006654:	2300      	movs	r3, #0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <xQueueGenericCreateStatic+0x96>
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	e7fe      	b.n	800666c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800666e:	2348      	movs	r3, #72	; 0x48
 8006670:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b48      	cmp	r3, #72	; 0x48
 8006676:	d009      	beq.n	800668c <xQueueGenericCreateStatic+0xb4>
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	e7fe      	b.n	800668a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800668c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00d      	beq.n	80066b4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066a0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f844 	bl	800673c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3730      	adds	r7, #48	; 0x30
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b08a      	sub	sp, #40	; 0x28
 80066c2:	af02      	add	r7, sp, #8
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	4613      	mov	r3, r2
 80066ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <xQueueGenericCreate+0x28>
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	e7fe      	b.n	80066e4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61fb      	str	r3, [r7, #28]
 80066f0:	e004      	b.n	80066fc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	3348      	adds	r3, #72	; 0x48
 8006700:	4618      	mov	r0, r3
 8006702:	f002 f8fd 	bl	8008900 <pvPortMalloc>
 8006706:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d011      	beq.n	8006732 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	3348      	adds	r3, #72	; 0x48
 8006716:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006720:	79fa      	ldrb	r2, [r7, #7]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	4613      	mov	r3, r2
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f805 	bl	800673c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006732:	69bb      	ldr	r3, [r7, #24]
	}
 8006734:	4618      	mov	r0, r3
 8006736:	3720      	adds	r7, #32
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e002      	b.n	800675e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800676a:	2101      	movs	r1, #1
 800676c:	69b8      	ldr	r0, [r7, #24]
 800676e:	f7ff fecb 	bl	8006508 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006772:	bf00      	nop
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00e      	beq.n	80067a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800679a:	2300      	movs	r3, #0
 800679c:	2200      	movs	r2, #0
 800679e:	2100      	movs	r1, #0
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f837 	bl	8006814 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b086      	sub	sp, #24
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	4603      	mov	r3, r0
 80067b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067b8:	2301      	movs	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	2300      	movs	r3, #0
 80067be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6939      	ldr	r1, [r7, #16]
 80067c6:	6978      	ldr	r0, [r7, #20]
 80067c8:	f7ff ff79 	bl	80066be <xQueueGenericCreate>
 80067cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7ff ffd3 	bl	800677a <prvInitialiseMutex>

		return xNewQueue;
 80067d4:	68fb      	ldr	r3, [r7, #12]
	}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b088      	sub	sp, #32
 80067e2:	af02      	add	r7, sp, #8
 80067e4:	4603      	mov	r3, r0
 80067e6:	6039      	str	r1, [r7, #0]
 80067e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067ea:	2301      	movs	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	2300      	movs	r3, #0
 80067f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80067f2:	79fb      	ldrb	r3, [r7, #7]
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2200      	movs	r2, #0
 80067fa:	6939      	ldr	r1, [r7, #16]
 80067fc:	6978      	ldr	r0, [r7, #20]
 80067fe:	f7ff feeb 	bl	80065d8 <xQueueGenericCreateStatic>
 8006802:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff ffb8 	bl	800677a <prvInitialiseMutex>

		return xNewQueue;
 800680a:	68fb      	ldr	r3, [r7, #12]
	}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08e      	sub	sp, #56	; 0x38
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006822:	2300      	movs	r3, #0
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <xQueueGenericSend+0x30>
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	62bb      	str	r3, [r7, #40]	; 0x28
 8006842:	e7fe      	b.n	8006842 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d103      	bne.n	8006852 <xQueueGenericSend+0x3e>
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <xQueueGenericSend+0x42>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <xQueueGenericSend+0x44>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <xQueueGenericSend+0x5c>
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
 800686e:	e7fe      	b.n	800686e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d103      	bne.n	800687e <xQueueGenericSend+0x6a>
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <xQueueGenericSend+0x6e>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <xQueueGenericSend+0x70>
 8006882:	2300      	movs	r3, #0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d109      	bne.n	800689c <xQueueGenericSend+0x88>
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	623b      	str	r3, [r7, #32]
 800689a:	e7fe      	b.n	800689a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800689c:	f001 fbbc 	bl	8008018 <xTaskGetSchedulerState>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <xQueueGenericSend+0x98>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <xQueueGenericSend+0x9c>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <xQueueGenericSend+0x9e>
 80068b0:	2300      	movs	r3, #0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <xQueueGenericSend+0xb6>
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e7fe      	b.n	80068c8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068ca:	f001 feff 	bl	80086cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <xQueueGenericSend+0xcc>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d129      	bne.n	8006934 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068e6:	f000 fc82 	bl	80071ee <prvCopyDataToQueue>
 80068ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d010      	beq.n	8006916 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	3324      	adds	r3, #36	; 0x24
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 f9d7 	bl	8007cac <xTaskRemoveFromEventList>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d013      	beq.n	800692c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006904:	4b3f      	ldr	r3, [pc, #252]	; (8006a04 <xQueueGenericSend+0x1f0>)
 8006906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	e00a      	b.n	800692c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d007      	beq.n	800692c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800691c:	4b39      	ldr	r3, [pc, #228]	; (8006a04 <xQueueGenericSend+0x1f0>)
 800691e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800692c:	f001 fefc 	bl	8008728 <vPortExitCritical>
				return pdPASS;
 8006930:	2301      	movs	r3, #1
 8006932:	e063      	b.n	80069fc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800693a:	f001 fef5 	bl	8008728 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800693e:	2300      	movs	r3, #0
 8006940:	e05c      	b.n	80069fc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006948:	f107 0314 	add.w	r3, r7, #20
 800694c:	4618      	mov	r0, r3
 800694e:	f001 fa0f 	bl	8007d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006952:	2301      	movs	r3, #1
 8006954:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006956:	f001 fee7 	bl	8008728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800695a:	f000 ffa5 	bl	80078a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800695e:	f001 feb5 	bl	80086cc <vPortEnterCritical>
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006968:	b25b      	sxtb	r3, r3
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d103      	bne.n	8006978 <xQueueGenericSend+0x164>
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800697e:	b25b      	sxtb	r3, r3
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d103      	bne.n	800698e <xQueueGenericSend+0x17a>
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800698e:	f001 fecb 	bl	8008728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006992:	1d3a      	adds	r2, r7, #4
 8006994:	f107 0314 	add.w	r3, r7, #20
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f001 f9fe 	bl	8007d9c <xTaskCheckForTimeOut>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d124      	bne.n	80069f0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069a8:	f000 fd19 	bl	80073de <prvIsQueueFull>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d018      	beq.n	80069e4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	3310      	adds	r3, #16
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 f952 	bl	8007c64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c2:	f000 fca4 	bl	800730e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069c6:	f000 ff7d 	bl	80078c4 <xTaskResumeAll>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f47f af7c 	bne.w	80068ca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80069d2:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <xQueueGenericSend+0x1f0>)
 80069d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	e772      	b.n	80068ca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069e6:	f000 fc92 	bl	800730e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069ea:	f000 ff6b 	bl	80078c4 <xTaskResumeAll>
 80069ee:	e76c      	b.n	80068ca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069f2:	f000 fc8c 	bl	800730e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069f6:	f000 ff65 	bl	80078c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3738      	adds	r7, #56	; 0x38
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08e      	sub	sp, #56	; 0x38
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d109      	bne.n	8006a34 <xQueueGenericSendFromISR+0x2c>
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
 8006a32:	e7fe      	b.n	8006a32 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <xQueueGenericSendFromISR+0x3a>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <xQueueGenericSendFromISR+0x3e>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <xQueueGenericSendFromISR+0x40>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <xQueueGenericSendFromISR+0x58>
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	623b      	str	r3, [r7, #32]
 8006a5e:	e7fe      	b.n	8006a5e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d103      	bne.n	8006a6e <xQueueGenericSendFromISR+0x66>
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <xQueueGenericSendFromISR+0x6a>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <xQueueGenericSendFromISR+0x6c>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <xQueueGenericSendFromISR+0x84>
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	e7fe      	b.n	8006a8a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a8c:	f001 fefa 	bl	8008884 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a90:	f3ef 8211 	mrs	r2, BASEPRI
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	61ba      	str	r2, [r7, #24]
 8006aa6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d302      	bcc.n	8006abe <xQueueGenericSendFromISR+0xb6>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d12c      	bne.n	8006b18 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ace:	f000 fb8e 	bl	80071ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ad2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ada:	d112      	bne.n	8006b02 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d016      	beq.n	8006b12 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 f8df 	bl	8007cac <xTaskRemoveFromEventList>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00e      	beq.n	8006b12 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00b      	beq.n	8006b12 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	e007      	b.n	8006b12 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b06:	3301      	adds	r3, #1
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	b25a      	sxtb	r2, r3
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b12:	2301      	movs	r3, #1
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006b16:	e001      	b.n	8006b1c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3738      	adds	r7, #56	; 0x38
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08e      	sub	sp, #56	; 0x38
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d109      	bne.n	8006b58 <xQueueGiveFromISR+0x28>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	623b      	str	r3, [r7, #32]
 8006b56:	e7fe      	b.n	8006b56 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <xQueueGiveFromISR+0x44>
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	e7fe      	b.n	8006b72 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <xQueueGiveFromISR+0x54>
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <xQueueGiveFromISR+0x58>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <xQueueGiveFromISR+0x5a>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d109      	bne.n	8006ba2 <xQueueGiveFromISR+0x72>
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	e7fe      	b.n	8006ba0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ba2:	f001 fe6f 	bl	8008884 <vPortValidateInterruptPriority>
	__asm volatile
 8006ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	617a      	str	r2, [r7, #20]
 8006bbc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006bbe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d22b      	bcs.n	8006c2a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006be4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bec:	d112      	bne.n	8006c14 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d016      	beq.n	8006c24 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	3324      	adds	r3, #36	; 0x24
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 f856 	bl	8007cac <xTaskRemoveFromEventList>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00e      	beq.n	8006c24 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00b      	beq.n	8006c24 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	e007      	b.n	8006c24 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c18:	3301      	adds	r3, #1
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	b25a      	sxtb	r2, r3
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c24:	2301      	movs	r3, #1
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
 8006c28:	e001      	b.n	8006c2e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3738      	adds	r7, #56	; 0x38
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08c      	sub	sp, #48	; 0x30
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c50:	2300      	movs	r3, #0
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <xQueueReceive+0x2e>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	623b      	str	r3, [r7, #32]
 8006c70:	e7fe      	b.n	8006c70 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d103      	bne.n	8006c80 <xQueueReceive+0x3c>
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <xQueueReceive+0x40>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <xQueueReceive+0x42>
 8006c84:	2300      	movs	r3, #0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d109      	bne.n	8006c9e <xQueueReceive+0x5a>
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	e7fe      	b.n	8006c9c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c9e:	f001 f9bb 	bl	8008018 <xTaskGetSchedulerState>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <xQueueReceive+0x6a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <xQueueReceive+0x6e>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <xQueueReceive+0x70>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d109      	bne.n	8006ccc <xQueueReceive+0x88>
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e7fe      	b.n	8006cca <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ccc:	f001 fcfe 	bl	80086cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01f      	beq.n	8006d1c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce0:	f000 faef 	bl	80072c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	1e5a      	subs	r2, r3, #1
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00f      	beq.n	8006d14 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	3310      	adds	r3, #16
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 ffd7 	bl	8007cac <xTaskRemoveFromEventList>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d04:	4b3c      	ldr	r3, [pc, #240]	; (8006df8 <xQueueReceive+0x1b4>)
 8006d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d14:	f001 fd08 	bl	8008728 <vPortExitCritical>
				return pdPASS;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e069      	b.n	8006df0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d103      	bne.n	8006d2a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d22:	f001 fd01 	bl	8008728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d26:	2300      	movs	r3, #0
 8006d28:	e062      	b.n	8006df0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d106      	bne.n	8006d3e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d30:	f107 0310 	add.w	r3, r7, #16
 8006d34:	4618      	mov	r0, r3
 8006d36:	f001 f81b 	bl	8007d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d3e:	f001 fcf3 	bl	8008728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d42:	f000 fdb1 	bl	80078a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d46:	f001 fcc1 	bl	80086cc <vPortEnterCritical>
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d50:	b25b      	sxtb	r3, r3
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	d103      	bne.n	8006d60 <xQueueReceive+0x11c>
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d103      	bne.n	8006d76 <xQueueReceive+0x132>
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d76:	f001 fcd7 	bl	8008728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d7a:	1d3a      	adds	r2, r7, #4
 8006d7c:	f107 0310 	add.w	r3, r7, #16
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 f80a 	bl	8007d9c <xTaskCheckForTimeOut>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d123      	bne.n	8006dd6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d90:	f000 fb0f 	bl	80073b2 <prvIsQueueEmpty>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d017      	beq.n	8006dca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	3324      	adds	r3, #36	; 0x24
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 ff5e 	bl	8007c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006daa:	f000 fab0 	bl	800730e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006dae:	f000 fd89 	bl	80078c4 <xTaskResumeAll>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d189      	bne.n	8006ccc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006db8:	4b0f      	ldr	r3, [pc, #60]	; (8006df8 <xQueueReceive+0x1b4>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	e780      	b.n	8006ccc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dcc:	f000 fa9f 	bl	800730e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dd0:	f000 fd78 	bl	80078c4 <xTaskResumeAll>
 8006dd4:	e77a      	b.n	8006ccc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd8:	f000 fa99 	bl	800730e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ddc:	f000 fd72 	bl	80078c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006de2:	f000 fae6 	bl	80073b2 <prvIsQueueEmpty>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f43f af6f 	beq.w	8006ccc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3730      	adds	r7, #48	; 0x30
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08e      	sub	sp, #56	; 0x38
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e06:	2300      	movs	r3, #0
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d109      	bne.n	8006e2c <xQueueSemaphoreTake+0x30>
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	623b      	str	r3, [r7, #32]
 8006e2a:	e7fe      	b.n	8006e2a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d009      	beq.n	8006e48 <xQueueSemaphoreTake+0x4c>
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	e7fe      	b.n	8006e46 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e48:	f001 f8e6 	bl	8008018 <xTaskGetSchedulerState>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <xQueueSemaphoreTake+0x5c>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <xQueueSemaphoreTake+0x60>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <xQueueSemaphoreTake+0x62>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <xQueueSemaphoreTake+0x7a>
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	e7fe      	b.n	8006e74 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e76:	f001 fc29 	bl	80086cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d024      	beq.n	8006ed0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	1e5a      	subs	r2, r3, #1
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d104      	bne.n	8006ea0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e96:	f001 fa79 	bl	800838c <pvTaskIncrementMutexHeldCount>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00f      	beq.n	8006ec8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	3310      	adds	r3, #16
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fefd 	bl	8007cac <xTaskRemoveFromEventList>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006eb8:	4b53      	ldr	r3, [pc, #332]	; (8007008 <xQueueSemaphoreTake+0x20c>)
 8006eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ec8:	f001 fc2e 	bl	8008728 <vPortExitCritical>
				return pdPASS;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e096      	b.n	8006ffe <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d110      	bne.n	8006ef8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <xQueueSemaphoreTake+0xf4>
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	617b      	str	r3, [r7, #20]
 8006eee:	e7fe      	b.n	8006eee <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ef0:	f001 fc1a 	bl	8008728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e082      	b.n	8006ffe <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006efe:	f107 030c 	add.w	r3, r7, #12
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 ff34 	bl	8007d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f0c:	f001 fc0c 	bl	8008728 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f10:	f000 fcca 	bl	80078a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f14:	f001 fbda 	bl	80086cc <vPortEnterCritical>
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f1e:	b25b      	sxtb	r3, r3
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f24:	d103      	bne.n	8006f2e <xQueueSemaphoreTake+0x132>
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d103      	bne.n	8006f44 <xQueueSemaphoreTake+0x148>
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f44:	f001 fbf0 	bl	8008728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f48:	463a      	mov	r2, r7
 8006f4a:	f107 030c 	add.w	r3, r7, #12
 8006f4e:	4611      	mov	r1, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 ff23 	bl	8007d9c <xTaskCheckForTimeOut>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d132      	bne.n	8006fc2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f5e:	f000 fa28 	bl	80073b2 <prvIsQueueEmpty>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d026      	beq.n	8006fb6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d109      	bne.n	8006f84 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006f70:	f001 fbac 	bl	80086cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 f86b 	bl	8008054 <xTaskPriorityInherit>
 8006f7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006f80:	f001 fbd2 	bl	8008728 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	3324      	adds	r3, #36	; 0x24
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fe69 	bl	8007c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f94:	f000 f9bb 	bl	800730e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f98:	f000 fc94 	bl	80078c4 <xTaskResumeAll>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f47f af69 	bne.w	8006e76 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006fa4:	4b18      	ldr	r3, [pc, #96]	; (8007008 <xQueueSemaphoreTake+0x20c>)
 8006fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	e75f      	b.n	8006e76 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006fb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fb8:	f000 f9a9 	bl	800730e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fbc:	f000 fc82 	bl	80078c4 <xTaskResumeAll>
 8006fc0:	e759      	b.n	8006e76 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fc4:	f000 f9a3 	bl	800730e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fc8:	f000 fc7c 	bl	80078c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fce:	f000 f9f0 	bl	80073b2 <prvIsQueueEmpty>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f43f af4e 	beq.w	8006e76 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00d      	beq.n	8006ffc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006fe0:	f001 fb74 	bl	80086cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006fe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fe6:	f000 f8ea 	bl	80071be <prvGetDisinheritPriorityAfterTimeout>
 8006fea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f932 	bl	800825c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006ff8:	f001 fb96 	bl	8008728 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3738      	adds	r7, #56	; 0x38
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08e      	sub	sp, #56	; 0x38
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <xQueueReceiveFromISR+0x2a>
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	623b      	str	r3, [r7, #32]
 8007034:	e7fe      	b.n	8007034 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <xQueueReceiveFromISR+0x38>
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <xQueueReceiveFromISR+0x3c>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <xQueueReceiveFromISR+0x3e>
 8007048:	2300      	movs	r3, #0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <xQueueReceiveFromISR+0x56>
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	e7fe      	b.n	8007060 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007062:	f001 fc0f 	bl	8008884 <vPortValidateInterruptPriority>
	__asm volatile
 8007066:	f3ef 8211 	mrs	r2, BASEPRI
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	61ba      	str	r2, [r7, #24]
 800707c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800707e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d02f      	beq.n	80070ee <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800709c:	f000 f911 	bl	80072c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	1e5a      	subs	r2, r3, #1
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80070a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d112      	bne.n	80070d8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d016      	beq.n	80070e8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	3310      	adds	r3, #16
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fdf4 	bl	8007cac <xTaskRemoveFromEventList>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00e      	beq.n	80070e8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00b      	beq.n	80070e8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e007      	b.n	80070e8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070dc:	3301      	adds	r3, #1
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	b25a      	sxtb	r2, r3
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80070e8:	2301      	movs	r3, #1
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
 80070ec:	e001      	b.n	80070f2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3738      	adds	r7, #56	; 0x38
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d109      	bne.n	8007128 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	60bb      	str	r3, [r7, #8]
 8007126:	e7fe      	b.n	8007126 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8007128:	f001 fad0 	bl	80086cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007132:	f001 faf9 	bl	8008728 <vPortExitCritical>

	return uxReturn;
 8007136:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d109      	bne.n	8007166 <uxQueueMessagesWaitingFromISR+0x26>
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e7fe      	b.n	8007164 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800716c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800716e:	4618      	mov	r0, r3
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d109      	bne.n	80071a0 <vQueueDelete+0x26>
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	e7fe      	b.n	800719e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f935 	bl	8007410 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f001 fc67 	bl	8008a84 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d006      	beq.n	80071dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f1c3 0307 	rsb	r3, r3, #7
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	e001      	b.n	80071e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80071e0:	68fb      	ldr	r3, [r7, #12]
	}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10d      	bne.n	8007228 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d14d      	bne.n	80072b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	4618      	mov	r0, r3
 800721a:	f000 ff9b 	bl	8008154 <xTaskPriorityDisinherit>
 800721e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
 8007226:	e043      	b.n	80072b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d119      	bne.n	8007262 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6858      	ldr	r0, [r3, #4]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	461a      	mov	r2, r3
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	f012 f863 	bl	8019304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	441a      	add	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	429a      	cmp	r2, r3
 8007256:	d32b      	bcc.n	80072b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	605a      	str	r2, [r3, #4]
 8007260:	e026      	b.n	80072b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68d8      	ldr	r0, [r3, #12]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	461a      	mov	r2, r3
 800726c:	68b9      	ldr	r1, [r7, #8]
 800726e:	f012 f849 	bl	8019304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	425b      	negs	r3, r3
 800727c:	441a      	add	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d207      	bcs.n	800729e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	425b      	negs	r3, r3
 8007298:	441a      	add	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d105      	bne.n	80072b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072b8:	697b      	ldr	r3, [r7, #20]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d018      	beq.n	8007306 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	441a      	add	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d303      	bcc.n	80072f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68d9      	ldr	r1, [r3, #12]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	461a      	mov	r2, r3
 8007300:	6838      	ldr	r0, [r7, #0]
 8007302:	f011 ffff 	bl	8019304 <memcpy>
	}
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007316:	f001 f9d9 	bl	80086cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007320:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007322:	e011      	b.n	8007348 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	d012      	beq.n	8007352 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fcbb 	bl	8007cac <xTaskRemoveFromEventList>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800733c:	f000 fd8e 	bl	8007e5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	3b01      	subs	r3, #1
 8007344:	b2db      	uxtb	r3, r3
 8007346:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dce9      	bgt.n	8007324 <prvUnlockQueue+0x16>
 8007350:	e000      	b.n	8007354 <prvUnlockQueue+0x46>
					break;
 8007352:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	22ff      	movs	r2, #255	; 0xff
 8007358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800735c:	f001 f9e4 	bl	8008728 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007360:	f001 f9b4 	bl	80086cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800736a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800736c:	e011      	b.n	8007392 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d012      	beq.n	800739c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3310      	adds	r3, #16
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fc96 	bl	8007cac <xTaskRemoveFromEventList>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007386:	f000 fd69 	bl	8007e5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	3b01      	subs	r3, #1
 800738e:	b2db      	uxtb	r3, r3
 8007390:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007392:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007396:	2b00      	cmp	r3, #0
 8007398:	dce9      	bgt.n	800736e <prvUnlockQueue+0x60>
 800739a:	e000      	b.n	800739e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800739c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	22ff      	movs	r2, #255	; 0xff
 80073a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073a6:	f001 f9bf 	bl	8008728 <vPortExitCritical>
}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073ba:	f001 f987 	bl	80086cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d102      	bne.n	80073cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073c6:	2301      	movs	r3, #1
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	e001      	b.n	80073d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073d0:	f001 f9aa 	bl	8008728 <vPortExitCritical>

	return xReturn;
 80073d4:	68fb      	ldr	r3, [r7, #12]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073e6:	f001 f971 	bl	80086cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d102      	bne.n	80073fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073f6:	2301      	movs	r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	e001      	b.n	8007400 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007400:	f001 f992 	bl	8008728 <vPortExitCritical>

	return xReturn;
 8007404:	68fb      	ldr	r3, [r7, #12]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e016      	b.n	800744c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800741e:	4a10      	ldr	r2, [pc, #64]	; (8007460 <vQueueUnregisterQueue+0x50>)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4413      	add	r3, r2
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	429a      	cmp	r2, r3
 800742c:	d10b      	bne.n	8007446 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800742e:	4a0c      	ldr	r2, [pc, #48]	; (8007460 <vQueueUnregisterQueue+0x50>)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2100      	movs	r1, #0
 8007434:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007438:	4a09      	ldr	r2, [pc, #36]	; (8007460 <vQueueUnregisterQueue+0x50>)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	4413      	add	r3, r2
 8007440:	2200      	movs	r2, #0
 8007442:	605a      	str	r2, [r3, #4]
				break;
 8007444:	e005      	b.n	8007452 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b07      	cmp	r3, #7
 8007450:	d9e5      	bls.n	800741e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	200079bc 	.word	0x200079bc

08007464 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08e      	sub	sp, #56	; 0x38
 8007468:	af04      	add	r7, sp, #16
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	2b00      	cmp	r3, #0
 8007476:	d109      	bne.n	800748c <xTaskCreateStatic+0x28>
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	623b      	str	r3, [r7, #32]
 800748a:	e7fe      	b.n	800748a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	2b00      	cmp	r3, #0
 8007490:	d109      	bne.n	80074a6 <xTaskCreateStatic+0x42>
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	e7fe      	b.n	80074a4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074a6:	2354      	movs	r3, #84	; 0x54
 80074a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b54      	cmp	r3, #84	; 0x54
 80074ae:	d009      	beq.n	80074c4 <xTaskCreateStatic+0x60>
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	e7fe      	b.n	80074c2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01e      	beq.n	800750a <xTaskCreateStatic+0xa6>
 80074cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01b      	beq.n	800750a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074e4:	2300      	movs	r3, #0
 80074e6:	9303      	str	r3, [sp, #12]
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	9302      	str	r3, [sp, #8]
 80074ec:	f107 0314 	add.w	r3, r7, #20
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f850 	bl	80075a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007504:	f000 f8d4 	bl	80076b0 <prvAddNewTaskToReadyList>
 8007508:	e001      	b.n	800750e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800750e:	697b      	ldr	r3, [r7, #20]
	}
 8007510:	4618      	mov	r0, r3
 8007512:	3728      	adds	r7, #40	; 0x28
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08c      	sub	sp, #48	; 0x30
 800751c:	af04      	add	r7, sp, #16
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	4613      	mov	r3, r2
 8007526:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4618      	mov	r0, r3
 800752e:	f001 f9e7 	bl	8008900 <pvPortMalloc>
 8007532:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00e      	beq.n	8007558 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800753a:	2054      	movs	r0, #84	; 0x54
 800753c:	f001 f9e0 	bl	8008900 <pvPortMalloc>
 8007540:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	631a      	str	r2, [r3, #48]	; 0x30
 800754e:	e005      	b.n	800755c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007550:	6978      	ldr	r0, [r7, #20]
 8007552:	f001 fa97 	bl	8008a84 <vPortFree>
 8007556:	e001      	b.n	800755c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007558:	2300      	movs	r3, #0
 800755a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d017      	beq.n	8007592 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800756a:	88fa      	ldrh	r2, [r7, #6]
 800756c:	2300      	movs	r3, #0
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	9302      	str	r3, [sp, #8]
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f80e 	bl	80075a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007586:	69f8      	ldr	r0, [r7, #28]
 8007588:	f000 f892 	bl	80076b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800758c:	2301      	movs	r3, #1
 800758e:	61bb      	str	r3, [r7, #24]
 8007590:	e002      	b.n	8007598 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007592:	f04f 33ff 	mov.w	r3, #4294967295
 8007596:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007598:	69bb      	ldr	r3, [r7, #24]
	}
 800759a:	4618      	mov	r0, r3
 800759c:	3720      	adds	r7, #32
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b088      	sub	sp, #32
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075ba:	3b01      	subs	r3, #1
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	f023 0307 	bic.w	r3, r3, #7
 80075c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d009      	beq.n	80075e8 <prvInitialiseNewTask+0x46>
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	e7fe      	b.n	80075e6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01f      	beq.n	800762e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075ee:	2300      	movs	r3, #0
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	e012      	b.n	800761a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	4413      	add	r3, r2
 80075fa:	7819      	ldrb	r1, [r3, #0]
 80075fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	4413      	add	r3, r2
 8007602:	3334      	adds	r3, #52	; 0x34
 8007604:	460a      	mov	r2, r1
 8007606:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4413      	add	r3, r2
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d006      	beq.n	8007622 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3301      	adds	r3, #1
 8007618:	61fb      	str	r3, [r7, #28]
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b0f      	cmp	r3, #15
 800761e:	d9e9      	bls.n	80075f4 <prvInitialiseNewTask+0x52>
 8007620:	e000      	b.n	8007624 <prvInitialiseNewTask+0x82>
			{
				break;
 8007622:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800762c:	e003      	b.n	8007636 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	2b06      	cmp	r3, #6
 800763a:	d901      	bls.n	8007640 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800763c:	2306      	movs	r3, #6
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007644:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800764a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	2200      	movs	r2, #0
 8007650:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	3304      	adds	r3, #4
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fec1 	bl	80063de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	3318      	adds	r3, #24
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe febc 	bl	80063de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	f1c3 0207 	rsb	r2, r3, #7
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800767a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	2200      	movs	r2, #0
 8007680:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	68f9      	ldr	r1, [r7, #12]
 800768e:	69b8      	ldr	r0, [r7, #24]
 8007690:	f000 fef6 	bl	8008480 <pxPortInitialiseStack>
 8007694:	4602      	mov	r2, r0
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076a6:	bf00      	nop
 80076a8:	3720      	adds	r7, #32
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076b8:	f001 f808 	bl	80086cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076bc:	4b2a      	ldr	r3, [pc, #168]	; (8007768 <prvAddNewTaskToReadyList+0xb8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3301      	adds	r3, #1
 80076c2:	4a29      	ldr	r2, [pc, #164]	; (8007768 <prvAddNewTaskToReadyList+0xb8>)
 80076c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076c6:	4b29      	ldr	r3, [pc, #164]	; (800776c <prvAddNewTaskToReadyList+0xbc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d109      	bne.n	80076e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076ce:	4a27      	ldr	r2, [pc, #156]	; (800776c <prvAddNewTaskToReadyList+0xbc>)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076d4:	4b24      	ldr	r3, [pc, #144]	; (8007768 <prvAddNewTaskToReadyList+0xb8>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d110      	bne.n	80076fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076dc:	f000 fbe2 	bl	8007ea4 <prvInitialiseTaskLists>
 80076e0:	e00d      	b.n	80076fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076e2:	4b23      	ldr	r3, [pc, #140]	; (8007770 <prvAddNewTaskToReadyList+0xc0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d109      	bne.n	80076fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076ea:	4b20      	ldr	r3, [pc, #128]	; (800776c <prvAddNewTaskToReadyList+0xbc>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d802      	bhi.n	80076fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076f8:	4a1c      	ldr	r2, [pc, #112]	; (800776c <prvAddNewTaskToReadyList+0xbc>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076fe:	4b1d      	ldr	r3, [pc, #116]	; (8007774 <prvAddNewTaskToReadyList+0xc4>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	4a1b      	ldr	r2, [pc, #108]	; (8007774 <prvAddNewTaskToReadyList+0xc4>)
 8007706:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	2201      	movs	r2, #1
 800770e:	409a      	lsls	r2, r3
 8007710:	4b19      	ldr	r3, [pc, #100]	; (8007778 <prvAddNewTaskToReadyList+0xc8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4313      	orrs	r3, r2
 8007716:	4a18      	ldr	r2, [pc, #96]	; (8007778 <prvAddNewTaskToReadyList+0xc8>)
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4a15      	ldr	r2, [pc, #84]	; (800777c <prvAddNewTaskToReadyList+0xcc>)
 8007728:	441a      	add	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3304      	adds	r3, #4
 800772e:	4619      	mov	r1, r3
 8007730:	4610      	mov	r0, r2
 8007732:	f7fe fe61 	bl	80063f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007736:	f000 fff7 	bl	8008728 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800773a:	4b0d      	ldr	r3, [pc, #52]	; (8007770 <prvAddNewTaskToReadyList+0xc0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00e      	beq.n	8007760 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007742:	4b0a      	ldr	r3, [pc, #40]	; (800776c <prvAddNewTaskToReadyList+0xbc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	429a      	cmp	r2, r3
 800774e:	d207      	bcs.n	8007760 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007750:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <prvAddNewTaskToReadyList+0xd0>)
 8007752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	2000056c 	.word	0x2000056c
 800776c:	2000046c 	.word	0x2000046c
 8007770:	20000578 	.word	0x20000578
 8007774:	20000588 	.word	0x20000588
 8007778:	20000574 	.word	0x20000574
 800777c:	20000470 	.word	0x20000470
 8007780:	e000ed04 	.word	0xe000ed04

08007784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d016      	beq.n	80077c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007796:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <vTaskDelay+0x60>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d009      	beq.n	80077b2 <vTaskDelay+0x2e>
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	60bb      	str	r3, [r7, #8]
 80077b0:	e7fe      	b.n	80077b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80077b2:	f000 f879 	bl	80078a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077b6:	2100      	movs	r1, #0
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fdfb 	bl	80083b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077be:	f000 f881 	bl	80078c4 <xTaskResumeAll>
 80077c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d107      	bne.n	80077da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80077ca:	4b07      	ldr	r3, [pc, #28]	; (80077e8 <vTaskDelay+0x64>)
 80077cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077da:	bf00      	nop
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000594 	.word	0x20000594
 80077e8:	e000ed04 	.word	0xe000ed04

080077ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	; 0x28
 80077f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077fa:	463a      	mov	r2, r7
 80077fc:	1d39      	adds	r1, r7, #4
 80077fe:	f107 0308 	add.w	r3, r7, #8
 8007802:	4618      	mov	r0, r3
 8007804:	f7f8 fec4 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	9202      	str	r2, [sp, #8]
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	2300      	movs	r3, #0
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	2300      	movs	r3, #0
 8007818:	460a      	mov	r2, r1
 800781a:	491d      	ldr	r1, [pc, #116]	; (8007890 <vTaskStartScheduler+0xa4>)
 800781c:	481d      	ldr	r0, [pc, #116]	; (8007894 <vTaskStartScheduler+0xa8>)
 800781e:	f7ff fe21 	bl	8007464 <xTaskCreateStatic>
 8007822:	4602      	mov	r2, r0
 8007824:	4b1c      	ldr	r3, [pc, #112]	; (8007898 <vTaskStartScheduler+0xac>)
 8007826:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007828:	4b1b      	ldr	r3, [pc, #108]	; (8007898 <vTaskStartScheduler+0xac>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007830:	2301      	movs	r3, #1
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	e001      	b.n	800783a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d115      	bne.n	800786c <vTaskStartScheduler+0x80>
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007852:	4b12      	ldr	r3, [pc, #72]	; (800789c <vTaskStartScheduler+0xb0>)
 8007854:	f04f 32ff 	mov.w	r2, #4294967295
 8007858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800785a:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <vTaskStartScheduler+0xb4>)
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007860:	4b10      	ldr	r3, [pc, #64]	; (80078a4 <vTaskStartScheduler+0xb8>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007866:	f000 fe93 	bl	8008590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800786a:	e00d      	b.n	8007888 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007872:	d109      	bne.n	8007888 <vTaskStartScheduler+0x9c>
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	e7fe      	b.n	8007886 <vTaskStartScheduler+0x9a>
}
 8007888:	bf00      	nop
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	0801a490 	.word	0x0801a490
 8007894:	08007e75 	.word	0x08007e75
 8007898:	20000590 	.word	0x20000590
 800789c:	2000058c 	.word	0x2000058c
 80078a0:	20000578 	.word	0x20000578
 80078a4:	20000570 	.word	0x20000570

080078a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80078ac:	4b04      	ldr	r3, [pc, #16]	; (80078c0 <vTaskSuspendAll+0x18>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3301      	adds	r3, #1
 80078b2:	4a03      	ldr	r2, [pc, #12]	; (80078c0 <vTaskSuspendAll+0x18>)
 80078b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80078b6:	bf00      	nop
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	20000594 	.word	0x20000594

080078c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078d2:	4b41      	ldr	r3, [pc, #260]	; (80079d8 <xTaskResumeAll+0x114>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <xTaskResumeAll+0x2a>
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	e7fe      	b.n	80078ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078ee:	f000 feed 	bl	80086cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078f2:	4b39      	ldr	r3, [pc, #228]	; (80079d8 <xTaskResumeAll+0x114>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	4a37      	ldr	r2, [pc, #220]	; (80079d8 <xTaskResumeAll+0x114>)
 80078fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078fc:	4b36      	ldr	r3, [pc, #216]	; (80079d8 <xTaskResumeAll+0x114>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d161      	bne.n	80079c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007904:	4b35      	ldr	r3, [pc, #212]	; (80079dc <xTaskResumeAll+0x118>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d05d      	beq.n	80079c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800790c:	e02e      	b.n	800796c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800790e:	4b34      	ldr	r3, [pc, #208]	; (80079e0 <xTaskResumeAll+0x11c>)
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3318      	adds	r3, #24
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fdc9 	bl	80064b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3304      	adds	r3, #4
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe fdc4 	bl	80064b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792e:	2201      	movs	r2, #1
 8007930:	409a      	lsls	r2, r3
 8007932:	4b2c      	ldr	r3, [pc, #176]	; (80079e4 <xTaskResumeAll+0x120>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4313      	orrs	r3, r2
 8007938:	4a2a      	ldr	r2, [pc, #168]	; (80079e4 <xTaskResumeAll+0x120>)
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4a27      	ldr	r2, [pc, #156]	; (80079e8 <xTaskResumeAll+0x124>)
 800794a:	441a      	add	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3304      	adds	r3, #4
 8007950:	4619      	mov	r1, r3
 8007952:	4610      	mov	r0, r2
 8007954:	f7fe fd50 	bl	80063f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795c:	4b23      	ldr	r3, [pc, #140]	; (80079ec <xTaskResumeAll+0x128>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	429a      	cmp	r2, r3
 8007964:	d302      	bcc.n	800796c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007966:	4b22      	ldr	r3, [pc, #136]	; (80079f0 <xTaskResumeAll+0x12c>)
 8007968:	2201      	movs	r2, #1
 800796a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800796c:	4b1c      	ldr	r3, [pc, #112]	; (80079e0 <xTaskResumeAll+0x11c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1cc      	bne.n	800790e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800797a:	f000 fb2d 	bl	8007fd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800797e:	4b1d      	ldr	r3, [pc, #116]	; (80079f4 <xTaskResumeAll+0x130>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d010      	beq.n	80079ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800798a:	f000 f859 	bl	8007a40 <xTaskIncrementTick>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007994:	4b16      	ldr	r3, [pc, #88]	; (80079f0 <xTaskResumeAll+0x12c>)
 8007996:	2201      	movs	r2, #1
 8007998:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f1      	bne.n	800798a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80079a6:	4b13      	ldr	r3, [pc, #76]	; (80079f4 <xTaskResumeAll+0x130>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079ac:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <xTaskResumeAll+0x12c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d009      	beq.n	80079c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079b4:	2301      	movs	r3, #1
 80079b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079b8:	4b0f      	ldr	r3, [pc, #60]	; (80079f8 <xTaskResumeAll+0x134>)
 80079ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079c8:	f000 feae 	bl	8008728 <vPortExitCritical>

	return xAlreadyYielded;
 80079cc:	68bb      	ldr	r3, [r7, #8]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20000594 	.word	0x20000594
 80079dc:	2000056c 	.word	0x2000056c
 80079e0:	2000052c 	.word	0x2000052c
 80079e4:	20000574 	.word	0x20000574
 80079e8:	20000470 	.word	0x20000470
 80079ec:	2000046c 	.word	0x2000046c
 80079f0:	20000580 	.word	0x20000580
 80079f4:	2000057c 	.word	0x2000057c
 80079f8:	e000ed04 	.word	0xe000ed04

080079fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a02:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <xTaskGetTickCount+0x1c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a08:	687b      	ldr	r3, [r7, #4]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	20000570 	.word	0x20000570

08007a1c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a22:	f000 ff2f 	bl	8008884 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007a26:	2300      	movs	r3, #0
 8007a28:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007a2a:	4b04      	ldr	r3, [pc, #16]	; (8007a3c <xTaskGetTickCountFromISR+0x20>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a30:	683b      	ldr	r3, [r7, #0]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000570 	.word	0x20000570

08007a40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a4a:	4b4e      	ldr	r3, [pc, #312]	; (8007b84 <xTaskIncrementTick+0x144>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f040 8087 	bne.w	8007b62 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a54:	4b4c      	ldr	r3, [pc, #304]	; (8007b88 <xTaskIncrementTick+0x148>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a5c:	4a4a      	ldr	r2, [pc, #296]	; (8007b88 <xTaskIncrementTick+0x148>)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d11f      	bne.n	8007aa8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a68:	4b48      	ldr	r3, [pc, #288]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d009      	beq.n	8007a86 <xTaskIncrementTick+0x46>
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	e7fe      	b.n	8007a84 <xTaskIncrementTick+0x44>
 8007a86:	4b41      	ldr	r3, [pc, #260]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <xTaskIncrementTick+0x150>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a3e      	ldr	r2, [pc, #248]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	4a3e      	ldr	r2, [pc, #248]	; (8007b90 <xTaskIncrementTick+0x150>)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	4b3e      	ldr	r3, [pc, #248]	; (8007b94 <xTaskIncrementTick+0x154>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	4a3c      	ldr	r2, [pc, #240]	; (8007b94 <xTaskIncrementTick+0x154>)
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	f000 fa98 	bl	8007fd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007aa8:	4b3b      	ldr	r3, [pc, #236]	; (8007b98 <xTaskIncrementTick+0x158>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d348      	bcc.n	8007b44 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab2:	4b36      	ldr	r3, [pc, #216]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d104      	bne.n	8007ac6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007abc:	4b36      	ldr	r3, [pc, #216]	; (8007b98 <xTaskIncrementTick+0x158>)
 8007abe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac2:	601a      	str	r2, [r3, #0]
					break;
 8007ac4:	e03e      	b.n	8007b44 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac6:	4b31      	ldr	r3, [pc, #196]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d203      	bcs.n	8007ae6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ade:	4a2e      	ldr	r2, [pc, #184]	; (8007b98 <xTaskIncrementTick+0x158>)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ae4:	e02e      	b.n	8007b44 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fce1 	bl	80064b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d004      	beq.n	8007b02 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	3318      	adds	r3, #24
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fe fcd8 	bl	80064b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	2201      	movs	r2, #1
 8007b08:	409a      	lsls	r2, r3
 8007b0a:	4b24      	ldr	r3, [pc, #144]	; (8007b9c <xTaskIncrementTick+0x15c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	4a22      	ldr	r2, [pc, #136]	; (8007b9c <xTaskIncrementTick+0x15c>)
 8007b12:	6013      	str	r3, [r2, #0]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b18:	4613      	mov	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <xTaskIncrementTick+0x160>)
 8007b22:	441a      	add	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	3304      	adds	r3, #4
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	f7fe fc64 	bl	80063f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b34:	4b1b      	ldr	r3, [pc, #108]	; (8007ba4 <xTaskIncrementTick+0x164>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d3b9      	bcc.n	8007ab2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b42:	e7b6      	b.n	8007ab2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b44:	4b17      	ldr	r3, [pc, #92]	; (8007ba4 <xTaskIncrementTick+0x164>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4a:	4915      	ldr	r1, [pc, #84]	; (8007ba0 <xTaskIncrementTick+0x160>)
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	440b      	add	r3, r1
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d907      	bls.n	8007b6c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	e004      	b.n	8007b6c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b62:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <xTaskIncrementTick+0x168>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3301      	adds	r3, #1
 8007b68:	4a0f      	ldr	r2, [pc, #60]	; (8007ba8 <xTaskIncrementTick+0x168>)
 8007b6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b6c:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <xTaskIncrementTick+0x16c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007b74:	2301      	movs	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b78:	697b      	ldr	r3, [r7, #20]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20000594 	.word	0x20000594
 8007b88:	20000570 	.word	0x20000570
 8007b8c:	20000524 	.word	0x20000524
 8007b90:	20000528 	.word	0x20000528
 8007b94:	20000584 	.word	0x20000584
 8007b98:	2000058c 	.word	0x2000058c
 8007b9c:	20000574 	.word	0x20000574
 8007ba0:	20000470 	.word	0x20000470
 8007ba4:	2000046c 	.word	0x2000046c
 8007ba8:	2000057c 	.word	0x2000057c
 8007bac:	20000580 	.word	0x20000580

08007bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bb6:	4b26      	ldr	r3, [pc, #152]	; (8007c50 <vTaskSwitchContext+0xa0>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bbe:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <vTaskSwitchContext+0xa4>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bc4:	e03e      	b.n	8007c44 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007bc6:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <vTaskSwitchContext+0xa4>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bcc:	4b22      	ldr	r3, [pc, #136]	; (8007c58 <vTaskSwitchContext+0xa8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	fab3 f383 	clz	r3, r3
 8007bd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	f1c3 031f 	rsb	r3, r3, #31
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	491e      	ldr	r1, [pc, #120]	; (8007c5c <vTaskSwitchContext+0xac>)
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	440b      	add	r3, r1
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <vTaskSwitchContext+0x5a>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	607b      	str	r3, [r7, #4]
 8007c08:	e7fe      	b.n	8007c08 <vTaskSwitchContext+0x58>
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4a11      	ldr	r2, [pc, #68]	; (8007c5c <vTaskSwitchContext+0xac>)
 8007c16:	4413      	add	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	605a      	str	r2, [r3, #4]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d104      	bne.n	8007c3a <vTaskSwitchContext+0x8a>
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	605a      	str	r2, [r3, #4]
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	4a07      	ldr	r2, [pc, #28]	; (8007c60 <vTaskSwitchContext+0xb0>)
 8007c42:	6013      	str	r3, [r2, #0]
}
 8007c44:	bf00      	nop
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	20000594 	.word	0x20000594
 8007c54:	20000580 	.word	0x20000580
 8007c58:	20000574 	.word	0x20000574
 8007c5c:	20000470 	.word	0x20000470
 8007c60:	2000046c 	.word	0x2000046c

08007c64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d109      	bne.n	8007c88 <vTaskPlaceOnEventList+0x24>
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	60fb      	str	r3, [r7, #12]
 8007c86:	e7fe      	b.n	8007c86 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <vTaskPlaceOnEventList+0x44>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3318      	adds	r3, #24
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7fe fbd5 	bl	8006440 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c96:	2101      	movs	r1, #1
 8007c98:	6838      	ldr	r0, [r7, #0]
 8007c9a:	f000 fb8b 	bl	80083b4 <prvAddCurrentTaskToDelayedList>
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	2000046c 	.word	0x2000046c

08007cac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d109      	bne.n	8007cd6 <xTaskRemoveFromEventList+0x2a>
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e7fe      	b.n	8007cd4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3318      	adds	r3, #24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe fbe9 	bl	80064b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ce0:	4b1d      	ldr	r3, [pc, #116]	; (8007d58 <xTaskRemoveFromEventList+0xac>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d11c      	bne.n	8007d22 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe fbe0 	bl	80064b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	409a      	lsls	r2, r3
 8007cfa:	4b18      	ldr	r3, [pc, #96]	; (8007d5c <xTaskRemoveFromEventList+0xb0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	4a16      	ldr	r2, [pc, #88]	; (8007d5c <xTaskRemoveFromEventList+0xb0>)
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	4613      	mov	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4a13      	ldr	r2, [pc, #76]	; (8007d60 <xTaskRemoveFromEventList+0xb4>)
 8007d12:	441a      	add	r2, r3
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	3304      	adds	r3, #4
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	f7fe fb6c 	bl	80063f8 <vListInsertEnd>
 8007d20:	e005      	b.n	8007d2e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	3318      	adds	r3, #24
 8007d26:	4619      	mov	r1, r3
 8007d28:	480e      	ldr	r0, [pc, #56]	; (8007d64 <xTaskRemoveFromEventList+0xb8>)
 8007d2a:	f7fe fb65 	bl	80063f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d32:	4b0d      	ldr	r3, [pc, #52]	; (8007d68 <xTaskRemoveFromEventList+0xbc>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d905      	bls.n	8007d48 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d40:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <xTaskRemoveFromEventList+0xc0>)
 8007d42:	2201      	movs	r2, #1
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	e001      	b.n	8007d4c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d4c:	697b      	ldr	r3, [r7, #20]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3718      	adds	r7, #24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000594 	.word	0x20000594
 8007d5c:	20000574 	.word	0x20000574
 8007d60:	20000470 	.word	0x20000470
 8007d64:	2000052c 	.word	0x2000052c
 8007d68:	2000046c 	.word	0x2000046c
 8007d6c:	20000580 	.word	0x20000580

08007d70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d78:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <vTaskInternalSetTimeOutState+0x24>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d80:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <vTaskInternalSetTimeOutState+0x28>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	605a      	str	r2, [r3, #4]
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	20000584 	.word	0x20000584
 8007d98:	20000570 	.word	0x20000570

08007d9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d109      	bne.n	8007dc0 <xTaskCheckForTimeOut+0x24>
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	613b      	str	r3, [r7, #16]
 8007dbe:	e7fe      	b.n	8007dbe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <xTaskCheckForTimeOut+0x3e>
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e7fe      	b.n	8007dd8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007dda:	f000 fc77 	bl	80086cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dde:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <xTaskCheckForTimeOut+0xb8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d102      	bne.n	8007dfe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	61fb      	str	r3, [r7, #28]
 8007dfc:	e023      	b.n	8007e46 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b15      	ldr	r3, [pc, #84]	; (8007e58 <xTaskCheckForTimeOut+0xbc>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d007      	beq.n	8007e1a <xTaskCheckForTimeOut+0x7e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d302      	bcc.n	8007e1a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e14:	2301      	movs	r3, #1
 8007e16:	61fb      	str	r3, [r7, #28]
 8007e18:	e015      	b.n	8007e46 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d20b      	bcs.n	8007e3c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	1ad2      	subs	r2, r2, r3
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff ff9d 	bl	8007d70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	e004      	b.n	8007e46 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e42:	2301      	movs	r3, #1
 8007e44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e46:	f000 fc6f 	bl	8008728 <vPortExitCritical>

	return xReturn;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3720      	adds	r7, #32
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	20000570 	.word	0x20000570
 8007e58:	20000584 	.word	0x20000584

08007e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e60:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <vTaskMissedYield+0x14>)
 8007e62:	2201      	movs	r2, #1
 8007e64:	601a      	str	r2, [r3, #0]
}
 8007e66:	bf00      	nop
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	20000580 	.word	0x20000580

08007e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e7c:	f000 f852 	bl	8007f24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <prvIdleTask+0x28>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d9f9      	bls.n	8007e7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e88:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <prvIdleTask+0x2c>)
 8007e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e98:	e7f0      	b.n	8007e7c <prvIdleTask+0x8>
 8007e9a:	bf00      	nop
 8007e9c:	20000470 	.word	0x20000470
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
 8007eae:	e00c      	b.n	8007eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4a12      	ldr	r2, [pc, #72]	; (8007f04 <prvInitialiseTaskLists+0x60>)
 8007ebc:	4413      	add	r3, r2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fa6d 	bl	800639e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	607b      	str	r3, [r7, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b06      	cmp	r3, #6
 8007ece:	d9ef      	bls.n	8007eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ed0:	480d      	ldr	r0, [pc, #52]	; (8007f08 <prvInitialiseTaskLists+0x64>)
 8007ed2:	f7fe fa64 	bl	800639e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ed6:	480d      	ldr	r0, [pc, #52]	; (8007f0c <prvInitialiseTaskLists+0x68>)
 8007ed8:	f7fe fa61 	bl	800639e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007edc:	480c      	ldr	r0, [pc, #48]	; (8007f10 <prvInitialiseTaskLists+0x6c>)
 8007ede:	f7fe fa5e 	bl	800639e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ee2:	480c      	ldr	r0, [pc, #48]	; (8007f14 <prvInitialiseTaskLists+0x70>)
 8007ee4:	f7fe fa5b 	bl	800639e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ee8:	480b      	ldr	r0, [pc, #44]	; (8007f18 <prvInitialiseTaskLists+0x74>)
 8007eea:	f7fe fa58 	bl	800639e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <prvInitialiseTaskLists+0x78>)
 8007ef0:	4a05      	ldr	r2, [pc, #20]	; (8007f08 <prvInitialiseTaskLists+0x64>)
 8007ef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <prvInitialiseTaskLists+0x7c>)
 8007ef6:	4a05      	ldr	r2, [pc, #20]	; (8007f0c <prvInitialiseTaskLists+0x68>)
 8007ef8:	601a      	str	r2, [r3, #0]
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000470 	.word	0x20000470
 8007f08:	200004fc 	.word	0x200004fc
 8007f0c:	20000510 	.word	0x20000510
 8007f10:	2000052c 	.word	0x2000052c
 8007f14:	20000540 	.word	0x20000540
 8007f18:	20000558 	.word	0x20000558
 8007f1c:	20000524 	.word	0x20000524
 8007f20:	20000528 	.word	0x20000528

08007f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f2a:	e019      	b.n	8007f60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f2c:	f000 fbce 	bl	80086cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f30:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <prvCheckTasksWaitingTermination+0x4c>)
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fab8 	bl	80064b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f42:	4b0c      	ldr	r3, [pc, #48]	; (8007f74 <prvCheckTasksWaitingTermination+0x50>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	4a0a      	ldr	r2, [pc, #40]	; (8007f74 <prvCheckTasksWaitingTermination+0x50>)
 8007f4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <prvCheckTasksWaitingTermination+0x54>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <prvCheckTasksWaitingTermination+0x54>)
 8007f54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f56:	f000 fbe7 	bl	8008728 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f80e 	bl	8007f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <prvCheckTasksWaitingTermination+0x54>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e1      	bne.n	8007f2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000540 	.word	0x20000540
 8007f74:	2000056c 	.word	0x2000056c
 8007f78:	20000554 	.word	0x20000554

08007f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d108      	bne.n	8007fa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fd76 	bl	8008a84 <vPortFree>
				vPortFree( pxTCB );
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fd73 	bl	8008a84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f9e:	e017      	b.n	8007fd0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d103      	bne.n	8007fb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fd6a 	bl	8008a84 <vPortFree>
	}
 8007fb0:	e00e      	b.n	8007fd0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d009      	beq.n	8007fd0 <prvDeleteTCB+0x54>
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	e7fe      	b.n	8007fce <prvDeleteTCB+0x52>
	}
 8007fd0:	bf00      	nop
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fde:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <prvResetNextTaskUnblockTime+0x38>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d104      	bne.n	8007ff2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <prvResetNextTaskUnblockTime+0x3c>)
 8007fea:	f04f 32ff 	mov.w	r2, #4294967295
 8007fee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ff0:	e008      	b.n	8008004 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff2:	4b07      	ldr	r3, [pc, #28]	; (8008010 <prvResetNextTaskUnblockTime+0x38>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	4a04      	ldr	r2, [pc, #16]	; (8008014 <prvResetNextTaskUnblockTime+0x3c>)
 8008002:	6013      	str	r3, [r2, #0]
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	20000524 	.word	0x20000524
 8008014:	2000058c 	.word	0x2000058c

08008018 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800801e:	4b0b      	ldr	r3, [pc, #44]	; (800804c <xTaskGetSchedulerState+0x34>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d102      	bne.n	800802c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008026:	2301      	movs	r3, #1
 8008028:	607b      	str	r3, [r7, #4]
 800802a:	e008      	b.n	800803e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800802c:	4b08      	ldr	r3, [pc, #32]	; (8008050 <xTaskGetSchedulerState+0x38>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d102      	bne.n	800803a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008034:	2302      	movs	r3, #2
 8008036:	607b      	str	r3, [r7, #4]
 8008038:	e001      	b.n	800803e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800803a:	2300      	movs	r3, #0
 800803c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800803e:	687b      	ldr	r3, [r7, #4]
	}
 8008040:	4618      	mov	r0, r3
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	20000578 	.word	0x20000578
 8008050:	20000594 	.word	0x20000594

08008054 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d069      	beq.n	800813e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806e:	4b36      	ldr	r3, [pc, #216]	; (8008148 <xTaskPriorityInherit+0xf4>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	429a      	cmp	r2, r3
 8008076:	d259      	bcs.n	800812c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	db06      	blt.n	800808e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008080:	4b31      	ldr	r3, [pc, #196]	; (8008148 <xTaskPriorityInherit+0xf4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008086:	f1c3 0207 	rsb	r2, r3, #7
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	6959      	ldr	r1, [r3, #20]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4a2b      	ldr	r2, [pc, #172]	; (800814c <xTaskPriorityInherit+0xf8>)
 80080a0:	4413      	add	r3, r2
 80080a2:	4299      	cmp	r1, r3
 80080a4:	d13a      	bne.n	800811c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	3304      	adds	r3, #4
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fe fa01 	bl	80064b2 <uxListRemove>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d115      	bne.n	80080e2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ba:	4924      	ldr	r1, [pc, #144]	; (800814c <xTaskPriorityInherit+0xf8>)
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <xTaskPriorityInherit+0x8e>
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	2201      	movs	r2, #1
 80080d2:	fa02 f303 	lsl.w	r3, r2, r3
 80080d6:	43da      	mvns	r2, r3
 80080d8:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <xTaskPriorityInherit+0xfc>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4013      	ands	r3, r2
 80080de:	4a1c      	ldr	r2, [pc, #112]	; (8008150 <xTaskPriorityInherit+0xfc>)
 80080e0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080e2:	4b19      	ldr	r3, [pc, #100]	; (8008148 <xTaskPriorityInherit+0xf4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	2201      	movs	r2, #1
 80080f2:	409a      	lsls	r2, r3
 80080f4:	4b16      	ldr	r3, [pc, #88]	; (8008150 <xTaskPriorityInherit+0xfc>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	4a15      	ldr	r2, [pc, #84]	; (8008150 <xTaskPriorityInherit+0xfc>)
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4a10      	ldr	r2, [pc, #64]	; (800814c <xTaskPriorityInherit+0xf8>)
 800810c:	441a      	add	r2, r3
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	3304      	adds	r3, #4
 8008112:	4619      	mov	r1, r3
 8008114:	4610      	mov	r0, r2
 8008116:	f7fe f96f 	bl	80063f8 <vListInsertEnd>
 800811a:	e004      	b.n	8008126 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800811c:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <xTaskPriorityInherit+0xf4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008126:	2301      	movs	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	e008      	b.n	800813e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008130:	4b05      	ldr	r3, [pc, #20]	; (8008148 <xTaskPriorityInherit+0xf4>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	429a      	cmp	r2, r3
 8008138:	d201      	bcs.n	800813e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800813a:	2301      	movs	r3, #1
 800813c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800813e:	68fb      	ldr	r3, [r7, #12]
	}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	2000046c 	.word	0x2000046c
 800814c:	20000470 	.word	0x20000470
 8008150:	20000574 	.word	0x20000574

08008154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d06c      	beq.n	8008244 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800816a:	4b39      	ldr	r3, [pc, #228]	; (8008250 <xTaskPriorityDisinherit+0xfc>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	429a      	cmp	r2, r3
 8008172:	d009      	beq.n	8008188 <xTaskPriorityDisinherit+0x34>
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	e7fe      	b.n	8008186 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <xTaskPriorityDisinherit+0x50>
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	60bb      	str	r3, [r7, #8]
 80081a2:	e7fe      	b.n	80081a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081a8:	1e5a      	subs	r2, r3, #1
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d044      	beq.n	8008244 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d140      	bne.n	8008244 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	3304      	adds	r3, #4
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe f973 	bl	80064b2 <uxListRemove>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d115      	bne.n	80081fe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d6:	491f      	ldr	r1, [pc, #124]	; (8008254 <xTaskPriorityDisinherit+0x100>)
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10a      	bne.n	80081fe <xTaskPriorityDisinherit+0xaa>
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	2201      	movs	r2, #1
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	43da      	mvns	r2, r3
 80081f4:	4b18      	ldr	r3, [pc, #96]	; (8008258 <xTaskPriorityDisinherit+0x104>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4013      	ands	r3, r2
 80081fa:	4a17      	ldr	r2, [pc, #92]	; (8008258 <xTaskPriorityDisinherit+0x104>)
 80081fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	f1c3 0207 	rsb	r2, r3, #7
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	2201      	movs	r2, #1
 8008218:	409a      	lsls	r2, r3
 800821a:	4b0f      	ldr	r3, [pc, #60]	; (8008258 <xTaskPriorityDisinherit+0x104>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4313      	orrs	r3, r2
 8008220:	4a0d      	ldr	r2, [pc, #52]	; (8008258 <xTaskPriorityDisinherit+0x104>)
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4a08      	ldr	r2, [pc, #32]	; (8008254 <xTaskPriorityDisinherit+0x100>)
 8008232:	441a      	add	r2, r3
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	3304      	adds	r3, #4
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f7fe f8dc 	bl	80063f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008244:	697b      	ldr	r3, [r7, #20]
	}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	2000046c 	.word	0x2000046c
 8008254:	20000470 	.word	0x20000470
 8008258:	20000574 	.word	0x20000574

0800825c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800826a:	2301      	movs	r3, #1
 800826c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 8081 	beq.w	8008378 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800827a:	2b00      	cmp	r3, #0
 800827c:	d109      	bne.n	8008292 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e7fe      	b.n	8008290 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d902      	bls.n	80082a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	e002      	b.n	80082a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d062      	beq.n	8008378 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d15d      	bne.n	8008378 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082bc:	4b30      	ldr	r3, [pc, #192]	; (8008380 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d109      	bne.n	80082da <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	60bb      	str	r3, [r7, #8]
 80082d8:	e7fe      	b.n	80082d8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	69fa      	ldr	r2, [r7, #28]
 80082e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	db04      	blt.n	80082f8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	f1c3 0207 	rsb	r2, r3, #7
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	6959      	ldr	r1, [r3, #20]
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4a1f      	ldr	r2, [pc, #124]	; (8008384 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008308:	4413      	add	r3, r2
 800830a:	4299      	cmp	r1, r3
 800830c:	d134      	bne.n	8008378 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	3304      	adds	r3, #4
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe f8cd 	bl	80064b2 <uxListRemove>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d115      	bne.n	800834a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	4918      	ldr	r1, [pc, #96]	; (8008384 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008324:	4613      	mov	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	440b      	add	r3, r1
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	2201      	movs	r2, #1
 800833a:	fa02 f303 	lsl.w	r3, r2, r3
 800833e:	43da      	mvns	r2, r3
 8008340:	4b11      	ldr	r3, [pc, #68]	; (8008388 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4013      	ands	r3, r2
 8008346:	4a10      	ldr	r2, [pc, #64]	; (8008388 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008348:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834e:	2201      	movs	r2, #1
 8008350:	409a      	lsls	r2, r3
 8008352:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4313      	orrs	r3, r2
 8008358:	4a0b      	ldr	r2, [pc, #44]	; (8008388 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008360:	4613      	mov	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4a06      	ldr	r2, [pc, #24]	; (8008384 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800836a:	441a      	add	r2, r3
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	3304      	adds	r3, #4
 8008370:	4619      	mov	r1, r3
 8008372:	4610      	mov	r0, r2
 8008374:	f7fe f840 	bl	80063f8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008378:	bf00      	nop
 800837a:	3720      	adds	r7, #32
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	2000046c 	.word	0x2000046c
 8008384:	20000470 	.word	0x20000470
 8008388:	20000574 	.word	0x20000574

0800838c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008398:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800839e:	3201      	adds	r2, #1
 80083a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80083a2:	4b03      	ldr	r3, [pc, #12]	; (80083b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80083a4:	681b      	ldr	r3, [r3, #0]
	}
 80083a6:	4618      	mov	r0, r3
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	2000046c 	.word	0x2000046c

080083b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083be:	4b29      	ldr	r3, [pc, #164]	; (8008464 <prvAddCurrentTaskToDelayedList+0xb0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083c4:	4b28      	ldr	r3, [pc, #160]	; (8008468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3304      	adds	r3, #4
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe f871 	bl	80064b2 <uxListRemove>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10b      	bne.n	80083ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80083d6:	4b24      	ldr	r3, [pc, #144]	; (8008468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	2201      	movs	r2, #1
 80083de:	fa02 f303 	lsl.w	r3, r2, r3
 80083e2:	43da      	mvns	r2, r3
 80083e4:	4b21      	ldr	r3, [pc, #132]	; (800846c <prvAddCurrentTaskToDelayedList+0xb8>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4013      	ands	r3, r2
 80083ea:	4a20      	ldr	r2, [pc, #128]	; (800846c <prvAddCurrentTaskToDelayedList+0xb8>)
 80083ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f4:	d10a      	bne.n	800840c <prvAddCurrentTaskToDelayedList+0x58>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d007      	beq.n	800840c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083fc:	4b1a      	ldr	r3, [pc, #104]	; (8008468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3304      	adds	r3, #4
 8008402:	4619      	mov	r1, r3
 8008404:	481a      	ldr	r0, [pc, #104]	; (8008470 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008406:	f7fd fff7 	bl	80063f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800840a:	e026      	b.n	800845a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4413      	add	r3, r2
 8008412:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008414:	4b14      	ldr	r3, [pc, #80]	; (8008468 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	429a      	cmp	r2, r3
 8008422:	d209      	bcs.n	8008438 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008424:	4b13      	ldr	r3, [pc, #76]	; (8008474 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	4b0f      	ldr	r3, [pc, #60]	; (8008468 <prvAddCurrentTaskToDelayedList+0xb4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3304      	adds	r3, #4
 800842e:	4619      	mov	r1, r3
 8008430:	4610      	mov	r0, r2
 8008432:	f7fe f805 	bl	8006440 <vListInsert>
}
 8008436:	e010      	b.n	800845a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008438:	4b0f      	ldr	r3, [pc, #60]	; (8008478 <prvAddCurrentTaskToDelayedList+0xc4>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <prvAddCurrentTaskToDelayedList+0xb4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3304      	adds	r3, #4
 8008442:	4619      	mov	r1, r3
 8008444:	4610      	mov	r0, r2
 8008446:	f7fd fffb 	bl	8006440 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <prvAddCurrentTaskToDelayedList+0xc8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	429a      	cmp	r2, r3
 8008452:	d202      	bcs.n	800845a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008454:	4a09      	ldr	r2, [pc, #36]	; (800847c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6013      	str	r3, [r2, #0]
}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20000570 	.word	0x20000570
 8008468:	2000046c 	.word	0x2000046c
 800846c:	20000574 	.word	0x20000574
 8008470:	20000558 	.word	0x20000558
 8008474:	20000528 	.word	0x20000528
 8008478:	20000524 	.word	0x20000524
 800847c:	2000058c 	.word	0x2000058c

08008480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3b04      	subs	r3, #4
 8008490:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3b04      	subs	r3, #4
 800849e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f023 0201 	bic.w	r2, r3, #1
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3b04      	subs	r3, #4
 80084ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084b0:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <pxPortInitialiseStack+0x64>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3b14      	subs	r3, #20
 80084ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f06f 0202 	mvn.w	r2, #2
 80084ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3b20      	subs	r3, #32
 80084d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084d6:	68fb      	ldr	r3, [r7, #12]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	080084e9 	.word	0x080084e9

080084e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084f2:	4b11      	ldr	r3, [pc, #68]	; (8008538 <prvTaskExitError+0x50>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d009      	beq.n	8008510 <prvTaskExitError+0x28>
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	e7fe      	b.n	800850e <prvTaskExitError+0x26>
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008522:	bf00      	nop
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0fc      	beq.n	8008524 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800852a:	bf00      	nop
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	2000000c 	.word	0x2000000c
 800853c:	00000000 	.word	0x00000000

08008540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <pxCurrentTCBConst2>)
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	6808      	ldr	r0, [r1, #0]
 8008546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	f380 8809 	msr	PSP, r0
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8811 	msr	BASEPRI, r0
 800855a:	4770      	bx	lr
 800855c:	f3af 8000 	nop.w

08008560 <pxCurrentTCBConst2>:
 8008560:	2000046c 	.word	0x2000046c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008568:	4808      	ldr	r0, [pc, #32]	; (800858c <prvPortStartFirstTask+0x24>)
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	6800      	ldr	r0, [r0, #0]
 800856e:	f380 8808 	msr	MSP, r0
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8814 	msr	CONTROL, r0
 800857a:	b662      	cpsie	i
 800857c:	b661      	cpsie	f
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	df00      	svc	0
 8008588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800858a:	bf00      	nop
 800858c:	e000ed08 	.word	0xe000ed08

08008590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008596:	4b44      	ldr	r3, [pc, #272]	; (80086a8 <xPortStartScheduler+0x118>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a44      	ldr	r2, [pc, #272]	; (80086ac <xPortStartScheduler+0x11c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d109      	bne.n	80085b4 <xPortStartScheduler+0x24>
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	e7fe      	b.n	80085b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085b4:	4b3c      	ldr	r3, [pc, #240]	; (80086a8 <xPortStartScheduler+0x118>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a3d      	ldr	r2, [pc, #244]	; (80086b0 <xPortStartScheduler+0x120>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d109      	bne.n	80085d2 <xPortStartScheduler+0x42>
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	e7fe      	b.n	80085d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085d2:	4b38      	ldr	r3, [pc, #224]	; (80086b4 <xPortStartScheduler+0x124>)
 80085d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	22ff      	movs	r2, #255	; 0xff
 80085e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	4b30      	ldr	r3, [pc, #192]	; (80086b8 <xPortStartScheduler+0x128>)
 80085f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085fa:	4b30      	ldr	r3, [pc, #192]	; (80086bc <xPortStartScheduler+0x12c>)
 80085fc:	2207      	movs	r2, #7
 80085fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008600:	e009      	b.n	8008616 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008602:	4b2e      	ldr	r3, [pc, #184]	; (80086bc <xPortStartScheduler+0x12c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3b01      	subs	r3, #1
 8008608:	4a2c      	ldr	r2, [pc, #176]	; (80086bc <xPortStartScheduler+0x12c>)
 800860a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861e:	2b80      	cmp	r3, #128	; 0x80
 8008620:	d0ef      	beq.n	8008602 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008622:	4b26      	ldr	r3, [pc, #152]	; (80086bc <xPortStartScheduler+0x12c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f1c3 0307 	rsb	r3, r3, #7
 800862a:	2b04      	cmp	r3, #4
 800862c:	d009      	beq.n	8008642 <xPortStartScheduler+0xb2>
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	60bb      	str	r3, [r7, #8]
 8008640:	e7fe      	b.n	8008640 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008642:	4b1e      	ldr	r3, [pc, #120]	; (80086bc <xPortStartScheduler+0x12c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	021b      	lsls	r3, r3, #8
 8008648:	4a1c      	ldr	r2, [pc, #112]	; (80086bc <xPortStartScheduler+0x12c>)
 800864a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800864c:	4b1b      	ldr	r3, [pc, #108]	; (80086bc <xPortStartScheduler+0x12c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008654:	4a19      	ldr	r2, [pc, #100]	; (80086bc <xPortStartScheduler+0x12c>)
 8008656:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008660:	4b17      	ldr	r3, [pc, #92]	; (80086c0 <xPortStartScheduler+0x130>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a16      	ldr	r2, [pc, #88]	; (80086c0 <xPortStartScheduler+0x130>)
 8008666:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800866a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800866c:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <xPortStartScheduler+0x130>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a13      	ldr	r2, [pc, #76]	; (80086c0 <xPortStartScheduler+0x130>)
 8008672:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008676:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008678:	f000 f8d6 	bl	8008828 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800867c:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <xPortStartScheduler+0x134>)
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008682:	f000 f8f5 	bl	8008870 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008686:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <xPortStartScheduler+0x138>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a0f      	ldr	r2, [pc, #60]	; (80086c8 <xPortStartScheduler+0x138>)
 800868c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008690:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008692:	f7ff ff69 	bl	8008568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008696:	f7ff fa8b 	bl	8007bb0 <vTaskSwitchContext>
	prvTaskExitError();
 800869a:	f7ff ff25 	bl	80084e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	e000ed00 	.word	0xe000ed00
 80086ac:	410fc271 	.word	0x410fc271
 80086b0:	410fc270 	.word	0x410fc270
 80086b4:	e000e400 	.word	0xe000e400
 80086b8:	20000598 	.word	0x20000598
 80086bc:	2000059c 	.word	0x2000059c
 80086c0:	e000ed20 	.word	0xe000ed20
 80086c4:	2000000c 	.word	0x2000000c
 80086c8:	e000ef34 	.word	0xe000ef34

080086cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086e4:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <vPortEnterCritical+0x54>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3301      	adds	r3, #1
 80086ea:	4a0d      	ldr	r2, [pc, #52]	; (8008720 <vPortEnterCritical+0x54>)
 80086ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086ee:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <vPortEnterCritical+0x54>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d10e      	bne.n	8008714 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086f6:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <vPortEnterCritical+0x58>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d009      	beq.n	8008714 <vPortEnterCritical+0x48>
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	e7fe      	b.n	8008712 <vPortEnterCritical+0x46>
	}
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	2000000c 	.word	0x2000000c
 8008724:	e000ed04 	.word	0xe000ed04

08008728 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800872e:	4b11      	ldr	r3, [pc, #68]	; (8008774 <vPortExitCritical+0x4c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d109      	bne.n	800874a <vPortExitCritical+0x22>
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	e7fe      	b.n	8008748 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800874a:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <vPortExitCritical+0x4c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3b01      	subs	r3, #1
 8008750:	4a08      	ldr	r2, [pc, #32]	; (8008774 <vPortExitCritical+0x4c>)
 8008752:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008754:	4b07      	ldr	r3, [pc, #28]	; (8008774 <vPortExitCritical+0x4c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d104      	bne.n	8008766 <vPortExitCritical+0x3e>
 800875c:	2300      	movs	r3, #0
 800875e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	2000000c 	.word	0x2000000c
	...

08008780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008780:	f3ef 8009 	mrs	r0, PSP
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	4b15      	ldr	r3, [pc, #84]	; (80087e0 <pxCurrentTCBConst>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	f01e 0f10 	tst.w	lr, #16
 8008790:	bf08      	it	eq
 8008792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879a:	6010      	str	r0, [r2, #0]
 800879c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087a4:	f380 8811 	msr	BASEPRI, r0
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f7ff f9fe 	bl	8007bb0 <vTaskSwitchContext>
 80087b4:	f04f 0000 	mov.w	r0, #0
 80087b8:	f380 8811 	msr	BASEPRI, r0
 80087bc:	bc09      	pop	{r0, r3}
 80087be:	6819      	ldr	r1, [r3, #0]
 80087c0:	6808      	ldr	r0, [r1, #0]
 80087c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c6:	f01e 0f10 	tst.w	lr, #16
 80087ca:	bf08      	it	eq
 80087cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087d0:	f380 8809 	msr	PSP, r0
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	f3af 8000 	nop.w

080087e0 <pxCurrentTCBConst>:
 80087e0:	2000046c 	.word	0x2000046c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop

080087e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008800:	f7ff f91e 	bl	8007a40 <xTaskIncrementTick>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800880a:	4b06      	ldr	r3, [pc, #24]	; (8008824 <SysTick_Handler+0x3c>)
 800880c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	2300      	movs	r3, #0
 8008814:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008828:	b480      	push	{r7}
 800882a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800882c:	4b0b      	ldr	r3, [pc, #44]	; (800885c <vPortSetupTimerInterrupt+0x34>)
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008832:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <vPortSetupTimerInterrupt+0x38>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008838:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <vPortSetupTimerInterrupt+0x3c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a0a      	ldr	r2, [pc, #40]	; (8008868 <vPortSetupTimerInterrupt+0x40>)
 800883e:	fba2 2303 	umull	r2, r3, r2, r3
 8008842:	099b      	lsrs	r3, r3, #6
 8008844:	4a09      	ldr	r2, [pc, #36]	; (800886c <vPortSetupTimerInterrupt+0x44>)
 8008846:	3b01      	subs	r3, #1
 8008848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800884a:	4b04      	ldr	r3, [pc, #16]	; (800885c <vPortSetupTimerInterrupt+0x34>)
 800884c:	2207      	movs	r2, #7
 800884e:	601a      	str	r2, [r3, #0]
}
 8008850:	bf00      	nop
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	e000e010 	.word	0xe000e010
 8008860:	e000e018 	.word	0xe000e018
 8008864:	20000000 	.word	0x20000000
 8008868:	10624dd3 	.word	0x10624dd3
 800886c:	e000e014 	.word	0xe000e014

08008870 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008870:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008880 <vPortEnableVFP+0x10>
 8008874:	6801      	ldr	r1, [r0, #0]
 8008876:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800887a:	6001      	str	r1, [r0, #0]
 800887c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800887e:	bf00      	nop
 8008880:	e000ed88 	.word	0xe000ed88

08008884 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800888a:	f3ef 8305 	mrs	r3, IPSR
 800888e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b0f      	cmp	r3, #15
 8008894:	d913      	bls.n	80088be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008896:	4a16      	ldr	r2, [pc, #88]	; (80088f0 <vPortValidateInterruptPriority+0x6c>)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088a0:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <vPortValidateInterruptPriority+0x70>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	7afa      	ldrb	r2, [r7, #11]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d209      	bcs.n	80088be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	607b      	str	r3, [r7, #4]
 80088bc:	e7fe      	b.n	80088bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088be:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <vPortValidateInterruptPriority+0x74>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088c6:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <vPortValidateInterruptPriority+0x78>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d909      	bls.n	80088e2 <vPortValidateInterruptPriority+0x5e>
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	e7fe      	b.n	80088e0 <vPortValidateInterruptPriority+0x5c>
	}
 80088e2:	bf00      	nop
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	e000e3f0 	.word	0xe000e3f0
 80088f4:	20000598 	.word	0x20000598
 80088f8:	e000ed0c 	.word	0xe000ed0c
 80088fc:	2000059c 	.word	0x2000059c

08008900 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008908:	2300      	movs	r3, #0
 800890a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800890c:	f7fe ffcc 	bl	80078a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008910:	4b57      	ldr	r3, [pc, #348]	; (8008a70 <pvPortMalloc+0x170>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008918:	f000 f90c 	bl	8008b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800891c:	4b55      	ldr	r3, [pc, #340]	; (8008a74 <pvPortMalloc+0x174>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4013      	ands	r3, r2
 8008924:	2b00      	cmp	r3, #0
 8008926:	f040 808c 	bne.w	8008a42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01c      	beq.n	800896a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008930:	2208      	movs	r2, #8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4413      	add	r3, r2
 8008936:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b00      	cmp	r3, #0
 8008940:	d013      	beq.n	800896a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f023 0307 	bic.w	r3, r3, #7
 8008948:	3308      	adds	r3, #8
 800894a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	2b00      	cmp	r3, #0
 8008954:	d009      	beq.n	800896a <pvPortMalloc+0x6a>
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e7fe      	b.n	8008968 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d068      	beq.n	8008a42 <pvPortMalloc+0x142>
 8008970:	4b41      	ldr	r3, [pc, #260]	; (8008a78 <pvPortMalloc+0x178>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d863      	bhi.n	8008a42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800897a:	4b40      	ldr	r3, [pc, #256]	; (8008a7c <pvPortMalloc+0x17c>)
 800897c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800897e:	4b3f      	ldr	r3, [pc, #252]	; (8008a7c <pvPortMalloc+0x17c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008984:	e004      	b.n	8008990 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	429a      	cmp	r2, r3
 8008998:	d903      	bls.n	80089a2 <pvPortMalloc+0xa2>
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1f1      	bne.n	8008986 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089a2:	4b33      	ldr	r3, [pc, #204]	; (8008a70 <pvPortMalloc+0x170>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d04a      	beq.n	8008a42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2208      	movs	r2, #8
 80089b2:	4413      	add	r3, r2
 80089b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	1ad2      	subs	r2, r2, r3
 80089c6:	2308      	movs	r3, #8
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d91e      	bls.n	8008a0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4413      	add	r3, r2
 80089d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d009      	beq.n	80089f4 <pvPortMalloc+0xf4>
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	613b      	str	r3, [r7, #16]
 80089f2:	e7fe      	b.n	80089f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	685a      	ldr	r2, [r3, #4]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a06:	69b8      	ldr	r0, [r7, #24]
 8008a08:	f000 f8f6 	bl	8008bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a0c:	4b1a      	ldr	r3, [pc, #104]	; (8008a78 <pvPortMalloc+0x178>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	4a18      	ldr	r2, [pc, #96]	; (8008a78 <pvPortMalloc+0x178>)
 8008a18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a1a:	4b17      	ldr	r3, [pc, #92]	; (8008a78 <pvPortMalloc+0x178>)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	4b18      	ldr	r3, [pc, #96]	; (8008a80 <pvPortMalloc+0x180>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d203      	bcs.n	8008a2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a26:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <pvPortMalloc+0x178>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a15      	ldr	r2, [pc, #84]	; (8008a80 <pvPortMalloc+0x180>)
 8008a2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	4b10      	ldr	r3, [pc, #64]	; (8008a74 <pvPortMalloc+0x174>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a42:	f7fe ff3f 	bl	80078c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	f003 0307 	and.w	r3, r3, #7
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d009      	beq.n	8008a64 <pvPortMalloc+0x164>
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	e7fe      	b.n	8008a62 <pvPortMalloc+0x162>
	return pvReturn;
 8008a64:	69fb      	ldr	r3, [r7, #28]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3728      	adds	r7, #40	; 0x28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	200041a8 	.word	0x200041a8
 8008a74:	200041b4 	.word	0x200041b4
 8008a78:	200041ac 	.word	0x200041ac
 8008a7c:	200041a0 	.word	0x200041a0
 8008a80:	200041b0 	.word	0x200041b0

08008a84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d046      	beq.n	8008b24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a96:	2308      	movs	r3, #8
 8008a98:	425b      	negs	r3, r3
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	4b20      	ldr	r3, [pc, #128]	; (8008b2c <vPortFree+0xa8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4013      	ands	r3, r2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d109      	bne.n	8008ac6 <vPortFree+0x42>
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e7fe      	b.n	8008ac4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <vPortFree+0x5e>
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	60bb      	str	r3, [r7, #8]
 8008ae0:	e7fe      	b.n	8008ae0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	4b11      	ldr	r3, [pc, #68]	; (8008b2c <vPortFree+0xa8>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4013      	ands	r3, r2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d019      	beq.n	8008b24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d115      	bne.n	8008b24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <vPortFree+0xa8>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	43db      	mvns	r3, r3
 8008b02:	401a      	ands	r2, r3
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b08:	f7fe fece 	bl	80078a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <vPortFree+0xac>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4413      	add	r3, r2
 8008b16:	4a06      	ldr	r2, [pc, #24]	; (8008b30 <vPortFree+0xac>)
 8008b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b1a:	6938      	ldr	r0, [r7, #16]
 8008b1c:	f000 f86c 	bl	8008bf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b20:	f7fe fed0 	bl	80078c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b24:	bf00      	nop
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	200041b4 	.word	0x200041b4
 8008b30:	200041ac 	.word	0x200041ac

08008b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b40:	4b27      	ldr	r3, [pc, #156]	; (8008be0 <prvHeapInit+0xac>)
 8008b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00c      	beq.n	8008b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3307      	adds	r3, #7
 8008b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f023 0307 	bic.w	r3, r3, #7
 8008b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	4a1f      	ldr	r2, [pc, #124]	; (8008be0 <prvHeapInit+0xac>)
 8008b64:	4413      	add	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <prvHeapInit+0xb0>)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b72:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <prvHeapInit+0xb0>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b80:	2208      	movs	r2, #8
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1a9b      	subs	r3, r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0307 	bic.w	r3, r3, #7
 8008b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4a15      	ldr	r2, [pc, #84]	; (8008be8 <prvHeapInit+0xb4>)
 8008b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <prvHeapInit+0xb4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b9e:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <prvHeapInit+0xb4>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bb4:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <prvHeapInit+0xb4>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <prvHeapInit+0xb8>)
 8008bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4a09      	ldr	r2, [pc, #36]	; (8008bf0 <prvHeapInit+0xbc>)
 8008bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bcc:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <prvHeapInit+0xc0>)
 8008bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	200005a0 	.word	0x200005a0
 8008be4:	200041a0 	.word	0x200041a0
 8008be8:	200041a8 	.word	0x200041a8
 8008bec:	200041b0 	.word	0x200041b0
 8008bf0:	200041ac 	.word	0x200041ac
 8008bf4:	200041b4 	.word	0x200041b4

08008bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c00:	4b28      	ldr	r3, [pc, #160]	; (8008ca4 <prvInsertBlockIntoFreeList+0xac>)
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	e002      	b.n	8008c0c <prvInsertBlockIntoFreeList+0x14>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d8f7      	bhi.n	8008c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	4413      	add	r3, r2
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d108      	bne.n	8008c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	441a      	add	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	441a      	add	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d118      	bne.n	8008c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d00d      	beq.n	8008c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	441a      	add	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	e008      	b.n	8008c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	e003      	b.n	8008c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d002      	beq.n	8008c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	200041a0 	.word	0x200041a0
 8008ca8:	200041a8 	.word	0x200041a8

08008cac <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	330c      	adds	r3, #12
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f003 f8f5 	bl	800beb0 <tcpip_send_msg_wait_sem>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d103      	bne.n	8008cda <netconn_apimsg+0x2e>
    return apimsg->err;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008cd8:	e001      	b.n	8008cde <netconn_apimsg+0x32>
  }
  return err;
 8008cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08c      	sub	sp, #48	; 0x30
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	603a      	str	r2, [r7, #0]
 8008cf2:	71fb      	strb	r3, [r7, #7]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008cf8:	79fb      	ldrb	r3, [r7, #7]
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 ff6d 	bl	8009bdc <netconn_alloc>
 8008d02:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d054      	beq.n	8008db4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008d0a:	79bb      	ldrb	r3, [r7, #6]
 8008d0c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d10:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008d12:	f107 0308 	add.w	r3, r7, #8
 8008d16:	4619      	mov	r1, r3
 8008d18:	4829      	ldr	r0, [pc, #164]	; (8008dc0 <netconn_new_with_proto_and_callback+0xd8>)
 8008d1a:	f7ff ffc7 	bl	8008cac <netconn_apimsg>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008d24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d043      	beq.n	8008db4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <netconn_new_with_proto_and_callback+0x58>
 8008d34:	4b23      	ldr	r3, [pc, #140]	; (8008dc4 <netconn_new_with_proto_and_callback+0xdc>)
 8008d36:	22a3      	movs	r2, #163	; 0xa3
 8008d38:	4923      	ldr	r1, [pc, #140]	; (8008dc8 <netconn_new_with_proto_and_callback+0xe0>)
 8008d3a:	4824      	ldr	r0, [pc, #144]	; (8008dcc <netconn_new_with_proto_and_callback+0xe4>)
 8008d3c:	f010 faf6 	bl	801932c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	3310      	adds	r3, #16
 8008d44:	4618      	mov	r0, r3
 8008d46:	f010 f958 	bl	8018ffa <sys_mbox_valid>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d105      	bne.n	8008d5c <netconn_new_with_proto_and_callback+0x74>
 8008d50:	4b1c      	ldr	r3, [pc, #112]	; (8008dc4 <netconn_new_with_proto_and_callback+0xdc>)
 8008d52:	22a4      	movs	r2, #164	; 0xa4
 8008d54:	491e      	ldr	r1, [pc, #120]	; (8008dd0 <netconn_new_with_proto_and_callback+0xe8>)
 8008d56:	481d      	ldr	r0, [pc, #116]	; (8008dcc <netconn_new_with_proto_and_callback+0xe4>)
 8008d58:	f010 fae8 	bl	801932c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	3314      	adds	r3, #20
 8008d60:	4618      	mov	r0, r3
 8008d62:	f010 f94a 	bl	8018ffa <sys_mbox_valid>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <netconn_new_with_proto_and_callback+0x90>
 8008d6c:	4b15      	ldr	r3, [pc, #84]	; (8008dc4 <netconn_new_with_proto_and_callback+0xdc>)
 8008d6e:	22a6      	movs	r2, #166	; 0xa6
 8008d70:	4918      	ldr	r1, [pc, #96]	; (8008dd4 <netconn_new_with_proto_and_callback+0xec>)
 8008d72:	4816      	ldr	r0, [pc, #88]	; (8008dcc <netconn_new_with_proto_and_callback+0xe4>)
 8008d74:	f010 fada 	bl	801932c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	330c      	adds	r3, #12
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f010 f9cd 	bl	801911c <sys_sem_valid>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d105      	bne.n	8008d94 <netconn_new_with_proto_and_callback+0xac>
 8008d88:	4b0e      	ldr	r3, [pc, #56]	; (8008dc4 <netconn_new_with_proto_and_callback+0xdc>)
 8008d8a:	22a9      	movs	r2, #169	; 0xa9
 8008d8c:	4912      	ldr	r1, [pc, #72]	; (8008dd8 <netconn_new_with_proto_and_callback+0xf0>)
 8008d8e:	480f      	ldr	r0, [pc, #60]	; (8008dcc <netconn_new_with_proto_and_callback+0xe4>)
 8008d90:	f010 facc 	bl	801932c <iprintf>
      sys_sem_free(&conn->op_completed);
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	330c      	adds	r3, #12
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f010 f9b2 	bl	8019102 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	3310      	adds	r3, #16
 8008da2:	4618      	mov	r0, r3
 8008da4:	f010 f8a2 	bl	8018eec <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008da8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008daa:	2007      	movs	r0, #7
 8008dac:	f003 fde8 	bl	800c980 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008db0:	2300      	movs	r3, #0
 8008db2:	e000      	b.n	8008db6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3730      	adds	r7, #48	; 0x30
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	08009bb1 	.word	0x08009bb1
 8008dc4:	0801a498 	.word	0x0801a498
 8008dc8:	0801a4cc 	.word	0x0801a4cc
 8008dcc:	0801a4f0 	.word	0x0801a4f0
 8008dd0:	0801a518 	.word	0x0801a518
 8008dd4:	0801a530 	.word	0x0801a530
 8008dd8:	0801a554 	.word	0x0801a554

08008ddc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08c      	sub	sp, #48	; 0x30
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e014      	b.n	8008e18 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008df2:	2329      	movs	r3, #41	; 0x29
 8008df4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008df6:	f107 030c 	add.w	r3, r7, #12
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4808      	ldr	r0, [pc, #32]	; (8008e20 <netconn_prepare_delete+0x44>)
 8008dfe:	f7ff ff55 	bl	8008cac <netconn_apimsg>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008e08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <netconn_prepare_delete+0x3a>
    return err;
 8008e10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e14:	e000      	b.n	8008e18 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3730      	adds	r7, #48	; 0x30
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	0800a115 	.word	0x0800a115

08008e24 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <netconn_delete+0x12>
    return ERR_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e00d      	b.n	8008e52 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff ffd0 	bl	8008ddc <netconn_prepare_delete>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d102      	bne.n	8008e4e <netconn_delete+0x2a>
    netconn_free(conn);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 ff35 	bl	8009cb8 <netconn_free>
  }
  return err;
 8008e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08e      	sub	sp, #56	; 0x38
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d109      	bne.n	8008e84 <netconn_getaddr+0x28>
 8008e70:	4b1d      	ldr	r3, [pc, #116]	; (8008ee8 <netconn_getaddr+0x8c>)
 8008e72:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008e76:	491d      	ldr	r1, [pc, #116]	; (8008eec <netconn_getaddr+0x90>)
 8008e78:	481d      	ldr	r0, [pc, #116]	; (8008ef0 <netconn_getaddr+0x94>)
 8008e7a:	f010 fa57 	bl	801932c <iprintf>
 8008e7e:	f06f 030f 	mvn.w	r3, #15
 8008e82:	e02d      	b.n	8008ee0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d109      	bne.n	8008e9e <netconn_getaddr+0x42>
 8008e8a:	4b17      	ldr	r3, [pc, #92]	; (8008ee8 <netconn_getaddr+0x8c>)
 8008e8c:	f240 1213 	movw	r2, #275	; 0x113
 8008e90:	4918      	ldr	r1, [pc, #96]	; (8008ef4 <netconn_getaddr+0x98>)
 8008e92:	4817      	ldr	r0, [pc, #92]	; (8008ef0 <netconn_getaddr+0x94>)
 8008e94:	f010 fa4a 	bl	801932c <iprintf>
 8008e98:	f06f 030f 	mvn.w	r3, #15
 8008e9c:	e020      	b.n	8008ee0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d109      	bne.n	8008eb8 <netconn_getaddr+0x5c>
 8008ea4:	4b10      	ldr	r3, [pc, #64]	; (8008ee8 <netconn_getaddr+0x8c>)
 8008ea6:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008eaa:	4913      	ldr	r1, [pc, #76]	; (8008ef8 <netconn_getaddr+0x9c>)
 8008eac:	4810      	ldr	r0, [pc, #64]	; (8008ef0 <netconn_getaddr+0x94>)
 8008eae:	f010 fa3d 	bl	801932c <iprintf>
 8008eb2:	f06f 030f 	mvn.w	r3, #15
 8008eb6:	e013      	b.n	8008ee0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8008ebc:	78fb      	ldrb	r3, [r7, #3]
 8008ebe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8008eca:	f107 0314 	add.w	r3, r7, #20
 8008ece:	4619      	mov	r1, r3
 8008ed0:	480a      	ldr	r0, [pc, #40]	; (8008efc <netconn_getaddr+0xa0>)
 8008ed2:	f7ff feeb 	bl	8008cac <netconn_apimsg>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8008edc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3738      	adds	r7, #56	; 0x38
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	0801a498 	.word	0x0801a498
 8008eec:	0801a570 	.word	0x0801a570
 8008ef0:	0801a4f0 	.word	0x0801a4f0
 8008ef4:	0801a590 	.word	0x0801a590
 8008ef8:	0801a5b0 	.word	0x0801a5b0
 8008efc:	0800a9d1 	.word	0x0800a9d1

08008f00 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08e      	sub	sp, #56	; 0x38
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <netconn_bind+0x28>
 8008f14:	4b11      	ldr	r3, [pc, #68]	; (8008f5c <netconn_bind+0x5c>)
 8008f16:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008f1a:	4911      	ldr	r1, [pc, #68]	; (8008f60 <netconn_bind+0x60>)
 8008f1c:	4811      	ldr	r0, [pc, #68]	; (8008f64 <netconn_bind+0x64>)
 8008f1e:	f010 fa05 	bl	801932c <iprintf>
 8008f22:	f06f 030f 	mvn.w	r3, #15
 8008f26:	e015      	b.n	8008f54 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008f2e:	4b0e      	ldr	r3, [pc, #56]	; (8008f68 <netconn_bind+0x68>)
 8008f30:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008f3a:	88fb      	ldrh	r3, [r7, #6]
 8008f3c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008f3e:	f107 0314 	add.w	r3, r7, #20
 8008f42:	4619      	mov	r1, r3
 8008f44:	4809      	ldr	r0, [pc, #36]	; (8008f6c <netconn_bind+0x6c>)
 8008f46:	f7ff feb1 	bl	8008cac <netconn_apimsg>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008f50:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3738      	adds	r7, #56	; 0x38
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	0801a498 	.word	0x0801a498
 8008f60:	0801a5d0 	.word	0x0801a5d0
 8008f64:	0801a4f0 	.word	0x0801a4f0
 8008f68:	0801e258 	.word	0x0801e258
 8008f6c:	0800a2dd 	.word	0x0800a2dd

08008f70 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08c      	sub	sp, #48	; 0x30
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <netconn_listen_with_backlog+0x26>
 8008f82:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <netconn_listen_with_backlog+0x48>)
 8008f84:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008f88:	490c      	ldr	r1, [pc, #48]	; (8008fbc <netconn_listen_with_backlog+0x4c>)
 8008f8a:	480d      	ldr	r0, [pc, #52]	; (8008fc0 <netconn_listen_with_backlog+0x50>)
 8008f8c:	f010 f9ce 	bl	801932c <iprintf>
 8008f90:	f06f 030f 	mvn.w	r3, #15
 8008f94:	e00c      	b.n	8008fb0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008f9a:	f107 030c 	add.w	r3, r7, #12
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4808      	ldr	r0, [pc, #32]	; (8008fc4 <netconn_listen_with_backlog+0x54>)
 8008fa2:	f7ff fe83 	bl	8008cac <netconn_apimsg>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008fac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3730      	adds	r7, #48	; 0x30
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	0801a498 	.word	0x0801a498
 8008fbc:	0801a650 	.word	0x0801a650
 8008fc0:	0801a4f0 	.word	0x0801a4f0
 8008fc4:	0800a355 	.word	0x0800a355

08008fc8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d109      	bne.n	8008fec <netconn_accept+0x24>
 8008fd8:	4b3d      	ldr	r3, [pc, #244]	; (80090d0 <netconn_accept+0x108>)
 8008fda:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008fde:	493d      	ldr	r1, [pc, #244]	; (80090d4 <netconn_accept+0x10c>)
 8008fe0:	483d      	ldr	r0, [pc, #244]	; (80090d8 <netconn_accept+0x110>)
 8008fe2:	f010 f9a3 	bl	801932c <iprintf>
 8008fe6:	f06f 030f 	mvn.w	r3, #15
 8008fea:	e06c      	b.n	80090c6 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d109      	bne.n	800900c <netconn_accept+0x44>
 8008ff8:	4b35      	ldr	r3, [pc, #212]	; (80090d0 <netconn_accept+0x108>)
 8008ffa:	f240 12e3 	movw	r2, #483	; 0x1e3
 8008ffe:	4937      	ldr	r1, [pc, #220]	; (80090dc <netconn_accept+0x114>)
 8009000:	4835      	ldr	r0, [pc, #212]	; (80090d8 <netconn_accept+0x110>)
 8009002:	f010 f993 	bl	801932c <iprintf>
 8009006:	f06f 030f 	mvn.w	r3, #15
 800900a:	e05c      	b.n	80090c6 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f967 	bl	80092e0 <netconn_err>
 8009012:	4603      	mov	r3, r0
 8009014:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009016:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800901e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009022:	e050      	b.n	80090c6 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3314      	adds	r3, #20
 8009028:	4618      	mov	r0, r3
 800902a:	f00f ffe6 	bl	8018ffa <sys_mbox_valid>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <netconn_accept+0x78>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	7f1b      	ldrb	r3, [r3, #28]
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8009040:	f06f 030e 	mvn.w	r3, #14
 8009044:	e03f      	b.n	80090c6 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	7f1b      	ldrb	r3, [r3, #28]
 800904a:	f003 0302 	and.w	r3, r3, #2
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00e      	beq.n	8009070 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3314      	adds	r3, #20
 8009056:	f107 020c 	add.w	r2, r7, #12
 800905a:	4611      	mov	r1, r2
 800905c:	4618      	mov	r0, r3
 800905e:	f00f ffb0 	bl	8018fc2 <sys_arch_mbox_tryfetch>
 8009062:	4603      	mov	r3, r0
 8009064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009068:	d10a      	bne.n	8009080 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800906a:	f06f 0306 	mvn.w	r3, #6
 800906e:	e02a      	b.n	80090c6 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3314      	adds	r3, #20
 8009074:	f107 010c 	add.w	r1, r7, #12
 8009078:	2200      	movs	r2, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f00f ff62 	bl	8018f44 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <netconn_accept+0xcc>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	2200      	movs	r2, #0
 800908e:	2101      	movs	r1, #1
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f107 0213 	add.w	r2, r7, #19
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f96d 	bl	800937c <lwip_netconn_is_err_msg>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80090a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090ac:	e00b      	b.n	80090c6 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d102      	bne.n	80090ba <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80090b4:	f06f 030e 	mvn.w	r3, #14
 80090b8:	e005      	b.n	80090c6 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80090c4:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	0801a498 	.word	0x0801a498
 80090d4:	0801a670 	.word	0x0801a670
 80090d8:	0801a4f0 	.word	0x0801a4f0
 80090dc:	0801a690 	.word	0x0801a690

080090e0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b08c      	sub	sp, #48	; 0x30
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d109      	bne.n	8009104 <netconn_send+0x24>
 80090f0:	4b0e      	ldr	r3, [pc, #56]	; (800912c <netconn_send+0x4c>)
 80090f2:	f240 32b2 	movw	r2, #946	; 0x3b2
 80090f6:	490e      	ldr	r1, [pc, #56]	; (8009130 <netconn_send+0x50>)
 80090f8:	480e      	ldr	r0, [pc, #56]	; (8009134 <netconn_send+0x54>)
 80090fa:	f010 f917 	bl	801932c <iprintf>
 80090fe:	f06f 030f 	mvn.w	r3, #15
 8009102:	e00e      	b.n	8009122 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800910c:	f107 030c 	add.w	r3, r7, #12
 8009110:	4619      	mov	r1, r3
 8009112:	4809      	ldr	r0, [pc, #36]	; (8009138 <netconn_send+0x58>)
 8009114:	f7ff fdca 	bl	8008cac <netconn_apimsg>
 8009118:	4603      	mov	r3, r0
 800911a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800911e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009122:	4618      	mov	r0, r3
 8009124:	3730      	adds	r7, #48	; 0x30
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	0801a498 	.word	0x0801a498
 8009130:	0801a754 	.word	0x0801a754
 8009134:	0801a4f0 	.word	0x0801a4f0
 8009138:	0800a485 	.word	0x0800a485

0800913c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af02      	add	r7, sp, #8
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009152:	78fa      	ldrb	r2, [r7, #3]
 8009154:	f107 0110 	add.w	r1, r7, #16
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	4613      	mov	r3, r2
 800915e:	2201      	movs	r2, #1
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 f805 	bl	8009170 <netconn_write_vectors_partly>
 8009166:	4603      	mov	r3, r0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b092      	sub	sp, #72	; 0x48
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4611      	mov	r1, r2
 800917c:	461a      	mov	r2, r3
 800917e:	460b      	mov	r3, r1
 8009180:	80fb      	strh	r3, [r7, #6]
 8009182:	4613      	mov	r3, r2
 8009184:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d109      	bne.n	80091a0 <netconn_write_vectors_partly+0x30>
 800918c:	4b4e      	ldr	r3, [pc, #312]	; (80092c8 <netconn_write_vectors_partly+0x158>)
 800918e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009192:	494e      	ldr	r1, [pc, #312]	; (80092cc <netconn_write_vectors_partly+0x15c>)
 8009194:	484e      	ldr	r0, [pc, #312]	; (80092d0 <netconn_write_vectors_partly+0x160>)
 8009196:	f010 f8c9 	bl	801932c <iprintf>
 800919a:	f06f 030f 	mvn.w	r3, #15
 800919e:	e08e      	b.n	80092be <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091a8:	2b10      	cmp	r3, #16
 80091aa:	d009      	beq.n	80091c0 <netconn_write_vectors_partly+0x50>
 80091ac:	4b46      	ldr	r3, [pc, #280]	; (80092c8 <netconn_write_vectors_partly+0x158>)
 80091ae:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80091b2:	4948      	ldr	r1, [pc, #288]	; (80092d4 <netconn_write_vectors_partly+0x164>)
 80091b4:	4846      	ldr	r0, [pc, #280]	; (80092d0 <netconn_write_vectors_partly+0x160>)
 80091b6:	f010 f8b9 	bl	801932c <iprintf>
 80091ba:	f06f 0305 	mvn.w	r3, #5
 80091be:	e07e      	b.n	80092be <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	7f1b      	ldrb	r3, [r3, #28]
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d104      	bne.n	80091d6 <netconn_write_vectors_partly+0x66>
 80091cc:	797b      	ldrb	r3, [r7, #5]
 80091ce:	f003 0304 	and.w	r3, r3, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <netconn_write_vectors_partly+0x6a>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <netconn_write_vectors_partly+0x6c>
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80091e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <netconn_write_vectors_partly+0x84>
 80091e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d102      	bne.n	80091f4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80091ee:	f06f 0305 	mvn.w	r3, #5
 80091f2:	e064      	b.n	80092be <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80091f8:	2300      	movs	r3, #0
 80091fa:	643b      	str	r3, [r7, #64]	; 0x40
 80091fc:	e015      	b.n	800922a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80091fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009200:	00db      	lsls	r3, r3, #3
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	4413      	add	r3, r2
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800920a:	4413      	add	r3, r2
 800920c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800920e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009210:	00db      	lsls	r3, r3, #3
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800921a:	429a      	cmp	r2, r3
 800921c:	d202      	bcs.n	8009224 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800921e:	f06f 0305 	mvn.w	r3, #5
 8009222:	e04c      	b.n	80092be <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009226:	3301      	adds	r3, #1
 8009228:	643b      	str	r3, [r7, #64]	; 0x40
 800922a:	88fb      	ldrh	r3, [r7, #6]
 800922c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800922e:	429a      	cmp	r2, r3
 8009230:	dbe5      	blt.n	80091fe <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	e040      	b.n	80092be <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800923c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923e:	2b00      	cmp	r3, #0
 8009240:	da0a      	bge.n	8009258 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009248:	f06f 0305 	mvn.w	r3, #5
 800924c:	e037      	b.n	80092be <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800924e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009252:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009268:	797b      	ldrb	r3, [r7, #5]
 800926a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800926e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009270:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009276:	f107 0314 	add.w	r3, r7, #20
 800927a:	4619      	mov	r1, r3
 800927c:	4816      	ldr	r0, [pc, #88]	; (80092d8 <netconn_write_vectors_partly+0x168>)
 800927e:	f7ff fd15 	bl	8008cac <netconn_apimsg>
 8009282:	4603      	mov	r3, r0
 8009284:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009288:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800928c:	2b00      	cmp	r3, #0
 800928e:	d114      	bne.n	80092ba <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800929a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800929c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d006      	beq.n	80092ba <netconn_write_vectors_partly+0x14a>
 80092ac:	4b06      	ldr	r3, [pc, #24]	; (80092c8 <netconn_write_vectors_partly+0x158>)
 80092ae:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80092b2:	490a      	ldr	r1, [pc, #40]	; (80092dc <netconn_write_vectors_partly+0x16c>)
 80092b4:	4806      	ldr	r0, [pc, #24]	; (80092d0 <netconn_write_vectors_partly+0x160>)
 80092b6:	f010 f839 	bl	801932c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80092ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3748      	adds	r7, #72	; 0x48
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	0801a498 	.word	0x0801a498
 80092cc:	0801a770 	.word	0x0801a770
 80092d0:	0801a4f0 	.word	0x0801a4f0
 80092d4:	0801a78c 	.word	0x0801a78c
 80092d8:	0800a8b9 	.word	0x0800a8b9
 80092dc:	0801a7b0 	.word	0x0801a7b0

080092e0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d101      	bne.n	80092f2 <netconn_err+0x12>
    return ERR_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e00d      	b.n	800930e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80092f2:	f00f ff9d 	bl	8019230 <sys_arch_protect>
 80092f6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	7a1b      	ldrb	r3, [r3, #8]
 80092fc:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f00f ffa1 	bl	801924c <sys_arch_unprotect>
  return err;
 800930a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009326:	f113 0f0e 	cmn.w	r3, #14
 800932a:	d008      	beq.n	800933e <lwip_netconn_err_to_msg+0x26>
 800932c:	f113 0f0d 	cmn.w	r3, #13
 8009330:	d003      	beq.n	800933a <lwip_netconn_err_to_msg+0x22>
 8009332:	f113 0f0f 	cmn.w	r3, #15
 8009336:	d004      	beq.n	8009342 <lwip_netconn_err_to_msg+0x2a>
 8009338:	e005      	b.n	8009346 <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <lwip_netconn_err_to_msg+0x4c>)
 800933c:	e00e      	b.n	800935c <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800933e:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <lwip_netconn_err_to_msg+0x50>)
 8009340:	e00c      	b.n	800935c <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009342:	4b0a      	ldr	r3, [pc, #40]	; (800936c <lwip_netconn_err_to_msg+0x54>)
 8009344:	e00a      	b.n	800935c <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <lwip_netconn_err_to_msg+0x42>
 800934e:	4b08      	ldr	r3, [pc, #32]	; (8009370 <lwip_netconn_err_to_msg+0x58>)
 8009350:	227d      	movs	r2, #125	; 0x7d
 8009352:	4908      	ldr	r1, [pc, #32]	; (8009374 <lwip_netconn_err_to_msg+0x5c>)
 8009354:	4808      	ldr	r0, [pc, #32]	; (8009378 <lwip_netconn_err_to_msg+0x60>)
 8009356:	f00f ffe9 	bl	801932c <iprintf>
      return NULL;
 800935a:	2300      	movs	r3, #0
  }
}
 800935c:	4618      	mov	r0, r3
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	0801e0f0 	.word	0x0801e0f0
 8009368:	0801e0f1 	.word	0x0801e0f1
 800936c:	0801e0f2 	.word	0x0801e0f2
 8009370:	0801a7f0 	.word	0x0801a7f0
 8009374:	0801a824 	.word	0x0801a824
 8009378:	0801a834 	.word	0x0801a834

0800937c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d105      	bne.n	8009398 <lwip_netconn_is_err_msg+0x1c>
 800938c:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <lwip_netconn_is_err_msg+0x5c>)
 800938e:	2285      	movs	r2, #133	; 0x85
 8009390:	4912      	ldr	r1, [pc, #72]	; (80093dc <lwip_netconn_is_err_msg+0x60>)
 8009392:	4813      	ldr	r0, [pc, #76]	; (80093e0 <lwip_netconn_is_err_msg+0x64>)
 8009394:	f00f ffca 	bl	801932c <iprintf>

  if (msg == &netconn_aborted) {
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a12      	ldr	r2, [pc, #72]	; (80093e4 <lwip_netconn_is_err_msg+0x68>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d104      	bne.n	80093aa <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	22f3      	movs	r2, #243	; 0xf3
 80093a4:	701a      	strb	r2, [r3, #0]
    return 1;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e012      	b.n	80093d0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a0e      	ldr	r2, [pc, #56]	; (80093e8 <lwip_netconn_is_err_msg+0x6c>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d104      	bne.n	80093bc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	22f2      	movs	r2, #242	; 0xf2
 80093b6:	701a      	strb	r2, [r3, #0]
    return 1;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e009      	b.n	80093d0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a0b      	ldr	r2, [pc, #44]	; (80093ec <lwip_netconn_is_err_msg+0x70>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d104      	bne.n	80093ce <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	22f1      	movs	r2, #241	; 0xf1
 80093c8:	701a      	strb	r2, [r3, #0]
    return 1;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e000      	b.n	80093d0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	0801a7f0 	.word	0x0801a7f0
 80093dc:	0801a85c 	.word	0x0801a85c
 80093e0:	0801a834 	.word	0x0801a834
 80093e4:	0801e0f0 	.word	0x0801e0f0
 80093e8:	0801e0f1 	.word	0x0801e0f1
 80093ec:	0801e0f2 	.word	0x0801e0f2

080093f0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b088      	sub	sp, #32
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d105      	bne.n	8009410 <recv_udp+0x20>
 8009404:	4b34      	ldr	r3, [pc, #208]	; (80094d8 <recv_udp+0xe8>)
 8009406:	22e5      	movs	r2, #229	; 0xe5
 8009408:	4934      	ldr	r1, [pc, #208]	; (80094dc <recv_udp+0xec>)
 800940a:	4835      	ldr	r0, [pc, #212]	; (80094e0 <recv_udp+0xf0>)
 800940c:	f00f ff8e 	bl	801932c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d105      	bne.n	8009422 <recv_udp+0x32>
 8009416:	4b30      	ldr	r3, [pc, #192]	; (80094d8 <recv_udp+0xe8>)
 8009418:	22e6      	movs	r2, #230	; 0xe6
 800941a:	4932      	ldr	r1, [pc, #200]	; (80094e4 <recv_udp+0xf4>)
 800941c:	4830      	ldr	r0, [pc, #192]	; (80094e0 <recv_udp+0xf0>)
 800941e:	f00f ff85 	bl	801932c <iprintf>
  conn = (struct netconn *)arg;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d103      	bne.n	8009434 <recv_udp+0x44>
    pbuf_free(p);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f004 f98b 	bl	800d748 <pbuf_free>
    return;
 8009432:	e04d      	b.n	80094d0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	429a      	cmp	r2, r3
 800943c:	d005      	beq.n	800944a <recv_udp+0x5a>
 800943e:	4b26      	ldr	r3, [pc, #152]	; (80094d8 <recv_udp+0xe8>)
 8009440:	22ee      	movs	r2, #238	; 0xee
 8009442:	4929      	ldr	r1, [pc, #164]	; (80094e8 <recv_udp+0xf8>)
 8009444:	4826      	ldr	r0, [pc, #152]	; (80094e0 <recv_udp+0xf0>)
 8009446:	f00f ff71 	bl	801932c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	3310      	adds	r3, #16
 800944e:	4618      	mov	r0, r3
 8009450:	f00f fdd3 	bl	8018ffa <sys_mbox_valid>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d103      	bne.n	8009462 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f004 f974 	bl	800d748 <pbuf_free>
    return;
 8009460:	e036      	b.n	80094d0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009462:	2006      	movs	r0, #6
 8009464:	f003 fa3a 	bl	800c8dc <memp_malloc>
 8009468:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d103      	bne.n	8009478 <recv_udp+0x88>
    pbuf_free(p);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f004 f969 	bl	800d748 <pbuf_free>
    return;
 8009476:	e02b      	b.n	80094d0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <recv_udp+0xa0>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	e000      	b.n	8009492 <recv_udp+0xa2>
 8009490:	2300      	movs	r3, #0
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800949a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	891b      	ldrh	r3, [r3, #8]
 80094a0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	3310      	adds	r3, #16
 80094a6:	69b9      	ldr	r1, [r7, #24]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f00f fd31 	bl	8018f10 <sys_mbox_trypost>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d003      	beq.n	80094bc <recv_udp+0xcc>
    netbuf_delete(buf);
 80094b4:	69b8      	ldr	r0, [r7, #24]
 80094b6:	f001 fb2f 	bl	800ab18 <netbuf_delete>
    return;
 80094ba:	e009      	b.n	80094d0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <recv_udp+0xe0>
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	8afa      	ldrh	r2, [r7, #22]
 80094ca:	2100      	movs	r1, #0
 80094cc:	69f8      	ldr	r0, [r7, #28]
 80094ce:	4798      	blx	r3
  }
}
 80094d0:	3720      	adds	r7, #32
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	0801a7f0 	.word	0x0801a7f0
 80094dc:	0801a868 	.word	0x0801a868
 80094e0:	0801a834 	.word	0x0801a834
 80094e4:	0801a88c 	.word	0x0801a88c
 80094e8:	0801a8ac 	.word	0x0801a8ac

080094ec <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
 80094f8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d106      	bne.n	800950e <recv_tcp+0x22>
 8009500:	4b36      	ldr	r3, [pc, #216]	; (80095dc <recv_tcp+0xf0>)
 8009502:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009506:	4936      	ldr	r1, [pc, #216]	; (80095e0 <recv_tcp+0xf4>)
 8009508:	4836      	ldr	r0, [pc, #216]	; (80095e4 <recv_tcp+0xf8>)
 800950a:	f00f ff0f 	bl	801932c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <recv_tcp+0x36>
 8009514:	4b31      	ldr	r3, [pc, #196]	; (80095dc <recv_tcp+0xf0>)
 8009516:	f240 122d 	movw	r2, #301	; 0x12d
 800951a:	4933      	ldr	r1, [pc, #204]	; (80095e8 <recv_tcp+0xfc>)
 800951c:	4831      	ldr	r0, [pc, #196]	; (80095e4 <recv_tcp+0xf8>)
 800951e:	f00f ff05 	bl	801932c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d006      	beq.n	8009538 <recv_tcp+0x4c>
 800952a:	4b2c      	ldr	r3, [pc, #176]	; (80095dc <recv_tcp+0xf0>)
 800952c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009530:	492e      	ldr	r1, [pc, #184]	; (80095ec <recv_tcp+0x100>)
 8009532:	482c      	ldr	r0, [pc, #176]	; (80095e4 <recv_tcp+0xf8>)
 8009534:	f00f fefa 	bl	801932c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d102      	bne.n	8009548 <recv_tcp+0x5c>
    return ERR_VAL;
 8009542:	f06f 0305 	mvn.w	r3, #5
 8009546:	e045      	b.n	80095d4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	429a      	cmp	r2, r3
 8009550:	d006      	beq.n	8009560 <recv_tcp+0x74>
 8009552:	4b22      	ldr	r3, [pc, #136]	; (80095dc <recv_tcp+0xf0>)
 8009554:	f240 1235 	movw	r2, #309	; 0x135
 8009558:	4925      	ldr	r1, [pc, #148]	; (80095f0 <recv_tcp+0x104>)
 800955a:	4822      	ldr	r0, [pc, #136]	; (80095e4 <recv_tcp+0xf8>)
 800955c:	f00f fee6 	bl	801932c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	3310      	adds	r3, #16
 8009564:	4618      	mov	r0, r3
 8009566:	f00f fd48 	bl	8018ffa <sys_mbox_valid>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10d      	bne.n	800958c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d008      	beq.n	8009588 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	891b      	ldrh	r3, [r3, #8]
 800957a:	4619      	mov	r1, r3
 800957c:	68b8      	ldr	r0, [r7, #8]
 800957e:	f005 f8bb 	bl	800e6f8 <tcp_recved>
      pbuf_free(p);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f004 f8e0 	bl	800d748 <pbuf_free>
    }
    return ERR_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	e023      	b.n	80095d4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d005      	beq.n	800959e <recv_tcp+0xb2>
    msg = p;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	891b      	ldrh	r3, [r3, #8]
 800959a:	83fb      	strh	r3, [r7, #30]
 800959c:	e003      	b.n	80095a6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800959e:	4b15      	ldr	r3, [pc, #84]	; (80095f4 <recv_tcp+0x108>)
 80095a0:	61bb      	str	r3, [r7, #24]
    len = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	3310      	adds	r3, #16
 80095aa:	69b9      	ldr	r1, [r7, #24]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f00f fcaf 	bl	8018f10 <sys_mbox_trypost>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80095b8:	f04f 33ff 	mov.w	r3, #4294967295
 80095bc:	e00a      	b.n	80095d4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d005      	beq.n	80095d2 <recv_tcp+0xe6>
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	8bfa      	ldrh	r2, [r7, #30]
 80095cc:	2100      	movs	r1, #0
 80095ce:	6978      	ldr	r0, [r7, #20]
 80095d0:	4798      	blx	r3
  }

  return ERR_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3720      	adds	r7, #32
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	0801a7f0 	.word	0x0801a7f0
 80095e0:	0801a8cc 	.word	0x0801a8cc
 80095e4:	0801a834 	.word	0x0801a834
 80095e8:	0801a8f0 	.word	0x0801a8f0
 80095ec:	0801a910 	.word	0x0801a910
 80095f0:	0801a928 	.word	0x0801a928
 80095f4:	0801e0f2 	.word	0x0801e0f2

080095f8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d106      	bne.n	800961a <poll_tcp+0x22>
 800960c:	4b29      	ldr	r3, [pc, #164]	; (80096b4 <poll_tcp+0xbc>)
 800960e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009612:	4929      	ldr	r1, [pc, #164]	; (80096b8 <poll_tcp+0xc0>)
 8009614:	4829      	ldr	r0, [pc, #164]	; (80096bc <poll_tcp+0xc4>)
 8009616:	f00f fe89 	bl	801932c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	785b      	ldrb	r3, [r3, #1]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d104      	bne.n	800962c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009622:	2101      	movs	r1, #1
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 ff7b 	bl	800a520 <lwip_netconn_do_writemore>
 800962a:	e016      	b.n	800965a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	785b      	ldrb	r3, [r3, #1]
 8009630:	2b04      	cmp	r3, #4
 8009632:	d112      	bne.n	800965a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <poll_tcp+0x5a>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	7a5b      	ldrb	r3, [r3, #9]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	7a5a      	ldrb	r2, [r3, #9]
 800964c:	3a01      	subs	r2, #1
 800964e:	b2d2      	uxtb	r2, r2
 8009650:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009652:	2101      	movs	r1, #1
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 fbf7 	bl	8009e48 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	7f1b      	ldrb	r3, [r3, #28]
 800965e:	f003 0310 	and.w	r3, r3, #16
 8009662:	2b00      	cmp	r3, #0
 8009664:	d021      	beq.n	80096aa <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d01d      	beq.n	80096aa <poll_tcp+0xb2>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009676:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800967a:	d316      	bcc.n	80096aa <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009684:	2b04      	cmp	r3, #4
 8009686:	d810      	bhi.n	80096aa <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	7f1b      	ldrb	r3, [r3, #28]
 800968c:	f023 0310 	bic.w	r3, r3, #16
 8009690:	b2da      	uxtb	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	2b00      	cmp	r3, #0
 800969c:	d005      	beq.n	80096aa <poll_tcp+0xb2>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	2200      	movs	r2, #0
 80096a4:	2102      	movs	r1, #2
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	0801a7f0 	.word	0x0801a7f0
 80096b8:	0801a948 	.word	0x0801a948
 80096bc:	0801a834 	.word	0x0801a834

080096c0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <sent_tcp+0x26>
 80096d8:	4b20      	ldr	r3, [pc, #128]	; (800975c <sent_tcp+0x9c>)
 80096da:	f240 1293 	movw	r2, #403	; 0x193
 80096de:	4920      	ldr	r1, [pc, #128]	; (8009760 <sent_tcp+0xa0>)
 80096e0:	4820      	ldr	r0, [pc, #128]	; (8009764 <sent_tcp+0xa4>)
 80096e2:	f00f fe23 	bl	801932c <iprintf>

  if (conn) {
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d032      	beq.n	8009752 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	785b      	ldrb	r3, [r3, #1]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d104      	bne.n	80096fe <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80096f4:	2101      	movs	r1, #1
 80096f6:	6978      	ldr	r0, [r7, #20]
 80096f8:	f000 ff12 	bl	800a520 <lwip_netconn_do_writemore>
 80096fc:	e007      	b.n	800970e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	785b      	ldrb	r3, [r3, #1]
 8009702:	2b04      	cmp	r3, #4
 8009704:	d103      	bne.n	800970e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009706:	2101      	movs	r1, #1
 8009708:	6978      	ldr	r0, [r7, #20]
 800970a:	f000 fb9d 	bl	8009e48 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d01d      	beq.n	8009752 <sent_tcp+0x92>
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800971e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009722:	d316      	bcc.n	8009752 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800972c:	2b04      	cmp	r3, #4
 800972e:	d810      	bhi.n	8009752 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	7f1b      	ldrb	r3, [r3, #28]
 8009734:	f023 0310 	bic.w	r3, r3, #16
 8009738:	b2da      	uxtb	r2, r3
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <sent_tcp+0x92>
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	88fa      	ldrh	r2, [r7, #6]
 800974c:	2102      	movs	r1, #2
 800974e:	6978      	ldr	r0, [r7, #20]
 8009750:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	0801a7f0 	.word	0x0801a7f0
 8009760:	0801a948 	.word	0x0801a948
 8009764:	0801a834 	.word	0x0801a834

08009768 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	460b      	mov	r3, r1
 8009772:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d106      	bne.n	800978c <err_tcp+0x24>
 800977e:	4b5f      	ldr	r3, [pc, #380]	; (80098fc <err_tcp+0x194>)
 8009780:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009784:	495e      	ldr	r1, [pc, #376]	; (8009900 <err_tcp+0x198>)
 8009786:	485f      	ldr	r0, [pc, #380]	; (8009904 <err_tcp+0x19c>)
 8009788:	f00f fdd0 	bl	801932c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800978c:	f00f fd50 	bl	8019230 <sys_arch_protect>
 8009790:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	2200      	movs	r2, #0
 8009796:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	78fa      	ldrb	r2, [r7, #3]
 800979c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	7f1b      	ldrb	r3, [r3, #28]
 80097a2:	f043 0301 	orr.w	r3, r3, #1
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	785b      	ldrb	r3, [r3, #1]
 80097b0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	2200      	movs	r2, #0
 80097b6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80097b8:	69b8      	ldr	r0, [r7, #24]
 80097ba:	f00f fd47 	bl	801924c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d005      	beq.n	80097d2 <err_tcp+0x6a>
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	2200      	movs	r2, #0
 80097cc:	2104      	movs	r1, #4
 80097ce:	69f8      	ldr	r0, [r7, #28]
 80097d0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d005      	beq.n	80097e6 <err_tcp+0x7e>
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	2200      	movs	r2, #0
 80097e0:	2100      	movs	r1, #0
 80097e2:	69f8      	ldr	r0, [r7, #28]
 80097e4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d005      	beq.n	80097fa <err_tcp+0x92>
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f2:	2200      	movs	r2, #0
 80097f4:	2102      	movs	r1, #2
 80097f6:	69f8      	ldr	r0, [r7, #28]
 80097f8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80097fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097fe:	4618      	mov	r0, r3
 8009800:	f7ff fd8a 	bl	8009318 <lwip_netconn_err_to_msg>
 8009804:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	3310      	adds	r3, #16
 800980a:	4618      	mov	r0, r3
 800980c:	f00f fbf5 	bl	8018ffa <sys_mbox_valid>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d005      	beq.n	8009822 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	3310      	adds	r3, #16
 800981a:	6939      	ldr	r1, [r7, #16]
 800981c:	4618      	mov	r0, r3
 800981e:	f00f fb77 	bl	8018f10 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	3314      	adds	r3, #20
 8009826:	4618      	mov	r0, r3
 8009828:	f00f fbe7 	bl	8018ffa <sys_mbox_valid>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d005      	beq.n	800983e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	3314      	adds	r3, #20
 8009836:	6939      	ldr	r1, [r7, #16]
 8009838:	4618      	mov	r0, r3
 800983a:	f00f fb69 	bl	8018f10 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d005      	beq.n	8009850 <err_tcp+0xe8>
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	2b04      	cmp	r3, #4
 8009848:	d002      	beq.n	8009850 <err_tcp+0xe8>
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	2b03      	cmp	r3, #3
 800984e:	d143      	bne.n	80098d8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	7f1b      	ldrb	r3, [r3, #28]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	bf14      	ite	ne
 800985c:	2301      	movne	r3, #1
 800985e:	2300      	moveq	r3, #0
 8009860:	b2db      	uxtb	r3, r3
 8009862:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	7f1b      	ldrb	r3, [r3, #28]
 8009868:	f023 0304 	bic.w	r3, r3, #4
 800986c:	b2da      	uxtb	r2, r3
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d13b      	bne.n	80098f0 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d106      	bne.n	800988e <err_tcp+0x126>
 8009880:	4b1e      	ldr	r3, [pc, #120]	; (80098fc <err_tcp+0x194>)
 8009882:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009886:	4920      	ldr	r1, [pc, #128]	; (8009908 <err_tcp+0x1a0>)
 8009888:	481e      	ldr	r0, [pc, #120]	; (8009904 <err_tcp+0x19c>)
 800988a:	f00f fd4f 	bl	801932c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	2b04      	cmp	r3, #4
 8009892:	d104      	bne.n	800989e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	2200      	movs	r2, #0
 800989a:	711a      	strb	r2, [r3, #4]
 800989c:	e003      	b.n	80098a6 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	78fa      	ldrb	r2, [r7, #3]
 80098a4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	330c      	adds	r3, #12
 80098ae:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80098b0:	68b8      	ldr	r0, [r7, #8]
 80098b2:	f00f fc33 	bl	801911c <sys_sem_valid>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d106      	bne.n	80098ca <err_tcp+0x162>
 80098bc:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <err_tcp+0x194>)
 80098be:	f240 12ef 	movw	r2, #495	; 0x1ef
 80098c2:	4912      	ldr	r1, [pc, #72]	; (800990c <err_tcp+0x1a4>)
 80098c4:	480f      	ldr	r0, [pc, #60]	; (8009904 <err_tcp+0x19c>)
 80098c6:	f00f fd31 	bl	801932c <iprintf>
      conn->current_msg = NULL;
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	2200      	movs	r2, #0
 80098ce:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80098d0:	68b8      	ldr	r0, [r7, #8]
 80098d2:	f00f fc09 	bl	80190e8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80098d6:	e00b      	b.n	80098f0 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d008      	beq.n	80098f2 <err_tcp+0x18a>
 80098e0:	4b06      	ldr	r3, [pc, #24]	; (80098fc <err_tcp+0x194>)
 80098e2:	f240 12f7 	movw	r2, #503	; 0x1f7
 80098e6:	490a      	ldr	r1, [pc, #40]	; (8009910 <err_tcp+0x1a8>)
 80098e8:	4806      	ldr	r0, [pc, #24]	; (8009904 <err_tcp+0x19c>)
 80098ea:	f00f fd1f 	bl	801932c <iprintf>
  }
}
 80098ee:	e000      	b.n	80098f2 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80098f0:	bf00      	nop
}
 80098f2:	bf00      	nop
 80098f4:	3720      	adds	r7, #32
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	0801a7f0 	.word	0x0801a7f0
 8009900:	0801a948 	.word	0x0801a948
 8009904:	0801a834 	.word	0x0801a834
 8009908:	0801a958 	.word	0x0801a958
 800990c:	0801a974 	.word	0x0801a974
 8009910:	0801a990 	.word	0x0801a990

08009914 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009922:	6879      	ldr	r1, [r7, #4]
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f005 fda9 	bl	800f47c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800992a:	490a      	ldr	r1, [pc, #40]	; (8009954 <setup_tcp+0x40>)
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f005 fdb7 	bl	800f4a0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009932:	4909      	ldr	r1, [pc, #36]	; (8009958 <setup_tcp+0x44>)
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f005 fdd5 	bl	800f4e4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800993a:	2202      	movs	r2, #2
 800993c:	4907      	ldr	r1, [pc, #28]	; (800995c <setup_tcp+0x48>)
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f005 fe2c 	bl	800f59c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009944:	4906      	ldr	r1, [pc, #24]	; (8009960 <setup_tcp+0x4c>)
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f005 fdee 	bl	800f528 <tcp_err>
}
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	080094ed 	.word	0x080094ed
 8009958:	080096c1 	.word	0x080096c1
 800995c:	080095f9 	.word	0x080095f9
 8009960:	08009769 	.word	0x08009769

08009964 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b089      	sub	sp, #36	; 0x24
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	4613      	mov	r3, r2
 8009970:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d102      	bne.n	8009982 <accept_function+0x1e>
    return ERR_VAL;
 800997c:	f06f 0305 	mvn.w	r3, #5
 8009980:	e0a1      	b.n	8009ac6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	3314      	adds	r3, #20
 8009986:	4618      	mov	r0, r3
 8009988:	f00f fb37 	bl	8018ffa <sys_mbox_valid>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009992:	f06f 0305 	mvn.w	r3, #5
 8009996:	e096      	b.n	8009ac6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d11b      	bne.n	80099d6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	f103 0414 	add.w	r4, r3, #20
 80099a4:	f06f 000c 	mvn.w	r0, #12
 80099a8:	f7ff fcb6 	bl	8009318 <lwip_netconn_err_to_msg>
 80099ac:	4603      	mov	r3, r0
 80099ae:	4619      	mov	r1, r3
 80099b0:	4620      	mov	r0, r4
 80099b2:	f00f faad 	bl	8018f10 <sys_mbox_trypost>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d109      	bne.n	80099d0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <accept_function+0x6c>
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c8:	2200      	movs	r2, #0
 80099ca:	2100      	movs	r1, #0
 80099cc:	69f8      	ldr	r0, [r7, #28]
 80099ce:	4798      	blx	r3
    }
    return ERR_VAL;
 80099d0:	f06f 0305 	mvn.w	r3, #5
 80099d4:	e077      	b.n	8009ac6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80099d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d006      	beq.n	80099ec <accept_function+0x88>
 80099de:	4b3c      	ldr	r3, [pc, #240]	; (8009ad0 <accept_function+0x16c>)
 80099e0:	f240 222a 	movw	r2, #554	; 0x22a
 80099e4:	493b      	ldr	r1, [pc, #236]	; (8009ad4 <accept_function+0x170>)
 80099e6:	483c      	ldr	r0, [pc, #240]	; (8009ad8 <accept_function+0x174>)
 80099e8:	f00f fca0 	bl	801932c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	781a      	ldrb	r2, [r3, #0]
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f000 f8f0 	bl	8009bdc <netconn_alloc>
 80099fc:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d11b      	bne.n	8009a3c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	f103 0414 	add.w	r4, r3, #20
 8009a0a:	f06f 000c 	mvn.w	r0, #12
 8009a0e:	f7ff fc83 	bl	8009318 <lwip_netconn_err_to_msg>
 8009a12:	4603      	mov	r3, r0
 8009a14:	4619      	mov	r1, r3
 8009a16:	4620      	mov	r0, r4
 8009a18:	f00f fa7a 	bl	8018f10 <sys_mbox_trypost>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d109      	bne.n	8009a36 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d005      	beq.n	8009a36 <accept_function+0xd2>
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2100      	movs	r1, #0
 8009a32:	69f8      	ldr	r0, [r7, #28]
 8009a34:	4798      	blx	r3
    }
    return ERR_MEM;
 8009a36:	f04f 33ff 	mov.w	r3, #4294967295
 8009a3a:	e044      	b.n	8009ac6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009a42:	69b8      	ldr	r0, [r7, #24]
 8009a44:	f7ff ff66 	bl	8009914 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	3314      	adds	r3, #20
 8009a4c:	69b9      	ldr	r1, [r7, #24]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f00f fa5e 	bl	8018f10 <sys_mbox_trypost>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d02a      	beq.n	8009ab0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009a60:	2100      	movs	r1, #0
 8009a62:	6978      	ldr	r0, [r7, #20]
 8009a64:	f005 fd0a 	bl	800f47c <tcp_arg>
    tcp_recv(pcb, NULL);
 8009a68:	2100      	movs	r1, #0
 8009a6a:	6978      	ldr	r0, [r7, #20]
 8009a6c:	f005 fd18 	bl	800f4a0 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009a70:	2100      	movs	r1, #0
 8009a72:	6978      	ldr	r0, [r7, #20]
 8009a74:	f005 fd36 	bl	800f4e4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009a78:	2200      	movs	r2, #0
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	6978      	ldr	r0, [r7, #20]
 8009a7e:	f005 fd8d 	bl	800f59c <tcp_poll>
    tcp_err(pcb, NULL);
 8009a82:	2100      	movs	r1, #0
 8009a84:	6978      	ldr	r0, [r7, #20]
 8009a86:	f005 fd4f 	bl	800f528 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	3310      	adds	r3, #16
 8009a94:	4618      	mov	r0, r3
 8009a96:	f00f fa29 	bl	8018eec <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	3310      	adds	r3, #16
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f00f fabc 	bl	801901c <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009aa4:	69b8      	ldr	r0, [r7, #24]
 8009aa6:	f000 f907 	bl	8009cb8 <netconn_free>
    return ERR_MEM;
 8009aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8009aae:	e00a      	b.n	8009ac6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <accept_function+0x160>
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	2200      	movs	r2, #0
 8009abe:	2100      	movs	r1, #0
 8009ac0:	69f8      	ldr	r0, [r7, #28]
 8009ac2:	4798      	blx	r3
  }

  return ERR_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3724      	adds	r7, #36	; 0x24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd90      	pop	{r4, r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	0801a7f0 	.word	0x0801a7f0
 8009ad4:	0801a9ac 	.word	0x0801a9ac
 8009ad8:	0801a834 	.word	0x0801a834

08009adc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009adc:	b590      	push	{r4, r7, lr}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d006      	beq.n	8009b00 <pcb_new+0x24>
 8009af2:	4b2b      	ldr	r3, [pc, #172]	; (8009ba0 <pcb_new+0xc4>)
 8009af4:	f240 2265 	movw	r2, #613	; 0x265
 8009af8:	492a      	ldr	r1, [pc, #168]	; (8009ba4 <pcb_new+0xc8>)
 8009afa:	482b      	ldr	r0, [pc, #172]	; (8009ba8 <pcb_new+0xcc>)
 8009afc:	f00f fc16 	bl	801932c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b0a:	2b10      	cmp	r3, #16
 8009b0c:	d022      	beq.n	8009b54 <pcb_new+0x78>
 8009b0e:	2b20      	cmp	r3, #32
 8009b10:	d133      	bne.n	8009b7a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681c      	ldr	r4, [r3, #0]
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f00b f80a 	bl	8014b32 <udp_new_ip_type>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d02a      	beq.n	8009b82 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2b22      	cmp	r3, #34	; 0x22
 8009b34:	d104      	bne.n	8009b40 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6858      	ldr	r0, [r3, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	4917      	ldr	r1, [pc, #92]	; (8009bac <pcb_new+0xd0>)
 8009b4e:	f00a ff77 	bl	8014a40 <udp_recv>
      }
      break;
 8009b52:	e016      	b.n	8009b82 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681c      	ldr	r4, [r3, #0]
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f005 fc80 	bl	800f460 <tcp_new_ip_type>
 8009b60:	4603      	mov	r3, r0
 8009b62:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00b      	beq.n	8009b86 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7ff fece 	bl	8009914 <setup_tcp>
      }
      break;
 8009b78:	e005      	b.n	8009b86 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	22fa      	movs	r2, #250	; 0xfa
 8009b7e:	711a      	strb	r2, [r3, #4]
      return;
 8009b80:	e00a      	b.n	8009b98 <pcb_new+0xbc>
      break;
 8009b82:	bf00      	nop
 8009b84:	e000      	b.n	8009b88 <pcb_new+0xac>
      break;
 8009b86:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d102      	bne.n	8009b98 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	22ff      	movs	r2, #255	; 0xff
 8009b96:	711a      	strb	r2, [r3, #4]
  }
}
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd90      	pop	{r4, r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	0801a7f0 	.word	0x0801a7f0
 8009ba4:	0801a9d4 	.word	0x0801a9d4
 8009ba8:	0801a834 	.word	0x0801a834
 8009bac:	080093f1 	.word	0x080093f1

08009bb0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d102      	bne.n	8009bd2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f7ff ff85 	bl	8009adc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009bd2:	bf00      	nop
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
	...

08009bdc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	6039      	str	r1, [r7, #0]
 8009be6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009bec:	2007      	movs	r0, #7
 8009bee:	f002 fe75 	bl	800c8dc <memp_malloc>
 8009bf2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <netconn_alloc+0x22>
    return NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e052      	b.n	8009ca4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	79fa      	ldrb	r2, [r7, #7]
 8009c08:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c16:	2b10      	cmp	r3, #16
 8009c18:	d004      	beq.n	8009c24 <netconn_alloc+0x48>
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	d105      	bne.n	8009c2a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009c1e:	2306      	movs	r3, #6
 8009c20:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009c22:	e00a      	b.n	8009c3a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009c24:	2306      	movs	r3, #6
 8009c26:	617b      	str	r3, [r7, #20]
      break;
 8009c28:	e007      	b.n	8009c3a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009c2a:	4b20      	ldr	r3, [pc, #128]	; (8009cac <netconn_alloc+0xd0>)
 8009c2c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009c30:	491f      	ldr	r1, [pc, #124]	; (8009cb0 <netconn_alloc+0xd4>)
 8009c32:	4820      	ldr	r0, [pc, #128]	; (8009cb4 <netconn_alloc+0xd8>)
 8009c34:	f00f fb7a 	bl	801932c <iprintf>
      goto free_and_return;
 8009c38:	e02f      	b.n	8009c9a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3310      	adds	r3, #16
 8009c3e:	6979      	ldr	r1, [r7, #20]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f00f f931 	bl	8018ea8 <sys_mbox_new>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d125      	bne.n	8009c98 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	330c      	adds	r3, #12
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f00f f9ef 	bl	8019036 <sys_sem_new>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d005      	beq.n	8009c6a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3310      	adds	r3, #16
 8009c62:	4618      	mov	r0, r3
 8009c64:	f00f f942 	bl	8018eec <sys_mbox_free>
    goto free_and_return;
 8009c68:	e017      	b.n	8009c9a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3314      	adds	r3, #20
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f00f f9d4 	bl	801901c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c80:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	7cfa      	ldrb	r2, [r7, #19]
 8009c92:	771a      	strb	r2, [r3, #28]
  return conn;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	e005      	b.n	8009ca4 <netconn_alloc+0xc8>
    goto free_and_return;
 8009c98:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009c9a:	68f9      	ldr	r1, [r7, #12]
 8009c9c:	2007      	movs	r0, #7
 8009c9e:	f002 fe6f 	bl	800c980 <memp_free>
  return NULL;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	0801a7f0 	.word	0x0801a7f0
 8009cb0:	0801a9f4 	.word	0x0801a9f4
 8009cb4:	0801a834 	.word	0x0801a834

08009cb8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d006      	beq.n	8009cd6 <netconn_free+0x1e>
 8009cc8:	4b1b      	ldr	r3, [pc, #108]	; (8009d38 <netconn_free+0x80>)
 8009cca:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009cce:	491b      	ldr	r1, [pc, #108]	; (8009d3c <netconn_free+0x84>)
 8009cd0:	481b      	ldr	r0, [pc, #108]	; (8009d40 <netconn_free+0x88>)
 8009cd2:	f00f fb2b 	bl	801932c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3310      	adds	r3, #16
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f00f f98d 	bl	8018ffa <sys_mbox_valid>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d006      	beq.n	8009cf4 <netconn_free+0x3c>
 8009ce6:	4b14      	ldr	r3, [pc, #80]	; (8009d38 <netconn_free+0x80>)
 8009ce8:	f44f 7249 	mov.w	r2, #804	; 0x324
 8009cec:	4915      	ldr	r1, [pc, #84]	; (8009d44 <netconn_free+0x8c>)
 8009cee:	4814      	ldr	r0, [pc, #80]	; (8009d40 <netconn_free+0x88>)
 8009cf0:	f00f fb1c 	bl	801932c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3314      	adds	r3, #20
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f00f f97e 	bl	8018ffa <sys_mbox_valid>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d006      	beq.n	8009d12 <netconn_free+0x5a>
 8009d04:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <netconn_free+0x80>)
 8009d06:	f240 3227 	movw	r2, #807	; 0x327
 8009d0a:	490f      	ldr	r1, [pc, #60]	; (8009d48 <netconn_free+0x90>)
 8009d0c:	480c      	ldr	r0, [pc, #48]	; (8009d40 <netconn_free+0x88>)
 8009d0e:	f00f fb0d 	bl	801932c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	330c      	adds	r3, #12
 8009d16:	4618      	mov	r0, r3
 8009d18:	f00f f9f3 	bl	8019102 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	330c      	adds	r3, #12
 8009d20:	4618      	mov	r0, r3
 8009d22:	f00f fa0c 	bl	801913e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	2007      	movs	r0, #7
 8009d2a:	f002 fe29 	bl	800c980 <memp_free>
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	0801a7f0 	.word	0x0801a7f0
 8009d3c:	0801aa1c 	.word	0x0801aa1c
 8009d40:	0801a834 	.word	0x0801a834
 8009d44:	0801aa4c 	.word	0x0801aa4c
 8009d48:	0801aa88 	.word	0x0801aa88

08009d4c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3310      	adds	r3, #16
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f00f f94e 	bl	8018ffa <sys_mbox_valid>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d02f      	beq.n	8009dc4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009d64:	e018      	b.n	8009d98 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d6e:	2b10      	cmp	r3, #16
 8009d70:	d10e      	bne.n	8009d90 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f107 020f 	add.w	r2, r7, #15
 8009d78:	4611      	mov	r1, r2
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7ff fafe 	bl	800937c <lwip_netconn_is_err_msg>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d108      	bne.n	8009d98 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f003 fcdd 	bl	800d748 <pbuf_free>
 8009d8e:	e003      	b.n	8009d98 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f000 fec0 	bl	800ab18 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	3310      	adds	r3, #16
 8009d9c:	f107 0210 	add.w	r2, r7, #16
 8009da0:	4611      	mov	r1, r2
 8009da2:	4618      	mov	r0, r3
 8009da4:	f00f f90d 	bl	8018fc2 <sys_arch_mbox_tryfetch>
 8009da8:	4603      	mov	r3, r0
 8009daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dae:	d1da      	bne.n	8009d66 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3310      	adds	r3, #16
 8009db4:	4618      	mov	r0, r3
 8009db6:	f00f f899 	bl	8018eec <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	3310      	adds	r3, #16
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f00f f92c 	bl	801901c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f00f f916 	bl	8018ffa <sys_mbox_valid>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d034      	beq.n	8009e3e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009dd4:	e01d      	b.n	8009e12 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f107 020e 	add.w	r2, r7, #14
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff facc 	bl	800937c <lwip_netconn_is_err_msg>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d113      	bne.n	8009e12 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009dee:	6978      	ldr	r0, [r7, #20]
 8009df0:	f7ff ffac 	bl	8009d4c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d007      	beq.n	8009e0c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f004 fa97 	bl	800e334 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009e0c:	6978      	ldr	r0, [r7, #20]
 8009e0e:	f7ff ff53 	bl	8009cb8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3314      	adds	r3, #20
 8009e16:	f107 0210 	add.w	r2, r7, #16
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f00f f8d0 	bl	8018fc2 <sys_arch_mbox_tryfetch>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e28:	d1d5      	bne.n	8009dd6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3314      	adds	r3, #20
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f00f f85c 	bl	8018eec <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3314      	adds	r3, #20
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f00f f8ef 	bl	801901c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009e3e:	bf00      	nop
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d106      	bne.n	8009e6c <lwip_netconn_do_close_internal+0x24>
 8009e5e:	4ba1      	ldr	r3, [pc, #644]	; (800a0e4 <lwip_netconn_do_close_internal+0x29c>)
 8009e60:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009e64:	49a0      	ldr	r1, [pc, #640]	; (800a0e8 <lwip_netconn_do_close_internal+0x2a0>)
 8009e66:	48a1      	ldr	r0, [pc, #644]	; (800a0ec <lwip_netconn_do_close_internal+0x2a4>)
 8009e68:	f00f fa60 	bl	801932c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e74:	2b10      	cmp	r3, #16
 8009e76:	d006      	beq.n	8009e86 <lwip_netconn_do_close_internal+0x3e>
 8009e78:	4b9a      	ldr	r3, [pc, #616]	; (800a0e4 <lwip_netconn_do_close_internal+0x29c>)
 8009e7a:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009e7e:	499c      	ldr	r1, [pc, #624]	; (800a0f0 <lwip_netconn_do_close_internal+0x2a8>)
 8009e80:	489a      	ldr	r0, [pc, #616]	; (800a0ec <lwip_netconn_do_close_internal+0x2a4>)
 8009e82:	f00f fa53 	bl	801932c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	d006      	beq.n	8009e9c <lwip_netconn_do_close_internal+0x54>
 8009e8e:	4b95      	ldr	r3, [pc, #596]	; (800a0e4 <lwip_netconn_do_close_internal+0x29c>)
 8009e90:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009e94:	4997      	ldr	r1, [pc, #604]	; (800a0f4 <lwip_netconn_do_close_internal+0x2ac>)
 8009e96:	4895      	ldr	r0, [pc, #596]	; (800a0ec <lwip_netconn_do_close_internal+0x2a4>)
 8009e98:	f00f fa48 	bl	801932c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d106      	bne.n	8009eb2 <lwip_netconn_do_close_internal+0x6a>
 8009ea4:	4b8f      	ldr	r3, [pc, #572]	; (800a0e4 <lwip_netconn_do_close_internal+0x29c>)
 8009ea6:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009eaa:	4993      	ldr	r1, [pc, #588]	; (800a0f8 <lwip_netconn_do_close_internal+0x2b0>)
 8009eac:	488f      	ldr	r0, [pc, #572]	; (800a0ec <lwip_netconn_do_close_internal+0x2a4>)
 8009eae:	f00f fa3d 	bl	801932c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d106      	bne.n	8009ec8 <lwip_netconn_do_close_internal+0x80>
 8009eba:	4b8a      	ldr	r3, [pc, #552]	; (800a0e4 <lwip_netconn_do_close_internal+0x29c>)
 8009ebc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009ec0:	498e      	ldr	r1, [pc, #568]	; (800a0fc <lwip_netconn_do_close_internal+0x2b4>)
 8009ec2:	488a      	ldr	r0, [pc, #552]	; (800a0ec <lwip_netconn_do_close_internal+0x2a4>)
 8009ec4:	f00f fa32 	bl	801932c <iprintf>

  tpcb = conn->pcb.tcp;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	7a1b      	ldrb	r3, [r3, #8]
 8009ed4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	f003 0301 	and.w	r3, r3, #1
 8009edc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d102      	bne.n	8009ef2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009eec:	2301      	movs	r3, #1
 8009eee:	75bb      	strb	r3, [r7, #22]
 8009ef0:	e01f      	b.n	8009f32 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00e      	beq.n	8009f16 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009efc:	2b05      	cmp	r3, #5
 8009efe:	d007      	beq.n	8009f10 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009f04:	2b06      	cmp	r3, #6
 8009f06:	d003      	beq.n	8009f10 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009f0c:	2b08      	cmp	r3, #8
 8009f0e:	d102      	bne.n	8009f16 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009f10:	2301      	movs	r3, #1
 8009f12:	75bb      	strb	r3, [r7, #22]
 8009f14:	e00d      	b.n	8009f32 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009f16:	7b7b      	ldrb	r3, [r7, #13]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d008      	beq.n	8009f2e <lwip_netconn_do_close_internal+0xe6>
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	8b5b      	ldrh	r3, [r3, #26]
 8009f20:	f003 0310 	and.w	r3, r3, #16
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	75bb      	strb	r3, [r7, #22]
 8009f2c:	e001      	b.n	8009f32 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009f32:	7dbb      	ldrb	r3, [r7, #22]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009f38:	2100      	movs	r1, #0
 8009f3a:	6938      	ldr	r0, [r7, #16]
 8009f3c:	f005 fa9e 	bl	800f47c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	7d1b      	ldrb	r3, [r3, #20]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d104      	bne.n	8009f52 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009f48:	2100      	movs	r1, #0
 8009f4a:	6938      	ldr	r0, [r7, #16]
 8009f4c:	f005 fb0e 	bl	800f56c <tcp_accept>
 8009f50:	e01d      	b.n	8009f8e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d007      	beq.n	8009f68 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009f58:	2100      	movs	r1, #0
 8009f5a:	6938      	ldr	r0, [r7, #16]
 8009f5c:	f005 faa0 	bl	800f4a0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009f60:	2100      	movs	r1, #0
 8009f62:	6938      	ldr	r0, [r7, #16]
 8009f64:	f005 fb02 	bl	800f56c <tcp_accept>
    }
    if (shut_tx) {
 8009f68:	7b7b      	ldrb	r3, [r7, #13]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009f6e:	2100      	movs	r1, #0
 8009f70:	6938      	ldr	r0, [r7, #16]
 8009f72:	f005 fab7 	bl	800f4e4 <tcp_sent>
    }
    if (shut_close) {
 8009f76:	7dbb      	ldrb	r3, [r7, #22]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d008      	beq.n	8009f8e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2100      	movs	r1, #0
 8009f80:	6938      	ldr	r0, [r7, #16]
 8009f82:	f005 fb0b 	bl	800f59c <tcp_poll>
      tcp_err(tpcb, NULL);
 8009f86:	2100      	movs	r1, #0
 8009f88:	6938      	ldr	r0, [r7, #16]
 8009f8a:	f005 facd 	bl	800f528 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009f8e:	7dbb      	ldrb	r3, [r7, #22]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009f94:	6938      	ldr	r0, [r7, #16]
 8009f96:	f004 f889 	bl	800e0ac <tcp_close>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	75fb      	strb	r3, [r7, #23]
 8009f9e:	e007      	b.n	8009fb0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	7b7a      	ldrb	r2, [r7, #13]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6938      	ldr	r0, [r7, #16]
 8009fa8:	f004 f8ac 	bl	800e104 <tcp_shutdown>
 8009fac:	4603      	mov	r3, r0
 8009fae:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	757b      	strb	r3, [r7, #21]
 8009fbc:	e016      	b.n	8009fec <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc6:	d10f      	bne.n	8009fe8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	7a5b      	ldrb	r3, [r3, #9]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10c      	bne.n	8009fec <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009fd6:	7dbb      	ldrb	r3, [r7, #22]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d007      	beq.n	8009fec <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009fdc:	6938      	ldr	r0, [r7, #16]
 8009fde:	f004 f9a9 	bl	800e334 <tcp_abort>
          err = ERR_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	75fb      	strb	r3, [r7, #23]
 8009fe6:	e001      	b.n	8009fec <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009fec:	7d7b      	ldrb	r3, [r7, #21]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d044      	beq.n	800a07c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	330c      	adds	r3, #12
 8009ffa:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	7dfa      	ldrb	r2, [r7, #23]
 800a002:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d129      	bne.n	800a06c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a018:	7dbb      	ldrb	r3, [r7, #22]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00c      	beq.n	800a038 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <lwip_netconn_do_close_internal+0x1f0>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	2200      	movs	r2, #0
 800a032:	2104      	movs	r1, #4
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	4798      	blx	r3
      }
      if (shut_rx) {
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d009      	beq.n	800a052 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <lwip_netconn_do_close_internal+0x20a>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04a:	2200      	movs	r2, #0
 800a04c:	2100      	movs	r1, #0
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	4798      	blx	r3
      }
      if (shut_tx) {
 800a052:	7b7b      	ldrb	r3, [r7, #13]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d009      	beq.n	800a06c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d005      	beq.n	800a06c <lwip_netconn_do_close_internal+0x224>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a064:	2200      	movs	r2, #0
 800a066:	2102      	movs	r1, #2
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d002      	beq.n	800a078 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a072:	68b8      	ldr	r0, [r7, #8]
 800a074:	f00f f838 	bl	80190e8 <sys_sem_signal>
    }
    return ERR_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	e02e      	b.n	800a0da <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a07c:	7d7b      	ldrb	r3, [r7, #21]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d11e      	bne.n	800a0c0 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	7d1b      	ldrb	r3, [r3, #20]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d106      	bne.n	800a098 <lwip_netconn_do_close_internal+0x250>
 800a08a:	4b16      	ldr	r3, [pc, #88]	; (800a0e4 <lwip_netconn_do_close_internal+0x29c>)
 800a08c:	f240 4241 	movw	r2, #1089	; 0x441
 800a090:	491b      	ldr	r1, [pc, #108]	; (800a100 <lwip_netconn_do_close_internal+0x2b8>)
 800a092:	4816      	ldr	r0, [pc, #88]	; (800a0ec <lwip_netconn_do_close_internal+0x2a4>)
 800a094:	f00f f94a 	bl	801932c <iprintf>
    if (shut_tx) {
 800a098:	7b7b      	ldrb	r3, [r7, #13]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a09e:	4919      	ldr	r1, [pc, #100]	; (800a104 <lwip_netconn_do_close_internal+0x2bc>)
 800a0a0:	6938      	ldr	r0, [r7, #16]
 800a0a2:	f005 fa1f 	bl	800f4e4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	4917      	ldr	r1, [pc, #92]	; (800a108 <lwip_netconn_do_close_internal+0x2c0>)
 800a0aa:	6938      	ldr	r0, [r7, #16]
 800a0ac:	f005 fa76 	bl	800f59c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a0b0:	4916      	ldr	r1, [pc, #88]	; (800a10c <lwip_netconn_do_close_internal+0x2c4>)
 800a0b2:	6938      	ldr	r0, [r7, #16]
 800a0b4:	f005 fa38 	bl	800f528 <tcp_err>
    tcp_arg(tpcb, conn);
 800a0b8:	6879      	ldr	r1, [r7, #4]
 800a0ba:	6938      	ldr	r0, [r7, #16]
 800a0bc:	f005 f9de 	bl	800f47c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a0c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d106      	bne.n	800a0d6 <lwip_netconn_do_close_internal+0x28e>
 800a0c8:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <lwip_netconn_do_close_internal+0x29c>)
 800a0ca:	f240 424d 	movw	r2, #1101	; 0x44d
 800a0ce:	4910      	ldr	r1, [pc, #64]	; (800a110 <lwip_netconn_do_close_internal+0x2c8>)
 800a0d0:	4806      	ldr	r0, [pc, #24]	; (800a0ec <lwip_netconn_do_close_internal+0x2a4>)
 800a0d2:	f00f f92b 	bl	801932c <iprintf>
  return err;
 800a0d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0801a7f0 	.word	0x0801a7f0
 800a0e8:	0801aac4 	.word	0x0801aac4
 800a0ec:	0801a834 	.word	0x0801a834
 800a0f0:	0801aad4 	.word	0x0801aad4
 800a0f4:	0801aaf4 	.word	0x0801aaf4
 800a0f8:	0801ab18 	.word	0x0801ab18
 800a0fc:	0801a958 	.word	0x0801a958
 800a100:	0801ab2c 	.word	0x0801ab2c
 800a104:	080096c1 	.word	0x080096c1
 800a108:	080095f9 	.word	0x080095f9
 800a10c:	08009769 	.word	0x08009769
 800a110:	0801ab50 	.word	0x0801ab50

0800a114 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	785b      	ldrb	r3, [r3, #1]
 800a126:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a128:	7afb      	ldrb	r3, [r7, #11]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00d      	beq.n	800a14a <lwip_netconn_do_delconn+0x36>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a138:	2b10      	cmp	r3, #16
 800a13a:	d006      	beq.n	800a14a <lwip_netconn_do_delconn+0x36>
 800a13c:	4b60      	ldr	r3, [pc, #384]	; (800a2c0 <lwip_netconn_do_delconn+0x1ac>)
 800a13e:	f240 425f 	movw	r2, #1119	; 0x45f
 800a142:	4960      	ldr	r1, [pc, #384]	; (800a2c4 <lwip_netconn_do_delconn+0x1b0>)
 800a144:	4860      	ldr	r0, [pc, #384]	; (800a2c8 <lwip_netconn_do_delconn+0x1b4>)
 800a146:	f00f f8f1 	bl	801932c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a14a:	7afb      	ldrb	r3, [r7, #11]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d005      	beq.n	800a15c <lwip_netconn_do_delconn+0x48>
 800a150:	7afb      	ldrb	r3, [r7, #11]
 800a152:	2b02      	cmp	r3, #2
 800a154:	d002      	beq.n	800a15c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a156:	7afb      	ldrb	r3, [r7, #11]
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d109      	bne.n	800a170 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a15c:	7afb      	ldrb	r3, [r7, #11]
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d10a      	bne.n	800a178 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	7f1b      	ldrb	r3, [r3, #28]
 800a168:	f003 0304 	and.w	r3, r3, #4
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d103      	bne.n	800a178 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	22fb      	movs	r2, #251	; 0xfb
 800a174:	711a      	strb	r2, [r3, #4]
 800a176:	e097      	b.n	800a2a8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a178:	7afb      	ldrb	r3, [r7, #11]
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d10d      	bne.n	800a19a <lwip_netconn_do_delconn+0x86>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	7f1b      	ldrb	r3, [r3, #28]
 800a184:	f003 0304 	and.w	r3, r3, #4
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d106      	bne.n	800a19a <lwip_netconn_do_delconn+0x86>
 800a18c:	4b4c      	ldr	r3, [pc, #304]	; (800a2c0 <lwip_netconn_do_delconn+0x1ac>)
 800a18e:	f240 427b 	movw	r2, #1147	; 0x47b
 800a192:	494e      	ldr	r1, [pc, #312]	; (800a2cc <lwip_netconn_do_delconn+0x1b8>)
 800a194:	484c      	ldr	r0, [pc, #304]	; (800a2c8 <lwip_netconn_do_delconn+0x1b4>)
 800a196:	f00f f8c9 	bl	801932c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff fdd1 	bl	8009d4c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d05f      	beq.n	800a274 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1be:	2b10      	cmp	r3, #16
 800a1c0:	d00e      	beq.n	800a1e0 <lwip_netconn_do_delconn+0xcc>
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	d000      	beq.n	800a1c8 <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800a1c6:	e051      	b.n	800a26c <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f00a fc51 	bl	8014a80 <udp_remove>
          break;
 800a1de:	e045      	b.n	800a26c <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d006      	beq.n	800a1f8 <lwip_netconn_do_delconn+0xe4>
 800a1ea:	4b35      	ldr	r3, [pc, #212]	; (800a2c0 <lwip_netconn_do_delconn+0x1ac>)
 800a1ec:	f240 4294 	movw	r2, #1172	; 0x494
 800a1f0:	4937      	ldr	r1, [pc, #220]	; (800a2d0 <lwip_netconn_do_delconn+0x1bc>)
 800a1f2:	4835      	ldr	r0, [pc, #212]	; (800a2c8 <lwip_netconn_do_delconn+0x1b4>)
 800a1f4:	f00f f89a 	bl	801932c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2204      	movs	r2, #4
 800a1fe:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2203      	movs	r2, #3
 800a204:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2100      	movs	r1, #0
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff fe17 	bl	8009e48 <lwip_netconn_do_close_internal>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d04a      	beq.n	800a2b6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	2b04      	cmp	r3, #4
 800a228:	d006      	beq.n	800a238 <lwip_netconn_do_delconn+0x124>
 800a22a:	4b25      	ldr	r3, [pc, #148]	; (800a2c0 <lwip_netconn_do_delconn+0x1ac>)
 800a22c:	f240 429a 	movw	r2, #1178	; 0x49a
 800a230:	4928      	ldr	r1, [pc, #160]	; (800a2d4 <lwip_netconn_do_delconn+0x1c0>)
 800a232:	4825      	ldr	r0, [pc, #148]	; (800a2c8 <lwip_netconn_do_delconn+0x1b4>)
 800a234:	f00f f87a 	bl	801932c <iprintf>
            UNLOCK_TCPIP_CORE();
 800a238:	4827      	ldr	r0, [pc, #156]	; (800a2d8 <lwip_netconn_do_delconn+0x1c4>)
 800a23a:	f00e ffc6 	bl	80191ca <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	330c      	adds	r3, #12
 800a244:	2100      	movs	r1, #0
 800a246:	4618      	mov	r0, r3
 800a248:	f00e ff1d 	bl	8019086 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a24c:	4822      	ldr	r0, [pc, #136]	; (800a2d8 <lwip_netconn_do_delconn+0x1c4>)
 800a24e:	f00e ffad 	bl	80191ac <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d02c      	beq.n	800a2b6 <lwip_netconn_do_delconn+0x1a2>
 800a25c:	4b18      	ldr	r3, [pc, #96]	; (800a2c0 <lwip_netconn_do_delconn+0x1ac>)
 800a25e:	f240 429e 	movw	r2, #1182	; 0x49e
 800a262:	491c      	ldr	r1, [pc, #112]	; (800a2d4 <lwip_netconn_do_delconn+0x1c0>)
 800a264:	4818      	ldr	r0, [pc, #96]	; (800a2c8 <lwip_netconn_do_delconn+0x1b4>)
 800a266:	f00f f861 	bl	801932c <iprintf>
          return;
 800a26a:	e024      	b.n	800a2b6 <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2200      	movs	r2, #0
 800a272:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d007      	beq.n	800a28e <lwip_netconn_do_delconn+0x17a>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	6810      	ldr	r0, [r2, #0]
 800a288:	2200      	movs	r2, #0
 800a28a:	2100      	movs	r1, #0
 800a28c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	2b00      	cmp	r3, #0
 800a296:	d007      	beq.n	800a2a8 <lwip_netconn_do_delconn+0x194>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	6810      	ldr	r0, [r2, #0]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2102      	movs	r1, #2
 800a2a6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	330c      	adds	r3, #12
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f00e ff34 	bl	801911c <sys_sem_valid>
 800a2b4:	e000      	b.n	800a2b8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800a2b6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	0801a7f0 	.word	0x0801a7f0
 800a2c4:	0801ab60 	.word	0x0801ab60
 800a2c8:	0801a834 	.word	0x0801a834
 800a2cc:	0801ab74 	.word	0x0801ab74
 800a2d0:	0801ab94 	.word	0x0801ab94
 800a2d4:	0801abb0 	.word	0x0801abb0
 800a2d8:	200079fc 	.word	0x200079fc

0800a2dc <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d026      	beq.n	800a340 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2fc:	2b10      	cmp	r3, #16
 800a2fe:	d00e      	beq.n	800a31e <lwip_netconn_do_bind+0x42>
 800a300:	2b20      	cmp	r3, #32
 800a302:	d119      	bne.n	800a338 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6858      	ldr	r0, [r3, #4]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6899      	ldr	r1, [r3, #8]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	899b      	ldrh	r3, [r3, #12]
 800a312:	461a      	mov	r2, r3
 800a314:	f00a fa84 	bl	8014820 <udp_bind>
 800a318:	4603      	mov	r3, r0
 800a31a:	73fb      	strb	r3, [r7, #15]
        break;
 800a31c:	e012      	b.n	800a344 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6858      	ldr	r0, [r3, #4]
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	6899      	ldr	r1, [r3, #8]
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	899b      	ldrh	r3, [r3, #12]
 800a32c:	461a      	mov	r2, r3
 800a32e:	f004 f80d 	bl	800e34c <tcp_bind>
 800a332:	4603      	mov	r3, r0
 800a334:	73fb      	strb	r3, [r7, #15]
        break;
 800a336:	e005      	b.n	800a344 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a338:	23fa      	movs	r3, #250	; 0xfa
 800a33a:	73fb      	strb	r3, [r7, #15]
        break;
 800a33c:	bf00      	nop
 800a33e:	e001      	b.n	800a344 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 800a340:	23fa      	movs	r3, #250	; 0xfa
 800a342:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	7bfa      	ldrb	r2, [r7, #15]
 800a348:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a34a:	bf00      	nop
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d07f      	beq.n	800a46a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a374:	2b10      	cmp	r3, #16
 800a376:	d175      	bne.n	800a464 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	785b      	ldrb	r3, [r3, #1]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d165      	bne.n	800a44e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	7d1b      	ldrb	r3, [r3, #20]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a38e:	23fa      	movs	r3, #250	; 0xfa
 800a390:	72fb      	strb	r3, [r7, #11]
 800a392:	e06c      	b.n	800a46e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a394:	23ff      	movs	r3, #255	; 0xff
 800a396:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	f107 020b 	add.w	r2, r7, #11
 800a3a2:	7cf9      	ldrb	r1, [r7, #19]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f004 f8a3 	bl	800e4f0 <tcp_listen_with_backlog_and_err>
 800a3aa:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d05d      	beq.n	800a46e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3310      	adds	r3, #16
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f00e fe1e 	bl	8018ffa <sys_mbox_valid>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00b      	beq.n	800a3dc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3310      	adds	r3, #16
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f00e fd8e 	bl	8018eec <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3310      	adds	r3, #16
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f00e fe20 	bl	801901c <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3314      	adds	r3, #20
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f00e fe07 	bl	8018ffa <sys_mbox_valid>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d108      	bne.n	800a404 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3314      	adds	r3, #20
 800a3f8:	2106      	movs	r1, #6
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f00e fd54 	bl	8018ea8 <sys_mbox_new>
 800a400:	4603      	mov	r3, r0
 800a402:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a404:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d118      	bne.n	800a43e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2202      	movs	r2, #2
 800a412:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4619      	mov	r1, r3
 800a428:	4610      	mov	r0, r2
 800a42a:	f005 f827 	bl	800f47c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	4912      	ldr	r1, [pc, #72]	; (800a480 <lwip_netconn_do_listen+0x12c>)
 800a436:	4618      	mov	r0, r3
 800a438:	f005 f898 	bl	800f56c <tcp_accept>
 800a43c:	e017      	b.n	800a46e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f003 fe34 	bl	800e0ac <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2200      	movs	r2, #0
 800a44a:	605a      	str	r2, [r3, #4]
 800a44c:	e00f      	b.n	800a46e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	785b      	ldrb	r3, [r3, #1]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d102      	bne.n	800a45e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	72fb      	strb	r3, [r7, #11]
 800a45c:	e007      	b.n	800a46e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a45e:	23f5      	movs	r3, #245	; 0xf5
 800a460:	72fb      	strb	r3, [r7, #11]
 800a462:	e004      	b.n	800a46e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a464:	23f0      	movs	r3, #240	; 0xf0
 800a466:	72fb      	strb	r3, [r7, #11]
 800a468:	e001      	b.n	800a46e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a46a:	23f5      	movs	r3, #245	; 0xf5
 800a46c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a46e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a476:	bf00      	nop
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	08009965 	.word	0x08009965

0800a484 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4618      	mov	r0, r3
 800a496:	f7fe ff23 	bl	80092e0 <netconn_err>
 800a49a:	4603      	mov	r3, r0
 800a49c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a49e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d135      	bne.n	800a512 <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d02e      	beq.n	800a50e <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4ba:	2b20      	cmp	r3, #32
 800a4bc:	d123      	bne.n	800a506 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10c      	bne.n	800a4e2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	f009 ffb8 	bl	801444c <udp_send>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800a4e0:	e017      	b.n	800a512 <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6858      	ldr	r0, [r3, #4]
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	6819      	ldr	r1, [r3, #0]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f103 0208 	add.w	r2, r3, #8
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	899b      	ldrh	r3, [r3, #12]
 800a4fc:	f009 ffda 	bl	80144b4 <udp_sendto>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]
          break;
 800a504:	e005      	b.n	800a512 <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800a506:	23f5      	movs	r3, #245	; 0xf5
 800a508:	73fb      	strb	r3, [r7, #15]
          break;
 800a50a:	bf00      	nop
 800a50c:	e001      	b.n	800a512 <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 800a50e:	23f5      	movs	r3, #245	; 0xf5
 800a510:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	7bfa      	ldrb	r2, [r7, #15]
 800a516:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a518:	bf00      	nop
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d106      	bne.n	800a544 <lwip_netconn_do_writemore+0x24>
 800a536:	4b96      	ldr	r3, [pc, #600]	; (800a790 <lwip_netconn_do_writemore+0x270>)
 800a538:	f240 6273 	movw	r2, #1651	; 0x673
 800a53c:	4995      	ldr	r1, [pc, #596]	; (800a794 <lwip_netconn_do_writemore+0x274>)
 800a53e:	4896      	ldr	r0, [pc, #600]	; (800a798 <lwip_netconn_do_writemore+0x278>)
 800a540:	f00e fef4 	bl	801932c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	785b      	ldrb	r3, [r3, #1]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d006      	beq.n	800a55a <lwip_netconn_do_writemore+0x3a>
 800a54c:	4b90      	ldr	r3, [pc, #576]	; (800a790 <lwip_netconn_do_writemore+0x270>)
 800a54e:	f240 6274 	movw	r2, #1652	; 0x674
 800a552:	4992      	ldr	r1, [pc, #584]	; (800a79c <lwip_netconn_do_writemore+0x27c>)
 800a554:	4890      	ldr	r0, [pc, #576]	; (800a798 <lwip_netconn_do_writemore+0x278>)
 800a556:	f00e fee9 	bl	801932c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d106      	bne.n	800a570 <lwip_netconn_do_writemore+0x50>
 800a562:	4b8b      	ldr	r3, [pc, #556]	; (800a790 <lwip_netconn_do_writemore+0x270>)
 800a564:	f240 6275 	movw	r2, #1653	; 0x675
 800a568:	498d      	ldr	r1, [pc, #564]	; (800a7a0 <lwip_netconn_do_writemore+0x280>)
 800a56a:	488b      	ldr	r0, [pc, #556]	; (800a798 <lwip_netconn_do_writemore+0x278>)
 800a56c:	f00e fede 	bl	801932c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <lwip_netconn_do_writemore+0x66>
 800a578:	4b85      	ldr	r3, [pc, #532]	; (800a790 <lwip_netconn_do_writemore+0x270>)
 800a57a:	f240 6276 	movw	r2, #1654	; 0x676
 800a57e:	4989      	ldr	r1, [pc, #548]	; (800a7a4 <lwip_netconn_do_writemore+0x284>)
 800a580:	4885      	ldr	r0, [pc, #532]	; (800a798 <lwip_netconn_do_writemore+0x278>)
 800a582:	f00e fed3 	bl	801932c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	699a      	ldr	r2, [r3, #24]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	429a      	cmp	r2, r3
 800a594:	d306      	bcc.n	800a5a4 <lwip_netconn_do_writemore+0x84>
 800a596:	4b7e      	ldr	r3, [pc, #504]	; (800a790 <lwip_netconn_do_writemore+0x270>)
 800a598:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800a59c:	4982      	ldr	r1, [pc, #520]	; (800a7a8 <lwip_netconn_do_writemore+0x288>)
 800a59e:	487e      	ldr	r0, [pc, #504]	; (800a798 <lwip_netconn_do_writemore+0x278>)
 800a5a0:	f00e fec4 	bl	801932c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	899b      	ldrh	r3, [r3, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <lwip_netconn_do_writemore+0x9c>
 800a5ae:	4b78      	ldr	r3, [pc, #480]	; (800a790 <lwip_netconn_do_writemore+0x270>)
 800a5b0:	f240 6279 	movw	r2, #1657	; 0x679
 800a5b4:	497d      	ldr	r1, [pc, #500]	; (800a7ac <lwip_netconn_do_writemore+0x28c>)
 800a5b6:	4878      	ldr	r0, [pc, #480]	; (800a798 <lwip_netconn_do_writemore+0x278>)
 800a5b8:	f00e feb8 	bl	801932c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	7f1b      	ldrb	r3, [r3, #28]
 800a5c2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	7f1b      	ldrb	r3, [r3, #28]
 800a5c8:	f003 0302 	and.w	r3, r3, #2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d104      	bne.n	800a5da <lwip_netconn_do_writemore+0xba>
 800a5d0:	7ebb      	ldrb	r3, [r7, #26]
 800a5d2:	f003 0304 	and.w	r3, r3, #4
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <lwip_netconn_do_writemore+0xbe>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e000      	b.n	800a5e0 <lwip_netconn_do_writemore+0xc0>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a60c:	d307      	bcc.n	800a61e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a60e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a612:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a614:	7ebb      	ldrb	r3, [r7, #26]
 800a616:	f043 0302 	orr.w	r3, r3, #2
 800a61a:	76bb      	strb	r3, [r7, #26]
 800a61c:	e001      	b.n	800a622 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a62a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a62c:	89fa      	ldrh	r2, [r7, #14]
 800a62e:	8bbb      	ldrh	r3, [r7, #28]
 800a630:	429a      	cmp	r2, r3
 800a632:	d216      	bcs.n	800a662 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a634:	89fb      	ldrh	r3, [r7, #14]
 800a636:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a638:	7e3b      	ldrb	r3, [r7, #24]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00d      	beq.n	800a65a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a63e:	8bbb      	ldrh	r3, [r7, #28]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10e      	bne.n	800a662 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a1b      	ldr	r3, [r3, #32]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d102      	bne.n	800a654 <lwip_netconn_do_writemore+0x134>
 800a64e:	f06f 0306 	mvn.w	r3, #6
 800a652:	e000      	b.n	800a656 <lwip_netconn_do_writemore+0x136>
 800a654:	2300      	movs	r3, #0
 800a656:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a658:	e07d      	b.n	800a756 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a65a:	7ebb      	ldrb	r3, [r7, #26]
 800a65c:	f043 0302 	orr.w	r3, r3, #2
 800a660:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	691a      	ldr	r2, [r3, #16]
 800a668:	8bbb      	ldrh	r3, [r7, #28]
 800a66a:	441a      	add	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a1b      	ldr	r3, [r3, #32]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	429a      	cmp	r2, r3
 800a676:	d906      	bls.n	800a686 <lwip_netconn_do_writemore+0x166>
 800a678:	4b45      	ldr	r3, [pc, #276]	; (800a790 <lwip_netconn_do_writemore+0x270>)
 800a67a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800a67e:	494c      	ldr	r1, [pc, #304]	; (800a7b0 <lwip_netconn_do_writemore+0x290>)
 800a680:	4845      	ldr	r0, [pc, #276]	; (800a798 <lwip_netconn_do_writemore+0x278>)
 800a682:	f00e fe53 	bl	801932c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a686:	8bbb      	ldrh	r3, [r7, #28]
 800a688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d103      	bne.n	800a698 <lwip_netconn_do_writemore+0x178>
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a696:	d209      	bcs.n	800a6ac <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a69c:	8bba      	ldrh	r2, [r7, #28]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d10b      	bne.n	800a6ba <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	899b      	ldrh	r3, [r3, #12]
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d906      	bls.n	800a6ba <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a6b0:	7ebb      	ldrb	r3, [r7, #26]
 800a6b2:	f043 0302 	orr.w	r3, r3, #2
 800a6b6:	76bb      	strb	r3, [r7, #26]
 800a6b8:	e001      	b.n	800a6be <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6858      	ldr	r0, [r3, #4]
 800a6c2:	7ebb      	ldrb	r3, [r7, #26]
 800a6c4:	8bba      	ldrh	r2, [r7, #28]
 800a6c6:	6979      	ldr	r1, [r7, #20]
 800a6c8:	f007 fe14 	bl	80122f4 <tcp_write>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a6d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d12c      	bne.n	800a732 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	6999      	ldr	r1, [r3, #24]
 800a6de:	8bba      	ldrh	r2, [r7, #28]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	440a      	add	r2, r1
 800a6e6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	6919      	ldr	r1, [r3, #16]
 800a6ee:	8bba      	ldrh	r2, [r7, #28]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
 800a6f4:	440a      	add	r2, r1
 800a6f6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a1b      	ldr	r3, [r3, #32]
 800a6fc:	691a      	ldr	r2, [r3, #16]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	429a      	cmp	r2, r3
 800a708:	d113      	bne.n	800a732 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	899a      	ldrh	r2, [r3, #12]
 800a710:	3a01      	subs	r2, #1
 800a712:	b292      	uxth	r2, r2
 800a714:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	899b      	ldrh	r3, [r3, #12]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d008      	beq.n	800a732 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a1b      	ldr	r3, [r3, #32]
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	3208      	adds	r2, #8
 800a728:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	2200      	movs	r2, #0
 800a730:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a732:	7e7b      	ldrb	r3, [r7, #25]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d004      	beq.n	800a742 <lwip_netconn_do_writemore+0x222>
 800a738:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f43f af50 	beq.w	800a5e2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a742:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d004      	beq.n	800a754 <lwip_netconn_do_writemore+0x234>
 800a74a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a752:	d146      	bne.n	800a7e2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a754:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a756:	7e3b      	ldrb	r3, [r7, #24]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d02b      	beq.n	800a7b4 <lwip_netconn_do_writemore+0x294>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	699a      	ldr	r2, [r3, #24]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d223      	bcs.n	800a7b4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	2b00      	cmp	r3, #0
 800a772:	d005      	beq.n	800a780 <lwip_netconn_do_writemore+0x260>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a778:	2200      	movs	r2, #0
 800a77a:	2103      	movs	r1, #3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	7f1b      	ldrb	r3, [r3, #28]
 800a784:	f043 0310 	orr.w	r3, r3, #16
 800a788:	b2da      	uxtb	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	771a      	strb	r2, [r3, #28]
 800a78e:	e028      	b.n	800a7e2 <lwip_netconn_do_writemore+0x2c2>
 800a790:	0801a7f0 	.word	0x0801a7f0
 800a794:	0801a948 	.word	0x0801a948
 800a798:	0801a834 	.word	0x0801a834
 800a79c:	0801ac50 	.word	0x0801ac50
 800a7a0:	0801a958 	.word	0x0801a958
 800a7a4:	0801ac70 	.word	0x0801ac70
 800a7a8:	0801ac88 	.word	0x0801ac88
 800a7ac:	0801acc8 	.word	0x0801acc8
 800a7b0:	0801acf0 	.word	0x0801acf0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a7bc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a7c0:	d305      	bcc.n	800a7ce <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a7ca:	2b04      	cmp	r3, #4
 800a7cc:	d909      	bls.n	800a7e2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <lwip_netconn_do_writemore+0x2c2>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7da:	2200      	movs	r2, #0
 800a7dc:	2103      	movs	r1, #3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a7e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d11d      	bne.n	800a826 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	699a      	ldr	r2, [r3, #24]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d002      	beq.n	800a800 <lwip_netconn_do_writemore+0x2e0>
 800a7fa:	7e3b      	ldrb	r3, [r7, #24]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a800:	2301      	movs	r3, #1
 800a802:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	4618      	mov	r0, r3
 800a80a:	f008 fb5f 	bl	8012ecc <tcp_output>
 800a80e:	4603      	mov	r3, r0
 800a810:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a812:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a816:	f113 0f04 	cmn.w	r3, #4
 800a81a:	d12c      	bne.n	800a876 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a81c:	7b3b      	ldrb	r3, [r7, #12]
 800a81e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a820:	2301      	movs	r3, #1
 800a822:	76fb      	strb	r3, [r7, #27]
 800a824:	e027      	b.n	800a876 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a826:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82e:	d120      	bne.n	800a872 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	4618      	mov	r0, r3
 800a836:	f008 fb49 	bl	8012ecc <tcp_output>
 800a83a:	4603      	mov	r3, r0
 800a83c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a83e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a842:	f113 0f04 	cmn.w	r3, #4
 800a846:	d104      	bne.n	800a852 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a848:	7b7b      	ldrb	r3, [r7, #13]
 800a84a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a84c:	2301      	movs	r3, #1
 800a84e:	76fb      	strb	r3, [r7, #27]
 800a850:	e011      	b.n	800a876 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a852:	7e3b      	ldrb	r3, [r7, #24]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00e      	beq.n	800a876 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d102      	bne.n	800a868 <lwip_netconn_do_writemore+0x348>
 800a862:	f06f 0306 	mvn.w	r3, #6
 800a866:	e000      	b.n	800a86a <lwip_netconn_do_writemore+0x34a>
 800a868:	2300      	movs	r3, #0
 800a86a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a86c:	2301      	movs	r3, #1
 800a86e:	76fb      	strb	r3, [r7, #27]
 800a870:	e001      	b.n	800a876 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a872:	2301      	movs	r3, #1
 800a874:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a876:	7efb      	ldrb	r3, [r7, #27]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d015      	beq.n	800a8a8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a1b      	ldr	r3, [r3, #32]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	330c      	adds	r3, #12
 800a884:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	7ffa      	ldrb	r2, [r7, #31]
 800a88c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a89a:	78fb      	ldrb	r3, [r7, #3]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d006      	beq.n	800a8ae <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a8a0:	68b8      	ldr	r0, [r7, #8]
 800a8a2:	f00e fc21 	bl	80190e8 <sys_sem_signal>
 800a8a6:	e002      	b.n	800a8ae <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ac:	e000      	b.n	800a8b0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3720      	adds	r7, #32
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fe fd09 	bl	80092e0 <netconn_err>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d166      	bne.n	800a9a8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8e4:	2b10      	cmp	r3, #16
 800a8e6:	d15d      	bne.n	800a9a4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	785b      	ldrb	r3, [r3, #1]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d002      	beq.n	800a8f8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a8f2:	23fb      	movs	r3, #251	; 0xfb
 800a8f4:	73fb      	strb	r3, [r7, #15]
 800a8f6:	e057      	b.n	800a9a8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d04d      	beq.n	800a99e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2201      	movs	r2, #1
 800a908:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6a1b      	ldr	r3, [r3, #32]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d006      	beq.n	800a922 <lwip_netconn_do_write+0x6a>
 800a914:	4b28      	ldr	r3, [pc, #160]	; (800a9b8 <lwip_netconn_do_write+0x100>)
 800a916:	f240 7223 	movw	r2, #1827	; 0x723
 800a91a:	4928      	ldr	r1, [pc, #160]	; (800a9bc <lwip_netconn_do_write+0x104>)
 800a91c:	4828      	ldr	r0, [pc, #160]	; (800a9c0 <lwip_netconn_do_write+0x108>)
 800a91e:	f00e fd05 	bl	801932c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d106      	bne.n	800a938 <lwip_netconn_do_write+0x80>
 800a92a:	4b23      	ldr	r3, [pc, #140]	; (800a9b8 <lwip_netconn_do_write+0x100>)
 800a92c:	f240 7224 	movw	r2, #1828	; 0x724
 800a930:	4924      	ldr	r1, [pc, #144]	; (800a9c4 <lwip_netconn_do_write+0x10c>)
 800a932:	4823      	ldr	r0, [pc, #140]	; (800a9c0 <lwip_netconn_do_write+0x108>)
 800a934:	f00e fcfa 	bl	801932c <iprintf>
        msg->conn->current_msg = msg;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f7ff fdea 	bl	800a520 <lwip_netconn_do_writemore>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d02e      	beq.n	800a9b0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	785b      	ldrb	r3, [r3, #1]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d006      	beq.n	800a96a <lwip_netconn_do_write+0xb2>
 800a95c:	4b16      	ldr	r3, [pc, #88]	; (800a9b8 <lwip_netconn_do_write+0x100>)
 800a95e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a962:	4919      	ldr	r1, [pc, #100]	; (800a9c8 <lwip_netconn_do_write+0x110>)
 800a964:	4816      	ldr	r0, [pc, #88]	; (800a9c0 <lwip_netconn_do_write+0x108>)
 800a966:	f00e fce1 	bl	801932c <iprintf>
          UNLOCK_TCPIP_CORE();
 800a96a:	4818      	ldr	r0, [pc, #96]	; (800a9cc <lwip_netconn_do_write+0x114>)
 800a96c:	f00e fc2d 	bl	80191ca <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	330c      	adds	r3, #12
 800a976:	2100      	movs	r1, #0
 800a978:	4618      	mov	r0, r3
 800a97a:	f00e fb84 	bl	8019086 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a97e:	4813      	ldr	r0, [pc, #76]	; (800a9cc <lwip_netconn_do_write+0x114>)
 800a980:	f00e fc14 	bl	80191ac <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d110      	bne.n	800a9b0 <lwip_netconn_do_write+0xf8>
 800a98e:	4b0a      	ldr	r3, [pc, #40]	; (800a9b8 <lwip_netconn_do_write+0x100>)
 800a990:	f240 722c 	movw	r2, #1836	; 0x72c
 800a994:	490c      	ldr	r1, [pc, #48]	; (800a9c8 <lwip_netconn_do_write+0x110>)
 800a996:	480a      	ldr	r0, [pc, #40]	; (800a9c0 <lwip_netconn_do_write+0x108>)
 800a998:	f00e fcc8 	bl	801932c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a99c:	e008      	b.n	800a9b0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a99e:	23f5      	movs	r3, #245	; 0xf5
 800a9a0:	73fb      	strb	r3, [r7, #15]
 800a9a2:	e001      	b.n	800a9a8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a9a4:	23fa      	movs	r3, #250	; 0xfa
 800a9a6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	7bfa      	ldrb	r2, [r7, #15]
 800a9ac:	711a      	strb	r2, [r3, #4]
 800a9ae:	e000      	b.n	800a9b2 <lwip_netconn_do_write+0xfa>
        return;
 800a9b0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	0801a7f0 	.word	0x0801a7f0
 800a9bc:	0801ab94 	.word	0x0801ab94
 800a9c0:	0801a834 	.word	0x0801a834
 800a9c4:	0801ad1c 	.word	0x0801ad1c
 800a9c8:	0801abb0 	.word	0x0801abb0
 800a9cc:	200079fc 	.word	0x200079fc

0800a9d0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d06c      	beq.n	800aac0 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	7c1b      	ldrb	r3, [r3, #16]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d007      	beq.n	800a9fe <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	6812      	ldr	r2, [r2, #0]
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	e006      	b.n	800aa0c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	6852      	ldr	r2, [r2, #4]
 800aa0a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa1c:	2b10      	cmp	r3, #16
 800aa1e:	d021      	beq.n	800aa64 <lwip_netconn_do_getaddr+0x94>
 800aa20:	2b20      	cmp	r3, #32
 800aa22:	d144      	bne.n	800aaae <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	7c1b      	ldrb	r3, [r3, #16]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d007      	beq.n	800aa3c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	8a52      	ldrh	r2, [r2, #18]
 800aa38:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800aa3a:	e044      	b.n	800aac6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	7c1b      	ldrb	r3, [r3, #16]
 800aa44:	f003 0304 	and.w	r3, r3, #4
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d103      	bne.n	800aa54 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	22f5      	movs	r2, #245	; 0xf5
 800aa50:	711a      	strb	r2, [r3, #4]
        break;
 800aa52:	e038      	b.n	800aac6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	8a92      	ldrh	r2, [r2, #20]
 800aa60:	801a      	strh	r2, [r3, #0]
        break;
 800aa62:	e030      	b.n	800aac6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	7c1b      	ldrb	r3, [r3, #16]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10f      	bne.n	800aa8c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d005      	beq.n	800aa84 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	7d1b      	ldrb	r3, [r3, #20]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d103      	bne.n	800aa8c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	22f5      	movs	r2, #245	; 0xf5
 800aa88:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800aa8a:	e01c      	b.n	800aac6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	7c1b      	ldrb	r3, [r3, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d004      	beq.n	800aa9e <lwip_netconn_do_getaddr+0xce>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	8adb      	ldrh	r3, [r3, #22]
 800aa9c:	e003      	b.n	800aaa6 <lwip_netconn_do_getaddr+0xd6>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	8b1b      	ldrh	r3, [r3, #24]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	68d2      	ldr	r2, [r2, #12]
 800aaaa:	8013      	strh	r3, [r2, #0]
        break;
 800aaac:	e00b      	b.n	800aac6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800aaae:	4b08      	ldr	r3, [pc, #32]	; (800aad0 <lwip_netconn_do_getaddr+0x100>)
 800aab0:	f240 727d 	movw	r2, #1917	; 0x77d
 800aab4:	4907      	ldr	r1, [pc, #28]	; (800aad4 <lwip_netconn_do_getaddr+0x104>)
 800aab6:	4808      	ldr	r0, [pc, #32]	; (800aad8 <lwip_netconn_do_getaddr+0x108>)
 800aab8:	f00e fc38 	bl	801932c <iprintf>
        break;
 800aabc:	bf00      	nop
 800aabe:	e002      	b.n	800aac6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	22f5      	movs	r2, #245	; 0xf5
 800aac4:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aac6:	bf00      	nop
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	0801a7f0 	.word	0x0801a7f0
 800aad4:	0801ad30 	.word	0x0801ad30
 800aad8:	0801a834 	.word	0x0801a834

0800aadc <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800aae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dc04      	bgt.n	800aaf8 <err_to_errno+0x1c>
 800aaee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaf2:	425b      	negs	r3, r3
 800aaf4:	2b10      	cmp	r3, #16
 800aaf6:	dd01      	ble.n	800aafc <err_to_errno+0x20>
    return EIO;
 800aaf8:	2305      	movs	r3, #5
 800aafa:	e005      	b.n	800ab08 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800aafc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab00:	425b      	negs	r3, r3
 800ab02:	4a04      	ldr	r2, [pc, #16]	; (800ab14 <err_to_errno+0x38>)
 800ab04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	0801e0f4 	.word	0x0801e0f4

0800ab18 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d013      	beq.n	800ab4e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00b      	beq.n	800ab46 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f002 fe08 	bl	800d748 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	605a      	str	r2, [r3, #4]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	2006      	movs	r0, #6
 800ab4a:	f001 ff19 	bl	800c980 <memp_free>
  }
}
 800ab4e:	bf00      	nop
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
	...

0800ab58 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d106      	bne.n	800ab74 <netbuf_free+0x1c>
 800ab66:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <netbuf_free+0x44>)
 800ab68:	2281      	movs	r2, #129	; 0x81
 800ab6a:	490d      	ldr	r1, [pc, #52]	; (800aba0 <netbuf_free+0x48>)
 800ab6c:	480d      	ldr	r0, [pc, #52]	; (800aba4 <netbuf_free+0x4c>)
 800ab6e:	f00e fbdd 	bl	801932c <iprintf>
 800ab72:	e00f      	b.n	800ab94 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d004      	beq.n	800ab86 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f002 fde1 	bl	800d748 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	605a      	str	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685a      	ldr	r2, [r3, #4]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	0801ad48 	.word	0x0801ad48
 800aba0:	0801ade4 	.word	0x0801ade4
 800aba4:	0801ad98 	.word	0x0801ad98

0800aba8 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	4613      	mov	r3, r2
 800abb4:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d108      	bne.n	800abce <netbuf_ref+0x26>
 800abbc:	4b1c      	ldr	r3, [pc, #112]	; (800ac30 <netbuf_ref+0x88>)
 800abbe:	2299      	movs	r2, #153	; 0x99
 800abc0:	491c      	ldr	r1, [pc, #112]	; (800ac34 <netbuf_ref+0x8c>)
 800abc2:	481d      	ldr	r0, [pc, #116]	; (800ac38 <netbuf_ref+0x90>)
 800abc4:	f00e fbb2 	bl	801932c <iprintf>
 800abc8:	f06f 030f 	mvn.w	r3, #15
 800abcc:	e02b      	b.n	800ac26 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d004      	beq.n	800abe0 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f002 fdb4 	bl	800d748 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800abe0:	2241      	movs	r2, #65	; 0x41
 800abe2:	2100      	movs	r1, #0
 800abe4:	2036      	movs	r0, #54	; 0x36
 800abe6:	f002 facf 	bl	800d188 <pbuf_alloc>
 800abea:	4602      	mov	r2, r0
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d105      	bne.n	800ac04 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800abfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ac02:	e010      	b.n	800ac26 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	88fa      	ldrh	r2, [r7, #6]
 800ac12:	811a      	strh	r2, [r3, #8]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	6812      	ldr	r2, [r2, #0]
 800ac18:	891b      	ldrh	r3, [r3, #8]
 800ac1a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	0801ad48 	.word	0x0801ad48
 800ac34:	0801ae00 	.word	0x0801ae00
 800ac38:	0801ad98 	.word	0x0801ad98

0800ac3c <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	db02      	blt.n	800ac54 <tryget_socket_unconn_nouse+0x18>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	dd01      	ble.n	800ac58 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800ac54:	2300      	movs	r3, #0
 800ac56:	e003      	b.n	800ac60 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	011b      	lsls	r3, r3, #4
 800ac5c:	4a03      	ldr	r2, [pc, #12]	; (800ac6c <tryget_socket_unconn_nouse+0x30>)
 800ac5e:	4413      	add	r3, r2
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	200041b8 	.word	0x200041b8

0800ac70 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff ffdf 	bl	800ac3c <tryget_socket_unconn_nouse>
 800ac7e:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800ac80:	68fb      	ldr	r3, [r7, #12]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff ffec 	bl	800ac70 <tryget_socket_unconn>
 800ac98:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d005      	beq.n	800acac <tryget_socket+0x22>
    if (sock->conn) {
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <tryget_socket+0x22>
      return sock;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	e000      	b.n	800acae <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
	...

0800acb8 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff ffe2 	bl	800ac8a <tryget_socket>
 800acc6:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d104      	bne.n	800acd8 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800acce:	4b05      	ldr	r3, [pc, #20]	; (800ace4 <get_socket+0x2c>)
 800acd0:	2209      	movs	r2, #9
 800acd2:	601a      	str	r2, [r3, #0]
    return NULL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	e000      	b.n	800acda <get_socket+0x22>
  }
  return sock;
 800acd8:	68fb      	ldr	r3, [r7, #12]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	2000b178 	.word	0x2000b178

0800ace8 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800acf2:	2300      	movs	r3, #0
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	e052      	b.n	800ad9e <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800acf8:	f00e fa9a 	bl	8019230 <sys_arch_protect>
 800acfc:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800acfe:	4a2c      	ldr	r2, [pc, #176]	; (800adb0 <alloc_socket+0xc8>)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	011b      	lsls	r3, r3, #4
 800ad04:	4413      	add	r3, r2
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d142      	bne.n	800ad92 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800ad0c:	4a28      	ldr	r2, [pc, #160]	; (800adb0 <alloc_socket+0xc8>)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	011b      	lsls	r3, r3, #4
 800ad12:	4413      	add	r3, r2
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800ad18:	68b8      	ldr	r0, [r7, #8]
 800ad1a:	f00e fa97 	bl	801924c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800ad1e:	4a24      	ldr	r2, [pc, #144]	; (800adb0 <alloc_socket+0xc8>)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	011b      	lsls	r3, r3, #4
 800ad24:	4413      	add	r3, r2
 800ad26:	3304      	adds	r3, #4
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800ad2c:	4a20      	ldr	r2, [pc, #128]	; (800adb0 <alloc_socket+0xc8>)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	011b      	lsls	r3, r3, #4
 800ad32:	4413      	add	r3, r2
 800ad34:	330e      	adds	r3, #14
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d006      	beq.n	800ad4a <alloc_socket+0x62>
 800ad3c:	4b1d      	ldr	r3, [pc, #116]	; (800adb4 <alloc_socket+0xcc>)
 800ad3e:	f240 220e 	movw	r2, #526	; 0x20e
 800ad42:	491d      	ldr	r1, [pc, #116]	; (800adb8 <alloc_socket+0xd0>)
 800ad44:	481d      	ldr	r0, [pc, #116]	; (800adbc <alloc_socket+0xd4>)
 800ad46:	f00e faf1 	bl	801932c <iprintf>
      sockets[i].rcvevent   = 0;
 800ad4a:	4a19      	ldr	r2, [pc, #100]	; (800adb0 <alloc_socket+0xc8>)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	011b      	lsls	r3, r3, #4
 800ad50:	4413      	add	r3, r2
 800ad52:	3308      	adds	r3, #8
 800ad54:	2200      	movs	r2, #0
 800ad56:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad60:	2b10      	cmp	r3, #16
 800ad62:	d102      	bne.n	800ad6a <alloc_socket+0x82>
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <alloc_socket+0x86>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <alloc_socket+0x88>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	b299      	uxth	r1, r3
 800ad72:	4a0f      	ldr	r2, [pc, #60]	; (800adb0 <alloc_socket+0xc8>)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	011b      	lsls	r3, r3, #4
 800ad78:	4413      	add	r3, r2
 800ad7a:	330a      	adds	r3, #10
 800ad7c:	460a      	mov	r2, r1
 800ad7e:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800ad80:	4a0b      	ldr	r2, [pc, #44]	; (800adb0 <alloc_socket+0xc8>)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	011b      	lsls	r3, r3, #4
 800ad86:	4413      	add	r3, r2
 800ad88:	330c      	adds	r3, #12
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	e00a      	b.n	800ada8 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800ad92:	68b8      	ldr	r0, [r7, #8]
 800ad94:	f00e fa5a 	bl	801924c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	60fb      	str	r3, [r7, #12]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	dda9      	ble.n	800acf8 <alloc_socket+0x10>
  }
  return -1;
 800ada4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	200041b8 	.word	0x200041b8
 800adb4:	0801aee0 	.word	0x0801aee0
 800adb8:	0801af14 	.word	0x0801af14
 800adbc:	0801af34 	.word	0x0801af34

0800adc0 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	6852      	ldr	r2, [r2, #4]
 800add4:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2200      	movs	r2, #0
 800adda:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	601a      	str	r2, [r3, #0]
  return 1;
 800adea:	2301      	movs	r3, #1
}
 800adec:	4618      	mov	r0, r3
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00d      	beq.n	800ae28 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d005      	beq.n	800ae1e <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f002 fc96 	bl	800d748 <pbuf_free>
 800ae1c:	e004      	b.n	800ae28 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff fe78 	bl	800ab18 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800ae2e:	68b8      	ldr	r0, [r7, #8]
 800ae30:	f7fd fff8 	bl	8008e24 <netconn_delete>
  }
}
 800ae34:	bf00      	nop
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800ae46:	f00e f9f3 	bl	8019230 <sys_arch_protect>
 800ae4a:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800ae4c:	f107 0308 	add.w	r3, r7, #8
 800ae50:	f107 020c 	add.w	r2, r7, #12
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7ff ffb2 	bl	800adc0 <free_socket_locked>
 800ae5c:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800ae5e:	6978      	ldr	r0, [r7, #20]
 800ae60:	f00e f9f4 	bl	801924c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d006      	beq.n	800ae78 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f107 0208 	add.w	r2, r7, #8
 800ae70:	4619      	mov	r1, r3
 800ae72:	6838      	ldr	r0, [r7, #0]
 800ae74:	f7ff ffc0 	bl	800adf8 <free_socket_free_elements>
  }
}
 800ae78:	bf00      	nop
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800ae80:	b590      	push	{r4, r7, lr}
 800ae82:	b099      	sub	sp, #100	; 0x64
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f7ff ff11 	bl	800acb8 <get_socket>
 800ae96:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800ae98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d102      	bne.n	800aea4 <lwip_accept+0x24>
    return -1;
 800ae9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aea2:	e0f8      	b.n	800b096 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800aea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800aeac:	4611      	mov	r1, r2
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fe f88a 	bl	8008fc8 <netconn_accept>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800aeba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d02c      	beq.n	800af1c <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800aec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aecc:	2b10      	cmp	r3, #16
 800aece:	d008      	beq.n	800aee2 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800aed0:	235f      	movs	r3, #95	; 0x5f
 800aed2:	633b      	str	r3, [r7, #48]	; 0x30
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d01d      	beq.n	800af16 <lwip_accept+0x96>
 800aeda:	4a71      	ldr	r2, [pc, #452]	; (800b0a0 <lwip_accept+0x220>)
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	6013      	str	r3, [r2, #0]
 800aee0:	e019      	b.n	800af16 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800aee2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aee6:	f113 0f0f 	cmn.w	r3, #15
 800aeea:	d108      	bne.n	800aefe <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800aeec:	2316      	movs	r3, #22
 800aeee:	637b      	str	r3, [r7, #52]	; 0x34
 800aef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00f      	beq.n	800af16 <lwip_accept+0x96>
 800aef6:	4a6a      	ldr	r2, [pc, #424]	; (800b0a0 <lwip_accept+0x220>)
 800aef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefa:	6013      	str	r3, [r2, #0]
 800aefc:	e00b      	b.n	800af16 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800aefe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800af02:	4618      	mov	r0, r3
 800af04:	f7ff fdea 	bl	800aadc <err_to_errno>
 800af08:	63b8      	str	r0, [r7, #56]	; 0x38
 800af0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <lwip_accept+0x96>
 800af10:	4a63      	ldr	r2, [pc, #396]	; (800b0a0 <lwip_accept+0x220>)
 800af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af14:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800af16:	f04f 33ff 	mov.w	r3, #4294967295
 800af1a:	e0bc      	b.n	800b096 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800af1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d106      	bne.n	800af30 <lwip_accept+0xb0>
 800af22:	4b60      	ldr	r3, [pc, #384]	; (800b0a4 <lwip_accept+0x224>)
 800af24:	f240 228b 	movw	r2, #651	; 0x28b
 800af28:	495f      	ldr	r1, [pc, #380]	; (800b0a8 <lwip_accept+0x228>)
 800af2a:	4860      	ldr	r0, [pc, #384]	; (800b0ac <lwip_accept+0x22c>)
 800af2c:	f00e f9fe 	bl	801932c <iprintf>

  newsock = alloc_socket(newconn, 1);
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	2101      	movs	r1, #1
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff fed7 	bl	800ace8 <alloc_socket>
 800af3a:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800af3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af42:	d10e      	bne.n	800af62 <lwip_accept+0xe2>
    netconn_delete(newconn);
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	4618      	mov	r0, r3
 800af48:	f7fd ff6c 	bl	8008e24 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800af4c:	2317      	movs	r3, #23
 800af4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af52:	2b00      	cmp	r3, #0
 800af54:	d002      	beq.n	800af5c <lwip_accept+0xdc>
 800af56:	4a52      	ldr	r2, [pc, #328]	; (800b0a0 <lwip_accept+0x220>)
 800af58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800af5c:	f04f 33ff 	mov.w	r3, #4294967295
 800af60:	e099      	b.n	800b096 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800af62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af64:	2b00      	cmp	r3, #0
 800af66:	db02      	blt.n	800af6e <lwip_accept+0xee>
 800af68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	dd06      	ble.n	800af7c <lwip_accept+0xfc>
 800af6e:	4b4d      	ldr	r3, [pc, #308]	; (800b0a4 <lwip_accept+0x224>)
 800af70:	f44f 7225 	mov.w	r2, #660	; 0x294
 800af74:	494e      	ldr	r1, [pc, #312]	; (800b0b0 <lwip_accept+0x230>)
 800af76:	484d      	ldr	r0, [pc, #308]	; (800b0ac <lwip_accept+0x22c>)
 800af78:	f00e f9d8 	bl	801932c <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800af7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af7e:	011b      	lsls	r3, r3, #4
 800af80:	4a4c      	ldr	r2, [pc, #304]	; (800b0b4 <lwip_accept+0x234>)
 800af82:	4413      	add	r3, r2
 800af84:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800af86:	f00e f953 	bl	8019230 <sys_arch_protect>
 800af8a:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800af8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	b21b      	sxth	r3, r3
 800af92:	43db      	mvns	r3, r3
 800af94:	b21b      	sxth	r3, r3
 800af96:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800af98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af9c:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800af9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800afa0:	f00e f954 	bl	801924c <sys_arch_unprotect>

  if (newconn->callback) {
 800afa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d012      	beq.n	800afd2 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800afac:	4842      	ldr	r0, [pc, #264]	; (800b0b8 <lwip_accept+0x238>)
 800afae:	f00e f8fd 	bl	80191ac <sys_mutex_lock>
    while (recvevent > 0) {
 800afb2:	e008      	b.n	800afc6 <lwip_accept+0x146>
      recvevent--;
 800afb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afb6:	3b01      	subs	r3, #1
 800afb8:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800afba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afc0:	2200      	movs	r2, #0
 800afc2:	2100      	movs	r1, #0
 800afc4:	4798      	blx	r3
    while (recvevent > 0) {
 800afc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dcf3      	bgt.n	800afb4 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800afcc:	483a      	ldr	r0, [pc, #232]	; (800b0b8 <lwip_accept+0x238>)
 800afce:	f00e f8fc 	bl	80191ca <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d055      	beq.n	800b084 <lwip_accept+0x204>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d052      	beq.n	800b084 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800afde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afe0:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800afe4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800afe8:	2300      	movs	r3, #0
 800afea:	f7fd ff37 	bl	8008e5c <netconn_getaddr>
 800afee:	4603      	mov	r3, r0
 800aff0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800aff4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d016      	beq.n	800b02a <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800affc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affe:	4618      	mov	r0, r3
 800b000:	f7fd ff10 	bl	8008e24 <netconn_delete>
      free_socket(nsock, 1);
 800b004:	2101      	movs	r1, #1
 800b006:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b008:	f7ff ff18 	bl	800ae3c <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800b00c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff fd63 	bl	800aadc <err_to_errno>
 800b016:	6478      	str	r0, [r7, #68]	; 0x44
 800b018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <lwip_accept+0x1a4>
 800b01e:	4a20      	ldr	r2, [pc, #128]	; (800b0a0 <lwip_accept+0x220>)
 800b020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b022:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800b024:	f04f 33ff 	mov.w	r3, #4294967295
 800b028:	e035      	b.n	800b096 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800b02a:	f107 0314 	add.w	r3, r7, #20
 800b02e:	2210      	movs	r2, #16
 800b030:	701a      	strb	r2, [r3, #0]
 800b032:	f107 0314 	add.w	r3, r7, #20
 800b036:	2202      	movs	r2, #2
 800b038:	705a      	strb	r2, [r3, #1]
 800b03a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b03c:	f107 0414 	add.w	r4, r7, #20
 800b040:	4618      	mov	r0, r3
 800b042:	f000 ff95 	bl	800bf70 <lwip_htons>
 800b046:	4603      	mov	r3, r0
 800b048:	8063      	strh	r3, [r4, #2]
 800b04a:	f107 0314 	add.w	r3, r7, #20
 800b04e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b050:	605a      	str	r2, [r3, #4]
 800b052:	f107 0314 	add.w	r3, r7, #20
 800b056:	3308      	adds	r3, #8
 800b058:	2208      	movs	r2, #8
 800b05a:	2100      	movs	r1, #0
 800b05c:	4618      	mov	r0, r3
 800b05e:	f00e f95c 	bl	801931a <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	7d3a      	ldrb	r2, [r7, #20]
 800b068:	4293      	cmp	r3, r2
 800b06a:	d903      	bls.n	800b074 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800b06c:	7d3b      	ldrb	r3, [r7, #20]
 800b06e:	461a      	mov	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	f107 0314 	add.w	r3, r7, #20
 800b07c:	4619      	mov	r1, r3
 800b07e:	68b8      	ldr	r0, [r7, #8]
 800b080:	f00e f940 	bl	8019304 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800b084:	2300      	movs	r3, #0
 800b086:	643b      	str	r3, [r7, #64]	; 0x40
 800b088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d002      	beq.n	800b094 <lwip_accept+0x214>
 800b08e:	4a04      	ldr	r2, [pc, #16]	; (800b0a0 <lwip_accept+0x220>)
 800b090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b092:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800b094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b096:	4618      	mov	r0, r3
 800b098:	3764      	adds	r7, #100	; 0x64
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd90      	pop	{r4, r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	2000b178 	.word	0x2000b178
 800b0a4:	0801aee0 	.word	0x0801aee0
 800b0a8:	0801af5c 	.word	0x0801af5c
 800b0ac:	0801af34 	.word	0x0801af34
 800b0b0:	0801af6c 	.word	0x0801af6c
 800b0b4:	200041b8 	.word	0x200041b8
 800b0b8:	200079fc 	.word	0x200079fc

0800b0bc <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b08a      	sub	sp, #40	; 0x28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f7ff fdf5 	bl	800acb8 <get_socket>
 800b0ce:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d102      	bne.n	800b0dc <lwip_bind+0x20>
    return -1;
 800b0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0da:	e051      	b.n	800b180 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b10      	cmp	r3, #16
 800b0e0:	d108      	bne.n	800b0f4 <lwip_bind+0x38>
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	785b      	ldrb	r3, [r3, #1]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d104      	bne.n	800b0f4 <lwip_bind+0x38>
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	f003 0303 	and.w	r3, r3, #3
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d014      	beq.n	800b11e <lwip_bind+0x62>
 800b0f4:	4b24      	ldr	r3, [pc, #144]	; (800b188 <lwip_bind+0xcc>)
 800b0f6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b0fa:	4924      	ldr	r1, [pc, #144]	; (800b18c <lwip_bind+0xd0>)
 800b0fc:	4824      	ldr	r0, [pc, #144]	; (800b190 <lwip_bind+0xd4>)
 800b0fe:	f00e f915 	bl	801932c <iprintf>
 800b102:	f06f 000f 	mvn.w	r0, #15
 800b106:	f7ff fce9 	bl	800aadc <err_to_errno>
 800b10a:	6178      	str	r0, [r7, #20]
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d002      	beq.n	800b118 <lwip_bind+0x5c>
 800b112:	4a20      	ldr	r2, [pc, #128]	; (800b194 <lwip_bind+0xd8>)
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	f04f 33ff 	mov.w	r3, #4294967295
 800b11c:	e030      	b.n	800b180 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	613b      	str	r3, [r7, #16]
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	885b      	ldrh	r3, [r3, #2]
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 ff21 	bl	800bf70 <lwip_htons>
 800b12e:	4603      	mov	r3, r0
 800b130:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b138:	f107 0110 	add.w	r1, r7, #16
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fd fedf 	bl	8008f00 <netconn_bind>
 800b142:	4603      	mov	r3, r0
 800b144:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800b148:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00e      	beq.n	800b16e <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800b150:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff fcc1 	bl	800aadc <err_to_errno>
 800b15a:	61b8      	str	r0, [r7, #24]
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d002      	beq.n	800b168 <lwip_bind+0xac>
 800b162:	4a0c      	ldr	r2, [pc, #48]	; (800b194 <lwip_bind+0xd8>)
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b168:	f04f 33ff 	mov.w	r3, #4294967295
 800b16c:	e008      	b.n	800b180 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800b16e:	2300      	movs	r3, #0
 800b170:	61fb      	str	r3, [r7, #28]
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <lwip_bind+0xc2>
 800b178:	4a06      	ldr	r2, [pc, #24]	; (800b194 <lwip_bind+0xd8>)
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3728      	adds	r7, #40	; 0x28
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	0801aee0 	.word	0x0801aee0
 800b18c:	0801af84 	.word	0x0801af84
 800b190:	0801af34 	.word	0x0801af34
 800b194:	2000b178 	.word	0x2000b178

0800b198 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff fd88 	bl	800acb8 <get_socket>
 800b1a8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d102      	bne.n	800b1b6 <lwip_listen+0x1e>
    return -1;
 800b1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b4:	e03e      	b.n	800b234 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2bfe      	cmp	r3, #254	; 0xfe
 800b1ba:	dc03      	bgt.n	800b1c4 <lwip_listen+0x2c>
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b1c2:	e000      	b.n	800b1c6 <lwip_listen+0x2e>
 800b1c4:	23ff      	movs	r3, #255	; 0xff
 800b1c6:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	b2d2      	uxtb	r2, r2
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fd fecc 	bl	8008f70 <netconn_listen_with_backlog>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800b1dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01e      	beq.n	800b222 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1ee:	2b10      	cmp	r3, #16
 800b1f0:	d008      	beq.n	800b204 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800b1f2:	235f      	movs	r3, #95	; 0x5f
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00f      	beq.n	800b21c <lwip_listen+0x84>
 800b1fc:	4a0f      	ldr	r2, [pc, #60]	; (800b23c <lwip_listen+0xa4>)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	e00b      	b.n	800b21c <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800b204:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff fc67 	bl	800aadc <err_to_errno>
 800b20e:	6138      	str	r0, [r7, #16]
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <lwip_listen+0x84>
 800b216:	4a09      	ldr	r2, [pc, #36]	; (800b23c <lwip_listen+0xa4>)
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800b21c:	f04f 33ff 	mov.w	r3, #4294967295
 800b220:	e008      	b.n	800b234 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800b222:	2300      	movs	r3, #0
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <lwip_listen+0x9a>
 800b22c:	4a03      	ldr	r2, [pc, #12]	; (800b23c <lwip_listen+0xa4>)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3720      	adds	r7, #32
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	2000b178 	.word	0x2000b178

0800b240 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b08a      	sub	sp, #40	; 0x28
 800b244:	af02      	add	r7, sp, #8
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
 800b24c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f7ff fd32 	bl	800acb8 <get_socket>
 800b254:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d102      	bne.n	800b262 <lwip_send+0x22>
    return -1;
 800b25c:	f04f 33ff 	mov.w	r3, #4294967295
 800b260:	e046      	b.n	800b2f0 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b26c:	2b10      	cmp	r3, #16
 800b26e:	d00b      	beq.n	800b288 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800b270:	2300      	movs	r3, #0
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	2300      	movs	r3, #0
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	68b9      	ldr	r1, [r7, #8]
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f000 f83c 	bl	800b2fc <lwip_sendto>
 800b284:	4603      	mov	r3, r0
 800b286:	e033      	b.n	800b2f0 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <lwip_send+0x56>
 800b292:	2203      	movs	r2, #3
 800b294:	e000      	b.n	800b298 <lwip_send+0x58>
 800b296:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	105b      	asrs	r3, r3, #1
 800b29c:	b25b      	sxtb	r3, r3
 800b29e:	f003 0304 	and.w	r3, r3, #4
 800b2a2:	b25b      	sxtb	r3, r3
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800b2a8:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	6818      	ldr	r0, [r3, #0]
 800b2b2:	7efa      	ldrb	r2, [r7, #27]
 800b2b4:	f107 0310 	add.w	r3, r7, #16
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	f7fd ff3c 	bl	800913c <netconn_write_partly>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800b2c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7ff fc05 	bl	800aadc <err_to_errno>
 800b2d2:	6178      	str	r0, [r7, #20]
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <lwip_send+0xa0>
 800b2da:	4a07      	ldr	r2, [pc, #28]	; (800b2f8 <lwip_send+0xb8>)
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800b2e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <lwip_send+0xac>
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	e001      	b.n	800b2f0 <lwip_send+0xb0>
 800b2ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3720      	adds	r7, #32
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	2000b178 	.word	0x2000b178

0800b2fc <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08e      	sub	sp, #56	; 0x38
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
 800b308:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f7ff fcd4 	bl	800acb8 <get_socket>
 800b310:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	2b00      	cmp	r3, #0
 800b316:	d102      	bne.n	800b31e <lwip_sendto+0x22>
    return -1;
 800b318:	f04f 33ff 	mov.w	r3, #4294967295
 800b31c:	e093      	b.n	800b446 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b328:	2b10      	cmp	r3, #16
 800b32a:	d107      	bne.n	800b33c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	68b9      	ldr	r1, [r7, #8]
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f7ff ff84 	bl	800b240 <lwip_send>
 800b338:	4603      	mov	r3, r0
 800b33a:	e084      	b.n	800b446 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b342:	d30a      	bcc.n	800b35a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800b344:	235a      	movs	r3, #90	; 0x5a
 800b346:	623b      	str	r3, [r7, #32]
 800b348:	6a3b      	ldr	r3, [r7, #32]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <lwip_sendto+0x58>
 800b34e:	4a40      	ldr	r2, [pc, #256]	; (800b450 <lwip_sendto+0x154>)
 800b350:	6a3b      	ldr	r3, [r7, #32]
 800b352:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b354:	f04f 33ff 	mov.w	r3, #4294967295
 800b358:	e075      	b.n	800b446 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800b35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b360:	2b00      	cmp	r3, #0
 800b362:	d102      	bne.n	800b36a <lwip_sendto+0x6e>
 800b364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b366:	2b00      	cmp	r3, #0
 800b368:	d023      	beq.n	800b3b2 <lwip_sendto+0xb6>
 800b36a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b36c:	2b10      	cmp	r3, #16
 800b36e:	d10b      	bne.n	800b388 <lwip_sendto+0x8c>
 800b370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b372:	2b00      	cmp	r3, #0
 800b374:	d008      	beq.n	800b388 <lwip_sendto+0x8c>
 800b376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b378:	785b      	ldrb	r3, [r3, #1]
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d104      	bne.n	800b388 <lwip_sendto+0x8c>
 800b37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b380:	f003 0303 	and.w	r3, r3, #3
 800b384:	2b00      	cmp	r3, #0
 800b386:	d014      	beq.n	800b3b2 <lwip_sendto+0xb6>
 800b388:	4b32      	ldr	r3, [pc, #200]	; (800b454 <lwip_sendto+0x158>)
 800b38a:	f240 6255 	movw	r2, #1621	; 0x655
 800b38e:	4932      	ldr	r1, [pc, #200]	; (800b458 <lwip_sendto+0x15c>)
 800b390:	4832      	ldr	r0, [pc, #200]	; (800b45c <lwip_sendto+0x160>)
 800b392:	f00d ffcb 	bl	801932c <iprintf>
 800b396:	f06f 000f 	mvn.w	r0, #15
 800b39a:	f7ff fb9f 	bl	800aadc <err_to_errno>
 800b39e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d002      	beq.n	800b3ac <lwip_sendto+0xb0>
 800b3a6:	4a2a      	ldr	r2, [pc, #168]	; (800b450 <lwip_sendto+0x154>)
 800b3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b0:	e049      	b.n	800b446 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	617b      	str	r3, [r7, #20]
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800b3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00a      	beq.n	800b3d6 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800b3c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	61bb      	str	r3, [r7, #24]
 800b3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c8:	885b      	ldrh	r3, [r3, #2]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 fdd0 	bl	800bf70 <lwip_htons>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	86bb      	strh	r3, [r7, #52]	; 0x34
 800b3d4:	e003      	b.n	800b3de <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800b3da:	2300      	movs	r3, #0
 800b3dc:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800b3de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b3e0:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800b3e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b3e4:	f107 0310 	add.w	r3, r7, #16
 800b3e8:	68b9      	ldr	r1, [r7, #8]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7ff fbdc 	bl	800aba8 <netbuf_ref>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800b3f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10a      	bne.n	800b414 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f107 0210 	add.w	r2, r7, #16
 800b406:	4611      	mov	r1, r2
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fd fe69 	bl	80090e0 <netconn_send>
 800b40e:	4603      	mov	r3, r0
 800b410:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800b414:	f107 0310 	add.w	r3, r7, #16
 800b418:	4618      	mov	r0, r3
 800b41a:	f7ff fb9d 	bl	800ab58 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800b41e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b422:	4618      	mov	r0, r3
 800b424:	f7ff fb5a 	bl	800aadc <err_to_errno>
 800b428:	6278      	str	r0, [r7, #36]	; 0x24
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <lwip_sendto+0x13a>
 800b430:	4a07      	ldr	r2, [pc, #28]	; (800b450 <lwip_sendto+0x154>)
 800b432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b434:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800b436:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <lwip_sendto+0x146>
 800b43e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b440:	e001      	b.n	800b446 <lwip_sendto+0x14a>
 800b442:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b446:	4618      	mov	r0, r3
 800b448:	3738      	adds	r7, #56	; 0x38
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	2000b178 	.word	0x2000b178
 800b454:	0801aee0 	.word	0x0801aee0
 800b458:	0801b1c0 	.word	0x0801b1c0
 800b45c:	0801af34 	.word	0x0801af34

0800b460 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d00d      	beq.n	800b48e <lwip_socket+0x2e>
 800b472:	2b03      	cmp	r3, #3
 800b474:	d002      	beq.n	800b47c <lwip_socket+0x1c>
 800b476:	2b01      	cmp	r3, #1
 800b478:	d016      	beq.n	800b4a8 <lwip_socket+0x48>
 800b47a:	e01c      	b.n	800b4b6 <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	4a21      	ldr	r2, [pc, #132]	; (800b508 <lwip_socket+0xa8>)
 800b482:	4619      	mov	r1, r3
 800b484:	2040      	movs	r0, #64	; 0x40
 800b486:	f7fd fc2f 	bl	8008ce8 <netconn_new_with_proto_and_callback>
 800b48a:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800b48c:	e019      	b.n	800b4c2 <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b88      	cmp	r3, #136	; 0x88
 800b492:	d101      	bne.n	800b498 <lwip_socket+0x38>
 800b494:	2321      	movs	r3, #33	; 0x21
 800b496:	e000      	b.n	800b49a <lwip_socket+0x3a>
 800b498:	2320      	movs	r3, #32
 800b49a:	4a1b      	ldr	r2, [pc, #108]	; (800b508 <lwip_socket+0xa8>)
 800b49c:	2100      	movs	r1, #0
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7fd fc22 	bl	8008ce8 <netconn_new_with_proto_and_callback>
 800b4a4:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b4a6:	e00c      	b.n	800b4c2 <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800b4a8:	4a17      	ldr	r2, [pc, #92]	; (800b508 <lwip_socket+0xa8>)
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	2010      	movs	r0, #16
 800b4ae:	f7fd fc1b 	bl	8008ce8 <netconn_new_with_proto_and_callback>
 800b4b2:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800b4b4:	e005      	b.n	800b4c2 <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800b4b6:	4b15      	ldr	r3, [pc, #84]	; (800b50c <lwip_socket+0xac>)
 800b4b8:	2216      	movs	r2, #22
 800b4ba:	601a      	str	r2, [r3, #0]
      return -1;
 800b4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c0:	e01e      	b.n	800b500 <lwip_socket+0xa0>
  }

  if (!conn) {
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d105      	bne.n	800b4d4 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800b4c8:	4b10      	ldr	r3, [pc, #64]	; (800b50c <lwip_socket+0xac>)
 800b4ca:	2269      	movs	r2, #105	; 0x69
 800b4cc:	601a      	str	r2, [r3, #0]
    return -1;
 800b4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d2:	e015      	b.n	800b500 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6978      	ldr	r0, [r7, #20]
 800b4d8:	f7ff fc06 	bl	800ace8 <alloc_socket>
 800b4dc:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e4:	d108      	bne.n	800b4f8 <lwip_socket+0x98>
    netconn_delete(conn);
 800b4e6:	6978      	ldr	r0, [r7, #20]
 800b4e8:	f7fd fc9c 	bl	8008e24 <netconn_delete>
    set_errno(ENFILE);
 800b4ec:	4b07      	ldr	r3, [pc, #28]	; (800b50c <lwip_socket+0xac>)
 800b4ee:	2217      	movs	r2, #23
 800b4f0:	601a      	str	r2, [r3, #0]
    return -1;
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f6:	e003      	b.n	800b500 <lwip_socket+0xa0>
  }
  conn->socket = i;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800b4fe:	693b      	ldr	r3, [r7, #16]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3718      	adds	r7, #24
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	0800b599 	.word	0x0800b599
 800b50c:	2000b178 	.word	0x2000b178

0800b510 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800b510:	b480      	push	{r7}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800b51e:	2300      	movs	r3, #0
 800b520:	617b      	str	r3, [r7, #20]
 800b522:	e02c      	b.n	800b57e <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	695a      	ldr	r2, [r3, #20]
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	00db      	lsls	r3, r3, #3
 800b52c:	4413      	add	r3, r2
 800b52e:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	429a      	cmp	r2, r3
 800b538:	d11e      	bne.n	800b578 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d009      	beq.n	800b554 <lwip_poll_should_wake+0x44>
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b546:	b29b      	uxth	r3, r3
 800b548:	f003 0301 	and.w	r3, r3, #1
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d001      	beq.n	800b554 <lwip_poll_should_wake+0x44>
        return 1;
 800b550:	2301      	movs	r3, #1
 800b552:	e01a      	b.n	800b58a <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d009      	beq.n	800b56e <lwip_poll_should_wake+0x5e>
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b560:	b29b      	uxth	r3, r3
 800b562:	f003 0302 	and.w	r3, r3, #2
 800b566:	2b00      	cmp	r3, #0
 800b568:	d001      	beq.n	800b56e <lwip_poll_should_wake+0x5e>
        return 1;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e00d      	b.n	800b58a <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d001      	beq.n	800b578 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800b574:	2301      	movs	r3, #1
 800b576:	e008      	b.n	800b58a <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	3301      	adds	r3, #1
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	429a      	cmp	r2, r3
 800b586:	d3cd      	bcc.n	800b524 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	371c      	adds	r7, #28
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
	...

0800b598 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b08a      	sub	sp, #40	; 0x28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 80a4 	beq.w	800b6f8 <event_callback+0x160>
    s = conn->socket;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	da18      	bge.n	800b5ee <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800b5bc:	f00d fe38 	bl	8019230 <sys_arch_protect>
 800b5c0:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	da0b      	bge.n	800b5e2 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800b5ca:	78fb      	ldrb	r3, [r7, #3]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d104      	bne.n	800b5da <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	1e5a      	subs	r2, r3, #1
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800b5da:	69f8      	ldr	r0, [r7, #28]
 800b5dc:	f00d fe36 	bl	801924c <sys_arch_unprotect>
        return;
 800b5e0:	e08d      	b.n	800b6fe <event_callback+0x166>
      }
      s = conn->socket;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	699b      	ldr	r3, [r3, #24]
 800b5e6:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800b5e8:	69f8      	ldr	r0, [r7, #28]
 800b5ea:	f00d fe2f 	bl	801924c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800b5ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5f0:	f7ff fb62 	bl	800acb8 <get_socket>
 800b5f4:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d07f      	beq.n	800b6fc <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800b600:	f00d fe16 	bl	8019230 <sys_arch_protect>
 800b604:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800b606:	78fb      	ldrb	r3, [r7, #3]
 800b608:	2b04      	cmp	r3, #4
 800b60a:	d83e      	bhi.n	800b68a <event_callback+0xf2>
 800b60c:	a201      	add	r2, pc, #4	; (adr r2, 800b614 <event_callback+0x7c>)
 800b60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b612:	bf00      	nop
 800b614:	0800b629 	.word	0x0800b629
 800b618:	0800b64b 	.word	0x0800b64b
 800b61c:	0800b663 	.word	0x0800b663
 800b620:	0800b677 	.word	0x0800b677
 800b624:	0800b683 	.word	0x0800b683
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b62e:	b29b      	uxth	r3, r3
 800b630:	3301      	adds	r3, #1
 800b632:	b29b      	uxth	r3, r3
 800b634:	b21a      	sxth	r2, r3
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b640:	2b01      	cmp	r3, #1
 800b642:	dd2a      	ble.n	800b69a <event_callback+0x102>
        check_waiters = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	623b      	str	r3, [r7, #32]
      }
      break;
 800b648:	e027      	b.n	800b69a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b650:	b29b      	uxth	r3, r3
 800b652:	3b01      	subs	r3, #1
 800b654:	b29b      	uxth	r3, r3
 800b656:	b21a      	sxth	r2, r3
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	623b      	str	r3, [r7, #32]
      break;
 800b660:	e01c      	b.n	800b69c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	895b      	ldrh	r3, [r3, #10]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d001      	beq.n	800b66e <event_callback+0xd6>
        check_waiters = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	2201      	movs	r2, #1
 800b672:	815a      	strh	r2, [r3, #10]
      break;
 800b674:	e012      	b.n	800b69c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	2200      	movs	r2, #0
 800b67a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800b67c:	2300      	movs	r3, #0
 800b67e:	623b      	str	r3, [r7, #32]
      break;
 800b680:	e00c      	b.n	800b69c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	2201      	movs	r2, #1
 800b686:	819a      	strh	r2, [r3, #12]
      break;
 800b688:	e008      	b.n	800b69c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800b68a:	4b1e      	ldr	r3, [pc, #120]	; (800b704 <event_callback+0x16c>)
 800b68c:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800b690:	491d      	ldr	r1, [pc, #116]	; (800b708 <event_callback+0x170>)
 800b692:	481e      	ldr	r0, [pc, #120]	; (800b70c <event_callback+0x174>)
 800b694:	f00d fe4a 	bl	801932c <iprintf>
      break;
 800b698:	e000      	b.n	800b69c <event_callback+0x104>
      break;
 800b69a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	7b9b      	ldrb	r3, [r3, #14]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d025      	beq.n	800b6f0 <event_callback+0x158>
 800b6a4:	6a3b      	ldr	r3, [r7, #32]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d022      	beq.n	800b6f0 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	bfcc      	ite	gt
 800b6b4:	2301      	movgt	r3, #1
 800b6b6:	2300      	movle	r3, #0
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	895b      	ldrh	r3, [r3, #10]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	bf14      	ite	ne
 800b6c4:	2301      	movne	r3, #1
 800b6c6:	2300      	moveq	r3, #0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	899b      	ldrh	r3, [r3, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	bf14      	ite	ne
 800b6d4:	2301      	movne	r3, #1
 800b6d6:	2300      	moveq	r3, #0
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800b6dc:	69f8      	ldr	r0, [r7, #28]
 800b6de:	f00d fdb5 	bl	801924c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	6979      	ldr	r1, [r7, #20]
 800b6e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6ea:	f000 f811 	bl	800b710 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800b6ee:	e006      	b.n	800b6fe <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800b6f0:	69f8      	ldr	r0, [r7, #28]
 800b6f2:	f00d fdab 	bl	801924c <sys_arch_unprotect>
 800b6f6:	e002      	b.n	800b6fe <event_callback+0x166>
    return;
 800b6f8:	bf00      	nop
 800b6fa:	e000      	b.n	800b6fe <event_callback+0x166>
      return;
 800b6fc:	bf00      	nop
  }
  done_socket(sock);
}
 800b6fe:	3728      	adds	r7, #40	; 0x28
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	0801aee0 	.word	0x0801aee0
 800b708:	0801b25c 	.word	0x0801b25c
 800b70c:	0801af34 	.word	0x0801af34

0800b710 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af02      	add	r7, sp, #8
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800b71e:	4b3d      	ldr	r3, [pc, #244]	; (800b814 <select_check_waiters+0x104>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	e06f      	b.n	800b806 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d168      	bne.n	800b800 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d009      	beq.n	800b74e <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	68f9      	ldr	r1, [r7, #12]
 800b744:	6978      	ldr	r0, [r7, #20]
 800b746:	f7ff fee3 	bl	800b510 <lwip_poll_should_wake>
 800b74a:	6138      	str	r0, [r7, #16]
 800b74c:	e04d      	b.n	800b7ea <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d014      	beq.n	800b77e <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d010      	beq.n	800b77e <select_check_waiters+0x6e>
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	0952      	lsrs	r2, r2, #5
 800b764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	f002 021f 	and.w	r2, r2, #31
 800b76e:	2101      	movs	r1, #1
 800b770:	fa01 f202 	lsl.w	r2, r1, r2
 800b774:	4013      	ands	r3, r2
 800b776:	2b00      	cmp	r3, #0
 800b778:	d001      	beq.n	800b77e <select_check_waiters+0x6e>
            do_signal = 1;
 800b77a:	2301      	movs	r3, #1
 800b77c:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d017      	beq.n	800b7b4 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d114      	bne.n	800b7b4 <select_check_waiters+0xa4>
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d010      	beq.n	800b7b4 <select_check_waiters+0xa4>
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	0952      	lsrs	r2, r2, #5
 800b79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	f002 021f 	and.w	r2, r2, #31
 800b7a4:	2101      	movs	r1, #1
 800b7a6:	fa01 f202 	lsl.w	r2, r1, r2
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <select_check_waiters+0xa4>
            do_signal = 1;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d017      	beq.n	800b7ea <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d114      	bne.n	800b7ea <select_check_waiters+0xda>
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d010      	beq.n	800b7ea <select_check_waiters+0xda>
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	0952      	lsrs	r2, r2, #5
 800b7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	f002 021f 	and.w	r2, r2, #31
 800b7da:	2101      	movs	r1, #1
 800b7dc:	fa01 f202 	lsl.w	r2, r1, r2
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <select_check_waiters+0xda>
            do_signal = 1;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d007      	beq.n	800b800 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	3320      	adds	r3, #32
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f00d fc74 	bl	80190e8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d18c      	bne.n	800b726 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800b80c:	bf00      	nop
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	200041f8 	.word	0x200041f8

0800b818 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b08      	cmp	r3, #8
 800b824:	d006      	beq.n	800b834 <lwip_sockopt_to_ipopt+0x1c>
 800b826:	2b20      	cmp	r3, #32
 800b828:	d002      	beq.n	800b830 <lwip_sockopt_to_ipopt+0x18>
 800b82a:	2b04      	cmp	r3, #4
 800b82c:	d004      	beq.n	800b838 <lwip_sockopt_to_ipopt+0x20>
 800b82e:	e005      	b.n	800b83c <lwip_sockopt_to_ipopt+0x24>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800b830:	2320      	movs	r3, #32
 800b832:	e00b      	b.n	800b84c <lwip_sockopt_to_ipopt+0x34>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800b834:	2308      	movs	r3, #8
 800b836:	e009      	b.n	800b84c <lwip_sockopt_to_ipopt+0x34>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800b838:	2304      	movs	r3, #4
 800b83a:	e007      	b.n	800b84c <lwip_sockopt_to_ipopt+0x34>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800b83c:	4b05      	ldr	r3, [pc, #20]	; (800b854 <lwip_sockopt_to_ipopt+0x3c>)
 800b83e:	f640 3239 	movw	r2, #2873	; 0xb39
 800b842:	4905      	ldr	r1, [pc, #20]	; (800b858 <lwip_sockopt_to_ipopt+0x40>)
 800b844:	4805      	ldr	r0, [pc, #20]	; (800b85c <lwip_sockopt_to_ipopt+0x44>)
 800b846:	f00d fd71 	bl	801932c <iprintf>
    return 0;
 800b84a:	2300      	movs	r3, #0
  }
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	0801aee0 	.word	0x0801aee0
 800b858:	0801b26c 	.word	0x0801b26c
 800b85c:	0801af34 	.word	0x0801af34

0800b860 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08a      	sub	sp, #40	; 0x28
 800b864:	af02      	add	r7, sp, #8
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	603b      	str	r3, [r7, #0]
  int err = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f7ff fa20 	bl	800acb8 <get_socket>
 800b878:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d102      	bne.n	800b886 <lwip_setsockopt+0x26>
    return -1;
 800b880:	f04f 33ff 	mov.w	r3, #4294967295
 800b884:	e02b      	b.n	800b8de <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10a      	bne.n	800b8a2 <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800b88c:	230e      	movs	r3, #14
 800b88e:	613b      	str	r3, [r7, #16]
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d002      	beq.n	800b89c <lwip_setsockopt+0x3c>
 800b896:	4a14      	ldr	r2, [pc, #80]	; (800b8e8 <lwip_setsockopt+0x88>)
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b89c:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a0:	e01d      	b.n	800b8de <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800b8a2:	4812      	ldr	r0, [pc, #72]	; (800b8ec <lwip_setsockopt+0x8c>)
 800b8a4:	f00d fc82 	bl	80191ac <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	68b9      	ldr	r1, [r7, #8]
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f000 f81c 	bl	800b8f0 <lwip_setsockopt_impl>
 800b8b8:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800b8ba:	480c      	ldr	r0, [pc, #48]	; (800b8ec <lwip_setsockopt+0x8c>)
 800b8bc:	f00d fc85 	bl	80191ca <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	617b      	str	r3, [r7, #20]
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <lwip_setsockopt+0x70>
 800b8ca:	4a07      	ldr	r2, [pc, #28]	; (800b8e8 <lwip_setsockopt+0x88>)
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d002      	beq.n	800b8dc <lwip_setsockopt+0x7c>
 800b8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8da:	e000      	b.n	800b8de <lwip_setsockopt+0x7e>
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3720      	adds	r7, #32
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	2000b178 	.word	0x2000b178
 800b8ec:	200079fc 	.word	0x200079fc

0800b8f0 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b088      	sub	sp, #32
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	603b      	str	r3, [r7, #0]
  int err = 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f7ff f9c1 	bl	800ac8a <tryget_socket>
 800b908:	6178      	str	r0, [r7, #20]
  if (!sock) {
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <lwip_setsockopt_impl+0x24>
    return EBADF;
 800b910:	2309      	movs	r3, #9
 800b912:	e16f      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2b06      	cmp	r3, #6
 800b918:	f000 8115 	beq.w	800bb46 <lwip_setsockopt_impl+0x256>
 800b91c:	2b06      	cmp	r3, #6
 800b91e:	dc03      	bgt.n	800b928 <lwip_setsockopt_impl+0x38>
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 80d7 	beq.w	800bad4 <lwip_setsockopt_impl+0x1e4>
 800b926:	e161      	b.n	800bbec <lwip_setsockopt_impl+0x2fc>
 800b928:	2bff      	cmp	r3, #255	; 0xff
 800b92a:	f000 815b 	beq.w	800bbe4 <lwip_setsockopt_impl+0x2f4>
 800b92e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b932:	4293      	cmp	r3, r2
 800b934:	f040 815a 	bne.w	800bbec <lwip_setsockopt_impl+0x2fc>

    /* Level: SOL_SOCKET */
    case SOL_SOCKET:
      switch (optname) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b20      	cmp	r3, #32
 800b93c:	d00d      	beq.n	800b95a <lwip_setsockopt_impl+0x6a>
 800b93e:	2b20      	cmp	r3, #32
 800b940:	dc02      	bgt.n	800b948 <lwip_setsockopt_impl+0x58>
 800b942:	2b08      	cmp	r3, #8
 800b944:	d009      	beq.n	800b95a <lwip_setsockopt_impl+0x6a>
 800b946:	e0c1      	b.n	800bacc <lwip_setsockopt_impl+0x1dc>
 800b948:	f241 020a 	movw	r2, #4106	; 0x100a
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d048      	beq.n	800b9e2 <lwip_setsockopt_impl+0xf2>
 800b950:	f241 020b 	movw	r2, #4107	; 0x100b
 800b954:	4293      	cmp	r3, r2
 800b956:	d079      	beq.n	800ba4c <lwip_setsockopt_impl+0x15c>
 800b958:	e0b8      	b.n	800bacc <lwip_setsockopt_impl+0x1dc>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b20      	cmp	r3, #32
 800b95e:	d108      	bne.n	800b972 <lwip_setsockopt_impl+0x82>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 800b96a:	2b20      	cmp	r3, #32
 800b96c:	d001      	beq.n	800b972 <lwip_setsockopt_impl+0x82>
            done_socket(sock);
            return ENOPROTOOPT;
 800b96e:	235c      	movs	r3, #92	; 0x5c
 800b970:	e140      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff ff50 	bl	800b818 <lwip_sockopt_to_ipopt>
 800b978:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d801      	bhi.n	800b984 <lwip_setsockopt_impl+0x94>
 800b980:	2316      	movs	r3, #22
 800b982:	e137      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d004      	beq.n	800b996 <lwip_setsockopt_impl+0xa6>
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d101      	bne.n	800b99a <lwip_setsockopt_impl+0xaa>
 800b996:	2316      	movs	r3, #22
 800b998:	e12c      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
          if (*(const int *)optval) {
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00e      	beq.n	800b9c0 <lwip_setsockopt_impl+0xd0>
            ip_set_option(sock->conn->pcb.ip, optname);
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	7a5b      	ldrb	r3, [r3, #9]
 800b9aa:	b25a      	sxtb	r2, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	b25b      	sxtb	r3, r3
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	b25a      	sxtb	r2, r3
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	b2d2      	uxtb	r2, r2
 800b9bc:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800b9be:	e088      	b.n	800bad2 <lwip_setsockopt_impl+0x1e2>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	7a5b      	ldrb	r3, [r3, #9]
 800b9c8:	b25a      	sxtb	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	b25b      	sxtb	r3, r3
 800b9ce:	43db      	mvns	r3, r3
 800b9d0:	b25b      	sxtb	r3, r3
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	b25a      	sxtb	r2, r3
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	b2d2      	uxtb	r2, r2
 800b9de:	725a      	strb	r2, [r3, #9]
          break;
 800b9e0:	e077      	b.n	800bad2 <lwip_setsockopt_impl+0x1e2>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800b9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e4:	2b03      	cmp	r3, #3
 800b9e6:	d801      	bhi.n	800b9ec <lwip_setsockopt_impl+0xfc>
 800b9e8:	2316      	movs	r3, #22
 800b9ea:	e103      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d004      	beq.n	800b9fe <lwip_setsockopt_impl+0x10e>
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <lwip_setsockopt_impl+0x112>
 800b9fe:	2316      	movs	r3, #22
 800ba00:	e0f8      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba0c:	2b20      	cmp	r3, #32
 800ba0e:	d001      	beq.n	800ba14 <lwip_setsockopt_impl+0x124>
 800ba10:	235c      	movs	r3, #92	; 0x5c
 800ba12:	e0ef      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00b      	beq.n	800ba34 <lwip_setsockopt_impl+0x144>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	7c1a      	ldrb	r2, [r3, #16]
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	f042 0201 	orr.w	r2, r2, #1
 800ba2e:	b2d2      	uxtb	r2, r2
 800ba30:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800ba32:	e04e      	b.n	800bad2 <lwip_setsockopt_impl+0x1e2>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	7c1a      	ldrb	r2, [r3, #16]
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	f022 0201 	bic.w	r2, r2, #1
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	741a      	strb	r2, [r3, #16]
          break;
 800ba4a:	e042      	b.n	800bad2 <lwip_setsockopt_impl+0x1e2>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800ba50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba52:	2b05      	cmp	r3, #5
 800ba54:	d801      	bhi.n	800ba5a <lwip_setsockopt_impl+0x16a>
 800ba56:	2316      	movs	r3, #22
 800ba58:	e0cc      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <lwip_setsockopt_impl+0x176>
 800ba62:	2316      	movs	r3, #22
 800ba64:	e0c6      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>

          iface = (const struct ifreq *)optval;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d009      	beq.n	800ba86 <lwip_setsockopt_impl+0x196>
            n = netif_find(iface->ifr_name);
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	4618      	mov	r0, r3
 800ba76:	f001 facb 	bl	800d010 <netif_find>
 800ba7a:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <lwip_setsockopt_impl+0x196>
              done_socket(sock);
              return ENODEV;
 800ba82:	2313      	movs	r3, #19
 800ba84:	e0b6      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba90:	2b10      	cmp	r3, #16
 800ba92:	d002      	beq.n	800ba9a <lwip_setsockopt_impl+0x1aa>
 800ba94:	2b20      	cmp	r3, #32
 800ba96:	d008      	beq.n	800baaa <lwip_setsockopt_impl+0x1ba>
 800ba98:	e00f      	b.n	800baba <lwip_setsockopt_impl+0x1ca>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	69b9      	ldr	r1, [r7, #24]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f002 fcea 	bl	800e47c <tcp_bind_netif>
              break;
 800baa8:	e00f      	b.n	800baca <lwip_setsockopt_impl+0x1da>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	69b9      	ldr	r1, [r7, #24]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f008 ff3c 	bl	8014930 <udp_bind_netif>
              break;
 800bab8:	e007      	b.n	800baca <lwip_setsockopt_impl+0x1da>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800baba:	4b50      	ldr	r3, [pc, #320]	; (800bbfc <lwip_setsockopt_impl+0x30c>)
 800babc:	f640 527d 	movw	r2, #3453	; 0xd7d
 800bac0:	494f      	ldr	r1, [pc, #316]	; (800bc00 <lwip_setsockopt_impl+0x310>)
 800bac2:	4850      	ldr	r0, [pc, #320]	; (800bc04 <lwip_setsockopt_impl+0x314>)
 800bac4:	f00d fc32 	bl	801932c <iprintf>
              break;
 800bac8:	bf00      	nop
          }
        }
        break;
 800baca:	e002      	b.n	800bad2 <lwip_setsockopt_impl+0x1e2>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800bacc:	235c      	movs	r3, #92	; 0x5c
 800bace:	61fb      	str	r3, [r7, #28]
          break;
 800bad0:	bf00      	nop
      }  /* switch (optname) */
      break;
 800bad2:	e08e      	b.n	800bbf2 <lwip_setsockopt_impl+0x302>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d019      	beq.n	800bb0e <lwip_setsockopt_impl+0x21e>
 800bada:	2b02      	cmp	r3, #2
 800badc:	d12f      	bne.n	800bb3e <lwip_setsockopt_impl+0x24e>
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d801      	bhi.n	800bae8 <lwip_setsockopt_impl+0x1f8>
 800bae4:	2316      	movs	r3, #22
 800bae6:	e085      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d004      	beq.n	800bafa <lwip_setsockopt_impl+0x20a>
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d101      	bne.n	800bafe <lwip_setsockopt_impl+0x20e>
 800bafa:	2316      	movs	r3, #22
 800bafc:	e07a      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	b2d2      	uxtb	r2, r2
 800bb0a:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800bb0c:	e01a      	b.n	800bb44 <lwip_setsockopt_impl+0x254>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	2b03      	cmp	r3, #3
 800bb12:	d801      	bhi.n	800bb18 <lwip_setsockopt_impl+0x228>
 800bb14:	2316      	movs	r3, #22
 800bb16:	e06d      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d004      	beq.n	800bb2a <lwip_setsockopt_impl+0x23a>
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <lwip_setsockopt_impl+0x23e>
 800bb2a:	2316      	movs	r3, #22
 800bb2c:	e062      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	b2d2      	uxtb	r2, r2
 800bb3a:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800bb3c:	e002      	b.n	800bb44 <lwip_setsockopt_impl+0x254>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800bb3e:	235c      	movs	r3, #92	; 0x5c
 800bb40:	61fb      	str	r3, [r7, #28]
          break;
 800bb42:	bf00      	nop
      }  /* switch (optname) */
      break;
 800bb44:	e055      	b.n	800bbf2 <lwip_setsockopt_impl+0x302>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d801      	bhi.n	800bb50 <lwip_setsockopt_impl+0x260>
 800bb4c:	2316      	movs	r3, #22
 800bb4e:	e051      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d004      	beq.n	800bb62 <lwip_setsockopt_impl+0x272>
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <lwip_setsockopt_impl+0x276>
 800bb62:	2316      	movs	r3, #22
 800bb64:	e046      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb70:	2b10      	cmp	r3, #16
 800bb72:	d001      	beq.n	800bb78 <lwip_setsockopt_impl+0x288>
 800bb74:	235c      	movs	r3, #92	; 0x5c
 800bb76:	e03d      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	7d1b      	ldrb	r3, [r3, #20]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d101      	bne.n	800bb88 <lwip_setsockopt_impl+0x298>
        done_socket(sock);
        return EINVAL;
 800bb84:	2316      	movs	r3, #22
 800bb86:	e035      	b.n	800bbf4 <lwip_setsockopt_impl+0x304>
      }
      switch (optname) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d002      	beq.n	800bb94 <lwip_setsockopt_impl+0x2a4>
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d01c      	beq.n	800bbcc <lwip_setsockopt_impl+0x2dc>
 800bb92:	e023      	b.n	800bbdc <lwip_setsockopt_impl+0x2ec>
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00b      	beq.n	800bbb4 <lwip_setsockopt_impl+0x2c4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	8b5a      	ldrh	r2, [r3, #26]
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbae:	b292      	uxth	r2, r2
 800bbb0:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800bbb2:	e016      	b.n	800bbe2 <lwip_setsockopt_impl+0x2f2>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	8b5a      	ldrh	r2, [r3, #26]
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbc6:	b292      	uxth	r2, r2
 800bbc8:	835a      	strh	r2, [r3, #26]
          break;
 800bbca:	e00a      	b.n	800bbe2 <lwip_setsockopt_impl+0x2f2>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800bbda:	e002      	b.n	800bbe2 <lwip_setsockopt_impl+0x2f2>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800bbdc:	235c      	movs	r3, #92	; 0x5c
 800bbde:	61fb      	str	r3, [r7, #28]
          break;
 800bbe0:	bf00      	nop
      }  /* switch (optname) */
      break;
 800bbe2:	e006      	b.n	800bbf2 <lwip_setsockopt_impl+0x302>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800bbe4:	235c      	movs	r3, #92	; 0x5c
 800bbe6:	61fb      	str	r3, [r7, #28]
          break;
 800bbe8:	bf00      	nop
      }  /* switch (optname) */
      break;
 800bbea:	e002      	b.n	800bbf2 <lwip_setsockopt_impl+0x302>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800bbec:	235c      	movs	r3, #92	; 0x5c
 800bbee:	61fb      	str	r3, [r7, #28]
      break;
 800bbf0:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3720      	adds	r7, #32
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	0801aee0 	.word	0x0801aee0
 800bc00:	0801b284 	.word	0x0801b284
 800bc04:	0801af34 	.word	0x0801af34

0800bc08 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800bc12:	f008 fa21 	bl	8014058 <sys_timeouts_sleeptime>
 800bc16:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1e:	d10b      	bne.n	800bc38 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bc20:	4813      	ldr	r0, [pc, #76]	; (800bc70 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc22:	f00d fad2 	bl	80191ca <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bc26:	2200      	movs	r2, #0
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f00d f98a 	bl	8018f44 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bc30:	480f      	ldr	r0, [pc, #60]	; (800bc70 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc32:	f00d fabb 	bl	80191ac <sys_mutex_lock>
    return;
 800bc36:	e018      	b.n	800bc6a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d102      	bne.n	800bc44 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bc3e:	f008 f9d1 	bl	8013fe4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bc42:	e7e6      	b.n	800bc12 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bc44:	480a      	ldr	r0, [pc, #40]	; (800bc70 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc46:	f00d fac0 	bl	80191ca <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f00d f978 	bl	8018f44 <sys_arch_mbox_fetch>
 800bc54:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bc56:	4806      	ldr	r0, [pc, #24]	; (800bc70 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc58:	f00d faa8 	bl	80191ac <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc62:	d102      	bne.n	800bc6a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bc64:	f008 f9be 	bl	8013fe4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bc68:	e7d3      	b.n	800bc12 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	200079fc 	.word	0x200079fc

0800bc74 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bc7c:	4810      	ldr	r0, [pc, #64]	; (800bcc0 <tcpip_thread+0x4c>)
 800bc7e:	f00d fa95 	bl	80191ac <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bc82:	4b10      	ldr	r3, [pc, #64]	; (800bcc4 <tcpip_thread+0x50>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d005      	beq.n	800bc96 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bc8a:	4b0e      	ldr	r3, [pc, #56]	; (800bcc4 <tcpip_thread+0x50>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a0e      	ldr	r2, [pc, #56]	; (800bcc8 <tcpip_thread+0x54>)
 800bc90:	6812      	ldr	r2, [r2, #0]
 800bc92:	4610      	mov	r0, r2
 800bc94:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bc96:	f107 030c 	add.w	r3, r7, #12
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	480b      	ldr	r0, [pc, #44]	; (800bccc <tcpip_thread+0x58>)
 800bc9e:	f7ff ffb3 	bl	800bc08 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d106      	bne.n	800bcb6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bca8:	4b09      	ldr	r3, [pc, #36]	; (800bcd0 <tcpip_thread+0x5c>)
 800bcaa:	2291      	movs	r2, #145	; 0x91
 800bcac:	4909      	ldr	r1, [pc, #36]	; (800bcd4 <tcpip_thread+0x60>)
 800bcae:	480a      	ldr	r0, [pc, #40]	; (800bcd8 <tcpip_thread+0x64>)
 800bcb0:	f00d fb3c 	bl	801932c <iprintf>
      continue;
 800bcb4:	e003      	b.n	800bcbe <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f000 f80f 	bl	800bcdc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bcbe:	e7ea      	b.n	800bc96 <tcpip_thread+0x22>
 800bcc0:	200079fc 	.word	0x200079fc
 800bcc4:	200041fc 	.word	0x200041fc
 800bcc8:	20004200 	.word	0x20004200
 800bccc:	20004204 	.word	0x20004204
 800bcd0:	0801b2b0 	.word	0x0801b2b0
 800bcd4:	0801b2e0 	.word	0x0801b2e0
 800bcd8:	0801b300 	.word	0x0801b300

0800bcdc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d018      	beq.n	800bd1e <tcpip_thread_handle_msg+0x42>
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d021      	beq.n	800bd34 <tcpip_thread_handle_msg+0x58>
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d126      	bne.n	800bd42 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	6850      	ldr	r0, [r2, #4]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	6892      	ldr	r2, [r2, #8]
 800bd00:	4611      	mov	r1, r2
 800bd02:	4798      	blx	r3
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d004      	beq.n	800bd14 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f001 fd1a 	bl	800d748 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	2009      	movs	r0, #9
 800bd18:	f000 fe32 	bl	800c980 <memp_free>
      break;
 800bd1c:	e018      	b.n	800bd50 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6892      	ldr	r2, [r2, #8]
 800bd26:	4610      	mov	r0, r2
 800bd28:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bd2a:	6879      	ldr	r1, [r7, #4]
 800bd2c:	2008      	movs	r0, #8
 800bd2e:	f000 fe27 	bl	800c980 <memp_free>
      break;
 800bd32:	e00d      	b.n	800bd50 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	6892      	ldr	r2, [r2, #8]
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	4798      	blx	r3
      break;
 800bd40:	e006      	b.n	800bd50 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bd42:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <tcpip_thread_handle_msg+0x7c>)
 800bd44:	22cf      	movs	r2, #207	; 0xcf
 800bd46:	4905      	ldr	r1, [pc, #20]	; (800bd5c <tcpip_thread_handle_msg+0x80>)
 800bd48:	4805      	ldr	r0, [pc, #20]	; (800bd60 <tcpip_thread_handle_msg+0x84>)
 800bd4a:	f00d faef 	bl	801932c <iprintf>
      break;
 800bd4e:	bf00      	nop
  }
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	0801b2b0 	.word	0x0801b2b0
 800bd5c:	0801b2e0 	.word	0x0801b2e0
 800bd60:	0801b300 	.word	0x0801b300

0800bd64 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bd70:	481a      	ldr	r0, [pc, #104]	; (800bddc <tcpip_inpkt+0x78>)
 800bd72:	f00d f942 	bl	8018ffa <sys_mbox_valid>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d105      	bne.n	800bd88 <tcpip_inpkt+0x24>
 800bd7c:	4b18      	ldr	r3, [pc, #96]	; (800bde0 <tcpip_inpkt+0x7c>)
 800bd7e:	22fc      	movs	r2, #252	; 0xfc
 800bd80:	4918      	ldr	r1, [pc, #96]	; (800bde4 <tcpip_inpkt+0x80>)
 800bd82:	4819      	ldr	r0, [pc, #100]	; (800bde8 <tcpip_inpkt+0x84>)
 800bd84:	f00d fad2 	bl	801932c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bd88:	2009      	movs	r0, #9
 800bd8a:	f000 fda7 	bl	800c8dc <memp_malloc>
 800bd8e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d102      	bne.n	800bd9c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bd96:	f04f 33ff 	mov.w	r3, #4294967295
 800bd9a:	e01a      	b.n	800bdd2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bdb4:	6979      	ldr	r1, [r7, #20]
 800bdb6:	4809      	ldr	r0, [pc, #36]	; (800bddc <tcpip_inpkt+0x78>)
 800bdb8:	f00d f8aa 	bl	8018f10 <sys_mbox_trypost>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d006      	beq.n	800bdd0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bdc2:	6979      	ldr	r1, [r7, #20]
 800bdc4:	2009      	movs	r0, #9
 800bdc6:	f000 fddb 	bl	800c980 <memp_free>
    return ERR_MEM;
 800bdca:	f04f 33ff 	mov.w	r3, #4294967295
 800bdce:	e000      	b.n	800bdd2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bdd0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3718      	adds	r7, #24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20004204 	.word	0x20004204
 800bde0:	0801b2b0 	.word	0x0801b2b0
 800bde4:	0801b328 	.word	0x0801b328
 800bde8:	0801b300 	.word	0x0801b300

0800bdec <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bdfc:	f003 0318 	and.w	r3, r3, #24
 800be00:	2b00      	cmp	r3, #0
 800be02:	d006      	beq.n	800be12 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800be04:	4a08      	ldr	r2, [pc, #32]	; (800be28 <tcpip_input+0x3c>)
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7ff ffab 	bl	800bd64 <tcpip_inpkt>
 800be0e:	4603      	mov	r3, r0
 800be10:	e005      	b.n	800be1e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800be12:	4a06      	ldr	r2, [pc, #24]	; (800be2c <tcpip_input+0x40>)
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7ff ffa4 	bl	800bd64 <tcpip_inpkt>
 800be1c:	4603      	mov	r3, r0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	08018cfd 	.word	0x08018cfd
 800be2c:	08017be1 	.word	0x08017be1

0800be30 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800be3a:	4819      	ldr	r0, [pc, #100]	; (800bea0 <tcpip_try_callback+0x70>)
 800be3c:	f00d f8dd 	bl	8018ffa <sys_mbox_valid>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d106      	bne.n	800be54 <tcpip_try_callback+0x24>
 800be46:	4b17      	ldr	r3, [pc, #92]	; (800bea4 <tcpip_try_callback+0x74>)
 800be48:	f240 125d 	movw	r2, #349	; 0x15d
 800be4c:	4916      	ldr	r1, [pc, #88]	; (800bea8 <tcpip_try_callback+0x78>)
 800be4e:	4817      	ldr	r0, [pc, #92]	; (800beac <tcpip_try_callback+0x7c>)
 800be50:	f00d fa6c 	bl	801932c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800be54:	2008      	movs	r0, #8
 800be56:	f000 fd41 	bl	800c8dc <memp_malloc>
 800be5a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d102      	bne.n	800be68 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800be62:	f04f 33ff 	mov.w	r3, #4294967295
 800be66:	e017      	b.n	800be98 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2201      	movs	r2, #1
 800be6c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800be7a:	68f9      	ldr	r1, [r7, #12]
 800be7c:	4808      	ldr	r0, [pc, #32]	; (800bea0 <tcpip_try_callback+0x70>)
 800be7e:	f00d f847 	bl	8018f10 <sys_mbox_trypost>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d006      	beq.n	800be96 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800be88:	68f9      	ldr	r1, [r7, #12]
 800be8a:	2008      	movs	r0, #8
 800be8c:	f000 fd78 	bl	800c980 <memp_free>
    return ERR_MEM;
 800be90:	f04f 33ff 	mov.w	r3, #4294967295
 800be94:	e000      	b.n	800be98 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20004204 	.word	0x20004204
 800bea4:	0801b2b0 	.word	0x0801b2b0
 800bea8:	0801b328 	.word	0x0801b328
 800beac:	0801b300 	.word	0x0801b300

0800beb0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800bebc:	4806      	ldr	r0, [pc, #24]	; (800bed8 <tcpip_send_msg_wait_sem+0x28>)
 800bebe:	f00d f975 	bl	80191ac <sys_mutex_lock>
  fn(apimsg);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	68b8      	ldr	r0, [r7, #8]
 800bec6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800bec8:	4803      	ldr	r0, [pc, #12]	; (800bed8 <tcpip_send_msg_wait_sem+0x28>)
 800beca:	f00d f97e 	bl	80191ca <sys_mutex_unlock>
  return ERR_OK;
 800bece:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	200079fc 	.word	0x200079fc

0800bedc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af02      	add	r7, sp, #8
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bee6:	f000 f871 	bl	800bfcc <lwip_init>

  tcpip_init_done = initfunc;
 800beea:	4a17      	ldr	r2, [pc, #92]	; (800bf48 <tcpip_init+0x6c>)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bef0:	4a16      	ldr	r2, [pc, #88]	; (800bf4c <tcpip_init+0x70>)
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bef6:	2106      	movs	r1, #6
 800bef8:	4815      	ldr	r0, [pc, #84]	; (800bf50 <tcpip_init+0x74>)
 800befa:	f00c ffd5 	bl	8018ea8 <sys_mbox_new>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d006      	beq.n	800bf12 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bf04:	4b13      	ldr	r3, [pc, #76]	; (800bf54 <tcpip_init+0x78>)
 800bf06:	f240 2261 	movw	r2, #609	; 0x261
 800bf0a:	4913      	ldr	r1, [pc, #76]	; (800bf58 <tcpip_init+0x7c>)
 800bf0c:	4813      	ldr	r0, [pc, #76]	; (800bf5c <tcpip_init+0x80>)
 800bf0e:	f00d fa0d 	bl	801932c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bf12:	4813      	ldr	r0, [pc, #76]	; (800bf60 <tcpip_init+0x84>)
 800bf14:	f00d f92e 	bl	8019174 <sys_mutex_new>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d006      	beq.n	800bf2c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bf1e:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <tcpip_init+0x78>)
 800bf20:	f240 2265 	movw	r2, #613	; 0x265
 800bf24:	490f      	ldr	r1, [pc, #60]	; (800bf64 <tcpip_init+0x88>)
 800bf26:	480d      	ldr	r0, [pc, #52]	; (800bf5c <tcpip_init+0x80>)
 800bf28:	f00d fa00 	bl	801932c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf34:	2200      	movs	r2, #0
 800bf36:	490c      	ldr	r1, [pc, #48]	; (800bf68 <tcpip_init+0x8c>)
 800bf38:	480c      	ldr	r0, [pc, #48]	; (800bf6c <tcpip_init+0x90>)
 800bf3a:	f00d f953 	bl	80191e4 <sys_thread_new>
}
 800bf3e:	bf00      	nop
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	200041fc 	.word	0x200041fc
 800bf4c:	20004200 	.word	0x20004200
 800bf50:	20004204 	.word	0x20004204
 800bf54:	0801b2b0 	.word	0x0801b2b0
 800bf58:	0801b338 	.word	0x0801b338
 800bf5c:	0801b300 	.word	0x0801b300
 800bf60:	200079fc 	.word	0x200079fc
 800bf64:	0801b35c 	.word	0x0801b35c
 800bf68:	0800bc75 	.word	0x0800bc75
 800bf6c:	0801b380 	.word	0x0801b380

0800bf70 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	4603      	mov	r3, r0
 800bf78:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bf7a:	88fb      	ldrh	r3, [r7, #6]
 800bf7c:	021b      	lsls	r3, r3, #8
 800bf7e:	b21a      	sxth	r2, r3
 800bf80:	88fb      	ldrh	r3, [r7, #6]
 800bf82:	0a1b      	lsrs	r3, r3, #8
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	b21b      	sxth	r3, r3
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	b21b      	sxth	r3, r3
 800bf8c:	b29b      	uxth	r3, r3
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	370c      	adds	r7, #12
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b083      	sub	sp, #12
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	061a      	lsls	r2, r3, #24
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	021b      	lsls	r3, r3, #8
 800bfaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	0a1b      	lsrs	r3, r3, #8
 800bfb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bfb8:	431a      	orrs	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	0e1b      	lsrs	r3, r3, #24
 800bfbe:	4313      	orrs	r3, r2
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bfd6:	f00d f8bf 	bl	8019158 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bfda:	f000 f8d5 	bl	800c188 <mem_init>
  memp_init();
 800bfde:	f000 fc31 	bl	800c844 <memp_init>
  pbuf_init();
  netif_init();
 800bfe2:	f000 fcf7 	bl	800c9d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bfe6:	f008 f86f 	bl	80140c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bfea:	f001 fe57 	bl	800dc9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bfee:	f007 ffb3 	bl	8013f58 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bff2:	bf00      	nop
 800bff4:	3708      	adds	r7, #8
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
	...

0800bffc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c006:	4b05      	ldr	r3, [pc, #20]	; (800c01c <ptr_to_mem+0x20>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	88fb      	ldrh	r3, [r7, #6]
 800c00c:	4413      	add	r3, r2
}
 800c00e:	4618      	mov	r0, r3
 800c010:	370c      	adds	r7, #12
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	20004208 	.word	0x20004208

0800c020 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4a05      	ldr	r2, [pc, #20]	; (800c040 <mem_to_ptr+0x20>)
 800c02c:	6812      	ldr	r2, [r2, #0]
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	b29b      	uxth	r3, r3
}
 800c032:	4618      	mov	r0, r3
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	20004208 	.word	0x20004208

0800c044 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c044:	b590      	push	{r4, r7, lr}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c04c:	4b45      	ldr	r3, [pc, #276]	; (800c164 <plug_holes+0x120>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	429a      	cmp	r2, r3
 800c054:	d206      	bcs.n	800c064 <plug_holes+0x20>
 800c056:	4b44      	ldr	r3, [pc, #272]	; (800c168 <plug_holes+0x124>)
 800c058:	f240 12df 	movw	r2, #479	; 0x1df
 800c05c:	4943      	ldr	r1, [pc, #268]	; (800c16c <plug_holes+0x128>)
 800c05e:	4844      	ldr	r0, [pc, #272]	; (800c170 <plug_holes+0x12c>)
 800c060:	f00d f964 	bl	801932c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c064:	4b43      	ldr	r3, [pc, #268]	; (800c174 <plug_holes+0x130>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d306      	bcc.n	800c07c <plug_holes+0x38>
 800c06e:	4b3e      	ldr	r3, [pc, #248]	; (800c168 <plug_holes+0x124>)
 800c070:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c074:	4940      	ldr	r1, [pc, #256]	; (800c178 <plug_holes+0x134>)
 800c076:	483e      	ldr	r0, [pc, #248]	; (800c170 <plug_holes+0x12c>)
 800c078:	f00d f958 	bl	801932c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	791b      	ldrb	r3, [r3, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d006      	beq.n	800c092 <plug_holes+0x4e>
 800c084:	4b38      	ldr	r3, [pc, #224]	; (800c168 <plug_holes+0x124>)
 800c086:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c08a:	493c      	ldr	r1, [pc, #240]	; (800c17c <plug_holes+0x138>)
 800c08c:	4838      	ldr	r0, [pc, #224]	; (800c170 <plug_holes+0x12c>)
 800c08e:	f00d f94d 	bl	801932c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	881b      	ldrh	r3, [r3, #0]
 800c096:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c09a:	d906      	bls.n	800c0aa <plug_holes+0x66>
 800c09c:	4b32      	ldr	r3, [pc, #200]	; (800c168 <plug_holes+0x124>)
 800c09e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c0a2:	4937      	ldr	r1, [pc, #220]	; (800c180 <plug_holes+0x13c>)
 800c0a4:	4832      	ldr	r0, [pc, #200]	; (800c170 <plug_holes+0x12c>)
 800c0a6:	f00d f941 	bl	801932c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	881b      	ldrh	r3, [r3, #0]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff ffa4 	bl	800bffc <ptr_to_mem>
 800c0b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d024      	beq.n	800c108 <plug_holes+0xc4>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	791b      	ldrb	r3, [r3, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d120      	bne.n	800c108 <plug_holes+0xc4>
 800c0c6:	4b2b      	ldr	r3, [pc, #172]	; (800c174 <plug_holes+0x130>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68fa      	ldr	r2, [r7, #12]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d01b      	beq.n	800c108 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c0d0:	4b2c      	ldr	r3, [pc, #176]	; (800c184 <plug_holes+0x140>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d102      	bne.n	800c0e0 <plug_holes+0x9c>
      lfree = mem;
 800c0da:	4a2a      	ldr	r2, [pc, #168]	; (800c184 <plug_holes+0x140>)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	881a      	ldrh	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c0f0:	d00a      	beq.n	800c108 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	881b      	ldrh	r3, [r3, #0]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7ff ff80 	bl	800bffc <ptr_to_mem>
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff ff8e 	bl	800c020 <mem_to_ptr>
 800c104:	4603      	mov	r3, r0
 800c106:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	885b      	ldrh	r3, [r3, #2]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7ff ff75 	bl	800bffc <ptr_to_mem>
 800c112:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d01f      	beq.n	800c15c <plug_holes+0x118>
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	791b      	ldrb	r3, [r3, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11b      	bne.n	800c15c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c124:	4b17      	ldr	r3, [pc, #92]	; (800c184 <plug_holes+0x140>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d102      	bne.n	800c134 <plug_holes+0xf0>
      lfree = pmem;
 800c12e:	4a15      	ldr	r2, [pc, #84]	; (800c184 <plug_holes+0x140>)
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	881a      	ldrh	r2, [r3, #0]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c144:	d00a      	beq.n	800c15c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	881b      	ldrh	r3, [r3, #0]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff ff56 	bl	800bffc <ptr_to_mem>
 800c150:	4604      	mov	r4, r0
 800c152:	68b8      	ldr	r0, [r7, #8]
 800c154:	f7ff ff64 	bl	800c020 <mem_to_ptr>
 800c158:	4603      	mov	r3, r0
 800c15a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c15c:	bf00      	nop
 800c15e:	3714      	adds	r7, #20
 800c160:	46bd      	mov	sp, r7
 800c162:	bd90      	pop	{r4, r7, pc}
 800c164:	20004208 	.word	0x20004208
 800c168:	0801b390 	.word	0x0801b390
 800c16c:	0801b3c0 	.word	0x0801b3c0
 800c170:	0801b3d8 	.word	0x0801b3d8
 800c174:	2000420c 	.word	0x2000420c
 800c178:	0801b400 	.word	0x0801b400
 800c17c:	0801b41c 	.word	0x0801b41c
 800c180:	0801b438 	.word	0x0801b438
 800c184:	20004214 	.word	0x20004214

0800c188 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c18e:	4b1f      	ldr	r3, [pc, #124]	; (800c20c <mem_init+0x84>)
 800c190:	3303      	adds	r3, #3
 800c192:	f023 0303 	bic.w	r3, r3, #3
 800c196:	461a      	mov	r2, r3
 800c198:	4b1d      	ldr	r3, [pc, #116]	; (800c210 <mem_init+0x88>)
 800c19a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c19c:	4b1c      	ldr	r3, [pc, #112]	; (800c210 <mem_init+0x88>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c1a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c1b6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c1ba:	f7ff ff1f 	bl	800bffc <ptr_to_mem>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	4b14      	ldr	r3, [pc, #80]	; (800c214 <mem_init+0x8c>)
 800c1c2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800c1c4:	4b13      	ldr	r3, [pc, #76]	; (800c214 <mem_init+0x8c>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c1cc:	4b11      	ldr	r3, [pc, #68]	; (800c214 <mem_init+0x8c>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c1d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c1d6:	4b0f      	ldr	r3, [pc, #60]	; (800c214 <mem_init+0x8c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c1de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c1e0:	4b0b      	ldr	r3, [pc, #44]	; (800c210 <mem_init+0x88>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a0c      	ldr	r2, [pc, #48]	; (800c218 <mem_init+0x90>)
 800c1e6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c1e8:	480c      	ldr	r0, [pc, #48]	; (800c21c <mem_init+0x94>)
 800c1ea:	f00c ffc3 	bl	8019174 <sys_mutex_new>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d006      	beq.n	800c202 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c1f4:	4b0a      	ldr	r3, [pc, #40]	; (800c220 <mem_init+0x98>)
 800c1f6:	f240 221f 	movw	r2, #543	; 0x21f
 800c1fa:	490a      	ldr	r1, [pc, #40]	; (800c224 <mem_init+0x9c>)
 800c1fc:	480a      	ldr	r0, [pc, #40]	; (800c228 <mem_init+0xa0>)
 800c1fe:	f00d f895 	bl	801932c <iprintf>
  }
}
 800c202:	bf00      	nop
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	20007a18 	.word	0x20007a18
 800c210:	20004208 	.word	0x20004208
 800c214:	2000420c 	.word	0x2000420c
 800c218:	20004214 	.word	0x20004214
 800c21c:	20004210 	.word	0x20004210
 800c220:	0801b390 	.word	0x0801b390
 800c224:	0801b464 	.word	0x0801b464
 800c228:	0801b3d8 	.word	0x0801b3d8

0800c22c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7ff fef3 	bl	800c020 <mem_to_ptr>
 800c23a:	4603      	mov	r3, r0
 800c23c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff feda 	bl	800bffc <ptr_to_mem>
 800c248:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	885b      	ldrh	r3, [r3, #2]
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff fed4 	bl	800bffc <ptr_to_mem>
 800c254:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	881b      	ldrh	r3, [r3, #0]
 800c25a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c25e:	d818      	bhi.n	800c292 <mem_link_valid+0x66>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	885b      	ldrh	r3, [r3, #2]
 800c264:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c268:	d813      	bhi.n	800c292 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c26e:	8afa      	ldrh	r2, [r7, #22]
 800c270:	429a      	cmp	r2, r3
 800c272:	d004      	beq.n	800c27e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	8afa      	ldrh	r2, [r7, #22]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d109      	bne.n	800c292 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c27e:	4b08      	ldr	r3, [pc, #32]	; (800c2a0 <mem_link_valid+0x74>)
 800c280:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c282:	693a      	ldr	r2, [r7, #16]
 800c284:	429a      	cmp	r2, r3
 800c286:	d006      	beq.n	800c296 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	885b      	ldrh	r3, [r3, #2]
 800c28c:	8afa      	ldrh	r2, [r7, #22]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d001      	beq.n	800c296 <mem_link_valid+0x6a>
    return 0;
 800c292:	2300      	movs	r3, #0
 800c294:	e000      	b.n	800c298 <mem_link_valid+0x6c>
  }
  return 1;
 800c296:	2301      	movs	r3, #1
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3718      	adds	r7, #24
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	2000420c 	.word	0x2000420c

0800c2a4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b088      	sub	sp, #32
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d070      	beq.n	800c394 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f003 0303 	and.w	r3, r3, #3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00d      	beq.n	800c2d8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c2bc:	4b37      	ldr	r3, [pc, #220]	; (800c39c <mem_free+0xf8>)
 800c2be:	f240 2273 	movw	r2, #627	; 0x273
 800c2c2:	4937      	ldr	r1, [pc, #220]	; (800c3a0 <mem_free+0xfc>)
 800c2c4:	4837      	ldr	r0, [pc, #220]	; (800c3a4 <mem_free+0x100>)
 800c2c6:	f00d f831 	bl	801932c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c2ca:	f00c ffb1 	bl	8019230 <sys_arch_protect>
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f00c ffbb 	bl	801924c <sys_arch_unprotect>
    return;
 800c2d6:	e05e      	b.n	800c396 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3b08      	subs	r3, #8
 800c2dc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c2de:	4b32      	ldr	r3, [pc, #200]	; (800c3a8 <mem_free+0x104>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	69fa      	ldr	r2, [r7, #28]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d306      	bcc.n	800c2f6 <mem_free+0x52>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f103 020c 	add.w	r2, r3, #12
 800c2ee:	4b2f      	ldr	r3, [pc, #188]	; (800c3ac <mem_free+0x108>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d90d      	bls.n	800c312 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c2f6:	4b29      	ldr	r3, [pc, #164]	; (800c39c <mem_free+0xf8>)
 800c2f8:	f240 227f 	movw	r2, #639	; 0x27f
 800c2fc:	492c      	ldr	r1, [pc, #176]	; (800c3b0 <mem_free+0x10c>)
 800c2fe:	4829      	ldr	r0, [pc, #164]	; (800c3a4 <mem_free+0x100>)
 800c300:	f00d f814 	bl	801932c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c304:	f00c ff94 	bl	8019230 <sys_arch_protect>
 800c308:	6138      	str	r0, [r7, #16]
 800c30a:	6938      	ldr	r0, [r7, #16]
 800c30c:	f00c ff9e 	bl	801924c <sys_arch_unprotect>
    return;
 800c310:	e041      	b.n	800c396 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c312:	4828      	ldr	r0, [pc, #160]	; (800c3b4 <mem_free+0x110>)
 800c314:	f00c ff4a 	bl	80191ac <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	791b      	ldrb	r3, [r3, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d110      	bne.n	800c342 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c320:	4b1e      	ldr	r3, [pc, #120]	; (800c39c <mem_free+0xf8>)
 800c322:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c326:	4924      	ldr	r1, [pc, #144]	; (800c3b8 <mem_free+0x114>)
 800c328:	481e      	ldr	r0, [pc, #120]	; (800c3a4 <mem_free+0x100>)
 800c32a:	f00c ffff 	bl	801932c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c32e:	4821      	ldr	r0, [pc, #132]	; (800c3b4 <mem_free+0x110>)
 800c330:	f00c ff4b 	bl	80191ca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c334:	f00c ff7c 	bl	8019230 <sys_arch_protect>
 800c338:	6178      	str	r0, [r7, #20]
 800c33a:	6978      	ldr	r0, [r7, #20]
 800c33c:	f00c ff86 	bl	801924c <sys_arch_unprotect>
    return;
 800c340:	e029      	b.n	800c396 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c342:	69f8      	ldr	r0, [r7, #28]
 800c344:	f7ff ff72 	bl	800c22c <mem_link_valid>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d110      	bne.n	800c370 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c34e:	4b13      	ldr	r3, [pc, #76]	; (800c39c <mem_free+0xf8>)
 800c350:	f240 2295 	movw	r2, #661	; 0x295
 800c354:	4919      	ldr	r1, [pc, #100]	; (800c3bc <mem_free+0x118>)
 800c356:	4813      	ldr	r0, [pc, #76]	; (800c3a4 <mem_free+0x100>)
 800c358:	f00c ffe8 	bl	801932c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c35c:	4815      	ldr	r0, [pc, #84]	; (800c3b4 <mem_free+0x110>)
 800c35e:	f00c ff34 	bl	80191ca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c362:	f00c ff65 	bl	8019230 <sys_arch_protect>
 800c366:	61b8      	str	r0, [r7, #24]
 800c368:	69b8      	ldr	r0, [r7, #24]
 800c36a:	f00c ff6f 	bl	801924c <sys_arch_unprotect>
    return;
 800c36e:	e012      	b.n	800c396 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	2200      	movs	r2, #0
 800c374:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c376:	4b12      	ldr	r3, [pc, #72]	; (800c3c0 <mem_free+0x11c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	69fa      	ldr	r2, [r7, #28]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d202      	bcs.n	800c386 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c380:	4a0f      	ldr	r2, [pc, #60]	; (800c3c0 <mem_free+0x11c>)
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c386:	69f8      	ldr	r0, [r7, #28]
 800c388:	f7ff fe5c 	bl	800c044 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c38c:	4809      	ldr	r0, [pc, #36]	; (800c3b4 <mem_free+0x110>)
 800c38e:	f00c ff1c 	bl	80191ca <sys_mutex_unlock>
 800c392:	e000      	b.n	800c396 <mem_free+0xf2>
    return;
 800c394:	bf00      	nop
}
 800c396:	3720      	adds	r7, #32
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	0801b390 	.word	0x0801b390
 800c3a0:	0801b480 	.word	0x0801b480
 800c3a4:	0801b3d8 	.word	0x0801b3d8
 800c3a8:	20004208 	.word	0x20004208
 800c3ac:	2000420c 	.word	0x2000420c
 800c3b0:	0801b4a4 	.word	0x0801b4a4
 800c3b4:	20004210 	.word	0x20004210
 800c3b8:	0801b4c0 	.word	0x0801b4c0
 800c3bc:	0801b4e8 	.word	0x0801b4e8
 800c3c0:	20004214 	.word	0x20004214

0800c3c4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b088      	sub	sp, #32
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c3d0:	887b      	ldrh	r3, [r7, #2]
 800c3d2:	3303      	adds	r3, #3
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	f023 0303 	bic.w	r3, r3, #3
 800c3da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c3dc:	8bfb      	ldrh	r3, [r7, #30]
 800c3de:	2b0b      	cmp	r3, #11
 800c3e0:	d801      	bhi.n	800c3e6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c3e2:	230c      	movs	r3, #12
 800c3e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c3e6:	8bfb      	ldrh	r3, [r7, #30]
 800c3e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3ec:	d803      	bhi.n	800c3f6 <mem_trim+0x32>
 800c3ee:	8bfa      	ldrh	r2, [r7, #30]
 800c3f0:	887b      	ldrh	r3, [r7, #2]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d201      	bcs.n	800c3fa <mem_trim+0x36>
    return NULL;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	e0d8      	b.n	800c5ac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c3fa:	4b6e      	ldr	r3, [pc, #440]	; (800c5b4 <mem_trim+0x1f0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	429a      	cmp	r2, r3
 800c402:	d304      	bcc.n	800c40e <mem_trim+0x4a>
 800c404:	4b6c      	ldr	r3, [pc, #432]	; (800c5b8 <mem_trim+0x1f4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d306      	bcc.n	800c41c <mem_trim+0x58>
 800c40e:	4b6b      	ldr	r3, [pc, #428]	; (800c5bc <mem_trim+0x1f8>)
 800c410:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c414:	496a      	ldr	r1, [pc, #424]	; (800c5c0 <mem_trim+0x1fc>)
 800c416:	486b      	ldr	r0, [pc, #428]	; (800c5c4 <mem_trim+0x200>)
 800c418:	f00c ff88 	bl	801932c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c41c:	4b65      	ldr	r3, [pc, #404]	; (800c5b4 <mem_trim+0x1f0>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	429a      	cmp	r2, r3
 800c424:	d304      	bcc.n	800c430 <mem_trim+0x6c>
 800c426:	4b64      	ldr	r3, [pc, #400]	; (800c5b8 <mem_trim+0x1f4>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d307      	bcc.n	800c440 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c430:	f00c fefe 	bl	8019230 <sys_arch_protect>
 800c434:	60b8      	str	r0, [r7, #8]
 800c436:	68b8      	ldr	r0, [r7, #8]
 800c438:	f00c ff08 	bl	801924c <sys_arch_unprotect>
    return rmem;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	e0b5      	b.n	800c5ac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	3b08      	subs	r3, #8
 800c444:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c446:	69b8      	ldr	r0, [r7, #24]
 800c448:	f7ff fdea 	bl	800c020 <mem_to_ptr>
 800c44c:	4603      	mov	r3, r0
 800c44e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	881a      	ldrh	r2, [r3, #0]
 800c454:	8afb      	ldrh	r3, [r7, #22]
 800c456:	1ad3      	subs	r3, r2, r3
 800c458:	b29b      	uxth	r3, r3
 800c45a:	3b08      	subs	r3, #8
 800c45c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c45e:	8bfa      	ldrh	r2, [r7, #30]
 800c460:	8abb      	ldrh	r3, [r7, #20]
 800c462:	429a      	cmp	r2, r3
 800c464:	d906      	bls.n	800c474 <mem_trim+0xb0>
 800c466:	4b55      	ldr	r3, [pc, #340]	; (800c5bc <mem_trim+0x1f8>)
 800c468:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c46c:	4956      	ldr	r1, [pc, #344]	; (800c5c8 <mem_trim+0x204>)
 800c46e:	4855      	ldr	r0, [pc, #340]	; (800c5c4 <mem_trim+0x200>)
 800c470:	f00c ff5c 	bl	801932c <iprintf>
  if (newsize > size) {
 800c474:	8bfa      	ldrh	r2, [r7, #30]
 800c476:	8abb      	ldrh	r3, [r7, #20]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d901      	bls.n	800c480 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c47c:	2300      	movs	r3, #0
 800c47e:	e095      	b.n	800c5ac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c480:	8bfa      	ldrh	r2, [r7, #30]
 800c482:	8abb      	ldrh	r3, [r7, #20]
 800c484:	429a      	cmp	r2, r3
 800c486:	d101      	bne.n	800c48c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	e08f      	b.n	800c5ac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c48c:	484f      	ldr	r0, [pc, #316]	; (800c5cc <mem_trim+0x208>)
 800c48e:	f00c fe8d 	bl	80191ac <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	881b      	ldrh	r3, [r3, #0]
 800c496:	4618      	mov	r0, r3
 800c498:	f7ff fdb0 	bl	800bffc <ptr_to_mem>
 800c49c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	791b      	ldrb	r3, [r3, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d13f      	bne.n	800c526 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4ae:	d106      	bne.n	800c4be <mem_trim+0xfa>
 800c4b0:	4b42      	ldr	r3, [pc, #264]	; (800c5bc <mem_trim+0x1f8>)
 800c4b2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c4b6:	4946      	ldr	r1, [pc, #280]	; (800c5d0 <mem_trim+0x20c>)
 800c4b8:	4842      	ldr	r0, [pc, #264]	; (800c5c4 <mem_trim+0x200>)
 800c4ba:	f00c ff37 	bl	801932c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	881b      	ldrh	r3, [r3, #0]
 800c4c2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c4c4:	8afa      	ldrh	r2, [r7, #22]
 800c4c6:	8bfb      	ldrh	r3, [r7, #30]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	3308      	adds	r3, #8
 800c4ce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c4d0:	4b40      	ldr	r3, [pc, #256]	; (800c5d4 <mem_trim+0x210>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d106      	bne.n	800c4e8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c4da:	89fb      	ldrh	r3, [r7, #14]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7ff fd8d 	bl	800bffc <ptr_to_mem>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	4b3b      	ldr	r3, [pc, #236]	; (800c5d4 <mem_trim+0x210>)
 800c4e6:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c4e8:	89fb      	ldrh	r3, [r7, #14]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff fd86 	bl	800bffc <ptr_to_mem>
 800c4f0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	89ba      	ldrh	r2, [r7, #12]
 800c4fc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	8afa      	ldrh	r2, [r7, #22]
 800c502:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	89fa      	ldrh	r2, [r7, #14]
 800c508:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	881b      	ldrh	r3, [r3, #0]
 800c50e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c512:	d047      	beq.n	800c5a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	881b      	ldrh	r3, [r3, #0]
 800c518:	4618      	mov	r0, r3
 800c51a:	f7ff fd6f 	bl	800bffc <ptr_to_mem>
 800c51e:	4602      	mov	r2, r0
 800c520:	89fb      	ldrh	r3, [r7, #14]
 800c522:	8053      	strh	r3, [r2, #2]
 800c524:	e03e      	b.n	800c5a4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c526:	8bfb      	ldrh	r3, [r7, #30]
 800c528:	f103 0214 	add.w	r2, r3, #20
 800c52c:	8abb      	ldrh	r3, [r7, #20]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d838      	bhi.n	800c5a4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c532:	8afa      	ldrh	r2, [r7, #22]
 800c534:	8bfb      	ldrh	r3, [r7, #30]
 800c536:	4413      	add	r3, r2
 800c538:	b29b      	uxth	r3, r3
 800c53a:	3308      	adds	r3, #8
 800c53c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c546:	d106      	bne.n	800c556 <mem_trim+0x192>
 800c548:	4b1c      	ldr	r3, [pc, #112]	; (800c5bc <mem_trim+0x1f8>)
 800c54a:	f240 3216 	movw	r2, #790	; 0x316
 800c54e:	4920      	ldr	r1, [pc, #128]	; (800c5d0 <mem_trim+0x20c>)
 800c550:	481c      	ldr	r0, [pc, #112]	; (800c5c4 <mem_trim+0x200>)
 800c552:	f00c feeb 	bl	801932c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c556:	89fb      	ldrh	r3, [r7, #14]
 800c558:	4618      	mov	r0, r3
 800c55a:	f7ff fd4f 	bl	800bffc <ptr_to_mem>
 800c55e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c560:	4b1c      	ldr	r3, [pc, #112]	; (800c5d4 <mem_trim+0x210>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	429a      	cmp	r2, r3
 800c568:	d202      	bcs.n	800c570 <mem_trim+0x1ac>
      lfree = mem2;
 800c56a:	4a1a      	ldr	r2, [pc, #104]	; (800c5d4 <mem_trim+0x210>)
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	2200      	movs	r2, #0
 800c574:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	881a      	ldrh	r2, [r3, #0]
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	8afa      	ldrh	r2, [r7, #22]
 800c582:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	89fa      	ldrh	r2, [r7, #14]
 800c588:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	881b      	ldrh	r3, [r3, #0]
 800c58e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c592:	d007      	beq.n	800c5a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	881b      	ldrh	r3, [r3, #0]
 800c598:	4618      	mov	r0, r3
 800c59a:	f7ff fd2f 	bl	800bffc <ptr_to_mem>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	89fb      	ldrh	r3, [r7, #14]
 800c5a2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c5a4:	4809      	ldr	r0, [pc, #36]	; (800c5cc <mem_trim+0x208>)
 800c5a6:	f00c fe10 	bl	80191ca <sys_mutex_unlock>
  return rmem;
 800c5aa:	687b      	ldr	r3, [r7, #4]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3720      	adds	r7, #32
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20004208 	.word	0x20004208
 800c5b8:	2000420c 	.word	0x2000420c
 800c5bc:	0801b390 	.word	0x0801b390
 800c5c0:	0801b51c 	.word	0x0801b51c
 800c5c4:	0801b3d8 	.word	0x0801b3d8
 800c5c8:	0801b534 	.word	0x0801b534
 800c5cc:	20004210 	.word	0x20004210
 800c5d0:	0801b554 	.word	0x0801b554
 800c5d4:	20004214 	.word	0x20004214

0800c5d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b088      	sub	sp, #32
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c5e2:	88fb      	ldrh	r3, [r7, #6]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d101      	bne.n	800c5ec <mem_malloc+0x14>
    return NULL;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e0e2      	b.n	800c7b2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c5ec:	88fb      	ldrh	r3, [r7, #6]
 800c5ee:	3303      	adds	r3, #3
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	f023 0303 	bic.w	r3, r3, #3
 800c5f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c5f8:	8bbb      	ldrh	r3, [r7, #28]
 800c5fa:	2b0b      	cmp	r3, #11
 800c5fc:	d801      	bhi.n	800c602 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c5fe:	230c      	movs	r3, #12
 800c600:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c602:	8bbb      	ldrh	r3, [r7, #28]
 800c604:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c608:	d803      	bhi.n	800c612 <mem_malloc+0x3a>
 800c60a:	8bba      	ldrh	r2, [r7, #28]
 800c60c:	88fb      	ldrh	r3, [r7, #6]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d201      	bcs.n	800c616 <mem_malloc+0x3e>
    return NULL;
 800c612:	2300      	movs	r3, #0
 800c614:	e0cd      	b.n	800c7b2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c616:	4869      	ldr	r0, [pc, #420]	; (800c7bc <mem_malloc+0x1e4>)
 800c618:	f00c fdc8 	bl	80191ac <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c61c:	4b68      	ldr	r3, [pc, #416]	; (800c7c0 <mem_malloc+0x1e8>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4618      	mov	r0, r3
 800c622:	f7ff fcfd 	bl	800c020 <mem_to_ptr>
 800c626:	4603      	mov	r3, r0
 800c628:	83fb      	strh	r3, [r7, #30]
 800c62a:	e0b7      	b.n	800c79c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c62c:	8bfb      	ldrh	r3, [r7, #30]
 800c62e:	4618      	mov	r0, r3
 800c630:	f7ff fce4 	bl	800bffc <ptr_to_mem>
 800c634:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	791b      	ldrb	r3, [r3, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f040 80a7 	bne.w	800c78e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	881b      	ldrh	r3, [r3, #0]
 800c644:	461a      	mov	r2, r3
 800c646:	8bfb      	ldrh	r3, [r7, #30]
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	f1a3 0208 	sub.w	r2, r3, #8
 800c64e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c650:	429a      	cmp	r2, r3
 800c652:	f0c0 809c 	bcc.w	800c78e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	461a      	mov	r2, r3
 800c65c:	8bfb      	ldrh	r3, [r7, #30]
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	f1a3 0208 	sub.w	r2, r3, #8
 800c664:	8bbb      	ldrh	r3, [r7, #28]
 800c666:	3314      	adds	r3, #20
 800c668:	429a      	cmp	r2, r3
 800c66a:	d333      	bcc.n	800c6d4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c66c:	8bfa      	ldrh	r2, [r7, #30]
 800c66e:	8bbb      	ldrh	r3, [r7, #28]
 800c670:	4413      	add	r3, r2
 800c672:	b29b      	uxth	r3, r3
 800c674:	3308      	adds	r3, #8
 800c676:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c678:	8a7b      	ldrh	r3, [r7, #18]
 800c67a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c67e:	d106      	bne.n	800c68e <mem_malloc+0xb6>
 800c680:	4b50      	ldr	r3, [pc, #320]	; (800c7c4 <mem_malloc+0x1ec>)
 800c682:	f240 3287 	movw	r2, #903	; 0x387
 800c686:	4950      	ldr	r1, [pc, #320]	; (800c7c8 <mem_malloc+0x1f0>)
 800c688:	4850      	ldr	r0, [pc, #320]	; (800c7cc <mem_malloc+0x1f4>)
 800c68a:	f00c fe4f 	bl	801932c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c68e:	8a7b      	ldrh	r3, [r7, #18]
 800c690:	4618      	mov	r0, r3
 800c692:	f7ff fcb3 	bl	800bffc <ptr_to_mem>
 800c696:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2200      	movs	r2, #0
 800c69c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	881a      	ldrh	r2, [r3, #0]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	8bfa      	ldrh	r2, [r7, #30]
 800c6aa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	8a7a      	ldrh	r2, [r7, #18]
 800c6b0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	881b      	ldrh	r3, [r3, #0]
 800c6bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6c0:	d00b      	beq.n	800c6da <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7ff fc98 	bl	800bffc <ptr_to_mem>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	8a7b      	ldrh	r3, [r7, #18]
 800c6d0:	8053      	strh	r3, [r2, #2]
 800c6d2:	e002      	b.n	800c6da <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c6da:	4b39      	ldr	r3, [pc, #228]	; (800c7c0 <mem_malloc+0x1e8>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d127      	bne.n	800c734 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c6e4:	4b36      	ldr	r3, [pc, #216]	; (800c7c0 <mem_malloc+0x1e8>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c6ea:	e005      	b.n	800c6f8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	881b      	ldrh	r3, [r3, #0]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7ff fc83 	bl	800bffc <ptr_to_mem>
 800c6f6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	791b      	ldrb	r3, [r3, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d004      	beq.n	800c70a <mem_malloc+0x132>
 800c700:	4b33      	ldr	r3, [pc, #204]	; (800c7d0 <mem_malloc+0x1f8>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	69ba      	ldr	r2, [r7, #24]
 800c706:	429a      	cmp	r2, r3
 800c708:	d1f0      	bne.n	800c6ec <mem_malloc+0x114>
          }
          lfree = cur;
 800c70a:	4a2d      	ldr	r2, [pc, #180]	; (800c7c0 <mem_malloc+0x1e8>)
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c710:	4b2b      	ldr	r3, [pc, #172]	; (800c7c0 <mem_malloc+0x1e8>)
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	4b2e      	ldr	r3, [pc, #184]	; (800c7d0 <mem_malloc+0x1f8>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d00b      	beq.n	800c734 <mem_malloc+0x15c>
 800c71c:	4b28      	ldr	r3, [pc, #160]	; (800c7c0 <mem_malloc+0x1e8>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	791b      	ldrb	r3, [r3, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d006      	beq.n	800c734 <mem_malloc+0x15c>
 800c726:	4b27      	ldr	r3, [pc, #156]	; (800c7c4 <mem_malloc+0x1ec>)
 800c728:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c72c:	4929      	ldr	r1, [pc, #164]	; (800c7d4 <mem_malloc+0x1fc>)
 800c72e:	4827      	ldr	r0, [pc, #156]	; (800c7cc <mem_malloc+0x1f4>)
 800c730:	f00c fdfc 	bl	801932c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c734:	4821      	ldr	r0, [pc, #132]	; (800c7bc <mem_malloc+0x1e4>)
 800c736:	f00c fd48 	bl	80191ca <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c73a:	8bba      	ldrh	r2, [r7, #28]
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	4413      	add	r3, r2
 800c740:	3308      	adds	r3, #8
 800c742:	4a23      	ldr	r2, [pc, #140]	; (800c7d0 <mem_malloc+0x1f8>)
 800c744:	6812      	ldr	r2, [r2, #0]
 800c746:	4293      	cmp	r3, r2
 800c748:	d906      	bls.n	800c758 <mem_malloc+0x180>
 800c74a:	4b1e      	ldr	r3, [pc, #120]	; (800c7c4 <mem_malloc+0x1ec>)
 800c74c:	f240 32ba 	movw	r2, #954	; 0x3ba
 800c750:	4921      	ldr	r1, [pc, #132]	; (800c7d8 <mem_malloc+0x200>)
 800c752:	481e      	ldr	r0, [pc, #120]	; (800c7cc <mem_malloc+0x1f4>)
 800c754:	f00c fdea 	bl	801932c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	f003 0303 	and.w	r3, r3, #3
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d006      	beq.n	800c770 <mem_malloc+0x198>
 800c762:	4b18      	ldr	r3, [pc, #96]	; (800c7c4 <mem_malloc+0x1ec>)
 800c764:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800c768:	491c      	ldr	r1, [pc, #112]	; (800c7dc <mem_malloc+0x204>)
 800c76a:	4818      	ldr	r0, [pc, #96]	; (800c7cc <mem_malloc+0x1f4>)
 800c76c:	f00c fdde 	bl	801932c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	f003 0303 	and.w	r3, r3, #3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d006      	beq.n	800c788 <mem_malloc+0x1b0>
 800c77a:	4b12      	ldr	r3, [pc, #72]	; (800c7c4 <mem_malloc+0x1ec>)
 800c77c:	f240 32be 	movw	r2, #958	; 0x3be
 800c780:	4917      	ldr	r1, [pc, #92]	; (800c7e0 <mem_malloc+0x208>)
 800c782:	4812      	ldr	r0, [pc, #72]	; (800c7cc <mem_malloc+0x1f4>)
 800c784:	f00c fdd2 	bl	801932c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	3308      	adds	r3, #8
 800c78c:	e011      	b.n	800c7b2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c78e:	8bfb      	ldrh	r3, [r7, #30]
 800c790:	4618      	mov	r0, r3
 800c792:	f7ff fc33 	bl	800bffc <ptr_to_mem>
 800c796:	4603      	mov	r3, r0
 800c798:	881b      	ldrh	r3, [r3, #0]
 800c79a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c79c:	8bfa      	ldrh	r2, [r7, #30]
 800c79e:	8bbb      	ldrh	r3, [r7, #28]
 800c7a0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	f4ff af41 	bcc.w	800c62c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c7aa:	4804      	ldr	r0, [pc, #16]	; (800c7bc <mem_malloc+0x1e4>)
 800c7ac:	f00c fd0d 	bl	80191ca <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3720      	adds	r7, #32
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20004210 	.word	0x20004210
 800c7c0:	20004214 	.word	0x20004214
 800c7c4:	0801b390 	.word	0x0801b390
 800c7c8:	0801b554 	.word	0x0801b554
 800c7cc:	0801b3d8 	.word	0x0801b3d8
 800c7d0:	2000420c 	.word	0x2000420c
 800c7d4:	0801b568 	.word	0x0801b568
 800c7d8:	0801b584 	.word	0x0801b584
 800c7dc:	0801b5b4 	.word	0x0801b5b4
 800c7e0:	0801b5e4 	.word	0x0801b5e4

0800c7e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	3303      	adds	r3, #3
 800c7fa:	f023 0303 	bic.w	r3, r3, #3
 800c7fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c800:	2300      	movs	r3, #0
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	e011      	b.n	800c82a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	461a      	mov	r2, r3
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	4413      	add	r3, r2
 800c822:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3301      	adds	r3, #1
 800c828:	60fb      	str	r3, [r7, #12]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	885b      	ldrh	r3, [r3, #2]
 800c82e:	461a      	mov	r2, r3
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	4293      	cmp	r3, r2
 800c834:	dbe7      	blt.n	800c806 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c836:	bf00      	nop
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
	...

0800c844 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c84a:	2300      	movs	r3, #0
 800c84c:	80fb      	strh	r3, [r7, #6]
 800c84e:	e009      	b.n	800c864 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c850:	88fb      	ldrh	r3, [r7, #6]
 800c852:	4a08      	ldr	r2, [pc, #32]	; (800c874 <memp_init+0x30>)
 800c854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c858:	4618      	mov	r0, r3
 800c85a:	f7ff ffc3 	bl	800c7e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c85e:	88fb      	ldrh	r3, [r7, #6]
 800c860:	3301      	adds	r3, #1
 800c862:	80fb      	strh	r3, [r7, #6]
 800c864:	88fb      	ldrh	r3, [r7, #6]
 800c866:	2b0c      	cmp	r3, #12
 800c868:	d9f2      	bls.n	800c850 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c86a:	bf00      	nop
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	0801e1d4 	.word	0x0801e1d4

0800c878 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c880:	f00c fcd6 	bl	8019230 <sys_arch_protect>
 800c884:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d015      	beq.n	800c8c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	6812      	ldr	r2, [r2, #0]
 800c89c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	f003 0303 	and.w	r3, r3, #3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d006      	beq.n	800c8b6 <do_memp_malloc_pool+0x3e>
 800c8a8:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <do_memp_malloc_pool+0x58>)
 800c8aa:	f240 1219 	movw	r2, #281	; 0x119
 800c8ae:	4909      	ldr	r1, [pc, #36]	; (800c8d4 <do_memp_malloc_pool+0x5c>)
 800c8b0:	4809      	ldr	r0, [pc, #36]	; (800c8d8 <do_memp_malloc_pool+0x60>)
 800c8b2:	f00c fd3b 	bl	801932c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f00c fcc8 	bl	801924c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	e003      	b.n	800c8c8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f00c fcc3 	bl	801924c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	0801b608 	.word	0x0801b608
 800c8d4:	0801b638 	.word	0x0801b638
 800c8d8:	0801b65c 	.word	0x0801b65c

0800c8dc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c8e6:	79fb      	ldrb	r3, [r7, #7]
 800c8e8:	2b0c      	cmp	r3, #12
 800c8ea:	d908      	bls.n	800c8fe <memp_malloc+0x22>
 800c8ec:	4b0a      	ldr	r3, [pc, #40]	; (800c918 <memp_malloc+0x3c>)
 800c8ee:	f240 1257 	movw	r2, #343	; 0x157
 800c8f2:	490a      	ldr	r1, [pc, #40]	; (800c91c <memp_malloc+0x40>)
 800c8f4:	480a      	ldr	r0, [pc, #40]	; (800c920 <memp_malloc+0x44>)
 800c8f6:	f00c fd19 	bl	801932c <iprintf>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	e008      	b.n	800c910 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c8fe:	79fb      	ldrb	r3, [r7, #7]
 800c900:	4a08      	ldr	r2, [pc, #32]	; (800c924 <memp_malloc+0x48>)
 800c902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c906:	4618      	mov	r0, r3
 800c908:	f7ff ffb6 	bl	800c878 <do_memp_malloc_pool>
 800c90c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c90e:	68fb      	ldr	r3, [r7, #12]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	0801b608 	.word	0x0801b608
 800c91c:	0801b698 	.word	0x0801b698
 800c920:	0801b65c 	.word	0x0801b65c
 800c924:	0801e1d4 	.word	0x0801e1d4

0800c928 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	f003 0303 	and.w	r3, r3, #3
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d006      	beq.n	800c94a <do_memp_free_pool+0x22>
 800c93c:	4b0d      	ldr	r3, [pc, #52]	; (800c974 <do_memp_free_pool+0x4c>)
 800c93e:	f240 126d 	movw	r2, #365	; 0x16d
 800c942:	490d      	ldr	r1, [pc, #52]	; (800c978 <do_memp_free_pool+0x50>)
 800c944:	480d      	ldr	r0, [pc, #52]	; (800c97c <do_memp_free_pool+0x54>)
 800c946:	f00c fcf1 	bl	801932c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c94e:	f00c fc6f 	bl	8019230 <sys_arch_protect>
 800c952:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c966:	68b8      	ldr	r0, [r7, #8]
 800c968:	f00c fc70 	bl	801924c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c96c:	bf00      	nop
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	0801b608 	.word	0x0801b608
 800c978:	0801b6b8 	.word	0x0801b6b8
 800c97c:	0801b65c 	.word	0x0801b65c

0800c980 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	6039      	str	r1, [r7, #0]
 800c98a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c98c:	79fb      	ldrb	r3, [r7, #7]
 800c98e:	2b0c      	cmp	r3, #12
 800c990:	d907      	bls.n	800c9a2 <memp_free+0x22>
 800c992:	4b0c      	ldr	r3, [pc, #48]	; (800c9c4 <memp_free+0x44>)
 800c994:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c998:	490b      	ldr	r1, [pc, #44]	; (800c9c8 <memp_free+0x48>)
 800c99a:	480c      	ldr	r0, [pc, #48]	; (800c9cc <memp_free+0x4c>)
 800c99c:	f00c fcc6 	bl	801932c <iprintf>
 800c9a0:	e00c      	b.n	800c9bc <memp_free+0x3c>

  if (mem == NULL) {
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d008      	beq.n	800c9ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c9a8:	79fb      	ldrb	r3, [r7, #7]
 800c9aa:	4a09      	ldr	r2, [pc, #36]	; (800c9d0 <memp_free+0x50>)
 800c9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff ffb8 	bl	800c928 <do_memp_free_pool>
 800c9b8:	e000      	b.n	800c9bc <memp_free+0x3c>
    return;
 800c9ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	0801b608 	.word	0x0801b608
 800c9c8:	0801b6d8 	.word	0x0801b6d8
 800c9cc:	0801b65c 	.word	0x0801b65c
 800c9d0:	0801e1d4 	.word	0x0801e1d4

0800c9d4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c9d8:	bf00      	nop
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
	...

0800c9e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
 800c9f0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d108      	bne.n	800ca0a <netif_add+0x26>
 800c9f8:	4b5b      	ldr	r3, [pc, #364]	; (800cb68 <netif_add+0x184>)
 800c9fa:	f240 1227 	movw	r2, #295	; 0x127
 800c9fe:	495b      	ldr	r1, [pc, #364]	; (800cb6c <netif_add+0x188>)
 800ca00:	485b      	ldr	r0, [pc, #364]	; (800cb70 <netif_add+0x18c>)
 800ca02:	f00c fc93 	bl	801932c <iprintf>
 800ca06:	2300      	movs	r3, #0
 800ca08:	e0a9      	b.n	800cb5e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d108      	bne.n	800ca22 <netif_add+0x3e>
 800ca10:	4b55      	ldr	r3, [pc, #340]	; (800cb68 <netif_add+0x184>)
 800ca12:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ca16:	4957      	ldr	r1, [pc, #348]	; (800cb74 <netif_add+0x190>)
 800ca18:	4855      	ldr	r0, [pc, #340]	; (800cb70 <netif_add+0x18c>)
 800ca1a:	f00c fc87 	bl	801932c <iprintf>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	e09d      	b.n	800cb5e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ca28:	4b53      	ldr	r3, [pc, #332]	; (800cb78 <netif_add+0x194>)
 800ca2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d101      	bne.n	800ca36 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ca32:	4b51      	ldr	r3, [pc, #324]	; (800cb78 <netif_add+0x194>)
 800ca34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ca3c:	4b4e      	ldr	r3, [pc, #312]	; (800cb78 <netif_add+0x194>)
 800ca3e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2200      	movs	r2, #0
 800ca44:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	4a49      	ldr	r2, [pc, #292]	; (800cb7c <netif_add+0x198>)
 800ca56:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	3324      	adds	r3, #36	; 0x24
 800ca6a:	2204      	movs	r2, #4
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f00c fc53 	bl	801931a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6a3a      	ldr	r2, [r7, #32]
 800ca7e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ca80:	4b3f      	ldr	r3, [pc, #252]	; (800cb80 <netif_add+0x19c>)
 800ca82:	781a      	ldrb	r2, [r3, #0]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca8e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f000 f914 	bl	800ccc4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	4798      	blx	r3
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d001      	beq.n	800caac <netif_add+0xc8>
    return NULL;
 800caa8:	2300      	movs	r3, #0
 800caaa:	e058      	b.n	800cb5e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cab2:	2bff      	cmp	r3, #255	; 0xff
 800cab4:	d103      	bne.n	800cabe <netif_add+0xda>
        netif->num = 0;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2200      	movs	r2, #0
 800caba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cac2:	4b30      	ldr	r3, [pc, #192]	; (800cb84 <netif_add+0x1a0>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	617b      	str	r3, [r7, #20]
 800cac8:	e02b      	b.n	800cb22 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800caca:	697a      	ldr	r2, [r7, #20]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d106      	bne.n	800cae0 <netif_add+0xfc>
 800cad2:	4b25      	ldr	r3, [pc, #148]	; (800cb68 <netif_add+0x184>)
 800cad4:	f240 128b 	movw	r2, #395	; 0x18b
 800cad8:	492b      	ldr	r1, [pc, #172]	; (800cb88 <netif_add+0x1a4>)
 800cada:	4825      	ldr	r0, [pc, #148]	; (800cb70 <netif_add+0x18c>)
 800cadc:	f00c fc26 	bl	801932c <iprintf>
        num_netifs++;
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	3301      	adds	r3, #1
 800cae4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	2bff      	cmp	r3, #255	; 0xff
 800caea:	dd06      	ble.n	800cafa <netif_add+0x116>
 800caec:	4b1e      	ldr	r3, [pc, #120]	; (800cb68 <netif_add+0x184>)
 800caee:	f240 128d 	movw	r2, #397	; 0x18d
 800caf2:	4926      	ldr	r1, [pc, #152]	; (800cb8c <netif_add+0x1a8>)
 800caf4:	481e      	ldr	r0, [pc, #120]	; (800cb70 <netif_add+0x18c>)
 800caf6:	f00c fc19 	bl	801932c <iprintf>
        if (netif2->num == netif->num) {
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d108      	bne.n	800cb1c <netif_add+0x138>
          netif->num++;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb10:	3301      	adds	r3, #1
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800cb1a:	e005      	b.n	800cb28 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	617b      	str	r3, [r7, #20]
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1d0      	bne.n	800caca <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1be      	bne.n	800caac <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb34:	2bfe      	cmp	r3, #254	; 0xfe
 800cb36:	d103      	bne.n	800cb40 <netif_add+0x15c>
    netif_num = 0;
 800cb38:	4b11      	ldr	r3, [pc, #68]	; (800cb80 <netif_add+0x19c>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	701a      	strb	r2, [r3, #0]
 800cb3e:	e006      	b.n	800cb4e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb46:	3301      	adds	r3, #1
 800cb48:	b2da      	uxtb	r2, r3
 800cb4a:	4b0d      	ldr	r3, [pc, #52]	; (800cb80 <netif_add+0x19c>)
 800cb4c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cb4e:	4b0d      	ldr	r3, [pc, #52]	; (800cb84 <netif_add+0x1a0>)
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cb56:	4a0b      	ldr	r2, [pc, #44]	; (800cb84 <netif_add+0x1a0>)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	0801b6f4 	.word	0x0801b6f4
 800cb6c:	0801b788 	.word	0x0801b788
 800cb70:	0801b744 	.word	0x0801b744
 800cb74:	0801b7a4 	.word	0x0801b7a4
 800cb78:	0801e258 	.word	0x0801e258
 800cb7c:	0800cfa7 	.word	0x0800cfa7
 800cb80:	2000424c 	.word	0x2000424c
 800cb84:	2000b124 	.word	0x2000b124
 800cb88:	0801b7c8 	.word	0x0801b7c8
 800cb8c:	0801b7dc 	.word	0x0801b7dc

0800cb90 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f002 fea3 	bl	800f8e8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f007 ffd1 	bl	8014b4c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cbaa:	bf00      	nop
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b086      	sub	sp, #24
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <netif_do_set_ipaddr+0x20>
 800cbc6:	4b1d      	ldr	r3, [pc, #116]	; (800cc3c <netif_do_set_ipaddr+0x88>)
 800cbc8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cbcc:	491c      	ldr	r1, [pc, #112]	; (800cc40 <netif_do_set_ipaddr+0x8c>)
 800cbce:	481d      	ldr	r0, [pc, #116]	; (800cc44 <netif_do_set_ipaddr+0x90>)
 800cbd0:	f00c fbac 	bl	801932c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d106      	bne.n	800cbe8 <netif_do_set_ipaddr+0x34>
 800cbda:	4b18      	ldr	r3, [pc, #96]	; (800cc3c <netif_do_set_ipaddr+0x88>)
 800cbdc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cbe0:	4917      	ldr	r1, [pc, #92]	; (800cc40 <netif_do_set_ipaddr+0x8c>)
 800cbe2:	4818      	ldr	r0, [pc, #96]	; (800cc44 <netif_do_set_ipaddr+0x90>)
 800cbe4:	f00c fba2 	bl	801932c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d01c      	beq.n	800cc30 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	3304      	adds	r3, #4
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cc06:	f107 0314 	add.w	r3, r7, #20
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff ffbf 	bl	800cb90 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <netif_do_set_ipaddr+0x6a>
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	e000      	b.n	800cc20 <netif_do_set_ipaddr+0x6c>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cc24:	2101      	movs	r1, #1
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f000 f8d2 	bl	800cdd0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e000      	b.n	800cc32 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	0801b6f4 	.word	0x0801b6f4
 800cc40:	0801b80c 	.word	0x0801b80c
 800cc44:	0801b744 	.word	0x0801b744

0800cc48 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	3308      	adds	r3, #8
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d00a      	beq.n	800cc78 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <netif_do_set_netmask+0x26>
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	e000      	b.n	800cc70 <netif_do_set_netmask+0x28>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cc74:	2301      	movs	r3, #1
 800cc76:	e000      	b.n	800cc7a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3714      	adds	r7, #20
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cc86:	b480      	push	{r7}
 800cc88:	b085      	sub	sp, #20
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	60f8      	str	r0, [r7, #12]
 800cc8e:	60b9      	str	r1, [r7, #8]
 800cc90:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	330c      	adds	r3, #12
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d00a      	beq.n	800ccb6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d002      	beq.n	800ccac <netif_do_set_gw+0x26>
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	e000      	b.n	800ccae <netif_do_set_gw+0x28>
 800ccac:	2300      	movs	r3, #0
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e000      	b.n	800ccb8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ccb6:	2300      	movs	r3, #0
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3714      	adds	r7, #20
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b088      	sub	sp, #32
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
 800ccd0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d101      	bne.n	800cce4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cce0:	4b1c      	ldr	r3, [pc, #112]	; (800cd54 <netif_set_addr+0x90>)
 800cce2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d101      	bne.n	800ccee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ccea:	4b1a      	ldr	r3, [pc, #104]	; (800cd54 <netif_set_addr+0x90>)
 800ccec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d101      	bne.n	800ccf8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ccf4:	4b17      	ldr	r3, [pc, #92]	; (800cd54 <netif_set_addr+0x90>)
 800ccf6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <netif_set_addr+0x42>
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d101      	bne.n	800cd0a <netif_set_addr+0x46>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e000      	b.n	800cd0c <netif_set_addr+0x48>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d006      	beq.n	800cd22 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cd14:	f107 0310 	add.w	r3, r7, #16
 800cd18:	461a      	mov	r2, r3
 800cd1a:	68b9      	ldr	r1, [r7, #8]
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f7ff ff49 	bl	800cbb4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cd22:	69fa      	ldr	r2, [r7, #28]
 800cd24:	6879      	ldr	r1, [r7, #4]
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f7ff ff8e 	bl	800cc48 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cd2c:	69ba      	ldr	r2, [r7, #24]
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f7ff ffa8 	bl	800cc86 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d106      	bne.n	800cd4a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cd3c:	f107 0310 	add.w	r3, r7, #16
 800cd40:	461a      	mov	r2, r3
 800cd42:	68b9      	ldr	r1, [r7, #8]
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f7ff ff35 	bl	800cbb4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cd4a:	bf00      	nop
 800cd4c:	3720      	adds	r7, #32
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	0801e258 	.word	0x0801e258

0800cd58 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cd60:	4a04      	ldr	r2, [pc, #16]	; (800cd74 <netif_set_default+0x1c>)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cd66:	bf00      	nop
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	2000b128 	.word	0x2000b128

0800cd78 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d107      	bne.n	800cd96 <netif_set_up+0x1e>
 800cd86:	4b0f      	ldr	r3, [pc, #60]	; (800cdc4 <netif_set_up+0x4c>)
 800cd88:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cd8c:	490e      	ldr	r1, [pc, #56]	; (800cdc8 <netif_set_up+0x50>)
 800cd8e:	480f      	ldr	r0, [pc, #60]	; (800cdcc <netif_set_up+0x54>)
 800cd90:	f00c facc 	bl	801932c <iprintf>
 800cd94:	e013      	b.n	800cdbe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd9c:	f003 0301 	and.w	r3, r3, #1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10c      	bne.n	800cdbe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cdaa:	f043 0301 	orr.w	r3, r3, #1
 800cdae:	b2da      	uxtb	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cdb6:	2103      	movs	r1, #3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 f809 	bl	800cdd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	0801b6f4 	.word	0x0801b6f4
 800cdc8:	0801b87c 	.word	0x0801b87c
 800cdcc:	0801b744 	.word	0x0801b744

0800cdd0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d106      	bne.n	800cdf0 <netif_issue_reports+0x20>
 800cde2:	4b18      	ldr	r3, [pc, #96]	; (800ce44 <netif_issue_reports+0x74>)
 800cde4:	f240 326d 	movw	r2, #877	; 0x36d
 800cde8:	4917      	ldr	r1, [pc, #92]	; (800ce48 <netif_issue_reports+0x78>)
 800cdea:	4818      	ldr	r0, [pc, #96]	; (800ce4c <netif_issue_reports+0x7c>)
 800cdec:	f00c fa9e 	bl	801932c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cdf6:	f003 0304 	and.w	r3, r3, #4
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d01e      	beq.n	800ce3c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce04:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d017      	beq.n	800ce3c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ce0c:	78fb      	ldrb	r3, [r7, #3]
 800ce0e:	f003 0301 	and.w	r3, r3, #1
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d013      	beq.n	800ce3e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	3304      	adds	r3, #4
 800ce1a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00e      	beq.n	800ce3e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce26:	f003 0308 	and.w	r3, r3, #8
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d007      	beq.n	800ce3e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	3304      	adds	r3, #4
 800ce32:	4619      	mov	r1, r3
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f00a fc99 	bl	801776c <etharp_request>
 800ce3a:	e000      	b.n	800ce3e <netif_issue_reports+0x6e>
    return;
 800ce3c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	0801b6f4 	.word	0x0801b6f4
 800ce48:	0801b898 	.word	0x0801b898
 800ce4c:	0801b744 	.word	0x0801b744

0800ce50 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d107      	bne.n	800ce6e <netif_set_down+0x1e>
 800ce5e:	4b12      	ldr	r3, [pc, #72]	; (800cea8 <netif_set_down+0x58>)
 800ce60:	f240 329b 	movw	r2, #923	; 0x39b
 800ce64:	4911      	ldr	r1, [pc, #68]	; (800ceac <netif_set_down+0x5c>)
 800ce66:	4812      	ldr	r0, [pc, #72]	; (800ceb0 <netif_set_down+0x60>)
 800ce68:	f00c fa60 	bl	801932c <iprintf>
 800ce6c:	e019      	b.n	800cea2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d012      	beq.n	800cea2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce82:	f023 0301 	bic.w	r3, r3, #1
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce94:	f003 0308 	and.w	r3, r3, #8
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f00a f81f 	bl	8016ee0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	0801b6f4 	.word	0x0801b6f4
 800ceac:	0801b8bc 	.word	0x0801b8bc
 800ceb0:	0801b744 	.word	0x0801b744

0800ceb4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d107      	bne.n	800ced2 <netif_set_link_up+0x1e>
 800cec2:	4b15      	ldr	r3, [pc, #84]	; (800cf18 <netif_set_link_up+0x64>)
 800cec4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cec8:	4914      	ldr	r1, [pc, #80]	; (800cf1c <netif_set_link_up+0x68>)
 800ceca:	4815      	ldr	r0, [pc, #84]	; (800cf20 <netif_set_link_up+0x6c>)
 800cecc:	f00c fa2e 	bl	801932c <iprintf>
 800ced0:	e01e      	b.n	800cf10 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ced8:	f003 0304 	and.w	r3, r3, #4
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d117      	bne.n	800cf10 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cee6:	f043 0304 	orr.w	r3, r3, #4
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f008 fa54 	bl	80153a0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cef8:	2103      	movs	r1, #3
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f7ff ff68 	bl	800cdd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	69db      	ldr	r3, [r3, #28]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d003      	beq.n	800cf10 <netif_set_link_up+0x5c>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	69db      	ldr	r3, [r3, #28]
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	0801b6f4 	.word	0x0801b6f4
 800cf1c:	0801b8dc 	.word	0x0801b8dc
 800cf20:	0801b744 	.word	0x0801b744

0800cf24 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d107      	bne.n	800cf42 <netif_set_link_down+0x1e>
 800cf32:	4b11      	ldr	r3, [pc, #68]	; (800cf78 <netif_set_link_down+0x54>)
 800cf34:	f240 4206 	movw	r2, #1030	; 0x406
 800cf38:	4910      	ldr	r1, [pc, #64]	; (800cf7c <netif_set_link_down+0x58>)
 800cf3a:	4811      	ldr	r0, [pc, #68]	; (800cf80 <netif_set_link_down+0x5c>)
 800cf3c:	f00c f9f6 	bl	801932c <iprintf>
 800cf40:	e017      	b.n	800cf72 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf48:	f003 0304 	and.w	r3, r3, #4
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d010      	beq.n	800cf72 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf56:	f023 0304 	bic.w	r3, r3, #4
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	69db      	ldr	r3, [r3, #28]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d003      	beq.n	800cf72 <netif_set_link_down+0x4e>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	69db      	ldr	r3, [r3, #28]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	0801b6f4 	.word	0x0801b6f4
 800cf7c:	0801b900 	.word	0x0801b900
 800cf80:	0801b744 	.word	0x0801b744

0800cf84 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d002      	beq.n	800cf9a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	61da      	str	r2, [r3, #28]
  }
}
 800cf9a:	bf00      	nop
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cfa6:	b480      	push	{r7}
 800cfa8:	b085      	sub	sp, #20
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	60f8      	str	r0, [r7, #12]
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cfb2:	f06f 030b 	mvn.w	r3, #11
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
	...

0800cfc4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d013      	beq.n	800cffc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cfd4:	4b0d      	ldr	r3, [pc, #52]	; (800d00c <netif_get_by_index+0x48>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	60fb      	str	r3, [r7, #12]
 800cfda:	e00c      	b.n	800cff6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	79fa      	ldrb	r2, [r7, #7]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d101      	bne.n	800cff0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	e006      	b.n	800cffe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	60fb      	str	r3, [r7, #12]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1ef      	bne.n	800cfdc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	2000b124 	.word	0x2000b124

0800d010 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d101      	bne.n	800d022 <netif_find+0x12>
    return NULL;
 800d01e:	2300      	movs	r3, #0
 800d020:	e028      	b.n	800d074 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	3302      	adds	r3, #2
 800d026:	4618      	mov	r0, r3
 800d028:	f00c f920 	bl	801926c <atoi>
 800d02c:	4603      	mov	r3, r0
 800d02e:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 800d030:	4b12      	ldr	r3, [pc, #72]	; (800d07c <netif_find+0x6c>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	60fb      	str	r3, [r7, #12]
 800d036:	e019      	b.n	800d06c <netif_find+0x5c>
    if (num == netif->num &&
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d03e:	7afa      	ldrb	r2, [r7, #11]
 800d040:	429a      	cmp	r2, r3
 800d042:	d110      	bne.n	800d066 <netif_find+0x56>
        name[0] == netif->name[0] &&
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	781a      	ldrb	r2, [r3, #0]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if (num == netif->num &&
 800d04e:	429a      	cmp	r2, r3
 800d050:	d109      	bne.n	800d066 <netif_find+0x56>
        name[1] == netif->name[1]) {
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	3301      	adds	r3, #1
 800d056:	781a      	ldrb	r2, [r3, #0]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
        name[0] == netif->name[0] &&
 800d05e:	429a      	cmp	r2, r3
 800d060:	d101      	bne.n	800d066 <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	e006      	b.n	800d074 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1e2      	bne.n	800d038 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3710      	adds	r7, #16
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	2000b124 	.word	0x2000b124

0800d080 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d086:	f00c f8d3 	bl	8019230 <sys_arch_protect>
 800d08a:	6038      	str	r0, [r7, #0]
 800d08c:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <pbuf_free_ooseq+0x44>)
 800d08e:	2200      	movs	r2, #0
 800d090:	701a      	strb	r2, [r3, #0]
 800d092:	6838      	ldr	r0, [r7, #0]
 800d094:	f00c f8da 	bl	801924c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d098:	4b0b      	ldr	r3, [pc, #44]	; (800d0c8 <pbuf_free_ooseq+0x48>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	607b      	str	r3, [r7, #4]
 800d09e:	e00a      	b.n	800d0b6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d003      	beq.n	800d0b0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f002 fc5b 	bl	800f964 <tcp_free_ooseq>
      return;
 800d0ae:	e005      	b.n	800d0bc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	607b      	str	r3, [r7, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1f1      	bne.n	800d0a0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	2000b12c 	.word	0x2000b12c
 800d0c8:	2000b134 	.word	0x2000b134

0800d0cc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d0d4:	f7ff ffd4 	bl	800d080 <pbuf_free_ooseq>
}
 800d0d8:	bf00      	nop
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d0e6:	f00c f8a3 	bl	8019230 <sys_arch_protect>
 800d0ea:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d0ec:	4b0f      	ldr	r3, [pc, #60]	; (800d12c <pbuf_pool_is_empty+0x4c>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d0f2:	4b0e      	ldr	r3, [pc, #56]	; (800d12c <pbuf_pool_is_empty+0x4c>)
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f00c f8a7 	bl	801924c <sys_arch_unprotect>

  if (!queued) {
 800d0fe:	78fb      	ldrb	r3, [r7, #3]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10f      	bne.n	800d124 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d104:	2100      	movs	r1, #0
 800d106:	480a      	ldr	r0, [pc, #40]	; (800d130 <pbuf_pool_is_empty+0x50>)
 800d108:	f7fe fe92 	bl	800be30 <tcpip_try_callback>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d008      	beq.n	800d124 <pbuf_pool_is_empty+0x44>
 800d112:	f00c f88d 	bl	8019230 <sys_arch_protect>
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	4b04      	ldr	r3, [pc, #16]	; (800d12c <pbuf_pool_is_empty+0x4c>)
 800d11a:	2200      	movs	r2, #0
 800d11c:	701a      	strb	r2, [r3, #0]
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f00c f894 	bl	801924c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d124:	bf00      	nop
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	2000b12c 	.word	0x2000b12c
 800d130:	0800d0cd 	.word	0x0800d0cd

0800d134 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	4611      	mov	r1, r2
 800d140:	461a      	mov	r2, r3
 800d142:	460b      	mov	r3, r1
 800d144:	80fb      	strh	r3, [r7, #6]
 800d146:	4613      	mov	r3, r2
 800d148:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	68ba      	ldr	r2, [r7, #8]
 800d154:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	88fa      	ldrh	r2, [r7, #6]
 800d15a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	88ba      	ldrh	r2, [r7, #4]
 800d160:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d162:	8b3b      	ldrh	r3, [r7, #24]
 800d164:	b2da      	uxtb	r2, r3
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	7f3a      	ldrb	r2, [r7, #28]
 800d16e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2201      	movs	r2, #1
 800d174:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2200      	movs	r2, #0
 800d17a:	73da      	strb	r2, [r3, #15]
}
 800d17c:	bf00      	nop
 800d17e:	3714      	adds	r7, #20
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b08c      	sub	sp, #48	; 0x30
 800d18c:	af02      	add	r7, sp, #8
 800d18e:	4603      	mov	r3, r0
 800d190:	71fb      	strb	r3, [r7, #7]
 800d192:	460b      	mov	r3, r1
 800d194:	80bb      	strh	r3, [r7, #4]
 800d196:	4613      	mov	r3, r2
 800d198:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d19a:	79fb      	ldrb	r3, [r7, #7]
 800d19c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d19e:	887b      	ldrh	r3, [r7, #2]
 800d1a0:	2b41      	cmp	r3, #65	; 0x41
 800d1a2:	d00b      	beq.n	800d1bc <pbuf_alloc+0x34>
 800d1a4:	2b41      	cmp	r3, #65	; 0x41
 800d1a6:	dc02      	bgt.n	800d1ae <pbuf_alloc+0x26>
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d007      	beq.n	800d1bc <pbuf_alloc+0x34>
 800d1ac:	e0c2      	b.n	800d334 <pbuf_alloc+0x1ac>
 800d1ae:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d1b2:	d00b      	beq.n	800d1cc <pbuf_alloc+0x44>
 800d1b4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d1b8:	d070      	beq.n	800d29c <pbuf_alloc+0x114>
 800d1ba:	e0bb      	b.n	800d334 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d1bc:	887a      	ldrh	r2, [r7, #2]
 800d1be:	88bb      	ldrh	r3, [r7, #4]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	f000 f8d2 	bl	800d36c <pbuf_alloc_reference>
 800d1c8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d1ca:	e0bd      	b.n	800d348 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d1d4:	88bb      	ldrh	r3, [r7, #4]
 800d1d6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d1d8:	200c      	movs	r0, #12
 800d1da:	f7ff fb7f 	bl	800c8dc <memp_malloc>
 800d1de:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d109      	bne.n	800d1fa <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800d1e6:	f7ff ff7b 	bl	800d0e0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d002      	beq.n	800d1f6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800d1f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1f2:	f000 faa9 	bl	800d748 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	e0a7      	b.n	800d34a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d1fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1fc:	3303      	adds	r3, #3
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	f023 0303 	bic.w	r3, r3, #3
 800d204:	b29b      	uxth	r3, r3
 800d206:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	8b7a      	ldrh	r2, [r7, #26]
 800d20e:	4293      	cmp	r3, r2
 800d210:	bf28      	it	cs
 800d212:	4613      	movcs	r3, r2
 800d214:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d218:	3310      	adds	r3, #16
 800d21a:	693a      	ldr	r2, [r7, #16]
 800d21c:	4413      	add	r3, r2
 800d21e:	3303      	adds	r3, #3
 800d220:	f023 0303 	bic.w	r3, r3, #3
 800d224:	4618      	mov	r0, r3
 800d226:	89f9      	ldrh	r1, [r7, #14]
 800d228:	8b7a      	ldrh	r2, [r7, #26]
 800d22a:	2300      	movs	r3, #0
 800d22c:	9301      	str	r3, [sp, #4]
 800d22e:	887b      	ldrh	r3, [r7, #2]
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	460b      	mov	r3, r1
 800d234:	4601      	mov	r1, r0
 800d236:	6938      	ldr	r0, [r7, #16]
 800d238:	f7ff ff7c 	bl	800d134 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	f003 0303 	and.w	r3, r3, #3
 800d244:	2b00      	cmp	r3, #0
 800d246:	d006      	beq.n	800d256 <pbuf_alloc+0xce>
 800d248:	4b42      	ldr	r3, [pc, #264]	; (800d354 <pbuf_alloc+0x1cc>)
 800d24a:	f240 1201 	movw	r2, #257	; 0x101
 800d24e:	4942      	ldr	r1, [pc, #264]	; (800d358 <pbuf_alloc+0x1d0>)
 800d250:	4842      	ldr	r0, [pc, #264]	; (800d35c <pbuf_alloc+0x1d4>)
 800d252:	f00c f86b 	bl	801932c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d258:	3303      	adds	r3, #3
 800d25a:	f023 0303 	bic.w	r3, r3, #3
 800d25e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d262:	d106      	bne.n	800d272 <pbuf_alloc+0xea>
 800d264:	4b3b      	ldr	r3, [pc, #236]	; (800d354 <pbuf_alloc+0x1cc>)
 800d266:	f240 1203 	movw	r2, #259	; 0x103
 800d26a:	493d      	ldr	r1, [pc, #244]	; (800d360 <pbuf_alloc+0x1d8>)
 800d26c:	483b      	ldr	r0, [pc, #236]	; (800d35c <pbuf_alloc+0x1d4>)
 800d26e:	f00c f85d 	bl	801932c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d274:	2b00      	cmp	r3, #0
 800d276:	d102      	bne.n	800d27e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	627b      	str	r3, [r7, #36]	; 0x24
 800d27c:	e002      	b.n	800d284 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d27e:	69fb      	ldr	r3, [r7, #28]
 800d280:	693a      	ldr	r2, [r7, #16]
 800d282:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d288:	8b7a      	ldrh	r2, [r7, #26]
 800d28a:	89fb      	ldrh	r3, [r7, #14]
 800d28c:	1ad3      	subs	r3, r2, r3
 800d28e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d290:	2300      	movs	r3, #0
 800d292:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d294:	8b7b      	ldrh	r3, [r7, #26]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d19e      	bne.n	800d1d8 <pbuf_alloc+0x50>
      break;
 800d29a:	e055      	b.n	800d348 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d29c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d29e:	3303      	adds	r3, #3
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	f023 0303 	bic.w	r3, r3, #3
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	88bb      	ldrh	r3, [r7, #4]
 800d2aa:	3303      	adds	r3, #3
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	f023 0303 	bic.w	r3, r3, #3
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	4413      	add	r3, r2
 800d2b6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d2b8:	8b3b      	ldrh	r3, [r7, #24]
 800d2ba:	3310      	adds	r3, #16
 800d2bc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d2be:	8b3a      	ldrh	r2, [r7, #24]
 800d2c0:	88bb      	ldrh	r3, [r7, #4]
 800d2c2:	3303      	adds	r3, #3
 800d2c4:	f023 0303 	bic.w	r3, r3, #3
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d306      	bcc.n	800d2da <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d2cc:	8afa      	ldrh	r2, [r7, #22]
 800d2ce:	88bb      	ldrh	r3, [r7, #4]
 800d2d0:	3303      	adds	r3, #3
 800d2d2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d201      	bcs.n	800d2de <pbuf_alloc+0x156>
        return NULL;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	e035      	b.n	800d34a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d2de:	8afb      	ldrh	r3, [r7, #22]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7ff f979 	bl	800c5d8 <mem_malloc>
 800d2e6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d101      	bne.n	800d2f2 <pbuf_alloc+0x16a>
        return NULL;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	e02b      	b.n	800d34a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d2f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2f4:	3310      	adds	r3, #16
 800d2f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2f8:	4413      	add	r3, r2
 800d2fa:	3303      	adds	r3, #3
 800d2fc:	f023 0303 	bic.w	r3, r3, #3
 800d300:	4618      	mov	r0, r3
 800d302:	88b9      	ldrh	r1, [r7, #4]
 800d304:	88ba      	ldrh	r2, [r7, #4]
 800d306:	2300      	movs	r3, #0
 800d308:	9301      	str	r3, [sp, #4]
 800d30a:	887b      	ldrh	r3, [r7, #2]
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	460b      	mov	r3, r1
 800d310:	4601      	mov	r1, r0
 800d312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d314:	f7ff ff0e 	bl	800d134 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	f003 0303 	and.w	r3, r3, #3
 800d320:	2b00      	cmp	r3, #0
 800d322:	d010      	beq.n	800d346 <pbuf_alloc+0x1be>
 800d324:	4b0b      	ldr	r3, [pc, #44]	; (800d354 <pbuf_alloc+0x1cc>)
 800d326:	f240 1223 	movw	r2, #291	; 0x123
 800d32a:	490e      	ldr	r1, [pc, #56]	; (800d364 <pbuf_alloc+0x1dc>)
 800d32c:	480b      	ldr	r0, [pc, #44]	; (800d35c <pbuf_alloc+0x1d4>)
 800d32e:	f00b fffd 	bl	801932c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d332:	e008      	b.n	800d346 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d334:	4b07      	ldr	r3, [pc, #28]	; (800d354 <pbuf_alloc+0x1cc>)
 800d336:	f240 1227 	movw	r2, #295	; 0x127
 800d33a:	490b      	ldr	r1, [pc, #44]	; (800d368 <pbuf_alloc+0x1e0>)
 800d33c:	4807      	ldr	r0, [pc, #28]	; (800d35c <pbuf_alloc+0x1d4>)
 800d33e:	f00b fff5 	bl	801932c <iprintf>
      return NULL;
 800d342:	2300      	movs	r3, #0
 800d344:	e001      	b.n	800d34a <pbuf_alloc+0x1c2>
      break;
 800d346:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3728      	adds	r7, #40	; 0x28
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	0801b924 	.word	0x0801b924
 800d358:	0801b954 	.word	0x0801b954
 800d35c:	0801b984 	.word	0x0801b984
 800d360:	0801b9ac 	.word	0x0801b9ac
 800d364:	0801b9e0 	.word	0x0801b9e0
 800d368:	0801ba0c 	.word	0x0801ba0c

0800d36c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af02      	add	r7, sp, #8
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	460b      	mov	r3, r1
 800d376:	807b      	strh	r3, [r7, #2]
 800d378:	4613      	mov	r3, r2
 800d37a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d37c:	883b      	ldrh	r3, [r7, #0]
 800d37e:	2b41      	cmp	r3, #65	; 0x41
 800d380:	d009      	beq.n	800d396 <pbuf_alloc_reference+0x2a>
 800d382:	883b      	ldrh	r3, [r7, #0]
 800d384:	2b01      	cmp	r3, #1
 800d386:	d006      	beq.n	800d396 <pbuf_alloc_reference+0x2a>
 800d388:	4b0f      	ldr	r3, [pc, #60]	; (800d3c8 <pbuf_alloc_reference+0x5c>)
 800d38a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d38e:	490f      	ldr	r1, [pc, #60]	; (800d3cc <pbuf_alloc_reference+0x60>)
 800d390:	480f      	ldr	r0, [pc, #60]	; (800d3d0 <pbuf_alloc_reference+0x64>)
 800d392:	f00b ffcb 	bl	801932c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d396:	200b      	movs	r0, #11
 800d398:	f7ff faa0 	bl	800c8dc <memp_malloc>
 800d39c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	e00b      	b.n	800d3c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d3a8:	8879      	ldrh	r1, [r7, #2]
 800d3aa:	887a      	ldrh	r2, [r7, #2]
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	9301      	str	r3, [sp, #4]
 800d3b0:	883b      	ldrh	r3, [r7, #0]
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	6879      	ldr	r1, [r7, #4]
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f7ff febb 	bl	800d134 <pbuf_init_alloced_pbuf>
  return p;
 800d3be:	68fb      	ldr	r3, [r7, #12]
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	0801b924 	.word	0x0801b924
 800d3cc:	0801ba28 	.word	0x0801ba28
 800d3d0:	0801b984 	.word	0x0801b984

0800d3d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b088      	sub	sp, #32
 800d3d8:	af02      	add	r7, sp, #8
 800d3da:	607b      	str	r3, [r7, #4]
 800d3dc:	4603      	mov	r3, r0
 800d3de:	73fb      	strb	r3, [r7, #15]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	81bb      	strh	r3, [r7, #12]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d3e8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d3ec:	8a7b      	ldrh	r3, [r7, #18]
 800d3ee:	3303      	adds	r3, #3
 800d3f0:	f023 0203 	bic.w	r2, r3, #3
 800d3f4:	89bb      	ldrh	r3, [r7, #12]
 800d3f6:	441a      	add	r2, r3
 800d3f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d901      	bls.n	800d402 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d3fe:	2300      	movs	r3, #0
 800d400:	e018      	b.n	800d434 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d402:	6a3b      	ldr	r3, [r7, #32]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d007      	beq.n	800d418 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d408:	8a7b      	ldrh	r3, [r7, #18]
 800d40a:	3303      	adds	r3, #3
 800d40c:	f023 0303 	bic.w	r3, r3, #3
 800d410:	6a3a      	ldr	r2, [r7, #32]
 800d412:	4413      	add	r3, r2
 800d414:	617b      	str	r3, [r7, #20]
 800d416:	e001      	b.n	800d41c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d418:	2300      	movs	r3, #0
 800d41a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	89b9      	ldrh	r1, [r7, #12]
 800d420:	89ba      	ldrh	r2, [r7, #12]
 800d422:	2302      	movs	r3, #2
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	897b      	ldrh	r3, [r7, #10]
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	460b      	mov	r3, r1
 800d42c:	6979      	ldr	r1, [r7, #20]
 800d42e:	f7ff fe81 	bl	800d134 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d432:	687b      	ldr	r3, [r7, #4]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3718      	adds	r7, #24
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	460b      	mov	r3, r1
 800d446:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d106      	bne.n	800d45c <pbuf_realloc+0x20>
 800d44e:	4b3a      	ldr	r3, [pc, #232]	; (800d538 <pbuf_realloc+0xfc>)
 800d450:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d454:	4939      	ldr	r1, [pc, #228]	; (800d53c <pbuf_realloc+0x100>)
 800d456:	483a      	ldr	r0, [pc, #232]	; (800d540 <pbuf_realloc+0x104>)
 800d458:	f00b ff68 	bl	801932c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	891b      	ldrh	r3, [r3, #8]
 800d460:	887a      	ldrh	r2, [r7, #2]
 800d462:	429a      	cmp	r2, r3
 800d464:	d264      	bcs.n	800d530 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	891a      	ldrh	r2, [r3, #8]
 800d46a:	887b      	ldrh	r3, [r7, #2]
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d470:	887b      	ldrh	r3, [r7, #2]
 800d472:	817b      	strh	r3, [r7, #10]
  q = p;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d478:	e018      	b.n	800d4ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	895b      	ldrh	r3, [r3, #10]
 800d47e:	897a      	ldrh	r2, [r7, #10]
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	891a      	ldrh	r2, [r3, #8]
 800d488:	893b      	ldrh	r3, [r7, #8]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d106      	bne.n	800d4ac <pbuf_realloc+0x70>
 800d49e:	4b26      	ldr	r3, [pc, #152]	; (800d538 <pbuf_realloc+0xfc>)
 800d4a0:	f240 12af 	movw	r2, #431	; 0x1af
 800d4a4:	4927      	ldr	r1, [pc, #156]	; (800d544 <pbuf_realloc+0x108>)
 800d4a6:	4826      	ldr	r0, [pc, #152]	; (800d540 <pbuf_realloc+0x104>)
 800d4a8:	f00b ff40 	bl	801932c <iprintf>
  while (rem_len > q->len) {
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	895b      	ldrh	r3, [r3, #10]
 800d4b0:	897a      	ldrh	r2, [r7, #10]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d8e1      	bhi.n	800d47a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	7b1b      	ldrb	r3, [r3, #12]
 800d4ba:	f003 030f 	and.w	r3, r3, #15
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d122      	bne.n	800d508 <pbuf_realloc+0xcc>
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	895b      	ldrh	r3, [r3, #10]
 800d4c6:	897a      	ldrh	r2, [r7, #10]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d01d      	beq.n	800d508 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	7b5b      	ldrb	r3, [r3, #13]
 800d4d0:	f003 0302 	and.w	r3, r3, #2
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d117      	bne.n	800d508 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	897b      	ldrh	r3, [r7, #10]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f7fe ff69 	bl	800c3c4 <mem_trim>
 800d4f2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d106      	bne.n	800d508 <pbuf_realloc+0xcc>
 800d4fa:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <pbuf_realloc+0xfc>)
 800d4fc:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d500:	4911      	ldr	r1, [pc, #68]	; (800d548 <pbuf_realloc+0x10c>)
 800d502:	480f      	ldr	r0, [pc, #60]	; (800d540 <pbuf_realloc+0x104>)
 800d504:	f00b ff12 	bl	801932c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	897a      	ldrh	r2, [r7, #10]
 800d50c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	895a      	ldrh	r2, [r3, #10]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d004      	beq.n	800d528 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4618      	mov	r0, r3
 800d524:	f000 f910 	bl	800d748 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	601a      	str	r2, [r3, #0]
 800d52e:	e000      	b.n	800d532 <pbuf_realloc+0xf6>
    return;
 800d530:	bf00      	nop

}
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	0801b924 	.word	0x0801b924
 800d53c:	0801ba3c 	.word	0x0801ba3c
 800d540:	0801b984 	.word	0x0801b984
 800d544:	0801ba54 	.word	0x0801ba54
 800d548:	0801ba6c 	.word	0x0801ba6c

0800d54c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	4613      	mov	r3, r2
 800d558:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d106      	bne.n	800d56e <pbuf_add_header_impl+0x22>
 800d560:	4b2b      	ldr	r3, [pc, #172]	; (800d610 <pbuf_add_header_impl+0xc4>)
 800d562:	f240 12df 	movw	r2, #479	; 0x1df
 800d566:	492b      	ldr	r1, [pc, #172]	; (800d614 <pbuf_add_header_impl+0xc8>)
 800d568:	482b      	ldr	r0, [pc, #172]	; (800d618 <pbuf_add_header_impl+0xcc>)
 800d56a:	f00b fedf 	bl	801932c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d003      	beq.n	800d57c <pbuf_add_header_impl+0x30>
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d57a:	d301      	bcc.n	800d580 <pbuf_add_header_impl+0x34>
    return 1;
 800d57c:	2301      	movs	r3, #1
 800d57e:	e043      	b.n	800d608 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <pbuf_add_header_impl+0x3e>
    return 0;
 800d586:	2300      	movs	r3, #0
 800d588:	e03e      	b.n	800d608 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	891a      	ldrh	r2, [r3, #8]
 800d592:	8a7b      	ldrh	r3, [r7, #18]
 800d594:	4413      	add	r3, r2
 800d596:	b29b      	uxth	r3, r3
 800d598:	8a7a      	ldrh	r2, [r7, #18]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d901      	bls.n	800d5a2 <pbuf_add_header_impl+0x56>
    return 1;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e032      	b.n	800d608 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	7b1b      	ldrb	r3, [r3, #12]
 800d5a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d5a8:	8a3b      	ldrh	r3, [r7, #16]
 800d5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00c      	beq.n	800d5cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	685a      	ldr	r2, [r3, #4]
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	425b      	negs	r3, r3
 800d5ba:	4413      	add	r3, r2
 800d5bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3310      	adds	r3, #16
 800d5c2:	697a      	ldr	r2, [r7, #20]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d20d      	bcs.n	800d5e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e01d      	b.n	800d608 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d5cc:	79fb      	ldrb	r3, [r7, #7]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d006      	beq.n	800d5e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	685a      	ldr	r2, [r3, #4]
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	425b      	negs	r3, r3
 800d5da:	4413      	add	r3, r2
 800d5dc:	617b      	str	r3, [r7, #20]
 800d5de:	e001      	b.n	800d5e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e011      	b.n	800d608 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	697a      	ldr	r2, [r7, #20]
 800d5e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	895a      	ldrh	r2, [r3, #10]
 800d5ee:	8a7b      	ldrh	r3, [r7, #18]
 800d5f0:	4413      	add	r3, r2
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	891a      	ldrh	r2, [r3, #8]
 800d5fc:	8a7b      	ldrh	r3, [r7, #18]
 800d5fe:	4413      	add	r3, r2
 800d600:	b29a      	uxth	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	811a      	strh	r2, [r3, #8]


  return 0;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3718      	adds	r7, #24
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	0801b924 	.word	0x0801b924
 800d614:	0801ba88 	.word	0x0801ba88
 800d618:	0801b984 	.word	0x0801b984

0800d61c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d626:	2200      	movs	r2, #0
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7ff ff8e 	bl	800d54c <pbuf_add_header_impl>
 800d630:	4603      	mov	r3, r0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d106      	bne.n	800d65a <pbuf_remove_header+0x1e>
 800d64c:	4b20      	ldr	r3, [pc, #128]	; (800d6d0 <pbuf_remove_header+0x94>)
 800d64e:	f240 224b 	movw	r2, #587	; 0x24b
 800d652:	4920      	ldr	r1, [pc, #128]	; (800d6d4 <pbuf_remove_header+0x98>)
 800d654:	4820      	ldr	r0, [pc, #128]	; (800d6d8 <pbuf_remove_header+0x9c>)
 800d656:	f00b fe69 	bl	801932c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d003      	beq.n	800d668 <pbuf_remove_header+0x2c>
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d666:	d301      	bcc.n	800d66c <pbuf_remove_header+0x30>
    return 1;
 800d668:	2301      	movs	r3, #1
 800d66a:	e02c      	b.n	800d6c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <pbuf_remove_header+0x3a>
    return 0;
 800d672:	2300      	movs	r3, #0
 800d674:	e027      	b.n	800d6c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	895b      	ldrh	r3, [r3, #10]
 800d67e:	89fa      	ldrh	r2, [r7, #14]
 800d680:	429a      	cmp	r2, r3
 800d682:	d908      	bls.n	800d696 <pbuf_remove_header+0x5a>
 800d684:	4b12      	ldr	r3, [pc, #72]	; (800d6d0 <pbuf_remove_header+0x94>)
 800d686:	f240 2255 	movw	r2, #597	; 0x255
 800d68a:	4914      	ldr	r1, [pc, #80]	; (800d6dc <pbuf_remove_header+0xa0>)
 800d68c:	4812      	ldr	r0, [pc, #72]	; (800d6d8 <pbuf_remove_header+0x9c>)
 800d68e:	f00b fe4d 	bl	801932c <iprintf>
 800d692:	2301      	movs	r3, #1
 800d694:	e017      	b.n	800d6c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	685a      	ldr	r2, [r3, #4]
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	441a      	add	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	895a      	ldrh	r2, [r3, #10]
 800d6ac:	89fb      	ldrh	r3, [r7, #14]
 800d6ae:	1ad3      	subs	r3, r2, r3
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	891a      	ldrh	r2, [r3, #8]
 800d6ba:	89fb      	ldrh	r3, [r7, #14]
 800d6bc:	1ad3      	subs	r3, r2, r3
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	0801b924 	.word	0x0801b924
 800d6d4:	0801ba88 	.word	0x0801ba88
 800d6d8:	0801b984 	.word	0x0801b984
 800d6dc:	0801ba94 	.word	0x0801ba94

0800d6e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	807b      	strh	r3, [r7, #2]
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d6f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	da08      	bge.n	800d70a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d6f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6fc:	425b      	negs	r3, r3
 800d6fe:	4619      	mov	r1, r3
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7ff ff9b 	bl	800d63c <pbuf_remove_header>
 800d706:	4603      	mov	r3, r0
 800d708:	e007      	b.n	800d71a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d70a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d70e:	787a      	ldrb	r2, [r7, #1]
 800d710:	4619      	mov	r1, r3
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f7ff ff1a 	bl	800d54c <pbuf_add_header_impl>
 800d718:	4603      	mov	r3, r0
  }
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b082      	sub	sp, #8
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	460b      	mov	r3, r1
 800d72c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d72e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d732:	2201      	movs	r2, #1
 800d734:	4619      	mov	r1, r3
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7ff ffd2 	bl	800d6e0 <pbuf_header_impl>
 800d73c:	4603      	mov	r3, r0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
	...

0800d748 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10b      	bne.n	800d76e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d106      	bne.n	800d76a <pbuf_free+0x22>
 800d75c:	4b3b      	ldr	r3, [pc, #236]	; (800d84c <pbuf_free+0x104>)
 800d75e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d762:	493b      	ldr	r1, [pc, #236]	; (800d850 <pbuf_free+0x108>)
 800d764:	483b      	ldr	r0, [pc, #236]	; (800d854 <pbuf_free+0x10c>)
 800d766:	f00b fde1 	bl	801932c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	e069      	b.n	800d842 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d772:	e062      	b.n	800d83a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d774:	f00b fd5c 	bl	8019230 <sys_arch_protect>
 800d778:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	7b9b      	ldrb	r3, [r3, #14]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d106      	bne.n	800d790 <pbuf_free+0x48>
 800d782:	4b32      	ldr	r3, [pc, #200]	; (800d84c <pbuf_free+0x104>)
 800d784:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d788:	4933      	ldr	r1, [pc, #204]	; (800d858 <pbuf_free+0x110>)
 800d78a:	4832      	ldr	r0, [pc, #200]	; (800d854 <pbuf_free+0x10c>)
 800d78c:	f00b fdce 	bl	801932c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	7b9b      	ldrb	r3, [r3, #14]
 800d794:	3b01      	subs	r3, #1
 800d796:	b2da      	uxtb	r2, r3
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	739a      	strb	r2, [r3, #14]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	7b9b      	ldrb	r3, [r3, #14]
 800d7a0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d7a2:	69b8      	ldr	r0, [r7, #24]
 800d7a4:	f00b fd52 	bl	801924c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d7a8:	7dfb      	ldrb	r3, [r7, #23]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d143      	bne.n	800d836 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	7b1b      	ldrb	r3, [r3, #12]
 800d7b8:	f003 030f 	and.w	r3, r3, #15
 800d7bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	7b5b      	ldrb	r3, [r3, #13]
 800d7c2:	f003 0302 	and.w	r3, r3, #2
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d011      	beq.n	800d7ee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	691b      	ldr	r3, [r3, #16]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d106      	bne.n	800d7e4 <pbuf_free+0x9c>
 800d7d6:	4b1d      	ldr	r3, [pc, #116]	; (800d84c <pbuf_free+0x104>)
 800d7d8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d7dc:	491f      	ldr	r1, [pc, #124]	; (800d85c <pbuf_free+0x114>)
 800d7de:	481d      	ldr	r0, [pc, #116]	; (800d854 <pbuf_free+0x10c>)
 800d7e0:	f00b fda4 	bl	801932c <iprintf>
        pc->custom_free_function(p);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	4798      	blx	r3
 800d7ec:	e01d      	b.n	800d82a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d104      	bne.n	800d7fe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	200c      	movs	r0, #12
 800d7f8:	f7ff f8c2 	bl	800c980 <memp_free>
 800d7fc:	e015      	b.n	800d82a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d7fe:	7bfb      	ldrb	r3, [r7, #15]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d104      	bne.n	800d80e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d804:	6879      	ldr	r1, [r7, #4]
 800d806:	200b      	movs	r0, #11
 800d808:	f7ff f8ba 	bl	800c980 <memp_free>
 800d80c:	e00d      	b.n	800d82a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d80e:	7bfb      	ldrb	r3, [r7, #15]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d103      	bne.n	800d81c <pbuf_free+0xd4>
          mem_free(p);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7fe fd45 	bl	800c2a4 <mem_free>
 800d81a:	e006      	b.n	800d82a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d81c:	4b0b      	ldr	r3, [pc, #44]	; (800d84c <pbuf_free+0x104>)
 800d81e:	f240 320f 	movw	r2, #783	; 0x30f
 800d822:	490f      	ldr	r1, [pc, #60]	; (800d860 <pbuf_free+0x118>)
 800d824:	480b      	ldr	r0, [pc, #44]	; (800d854 <pbuf_free+0x10c>)
 800d826:	f00b fd81 	bl	801932c <iprintf>
        }
      }
      count++;
 800d82a:	7ffb      	ldrb	r3, [r7, #31]
 800d82c:	3301      	adds	r3, #1
 800d82e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	607b      	str	r3, [r7, #4]
 800d834:	e001      	b.n	800d83a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d836:	2300      	movs	r3, #0
 800d838:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d199      	bne.n	800d774 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d840:	7ffb      	ldrb	r3, [r7, #31]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3720      	adds	r7, #32
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	0801b924 	.word	0x0801b924
 800d850:	0801ba88 	.word	0x0801ba88
 800d854:	0801b984 	.word	0x0801b984
 800d858:	0801bab4 	.word	0x0801bab4
 800d85c:	0801bacc 	.word	0x0801bacc
 800d860:	0801baf0 	.word	0x0801baf0

0800d864 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d86c:	2300      	movs	r3, #0
 800d86e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d870:	e005      	b.n	800d87e <pbuf_clen+0x1a>
    ++len;
 800d872:	89fb      	ldrh	r3, [r7, #14]
 800d874:	3301      	adds	r3, #1
 800d876:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1f6      	bne.n	800d872 <pbuf_clen+0xe>
  }
  return len;
 800d884:	89fb      	ldrh	r3, [r7, #14]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
	...

0800d894 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d016      	beq.n	800d8d0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d8a2:	f00b fcc5 	bl	8019230 <sys_arch_protect>
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7b9b      	ldrb	r3, [r3, #14]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	739a      	strb	r2, [r3, #14]
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f00b fcc9 	bl	801924c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	7b9b      	ldrb	r3, [r3, #14]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d106      	bne.n	800d8d0 <pbuf_ref+0x3c>
 800d8c2:	4b05      	ldr	r3, [pc, #20]	; (800d8d8 <pbuf_ref+0x44>)
 800d8c4:	f240 3242 	movw	r2, #834	; 0x342
 800d8c8:	4904      	ldr	r1, [pc, #16]	; (800d8dc <pbuf_ref+0x48>)
 800d8ca:	4805      	ldr	r0, [pc, #20]	; (800d8e0 <pbuf_ref+0x4c>)
 800d8cc:	f00b fd2e 	bl	801932c <iprintf>
  }
}
 800d8d0:	bf00      	nop
 800d8d2:	3710      	adds	r7, #16
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	0801b924 	.word	0x0801b924
 800d8dc:	0801bb04 	.word	0x0801bb04
 800d8e0:	0801b984 	.word	0x0801b984

0800d8e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <pbuf_cat+0x16>
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d107      	bne.n	800d90a <pbuf_cat+0x26>
 800d8fa:	4b20      	ldr	r3, [pc, #128]	; (800d97c <pbuf_cat+0x98>)
 800d8fc:	f240 325a 	movw	r2, #858	; 0x35a
 800d900:	491f      	ldr	r1, [pc, #124]	; (800d980 <pbuf_cat+0x9c>)
 800d902:	4820      	ldr	r0, [pc, #128]	; (800d984 <pbuf_cat+0xa0>)
 800d904:	f00b fd12 	bl	801932c <iprintf>
 800d908:	e034      	b.n	800d974 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	60fb      	str	r3, [r7, #12]
 800d90e:	e00a      	b.n	800d926 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	891a      	ldrh	r2, [r3, #8]
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	891b      	ldrh	r3, [r3, #8]
 800d918:	4413      	add	r3, r2
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	60fb      	str	r3, [r7, #12]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1f0      	bne.n	800d910 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	891a      	ldrh	r2, [r3, #8]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	895b      	ldrh	r3, [r3, #10]
 800d936:	429a      	cmp	r2, r3
 800d938:	d006      	beq.n	800d948 <pbuf_cat+0x64>
 800d93a:	4b10      	ldr	r3, [pc, #64]	; (800d97c <pbuf_cat+0x98>)
 800d93c:	f240 3262 	movw	r2, #866	; 0x362
 800d940:	4911      	ldr	r1, [pc, #68]	; (800d988 <pbuf_cat+0xa4>)
 800d942:	4810      	ldr	r0, [pc, #64]	; (800d984 <pbuf_cat+0xa0>)
 800d944:	f00b fcf2 	bl	801932c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d006      	beq.n	800d95e <pbuf_cat+0x7a>
 800d950:	4b0a      	ldr	r3, [pc, #40]	; (800d97c <pbuf_cat+0x98>)
 800d952:	f240 3263 	movw	r2, #867	; 0x363
 800d956:	490d      	ldr	r1, [pc, #52]	; (800d98c <pbuf_cat+0xa8>)
 800d958:	480a      	ldr	r0, [pc, #40]	; (800d984 <pbuf_cat+0xa0>)
 800d95a:	f00b fce7 	bl	801932c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	891a      	ldrh	r2, [r3, #8]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	891b      	ldrh	r3, [r3, #8]
 800d966:	4413      	add	r3, r2
 800d968:	b29a      	uxth	r2, r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	683a      	ldr	r2, [r7, #0]
 800d972:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	0801b924 	.word	0x0801b924
 800d980:	0801bb18 	.word	0x0801bb18
 800d984:	0801b984 	.word	0x0801b984
 800d988:	0801bb50 	.word	0x0801bb50
 800d98c:	0801bb80 	.word	0x0801bb80

0800d990 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d99a:	6839      	ldr	r1, [r7, #0]
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff ffa1 	bl	800d8e4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d9a2:	6838      	ldr	r0, [r7, #0]
 800d9a4:	f7ff ff76 	bl	800d894 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	617b      	str	r3, [r7, #20]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d008      	beq.n	800d9da <pbuf_copy+0x2a>
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d005      	beq.n	800d9da <pbuf_copy+0x2a>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	891a      	ldrh	r2, [r3, #8]
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	891b      	ldrh	r3, [r3, #8]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d209      	bcs.n	800d9ee <pbuf_copy+0x3e>
 800d9da:	4b57      	ldr	r3, [pc, #348]	; (800db38 <pbuf_copy+0x188>)
 800d9dc:	f240 32ca 	movw	r2, #970	; 0x3ca
 800d9e0:	4956      	ldr	r1, [pc, #344]	; (800db3c <pbuf_copy+0x18c>)
 800d9e2:	4857      	ldr	r0, [pc, #348]	; (800db40 <pbuf_copy+0x190>)
 800d9e4:	f00b fca2 	bl	801932c <iprintf>
 800d9e8:	f06f 030f 	mvn.w	r3, #15
 800d9ec:	e09f      	b.n	800db2e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	895b      	ldrh	r3, [r3, #10]
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	1ad2      	subs	r2, r2, r3
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	895b      	ldrh	r3, [r3, #10]
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	1acb      	subs	r3, r1, r3
 800da02:	429a      	cmp	r2, r3
 800da04:	d306      	bcc.n	800da14 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	895b      	ldrh	r3, [r3, #10]
 800da0a:	461a      	mov	r2, r3
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	1ad3      	subs	r3, r2, r3
 800da10:	60fb      	str	r3, [r7, #12]
 800da12:	e005      	b.n	800da20 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	895b      	ldrh	r3, [r3, #10]
 800da18:	461a      	mov	r2, r3
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685a      	ldr	r2, [r3, #4]
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	18d0      	adds	r0, r2, r3
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	685a      	ldr	r2, [r3, #4]
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	4413      	add	r3, r2
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	4619      	mov	r1, r3
 800da34:	f00b fc66 	bl	8019304 <memcpy>
    offset_to += len;
 800da38:	697a      	ldr	r2, [r7, #20]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	4413      	add	r3, r2
 800da3e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800da40:	693a      	ldr	r2, [r7, #16]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	4413      	add	r3, r2
 800da46:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	895b      	ldrh	r3, [r3, #10]
 800da4c:	461a      	mov	r2, r3
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	4293      	cmp	r3, r2
 800da52:	d906      	bls.n	800da62 <pbuf_copy+0xb2>
 800da54:	4b38      	ldr	r3, [pc, #224]	; (800db38 <pbuf_copy+0x188>)
 800da56:	f240 32d9 	movw	r2, #985	; 0x3d9
 800da5a:	493a      	ldr	r1, [pc, #232]	; (800db44 <pbuf_copy+0x194>)
 800da5c:	4838      	ldr	r0, [pc, #224]	; (800db40 <pbuf_copy+0x190>)
 800da5e:	f00b fc65 	bl	801932c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	895b      	ldrh	r3, [r3, #10]
 800da66:	461a      	mov	r2, r3
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d906      	bls.n	800da7c <pbuf_copy+0xcc>
 800da6e:	4b32      	ldr	r3, [pc, #200]	; (800db38 <pbuf_copy+0x188>)
 800da70:	f240 32da 	movw	r2, #986	; 0x3da
 800da74:	4934      	ldr	r1, [pc, #208]	; (800db48 <pbuf_copy+0x198>)
 800da76:	4832      	ldr	r0, [pc, #200]	; (800db40 <pbuf_copy+0x190>)
 800da78:	f00b fc58 	bl	801932c <iprintf>
    if (offset_from >= p_from->len) {
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	895b      	ldrh	r3, [r3, #10]
 800da80:	461a      	mov	r2, r3
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	4293      	cmp	r3, r2
 800da86:	d304      	bcc.n	800da92 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800da88:	2300      	movs	r3, #0
 800da8a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	895b      	ldrh	r3, [r3, #10]
 800da96:	461a      	mov	r2, r3
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d114      	bne.n	800dac8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800da9e:	2300      	movs	r3, #0
 800daa0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10c      	bne.n	800dac8 <pbuf_copy+0x118>
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d009      	beq.n	800dac8 <pbuf_copy+0x118>
 800dab4:	4b20      	ldr	r3, [pc, #128]	; (800db38 <pbuf_copy+0x188>)
 800dab6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800daba:	4924      	ldr	r1, [pc, #144]	; (800db4c <pbuf_copy+0x19c>)
 800dabc:	4820      	ldr	r0, [pc, #128]	; (800db40 <pbuf_copy+0x190>)
 800dabe:	f00b fc35 	bl	801932c <iprintf>
 800dac2:	f06f 030f 	mvn.w	r3, #15
 800dac6:	e032      	b.n	800db2e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d013      	beq.n	800daf6 <pbuf_copy+0x146>
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	895a      	ldrh	r2, [r3, #10]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	891b      	ldrh	r3, [r3, #8]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d10d      	bne.n	800daf6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d009      	beq.n	800daf6 <pbuf_copy+0x146>
 800dae2:	4b15      	ldr	r3, [pc, #84]	; (800db38 <pbuf_copy+0x188>)
 800dae4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800dae8:	4919      	ldr	r1, [pc, #100]	; (800db50 <pbuf_copy+0x1a0>)
 800daea:	4815      	ldr	r0, [pc, #84]	; (800db40 <pbuf_copy+0x190>)
 800daec:	f00b fc1e 	bl	801932c <iprintf>
 800daf0:	f06f 0305 	mvn.w	r3, #5
 800daf4:	e01b      	b.n	800db2e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d013      	beq.n	800db24 <pbuf_copy+0x174>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	895a      	ldrh	r2, [r3, #10]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	891b      	ldrh	r3, [r3, #8]
 800db04:	429a      	cmp	r2, r3
 800db06:	d10d      	bne.n	800db24 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d009      	beq.n	800db24 <pbuf_copy+0x174>
 800db10:	4b09      	ldr	r3, [pc, #36]	; (800db38 <pbuf_copy+0x188>)
 800db12:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800db16:	490e      	ldr	r1, [pc, #56]	; (800db50 <pbuf_copy+0x1a0>)
 800db18:	4809      	ldr	r0, [pc, #36]	; (800db40 <pbuf_copy+0x190>)
 800db1a:	f00b fc07 	bl	801932c <iprintf>
 800db1e:	f06f 0305 	mvn.w	r3, #5
 800db22:	e004      	b.n	800db2e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	f47f af61 	bne.w	800d9ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3718      	adds	r7, #24
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	0801b924 	.word	0x0801b924
 800db3c:	0801bbcc 	.word	0x0801bbcc
 800db40:	0801b984 	.word	0x0801b984
 800db44:	0801bbfc 	.word	0x0801bbfc
 800db48:	0801bc14 	.word	0x0801bc14
 800db4c:	0801bc30 	.word	0x0801bc30
 800db50:	0801bc40 	.word	0x0801bc40

0800db54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	4611      	mov	r1, r2
 800db60:	461a      	mov	r2, r3
 800db62:	460b      	mov	r3, r1
 800db64:	80fb      	strh	r3, [r7, #6]
 800db66:	4613      	mov	r3, r2
 800db68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800db6e:	2300      	movs	r3, #0
 800db70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d108      	bne.n	800db8a <pbuf_copy_partial+0x36>
 800db78:	4b2b      	ldr	r3, [pc, #172]	; (800dc28 <pbuf_copy_partial+0xd4>)
 800db7a:	f240 420a 	movw	r2, #1034	; 0x40a
 800db7e:	492b      	ldr	r1, [pc, #172]	; (800dc2c <pbuf_copy_partial+0xd8>)
 800db80:	482b      	ldr	r0, [pc, #172]	; (800dc30 <pbuf_copy_partial+0xdc>)
 800db82:	f00b fbd3 	bl	801932c <iprintf>
 800db86:	2300      	movs	r3, #0
 800db88:	e04a      	b.n	800dc20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d108      	bne.n	800dba2 <pbuf_copy_partial+0x4e>
 800db90:	4b25      	ldr	r3, [pc, #148]	; (800dc28 <pbuf_copy_partial+0xd4>)
 800db92:	f240 420b 	movw	r2, #1035	; 0x40b
 800db96:	4927      	ldr	r1, [pc, #156]	; (800dc34 <pbuf_copy_partial+0xe0>)
 800db98:	4825      	ldr	r0, [pc, #148]	; (800dc30 <pbuf_copy_partial+0xdc>)
 800db9a:	f00b fbc7 	bl	801932c <iprintf>
 800db9e:	2300      	movs	r3, #0
 800dba0:	e03e      	b.n	800dc20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	61fb      	str	r3, [r7, #28]
 800dba6:	e034      	b.n	800dc12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dba8:	88bb      	ldrh	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <pbuf_copy_partial+0x70>
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	895b      	ldrh	r3, [r3, #10]
 800dbb2:	88ba      	ldrh	r2, [r7, #4]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d305      	bcc.n	800dbc4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	895b      	ldrh	r3, [r3, #10]
 800dbbc:	88ba      	ldrh	r2, [r7, #4]
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	80bb      	strh	r3, [r7, #4]
 800dbc2:	e023      	b.n	800dc0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	895a      	ldrh	r2, [r3, #10]
 800dbc8:	88bb      	ldrh	r3, [r7, #4]
 800dbca:	1ad3      	subs	r3, r2, r3
 800dbcc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dbce:	8b3a      	ldrh	r2, [r7, #24]
 800dbd0:	88fb      	ldrh	r3, [r7, #6]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d901      	bls.n	800dbda <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dbd6:	88fb      	ldrh	r3, [r7, #6]
 800dbd8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dbda:	8b7b      	ldrh	r3, [r7, #26]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	18d0      	adds	r0, r2, r3
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	88bb      	ldrh	r3, [r7, #4]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	8b3a      	ldrh	r2, [r7, #24]
 800dbea:	4619      	mov	r1, r3
 800dbec:	f00b fb8a 	bl	8019304 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dbf0:	8afa      	ldrh	r2, [r7, #22]
 800dbf2:	8b3b      	ldrh	r3, [r7, #24]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dbf8:	8b7a      	ldrh	r2, [r7, #26]
 800dbfa:	8b3b      	ldrh	r3, [r7, #24]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dc00:	88fa      	ldrh	r2, [r7, #6]
 800dc02:	8b3b      	ldrh	r3, [r7, #24]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	61fb      	str	r3, [r7, #28]
 800dc12:	88fb      	ldrh	r3, [r7, #6]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <pbuf_copy_partial+0xca>
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1c4      	bne.n	800dba8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dc1e:	8afb      	ldrh	r3, [r7, #22]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3720      	adds	r7, #32
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	0801b924 	.word	0x0801b924
 800dc2c:	0801bc6c 	.word	0x0801bc6c
 800dc30:	0801b984 	.word	0x0801b984
 800dc34:	0801bc8c 	.word	0x0801bc8c

0800dc38 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	4603      	mov	r3, r0
 800dc40:	603a      	str	r2, [r7, #0]
 800dc42:	71fb      	strb	r3, [r7, #7]
 800dc44:	460b      	mov	r3, r1
 800dc46:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	8919      	ldrh	r1, [r3, #8]
 800dc4c:	88ba      	ldrh	r2, [r7, #4]
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7ff fa99 	bl	800d188 <pbuf_alloc>
 800dc56:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d101      	bne.n	800dc62 <pbuf_clone+0x2a>
    return NULL;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	e011      	b.n	800dc86 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dc62:	6839      	ldr	r1, [r7, #0]
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f7ff fea3 	bl	800d9b0 <pbuf_copy>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dc6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d006      	beq.n	800dc84 <pbuf_clone+0x4c>
 800dc76:	4b06      	ldr	r3, [pc, #24]	; (800dc90 <pbuf_clone+0x58>)
 800dc78:	f240 5224 	movw	r2, #1316	; 0x524
 800dc7c:	4905      	ldr	r1, [pc, #20]	; (800dc94 <pbuf_clone+0x5c>)
 800dc7e:	4806      	ldr	r0, [pc, #24]	; (800dc98 <pbuf_clone+0x60>)
 800dc80:	f00b fb54 	bl	801932c <iprintf>
  return q;
 800dc84:	68fb      	ldr	r3, [r7, #12]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	0801b924 	.word	0x0801b924
 800dc94:	0801bd98 	.word	0x0801bd98
 800dc98:	0801b984 	.word	0x0801b984

0800dc9c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dca0:	f00b fbc0 	bl	8019424 <rand>
 800dca4:	4603      	mov	r3, r0
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	4b01      	ldr	r3, [pc, #4]	; (800dcbc <tcp_init+0x20>)
 800dcb6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dcb8:	bf00      	nop
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	20000010 	.word	0x20000010

0800dcc0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	7d1b      	ldrb	r3, [r3, #20]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d105      	bne.n	800dcdc <tcp_free+0x1c>
 800dcd0:	4b06      	ldr	r3, [pc, #24]	; (800dcec <tcp_free+0x2c>)
 800dcd2:	22d4      	movs	r2, #212	; 0xd4
 800dcd4:	4906      	ldr	r1, [pc, #24]	; (800dcf0 <tcp_free+0x30>)
 800dcd6:	4807      	ldr	r0, [pc, #28]	; (800dcf4 <tcp_free+0x34>)
 800dcd8:	f00b fb28 	bl	801932c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dcdc:	6879      	ldr	r1, [r7, #4]
 800dcde:	2001      	movs	r0, #1
 800dce0:	f7fe fe4e 	bl	800c980 <memp_free>
}
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	0801be24 	.word	0x0801be24
 800dcf0:	0801be54 	.word	0x0801be54
 800dcf4:	0801be68 	.word	0x0801be68

0800dcf8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	7d1b      	ldrb	r3, [r3, #20]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d105      	bne.n	800dd14 <tcp_free_listen+0x1c>
 800dd08:	4b06      	ldr	r3, [pc, #24]	; (800dd24 <tcp_free_listen+0x2c>)
 800dd0a:	22df      	movs	r2, #223	; 0xdf
 800dd0c:	4906      	ldr	r1, [pc, #24]	; (800dd28 <tcp_free_listen+0x30>)
 800dd0e:	4807      	ldr	r0, [pc, #28]	; (800dd2c <tcp_free_listen+0x34>)
 800dd10:	f00b fb0c 	bl	801932c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dd14:	6879      	ldr	r1, [r7, #4]
 800dd16:	2002      	movs	r0, #2
 800dd18:	f7fe fe32 	bl	800c980 <memp_free>
}
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	0801be24 	.word	0x0801be24
 800dd28:	0801be90 	.word	0x0801be90
 800dd2c:	0801be68 	.word	0x0801be68

0800dd30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dd34:	f001 f8b4 	bl	800eea0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dd38:	4b07      	ldr	r3, [pc, #28]	; (800dd58 <tcp_tmr+0x28>)
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	4b05      	ldr	r3, [pc, #20]	; (800dd58 <tcp_tmr+0x28>)
 800dd42:	701a      	strb	r2, [r3, #0]
 800dd44:	4b04      	ldr	r3, [pc, #16]	; (800dd58 <tcp_tmr+0x28>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	f003 0301 	and.w	r3, r3, #1
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d001      	beq.n	800dd54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dd50:	f000 fd68 	bl	800e824 <tcp_slowtmr>
  }
}
 800dd54:	bf00      	nop
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	2000424d 	.word	0x2000424d

0800dd5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d105      	bne.n	800dd78 <tcp_remove_listener+0x1c>
 800dd6c:	4b0d      	ldr	r3, [pc, #52]	; (800dda4 <tcp_remove_listener+0x48>)
 800dd6e:	22ff      	movs	r2, #255	; 0xff
 800dd70:	490d      	ldr	r1, [pc, #52]	; (800dda8 <tcp_remove_listener+0x4c>)
 800dd72:	480e      	ldr	r0, [pc, #56]	; (800ddac <tcp_remove_listener+0x50>)
 800dd74:	f00b fada 	bl	801932c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	e00a      	b.n	800dd94 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d102      	bne.n	800dd8e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	60fb      	str	r3, [r7, #12]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1f1      	bne.n	800dd7e <tcp_remove_listener+0x22>
    }
  }
}
 800dd9a:	bf00      	nop
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	0801be24 	.word	0x0801be24
 800dda8:	0801beac 	.word	0x0801beac
 800ddac:	0801be68 	.word	0x0801be68

0800ddb0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d106      	bne.n	800ddcc <tcp_listen_closed+0x1c>
 800ddbe:	4b14      	ldr	r3, [pc, #80]	; (800de10 <tcp_listen_closed+0x60>)
 800ddc0:	f240 1211 	movw	r2, #273	; 0x111
 800ddc4:	4913      	ldr	r1, [pc, #76]	; (800de14 <tcp_listen_closed+0x64>)
 800ddc6:	4814      	ldr	r0, [pc, #80]	; (800de18 <tcp_listen_closed+0x68>)
 800ddc8:	f00b fab0 	bl	801932c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	7d1b      	ldrb	r3, [r3, #20]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d006      	beq.n	800dde2 <tcp_listen_closed+0x32>
 800ddd4:	4b0e      	ldr	r3, [pc, #56]	; (800de10 <tcp_listen_closed+0x60>)
 800ddd6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ddda:	4910      	ldr	r1, [pc, #64]	; (800de1c <tcp_listen_closed+0x6c>)
 800dddc:	480e      	ldr	r0, [pc, #56]	; (800de18 <tcp_listen_closed+0x68>)
 800ddde:	f00b faa5 	bl	801932c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dde2:	2301      	movs	r3, #1
 800dde4:	60fb      	str	r3, [r7, #12]
 800dde6:	e00b      	b.n	800de00 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dde8:	4a0d      	ldr	r2, [pc, #52]	; (800de20 <tcp_listen_closed+0x70>)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff ffb1 	bl	800dd5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	60fb      	str	r3, [r7, #12]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b03      	cmp	r3, #3
 800de04:	d9f0      	bls.n	800dde8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800de06:	bf00      	nop
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	0801be24 	.word	0x0801be24
 800de14:	0801bed4 	.word	0x0801bed4
 800de18:	0801be68 	.word	0x0801be68
 800de1c:	0801bee0 	.word	0x0801bee0
 800de20:	0801e220 	.word	0x0801e220

0800de24 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800de24:	b5b0      	push	{r4, r5, r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af04      	add	r7, sp, #16
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d106      	bne.n	800de44 <tcp_close_shutdown+0x20>
 800de36:	4b61      	ldr	r3, [pc, #388]	; (800dfbc <tcp_close_shutdown+0x198>)
 800de38:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800de3c:	4960      	ldr	r1, [pc, #384]	; (800dfc0 <tcp_close_shutdown+0x19c>)
 800de3e:	4861      	ldr	r0, [pc, #388]	; (800dfc4 <tcp_close_shutdown+0x1a0>)
 800de40:	f00b fa74 	bl	801932c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800de44:	78fb      	ldrb	r3, [r7, #3]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d066      	beq.n	800df18 <tcp_close_shutdown+0xf4>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	7d1b      	ldrb	r3, [r3, #20]
 800de4e:	2b04      	cmp	r3, #4
 800de50:	d003      	beq.n	800de5a <tcp_close_shutdown+0x36>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	7d1b      	ldrb	r3, [r3, #20]
 800de56:	2b07      	cmp	r3, #7
 800de58:	d15e      	bne.n	800df18 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d104      	bne.n	800de6c <tcp_close_shutdown+0x48>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de6a:	d055      	beq.n	800df18 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	8b5b      	ldrh	r3, [r3, #26]
 800de70:	f003 0310 	and.w	r3, r3, #16
 800de74:	2b00      	cmp	r3, #0
 800de76:	d106      	bne.n	800de86 <tcp_close_shutdown+0x62>
 800de78:	4b50      	ldr	r3, [pc, #320]	; (800dfbc <tcp_close_shutdown+0x198>)
 800de7a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800de7e:	4952      	ldr	r1, [pc, #328]	; (800dfc8 <tcp_close_shutdown+0x1a4>)
 800de80:	4850      	ldr	r0, [pc, #320]	; (800dfc4 <tcp_close_shutdown+0x1a0>)
 800de82:	f00b fa53 	bl	801932c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800de8e:	687d      	ldr	r5, [r7, #4]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3304      	adds	r3, #4
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	8ad2      	ldrh	r2, [r2, #22]
 800de98:	6879      	ldr	r1, [r7, #4]
 800de9a:	8b09      	ldrh	r1, [r1, #24]
 800de9c:	9102      	str	r1, [sp, #8]
 800de9e:	9201      	str	r2, [sp, #4]
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	462b      	mov	r3, r5
 800dea4:	4622      	mov	r2, r4
 800dea6:	4601      	mov	r1, r0
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f005 fdd3 	bl	8013a54 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f001 fba4 	bl	800f5fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800deb4:	4b45      	ldr	r3, [pc, #276]	; (800dfcc <tcp_close_shutdown+0x1a8>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	429a      	cmp	r2, r3
 800debc:	d105      	bne.n	800deca <tcp_close_shutdown+0xa6>
 800debe:	4b43      	ldr	r3, [pc, #268]	; (800dfcc <tcp_close_shutdown+0x1a8>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	4a41      	ldr	r2, [pc, #260]	; (800dfcc <tcp_close_shutdown+0x1a8>)
 800dec6:	6013      	str	r3, [r2, #0]
 800dec8:	e013      	b.n	800def2 <tcp_close_shutdown+0xce>
 800deca:	4b40      	ldr	r3, [pc, #256]	; (800dfcc <tcp_close_shutdown+0x1a8>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	60fb      	str	r3, [r7, #12]
 800ded0:	e00c      	b.n	800deec <tcp_close_shutdown+0xc8>
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d104      	bne.n	800dee6 <tcp_close_shutdown+0xc2>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	68da      	ldr	r2, [r3, #12]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	60da      	str	r2, [r3, #12]
 800dee4:	e005      	b.n	800def2 <tcp_close_shutdown+0xce>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	60fb      	str	r3, [r7, #12]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1ef      	bne.n	800ded2 <tcp_close_shutdown+0xae>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	60da      	str	r2, [r3, #12]
 800def8:	4b35      	ldr	r3, [pc, #212]	; (800dfd0 <tcp_close_shutdown+0x1ac>)
 800defa:	2201      	movs	r2, #1
 800defc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800defe:	4b35      	ldr	r3, [pc, #212]	; (800dfd4 <tcp_close_shutdown+0x1b0>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	429a      	cmp	r2, r3
 800df06:	d102      	bne.n	800df0e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800df08:	f004 f836 	bl	8011f78 <tcp_trigger_input_pcb_close>
 800df0c:	e002      	b.n	800df14 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f7ff fed6 	bl	800dcc0 <tcp_free>
      }
      return ERR_OK;
 800df14:	2300      	movs	r3, #0
 800df16:	e04d      	b.n	800dfb4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	7d1b      	ldrb	r3, [r3, #20]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d02d      	beq.n	800df7c <tcp_close_shutdown+0x158>
 800df20:	2b02      	cmp	r3, #2
 800df22:	d036      	beq.n	800df92 <tcp_close_shutdown+0x16e>
 800df24:	2b00      	cmp	r3, #0
 800df26:	d13f      	bne.n	800dfa8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	8adb      	ldrh	r3, [r3, #22]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d021      	beq.n	800df74 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800df30:	4b29      	ldr	r3, [pc, #164]	; (800dfd8 <tcp_close_shutdown+0x1b4>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	429a      	cmp	r2, r3
 800df38:	d105      	bne.n	800df46 <tcp_close_shutdown+0x122>
 800df3a:	4b27      	ldr	r3, [pc, #156]	; (800dfd8 <tcp_close_shutdown+0x1b4>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	4a25      	ldr	r2, [pc, #148]	; (800dfd8 <tcp_close_shutdown+0x1b4>)
 800df42:	6013      	str	r3, [r2, #0]
 800df44:	e013      	b.n	800df6e <tcp_close_shutdown+0x14a>
 800df46:	4b24      	ldr	r3, [pc, #144]	; (800dfd8 <tcp_close_shutdown+0x1b4>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	60bb      	str	r3, [r7, #8]
 800df4c:	e00c      	b.n	800df68 <tcp_close_shutdown+0x144>
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	429a      	cmp	r2, r3
 800df56:	d104      	bne.n	800df62 <tcp_close_shutdown+0x13e>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	68da      	ldr	r2, [r3, #12]
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	60da      	str	r2, [r3, #12]
 800df60:	e005      	b.n	800df6e <tcp_close_shutdown+0x14a>
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	60bb      	str	r3, [r7, #8]
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1ef      	bne.n	800df4e <tcp_close_shutdown+0x12a>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7ff fea3 	bl	800dcc0 <tcp_free>
      break;
 800df7a:	e01a      	b.n	800dfb2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f7ff ff17 	bl	800ddb0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800df82:	6879      	ldr	r1, [r7, #4]
 800df84:	4815      	ldr	r0, [pc, #84]	; (800dfdc <tcp_close_shutdown+0x1b8>)
 800df86:	f001 fb89 	bl	800f69c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7ff feb4 	bl	800dcf8 <tcp_free_listen>
      break;
 800df90:	e00f      	b.n	800dfb2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800df92:	6879      	ldr	r1, [r7, #4]
 800df94:	480d      	ldr	r0, [pc, #52]	; (800dfcc <tcp_close_shutdown+0x1a8>)
 800df96:	f001 fb81 	bl	800f69c <tcp_pcb_remove>
 800df9a:	4b0d      	ldr	r3, [pc, #52]	; (800dfd0 <tcp_close_shutdown+0x1ac>)
 800df9c:	2201      	movs	r2, #1
 800df9e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f7ff fe8d 	bl	800dcc0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dfa6:	e004      	b.n	800dfb2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 f819 	bl	800dfe0 <tcp_close_shutdown_fin>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	e000      	b.n	800dfb4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3710      	adds	r7, #16
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bdb0      	pop	{r4, r5, r7, pc}
 800dfbc:	0801be24 	.word	0x0801be24
 800dfc0:	0801bef8 	.word	0x0801bef8
 800dfc4:	0801be68 	.word	0x0801be68
 800dfc8:	0801bf18 	.word	0x0801bf18
 800dfcc:	2000b134 	.word	0x2000b134
 800dfd0:	2000b130 	.word	0x2000b130
 800dfd4:	2000b148 	.word	0x2000b148
 800dfd8:	2000b140 	.word	0x2000b140
 800dfdc:	2000b13c 	.word	0x2000b13c

0800dfe0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d106      	bne.n	800dffc <tcp_close_shutdown_fin+0x1c>
 800dfee:	4b2c      	ldr	r3, [pc, #176]	; (800e0a0 <tcp_close_shutdown_fin+0xc0>)
 800dff0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dff4:	492b      	ldr	r1, [pc, #172]	; (800e0a4 <tcp_close_shutdown_fin+0xc4>)
 800dff6:	482c      	ldr	r0, [pc, #176]	; (800e0a8 <tcp_close_shutdown_fin+0xc8>)
 800dff8:	f00b f998 	bl	801932c <iprintf>

  switch (pcb->state) {
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	7d1b      	ldrb	r3, [r3, #20]
 800e000:	2b04      	cmp	r3, #4
 800e002:	d010      	beq.n	800e026 <tcp_close_shutdown_fin+0x46>
 800e004:	2b07      	cmp	r3, #7
 800e006:	d01b      	beq.n	800e040 <tcp_close_shutdown_fin+0x60>
 800e008:	2b03      	cmp	r3, #3
 800e00a:	d126      	bne.n	800e05a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f004 fe1f 	bl	8012c50 <tcp_send_fin>
 800e012:	4603      	mov	r3, r0
 800e014:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d11f      	bne.n	800e05e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2205      	movs	r2, #5
 800e022:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e024:	e01b      	b.n	800e05e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f004 fe12 	bl	8012c50 <tcp_send_fin>
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d114      	bne.n	800e062 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2205      	movs	r2, #5
 800e03c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e03e:	e010      	b.n	800e062 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f004 fe05 	bl	8012c50 <tcp_send_fin>
 800e046:	4603      	mov	r3, r0
 800e048:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d109      	bne.n	800e066 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2209      	movs	r2, #9
 800e056:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e058:	e005      	b.n	800e066 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e05a:	2300      	movs	r3, #0
 800e05c:	e01c      	b.n	800e098 <tcp_close_shutdown_fin+0xb8>
      break;
 800e05e:	bf00      	nop
 800e060:	e002      	b.n	800e068 <tcp_close_shutdown_fin+0x88>
      break;
 800e062:	bf00      	nop
 800e064:	e000      	b.n	800e068 <tcp_close_shutdown_fin+0x88>
      break;
 800e066:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d103      	bne.n	800e078 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f004 ff2b 	bl	8012ecc <tcp_output>
 800e076:	e00d      	b.n	800e094 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800e078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e080:	d108      	bne.n	800e094 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	8b5b      	ldrh	r3, [r3, #26]
 800e086:	f043 0308 	orr.w	r3, r3, #8
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	e001      	b.n	800e098 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800e094:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	0801be24 	.word	0x0801be24
 800e0a4:	0801bed4 	.word	0x0801bed4
 800e0a8:	0801be68 	.word	0x0801be68

0800e0ac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d109      	bne.n	800e0ce <tcp_close+0x22>
 800e0ba:	4b0f      	ldr	r3, [pc, #60]	; (800e0f8 <tcp_close+0x4c>)
 800e0bc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e0c0:	490e      	ldr	r1, [pc, #56]	; (800e0fc <tcp_close+0x50>)
 800e0c2:	480f      	ldr	r0, [pc, #60]	; (800e100 <tcp_close+0x54>)
 800e0c4:	f00b f932 	bl	801932c <iprintf>
 800e0c8:	f06f 030f 	mvn.w	r3, #15
 800e0cc:	e00f      	b.n	800e0ee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	7d1b      	ldrb	r3, [r3, #20]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d006      	beq.n	800e0e4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	8b5b      	ldrh	r3, [r3, #26]
 800e0da:	f043 0310 	orr.w	r3, r3, #16
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e0e4:	2101      	movs	r1, #1
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f7ff fe9c 	bl	800de24 <tcp_close_shutdown>
 800e0ec:	4603      	mov	r3, r0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	0801be24 	.word	0x0801be24
 800e0fc:	0801bf34 	.word	0x0801bf34
 800e100:	0801be68 	.word	0x0801be68

0800e104 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d109      	bne.n	800e12a <tcp_shutdown+0x26>
 800e116:	4b25      	ldr	r3, [pc, #148]	; (800e1ac <tcp_shutdown+0xa8>)
 800e118:	f240 2207 	movw	r2, #519	; 0x207
 800e11c:	4924      	ldr	r1, [pc, #144]	; (800e1b0 <tcp_shutdown+0xac>)
 800e11e:	4825      	ldr	r0, [pc, #148]	; (800e1b4 <tcp_shutdown+0xb0>)
 800e120:	f00b f904 	bl	801932c <iprintf>
 800e124:	f06f 030f 	mvn.w	r3, #15
 800e128:	e03c      	b.n	800e1a4 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	7d1b      	ldrb	r3, [r3, #20]
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d102      	bne.n	800e138 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e132:	f06f 030a 	mvn.w	r3, #10
 800e136:	e035      	b.n	800e1a4 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d01b      	beq.n	800e176 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	8b5b      	ldrh	r3, [r3, #26]
 800e142:	f043 0310 	orr.w	r3, r3, #16
 800e146:	b29a      	uxth	r2, r3
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d005      	beq.n	800e15e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e152:	2101      	movs	r1, #1
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f7ff fe65 	bl	800de24 <tcp_close_shutdown>
 800e15a:	4603      	mov	r3, r0
 800e15c:	e022      	b.n	800e1a4 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e162:	2b00      	cmp	r3, #0
 800e164:	d007      	beq.n	800e176 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7ff faec 	bl	800d748 <pbuf_free>
      pcb->refused_data = NULL;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2200      	movs	r2, #0
 800e174:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d012      	beq.n	800e1a2 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	7d1b      	ldrb	r3, [r3, #20]
 800e180:	2b03      	cmp	r3, #3
 800e182:	db0b      	blt.n	800e19c <tcp_shutdown+0x98>
 800e184:	2b04      	cmp	r3, #4
 800e186:	dd01      	ble.n	800e18c <tcp_shutdown+0x88>
 800e188:	2b07      	cmp	r3, #7
 800e18a:	d107      	bne.n	800e19c <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	4619      	mov	r1, r3
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f7ff fe46 	bl	800de24 <tcp_close_shutdown>
 800e198:	4603      	mov	r3, r0
 800e19a:	e003      	b.n	800e1a4 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e19c:	f06f 030a 	mvn.w	r3, #10
 800e1a0:	e000      	b.n	800e1a4 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800e1a2:	2300      	movs	r3, #0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	0801be24 	.word	0x0801be24
 800e1b0:	0801bf4c 	.word	0x0801bf4c
 800e1b4:	0801be68 	.word	0x0801be68

0800e1b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b08e      	sub	sp, #56	; 0x38
 800e1bc:	af04      	add	r7, sp, #16
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d107      	bne.n	800e1d8 <tcp_abandon+0x20>
 800e1c8:	4b52      	ldr	r3, [pc, #328]	; (800e314 <tcp_abandon+0x15c>)
 800e1ca:	f240 223d 	movw	r2, #573	; 0x23d
 800e1ce:	4952      	ldr	r1, [pc, #328]	; (800e318 <tcp_abandon+0x160>)
 800e1d0:	4852      	ldr	r0, [pc, #328]	; (800e31c <tcp_abandon+0x164>)
 800e1d2:	f00b f8ab 	bl	801932c <iprintf>
 800e1d6:	e099      	b.n	800e30c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	7d1b      	ldrb	r3, [r3, #20]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d106      	bne.n	800e1ee <tcp_abandon+0x36>
 800e1e0:	4b4c      	ldr	r3, [pc, #304]	; (800e314 <tcp_abandon+0x15c>)
 800e1e2:	f240 2241 	movw	r2, #577	; 0x241
 800e1e6:	494e      	ldr	r1, [pc, #312]	; (800e320 <tcp_abandon+0x168>)
 800e1e8:	484c      	ldr	r0, [pc, #304]	; (800e31c <tcp_abandon+0x164>)
 800e1ea:	f00b f89f 	bl	801932c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	7d1b      	ldrb	r3, [r3, #20]
 800e1f2:	2b0a      	cmp	r3, #10
 800e1f4:	d107      	bne.n	800e206 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e1f6:	6879      	ldr	r1, [r7, #4]
 800e1f8:	484a      	ldr	r0, [pc, #296]	; (800e324 <tcp_abandon+0x16c>)
 800e1fa:	f001 fa4f 	bl	800f69c <tcp_pcb_remove>
    tcp_free(pcb);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7ff fd5e 	bl	800dcc0 <tcp_free>
 800e204:	e082      	b.n	800e30c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e206:	2300      	movs	r3, #0
 800e208:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e20a:	2300      	movs	r3, #0
 800e20c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e212:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e218:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e220:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	691b      	ldr	r3, [r3, #16]
 800e226:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	7d1b      	ldrb	r3, [r3, #20]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d126      	bne.n	800e27e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	8adb      	ldrh	r3, [r3, #22]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d02e      	beq.n	800e296 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e238:	4b3b      	ldr	r3, [pc, #236]	; (800e328 <tcp_abandon+0x170>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d105      	bne.n	800e24e <tcp_abandon+0x96>
 800e242:	4b39      	ldr	r3, [pc, #228]	; (800e328 <tcp_abandon+0x170>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	4a37      	ldr	r2, [pc, #220]	; (800e328 <tcp_abandon+0x170>)
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	e013      	b.n	800e276 <tcp_abandon+0xbe>
 800e24e:	4b36      	ldr	r3, [pc, #216]	; (800e328 <tcp_abandon+0x170>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	61fb      	str	r3, [r7, #28]
 800e254:	e00c      	b.n	800e270 <tcp_abandon+0xb8>
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d104      	bne.n	800e26a <tcp_abandon+0xb2>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	68da      	ldr	r2, [r3, #12]
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	60da      	str	r2, [r3, #12]
 800e268:	e005      	b.n	800e276 <tcp_abandon+0xbe>
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	61fb      	str	r3, [r7, #28]
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1ef      	bne.n	800e256 <tcp_abandon+0x9e>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	60da      	str	r2, [r3, #12]
 800e27c:	e00b      	b.n	800e296 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	8adb      	ldrh	r3, [r3, #22]
 800e286:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e288:	6879      	ldr	r1, [r7, #4]
 800e28a:	4828      	ldr	r0, [pc, #160]	; (800e32c <tcp_abandon+0x174>)
 800e28c:	f001 fa06 	bl	800f69c <tcp_pcb_remove>
 800e290:	4b27      	ldr	r3, [pc, #156]	; (800e330 <tcp_abandon+0x178>)
 800e292:	2201      	movs	r2, #1
 800e294:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d004      	beq.n	800e2a8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f000 fedc 	bl	800f060 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d004      	beq.n	800e2ba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f000 fed3 	bl	800f060 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d004      	beq.n	800e2cc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f000 feca 	bl	800f060 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00e      	beq.n	800e2f0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e2d2:	6879      	ldr	r1, [r7, #4]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	8b12      	ldrh	r2, [r2, #24]
 800e2dc:	9202      	str	r2, [sp, #8]
 800e2de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e2e0:	9201      	str	r2, [sp, #4]
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	697a      	ldr	r2, [r7, #20]
 800e2e8:	69b9      	ldr	r1, [r7, #24]
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f005 fbb2 	bl	8013a54 <tcp_rst>
    }
    last_state = pcb->state;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	7d1b      	ldrb	r3, [r3, #20]
 800e2f4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7ff fce2 	bl	800dcc0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d004      	beq.n	800e30c <tcp_abandon+0x154>
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	f06f 010c 	mvn.w	r1, #12
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	4798      	blx	r3
  }
}
 800e30c:	3728      	adds	r7, #40	; 0x28
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	0801be24 	.word	0x0801be24
 800e318:	0801bf68 	.word	0x0801bf68
 800e31c:	0801be68 	.word	0x0801be68
 800e320:	0801bf84 	.word	0x0801bf84
 800e324:	2000b144 	.word	0x2000b144
 800e328:	2000b140 	.word	0x2000b140
 800e32c:	2000b134 	.word	0x2000b134
 800e330:	2000b130 	.word	0x2000b130

0800e334 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e33c:	2101      	movs	r1, #1
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff ff3a 	bl	800e1b8 <tcp_abandon>
}
 800e344:	bf00      	nop
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	4613      	mov	r3, r2
 800e358:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e35a:	2304      	movs	r3, #4
 800e35c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d101      	bne.n	800e368 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e364:	4b3e      	ldr	r3, [pc, #248]	; (800e460 <tcp_bind+0x114>)
 800e366:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d109      	bne.n	800e382 <tcp_bind+0x36>
 800e36e:	4b3d      	ldr	r3, [pc, #244]	; (800e464 <tcp_bind+0x118>)
 800e370:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e374:	493c      	ldr	r1, [pc, #240]	; (800e468 <tcp_bind+0x11c>)
 800e376:	483d      	ldr	r0, [pc, #244]	; (800e46c <tcp_bind+0x120>)
 800e378:	f00a ffd8 	bl	801932c <iprintf>
 800e37c:	f06f 030f 	mvn.w	r3, #15
 800e380:	e06a      	b.n	800e458 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	7d1b      	ldrb	r3, [r3, #20]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d009      	beq.n	800e39e <tcp_bind+0x52>
 800e38a:	4b36      	ldr	r3, [pc, #216]	; (800e464 <tcp_bind+0x118>)
 800e38c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e390:	4937      	ldr	r1, [pc, #220]	; (800e470 <tcp_bind+0x124>)
 800e392:	4836      	ldr	r0, [pc, #216]	; (800e46c <tcp_bind+0x120>)
 800e394:	f00a ffca 	bl	801932c <iprintf>
 800e398:	f06f 0305 	mvn.w	r3, #5
 800e39c:	e05c      	b.n	800e458 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e39e:	88fb      	ldrh	r3, [r7, #6]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d109      	bne.n	800e3b8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e3a4:	f000 f9f8 	bl	800e798 <tcp_new_port>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e3ac:	88fb      	ldrh	r3, [r7, #6]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d135      	bne.n	800e41e <tcp_bind+0xd2>
      return ERR_BUF;
 800e3b2:	f06f 0301 	mvn.w	r3, #1
 800e3b6:	e04f      	b.n	800e458 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	61fb      	str	r3, [r7, #28]
 800e3bc:	e02b      	b.n	800e416 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e3be:	4a2d      	ldr	r2, [pc, #180]	; (800e474 <tcp_bind+0x128>)
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	61bb      	str	r3, [r7, #24]
 800e3ca:	e01e      	b.n	800e40a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	8adb      	ldrh	r3, [r3, #22]
 800e3d0:	88fa      	ldrh	r2, [r7, #6]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d116      	bne.n	800e404 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e3d6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d010      	beq.n	800e3fe <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00c      	beq.n	800e3fe <tcp_bind+0xb2>
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d009      	beq.n	800e3fe <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d005      	beq.n	800e3fe <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d102      	bne.n	800e404 <tcp_bind+0xb8>
              return ERR_USE;
 800e3fe:	f06f 0307 	mvn.w	r3, #7
 800e402:	e029      	b.n	800e458 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	61bb      	str	r3, [r7, #24]
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1dd      	bne.n	800e3cc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	3301      	adds	r3, #1
 800e414:	61fb      	str	r3, [r7, #28]
 800e416:	69fa      	ldr	r2, [r7, #28]
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	dbcf      	blt.n	800e3be <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00c      	beq.n	800e43e <tcp_bind+0xf2>
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d008      	beq.n	800e43e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d002      	beq.n	800e438 <tcp_bind+0xec>
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	e000      	b.n	800e43a <tcp_bind+0xee>
 800e438:	2300      	movs	r3, #0
 800e43a:	68fa      	ldr	r2, [r7, #12]
 800e43c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	88fa      	ldrh	r2, [r7, #6]
 800e442:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e444:	4b0c      	ldr	r3, [pc, #48]	; (800e478 <tcp_bind+0x12c>)
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	60da      	str	r2, [r3, #12]
 800e44c:	4a0a      	ldr	r2, [pc, #40]	; (800e478 <tcp_bind+0x12c>)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6013      	str	r3, [r2, #0]
 800e452:	f005 fcc1 	bl	8013dd8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3720      	adds	r7, #32
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	0801e258 	.word	0x0801e258
 800e464:	0801be24 	.word	0x0801be24
 800e468:	0801bfb8 	.word	0x0801bfb8
 800e46c:	0801be68 	.word	0x0801be68
 800e470:	0801bfd0 	.word	0x0801bfd0
 800e474:	0801e220 	.word	0x0801e220
 800e478:	2000b140 	.word	0x2000b140

0800e47c <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d007      	beq.n	800e49c <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e492:	3301      	adds	r3, #1
 800e494:	b2da      	uxtb	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 800e49a:	e002      	b.n	800e4a2 <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	721a      	strb	r2, [r3, #8]
}
 800e4a2:	bf00      	nop
 800e4a4:	370c      	adds	r7, #12
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr
	...

0800e4b0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d106      	bne.n	800e4d2 <tcp_accept_null+0x22>
 800e4c4:	4b07      	ldr	r3, [pc, #28]	; (800e4e4 <tcp_accept_null+0x34>)
 800e4c6:	f240 320f 	movw	r2, #783	; 0x30f
 800e4ca:	4907      	ldr	r1, [pc, #28]	; (800e4e8 <tcp_accept_null+0x38>)
 800e4cc:	4807      	ldr	r0, [pc, #28]	; (800e4ec <tcp_accept_null+0x3c>)
 800e4ce:	f00a ff2d 	bl	801932c <iprintf>

  tcp_abort(pcb);
 800e4d2:	68b8      	ldr	r0, [r7, #8]
 800e4d4:	f7ff ff2e 	bl	800e334 <tcp_abort>

  return ERR_ABRT;
 800e4d8:	f06f 030c 	mvn.w	r3, #12
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	0801be24 	.word	0x0801be24
 800e4e8:	0801bff8 	.word	0x0801bff8
 800e4ec:	0801be68 	.word	0x0801be68

0800e4f0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b088      	sub	sp, #32
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e4fe:	2300      	movs	r3, #0
 800e500:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d109      	bne.n	800e51c <tcp_listen_with_backlog_and_err+0x2c>
 800e508:	4b47      	ldr	r3, [pc, #284]	; (800e628 <tcp_listen_with_backlog_and_err+0x138>)
 800e50a:	f240 3259 	movw	r2, #857	; 0x359
 800e50e:	4947      	ldr	r1, [pc, #284]	; (800e62c <tcp_listen_with_backlog_and_err+0x13c>)
 800e510:	4847      	ldr	r0, [pc, #284]	; (800e630 <tcp_listen_with_backlog_and_err+0x140>)
 800e512:	f00a ff0b 	bl	801932c <iprintf>
 800e516:	23f0      	movs	r3, #240	; 0xf0
 800e518:	76fb      	strb	r3, [r7, #27]
 800e51a:	e079      	b.n	800e610 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	7d1b      	ldrb	r3, [r3, #20]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d009      	beq.n	800e538 <tcp_listen_with_backlog_and_err+0x48>
 800e524:	4b40      	ldr	r3, [pc, #256]	; (800e628 <tcp_listen_with_backlog_and_err+0x138>)
 800e526:	f240 325a 	movw	r2, #858	; 0x35a
 800e52a:	4942      	ldr	r1, [pc, #264]	; (800e634 <tcp_listen_with_backlog_and_err+0x144>)
 800e52c:	4840      	ldr	r0, [pc, #256]	; (800e630 <tcp_listen_with_backlog_and_err+0x140>)
 800e52e:	f00a fefd 	bl	801932c <iprintf>
 800e532:	23f1      	movs	r3, #241	; 0xf1
 800e534:	76fb      	strb	r3, [r7, #27]
 800e536:	e06b      	b.n	800e610 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	7d1b      	ldrb	r3, [r3, #20]
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d104      	bne.n	800e54a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e544:	23f7      	movs	r3, #247	; 0xf7
 800e546:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e548:	e062      	b.n	800e610 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e54a:	2002      	movs	r0, #2
 800e54c:	f7fe f9c6 	bl	800c8dc <memp_malloc>
 800e550:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d102      	bne.n	800e55e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e558:	23ff      	movs	r3, #255	; 0xff
 800e55a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e55c:	e058      	b.n	800e610 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	691a      	ldr	r2, [r3, #16]
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	8ada      	ldrh	r2, [r3, #22]
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	2201      	movs	r2, #1
 800e572:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	7d5a      	ldrb	r2, [r3, #21]
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	7a5a      	ldrb	r2, [r3, #9]
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	2200      	movs	r2, #0
 800e588:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	7ada      	ldrb	r2, [r3, #11]
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	7a9a      	ldrb	r2, [r3, #10]
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	8adb      	ldrh	r3, [r3, #22]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d021      	beq.n	800e5ee <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5aa:	4b23      	ldr	r3, [pc, #140]	; (800e638 <tcp_listen_with_backlog_and_err+0x148>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d105      	bne.n	800e5c0 <tcp_listen_with_backlog_and_err+0xd0>
 800e5b4:	4b20      	ldr	r3, [pc, #128]	; (800e638 <tcp_listen_with_backlog_and_err+0x148>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	4a1f      	ldr	r2, [pc, #124]	; (800e638 <tcp_listen_with_backlog_and_err+0x148>)
 800e5bc:	6013      	str	r3, [r2, #0]
 800e5be:	e013      	b.n	800e5e8 <tcp_listen_with_backlog_and_err+0xf8>
 800e5c0:	4b1d      	ldr	r3, [pc, #116]	; (800e638 <tcp_listen_with_backlog_and_err+0x148>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	617b      	str	r3, [r7, #20]
 800e5c6:	e00c      	b.n	800e5e2 <tcp_listen_with_backlog_and_err+0xf2>
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	68fa      	ldr	r2, [r7, #12]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d104      	bne.n	800e5dc <tcp_listen_with_backlog_and_err+0xec>
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	68da      	ldr	r2, [r3, #12]
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	60da      	str	r2, [r3, #12]
 800e5da:	e005      	b.n	800e5e8 <tcp_listen_with_backlog_and_err+0xf8>
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	617b      	str	r3, [r7, #20]
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1ef      	bne.n	800e5c8 <tcp_listen_with_backlog_and_err+0xd8>
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f7ff fb66 	bl	800dcc0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	4a11      	ldr	r2, [pc, #68]	; (800e63c <tcp_listen_with_backlog_and_err+0x14c>)
 800e5f8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e5fa:	4b11      	ldr	r3, [pc, #68]	; (800e640 <tcp_listen_with_backlog_and_err+0x150>)
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	60da      	str	r2, [r3, #12]
 800e602:	4a0f      	ldr	r2, [pc, #60]	; (800e640 <tcp_listen_with_backlog_and_err+0x150>)
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	6013      	str	r3, [r2, #0]
 800e608:	f005 fbe6 	bl	8013dd8 <tcp_timer_needed>
  res = ERR_OK;
 800e60c:	2300      	movs	r3, #0
 800e60e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d002      	beq.n	800e61c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	7efa      	ldrb	r2, [r7, #27]
 800e61a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e61c:	69fb      	ldr	r3, [r7, #28]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3720      	adds	r7, #32
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	0801be24 	.word	0x0801be24
 800e62c:	0801c018 	.word	0x0801c018
 800e630:	0801be68 	.word	0x0801be68
 800e634:	0801c048 	.word	0x0801c048
 800e638:	2000b140 	.word	0x2000b140
 800e63c:	0800e4b1 	.word	0x0800e4b1
 800e640:	2000b13c 	.word	0x2000b13c

0800e644 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d106      	bne.n	800e660 <tcp_update_rcv_ann_wnd+0x1c>
 800e652:	4b25      	ldr	r3, [pc, #148]	; (800e6e8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e654:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e658:	4924      	ldr	r1, [pc, #144]	; (800e6ec <tcp_update_rcv_ann_wnd+0xa8>)
 800e65a:	4825      	ldr	r0, [pc, #148]	; (800e6f0 <tcp_update_rcv_ann_wnd+0xac>)
 800e65c:	f00a fe66 	bl	801932c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e668:	4413      	add	r3, r2
 800e66a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e674:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e678:	bf28      	it	cs
 800e67a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e67e:	b292      	uxth	r2, r2
 800e680:	4413      	add	r3, r2
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	2b00      	cmp	r3, #0
 800e688:	db08      	blt.n	800e69c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	1ad3      	subs	r3, r2, r3
 800e69a:	e020      	b.n	800e6de <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a4:	1ad3      	subs	r3, r2, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	dd03      	ble.n	800e6b2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e6b0:	e014      	b.n	800e6dc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6c4:	d306      	bcc.n	800e6d4 <tcp_update_rcv_ann_wnd+0x90>
 800e6c6:	4b08      	ldr	r3, [pc, #32]	; (800e6e8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e6c8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e6cc:	4909      	ldr	r1, [pc, #36]	; (800e6f4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e6ce:	4808      	ldr	r0, [pc, #32]	; (800e6f0 <tcp_update_rcv_ann_wnd+0xac>)
 800e6d0:	f00a fe2c 	bl	801932c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e6dc:	2300      	movs	r3, #0
  }
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	0801be24 	.word	0x0801be24
 800e6ec:	0801c080 	.word	0x0801c080
 800e6f0:	0801be68 	.word	0x0801be68
 800e6f4:	0801c0a4 	.word	0x0801c0a4

0800e6f8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	460b      	mov	r3, r1
 800e702:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d107      	bne.n	800e71a <tcp_recved+0x22>
 800e70a:	4b1f      	ldr	r3, [pc, #124]	; (800e788 <tcp_recved+0x90>)
 800e70c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e710:	491e      	ldr	r1, [pc, #120]	; (800e78c <tcp_recved+0x94>)
 800e712:	481f      	ldr	r0, [pc, #124]	; (800e790 <tcp_recved+0x98>)
 800e714:	f00a fe0a 	bl	801932c <iprintf>
 800e718:	e032      	b.n	800e780 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	7d1b      	ldrb	r3, [r3, #20]
 800e71e:	2b01      	cmp	r3, #1
 800e720:	d106      	bne.n	800e730 <tcp_recved+0x38>
 800e722:	4b19      	ldr	r3, [pc, #100]	; (800e788 <tcp_recved+0x90>)
 800e724:	f240 32d3 	movw	r2, #979	; 0x3d3
 800e728:	491a      	ldr	r1, [pc, #104]	; (800e794 <tcp_recved+0x9c>)
 800e72a:	4819      	ldr	r0, [pc, #100]	; (800e790 <tcp_recved+0x98>)
 800e72c:	f00a fdfe 	bl	801932c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e734:	887b      	ldrh	r3, [r7, #2]
 800e736:	4413      	add	r3, r2
 800e738:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e73a:	89fb      	ldrh	r3, [r7, #14]
 800e73c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e740:	d804      	bhi.n	800e74c <tcp_recved+0x54>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e746:	89fa      	ldrh	r2, [r7, #14]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d204      	bcs.n	800e756 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e752:	851a      	strh	r2, [r3, #40]	; 0x28
 800e754:	e002      	b.n	800e75c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	89fa      	ldrh	r2, [r7, #14]
 800e75a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7ff ff71 	bl	800e644 <tcp_update_rcv_ann_wnd>
 800e762:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e76a:	d309      	bcc.n	800e780 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	8b5b      	ldrh	r3, [r3, #26]
 800e770:	f043 0302 	orr.w	r3, r3, #2
 800e774:	b29a      	uxth	r2, r3
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f004 fba6 	bl	8012ecc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	0801be24 	.word	0x0801be24
 800e78c:	0801c0c0 	.word	0x0801c0c0
 800e790:	0801be68 	.word	0x0801be68
 800e794:	0801c0d8 	.word	0x0801c0d8

0800e798 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e7a2:	4b1e      	ldr	r3, [pc, #120]	; (800e81c <tcp_new_port+0x84>)
 800e7a4:	881b      	ldrh	r3, [r3, #0]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	4b1c      	ldr	r3, [pc, #112]	; (800e81c <tcp_new_port+0x84>)
 800e7ac:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e7ae:	4b1b      	ldr	r3, [pc, #108]	; (800e81c <tcp_new_port+0x84>)
 800e7b0:	881b      	ldrh	r3, [r3, #0]
 800e7b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d103      	bne.n	800e7c2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e7ba:	4b18      	ldr	r3, [pc, #96]	; (800e81c <tcp_new_port+0x84>)
 800e7bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e7c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	71fb      	strb	r3, [r7, #7]
 800e7c6:	e01e      	b.n	800e806 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e7c8:	79fb      	ldrb	r3, [r7, #7]
 800e7ca:	4a15      	ldr	r2, [pc, #84]	; (800e820 <tcp_new_port+0x88>)
 800e7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	603b      	str	r3, [r7, #0]
 800e7d4:	e011      	b.n	800e7fa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	8ada      	ldrh	r2, [r3, #22]
 800e7da:	4b10      	ldr	r3, [pc, #64]	; (800e81c <tcp_new_port+0x84>)
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d108      	bne.n	800e7f4 <tcp_new_port+0x5c>
        n++;
 800e7e2:	88bb      	ldrh	r3, [r7, #4]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e7e8:	88bb      	ldrh	r3, [r7, #4]
 800e7ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e7ee:	d3d8      	bcc.n	800e7a2 <tcp_new_port+0xa>
          return 0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	e00d      	b.n	800e810 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	603b      	str	r3, [r7, #0]
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1ea      	bne.n	800e7d6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e800:	79fb      	ldrb	r3, [r7, #7]
 800e802:	3301      	adds	r3, #1
 800e804:	71fb      	strb	r3, [r7, #7]
 800e806:	79fb      	ldrb	r3, [r7, #7]
 800e808:	2b03      	cmp	r3, #3
 800e80a:	d9dd      	bls.n	800e7c8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e80c:	4b03      	ldr	r3, [pc, #12]	; (800e81c <tcp_new_port+0x84>)
 800e80e:	881b      	ldrh	r3, [r3, #0]
}
 800e810:	4618      	mov	r0, r3
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr
 800e81c:	20000010 	.word	0x20000010
 800e820:	0801e220 	.word	0x0801e220

0800e824 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e824:	b5b0      	push	{r4, r5, r7, lr}
 800e826:	b090      	sub	sp, #64	; 0x40
 800e828:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e82a:	2300      	movs	r3, #0
 800e82c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e830:	4b94      	ldr	r3, [pc, #592]	; (800ea84 <tcp_slowtmr+0x260>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	3301      	adds	r3, #1
 800e836:	4a93      	ldr	r2, [pc, #588]	; (800ea84 <tcp_slowtmr+0x260>)
 800e838:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e83a:	4b93      	ldr	r3, [pc, #588]	; (800ea88 <tcp_slowtmr+0x264>)
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	3301      	adds	r3, #1
 800e840:	b2da      	uxtb	r2, r3
 800e842:	4b91      	ldr	r3, [pc, #580]	; (800ea88 <tcp_slowtmr+0x264>)
 800e844:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e846:	2300      	movs	r3, #0
 800e848:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e84a:	4b90      	ldr	r3, [pc, #576]	; (800ea8c <tcp_slowtmr+0x268>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e850:	e29f      	b.n	800ed92 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	7d1b      	ldrb	r3, [r3, #20]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d106      	bne.n	800e868 <tcp_slowtmr+0x44>
 800e85a:	4b8d      	ldr	r3, [pc, #564]	; (800ea90 <tcp_slowtmr+0x26c>)
 800e85c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e860:	498c      	ldr	r1, [pc, #560]	; (800ea94 <tcp_slowtmr+0x270>)
 800e862:	488d      	ldr	r0, [pc, #564]	; (800ea98 <tcp_slowtmr+0x274>)
 800e864:	f00a fd62 	bl	801932c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	7d1b      	ldrb	r3, [r3, #20]
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d106      	bne.n	800e87e <tcp_slowtmr+0x5a>
 800e870:	4b87      	ldr	r3, [pc, #540]	; (800ea90 <tcp_slowtmr+0x26c>)
 800e872:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e876:	4989      	ldr	r1, [pc, #548]	; (800ea9c <tcp_slowtmr+0x278>)
 800e878:	4887      	ldr	r0, [pc, #540]	; (800ea98 <tcp_slowtmr+0x274>)
 800e87a:	f00a fd57 	bl	801932c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	7d1b      	ldrb	r3, [r3, #20]
 800e882:	2b0a      	cmp	r3, #10
 800e884:	d106      	bne.n	800e894 <tcp_slowtmr+0x70>
 800e886:	4b82      	ldr	r3, [pc, #520]	; (800ea90 <tcp_slowtmr+0x26c>)
 800e888:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e88c:	4984      	ldr	r1, [pc, #528]	; (800eaa0 <tcp_slowtmr+0x27c>)
 800e88e:	4882      	ldr	r0, [pc, #520]	; (800ea98 <tcp_slowtmr+0x274>)
 800e890:	f00a fd4c 	bl	801932c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	7f9a      	ldrb	r2, [r3, #30]
 800e898:	4b7b      	ldr	r3, [pc, #492]	; (800ea88 <tcp_slowtmr+0x264>)
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d105      	bne.n	800e8ac <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e8aa:	e272      	b.n	800ed92 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e8ac:	4b76      	ldr	r3, [pc, #472]	; (800ea88 <tcp_slowtmr+0x264>)
 800e8ae:	781a      	ldrb	r2, [r3, #0]
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c2:	7d1b      	ldrb	r3, [r3, #20]
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d10a      	bne.n	800e8de <tcp_slowtmr+0xba>
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8ce:	2b05      	cmp	r3, #5
 800e8d0:	d905      	bls.n	800e8de <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e8d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8dc:	e11e      	b.n	800eb1c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8e4:	2b0b      	cmp	r3, #11
 800e8e6:	d905      	bls.n	800e8f4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e8e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8f2:	e113      	b.n	800eb1c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d075      	beq.n	800e9ea <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e902:	2b00      	cmp	r3, #0
 800e904:	d006      	beq.n	800e914 <tcp_slowtmr+0xf0>
 800e906:	4b62      	ldr	r3, [pc, #392]	; (800ea90 <tcp_slowtmr+0x26c>)
 800e908:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e90c:	4965      	ldr	r1, [pc, #404]	; (800eaa4 <tcp_slowtmr+0x280>)
 800e90e:	4862      	ldr	r0, [pc, #392]	; (800ea98 <tcp_slowtmr+0x274>)
 800e910:	f00a fd0c 	bl	801932c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d106      	bne.n	800e92a <tcp_slowtmr+0x106>
 800e91c:	4b5c      	ldr	r3, [pc, #368]	; (800ea90 <tcp_slowtmr+0x26c>)
 800e91e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e922:	4961      	ldr	r1, [pc, #388]	; (800eaa8 <tcp_slowtmr+0x284>)
 800e924:	485c      	ldr	r0, [pc, #368]	; (800ea98 <tcp_slowtmr+0x274>)
 800e926:	f00a fd01 	bl	801932c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e930:	2b0b      	cmp	r3, #11
 800e932:	d905      	bls.n	800e940 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e938:	3301      	adds	r3, #1
 800e93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e93e:	e0ed      	b.n	800eb1c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e942:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e946:	3b01      	subs	r3, #1
 800e948:	4a58      	ldr	r2, [pc, #352]	; (800eaac <tcp_slowtmr+0x288>)
 800e94a:	5cd3      	ldrb	r3, [r2, r3]
 800e94c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e950:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e954:	7c7a      	ldrb	r2, [r7, #17]
 800e956:	429a      	cmp	r2, r3
 800e958:	d907      	bls.n	800e96a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e960:	3301      	adds	r3, #1
 800e962:	b2da      	uxtb	r2, r3
 800e964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e966:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e970:	7c7a      	ldrb	r2, [r7, #17]
 800e972:	429a      	cmp	r2, r3
 800e974:	f200 80d2 	bhi.w	800eb1c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e978:	2301      	movs	r3, #1
 800e97a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e982:	2b00      	cmp	r3, #0
 800e984:	d108      	bne.n	800e998 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e988:	f005 f958 	bl	8013c3c <tcp_zero_window_probe>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d014      	beq.n	800e9bc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e992:	2300      	movs	r3, #0
 800e994:	623b      	str	r3, [r7, #32]
 800e996:	e011      	b.n	800e9bc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e99e:	4619      	mov	r1, r3
 800e9a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9a2:	f004 f80d 	bl	80129c0 <tcp_split_unsent_seg>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d107      	bne.n	800e9bc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e9ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9ae:	f004 fa8d 	bl	8012ecc <tcp_output>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d101      	bne.n	800e9bc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f000 80ac 	beq.w	800eb1c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e9d2:	2b06      	cmp	r3, #6
 800e9d4:	f200 80a2 	bhi.w	800eb1c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e9de:	3301      	adds	r3, #1
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e9e8:	e098      	b.n	800eb1c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	db0f      	blt.n	800ea14 <tcp_slowtmr+0x1f0>
 800e9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d008      	beq.n	800ea14 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ea02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	b21a      	sxth	r2, r3
 800ea10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea12:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ea14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea16:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ea1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ea20:	429a      	cmp	r2, r3
 800ea22:	db7b      	blt.n	800eb1c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ea24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea26:	f004 fd49 	bl	80134bc <tcp_rexmit_rto_prepare>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d007      	beq.n	800ea40 <tcp_slowtmr+0x21c>
 800ea30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d171      	bne.n	800eb1c <tcp_slowtmr+0x2f8>
 800ea38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d06d      	beq.n	800eb1c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ea40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea42:	7d1b      	ldrb	r3, [r3, #20]
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	d03a      	beq.n	800eabe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea4e:	2b0c      	cmp	r3, #12
 800ea50:	bf28      	it	cs
 800ea52:	230c      	movcs	r3, #12
 800ea54:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ea56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea5c:	10db      	asrs	r3, r3, #3
 800ea5e:	b21b      	sxth	r3, r3
 800ea60:	461a      	mov	r2, r3
 800ea62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea68:	4413      	add	r3, r2
 800ea6a:	7efa      	ldrb	r2, [r7, #27]
 800ea6c:	4910      	ldr	r1, [pc, #64]	; (800eab0 <tcp_slowtmr+0x28c>)
 800ea6e:	5c8a      	ldrb	r2, [r1, r2]
 800ea70:	4093      	lsls	r3, r2
 800ea72:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	dc1a      	bgt.n	800eab4 <tcp_slowtmr+0x290>
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	b21a      	sxth	r2, r3
 800ea82:	e019      	b.n	800eab8 <tcp_slowtmr+0x294>
 800ea84:	2000b138 	.word	0x2000b138
 800ea88:	2000424e 	.word	0x2000424e
 800ea8c:	2000b134 	.word	0x2000b134
 800ea90:	0801be24 	.word	0x0801be24
 800ea94:	0801c168 	.word	0x0801c168
 800ea98:	0801be68 	.word	0x0801be68
 800ea9c:	0801c194 	.word	0x0801c194
 800eaa0:	0801c1c0 	.word	0x0801c1c0
 800eaa4:	0801c1f0 	.word	0x0801c1f0
 800eaa8:	0801c224 	.word	0x0801c224
 800eaac:	0801e218 	.word	0x0801e218
 800eab0:	0801e208 	.word	0x0801e208
 800eab4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800eab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800eabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac0:	2200      	movs	r2, #0
 800eac2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800eac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eacc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ead0:	4293      	cmp	r3, r2
 800ead2:	bf28      	it	cs
 800ead4:	4613      	movcs	r3, r2
 800ead6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ead8:	8a7b      	ldrh	r3, [r7, #18]
 800eada:	085b      	lsrs	r3, r3, #1
 800eadc:	b29a      	uxth	r2, r3
 800eade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800eae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaee:	005b      	lsls	r3, r3, #1
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d206      	bcs.n	800eb04 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800eaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eafa:	005b      	lsls	r3, r3, #1
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800eb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb06:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800eb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800eb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb10:	2200      	movs	r2, #0
 800eb12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800eb16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb18:	f004 fd40 	bl	801359c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	7d1b      	ldrb	r3, [r3, #20]
 800eb20:	2b06      	cmp	r3, #6
 800eb22:	d111      	bne.n	800eb48 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800eb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb26:	8b5b      	ldrh	r3, [r3, #26]
 800eb28:	f003 0310 	and.w	r3, r3, #16
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00b      	beq.n	800eb48 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb30:	4b9d      	ldr	r3, [pc, #628]	; (800eda8 <tcp_slowtmr+0x584>)
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb36:	6a1b      	ldr	r3, [r3, #32]
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	2b28      	cmp	r3, #40	; 0x28
 800eb3c:	d904      	bls.n	800eb48 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800eb3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb42:	3301      	adds	r3, #1
 800eb44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4a:	7a5b      	ldrb	r3, [r3, #9]
 800eb4c:	f003 0308 	and.w	r3, r3, #8
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d04c      	beq.n	800ebee <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800eb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb56:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eb58:	2b04      	cmp	r3, #4
 800eb5a:	d003      	beq.n	800eb64 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800eb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800eb60:	2b07      	cmp	r3, #7
 800eb62:	d144      	bne.n	800ebee <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb64:	4b90      	ldr	r3, [pc, #576]	; (800eda8 <tcp_slowtmr+0x584>)
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6a:	6a1b      	ldr	r3, [r3, #32]
 800eb6c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800eb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eb74:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800eb78:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800eb7c:	498b      	ldr	r1, [pc, #556]	; (800edac <tcp_slowtmr+0x588>)
 800eb7e:	fba1 1303 	umull	r1, r3, r1, r3
 800eb82:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d90a      	bls.n	800eb9e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800eb88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800eb92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb96:	3301      	adds	r3, #1
 800eb98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eb9c:	e027      	b.n	800ebee <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb9e:	4b82      	ldr	r3, [pc, #520]	; (800eda8 <tcp_slowtmr+0x584>)
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba4:	6a1b      	ldr	r3, [r3, #32]
 800eba6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	4b7e      	ldr	r3, [pc, #504]	; (800edb0 <tcp_slowtmr+0x58c>)
 800ebb8:	fb03 f300 	mul.w	r3, r3, r0
 800ebbc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ebbe:	497b      	ldr	r1, [pc, #492]	; (800edac <tcp_slowtmr+0x588>)
 800ebc0:	fba1 1303 	umull	r1, r3, r1, r3
 800ebc4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d911      	bls.n	800ebee <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ebca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebcc:	f004 fff6 	bl	8013bbc <tcp_keepalive>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ebd6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d107      	bne.n	800ebee <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ebee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d011      	beq.n	800ec1a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ebf6:	4b6c      	ldr	r3, [pc, #432]	; (800eda8 <tcp_slowtmr+0x584>)
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfc:	6a1b      	ldr	r3, [r3, #32]
 800ebfe:	1ad2      	subs	r2, r2, r3
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ec06:	4619      	mov	r1, r3
 800ec08:	460b      	mov	r3, r1
 800ec0a:	005b      	lsls	r3, r3, #1
 800ec0c:	440b      	add	r3, r1
 800ec0e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d302      	bcc.n	800ec1a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ec14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec16:	f000 fea5 	bl	800f964 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	7d1b      	ldrb	r3, [r3, #20]
 800ec1e:	2b03      	cmp	r3, #3
 800ec20:	d10b      	bne.n	800ec3a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec22:	4b61      	ldr	r3, [pc, #388]	; (800eda8 <tcp_slowtmr+0x584>)
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	6a1b      	ldr	r3, [r3, #32]
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	2b28      	cmp	r3, #40	; 0x28
 800ec2e:	d904      	bls.n	800ec3a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ec30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec34:	3301      	adds	r3, #1
 800ec36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3c:	7d1b      	ldrb	r3, [r3, #20]
 800ec3e:	2b09      	cmp	r3, #9
 800ec40:	d10b      	bne.n	800ec5a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ec42:	4b59      	ldr	r3, [pc, #356]	; (800eda8 <tcp_slowtmr+0x584>)
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec48:	6a1b      	ldr	r3, [r3, #32]
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	2bf0      	cmp	r3, #240	; 0xf0
 800ec4e:	d904      	bls.n	800ec5a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ec50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec54:	3301      	adds	r3, #1
 800ec56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ec5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d060      	beq.n	800ed24 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ec62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec68:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ec6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec6c:	f000 fcc6 	bl	800f5fc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ec70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d010      	beq.n	800ec98 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ec76:	4b4f      	ldr	r3, [pc, #316]	; (800edb4 <tcp_slowtmr+0x590>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d106      	bne.n	800ec8e <tcp_slowtmr+0x46a>
 800ec80:	4b4d      	ldr	r3, [pc, #308]	; (800edb8 <tcp_slowtmr+0x594>)
 800ec82:	f240 526d 	movw	r2, #1389	; 0x56d
 800ec86:	494d      	ldr	r1, [pc, #308]	; (800edbc <tcp_slowtmr+0x598>)
 800ec88:	484d      	ldr	r0, [pc, #308]	; (800edc0 <tcp_slowtmr+0x59c>)
 800ec8a:	f00a fb4f 	bl	801932c <iprintf>
        prev->next = pcb->next;
 800ec8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec90:	68da      	ldr	r2, [r3, #12]
 800ec92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec94:	60da      	str	r2, [r3, #12]
 800ec96:	e00f      	b.n	800ecb8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ec98:	4b46      	ldr	r3, [pc, #280]	; (800edb4 <tcp_slowtmr+0x590>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d006      	beq.n	800ecb0 <tcp_slowtmr+0x48c>
 800eca2:	4b45      	ldr	r3, [pc, #276]	; (800edb8 <tcp_slowtmr+0x594>)
 800eca4:	f240 5271 	movw	r2, #1393	; 0x571
 800eca8:	4946      	ldr	r1, [pc, #280]	; (800edc4 <tcp_slowtmr+0x5a0>)
 800ecaa:	4845      	ldr	r0, [pc, #276]	; (800edc0 <tcp_slowtmr+0x59c>)
 800ecac:	f00a fb3e 	bl	801932c <iprintf>
        tcp_active_pcbs = pcb->next;
 800ecb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	4a3f      	ldr	r2, [pc, #252]	; (800edb4 <tcp_slowtmr+0x590>)
 800ecb6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ecb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d013      	beq.n	800ece8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ecc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ecc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ecc8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ecca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eccc:	3304      	adds	r3, #4
 800ecce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecd0:	8ad2      	ldrh	r2, [r2, #22]
 800ecd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecd4:	8b09      	ldrh	r1, [r1, #24]
 800ecd6:	9102      	str	r1, [sp, #8]
 800ecd8:	9201      	str	r2, [sp, #4]
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	462b      	mov	r3, r5
 800ecde:	4622      	mov	r2, r4
 800ece0:	4601      	mov	r1, r0
 800ece2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ece4:	f004 feb6 	bl	8013a54 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ece8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecea:	691b      	ldr	r3, [r3, #16]
 800ecec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ecee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf0:	7d1b      	ldrb	r3, [r3, #20]
 800ecf2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ecf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ecf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ecfe:	6838      	ldr	r0, [r7, #0]
 800ed00:	f7fe ffde 	bl	800dcc0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ed04:	4b30      	ldr	r3, [pc, #192]	; (800edc8 <tcp_slowtmr+0x5a4>)
 800ed06:	2200      	movs	r2, #0
 800ed08:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d004      	beq.n	800ed1a <tcp_slowtmr+0x4f6>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f06f 010c 	mvn.w	r1, #12
 800ed16:	68b8      	ldr	r0, [r7, #8]
 800ed18:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ed1a:	4b2b      	ldr	r3, [pc, #172]	; (800edc8 <tcp_slowtmr+0x5a4>)
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d037      	beq.n	800ed92 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ed22:	e590      	b.n	800e846 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ed24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed26:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ed28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ed2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed30:	7f1b      	ldrb	r3, [r3, #28]
 800ed32:	3301      	adds	r3, #1
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed38:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	7f1a      	ldrb	r2, [r3, #28]
 800ed3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed40:	7f5b      	ldrb	r3, [r3, #29]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d325      	bcc.n	800ed92 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed48:	2200      	movs	r2, #0
 800ed4a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ed4c:	4b1e      	ldr	r3, [pc, #120]	; (800edc8 <tcp_slowtmr+0x5a4>)
 800ed4e:	2200      	movs	r2, #0
 800ed50:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ed52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00b      	beq.n	800ed74 <tcp_slowtmr+0x550>
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed64:	6912      	ldr	r2, [r2, #16]
 800ed66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed68:	4610      	mov	r0, r2
 800ed6a:	4798      	blx	r3
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ed72:	e002      	b.n	800ed7a <tcp_slowtmr+0x556>
 800ed74:	2300      	movs	r3, #0
 800ed76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ed7a:	4b13      	ldr	r3, [pc, #76]	; (800edc8 <tcp_slowtmr+0x5a4>)
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d000      	beq.n	800ed84 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ed82:	e560      	b.n	800e846 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ed84:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d102      	bne.n	800ed92 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ed8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed8e:	f004 f89d 	bl	8012ecc <tcp_output>
  while (pcb != NULL) {
 800ed92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f47f ad5c 	bne.w	800e852 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ed9e:	4b0b      	ldr	r3, [pc, #44]	; (800edcc <tcp_slowtmr+0x5a8>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eda4:	e067      	b.n	800ee76 <tcp_slowtmr+0x652>
 800eda6:	bf00      	nop
 800eda8:	2000b138 	.word	0x2000b138
 800edac:	10624dd3 	.word	0x10624dd3
 800edb0:	000124f8 	.word	0x000124f8
 800edb4:	2000b134 	.word	0x2000b134
 800edb8:	0801be24 	.word	0x0801be24
 800edbc:	0801c25c 	.word	0x0801c25c
 800edc0:	0801be68 	.word	0x0801be68
 800edc4:	0801c288 	.word	0x0801c288
 800edc8:	2000b130 	.word	0x2000b130
 800edcc:	2000b144 	.word	0x2000b144
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800edd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd2:	7d1b      	ldrb	r3, [r3, #20]
 800edd4:	2b0a      	cmp	r3, #10
 800edd6:	d006      	beq.n	800ede6 <tcp_slowtmr+0x5c2>
 800edd8:	4b2a      	ldr	r3, [pc, #168]	; (800ee84 <tcp_slowtmr+0x660>)
 800edda:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800edde:	492a      	ldr	r1, [pc, #168]	; (800ee88 <tcp_slowtmr+0x664>)
 800ede0:	482a      	ldr	r0, [pc, #168]	; (800ee8c <tcp_slowtmr+0x668>)
 800ede2:	f00a faa3 	bl	801932c <iprintf>
    pcb_remove = 0;
 800ede6:	2300      	movs	r3, #0
 800ede8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800edec:	4b28      	ldr	r3, [pc, #160]	; (800ee90 <tcp_slowtmr+0x66c>)
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	1ad3      	subs	r3, r2, r3
 800edf6:	2bf0      	cmp	r3, #240	; 0xf0
 800edf8:	d904      	bls.n	800ee04 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800edfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edfe:	3301      	adds	r3, #1
 800ee00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ee04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d02f      	beq.n	800ee6c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ee0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee0e:	f000 fbf5 	bl	800f5fc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ee12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d010      	beq.n	800ee3a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ee18:	4b1e      	ldr	r3, [pc, #120]	; (800ee94 <tcp_slowtmr+0x670>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d106      	bne.n	800ee30 <tcp_slowtmr+0x60c>
 800ee22:	4b18      	ldr	r3, [pc, #96]	; (800ee84 <tcp_slowtmr+0x660>)
 800ee24:	f240 52af 	movw	r2, #1455	; 0x5af
 800ee28:	491b      	ldr	r1, [pc, #108]	; (800ee98 <tcp_slowtmr+0x674>)
 800ee2a:	4818      	ldr	r0, [pc, #96]	; (800ee8c <tcp_slowtmr+0x668>)
 800ee2c:	f00a fa7e 	bl	801932c <iprintf>
        prev->next = pcb->next;
 800ee30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee32:	68da      	ldr	r2, [r3, #12]
 800ee34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee36:	60da      	str	r2, [r3, #12]
 800ee38:	e00f      	b.n	800ee5a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ee3a:	4b16      	ldr	r3, [pc, #88]	; (800ee94 <tcp_slowtmr+0x670>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d006      	beq.n	800ee52 <tcp_slowtmr+0x62e>
 800ee44:	4b0f      	ldr	r3, [pc, #60]	; (800ee84 <tcp_slowtmr+0x660>)
 800ee46:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ee4a:	4914      	ldr	r1, [pc, #80]	; (800ee9c <tcp_slowtmr+0x678>)
 800ee4c:	480f      	ldr	r0, [pc, #60]	; (800ee8c <tcp_slowtmr+0x668>)
 800ee4e:	f00a fa6d 	bl	801932c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ee52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	4a0f      	ldr	r2, [pc, #60]	; (800ee94 <tcp_slowtmr+0x670>)
 800ee58:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ee5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ee5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ee64:	69f8      	ldr	r0, [r7, #28]
 800ee66:	f7fe ff2b 	bl	800dcc0 <tcp_free>
 800ee6a:	e004      	b.n	800ee76 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ee6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ee70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ee76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1a9      	bne.n	800edd0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ee7c:	bf00      	nop
 800ee7e:	3730      	adds	r7, #48	; 0x30
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bdb0      	pop	{r4, r5, r7, pc}
 800ee84:	0801be24 	.word	0x0801be24
 800ee88:	0801c2b4 	.word	0x0801c2b4
 800ee8c:	0801be68 	.word	0x0801be68
 800ee90:	2000b138 	.word	0x2000b138
 800ee94:	2000b144 	.word	0x2000b144
 800ee98:	0801c2e4 	.word	0x0801c2e4
 800ee9c:	0801c30c 	.word	0x0801c30c

0800eea0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800eea6:	4b2d      	ldr	r3, [pc, #180]	; (800ef5c <tcp_fasttmr+0xbc>)
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	4b2b      	ldr	r3, [pc, #172]	; (800ef5c <tcp_fasttmr+0xbc>)
 800eeb0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eeb2:	4b2b      	ldr	r3, [pc, #172]	; (800ef60 <tcp_fasttmr+0xc0>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eeb8:	e048      	b.n	800ef4c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	7f9a      	ldrb	r2, [r3, #30]
 800eebe:	4b27      	ldr	r3, [pc, #156]	; (800ef5c <tcp_fasttmr+0xbc>)
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d03f      	beq.n	800ef46 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eec6:	4b25      	ldr	r3, [pc, #148]	; (800ef5c <tcp_fasttmr+0xbc>)
 800eec8:	781a      	ldrb	r2, [r3, #0]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	8b5b      	ldrh	r3, [r3, #26]
 800eed2:	f003 0301 	and.w	r3, r3, #1
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d010      	beq.n	800eefc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	8b5b      	ldrh	r3, [r3, #26]
 800eede:	f043 0302 	orr.w	r3, r3, #2
 800eee2:	b29a      	uxth	r2, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f003 ffef 	bl	8012ecc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	8b5b      	ldrh	r3, [r3, #26]
 800eef2:	f023 0303 	bic.w	r3, r3, #3
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	8b5b      	ldrh	r3, [r3, #26]
 800ef00:	f003 0308 	and.w	r3, r3, #8
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d009      	beq.n	800ef1c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	8b5b      	ldrh	r3, [r3, #26]
 800ef0c:	f023 0308 	bic.w	r3, r3, #8
 800ef10:	b29a      	uxth	r2, r3
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7ff f862 	bl	800dfe0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00a      	beq.n	800ef40 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ef2a:	4b0e      	ldr	r3, [pc, #56]	; (800ef64 <tcp_fasttmr+0xc4>)
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 f819 	bl	800ef68 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ef36:	4b0b      	ldr	r3, [pc, #44]	; (800ef64 <tcp_fasttmr+0xc4>)
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d000      	beq.n	800ef40 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ef3e:	e7b8      	b.n	800eeb2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	607b      	str	r3, [r7, #4]
 800ef44:	e002      	b.n	800ef4c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d1b3      	bne.n	800eeba <tcp_fasttmr+0x1a>
    }
  }
}
 800ef52:	bf00      	nop
 800ef54:	3708      	adds	r7, #8
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	2000424e 	.word	0x2000424e
 800ef60:	2000b134 	.word	0x2000b134
 800ef64:	2000b130 	.word	0x2000b130

0800ef68 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ef68:	b590      	push	{r4, r7, lr}
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d109      	bne.n	800ef8a <tcp_process_refused_data+0x22>
 800ef76:	4b37      	ldr	r3, [pc, #220]	; (800f054 <tcp_process_refused_data+0xec>)
 800ef78:	f240 6209 	movw	r2, #1545	; 0x609
 800ef7c:	4936      	ldr	r1, [pc, #216]	; (800f058 <tcp_process_refused_data+0xf0>)
 800ef7e:	4837      	ldr	r0, [pc, #220]	; (800f05c <tcp_process_refused_data+0xf4>)
 800ef80:	f00a f9d4 	bl	801932c <iprintf>
 800ef84:	f06f 030f 	mvn.w	r3, #15
 800ef88:	e060      	b.n	800f04c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef8e:	7b5b      	ldrb	r3, [r3, #13]
 800ef90:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef96:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d00b      	beq.n	800efc0 <tcp_process_refused_data+0x58>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6918      	ldr	r0, [r3, #16]
 800efb2:	2300      	movs	r3, #0
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	6879      	ldr	r1, [r7, #4]
 800efb8:	47a0      	blx	r4
 800efba:	4603      	mov	r3, r0
 800efbc:	73fb      	strb	r3, [r7, #15]
 800efbe:	e007      	b.n	800efd0 <tcp_process_refused_data+0x68>
 800efc0:	2300      	movs	r3, #0
 800efc2:	68ba      	ldr	r2, [r7, #8]
 800efc4:	6879      	ldr	r1, [r7, #4]
 800efc6:	2000      	movs	r0, #0
 800efc8:	f000 f8a2 	bl	800f110 <tcp_recv_null>
 800efcc:	4603      	mov	r3, r0
 800efce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800efd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d12a      	bne.n	800f02e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800efd8:	7bbb      	ldrb	r3, [r7, #14]
 800efda:	f003 0320 	and.w	r3, r3, #32
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d033      	beq.n	800f04a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efe6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800efea:	d005      	beq.n	800eff8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eff0:	3301      	adds	r3, #1
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800effe:	2b00      	cmp	r3, #0
 800f000:	d00b      	beq.n	800f01a <tcp_process_refused_data+0xb2>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6918      	ldr	r0, [r3, #16]
 800f00c:	2300      	movs	r3, #0
 800f00e:	2200      	movs	r2, #0
 800f010:	6879      	ldr	r1, [r7, #4]
 800f012:	47a0      	blx	r4
 800f014:	4603      	mov	r3, r0
 800f016:	73fb      	strb	r3, [r7, #15]
 800f018:	e001      	b.n	800f01e <tcp_process_refused_data+0xb6>
 800f01a:	2300      	movs	r3, #0
 800f01c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f01e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f022:	f113 0f0d 	cmn.w	r3, #13
 800f026:	d110      	bne.n	800f04a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f028:	f06f 030c 	mvn.w	r3, #12
 800f02c:	e00e      	b.n	800f04c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f032:	f113 0f0d 	cmn.w	r3, #13
 800f036:	d102      	bne.n	800f03e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f038:	f06f 030c 	mvn.w	r3, #12
 800f03c:	e006      	b.n	800f04c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	68ba      	ldr	r2, [r7, #8]
 800f042:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f044:	f06f 0304 	mvn.w	r3, #4
 800f048:	e000      	b.n	800f04c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	bd90      	pop	{r4, r7, pc}
 800f054:	0801be24 	.word	0x0801be24
 800f058:	0801c334 	.word	0x0801c334
 800f05c:	0801be68 	.word	0x0801be68

0800f060 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f068:	e007      	b.n	800f07a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 f809 	bl	800f088 <tcp_seg_free>
    seg = next;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d1f4      	bne.n	800f06a <tcp_segs_free+0xa>
  }
}
 800f080:	bf00      	nop
 800f082:	3710      	adds	r7, #16
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00c      	beq.n	800f0b0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d004      	beq.n	800f0a8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fe fb50 	bl	800d748 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f0a8:	6879      	ldr	r1, [r7, #4]
 800f0aa:	2003      	movs	r0, #3
 800f0ac:	f7fd fc68 	bl	800c980 <memp_free>
  }
}
 800f0b0:	bf00      	nop
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d106      	bne.n	800f0d4 <tcp_seg_copy+0x1c>
 800f0c6:	4b0f      	ldr	r3, [pc, #60]	; (800f104 <tcp_seg_copy+0x4c>)
 800f0c8:	f240 6282 	movw	r2, #1666	; 0x682
 800f0cc:	490e      	ldr	r1, [pc, #56]	; (800f108 <tcp_seg_copy+0x50>)
 800f0ce:	480f      	ldr	r0, [pc, #60]	; (800f10c <tcp_seg_copy+0x54>)
 800f0d0:	f00a f92c 	bl	801932c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f0d4:	2003      	movs	r0, #3
 800f0d6:	f7fd fc01 	bl	800c8dc <memp_malloc>
 800f0da:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d101      	bne.n	800f0e6 <tcp_seg_copy+0x2e>
    return NULL;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	e00a      	b.n	800f0fc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f0e6:	2210      	movs	r2, #16
 800f0e8:	6879      	ldr	r1, [r7, #4]
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	f00a f90a 	bl	8019304 <memcpy>
  pbuf_ref(cseg->p);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fe fbcd 	bl	800d894 <pbuf_ref>
  return cseg;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3710      	adds	r7, #16
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	0801be24 	.word	0x0801be24
 800f108:	0801c378 	.word	0x0801c378
 800f10c:	0801be68 	.word	0x0801be68

0800f110 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
 800f11c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d109      	bne.n	800f138 <tcp_recv_null+0x28>
 800f124:	4b12      	ldr	r3, [pc, #72]	; (800f170 <tcp_recv_null+0x60>)
 800f126:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f12a:	4912      	ldr	r1, [pc, #72]	; (800f174 <tcp_recv_null+0x64>)
 800f12c:	4812      	ldr	r0, [pc, #72]	; (800f178 <tcp_recv_null+0x68>)
 800f12e:	f00a f8fd 	bl	801932c <iprintf>
 800f132:	f06f 030f 	mvn.w	r3, #15
 800f136:	e016      	b.n	800f166 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d009      	beq.n	800f152 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	891b      	ldrh	r3, [r3, #8]
 800f142:	4619      	mov	r1, r3
 800f144:	68b8      	ldr	r0, [r7, #8]
 800f146:	f7ff fad7 	bl	800e6f8 <tcp_recved>
    pbuf_free(p);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f7fe fafc 	bl	800d748 <pbuf_free>
 800f150:	e008      	b.n	800f164 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d104      	bne.n	800f164 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f15a:	68b8      	ldr	r0, [r7, #8]
 800f15c:	f7fe ffa6 	bl	800e0ac <tcp_close>
 800f160:	4603      	mov	r3, r0
 800f162:	e000      	b.n	800f166 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	0801be24 	.word	0x0801be24
 800f174:	0801c394 	.word	0x0801c394
 800f178:	0801be68 	.word	0x0801be68

0800f17c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b086      	sub	sp, #24
 800f180:	af00      	add	r7, sp, #0
 800f182:	4603      	mov	r3, r0
 800f184:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	db01      	blt.n	800f192 <tcp_kill_prio+0x16>
 800f18e:	79fb      	ldrb	r3, [r7, #7]
 800f190:	e000      	b.n	800f194 <tcp_kill_prio+0x18>
 800f192:	237f      	movs	r3, #127	; 0x7f
 800f194:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f196:	7afb      	ldrb	r3, [r7, #11]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d034      	beq.n	800f206 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f19c:	7afb      	ldrb	r3, [r7, #11]
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1aa:	4b19      	ldr	r3, [pc, #100]	; (800f210 <tcp_kill_prio+0x94>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	617b      	str	r3, [r7, #20]
 800f1b0:	e01f      	b.n	800f1f2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	7d5b      	ldrb	r3, [r3, #21]
 800f1b6:	7afa      	ldrb	r2, [r7, #11]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d80c      	bhi.n	800f1d6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f1c0:	7afa      	ldrb	r2, [r7, #11]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d112      	bne.n	800f1ec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f1c6:	4b13      	ldr	r3, [pc, #76]	; (800f214 <tcp_kill_prio+0x98>)
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	6a1b      	ldr	r3, [r3, #32]
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	68fa      	ldr	r2, [r7, #12]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d80a      	bhi.n	800f1ec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f1d6:	4b0f      	ldr	r3, [pc, #60]	; (800f214 <tcp_kill_prio+0x98>)
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	6a1b      	ldr	r3, [r3, #32]
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	7d5b      	ldrb	r3, [r3, #21]
 800f1ea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	617b      	str	r3, [r7, #20]
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d1dc      	bne.n	800f1b2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d004      	beq.n	800f208 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f1fe:	6938      	ldr	r0, [r7, #16]
 800f200:	f7ff f898 	bl	800e334 <tcp_abort>
 800f204:	e000      	b.n	800f208 <tcp_kill_prio+0x8c>
    return;
 800f206:	bf00      	nop
  }
}
 800f208:	3718      	adds	r7, #24
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	2000b134 	.word	0x2000b134
 800f214:	2000b138 	.word	0x2000b138

0800f218 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b086      	sub	sp, #24
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	4603      	mov	r3, r0
 800f220:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f222:	79fb      	ldrb	r3, [r7, #7]
 800f224:	2b08      	cmp	r3, #8
 800f226:	d009      	beq.n	800f23c <tcp_kill_state+0x24>
 800f228:	79fb      	ldrb	r3, [r7, #7]
 800f22a:	2b09      	cmp	r3, #9
 800f22c:	d006      	beq.n	800f23c <tcp_kill_state+0x24>
 800f22e:	4b1a      	ldr	r3, [pc, #104]	; (800f298 <tcp_kill_state+0x80>)
 800f230:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f234:	4919      	ldr	r1, [pc, #100]	; (800f29c <tcp_kill_state+0x84>)
 800f236:	481a      	ldr	r0, [pc, #104]	; (800f2a0 <tcp_kill_state+0x88>)
 800f238:	f00a f878 	bl	801932c <iprintf>

  inactivity = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f240:	2300      	movs	r3, #0
 800f242:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f244:	4b17      	ldr	r3, [pc, #92]	; (800f2a4 <tcp_kill_state+0x8c>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	617b      	str	r3, [r7, #20]
 800f24a:	e017      	b.n	800f27c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	7d1b      	ldrb	r3, [r3, #20]
 800f250:	79fa      	ldrb	r2, [r7, #7]
 800f252:	429a      	cmp	r2, r3
 800f254:	d10f      	bne.n	800f276 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f256:	4b14      	ldr	r3, [pc, #80]	; (800f2a8 <tcp_kill_state+0x90>)
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	6a1b      	ldr	r3, [r3, #32]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	429a      	cmp	r2, r3
 800f264:	d807      	bhi.n	800f276 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f266:	4b10      	ldr	r3, [pc, #64]	; (800f2a8 <tcp_kill_state+0x90>)
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	6a1b      	ldr	r3, [r3, #32]
 800f26e:	1ad3      	subs	r3, r2, r3
 800f270:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	617b      	str	r3, [r7, #20]
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d1e4      	bne.n	800f24c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d003      	beq.n	800f290 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f288:	2100      	movs	r1, #0
 800f28a:	6938      	ldr	r0, [r7, #16]
 800f28c:	f7fe ff94 	bl	800e1b8 <tcp_abandon>
  }
}
 800f290:	bf00      	nop
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}
 800f298:	0801be24 	.word	0x0801be24
 800f29c:	0801c3b0 	.word	0x0801c3b0
 800f2a0:	0801be68 	.word	0x0801be68
 800f2a4:	2000b134 	.word	0x2000b134
 800f2a8:	2000b138 	.word	0x2000b138

0800f2ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2ba:	4b12      	ldr	r3, [pc, #72]	; (800f304 <tcp_kill_timewait+0x58>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	60fb      	str	r3, [r7, #12]
 800f2c0:	e012      	b.n	800f2e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f2c2:	4b11      	ldr	r3, [pc, #68]	; (800f308 <tcp_kill_timewait+0x5c>)
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	6a1b      	ldr	r3, [r3, #32]
 800f2ca:	1ad3      	subs	r3, r2, r3
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d807      	bhi.n	800f2e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f2d2:	4b0d      	ldr	r3, [pc, #52]	; (800f308 <tcp_kill_timewait+0x5c>)
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6a1b      	ldr	r3, [r3, #32]
 800f2da:	1ad3      	subs	r3, r2, r3
 800f2dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	60fb      	str	r3, [r7, #12]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1e9      	bne.n	800f2c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f2f4:	68b8      	ldr	r0, [r7, #8]
 800f2f6:	f7ff f81d 	bl	800e334 <tcp_abort>
  }
}
 800f2fa:	bf00      	nop
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	2000b144 	.word	0x2000b144
 800f308:	2000b138 	.word	0x2000b138

0800f30c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f312:	4b10      	ldr	r3, [pc, #64]	; (800f354 <tcp_handle_closepend+0x48>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f318:	e014      	b.n	800f344 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	8b5b      	ldrh	r3, [r3, #26]
 800f324:	f003 0308 	and.w	r3, r3, #8
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d009      	beq.n	800f340 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	8b5b      	ldrh	r3, [r3, #26]
 800f330:	f023 0308 	bic.w	r3, r3, #8
 800f334:	b29a      	uxth	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7fe fe50 	bl	800dfe0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1e7      	bne.n	800f31a <tcp_handle_closepend+0xe>
  }
}
 800f34a:	bf00      	nop
 800f34c:	3708      	adds	r7, #8
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	2000b134 	.word	0x2000b134

0800f358 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f362:	2001      	movs	r0, #1
 800f364:	f7fd faba 	bl	800c8dc <memp_malloc>
 800f368:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d126      	bne.n	800f3be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f370:	f7ff ffcc 	bl	800f30c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f374:	f7ff ff9a 	bl	800f2ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f378:	2001      	movs	r0, #1
 800f37a:	f7fd faaf 	bl	800c8dc <memp_malloc>
 800f37e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d11b      	bne.n	800f3be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f386:	2009      	movs	r0, #9
 800f388:	f7ff ff46 	bl	800f218 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f38c:	2001      	movs	r0, #1
 800f38e:	f7fd faa5 	bl	800c8dc <memp_malloc>
 800f392:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d111      	bne.n	800f3be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f39a:	2008      	movs	r0, #8
 800f39c:	f7ff ff3c 	bl	800f218 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f3a0:	2001      	movs	r0, #1
 800f3a2:	f7fd fa9b 	bl	800c8dc <memp_malloc>
 800f3a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d107      	bne.n	800f3be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f3ae:	79fb      	ldrb	r3, [r7, #7]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7ff fee3 	bl	800f17c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f3b6:	2001      	movs	r0, #1
 800f3b8:	f7fd fa90 	bl	800c8dc <memp_malloc>
 800f3bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d03f      	beq.n	800f444 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f3c4:	229c      	movs	r2, #156	; 0x9c
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f009 ffa6 	bl	801931a <memset>
    pcb->prio = prio;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	79fa      	ldrb	r2, [r7, #7]
 800f3d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f3da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f3e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	22ff      	movs	r2, #255	; 0xff
 800f3f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f3fa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2206      	movs	r2, #6
 800f400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2206      	movs	r2, #6
 800f408:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f410:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2201      	movs	r2, #1
 800f416:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f41a:	4b0d      	ldr	r3, [pc, #52]	; (800f450 <tcp_alloc+0xf8>)
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f422:	4b0c      	ldr	r3, [pc, #48]	; (800f454 <tcp_alloc+0xfc>)
 800f424:	781a      	ldrb	r2, [r3, #0]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f430:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	4a08      	ldr	r2, [pc, #32]	; (800f458 <tcp_alloc+0x100>)
 800f438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	4a07      	ldr	r2, [pc, #28]	; (800f45c <tcp_alloc+0x104>)
 800f440:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f444:	68fb      	ldr	r3, [r7, #12]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	2000b138 	.word	0x2000b138
 800f454:	2000424e 	.word	0x2000424e
 800f458:	0800f111 	.word	0x0800f111
 800f45c:	006ddd00 	.word	0x006ddd00

0800f460 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	4603      	mov	r3, r0
 800f468:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f46a:	2040      	movs	r0, #64	; 0x40
 800f46c:	f7ff ff74 	bl	800f358 <tcp_alloc>
 800f470:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f472:	68fb      	ldr	r3, [r7, #12]
}
 800f474:	4618      	mov	r0, r3
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d002      	beq.n	800f492 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	611a      	str	r2, [r3, #16]
  }
}
 800f492:	bf00      	nop
 800f494:	370c      	adds	r7, #12
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
	...

0800f4a0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00e      	beq.n	800f4ce <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d106      	bne.n	800f4c6 <tcp_recv+0x26>
 800f4b8:	4b07      	ldr	r3, [pc, #28]	; (800f4d8 <tcp_recv+0x38>)
 800f4ba:	f240 72df 	movw	r2, #2015	; 0x7df
 800f4be:	4907      	ldr	r1, [pc, #28]	; (800f4dc <tcp_recv+0x3c>)
 800f4c0:	4807      	ldr	r0, [pc, #28]	; (800f4e0 <tcp_recv+0x40>)
 800f4c2:	f009 ff33 	bl	801932c <iprintf>
    pcb->recv = recv;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f4ce:	bf00      	nop
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	0801be24 	.word	0x0801be24
 800f4dc:	0801c3c0 	.word	0x0801c3c0
 800f4e0:	0801be68 	.word	0x0801be68

0800f4e4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d00e      	beq.n	800f512 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	7d1b      	ldrb	r3, [r3, #20]
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d106      	bne.n	800f50a <tcp_sent+0x26>
 800f4fc:	4b07      	ldr	r3, [pc, #28]	; (800f51c <tcp_sent+0x38>)
 800f4fe:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f502:	4907      	ldr	r1, [pc, #28]	; (800f520 <tcp_sent+0x3c>)
 800f504:	4807      	ldr	r0, [pc, #28]	; (800f524 <tcp_sent+0x40>)
 800f506:	f009 ff11 	bl	801932c <iprintf>
    pcb->sent = sent;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	683a      	ldr	r2, [r7, #0]
 800f50e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f512:	bf00      	nop
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	0801be24 	.word	0x0801be24
 800f520:	0801c3e8 	.word	0x0801c3e8
 800f524:	0801be68 	.word	0x0801be68

0800f528 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d00e      	beq.n	800f556 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	7d1b      	ldrb	r3, [r3, #20]
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d106      	bne.n	800f54e <tcp_err+0x26>
 800f540:	4b07      	ldr	r3, [pc, #28]	; (800f560 <tcp_err+0x38>)
 800f542:	f640 020d 	movw	r2, #2061	; 0x80d
 800f546:	4907      	ldr	r1, [pc, #28]	; (800f564 <tcp_err+0x3c>)
 800f548:	4807      	ldr	r0, [pc, #28]	; (800f568 <tcp_err+0x40>)
 800f54a:	f009 feef 	bl	801932c <iprintf>
    pcb->errf = err;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	683a      	ldr	r2, [r7, #0]
 800f552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f556:	bf00      	nop
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	0801be24 	.word	0x0801be24
 800f564:	0801c410 	.word	0x0801c410
 800f568:	0801be68 	.word	0x0801be68

0800f56c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b085      	sub	sp, #20
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d008      	beq.n	800f58e <tcp_accept+0x22>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	7d1b      	ldrb	r3, [r3, #20]
 800f580:	2b01      	cmp	r3, #1
 800f582:	d104      	bne.n	800f58e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	683a      	ldr	r2, [r7, #0]
 800f58c:	619a      	str	r2, [r3, #24]
  }
}
 800f58e:	bf00      	nop
 800f590:	3714      	adds	r7, #20
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr
	...

0800f59c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d107      	bne.n	800f5c0 <tcp_poll+0x24>
 800f5b0:	4b0e      	ldr	r3, [pc, #56]	; (800f5ec <tcp_poll+0x50>)
 800f5b2:	f640 023d 	movw	r2, #2109	; 0x83d
 800f5b6:	490e      	ldr	r1, [pc, #56]	; (800f5f0 <tcp_poll+0x54>)
 800f5b8:	480e      	ldr	r0, [pc, #56]	; (800f5f4 <tcp_poll+0x58>)
 800f5ba:	f009 feb7 	bl	801932c <iprintf>
 800f5be:	e011      	b.n	800f5e4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	7d1b      	ldrb	r3, [r3, #20]
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d106      	bne.n	800f5d6 <tcp_poll+0x3a>
 800f5c8:	4b08      	ldr	r3, [pc, #32]	; (800f5ec <tcp_poll+0x50>)
 800f5ca:	f640 023e 	movw	r2, #2110	; 0x83e
 800f5ce:	490a      	ldr	r1, [pc, #40]	; (800f5f8 <tcp_poll+0x5c>)
 800f5d0:	4808      	ldr	r0, [pc, #32]	; (800f5f4 <tcp_poll+0x58>)
 800f5d2:	f009 feab 	bl	801932c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	79fa      	ldrb	r2, [r7, #7]
 800f5e2:	775a      	strb	r2, [r3, #29]
}
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	0801be24 	.word	0x0801be24
 800f5f0:	0801c438 	.word	0x0801c438
 800f5f4:	0801be68 	.word	0x0801be68
 800f5f8:	0801c450 	.word	0x0801c450

0800f5fc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d107      	bne.n	800f61a <tcp_pcb_purge+0x1e>
 800f60a:	4b21      	ldr	r3, [pc, #132]	; (800f690 <tcp_pcb_purge+0x94>)
 800f60c:	f640 0251 	movw	r2, #2129	; 0x851
 800f610:	4920      	ldr	r1, [pc, #128]	; (800f694 <tcp_pcb_purge+0x98>)
 800f612:	4821      	ldr	r0, [pc, #132]	; (800f698 <tcp_pcb_purge+0x9c>)
 800f614:	f009 fe8a 	bl	801932c <iprintf>
 800f618:	e037      	b.n	800f68a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	7d1b      	ldrb	r3, [r3, #20]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d033      	beq.n	800f68a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f626:	2b0a      	cmp	r3, #10
 800f628:	d02f      	beq.n	800f68a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d02b      	beq.n	800f68a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f636:	2b00      	cmp	r3, #0
 800f638:	d007      	beq.n	800f64a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fe f882 	bl	800d748 <pbuf_free>
      pcb->refused_data = NULL;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d002      	beq.n	800f658 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 f986 	bl	800f964 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f65e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f664:	4618      	mov	r0, r3
 800f666:	f7ff fcfb 	bl	800f060 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f66e:	4618      	mov	r0, r3
 800f670:	f7ff fcf6 	bl	800f060 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	66da      	str	r2, [r3, #108]	; 0x6c
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f68a:	3708      	adds	r7, #8
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	0801be24 	.word	0x0801be24
 800f694:	0801c470 	.word	0x0801c470
 800f698:	0801be68 	.word	0x0801be68

0800f69c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d106      	bne.n	800f6ba <tcp_pcb_remove+0x1e>
 800f6ac:	4b3e      	ldr	r3, [pc, #248]	; (800f7a8 <tcp_pcb_remove+0x10c>)
 800f6ae:	f640 0283 	movw	r2, #2179	; 0x883
 800f6b2:	493e      	ldr	r1, [pc, #248]	; (800f7ac <tcp_pcb_remove+0x110>)
 800f6b4:	483e      	ldr	r0, [pc, #248]	; (800f7b0 <tcp_pcb_remove+0x114>)
 800f6b6:	f009 fe39 	bl	801932c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d106      	bne.n	800f6ce <tcp_pcb_remove+0x32>
 800f6c0:	4b39      	ldr	r3, [pc, #228]	; (800f7a8 <tcp_pcb_remove+0x10c>)
 800f6c2:	f640 0284 	movw	r2, #2180	; 0x884
 800f6c6:	493b      	ldr	r1, [pc, #236]	; (800f7b4 <tcp_pcb_remove+0x118>)
 800f6c8:	4839      	ldr	r0, [pc, #228]	; (800f7b0 <tcp_pcb_remove+0x114>)
 800f6ca:	f009 fe2f 	bl	801932c <iprintf>

  TCP_RMV(pcblist, pcb);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	683a      	ldr	r2, [r7, #0]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d105      	bne.n	800f6e4 <tcp_pcb_remove+0x48>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	68da      	ldr	r2, [r3, #12]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	e013      	b.n	800f70c <tcp_pcb_remove+0x70>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	60fb      	str	r3, [r7, #12]
 800f6ea:	e00c      	b.n	800f706 <tcp_pcb_remove+0x6a>
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d104      	bne.n	800f700 <tcp_pcb_remove+0x64>
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	68da      	ldr	r2, [r3, #12]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	60da      	str	r2, [r3, #12]
 800f6fe:	e005      	b.n	800f70c <tcp_pcb_remove+0x70>
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	60fb      	str	r3, [r7, #12]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d1ef      	bne.n	800f6ec <tcp_pcb_remove+0x50>
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	2200      	movs	r2, #0
 800f710:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f712:	6838      	ldr	r0, [r7, #0]
 800f714:	f7ff ff72 	bl	800f5fc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	7d1b      	ldrb	r3, [r3, #20]
 800f71c:	2b0a      	cmp	r3, #10
 800f71e:	d013      	beq.n	800f748 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f724:	2b01      	cmp	r3, #1
 800f726:	d00f      	beq.n	800f748 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	8b5b      	ldrh	r3, [r3, #26]
 800f72c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f730:	2b00      	cmp	r3, #0
 800f732:	d009      	beq.n	800f748 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	8b5b      	ldrh	r3, [r3, #26]
 800f738:	f043 0302 	orr.w	r3, r3, #2
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f742:	6838      	ldr	r0, [r7, #0]
 800f744:	f003 fbc2 	bl	8012ecc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	7d1b      	ldrb	r3, [r3, #20]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d020      	beq.n	800f792 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f754:	2b00      	cmp	r3, #0
 800f756:	d006      	beq.n	800f766 <tcp_pcb_remove+0xca>
 800f758:	4b13      	ldr	r3, [pc, #76]	; (800f7a8 <tcp_pcb_remove+0x10c>)
 800f75a:	f640 0293 	movw	r2, #2195	; 0x893
 800f75e:	4916      	ldr	r1, [pc, #88]	; (800f7b8 <tcp_pcb_remove+0x11c>)
 800f760:	4813      	ldr	r0, [pc, #76]	; (800f7b0 <tcp_pcb_remove+0x114>)
 800f762:	f009 fde3 	bl	801932c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d006      	beq.n	800f77c <tcp_pcb_remove+0xe0>
 800f76e:	4b0e      	ldr	r3, [pc, #56]	; (800f7a8 <tcp_pcb_remove+0x10c>)
 800f770:	f640 0294 	movw	r2, #2196	; 0x894
 800f774:	4911      	ldr	r1, [pc, #68]	; (800f7bc <tcp_pcb_remove+0x120>)
 800f776:	480e      	ldr	r0, [pc, #56]	; (800f7b0 <tcp_pcb_remove+0x114>)
 800f778:	f009 fdd8 	bl	801932c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f780:	2b00      	cmp	r3, #0
 800f782:	d006      	beq.n	800f792 <tcp_pcb_remove+0xf6>
 800f784:	4b08      	ldr	r3, [pc, #32]	; (800f7a8 <tcp_pcb_remove+0x10c>)
 800f786:	f640 0296 	movw	r2, #2198	; 0x896
 800f78a:	490d      	ldr	r1, [pc, #52]	; (800f7c0 <tcp_pcb_remove+0x124>)
 800f78c:	4808      	ldr	r0, [pc, #32]	; (800f7b0 <tcp_pcb_remove+0x114>)
 800f78e:	f009 fdcd 	bl	801932c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	2200      	movs	r2, #0
 800f796:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	2200      	movs	r2, #0
 800f79c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f79e:	bf00      	nop
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	0801be24 	.word	0x0801be24
 800f7ac:	0801c48c 	.word	0x0801c48c
 800f7b0:	0801be68 	.word	0x0801be68
 800f7b4:	0801c4a8 	.word	0x0801c4a8
 800f7b8:	0801c4c8 	.word	0x0801c4c8
 800f7bc:	0801c4e0 	.word	0x0801c4e0
 800f7c0:	0801c4fc 	.word	0x0801c4fc

0800f7c4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d106      	bne.n	800f7e0 <tcp_next_iss+0x1c>
 800f7d2:	4b0a      	ldr	r3, [pc, #40]	; (800f7fc <tcp_next_iss+0x38>)
 800f7d4:	f640 02af 	movw	r2, #2223	; 0x8af
 800f7d8:	4909      	ldr	r1, [pc, #36]	; (800f800 <tcp_next_iss+0x3c>)
 800f7da:	480a      	ldr	r0, [pc, #40]	; (800f804 <tcp_next_iss+0x40>)
 800f7dc:	f009 fda6 	bl	801932c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f7e0:	4b09      	ldr	r3, [pc, #36]	; (800f808 <tcp_next_iss+0x44>)
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	4b09      	ldr	r3, [pc, #36]	; (800f80c <tcp_next_iss+0x48>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	4a07      	ldr	r2, [pc, #28]	; (800f808 <tcp_next_iss+0x44>)
 800f7ec:	6013      	str	r3, [r2, #0]
  return iss;
 800f7ee:	4b06      	ldr	r3, [pc, #24]	; (800f808 <tcp_next_iss+0x44>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	0801be24 	.word	0x0801be24
 800f800:	0801c514 	.word	0x0801c514
 800f804:	0801be68 	.word	0x0801be68
 800f808:	20000014 	.word	0x20000014
 800f80c:	2000b138 	.word	0x2000b138

0800f810 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	4603      	mov	r3, r0
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
 800f81c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d106      	bne.n	800f832 <tcp_eff_send_mss_netif+0x22>
 800f824:	4b14      	ldr	r3, [pc, #80]	; (800f878 <tcp_eff_send_mss_netif+0x68>)
 800f826:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f82a:	4914      	ldr	r1, [pc, #80]	; (800f87c <tcp_eff_send_mss_netif+0x6c>)
 800f82c:	4814      	ldr	r0, [pc, #80]	; (800f880 <tcp_eff_send_mss_netif+0x70>)
 800f82e:	f009 fd7d 	bl	801932c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d101      	bne.n	800f83c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f838:	89fb      	ldrh	r3, [r7, #14]
 800f83a:	e019      	b.n	800f870 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f840:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f842:	8afb      	ldrh	r3, [r7, #22]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d012      	beq.n	800f86e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f848:	2328      	movs	r3, #40	; 0x28
 800f84a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f84c:	8afa      	ldrh	r2, [r7, #22]
 800f84e:	8abb      	ldrh	r3, [r7, #20]
 800f850:	429a      	cmp	r2, r3
 800f852:	d904      	bls.n	800f85e <tcp_eff_send_mss_netif+0x4e>
 800f854:	8afa      	ldrh	r2, [r7, #22]
 800f856:	8abb      	ldrh	r3, [r7, #20]
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	e000      	b.n	800f860 <tcp_eff_send_mss_netif+0x50>
 800f85e:	2300      	movs	r3, #0
 800f860:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f862:	8a7a      	ldrh	r2, [r7, #18]
 800f864:	89fb      	ldrh	r3, [r7, #14]
 800f866:	4293      	cmp	r3, r2
 800f868:	bf28      	it	cs
 800f86a:	4613      	movcs	r3, r2
 800f86c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f86e:	89fb      	ldrh	r3, [r7, #14]
}
 800f870:	4618      	mov	r0, r3
 800f872:	3718      	adds	r7, #24
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	0801be24 	.word	0x0801be24
 800f87c:	0801c530 	.word	0x0801c530
 800f880:	0801be68 	.word	0x0801be68

0800f884 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d119      	bne.n	800f8cc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f898:	4b10      	ldr	r3, [pc, #64]	; (800f8dc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f89a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f89e:	4910      	ldr	r1, [pc, #64]	; (800f8e0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f8a0:	4810      	ldr	r0, [pc, #64]	; (800f8e4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f8a2:	f009 fd43 	bl	801932c <iprintf>

  while (pcb != NULL) {
 800f8a6:	e011      	b.n	800f8cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d108      	bne.n	800f8c6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f7fe fd3a 	bl	800e334 <tcp_abort>
      pcb = next;
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	60fb      	str	r3, [r7, #12]
 800f8c4:	e002      	b.n	800f8cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1ea      	bne.n	800f8a8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f8d2:	bf00      	nop
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	0801be24 	.word	0x0801be24
 800f8e0:	0801c558 	.word	0x0801c558
 800f8e4:	0801be68 	.word	0x0801be68

0800f8e8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d02a      	beq.n	800f94e <tcp_netif_ip_addr_changed+0x66>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d026      	beq.n	800f94e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f900:	4b15      	ldr	r3, [pc, #84]	; (800f958 <tcp_netif_ip_addr_changed+0x70>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4619      	mov	r1, r3
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7ff ffbc 	bl	800f884 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f90c:	4b13      	ldr	r3, [pc, #76]	; (800f95c <tcp_netif_ip_addr_changed+0x74>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4619      	mov	r1, r3
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f7ff ffb6 	bl	800f884 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d017      	beq.n	800f94e <tcp_netif_ip_addr_changed+0x66>
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d013      	beq.n	800f94e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f926:	4b0e      	ldr	r3, [pc, #56]	; (800f960 <tcp_netif_ip_addr_changed+0x78>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	60fb      	str	r3, [r7, #12]
 800f92c:	e00c      	b.n	800f948 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	429a      	cmp	r2, r3
 800f938:	d103      	bne.n	800f942 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	60fb      	str	r3, [r7, #12]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1ef      	bne.n	800f92e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f94e:	bf00      	nop
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	2000b134 	.word	0x2000b134
 800f95c:	2000b140 	.word	0x2000b140
 800f960:	2000b13c 	.word	0x2000b13c

0800f964 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f970:	2b00      	cmp	r3, #0
 800f972:	d007      	beq.n	800f984 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f978:	4618      	mov	r0, r3
 800f97a:	f7ff fb71 	bl	800f060 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2200      	movs	r2, #0
 800f982:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f984:	bf00      	nop
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f98c:	b590      	push	{r4, r7, lr}
 800f98e:	b08d      	sub	sp, #52	; 0x34
 800f990:	af04      	add	r7, sp, #16
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d105      	bne.n	800f9a8 <tcp_input+0x1c>
 800f99c:	4b9b      	ldr	r3, [pc, #620]	; (800fc0c <tcp_input+0x280>)
 800f99e:	2283      	movs	r2, #131	; 0x83
 800f9a0:	499b      	ldr	r1, [pc, #620]	; (800fc10 <tcp_input+0x284>)
 800f9a2:	489c      	ldr	r0, [pc, #624]	; (800fc14 <tcp_input+0x288>)
 800f9a4:	f009 fcc2 	bl	801932c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	4a9a      	ldr	r2, [pc, #616]	; (800fc18 <tcp_input+0x28c>)
 800f9ae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	895b      	ldrh	r3, [r3, #10]
 800f9b4:	2b13      	cmp	r3, #19
 800f9b6:	f240 83c4 	bls.w	8010142 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f9ba:	4b98      	ldr	r3, [pc, #608]	; (800fc1c <tcp_input+0x290>)
 800f9bc:	695a      	ldr	r2, [r3, #20]
 800f9be:	4b97      	ldr	r3, [pc, #604]	; (800fc1c <tcp_input+0x290>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	4610      	mov	r0, r2
 800f9c6:	f008 fb23 	bl	8018010 <ip4_addr_isbroadcast_u32>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f040 83ba 	bne.w	8010146 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f9d2:	4b92      	ldr	r3, [pc, #584]	; (800fc1c <tcp_input+0x290>)
 800f9d4:	695b      	ldr	r3, [r3, #20]
 800f9d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f9da:	2be0      	cmp	r3, #224	; 0xe0
 800f9dc:	f000 83b3 	beq.w	8010146 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f9e0:	4b8d      	ldr	r3, [pc, #564]	; (800fc18 <tcp_input+0x28c>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	899b      	ldrh	r3, [r3, #12]
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7fc fac1 	bl	800bf70 <lwip_htons>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	0b1b      	lsrs	r3, r3, #12
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	b2db      	uxtb	r3, r3
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f9fa:	7cbb      	ldrb	r3, [r7, #18]
 800f9fc:	2b13      	cmp	r3, #19
 800f9fe:	f240 83a2 	bls.w	8010146 <tcp_input+0x7ba>
 800fa02:	7cbb      	ldrb	r3, [r7, #18]
 800fa04:	b29a      	uxth	r2, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	891b      	ldrh	r3, [r3, #8]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	f200 839b 	bhi.w	8010146 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fa10:	7cbb      	ldrb	r3, [r7, #18]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	3b14      	subs	r3, #20
 800fa16:	b29a      	uxth	r2, r3
 800fa18:	4b81      	ldr	r3, [pc, #516]	; (800fc20 <tcp_input+0x294>)
 800fa1a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fa1c:	4b81      	ldr	r3, [pc, #516]	; (800fc24 <tcp_input+0x298>)
 800fa1e:	2200      	movs	r2, #0
 800fa20:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	895a      	ldrh	r2, [r3, #10]
 800fa26:	7cbb      	ldrb	r3, [r7, #18]
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d309      	bcc.n	800fa42 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fa2e:	4b7c      	ldr	r3, [pc, #496]	; (800fc20 <tcp_input+0x294>)
 800fa30:	881a      	ldrh	r2, [r3, #0]
 800fa32:	4b7d      	ldr	r3, [pc, #500]	; (800fc28 <tcp_input+0x29c>)
 800fa34:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fa36:	7cbb      	ldrb	r3, [r7, #18]
 800fa38:	4619      	mov	r1, r3
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7fd fdfe 	bl	800d63c <pbuf_remove_header>
 800fa40:	e04e      	b.n	800fae0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d105      	bne.n	800fa56 <tcp_input+0xca>
 800fa4a:	4b70      	ldr	r3, [pc, #448]	; (800fc0c <tcp_input+0x280>)
 800fa4c:	22c2      	movs	r2, #194	; 0xc2
 800fa4e:	4977      	ldr	r1, [pc, #476]	; (800fc2c <tcp_input+0x2a0>)
 800fa50:	4870      	ldr	r0, [pc, #448]	; (800fc14 <tcp_input+0x288>)
 800fa52:	f009 fc6b 	bl	801932c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fa56:	2114      	movs	r1, #20
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7fd fdef 	bl	800d63c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	895a      	ldrh	r2, [r3, #10]
 800fa62:	4b71      	ldr	r3, [pc, #452]	; (800fc28 <tcp_input+0x29c>)
 800fa64:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fa66:	4b6e      	ldr	r3, [pc, #440]	; (800fc20 <tcp_input+0x294>)
 800fa68:	881a      	ldrh	r2, [r3, #0]
 800fa6a:	4b6f      	ldr	r3, [pc, #444]	; (800fc28 <tcp_input+0x29c>)
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	1ad3      	subs	r3, r2, r3
 800fa70:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fa72:	4b6d      	ldr	r3, [pc, #436]	; (800fc28 <tcp_input+0x29c>)
 800fa74:	881b      	ldrh	r3, [r3, #0]
 800fa76:	4619      	mov	r1, r3
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7fd fddf 	bl	800d63c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	895b      	ldrh	r3, [r3, #10]
 800fa84:	8a3a      	ldrh	r2, [r7, #16]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	f200 835f 	bhi.w	801014a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	4a64      	ldr	r2, [pc, #400]	; (800fc24 <tcp_input+0x298>)
 800fa94:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	8a3a      	ldrh	r2, [r7, #16]
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fd fdcc 	bl	800d63c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	891a      	ldrh	r2, [r3, #8]
 800faa8:	8a3b      	ldrh	r3, [r7, #16]
 800faaa:	1ad3      	subs	r3, r2, r3
 800faac:	b29a      	uxth	r2, r3
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	895b      	ldrh	r3, [r3, #10]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d005      	beq.n	800fac6 <tcp_input+0x13a>
 800faba:	4b54      	ldr	r3, [pc, #336]	; (800fc0c <tcp_input+0x280>)
 800fabc:	22df      	movs	r2, #223	; 0xdf
 800fabe:	495c      	ldr	r1, [pc, #368]	; (800fc30 <tcp_input+0x2a4>)
 800fac0:	4854      	ldr	r0, [pc, #336]	; (800fc14 <tcp_input+0x288>)
 800fac2:	f009 fc33 	bl	801932c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	891a      	ldrh	r2, [r3, #8]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	891b      	ldrh	r3, [r3, #8]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d005      	beq.n	800fae0 <tcp_input+0x154>
 800fad4:	4b4d      	ldr	r3, [pc, #308]	; (800fc0c <tcp_input+0x280>)
 800fad6:	22e0      	movs	r2, #224	; 0xe0
 800fad8:	4956      	ldr	r1, [pc, #344]	; (800fc34 <tcp_input+0x2a8>)
 800fada:	484e      	ldr	r0, [pc, #312]	; (800fc14 <tcp_input+0x288>)
 800fadc:	f009 fc26 	bl	801932c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fae0:	4b4d      	ldr	r3, [pc, #308]	; (800fc18 <tcp_input+0x28c>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	881b      	ldrh	r3, [r3, #0]
 800fae6:	b29a      	uxth	r2, r3
 800fae8:	4b4b      	ldr	r3, [pc, #300]	; (800fc18 <tcp_input+0x28c>)
 800faea:	681c      	ldr	r4, [r3, #0]
 800faec:	4610      	mov	r0, r2
 800faee:	f7fc fa3f 	bl	800bf70 <lwip_htons>
 800faf2:	4603      	mov	r3, r0
 800faf4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800faf6:	4b48      	ldr	r3, [pc, #288]	; (800fc18 <tcp_input+0x28c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	885b      	ldrh	r3, [r3, #2]
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	4b46      	ldr	r3, [pc, #280]	; (800fc18 <tcp_input+0x28c>)
 800fb00:	681c      	ldr	r4, [r3, #0]
 800fb02:	4610      	mov	r0, r2
 800fb04:	f7fc fa34 	bl	800bf70 <lwip_htons>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fb0c:	4b42      	ldr	r3, [pc, #264]	; (800fc18 <tcp_input+0x28c>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	685a      	ldr	r2, [r3, #4]
 800fb12:	4b41      	ldr	r3, [pc, #260]	; (800fc18 <tcp_input+0x28c>)
 800fb14:	681c      	ldr	r4, [r3, #0]
 800fb16:	4610      	mov	r0, r2
 800fb18:	f7fc fa3f 	bl	800bf9a <lwip_htonl>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	6063      	str	r3, [r4, #4]
 800fb20:	6863      	ldr	r3, [r4, #4]
 800fb22:	4a45      	ldr	r2, [pc, #276]	; (800fc38 <tcp_input+0x2ac>)
 800fb24:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fb26:	4b3c      	ldr	r3, [pc, #240]	; (800fc18 <tcp_input+0x28c>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	689a      	ldr	r2, [r3, #8]
 800fb2c:	4b3a      	ldr	r3, [pc, #232]	; (800fc18 <tcp_input+0x28c>)
 800fb2e:	681c      	ldr	r4, [r3, #0]
 800fb30:	4610      	mov	r0, r2
 800fb32:	f7fc fa32 	bl	800bf9a <lwip_htonl>
 800fb36:	4603      	mov	r3, r0
 800fb38:	60a3      	str	r3, [r4, #8]
 800fb3a:	68a3      	ldr	r3, [r4, #8]
 800fb3c:	4a3f      	ldr	r2, [pc, #252]	; (800fc3c <tcp_input+0x2b0>)
 800fb3e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fb40:	4b35      	ldr	r3, [pc, #212]	; (800fc18 <tcp_input+0x28c>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	89db      	ldrh	r3, [r3, #14]
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	4b33      	ldr	r3, [pc, #204]	; (800fc18 <tcp_input+0x28c>)
 800fb4a:	681c      	ldr	r4, [r3, #0]
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	f7fc fa0f 	bl	800bf70 <lwip_htons>
 800fb52:	4603      	mov	r3, r0
 800fb54:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fb56:	4b30      	ldr	r3, [pc, #192]	; (800fc18 <tcp_input+0x28c>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	899b      	ldrh	r3, [r3, #12]
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fc fa06 	bl	800bf70 <lwip_htons>
 800fb64:	4603      	mov	r3, r0
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb6c:	b2da      	uxtb	r2, r3
 800fb6e:	4b34      	ldr	r3, [pc, #208]	; (800fc40 <tcp_input+0x2b4>)
 800fb70:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	891a      	ldrh	r2, [r3, #8]
 800fb76:	4b33      	ldr	r3, [pc, #204]	; (800fc44 <tcp_input+0x2b8>)
 800fb78:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fb7a:	4b31      	ldr	r3, [pc, #196]	; (800fc40 <tcp_input+0x2b4>)
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	f003 0303 	and.w	r3, r3, #3
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d00c      	beq.n	800fba0 <tcp_input+0x214>
    tcplen++;
 800fb86:	4b2f      	ldr	r3, [pc, #188]	; (800fc44 <tcp_input+0x2b8>)
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	4b2d      	ldr	r3, [pc, #180]	; (800fc44 <tcp_input+0x2b8>)
 800fb90:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	891a      	ldrh	r2, [r3, #8]
 800fb96:	4b2b      	ldr	r3, [pc, #172]	; (800fc44 <tcp_input+0x2b8>)
 800fb98:	881b      	ldrh	r3, [r3, #0]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	f200 82d7 	bhi.w	801014e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fba0:	2300      	movs	r3, #0
 800fba2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fba4:	4b28      	ldr	r3, [pc, #160]	; (800fc48 <tcp_input+0x2bc>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	61fb      	str	r3, [r7, #28]
 800fbaa:	e09d      	b.n	800fce8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	7d1b      	ldrb	r3, [r3, #20]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d105      	bne.n	800fbc0 <tcp_input+0x234>
 800fbb4:	4b15      	ldr	r3, [pc, #84]	; (800fc0c <tcp_input+0x280>)
 800fbb6:	22fb      	movs	r2, #251	; 0xfb
 800fbb8:	4924      	ldr	r1, [pc, #144]	; (800fc4c <tcp_input+0x2c0>)
 800fbba:	4816      	ldr	r0, [pc, #88]	; (800fc14 <tcp_input+0x288>)
 800fbbc:	f009 fbb6 	bl	801932c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	7d1b      	ldrb	r3, [r3, #20]
 800fbc4:	2b0a      	cmp	r3, #10
 800fbc6:	d105      	bne.n	800fbd4 <tcp_input+0x248>
 800fbc8:	4b10      	ldr	r3, [pc, #64]	; (800fc0c <tcp_input+0x280>)
 800fbca:	22fc      	movs	r2, #252	; 0xfc
 800fbcc:	4920      	ldr	r1, [pc, #128]	; (800fc50 <tcp_input+0x2c4>)
 800fbce:	4811      	ldr	r0, [pc, #68]	; (800fc14 <tcp_input+0x288>)
 800fbd0:	f009 fbac 	bl	801932c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	7d1b      	ldrb	r3, [r3, #20]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d105      	bne.n	800fbe8 <tcp_input+0x25c>
 800fbdc:	4b0b      	ldr	r3, [pc, #44]	; (800fc0c <tcp_input+0x280>)
 800fbde:	22fd      	movs	r2, #253	; 0xfd
 800fbe0:	491c      	ldr	r1, [pc, #112]	; (800fc54 <tcp_input+0x2c8>)
 800fbe2:	480c      	ldr	r0, [pc, #48]	; (800fc14 <tcp_input+0x288>)
 800fbe4:	f009 fba2 	bl	801932c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	7a1b      	ldrb	r3, [r3, #8]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d033      	beq.n	800fc58 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	7a1a      	ldrb	r2, [r3, #8]
 800fbf4:	4b09      	ldr	r3, [pc, #36]	; (800fc1c <tcp_input+0x290>)
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d029      	beq.n	800fc58 <tcp_input+0x2cc>
      prev = pcb;
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	61bb      	str	r3, [r7, #24]
      continue;
 800fc08:	e06b      	b.n	800fce2 <tcp_input+0x356>
 800fc0a:	bf00      	nop
 800fc0c:	0801c58c 	.word	0x0801c58c
 800fc10:	0801c5c0 	.word	0x0801c5c0
 800fc14:	0801c5d8 	.word	0x0801c5d8
 800fc18:	20004260 	.word	0x20004260
 800fc1c:	20007a00 	.word	0x20007a00
 800fc20:	20004264 	.word	0x20004264
 800fc24:	20004268 	.word	0x20004268
 800fc28:	20004266 	.word	0x20004266
 800fc2c:	0801c600 	.word	0x0801c600
 800fc30:	0801c610 	.word	0x0801c610
 800fc34:	0801c61c 	.word	0x0801c61c
 800fc38:	20004270 	.word	0x20004270
 800fc3c:	20004274 	.word	0x20004274
 800fc40:	2000427c 	.word	0x2000427c
 800fc44:	2000427a 	.word	0x2000427a
 800fc48:	2000b134 	.word	0x2000b134
 800fc4c:	0801c63c 	.word	0x0801c63c
 800fc50:	0801c664 	.word	0x0801c664
 800fc54:	0801c690 	.word	0x0801c690
    }

    if (pcb->remote_port == tcphdr->src &&
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	8b1a      	ldrh	r2, [r3, #24]
 800fc5c:	4b94      	ldr	r3, [pc, #592]	; (800feb0 <tcp_input+0x524>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	881b      	ldrh	r3, [r3, #0]
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d13a      	bne.n	800fcde <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	8ada      	ldrh	r2, [r3, #22]
 800fc6c:	4b90      	ldr	r3, [pc, #576]	; (800feb0 <tcp_input+0x524>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	885b      	ldrh	r3, [r3, #2]
 800fc72:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d132      	bne.n	800fcde <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	685a      	ldr	r2, [r3, #4]
 800fc7c:	4b8d      	ldr	r3, [pc, #564]	; (800feb4 <tcp_input+0x528>)
 800fc7e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d12c      	bne.n	800fcde <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	4b8a      	ldr	r3, [pc, #552]	; (800feb4 <tcp_input+0x528>)
 800fc8a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d126      	bne.n	800fcde <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	69fa      	ldr	r2, [r7, #28]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d106      	bne.n	800fca8 <tcp_input+0x31c>
 800fc9a:	4b87      	ldr	r3, [pc, #540]	; (800feb8 <tcp_input+0x52c>)
 800fc9c:	f240 120d 	movw	r2, #269	; 0x10d
 800fca0:	4986      	ldr	r1, [pc, #536]	; (800febc <tcp_input+0x530>)
 800fca2:	4887      	ldr	r0, [pc, #540]	; (800fec0 <tcp_input+0x534>)
 800fca4:	f009 fb42 	bl	801932c <iprintf>
      if (prev != NULL) {
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00a      	beq.n	800fcc4 <tcp_input+0x338>
        prev->next = pcb->next;
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	68da      	ldr	r2, [r3, #12]
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fcb6:	4b83      	ldr	r3, [pc, #524]	; (800fec4 <tcp_input+0x538>)
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fcbe:	4a81      	ldr	r2, [pc, #516]	; (800fec4 <tcp_input+0x538>)
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	69fa      	ldr	r2, [r7, #28]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d111      	bne.n	800fcf2 <tcp_input+0x366>
 800fcce:	4b7a      	ldr	r3, [pc, #488]	; (800feb8 <tcp_input+0x52c>)
 800fcd0:	f240 1215 	movw	r2, #277	; 0x115
 800fcd4:	497c      	ldr	r1, [pc, #496]	; (800fec8 <tcp_input+0x53c>)
 800fcd6:	487a      	ldr	r0, [pc, #488]	; (800fec0 <tcp_input+0x534>)
 800fcd8:	f009 fb28 	bl	801932c <iprintf>
      break;
 800fcdc:	e009      	b.n	800fcf2 <tcp_input+0x366>
    }
    prev = pcb;
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	61fb      	str	r3, [r7, #28]
 800fce8:	69fb      	ldr	r3, [r7, #28]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	f47f af5e 	bne.w	800fbac <tcp_input+0x220>
 800fcf0:	e000      	b.n	800fcf4 <tcp_input+0x368>
      break;
 800fcf2:	bf00      	nop
  }

  if (pcb == NULL) {
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	f040 8095 	bne.w	800fe26 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcfc:	4b73      	ldr	r3, [pc, #460]	; (800fecc <tcp_input+0x540>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	61fb      	str	r3, [r7, #28]
 800fd02:	e03f      	b.n	800fd84 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	7d1b      	ldrb	r3, [r3, #20]
 800fd08:	2b0a      	cmp	r3, #10
 800fd0a:	d006      	beq.n	800fd1a <tcp_input+0x38e>
 800fd0c:	4b6a      	ldr	r3, [pc, #424]	; (800feb8 <tcp_input+0x52c>)
 800fd0e:	f240 121f 	movw	r2, #287	; 0x11f
 800fd12:	496f      	ldr	r1, [pc, #444]	; (800fed0 <tcp_input+0x544>)
 800fd14:	486a      	ldr	r0, [pc, #424]	; (800fec0 <tcp_input+0x534>)
 800fd16:	f009 fb09 	bl	801932c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	7a1b      	ldrb	r3, [r3, #8]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d009      	beq.n	800fd36 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	7a1a      	ldrb	r2, [r3, #8]
 800fd26:	4b63      	ldr	r3, [pc, #396]	; (800feb4 <tcp_input+0x528>)
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fd2e:	3301      	adds	r3, #1
 800fd30:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d122      	bne.n	800fd7c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	8b1a      	ldrh	r2, [r3, #24]
 800fd3a:	4b5d      	ldr	r3, [pc, #372]	; (800feb0 <tcp_input+0x524>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	881b      	ldrh	r3, [r3, #0]
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d11b      	bne.n	800fd7e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	8ada      	ldrh	r2, [r3, #22]
 800fd4a:	4b59      	ldr	r3, [pc, #356]	; (800feb0 <tcp_input+0x524>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	885b      	ldrh	r3, [r3, #2]
 800fd50:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d113      	bne.n	800fd7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	685a      	ldr	r2, [r3, #4]
 800fd5a:	4b56      	ldr	r3, [pc, #344]	; (800feb4 <tcp_input+0x528>)
 800fd5c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d10d      	bne.n	800fd7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	4b53      	ldr	r3, [pc, #332]	; (800feb4 <tcp_input+0x528>)
 800fd68:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d107      	bne.n	800fd7e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fd6e:	69f8      	ldr	r0, [r7, #28]
 800fd70:	f000 fb52 	bl	8010418 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7fd fce7 	bl	800d748 <pbuf_free>
        return;
 800fd7a:	e1ee      	b.n	801015a <tcp_input+0x7ce>
        continue;
 800fd7c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	68db      	ldr	r3, [r3, #12]
 800fd82:	61fb      	str	r3, [r7, #28]
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1bc      	bne.n	800fd04 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd8e:	4b51      	ldr	r3, [pc, #324]	; (800fed4 <tcp_input+0x548>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	617b      	str	r3, [r7, #20]
 800fd94:	e02a      	b.n	800fdec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	7a1b      	ldrb	r3, [r3, #8]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00c      	beq.n	800fdb8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	7a1a      	ldrb	r2, [r3, #8]
 800fda2:	4b44      	ldr	r3, [pc, #272]	; (800feb4 <tcp_input+0x528>)
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fdaa:	3301      	adds	r3, #1
 800fdac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d002      	beq.n	800fdb8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	61bb      	str	r3, [r7, #24]
        continue;
 800fdb6:	e016      	b.n	800fde6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	8ada      	ldrh	r2, [r3, #22]
 800fdbc:	4b3c      	ldr	r3, [pc, #240]	; (800feb0 <tcp_input+0x524>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	885b      	ldrh	r3, [r3, #2]
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d10c      	bne.n	800fde2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	4b39      	ldr	r3, [pc, #228]	; (800feb4 <tcp_input+0x528>)
 800fdce:	695b      	ldr	r3, [r3, #20]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d00f      	beq.n	800fdf4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d00d      	beq.n	800fdf6 <tcp_input+0x46a>
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d009      	beq.n	800fdf6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	617b      	str	r3, [r7, #20]
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1d1      	bne.n	800fd96 <tcp_input+0x40a>
 800fdf2:	e000      	b.n	800fdf6 <tcp_input+0x46a>
            break;
 800fdf4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d014      	beq.n	800fe26 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fdfc:	69bb      	ldr	r3, [r7, #24]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00a      	beq.n	800fe18 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	68da      	ldr	r2, [r3, #12]
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fe0a:	4b32      	ldr	r3, [pc, #200]	; (800fed4 <tcp_input+0x548>)
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fe12:	4a30      	ldr	r2, [pc, #192]	; (800fed4 <tcp_input+0x548>)
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fe18:	6978      	ldr	r0, [r7, #20]
 800fe1a:	f000 f9ff 	bl	801021c <tcp_listen_input>
      }
      pbuf_free(p);
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f7fd fc92 	bl	800d748 <pbuf_free>
      return;
 800fe24:	e199      	b.n	801015a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f000 8160 	beq.w	80100ee <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fe2e:	4b2a      	ldr	r3, [pc, #168]	; (800fed8 <tcp_input+0x54c>)
 800fe30:	2200      	movs	r2, #0
 800fe32:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	891a      	ldrh	r2, [r3, #8]
 800fe38:	4b27      	ldr	r3, [pc, #156]	; (800fed8 <tcp_input+0x54c>)
 800fe3a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fe3c:	4a26      	ldr	r2, [pc, #152]	; (800fed8 <tcp_input+0x54c>)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fe42:	4b1b      	ldr	r3, [pc, #108]	; (800feb0 <tcp_input+0x524>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a24      	ldr	r2, [pc, #144]	; (800fed8 <tcp_input+0x54c>)
 800fe48:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fe4a:	4b24      	ldr	r3, [pc, #144]	; (800fedc <tcp_input+0x550>)
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fe50:	4b23      	ldr	r3, [pc, #140]	; (800fee0 <tcp_input+0x554>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fe56:	4b23      	ldr	r3, [pc, #140]	; (800fee4 <tcp_input+0x558>)
 800fe58:	2200      	movs	r2, #0
 800fe5a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fe5c:	4b22      	ldr	r3, [pc, #136]	; (800fee8 <tcp_input+0x55c>)
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	f003 0308 	and.w	r3, r3, #8
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d006      	beq.n	800fe76 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	7b5b      	ldrb	r3, [r3, #13]
 800fe6c:	f043 0301 	orr.w	r3, r3, #1
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d038      	beq.n	800fef0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fe7e:	69f8      	ldr	r0, [r7, #28]
 800fe80:	f7ff f872 	bl	800ef68 <tcp_process_refused_data>
 800fe84:	4603      	mov	r3, r0
 800fe86:	f113 0f0d 	cmn.w	r3, #13
 800fe8a:	d007      	beq.n	800fe9c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d02d      	beq.n	800fef0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fe94:	4b15      	ldr	r3, [pc, #84]	; (800feec <tcp_input+0x560>)
 800fe96:	881b      	ldrh	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d029      	beq.n	800fef0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f040 8104 	bne.w	80100ae <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fea6:	69f8      	ldr	r0, [r7, #28]
 800fea8:	f003 fe26 	bl	8013af8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800feac:	e0ff      	b.n	80100ae <tcp_input+0x722>
 800feae:	bf00      	nop
 800feb0:	20004260 	.word	0x20004260
 800feb4:	20007a00 	.word	0x20007a00
 800feb8:	0801c58c 	.word	0x0801c58c
 800febc:	0801c6b8 	.word	0x0801c6b8
 800fec0:	0801c5d8 	.word	0x0801c5d8
 800fec4:	2000b134 	.word	0x2000b134
 800fec8:	0801c6e4 	.word	0x0801c6e4
 800fecc:	2000b144 	.word	0x2000b144
 800fed0:	0801c710 	.word	0x0801c710
 800fed4:	2000b13c 	.word	0x2000b13c
 800fed8:	20004250 	.word	0x20004250
 800fedc:	20004280 	.word	0x20004280
 800fee0:	2000427d 	.word	0x2000427d
 800fee4:	20004278 	.word	0x20004278
 800fee8:	2000427c 	.word	0x2000427c
 800feec:	2000427a 	.word	0x2000427a
      }
    }
    tcp_input_pcb = pcb;
 800fef0:	4a9b      	ldr	r2, [pc, #620]	; (8010160 <tcp_input+0x7d4>)
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fef6:	69f8      	ldr	r0, [r7, #28]
 800fef8:	f000 fb0a 	bl	8010510 <tcp_process>
 800fefc:	4603      	mov	r3, r0
 800fefe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ff00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff04:	f113 0f0d 	cmn.w	r3, #13
 800ff08:	f000 80d3 	beq.w	80100b2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ff0c:	4b95      	ldr	r3, [pc, #596]	; (8010164 <tcp_input+0x7d8>)
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	f003 0308 	and.w	r3, r3, #8
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d015      	beq.n	800ff44 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ff18:	69fb      	ldr	r3, [r7, #28]
 800ff1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d008      	beq.n	800ff34 <tcp_input+0x5a8>
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff28:	69fa      	ldr	r2, [r7, #28]
 800ff2a:	6912      	ldr	r2, [r2, #16]
 800ff2c:	f06f 010d 	mvn.w	r1, #13
 800ff30:	4610      	mov	r0, r2
 800ff32:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ff34:	69f9      	ldr	r1, [r7, #28]
 800ff36:	488c      	ldr	r0, [pc, #560]	; (8010168 <tcp_input+0x7dc>)
 800ff38:	f7ff fbb0 	bl	800f69c <tcp_pcb_remove>
        tcp_free(pcb);
 800ff3c:	69f8      	ldr	r0, [r7, #28]
 800ff3e:	f7fd febf 	bl	800dcc0 <tcp_free>
 800ff42:	e0c1      	b.n	80100c8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ff44:	2300      	movs	r3, #0
 800ff46:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ff48:	4b88      	ldr	r3, [pc, #544]	; (801016c <tcp_input+0x7e0>)
 800ff4a:	881b      	ldrh	r3, [r3, #0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d01d      	beq.n	800ff8c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ff50:	4b86      	ldr	r3, [pc, #536]	; (801016c <tcp_input+0x7e0>)
 800ff52:	881b      	ldrh	r3, [r3, #0]
 800ff54:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d00a      	beq.n	800ff76 <tcp_input+0x5ea>
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff66:	69fa      	ldr	r2, [r7, #28]
 800ff68:	6910      	ldr	r0, [r2, #16]
 800ff6a:	89fa      	ldrh	r2, [r7, #14]
 800ff6c:	69f9      	ldr	r1, [r7, #28]
 800ff6e:	4798      	blx	r3
 800ff70:	4603      	mov	r3, r0
 800ff72:	74fb      	strb	r3, [r7, #19]
 800ff74:	e001      	b.n	800ff7a <tcp_input+0x5ee>
 800ff76:	2300      	movs	r3, #0
 800ff78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ff7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff7e:	f113 0f0d 	cmn.w	r3, #13
 800ff82:	f000 8098 	beq.w	80100b6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ff86:	4b79      	ldr	r3, [pc, #484]	; (801016c <tcp_input+0x7e0>)
 800ff88:	2200      	movs	r2, #0
 800ff8a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ff8c:	69f8      	ldr	r0, [r7, #28]
 800ff8e:	f000 f905 	bl	801019c <tcp_input_delayed_close>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f040 8090 	bne.w	80100ba <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ff9a:	4b75      	ldr	r3, [pc, #468]	; (8010170 <tcp_input+0x7e4>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d041      	beq.n	8010026 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d006      	beq.n	800ffb8 <tcp_input+0x62c>
 800ffaa:	4b72      	ldr	r3, [pc, #456]	; (8010174 <tcp_input+0x7e8>)
 800ffac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ffb0:	4971      	ldr	r1, [pc, #452]	; (8010178 <tcp_input+0x7ec>)
 800ffb2:	4872      	ldr	r0, [pc, #456]	; (801017c <tcp_input+0x7f0>)
 800ffb4:	f009 f9ba 	bl	801932c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	8b5b      	ldrh	r3, [r3, #26]
 800ffbc:	f003 0310 	and.w	r3, r3, #16
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d008      	beq.n	800ffd6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ffc4:	4b6a      	ldr	r3, [pc, #424]	; (8010170 <tcp_input+0x7e4>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fd fbbd 	bl	800d748 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ffce:	69f8      	ldr	r0, [r7, #28]
 800ffd0:	f7fe f9b0 	bl	800e334 <tcp_abort>
            goto aborted;
 800ffd4:	e078      	b.n	80100c8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00c      	beq.n	800fffa <tcp_input+0x66e>
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	6918      	ldr	r0, [r3, #16]
 800ffea:	4b61      	ldr	r3, [pc, #388]	; (8010170 <tcp_input+0x7e4>)
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	2300      	movs	r3, #0
 800fff0:	69f9      	ldr	r1, [r7, #28]
 800fff2:	47a0      	blx	r4
 800fff4:	4603      	mov	r3, r0
 800fff6:	74fb      	strb	r3, [r7, #19]
 800fff8:	e008      	b.n	801000c <tcp_input+0x680>
 800fffa:	4b5d      	ldr	r3, [pc, #372]	; (8010170 <tcp_input+0x7e4>)
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	2300      	movs	r3, #0
 8010000:	69f9      	ldr	r1, [r7, #28]
 8010002:	2000      	movs	r0, #0
 8010004:	f7ff f884 	bl	800f110 <tcp_recv_null>
 8010008:	4603      	mov	r3, r0
 801000a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801000c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010010:	f113 0f0d 	cmn.w	r3, #13
 8010014:	d053      	beq.n	80100be <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010016:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d003      	beq.n	8010026 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801001e:	4b54      	ldr	r3, [pc, #336]	; (8010170 <tcp_input+0x7e4>)
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010026:	4b4f      	ldr	r3, [pc, #316]	; (8010164 <tcp_input+0x7d8>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	f003 0320 	and.w	r3, r3, #32
 801002e:	2b00      	cmp	r3, #0
 8010030:	d030      	beq.n	8010094 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010036:	2b00      	cmp	r3, #0
 8010038:	d009      	beq.n	801004e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801003e:	7b5a      	ldrb	r2, [r3, #13]
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010044:	f042 0220 	orr.w	r2, r2, #32
 8010048:	b2d2      	uxtb	r2, r2
 801004a:	735a      	strb	r2, [r3, #13]
 801004c:	e022      	b.n	8010094 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010052:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010056:	d005      	beq.n	8010064 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801005c:	3301      	adds	r3, #1
 801005e:	b29a      	uxth	r2, r3
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00b      	beq.n	8010086 <tcp_input+0x6fa>
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	6918      	ldr	r0, [r3, #16]
 8010078:	2300      	movs	r3, #0
 801007a:	2200      	movs	r2, #0
 801007c:	69f9      	ldr	r1, [r7, #28]
 801007e:	47a0      	blx	r4
 8010080:	4603      	mov	r3, r0
 8010082:	74fb      	strb	r3, [r7, #19]
 8010084:	e001      	b.n	801008a <tcp_input+0x6fe>
 8010086:	2300      	movs	r3, #0
 8010088:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801008a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801008e:	f113 0f0d 	cmn.w	r3, #13
 8010092:	d016      	beq.n	80100c2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010094:	4b32      	ldr	r3, [pc, #200]	; (8010160 <tcp_input+0x7d4>)
 8010096:	2200      	movs	r2, #0
 8010098:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801009a:	69f8      	ldr	r0, [r7, #28]
 801009c:	f000 f87e 	bl	801019c <tcp_input_delayed_close>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d10f      	bne.n	80100c6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80100a6:	69f8      	ldr	r0, [r7, #28]
 80100a8:	f002 ff10 	bl	8012ecc <tcp_output>
 80100ac:	e00c      	b.n	80100c8 <tcp_input+0x73c>
        goto aborted;
 80100ae:	bf00      	nop
 80100b0:	e00a      	b.n	80100c8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80100b2:	bf00      	nop
 80100b4:	e008      	b.n	80100c8 <tcp_input+0x73c>
              goto aborted;
 80100b6:	bf00      	nop
 80100b8:	e006      	b.n	80100c8 <tcp_input+0x73c>
          goto aborted;
 80100ba:	bf00      	nop
 80100bc:	e004      	b.n	80100c8 <tcp_input+0x73c>
            goto aborted;
 80100be:	bf00      	nop
 80100c0:	e002      	b.n	80100c8 <tcp_input+0x73c>
              goto aborted;
 80100c2:	bf00      	nop
 80100c4:	e000      	b.n	80100c8 <tcp_input+0x73c>
          goto aborted;
 80100c6:	bf00      	nop
    tcp_input_pcb = NULL;
 80100c8:	4b25      	ldr	r3, [pc, #148]	; (8010160 <tcp_input+0x7d4>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80100ce:	4b28      	ldr	r3, [pc, #160]	; (8010170 <tcp_input+0x7e4>)
 80100d0:	2200      	movs	r2, #0
 80100d2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80100d4:	4b2a      	ldr	r3, [pc, #168]	; (8010180 <tcp_input+0x7f4>)
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d03d      	beq.n	8010158 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80100dc:	4b28      	ldr	r3, [pc, #160]	; (8010180 <tcp_input+0x7f4>)
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fd fb31 	bl	800d748 <pbuf_free>
      inseg.p = NULL;
 80100e6:	4b26      	ldr	r3, [pc, #152]	; (8010180 <tcp_input+0x7f4>)
 80100e8:	2200      	movs	r2, #0
 80100ea:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80100ec:	e034      	b.n	8010158 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80100ee:	4b25      	ldr	r3, [pc, #148]	; (8010184 <tcp_input+0x7f8>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	899b      	ldrh	r3, [r3, #12]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7fb ff3a 	bl	800bf70 <lwip_htons>
 80100fc:	4603      	mov	r3, r0
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	f003 0304 	and.w	r3, r3, #4
 8010104:	2b00      	cmp	r3, #0
 8010106:	d118      	bne.n	801013a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010108:	4b1f      	ldr	r3, [pc, #124]	; (8010188 <tcp_input+0x7fc>)
 801010a:	6819      	ldr	r1, [r3, #0]
 801010c:	4b1f      	ldr	r3, [pc, #124]	; (801018c <tcp_input+0x800>)
 801010e:	881b      	ldrh	r3, [r3, #0]
 8010110:	461a      	mov	r2, r3
 8010112:	4b1f      	ldr	r3, [pc, #124]	; (8010190 <tcp_input+0x804>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010118:	4b1a      	ldr	r3, [pc, #104]	; (8010184 <tcp_input+0x7f8>)
 801011a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801011c:	885b      	ldrh	r3, [r3, #2]
 801011e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010120:	4a18      	ldr	r2, [pc, #96]	; (8010184 <tcp_input+0x7f8>)
 8010122:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010124:	8812      	ldrh	r2, [r2, #0]
 8010126:	b292      	uxth	r2, r2
 8010128:	9202      	str	r2, [sp, #8]
 801012a:	9301      	str	r3, [sp, #4]
 801012c:	4b19      	ldr	r3, [pc, #100]	; (8010194 <tcp_input+0x808>)
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	4b19      	ldr	r3, [pc, #100]	; (8010198 <tcp_input+0x80c>)
 8010132:	4602      	mov	r2, r0
 8010134:	2000      	movs	r0, #0
 8010136:	f003 fc8d 	bl	8013a54 <tcp_rst>
    pbuf_free(p);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f7fd fb04 	bl	800d748 <pbuf_free>
  return;
 8010140:	e00a      	b.n	8010158 <tcp_input+0x7cc>
    goto dropped;
 8010142:	bf00      	nop
 8010144:	e004      	b.n	8010150 <tcp_input+0x7c4>
dropped:
 8010146:	bf00      	nop
 8010148:	e002      	b.n	8010150 <tcp_input+0x7c4>
      goto dropped;
 801014a:	bf00      	nop
 801014c:	e000      	b.n	8010150 <tcp_input+0x7c4>
      goto dropped;
 801014e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7fd faf9 	bl	800d748 <pbuf_free>
 8010156:	e000      	b.n	801015a <tcp_input+0x7ce>
  return;
 8010158:	bf00      	nop
}
 801015a:	3724      	adds	r7, #36	; 0x24
 801015c:	46bd      	mov	sp, r7
 801015e:	bd90      	pop	{r4, r7, pc}
 8010160:	2000b148 	.word	0x2000b148
 8010164:	2000427d 	.word	0x2000427d
 8010168:	2000b134 	.word	0x2000b134
 801016c:	20004278 	.word	0x20004278
 8010170:	20004280 	.word	0x20004280
 8010174:	0801c58c 	.word	0x0801c58c
 8010178:	0801c740 	.word	0x0801c740
 801017c:	0801c5d8 	.word	0x0801c5d8
 8010180:	20004250 	.word	0x20004250
 8010184:	20004260 	.word	0x20004260
 8010188:	20004274 	.word	0x20004274
 801018c:	2000427a 	.word	0x2000427a
 8010190:	20004270 	.word	0x20004270
 8010194:	20007a10 	.word	0x20007a10
 8010198:	20007a14 	.word	0x20007a14

0801019c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d106      	bne.n	80101b8 <tcp_input_delayed_close+0x1c>
 80101aa:	4b17      	ldr	r3, [pc, #92]	; (8010208 <tcp_input_delayed_close+0x6c>)
 80101ac:	f240 225a 	movw	r2, #602	; 0x25a
 80101b0:	4916      	ldr	r1, [pc, #88]	; (801020c <tcp_input_delayed_close+0x70>)
 80101b2:	4817      	ldr	r0, [pc, #92]	; (8010210 <tcp_input_delayed_close+0x74>)
 80101b4:	f009 f8ba 	bl	801932c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80101b8:	4b16      	ldr	r3, [pc, #88]	; (8010214 <tcp_input_delayed_close+0x78>)
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	f003 0310 	and.w	r3, r3, #16
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d01c      	beq.n	80101fe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	8b5b      	ldrh	r3, [r3, #26]
 80101c8:	f003 0310 	and.w	r3, r3, #16
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10d      	bne.n	80101ec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d008      	beq.n	80101ec <tcp_input_delayed_close+0x50>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	6912      	ldr	r2, [r2, #16]
 80101e4:	f06f 010e 	mvn.w	r1, #14
 80101e8:	4610      	mov	r0, r2
 80101ea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80101ec:	6879      	ldr	r1, [r7, #4]
 80101ee:	480a      	ldr	r0, [pc, #40]	; (8010218 <tcp_input_delayed_close+0x7c>)
 80101f0:	f7ff fa54 	bl	800f69c <tcp_pcb_remove>
    tcp_free(pcb);
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7fd fd63 	bl	800dcc0 <tcp_free>
    return 1;
 80101fa:	2301      	movs	r3, #1
 80101fc:	e000      	b.n	8010200 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	3708      	adds	r7, #8
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	0801c58c 	.word	0x0801c58c
 801020c:	0801c75c 	.word	0x0801c75c
 8010210:	0801c5d8 	.word	0x0801c5d8
 8010214:	2000427d 	.word	0x2000427d
 8010218:	2000b134 	.word	0x2000b134

0801021c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801021c:	b590      	push	{r4, r7, lr}
 801021e:	b08b      	sub	sp, #44	; 0x2c
 8010220:	af04      	add	r7, sp, #16
 8010222:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010224:	4b6f      	ldr	r3, [pc, #444]	; (80103e4 <tcp_listen_input+0x1c8>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	f003 0304 	and.w	r3, r3, #4
 801022c:	2b00      	cmp	r3, #0
 801022e:	f040 80d3 	bne.w	80103d8 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d106      	bne.n	8010246 <tcp_listen_input+0x2a>
 8010238:	4b6b      	ldr	r3, [pc, #428]	; (80103e8 <tcp_listen_input+0x1cc>)
 801023a:	f240 2281 	movw	r2, #641	; 0x281
 801023e:	496b      	ldr	r1, [pc, #428]	; (80103ec <tcp_listen_input+0x1d0>)
 8010240:	486b      	ldr	r0, [pc, #428]	; (80103f0 <tcp_listen_input+0x1d4>)
 8010242:	f009 f873 	bl	801932c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010246:	4b67      	ldr	r3, [pc, #412]	; (80103e4 <tcp_listen_input+0x1c8>)
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	f003 0310 	and.w	r3, r3, #16
 801024e:	2b00      	cmp	r3, #0
 8010250:	d019      	beq.n	8010286 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010252:	4b68      	ldr	r3, [pc, #416]	; (80103f4 <tcp_listen_input+0x1d8>)
 8010254:	6819      	ldr	r1, [r3, #0]
 8010256:	4b68      	ldr	r3, [pc, #416]	; (80103f8 <tcp_listen_input+0x1dc>)
 8010258:	881b      	ldrh	r3, [r3, #0]
 801025a:	461a      	mov	r2, r3
 801025c:	4b67      	ldr	r3, [pc, #412]	; (80103fc <tcp_listen_input+0x1e0>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010262:	4b67      	ldr	r3, [pc, #412]	; (8010400 <tcp_listen_input+0x1e4>)
 8010264:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010266:	885b      	ldrh	r3, [r3, #2]
 8010268:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801026a:	4a65      	ldr	r2, [pc, #404]	; (8010400 <tcp_listen_input+0x1e4>)
 801026c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801026e:	8812      	ldrh	r2, [r2, #0]
 8010270:	b292      	uxth	r2, r2
 8010272:	9202      	str	r2, [sp, #8]
 8010274:	9301      	str	r3, [sp, #4]
 8010276:	4b63      	ldr	r3, [pc, #396]	; (8010404 <tcp_listen_input+0x1e8>)
 8010278:	9300      	str	r3, [sp, #0]
 801027a:	4b63      	ldr	r3, [pc, #396]	; (8010408 <tcp_listen_input+0x1ec>)
 801027c:	4602      	mov	r2, r0
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f003 fbe8 	bl	8013a54 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010284:	e0aa      	b.n	80103dc <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8010286:	4b57      	ldr	r3, [pc, #348]	; (80103e4 <tcp_listen_input+0x1c8>)
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	f003 0302 	and.w	r3, r3, #2
 801028e:	2b00      	cmp	r3, #0
 8010290:	f000 80a4 	beq.w	80103dc <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	7d5b      	ldrb	r3, [r3, #21]
 8010298:	4618      	mov	r0, r3
 801029a:	f7ff f85d 	bl	800f358 <tcp_alloc>
 801029e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d111      	bne.n	80102ca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	699b      	ldr	r3, [r3, #24]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00a      	beq.n	80102c4 <tcp_listen_input+0xa8>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	699b      	ldr	r3, [r3, #24]
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	6910      	ldr	r0, [r2, #16]
 80102b6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ba:	2100      	movs	r1, #0
 80102bc:	4798      	blx	r3
 80102be:	4603      	mov	r3, r0
 80102c0:	73bb      	strb	r3, [r7, #14]
      return;
 80102c2:	e08c      	b.n	80103de <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80102c4:	23f0      	movs	r3, #240	; 0xf0
 80102c6:	73bb      	strb	r3, [r7, #14]
      return;
 80102c8:	e089      	b.n	80103de <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80102ca:	4b50      	ldr	r3, [pc, #320]	; (801040c <tcp_listen_input+0x1f0>)
 80102cc:	695a      	ldr	r2, [r3, #20]
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80102d2:	4b4e      	ldr	r3, [pc, #312]	; (801040c <tcp_listen_input+0x1f0>)
 80102d4:	691a      	ldr	r2, [r3, #16]
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	8ada      	ldrh	r2, [r3, #22]
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80102e2:	4b47      	ldr	r3, [pc, #284]	; (8010400 <tcp_listen_input+0x1e4>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	b29a      	uxth	r2, r3
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	2203      	movs	r2, #3
 80102f2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80102f4:	4b41      	ldr	r3, [pc, #260]	; (80103fc <tcp_listen_input+0x1e0>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	1c5a      	adds	r2, r3, #1
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010306:	6978      	ldr	r0, [r7, #20]
 8010308:	f7ff fa5c 	bl	800f7c4 <tcp_next_iss>
 801030c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	693a      	ldr	r2, [r7, #16]
 8010312:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	693a      	ldr	r2, [r7, #16]
 8010318:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	693a      	ldr	r2, [r7, #16]
 801031e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	693a      	ldr	r2, [r7, #16]
 8010324:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010326:	4b35      	ldr	r3, [pc, #212]	; (80103fc <tcp_listen_input+0x1e0>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	1e5a      	subs	r2, r3, #1
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	691a      	ldr	r2, [r3, #16]
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	7a5b      	ldrb	r3, [r3, #9]
 8010342:	f003 030c 	and.w	r3, r3, #12
 8010346:	b2da      	uxtb	r2, r3
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	7a1a      	ldrb	r2, [r3, #8]
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010354:	4b2e      	ldr	r3, [pc, #184]	; (8010410 <tcp_listen_input+0x1f4>)
 8010356:	681a      	ldr	r2, [r3, #0]
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	60da      	str	r2, [r3, #12]
 801035c:	4a2c      	ldr	r2, [pc, #176]	; (8010410 <tcp_listen_input+0x1f4>)
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	6013      	str	r3, [r2, #0]
 8010362:	f003 fd39 	bl	8013dd8 <tcp_timer_needed>
 8010366:	4b2b      	ldr	r3, [pc, #172]	; (8010414 <tcp_listen_input+0x1f8>)
 8010368:	2201      	movs	r2, #1
 801036a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801036c:	6978      	ldr	r0, [r7, #20]
 801036e:	f001 fd8f 	bl	8011e90 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010372:	4b23      	ldr	r3, [pc, #140]	; (8010400 <tcp_listen_input+0x1e4>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	89db      	ldrh	r3, [r3, #14]
 8010378:	b29a      	uxth	r2, r3
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	3304      	adds	r3, #4
 8010394:	4618      	mov	r0, r3
 8010396:	f007 fb89 	bl	8017aac <ip4_route>
 801039a:	4601      	mov	r1, r0
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	3304      	adds	r3, #4
 80103a0:	461a      	mov	r2, r3
 80103a2:	4620      	mov	r0, r4
 80103a4:	f7ff fa34 	bl	800f810 <tcp_eff_send_mss_netif>
 80103a8:	4603      	mov	r3, r0
 80103aa:	461a      	mov	r2, r3
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80103b0:	2112      	movs	r1, #18
 80103b2:	6978      	ldr	r0, [r7, #20]
 80103b4:	f002 fc9c 	bl	8012cf0 <tcp_enqueue_flags>
 80103b8:	4603      	mov	r3, r0
 80103ba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80103bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d004      	beq.n	80103ce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80103c4:	2100      	movs	r1, #0
 80103c6:	6978      	ldr	r0, [r7, #20]
 80103c8:	f7fd fef6 	bl	800e1b8 <tcp_abandon>
      return;
 80103cc:	e007      	b.n	80103de <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80103ce:	6978      	ldr	r0, [r7, #20]
 80103d0:	f002 fd7c 	bl	8012ecc <tcp_output>
  return;
 80103d4:	bf00      	nop
 80103d6:	e001      	b.n	80103dc <tcp_listen_input+0x1c0>
    return;
 80103d8:	bf00      	nop
 80103da:	e000      	b.n	80103de <tcp_listen_input+0x1c2>
  return;
 80103dc:	bf00      	nop
}
 80103de:	371c      	adds	r7, #28
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd90      	pop	{r4, r7, pc}
 80103e4:	2000427c 	.word	0x2000427c
 80103e8:	0801c58c 	.word	0x0801c58c
 80103ec:	0801c784 	.word	0x0801c784
 80103f0:	0801c5d8 	.word	0x0801c5d8
 80103f4:	20004274 	.word	0x20004274
 80103f8:	2000427a 	.word	0x2000427a
 80103fc:	20004270 	.word	0x20004270
 8010400:	20004260 	.word	0x20004260
 8010404:	20007a10 	.word	0x20007a10
 8010408:	20007a14 	.word	0x20007a14
 801040c:	20007a00 	.word	0x20007a00
 8010410:	2000b134 	.word	0x2000b134
 8010414:	2000b130 	.word	0x2000b130

08010418 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b086      	sub	sp, #24
 801041c:	af04      	add	r7, sp, #16
 801041e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010420:	4b30      	ldr	r3, [pc, #192]	; (80104e4 <tcp_timewait_input+0xcc>)
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	f003 0304 	and.w	r3, r3, #4
 8010428:	2b00      	cmp	r3, #0
 801042a:	d154      	bne.n	80104d6 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d106      	bne.n	8010440 <tcp_timewait_input+0x28>
 8010432:	4b2d      	ldr	r3, [pc, #180]	; (80104e8 <tcp_timewait_input+0xd0>)
 8010434:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010438:	492c      	ldr	r1, [pc, #176]	; (80104ec <tcp_timewait_input+0xd4>)
 801043a:	482d      	ldr	r0, [pc, #180]	; (80104f0 <tcp_timewait_input+0xd8>)
 801043c:	f008 ff76 	bl	801932c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010440:	4b28      	ldr	r3, [pc, #160]	; (80104e4 <tcp_timewait_input+0xcc>)
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	f003 0302 	and.w	r3, r3, #2
 8010448:	2b00      	cmp	r3, #0
 801044a:	d02a      	beq.n	80104a2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801044c:	4b29      	ldr	r3, [pc, #164]	; (80104f4 <tcp_timewait_input+0xdc>)
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010454:	1ad3      	subs	r3, r2, r3
 8010456:	2b00      	cmp	r3, #0
 8010458:	db2d      	blt.n	80104b6 <tcp_timewait_input+0x9e>
 801045a:	4b26      	ldr	r3, [pc, #152]	; (80104f4 <tcp_timewait_input+0xdc>)
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010462:	6879      	ldr	r1, [r7, #4]
 8010464:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010466:	440b      	add	r3, r1
 8010468:	1ad3      	subs	r3, r2, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	dc23      	bgt.n	80104b6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801046e:	4b22      	ldr	r3, [pc, #136]	; (80104f8 <tcp_timewait_input+0xe0>)
 8010470:	6819      	ldr	r1, [r3, #0]
 8010472:	4b22      	ldr	r3, [pc, #136]	; (80104fc <tcp_timewait_input+0xe4>)
 8010474:	881b      	ldrh	r3, [r3, #0]
 8010476:	461a      	mov	r2, r3
 8010478:	4b1e      	ldr	r3, [pc, #120]	; (80104f4 <tcp_timewait_input+0xdc>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801047e:	4b20      	ldr	r3, [pc, #128]	; (8010500 <tcp_timewait_input+0xe8>)
 8010480:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010482:	885b      	ldrh	r3, [r3, #2]
 8010484:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010486:	4a1e      	ldr	r2, [pc, #120]	; (8010500 <tcp_timewait_input+0xe8>)
 8010488:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801048a:	8812      	ldrh	r2, [r2, #0]
 801048c:	b292      	uxth	r2, r2
 801048e:	9202      	str	r2, [sp, #8]
 8010490:	9301      	str	r3, [sp, #4]
 8010492:	4b1c      	ldr	r3, [pc, #112]	; (8010504 <tcp_timewait_input+0xec>)
 8010494:	9300      	str	r3, [sp, #0]
 8010496:	4b1c      	ldr	r3, [pc, #112]	; (8010508 <tcp_timewait_input+0xf0>)
 8010498:	4602      	mov	r2, r0
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f003 fada 	bl	8013a54 <tcp_rst>
      return;
 80104a0:	e01c      	b.n	80104dc <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80104a2:	4b10      	ldr	r3, [pc, #64]	; (80104e4 <tcp_timewait_input+0xcc>)
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	f003 0301 	and.w	r3, r3, #1
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d003      	beq.n	80104b6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80104ae:	4b17      	ldr	r3, [pc, #92]	; (801050c <tcp_timewait_input+0xf4>)
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80104b6:	4b11      	ldr	r3, [pc, #68]	; (80104fc <tcp_timewait_input+0xe4>)
 80104b8:	881b      	ldrh	r3, [r3, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d00d      	beq.n	80104da <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	8b5b      	ldrh	r3, [r3, #26]
 80104c2:	f043 0302 	orr.w	r3, r3, #2
 80104c6:	b29a      	uxth	r2, r3
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f002 fcfd 	bl	8012ecc <tcp_output>
  }
  return;
 80104d2:	bf00      	nop
 80104d4:	e001      	b.n	80104da <tcp_timewait_input+0xc2>
    return;
 80104d6:	bf00      	nop
 80104d8:	e000      	b.n	80104dc <tcp_timewait_input+0xc4>
  return;
 80104da:	bf00      	nop
}
 80104dc:	3708      	adds	r7, #8
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	2000427c 	.word	0x2000427c
 80104e8:	0801c58c 	.word	0x0801c58c
 80104ec:	0801c7a4 	.word	0x0801c7a4
 80104f0:	0801c5d8 	.word	0x0801c5d8
 80104f4:	20004270 	.word	0x20004270
 80104f8:	20004274 	.word	0x20004274
 80104fc:	2000427a 	.word	0x2000427a
 8010500:	20004260 	.word	0x20004260
 8010504:	20007a10 	.word	0x20007a10
 8010508:	20007a14 	.word	0x20007a14
 801050c:	2000b138 	.word	0x2000b138

08010510 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010510:	b590      	push	{r4, r7, lr}
 8010512:	b08d      	sub	sp, #52	; 0x34
 8010514:	af04      	add	r7, sp, #16
 8010516:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010518:	2300      	movs	r3, #0
 801051a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d106      	bne.n	8010534 <tcp_process+0x24>
 8010526:	4ba5      	ldr	r3, [pc, #660]	; (80107bc <tcp_process+0x2ac>)
 8010528:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801052c:	49a4      	ldr	r1, [pc, #656]	; (80107c0 <tcp_process+0x2b0>)
 801052e:	48a5      	ldr	r0, [pc, #660]	; (80107c4 <tcp_process+0x2b4>)
 8010530:	f008 fefc 	bl	801932c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010534:	4ba4      	ldr	r3, [pc, #656]	; (80107c8 <tcp_process+0x2b8>)
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	f003 0304 	and.w	r3, r3, #4
 801053c:	2b00      	cmp	r3, #0
 801053e:	d04e      	beq.n	80105de <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	7d1b      	ldrb	r3, [r3, #20]
 8010544:	2b02      	cmp	r3, #2
 8010546:	d108      	bne.n	801055a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801054c:	4b9f      	ldr	r3, [pc, #636]	; (80107cc <tcp_process+0x2bc>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	429a      	cmp	r2, r3
 8010552:	d123      	bne.n	801059c <tcp_process+0x8c>
        acceptable = 1;
 8010554:	2301      	movs	r3, #1
 8010556:	76fb      	strb	r3, [r7, #27]
 8010558:	e020      	b.n	801059c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801055e:	4b9c      	ldr	r3, [pc, #624]	; (80107d0 <tcp_process+0x2c0>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	429a      	cmp	r2, r3
 8010564:	d102      	bne.n	801056c <tcp_process+0x5c>
        acceptable = 1;
 8010566:	2301      	movs	r3, #1
 8010568:	76fb      	strb	r3, [r7, #27]
 801056a:	e017      	b.n	801059c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801056c:	4b98      	ldr	r3, [pc, #608]	; (80107d0 <tcp_process+0x2c0>)
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010574:	1ad3      	subs	r3, r2, r3
 8010576:	2b00      	cmp	r3, #0
 8010578:	db10      	blt.n	801059c <tcp_process+0x8c>
 801057a:	4b95      	ldr	r3, [pc, #596]	; (80107d0 <tcp_process+0x2c0>)
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010582:	6879      	ldr	r1, [r7, #4]
 8010584:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010586:	440b      	add	r3, r1
 8010588:	1ad3      	subs	r3, r2, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	dc06      	bgt.n	801059c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	8b5b      	ldrh	r3, [r3, #26]
 8010592:	f043 0302 	orr.w	r3, r3, #2
 8010596:	b29a      	uxth	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801059c:	7efb      	ldrb	r3, [r7, #27]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d01b      	beq.n	80105da <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	7d1b      	ldrb	r3, [r3, #20]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d106      	bne.n	80105b8 <tcp_process+0xa8>
 80105aa:	4b84      	ldr	r3, [pc, #528]	; (80107bc <tcp_process+0x2ac>)
 80105ac:	f44f 724e 	mov.w	r2, #824	; 0x338
 80105b0:	4988      	ldr	r1, [pc, #544]	; (80107d4 <tcp_process+0x2c4>)
 80105b2:	4884      	ldr	r0, [pc, #528]	; (80107c4 <tcp_process+0x2b4>)
 80105b4:	f008 feba 	bl	801932c <iprintf>
      recv_flags |= TF_RESET;
 80105b8:	4b87      	ldr	r3, [pc, #540]	; (80107d8 <tcp_process+0x2c8>)
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	f043 0308 	orr.w	r3, r3, #8
 80105c0:	b2da      	uxtb	r2, r3
 80105c2:	4b85      	ldr	r3, [pc, #532]	; (80107d8 <tcp_process+0x2c8>)
 80105c4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	8b5b      	ldrh	r3, [r3, #26]
 80105ca:	f023 0301 	bic.w	r3, r3, #1
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80105d4:	f06f 030d 	mvn.w	r3, #13
 80105d8:	e37a      	b.n	8010cd0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80105da:	2300      	movs	r3, #0
 80105dc:	e378      	b.n	8010cd0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80105de:	4b7a      	ldr	r3, [pc, #488]	; (80107c8 <tcp_process+0x2b8>)
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	f003 0302 	and.w	r3, r3, #2
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d010      	beq.n	801060c <tcp_process+0xfc>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	7d1b      	ldrb	r3, [r3, #20]
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	d00c      	beq.n	801060c <tcp_process+0xfc>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	7d1b      	ldrb	r3, [r3, #20]
 80105f6:	2b03      	cmp	r3, #3
 80105f8:	d008      	beq.n	801060c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	8b5b      	ldrh	r3, [r3, #26]
 80105fe:	f043 0302 	orr.w	r3, r3, #2
 8010602:	b29a      	uxth	r2, r3
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010608:	2300      	movs	r3, #0
 801060a:	e361      	b.n	8010cd0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	8b5b      	ldrh	r3, [r3, #26]
 8010610:	f003 0310 	and.w	r3, r3, #16
 8010614:	2b00      	cmp	r3, #0
 8010616:	d103      	bne.n	8010620 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010618:	4b70      	ldr	r3, [pc, #448]	; (80107dc <tcp_process+0x2cc>)
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f001 fc2d 	bl	8011e90 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	7d1b      	ldrb	r3, [r3, #20]
 801063a:	3b02      	subs	r3, #2
 801063c:	2b07      	cmp	r3, #7
 801063e:	f200 8337 	bhi.w	8010cb0 <tcp_process+0x7a0>
 8010642:	a201      	add	r2, pc, #4	; (adr r2, 8010648 <tcp_process+0x138>)
 8010644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010648:	08010669 	.word	0x08010669
 801064c:	08010899 	.word	0x08010899
 8010650:	08010a11 	.word	0x08010a11
 8010654:	08010a3b 	.word	0x08010a3b
 8010658:	08010b5f 	.word	0x08010b5f
 801065c:	08010a11 	.word	0x08010a11
 8010660:	08010beb 	.word	0x08010beb
 8010664:	08010c7b 	.word	0x08010c7b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010668:	4b57      	ldr	r3, [pc, #348]	; (80107c8 <tcp_process+0x2b8>)
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	f003 0310 	and.w	r3, r3, #16
 8010670:	2b00      	cmp	r3, #0
 8010672:	f000 80e4 	beq.w	801083e <tcp_process+0x32e>
 8010676:	4b54      	ldr	r3, [pc, #336]	; (80107c8 <tcp_process+0x2b8>)
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	f003 0302 	and.w	r3, r3, #2
 801067e:	2b00      	cmp	r3, #0
 8010680:	f000 80dd 	beq.w	801083e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	4b50      	ldr	r3, [pc, #320]	; (80107cc <tcp_process+0x2bc>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	429a      	cmp	r2, r3
 8010690:	f040 80d5 	bne.w	801083e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010694:	4b4e      	ldr	r3, [pc, #312]	; (80107d0 <tcp_process+0x2c0>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	1c5a      	adds	r2, r3, #1
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80106a6:	4b49      	ldr	r3, [pc, #292]	; (80107cc <tcp_process+0x2bc>)
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80106ae:	4b4c      	ldr	r3, [pc, #304]	; (80107e0 <tcp_process+0x2d0>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	89db      	ldrh	r3, [r3, #14]
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80106c8:	4b41      	ldr	r3, [pc, #260]	; (80107d0 <tcp_process+0x2c0>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	1e5a      	subs	r2, r3, #1
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2204      	movs	r2, #4
 80106d6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	3304      	adds	r3, #4
 80106e0:	4618      	mov	r0, r3
 80106e2:	f007 f9e3 	bl	8017aac <ip4_route>
 80106e6:	4601      	mov	r1, r0
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3304      	adds	r3, #4
 80106ec:	461a      	mov	r2, r3
 80106ee:	4620      	mov	r0, r4
 80106f0:	f7ff f88e 	bl	800f810 <tcp_eff_send_mss_netif>
 80106f4:	4603      	mov	r3, r0
 80106f6:	461a      	mov	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010700:	009a      	lsls	r2, r3, #2
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	f241 111c 	movw	r1, #4380	; 0x111c
 801070c:	428b      	cmp	r3, r1
 801070e:	bf38      	it	cc
 8010710:	460b      	movcc	r3, r1
 8010712:	429a      	cmp	r2, r3
 8010714:	d204      	bcs.n	8010720 <tcp_process+0x210>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	b29b      	uxth	r3, r3
 801071e:	e00d      	b.n	801073c <tcp_process+0x22c>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010724:	005b      	lsls	r3, r3, #1
 8010726:	f241 121c 	movw	r2, #4380	; 0x111c
 801072a:	4293      	cmp	r3, r2
 801072c:	d904      	bls.n	8010738 <tcp_process+0x228>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010732:	005b      	lsls	r3, r3, #1
 8010734:	b29b      	uxth	r3, r3
 8010736:	e001      	b.n	801073c <tcp_process+0x22c>
 8010738:	f241 131c 	movw	r3, #4380	; 0x111c
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010748:	2b00      	cmp	r3, #0
 801074a:	d106      	bne.n	801075a <tcp_process+0x24a>
 801074c:	4b1b      	ldr	r3, [pc, #108]	; (80107bc <tcp_process+0x2ac>)
 801074e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010752:	4924      	ldr	r1, [pc, #144]	; (80107e4 <tcp_process+0x2d4>)
 8010754:	481b      	ldr	r0, [pc, #108]	; (80107c4 <tcp_process+0x2b4>)
 8010756:	f008 fde9 	bl	801932c <iprintf>
        --pcb->snd_queuelen;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010760:	3b01      	subs	r3, #1
 8010762:	b29a      	uxth	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801076e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d111      	bne.n	801079a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801077a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d106      	bne.n	8010790 <tcp_process+0x280>
 8010782:	4b0e      	ldr	r3, [pc, #56]	; (80107bc <tcp_process+0x2ac>)
 8010784:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010788:	4917      	ldr	r1, [pc, #92]	; (80107e8 <tcp_process+0x2d8>)
 801078a:	480e      	ldr	r0, [pc, #56]	; (80107c4 <tcp_process+0x2b4>)
 801078c:	f008 fdce 	bl	801932c <iprintf>
          pcb->unsent = rseg->next;
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	66da      	str	r2, [r3, #108]	; 0x6c
 8010798:	e003      	b.n	80107a2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80107a2:	69f8      	ldr	r0, [r7, #28]
 80107a4:	f7fe fc70 	bl	800f088 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d11d      	bne.n	80107ec <tcp_process+0x2dc>
          pcb->rtime = -1;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107b6:	861a      	strh	r2, [r3, #48]	; 0x30
 80107b8:	e01f      	b.n	80107fa <tcp_process+0x2ea>
 80107ba:	bf00      	nop
 80107bc:	0801c58c 	.word	0x0801c58c
 80107c0:	0801c7c4 	.word	0x0801c7c4
 80107c4:	0801c5d8 	.word	0x0801c5d8
 80107c8:	2000427c 	.word	0x2000427c
 80107cc:	20004274 	.word	0x20004274
 80107d0:	20004270 	.word	0x20004270
 80107d4:	0801c7e0 	.word	0x0801c7e0
 80107d8:	2000427d 	.word	0x2000427d
 80107dc:	2000b138 	.word	0x2000b138
 80107e0:	20004260 	.word	0x20004260
 80107e4:	0801c800 	.word	0x0801c800
 80107e8:	0801c818 	.word	0x0801c818
        } else {
          pcb->rtime = 0;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00a      	beq.n	801081a <tcp_process+0x30a>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	6910      	ldr	r0, [r2, #16]
 801080e:	2200      	movs	r2, #0
 8010810:	6879      	ldr	r1, [r7, #4]
 8010812:	4798      	blx	r3
 8010814:	4603      	mov	r3, r0
 8010816:	76bb      	strb	r3, [r7, #26]
 8010818:	e001      	b.n	801081e <tcp_process+0x30e>
 801081a:	2300      	movs	r3, #0
 801081c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801081e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010822:	f113 0f0d 	cmn.w	r3, #13
 8010826:	d102      	bne.n	801082e <tcp_process+0x31e>
          return ERR_ABRT;
 8010828:	f06f 030c 	mvn.w	r3, #12
 801082c:	e250      	b.n	8010cd0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	8b5b      	ldrh	r3, [r3, #26]
 8010832:	f043 0302 	orr.w	r3, r3, #2
 8010836:	b29a      	uxth	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801083c:	e23a      	b.n	8010cb4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801083e:	4b9d      	ldr	r3, [pc, #628]	; (8010ab4 <tcp_process+0x5a4>)
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	f003 0310 	and.w	r3, r3, #16
 8010846:	2b00      	cmp	r3, #0
 8010848:	f000 8234 	beq.w	8010cb4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801084c:	4b9a      	ldr	r3, [pc, #616]	; (8010ab8 <tcp_process+0x5a8>)
 801084e:	6819      	ldr	r1, [r3, #0]
 8010850:	4b9a      	ldr	r3, [pc, #616]	; (8010abc <tcp_process+0x5ac>)
 8010852:	881b      	ldrh	r3, [r3, #0]
 8010854:	461a      	mov	r2, r3
 8010856:	4b9a      	ldr	r3, [pc, #616]	; (8010ac0 <tcp_process+0x5b0>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801085c:	4b99      	ldr	r3, [pc, #612]	; (8010ac4 <tcp_process+0x5b4>)
 801085e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010860:	885b      	ldrh	r3, [r3, #2]
 8010862:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010864:	4a97      	ldr	r2, [pc, #604]	; (8010ac4 <tcp_process+0x5b4>)
 8010866:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010868:	8812      	ldrh	r2, [r2, #0]
 801086a:	b292      	uxth	r2, r2
 801086c:	9202      	str	r2, [sp, #8]
 801086e:	9301      	str	r3, [sp, #4]
 8010870:	4b95      	ldr	r3, [pc, #596]	; (8010ac8 <tcp_process+0x5b8>)
 8010872:	9300      	str	r3, [sp, #0]
 8010874:	4b95      	ldr	r3, [pc, #596]	; (8010acc <tcp_process+0x5bc>)
 8010876:	4602      	mov	r2, r0
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f003 f8eb 	bl	8013a54 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010884:	2b05      	cmp	r3, #5
 8010886:	f200 8215 	bhi.w	8010cb4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2200      	movs	r2, #0
 801088e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f002 feab 	bl	80135ec <tcp_rexmit_rto>
      break;
 8010896:	e20d      	b.n	8010cb4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010898:	4b86      	ldr	r3, [pc, #536]	; (8010ab4 <tcp_process+0x5a4>)
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	f003 0310 	and.w	r3, r3, #16
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	f000 80a1 	beq.w	80109e8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80108a6:	4b84      	ldr	r3, [pc, #528]	; (8010ab8 <tcp_process+0x5a8>)
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	3b01      	subs	r3, #1
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	db7e      	blt.n	80109b4 <tcp_process+0x4a4>
 80108b6:	4b80      	ldr	r3, [pc, #512]	; (8010ab8 <tcp_process+0x5a8>)
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	dc77      	bgt.n	80109b4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2204      	movs	r2, #4
 80108c8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d102      	bne.n	80108d8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80108d2:	23fa      	movs	r3, #250	; 0xfa
 80108d4:	76bb      	strb	r3, [r7, #26]
 80108d6:	e01d      	b.n	8010914 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108dc:	699b      	ldr	r3, [r3, #24]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d106      	bne.n	80108f0 <tcp_process+0x3e0>
 80108e2:	4b7b      	ldr	r3, [pc, #492]	; (8010ad0 <tcp_process+0x5c0>)
 80108e4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80108e8:	497a      	ldr	r1, [pc, #488]	; (8010ad4 <tcp_process+0x5c4>)
 80108ea:	487b      	ldr	r0, [pc, #492]	; (8010ad8 <tcp_process+0x5c8>)
 80108ec:	f008 fd1e 	bl	801932c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108f4:	699b      	ldr	r3, [r3, #24]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d00a      	beq.n	8010910 <tcp_process+0x400>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108fe:	699b      	ldr	r3, [r3, #24]
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	6910      	ldr	r0, [r2, #16]
 8010904:	2200      	movs	r2, #0
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	4798      	blx	r3
 801090a:	4603      	mov	r3, r0
 801090c:	76bb      	strb	r3, [r7, #26]
 801090e:	e001      	b.n	8010914 <tcp_process+0x404>
 8010910:	23f0      	movs	r3, #240	; 0xf0
 8010912:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010914:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d00a      	beq.n	8010932 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801091c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010920:	f113 0f0d 	cmn.w	r3, #13
 8010924:	d002      	beq.n	801092c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f7fd fd04 	bl	800e334 <tcp_abort>
            }
            return ERR_ABRT;
 801092c:	f06f 030c 	mvn.w	r3, #12
 8010930:	e1ce      	b.n	8010cd0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 fae0 	bl	8010ef8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010938:	4b68      	ldr	r3, [pc, #416]	; (8010adc <tcp_process+0x5cc>)
 801093a:	881b      	ldrh	r3, [r3, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d005      	beq.n	801094c <tcp_process+0x43c>
            recv_acked--;
 8010940:	4b66      	ldr	r3, [pc, #408]	; (8010adc <tcp_process+0x5cc>)
 8010942:	881b      	ldrh	r3, [r3, #0]
 8010944:	3b01      	subs	r3, #1
 8010946:	b29a      	uxth	r2, r3
 8010948:	4b64      	ldr	r3, [pc, #400]	; (8010adc <tcp_process+0x5cc>)
 801094a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010950:	009a      	lsls	r2, r3, #2
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010956:	005b      	lsls	r3, r3, #1
 8010958:	f241 111c 	movw	r1, #4380	; 0x111c
 801095c:	428b      	cmp	r3, r1
 801095e:	bf38      	it	cc
 8010960:	460b      	movcc	r3, r1
 8010962:	429a      	cmp	r2, r3
 8010964:	d204      	bcs.n	8010970 <tcp_process+0x460>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	b29b      	uxth	r3, r3
 801096e:	e00d      	b.n	801098c <tcp_process+0x47c>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010974:	005b      	lsls	r3, r3, #1
 8010976:	f241 121c 	movw	r2, #4380	; 0x111c
 801097a:	4293      	cmp	r3, r2
 801097c:	d904      	bls.n	8010988 <tcp_process+0x478>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010982:	005b      	lsls	r3, r3, #1
 8010984:	b29b      	uxth	r3, r3
 8010986:	e001      	b.n	801098c <tcp_process+0x47c>
 8010988:	f241 131c 	movw	r3, #4380	; 0x111c
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010992:	4b53      	ldr	r3, [pc, #332]	; (8010ae0 <tcp_process+0x5d0>)
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	f003 0320 	and.w	r3, r3, #32
 801099a:	2b00      	cmp	r3, #0
 801099c:	d037      	beq.n	8010a0e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	8b5b      	ldrh	r3, [r3, #26]
 80109a2:	f043 0302 	orr.w	r3, r3, #2
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2207      	movs	r2, #7
 80109b0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80109b2:	e02c      	b.n	8010a0e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109b4:	4b40      	ldr	r3, [pc, #256]	; (8010ab8 <tcp_process+0x5a8>)
 80109b6:	6819      	ldr	r1, [r3, #0]
 80109b8:	4b40      	ldr	r3, [pc, #256]	; (8010abc <tcp_process+0x5ac>)
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	461a      	mov	r2, r3
 80109be:	4b40      	ldr	r3, [pc, #256]	; (8010ac0 <tcp_process+0x5b0>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109c4:	4b3f      	ldr	r3, [pc, #252]	; (8010ac4 <tcp_process+0x5b4>)
 80109c6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109c8:	885b      	ldrh	r3, [r3, #2]
 80109ca:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109cc:	4a3d      	ldr	r2, [pc, #244]	; (8010ac4 <tcp_process+0x5b4>)
 80109ce:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109d0:	8812      	ldrh	r2, [r2, #0]
 80109d2:	b292      	uxth	r2, r2
 80109d4:	9202      	str	r2, [sp, #8]
 80109d6:	9301      	str	r3, [sp, #4]
 80109d8:	4b3b      	ldr	r3, [pc, #236]	; (8010ac8 <tcp_process+0x5b8>)
 80109da:	9300      	str	r3, [sp, #0]
 80109dc:	4b3b      	ldr	r3, [pc, #236]	; (8010acc <tcp_process+0x5bc>)
 80109de:	4602      	mov	r2, r0
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f003 f837 	bl	8013a54 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80109e6:	e167      	b.n	8010cb8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80109e8:	4b32      	ldr	r3, [pc, #200]	; (8010ab4 <tcp_process+0x5a4>)
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	f003 0302 	and.w	r3, r3, #2
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	f000 8161 	beq.w	8010cb8 <tcp_process+0x7a8>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fa:	1e5a      	subs	r2, r3, #1
 80109fc:	4b30      	ldr	r3, [pc, #192]	; (8010ac0 <tcp_process+0x5b0>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	f040 8159 	bne.w	8010cb8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f002 fe12 	bl	8013630 <tcp_rexmit>
      break;
 8010a0c:	e154      	b.n	8010cb8 <tcp_process+0x7a8>
 8010a0e:	e153      	b.n	8010cb8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 fa71 	bl	8010ef8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010a16:	4b32      	ldr	r3, [pc, #200]	; (8010ae0 <tcp_process+0x5d0>)
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	f003 0320 	and.w	r3, r3, #32
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	f000 814c 	beq.w	8010cbc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	8b5b      	ldrh	r3, [r3, #26]
 8010a28:	f043 0302 	orr.w	r3, r3, #2
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2207      	movs	r2, #7
 8010a36:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a38:	e140      	b.n	8010cbc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fa5c 	bl	8010ef8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010a40:	4b27      	ldr	r3, [pc, #156]	; (8010ae0 <tcp_process+0x5d0>)
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	f003 0320 	and.w	r3, r3, #32
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d071      	beq.n	8010b30 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a4c:	4b19      	ldr	r3, [pc, #100]	; (8010ab4 <tcp_process+0x5a4>)
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	f003 0310 	and.w	r3, r3, #16
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d060      	beq.n	8010b1a <tcp_process+0x60a>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a5c:	4b16      	ldr	r3, [pc, #88]	; (8010ab8 <tcp_process+0x5a8>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d15a      	bne.n	8010b1a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d156      	bne.n	8010b1a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	8b5b      	ldrh	r3, [r3, #26]
 8010a70:	f043 0302 	orr.w	r3, r3, #2
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f7fe fdbe 	bl	800f5fc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010a80:	4b18      	ldr	r3, [pc, #96]	; (8010ae4 <tcp_process+0x5d4>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d105      	bne.n	8010a96 <tcp_process+0x586>
 8010a8a:	4b16      	ldr	r3, [pc, #88]	; (8010ae4 <tcp_process+0x5d4>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	4a14      	ldr	r2, [pc, #80]	; (8010ae4 <tcp_process+0x5d4>)
 8010a92:	6013      	str	r3, [r2, #0]
 8010a94:	e02e      	b.n	8010af4 <tcp_process+0x5e4>
 8010a96:	4b13      	ldr	r3, [pc, #76]	; (8010ae4 <tcp_process+0x5d4>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	617b      	str	r3, [r7, #20]
 8010a9c:	e027      	b.n	8010aee <tcp_process+0x5de>
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	68db      	ldr	r3, [r3, #12]
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d11f      	bne.n	8010ae8 <tcp_process+0x5d8>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	68da      	ldr	r2, [r3, #12]
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	60da      	str	r2, [r3, #12]
 8010ab0:	e020      	b.n	8010af4 <tcp_process+0x5e4>
 8010ab2:	bf00      	nop
 8010ab4:	2000427c 	.word	0x2000427c
 8010ab8:	20004274 	.word	0x20004274
 8010abc:	2000427a 	.word	0x2000427a
 8010ac0:	20004270 	.word	0x20004270
 8010ac4:	20004260 	.word	0x20004260
 8010ac8:	20007a10 	.word	0x20007a10
 8010acc:	20007a14 	.word	0x20007a14
 8010ad0:	0801c58c 	.word	0x0801c58c
 8010ad4:	0801c82c 	.word	0x0801c82c
 8010ad8:	0801c5d8 	.word	0x0801c5d8
 8010adc:	20004278 	.word	0x20004278
 8010ae0:	2000427d 	.word	0x2000427d
 8010ae4:	2000b134 	.word	0x2000b134
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	617b      	str	r3, [r7, #20]
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d1d4      	bne.n	8010a9e <tcp_process+0x58e>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2200      	movs	r2, #0
 8010af8:	60da      	str	r2, [r3, #12]
 8010afa:	4b77      	ldr	r3, [pc, #476]	; (8010cd8 <tcp_process+0x7c8>)
 8010afc:	2201      	movs	r2, #1
 8010afe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	220a      	movs	r2, #10
 8010b04:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010b06:	4b75      	ldr	r3, [pc, #468]	; (8010cdc <tcp_process+0x7cc>)
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	60da      	str	r2, [r3, #12]
 8010b0e:	4a73      	ldr	r2, [pc, #460]	; (8010cdc <tcp_process+0x7cc>)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6013      	str	r3, [r2, #0]
 8010b14:	f003 f960 	bl	8013dd8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010b18:	e0d2      	b.n	8010cc0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	8b5b      	ldrh	r3, [r3, #26]
 8010b1e:	f043 0302 	orr.w	r3, r3, #2
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2208      	movs	r2, #8
 8010b2c:	751a      	strb	r2, [r3, #20]
      break;
 8010b2e:	e0c7      	b.n	8010cc0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b30:	4b6b      	ldr	r3, [pc, #428]	; (8010ce0 <tcp_process+0x7d0>)
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	f003 0310 	and.w	r3, r3, #16
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f000 80c1 	beq.w	8010cc0 <tcp_process+0x7b0>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b42:	4b68      	ldr	r3, [pc, #416]	; (8010ce4 <tcp_process+0x7d4>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	f040 80ba 	bne.w	8010cc0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f040 80b5 	bne.w	8010cc0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2206      	movs	r2, #6
 8010b5a:	751a      	strb	r2, [r3, #20]
      break;
 8010b5c:	e0b0      	b.n	8010cc0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f000 f9ca 	bl	8010ef8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010b64:	4b60      	ldr	r3, [pc, #384]	; (8010ce8 <tcp_process+0x7d8>)
 8010b66:	781b      	ldrb	r3, [r3, #0]
 8010b68:	f003 0320 	and.w	r3, r3, #32
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	f000 80a9 	beq.w	8010cc4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	8b5b      	ldrh	r3, [r3, #26]
 8010b76:	f043 0302 	orr.w	r3, r3, #2
 8010b7a:	b29a      	uxth	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7fe fd3b 	bl	800f5fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010b86:	4b59      	ldr	r3, [pc, #356]	; (8010cec <tcp_process+0x7dc>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d105      	bne.n	8010b9c <tcp_process+0x68c>
 8010b90:	4b56      	ldr	r3, [pc, #344]	; (8010cec <tcp_process+0x7dc>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	4a55      	ldr	r2, [pc, #340]	; (8010cec <tcp_process+0x7dc>)
 8010b98:	6013      	str	r3, [r2, #0]
 8010b9a:	e013      	b.n	8010bc4 <tcp_process+0x6b4>
 8010b9c:	4b53      	ldr	r3, [pc, #332]	; (8010cec <tcp_process+0x7dc>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	613b      	str	r3, [r7, #16]
 8010ba2:	e00c      	b.n	8010bbe <tcp_process+0x6ae>
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d104      	bne.n	8010bb8 <tcp_process+0x6a8>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	68da      	ldr	r2, [r3, #12]
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	60da      	str	r2, [r3, #12]
 8010bb6:	e005      	b.n	8010bc4 <tcp_process+0x6b4>
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	613b      	str	r3, [r7, #16]
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d1ef      	bne.n	8010ba4 <tcp_process+0x694>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	60da      	str	r2, [r3, #12]
 8010bca:	4b43      	ldr	r3, [pc, #268]	; (8010cd8 <tcp_process+0x7c8>)
 8010bcc:	2201      	movs	r2, #1
 8010bce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	220a      	movs	r2, #10
 8010bd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010bd6:	4b41      	ldr	r3, [pc, #260]	; (8010cdc <tcp_process+0x7cc>)
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	60da      	str	r2, [r3, #12]
 8010bde:	4a3f      	ldr	r2, [pc, #252]	; (8010cdc <tcp_process+0x7cc>)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6013      	str	r3, [r2, #0]
 8010be4:	f003 f8f8 	bl	8013dd8 <tcp_timer_needed>
      }
      break;
 8010be8:	e06c      	b.n	8010cc4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f984 	bl	8010ef8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010bf0:	4b3b      	ldr	r3, [pc, #236]	; (8010ce0 <tcp_process+0x7d0>)
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	f003 0310 	and.w	r3, r3, #16
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d065      	beq.n	8010cc8 <tcp_process+0x7b8>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c00:	4b38      	ldr	r3, [pc, #224]	; (8010ce4 <tcp_process+0x7d4>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d15f      	bne.n	8010cc8 <tcp_process+0x7b8>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d15b      	bne.n	8010cc8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7fe fcf3 	bl	800f5fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010c16:	4b35      	ldr	r3, [pc, #212]	; (8010cec <tcp_process+0x7dc>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d105      	bne.n	8010c2c <tcp_process+0x71c>
 8010c20:	4b32      	ldr	r3, [pc, #200]	; (8010cec <tcp_process+0x7dc>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	68db      	ldr	r3, [r3, #12]
 8010c26:	4a31      	ldr	r2, [pc, #196]	; (8010cec <tcp_process+0x7dc>)
 8010c28:	6013      	str	r3, [r2, #0]
 8010c2a:	e013      	b.n	8010c54 <tcp_process+0x744>
 8010c2c:	4b2f      	ldr	r3, [pc, #188]	; (8010cec <tcp_process+0x7dc>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	60fb      	str	r3, [r7, #12]
 8010c32:	e00c      	b.n	8010c4e <tcp_process+0x73e>
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d104      	bne.n	8010c48 <tcp_process+0x738>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	68da      	ldr	r2, [r3, #12]
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	60da      	str	r2, [r3, #12]
 8010c46:	e005      	b.n	8010c54 <tcp_process+0x744>
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	60fb      	str	r3, [r7, #12]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d1ef      	bne.n	8010c34 <tcp_process+0x724>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2200      	movs	r2, #0
 8010c58:	60da      	str	r2, [r3, #12]
 8010c5a:	4b1f      	ldr	r3, [pc, #124]	; (8010cd8 <tcp_process+0x7c8>)
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	220a      	movs	r2, #10
 8010c64:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010c66:	4b1d      	ldr	r3, [pc, #116]	; (8010cdc <tcp_process+0x7cc>)
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	60da      	str	r2, [r3, #12]
 8010c6e:	4a1b      	ldr	r2, [pc, #108]	; (8010cdc <tcp_process+0x7cc>)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6013      	str	r3, [r2, #0]
 8010c74:	f003 f8b0 	bl	8013dd8 <tcp_timer_needed>
      }
      break;
 8010c78:	e026      	b.n	8010cc8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 f93c 	bl	8010ef8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010c80:	4b17      	ldr	r3, [pc, #92]	; (8010ce0 <tcp_process+0x7d0>)
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	f003 0310 	and.w	r3, r3, #16
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d01f      	beq.n	8010ccc <tcp_process+0x7bc>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c90:	4b14      	ldr	r3, [pc, #80]	; (8010ce4 <tcp_process+0x7d4>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d119      	bne.n	8010ccc <tcp_process+0x7bc>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d115      	bne.n	8010ccc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010ca0:	4b11      	ldr	r3, [pc, #68]	; (8010ce8 <tcp_process+0x7d8>)
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	f043 0310 	orr.w	r3, r3, #16
 8010ca8:	b2da      	uxtb	r2, r3
 8010caa:	4b0f      	ldr	r3, [pc, #60]	; (8010ce8 <tcp_process+0x7d8>)
 8010cac:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010cae:	e00d      	b.n	8010ccc <tcp_process+0x7bc>
    default:
      break;
 8010cb0:	bf00      	nop
 8010cb2:	e00c      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cb4:	bf00      	nop
 8010cb6:	e00a      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cb8:	bf00      	nop
 8010cba:	e008      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cbc:	bf00      	nop
 8010cbe:	e006      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cc0:	bf00      	nop
 8010cc2:	e004      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cc4:	bf00      	nop
 8010cc6:	e002      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cc8:	bf00      	nop
 8010cca:	e000      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010ccc:	bf00      	nop
  }
  return ERR_OK;
 8010cce:	2300      	movs	r3, #0
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3724      	adds	r7, #36	; 0x24
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd90      	pop	{r4, r7, pc}
 8010cd8:	2000b130 	.word	0x2000b130
 8010cdc:	2000b144 	.word	0x2000b144
 8010ce0:	2000427c 	.word	0x2000427c
 8010ce4:	20004274 	.word	0x20004274
 8010ce8:	2000427d 	.word	0x2000427d
 8010cec:	2000b134 	.word	0x2000b134

08010cf0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010cf0:	b590      	push	{r4, r7, lr}
 8010cf2:	b085      	sub	sp, #20
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d106      	bne.n	8010d0e <tcp_oos_insert_segment+0x1e>
 8010d00:	4b3b      	ldr	r3, [pc, #236]	; (8010df0 <tcp_oos_insert_segment+0x100>)
 8010d02:	f240 421f 	movw	r2, #1055	; 0x41f
 8010d06:	493b      	ldr	r1, [pc, #236]	; (8010df4 <tcp_oos_insert_segment+0x104>)
 8010d08:	483b      	ldr	r0, [pc, #236]	; (8010df8 <tcp_oos_insert_segment+0x108>)
 8010d0a:	f008 fb0f 	bl	801932c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	899b      	ldrh	r3, [r3, #12]
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fb f92a 	bl	800bf70 <lwip_htons>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	f003 0301 	and.w	r3, r3, #1
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d028      	beq.n	8010d7a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010d28:	6838      	ldr	r0, [r7, #0]
 8010d2a:	f7fe f999 	bl	800f060 <tcp_segs_free>
    next = NULL;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	603b      	str	r3, [r7, #0]
 8010d32:	e056      	b.n	8010de2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	899b      	ldrh	r3, [r3, #12]
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fb f917 	bl	800bf70 <lwip_htons>
 8010d42:	4603      	mov	r3, r0
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	f003 0301 	and.w	r3, r3, #1
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d00d      	beq.n	8010d6a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	899b      	ldrh	r3, [r3, #12]
 8010d54:	b29c      	uxth	r4, r3
 8010d56:	2001      	movs	r0, #1
 8010d58:	f7fb f90a 	bl	800bf70 <lwip_htons>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	461a      	mov	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	68db      	ldr	r3, [r3, #12]
 8010d64:	4322      	orrs	r2, r4
 8010d66:	b292      	uxth	r2, r2
 8010d68:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010d74:	68f8      	ldr	r0, [r7, #12]
 8010d76:	f7fe f987 	bl	800f088 <tcp_seg_free>
    while (next &&
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00e      	beq.n	8010d9e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	891b      	ldrh	r3, [r3, #8]
 8010d84:	461a      	mov	r2, r3
 8010d86:	4b1d      	ldr	r3, [pc, #116]	; (8010dfc <tcp_oos_insert_segment+0x10c>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	441a      	add	r2, r3
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	6839      	ldr	r1, [r7, #0]
 8010d94:	8909      	ldrh	r1, [r1, #8]
 8010d96:	440b      	add	r3, r1
 8010d98:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	daca      	bge.n	8010d34 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d01e      	beq.n	8010de2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	891b      	ldrh	r3, [r3, #8]
 8010da8:	461a      	mov	r2, r3
 8010daa:	4b14      	ldr	r3, [pc, #80]	; (8010dfc <tcp_oos_insert_segment+0x10c>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	441a      	add	r2, r3
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	dd12      	ble.n	8010de2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	68db      	ldr	r3, [r3, #12]
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	4b0d      	ldr	r3, [pc, #52]	; (8010dfc <tcp_oos_insert_segment+0x10c>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	1ad3      	subs	r3, r2, r3
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	685a      	ldr	r2, [r3, #4]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	891b      	ldrh	r3, [r3, #8]
 8010dda:	4619      	mov	r1, r3
 8010ddc:	4610      	mov	r0, r2
 8010dde:	f7fc fb2d 	bl	800d43c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	683a      	ldr	r2, [r7, #0]
 8010de6:	601a      	str	r2, [r3, #0]
}
 8010de8:	bf00      	nop
 8010dea:	3714      	adds	r7, #20
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd90      	pop	{r4, r7, pc}
 8010df0:	0801c58c 	.word	0x0801c58c
 8010df4:	0801c84c 	.word	0x0801c84c
 8010df8:	0801c5d8 	.word	0x0801c5d8
 8010dfc:	20004270 	.word	0x20004270

08010e00 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010e00:	b5b0      	push	{r4, r5, r7, lr}
 8010e02:	b086      	sub	sp, #24
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	607a      	str	r2, [r7, #4]
 8010e0c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010e0e:	e03e      	b.n	8010e8e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7fc fd20 	bl	800d864 <pbuf_clen>
 8010e24:	4603      	mov	r3, r0
 8010e26:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e2e:	8a7a      	ldrh	r2, [r7, #18]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d906      	bls.n	8010e42 <tcp_free_acked_segments+0x42>
 8010e34:	4b2a      	ldr	r3, [pc, #168]	; (8010ee0 <tcp_free_acked_segments+0xe0>)
 8010e36:	f240 4257 	movw	r2, #1111	; 0x457
 8010e3a:	492a      	ldr	r1, [pc, #168]	; (8010ee4 <tcp_free_acked_segments+0xe4>)
 8010e3c:	482a      	ldr	r0, [pc, #168]	; (8010ee8 <tcp_free_acked_segments+0xe8>)
 8010e3e:	f008 fa75 	bl	801932c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010e48:	8a7b      	ldrh	r3, [r7, #18]
 8010e4a:	1ad3      	subs	r3, r2, r3
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	891a      	ldrh	r2, [r3, #8]
 8010e58:	4b24      	ldr	r3, [pc, #144]	; (8010eec <tcp_free_acked_segments+0xec>)
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	4b22      	ldr	r3, [pc, #136]	; (8010eec <tcp_free_acked_segments+0xec>)
 8010e62:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010e64:	6978      	ldr	r0, [r7, #20]
 8010e66:	f7fe f90f 	bl	800f088 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d00c      	beq.n	8010e8e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d109      	bne.n	8010e8e <tcp_free_acked_segments+0x8e>
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d106      	bne.n	8010e8e <tcp_free_acked_segments+0x8e>
 8010e80:	4b17      	ldr	r3, [pc, #92]	; (8010ee0 <tcp_free_acked_segments+0xe0>)
 8010e82:	f240 4262 	movw	r2, #1122	; 0x462
 8010e86:	491a      	ldr	r1, [pc, #104]	; (8010ef0 <tcp_free_acked_segments+0xf0>)
 8010e88:	4817      	ldr	r0, [pc, #92]	; (8010ee8 <tcp_free_acked_segments+0xe8>)
 8010e8a:	f008 fa4f 	bl	801932c <iprintf>
  while (seg_list != NULL &&
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d020      	beq.n	8010ed6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fb f87d 	bl	800bf9a <lwip_htonl>
 8010ea0:	4604      	mov	r4, r0
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	891b      	ldrh	r3, [r3, #8]
 8010ea6:	461d      	mov	r5, r3
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	899b      	ldrh	r3, [r3, #12]
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fb f85d 	bl	800bf70 <lwip_htons>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	f003 0303 	and.w	r3, r3, #3
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d001      	beq.n	8010ec6 <tcp_free_acked_segments+0xc6>
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	e000      	b.n	8010ec8 <tcp_free_acked_segments+0xc8>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	442b      	add	r3, r5
 8010eca:	18e2      	adds	r2, r4, r3
 8010ecc:	4b09      	ldr	r3, [pc, #36]	; (8010ef4 <tcp_free_acked_segments+0xf4>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	dd9c      	ble.n	8010e10 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010ed6:	68bb      	ldr	r3, [r7, #8]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3718      	adds	r7, #24
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bdb0      	pop	{r4, r5, r7, pc}
 8010ee0:	0801c58c 	.word	0x0801c58c
 8010ee4:	0801c874 	.word	0x0801c874
 8010ee8:	0801c5d8 	.word	0x0801c5d8
 8010eec:	20004278 	.word	0x20004278
 8010ef0:	0801c89c 	.word	0x0801c89c
 8010ef4:	20004274 	.word	0x20004274

08010ef8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010ef8:	b5b0      	push	{r4, r5, r7, lr}
 8010efa:	b094      	sub	sp, #80	; 0x50
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010f00:	2300      	movs	r3, #0
 8010f02:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d106      	bne.n	8010f18 <tcp_receive+0x20>
 8010f0a:	4ba6      	ldr	r3, [pc, #664]	; (80111a4 <tcp_receive+0x2ac>)
 8010f0c:	f240 427b 	movw	r2, #1147	; 0x47b
 8010f10:	49a5      	ldr	r1, [pc, #660]	; (80111a8 <tcp_receive+0x2b0>)
 8010f12:	48a6      	ldr	r0, [pc, #664]	; (80111ac <tcp_receive+0x2b4>)
 8010f14:	f008 fa0a 	bl	801932c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	7d1b      	ldrb	r3, [r3, #20]
 8010f1c:	2b03      	cmp	r3, #3
 8010f1e:	d806      	bhi.n	8010f2e <tcp_receive+0x36>
 8010f20:	4ba0      	ldr	r3, [pc, #640]	; (80111a4 <tcp_receive+0x2ac>)
 8010f22:	f240 427c 	movw	r2, #1148	; 0x47c
 8010f26:	49a2      	ldr	r1, [pc, #648]	; (80111b0 <tcp_receive+0x2b8>)
 8010f28:	48a0      	ldr	r0, [pc, #640]	; (80111ac <tcp_receive+0x2b4>)
 8010f2a:	f008 f9ff 	bl	801932c <iprintf>

  if (flags & TCP_ACK) {
 8010f2e:	4ba1      	ldr	r3, [pc, #644]	; (80111b4 <tcp_receive+0x2bc>)
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	f003 0310 	and.w	r3, r3, #16
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	f000 8263 	beq.w	8011402 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f42:	461a      	mov	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f48:	4413      	add	r3, r2
 8010f4a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f50:	4b99      	ldr	r3, [pc, #612]	; (80111b8 <tcp_receive+0x2c0>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	db1b      	blt.n	8010f92 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f5e:	4b96      	ldr	r3, [pc, #600]	; (80111b8 <tcp_receive+0x2c0>)
 8010f60:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d106      	bne.n	8010f74 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f6a:	4b94      	ldr	r3, [pc, #592]	; (80111bc <tcp_receive+0x2c4>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	db0e      	blt.n	8010f92 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f78:	4b90      	ldr	r3, [pc, #576]	; (80111bc <tcp_receive+0x2c4>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d125      	bne.n	8010fcc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010f80:	4b8f      	ldr	r3, [pc, #572]	; (80111c0 <tcp_receive+0x2c8>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	89db      	ldrh	r3, [r3, #14]
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d91c      	bls.n	8010fcc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010f92:	4b8b      	ldr	r3, [pc, #556]	; (80111c0 <tcp_receive+0x2c8>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	89db      	ldrh	r3, [r3, #14]
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d205      	bcs.n	8010fbc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010fbc:	4b7e      	ldr	r3, [pc, #504]	; (80111b8 <tcp_receive+0x2c0>)
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010fc4:	4b7d      	ldr	r3, [pc, #500]	; (80111bc <tcp_receive+0x2c4>)
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010fcc:	4b7b      	ldr	r3, [pc, #492]	; (80111bc <tcp_receive+0x2c4>)
 8010fce:	681a      	ldr	r2, [r3, #0]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	dc58      	bgt.n	801108c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010fda:	4b7a      	ldr	r3, [pc, #488]	; (80111c4 <tcp_receive+0x2cc>)
 8010fdc:	881b      	ldrh	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d14b      	bne.n	801107a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fe6:	687a      	ldr	r2, [r7, #4]
 8010fe8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010fec:	4413      	add	r3, r2
 8010fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d142      	bne.n	801107a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	db3d      	blt.n	801107a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011002:	4b6e      	ldr	r3, [pc, #440]	; (80111bc <tcp_receive+0x2c4>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	429a      	cmp	r2, r3
 8011008:	d137      	bne.n	801107a <tcp_receive+0x182>
              found_dupack = 1;
 801100a:	2301      	movs	r3, #1
 801100c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011014:	2bff      	cmp	r3, #255	; 0xff
 8011016:	d007      	beq.n	8011028 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801101e:	3301      	adds	r3, #1
 8011020:	b2da      	uxtb	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801102e:	2b03      	cmp	r3, #3
 8011030:	d91b      	bls.n	801106a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801103c:	4413      	add	r3, r2
 801103e:	b29a      	uxth	r2, r3
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011046:	429a      	cmp	r2, r3
 8011048:	d30a      	bcc.n	8011060 <tcp_receive+0x168>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011054:	4413      	add	r3, r2
 8011056:	b29a      	uxth	r2, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801105e:	e004      	b.n	801106a <tcp_receive+0x172>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011066:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011070:	2b02      	cmp	r3, #2
 8011072:	d902      	bls.n	801107a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f002 fb47 	bl	8013708 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801107a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801107c:	2b00      	cmp	r3, #0
 801107e:	f040 8160 	bne.w	8011342 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2200      	movs	r2, #0
 8011086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801108a:	e15a      	b.n	8011342 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801108c:	4b4b      	ldr	r3, [pc, #300]	; (80111bc <tcp_receive+0x2c4>)
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011094:	1ad3      	subs	r3, r2, r3
 8011096:	3b01      	subs	r3, #1
 8011098:	2b00      	cmp	r3, #0
 801109a:	f2c0 814d 	blt.w	8011338 <tcp_receive+0x440>
 801109e:	4b47      	ldr	r3, [pc, #284]	; (80111bc <tcp_receive+0x2c4>)
 80110a0:	681a      	ldr	r2, [r3, #0]
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110a6:	1ad3      	subs	r3, r2, r3
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f300 8145 	bgt.w	8011338 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	8b5b      	ldrh	r3, [r3, #26]
 80110b2:	f003 0304 	and.w	r3, r3, #4
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d010      	beq.n	80110dc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	8b5b      	ldrh	r3, [r3, #26]
 80110be:	f023 0304 	bic.w	r3, r3, #4
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2200      	movs	r2, #0
 80110d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2200      	movs	r2, #0
 80110e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80110ea:	10db      	asrs	r3, r3, #3
 80110ec:	b21b      	sxth	r3, r3
 80110ee:	b29a      	uxth	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	4413      	add	r3, r2
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	b21a      	sxth	r2, r3
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011104:	4b2d      	ldr	r3, [pc, #180]	; (80111bc <tcp_receive+0x2c4>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	b29a      	uxth	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801110e:	b29b      	uxth	r3, r3
 8011110:	1ad3      	subs	r3, r2, r3
 8011112:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2200      	movs	r2, #0
 8011118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801111c:	4b27      	ldr	r3, [pc, #156]	; (80111bc <tcp_receive+0x2c4>)
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	7d1b      	ldrb	r3, [r3, #20]
 8011128:	2b03      	cmp	r3, #3
 801112a:	f240 8096 	bls.w	801125a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801113a:	429a      	cmp	r2, r3
 801113c:	d244      	bcs.n	80111c8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	8b5b      	ldrh	r3, [r3, #26]
 8011142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011146:	2b00      	cmp	r3, #0
 8011148:	d001      	beq.n	801114e <tcp_receive+0x256>
 801114a:	2301      	movs	r3, #1
 801114c:	e000      	b.n	8011150 <tcp_receive+0x258>
 801114e:	2302      	movs	r3, #2
 8011150:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011154:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011158:	b29a      	uxth	r2, r3
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801115e:	fb12 f303 	smulbb	r3, r2, r3
 8011162:	b29b      	uxth	r3, r3
 8011164:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011166:	4293      	cmp	r3, r2
 8011168:	bf28      	it	cs
 801116a:	4613      	movcs	r3, r2
 801116c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011174:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011176:	4413      	add	r3, r2
 8011178:	b29a      	uxth	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011180:	429a      	cmp	r2, r3
 8011182:	d309      	bcc.n	8011198 <tcp_receive+0x2a0>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801118a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801118c:	4413      	add	r3, r2
 801118e:	b29a      	uxth	r2, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011196:	e060      	b.n	801125a <tcp_receive+0x362>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801119e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80111a2:	e05a      	b.n	801125a <tcp_receive+0x362>
 80111a4:	0801c58c 	.word	0x0801c58c
 80111a8:	0801c8bc 	.word	0x0801c8bc
 80111ac:	0801c5d8 	.word	0x0801c5d8
 80111b0:	0801c8d8 	.word	0x0801c8d8
 80111b4:	2000427c 	.word	0x2000427c
 80111b8:	20004270 	.word	0x20004270
 80111bc:	20004274 	.word	0x20004274
 80111c0:	20004260 	.word	0x20004260
 80111c4:	2000427a 	.word	0x2000427a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80111ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111d0:	4413      	add	r3, r2
 80111d2:	b29a      	uxth	r2, r3
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80111da:	429a      	cmp	r2, r3
 80111dc:	d309      	bcc.n	80111f2 <tcp_receive+0x2fa>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80111e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111e6:	4413      	add	r3, r2
 80111e8:	b29a      	uxth	r2, r3
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80111f0:	e004      	b.n	80111fc <tcp_receive+0x304>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011208:	429a      	cmp	r2, r3
 801120a:	d326      	bcc.n	801125a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011218:	1ad3      	subs	r3, r2, r3
 801121a:	b29a      	uxth	r2, r3
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801122c:	4413      	add	r3, r2
 801122e:	b29a      	uxth	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011236:	429a      	cmp	r2, r3
 8011238:	d30a      	bcc.n	8011250 <tcp_receive+0x358>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011244:	4413      	add	r3, r2
 8011246:	b29a      	uxth	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801124e:	e004      	b.n	801125a <tcp_receive+0x362>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011256:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011262:	4a98      	ldr	r2, [pc, #608]	; (80114c4 <tcp_receive+0x5cc>)
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7ff fdcb 	bl	8010e00 <tcp_free_acked_segments>
 801126a:	4602      	mov	r2, r0
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011278:	4a93      	ldr	r2, [pc, #588]	; (80114c8 <tcp_receive+0x5d0>)
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f7ff fdc0 	bl	8010e00 <tcp_free_acked_segments>
 8011280:	4602      	mov	r2, r0
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801128a:	2b00      	cmp	r3, #0
 801128c:	d104      	bne.n	8011298 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011294:	861a      	strh	r2, [r3, #48]	; 0x30
 8011296:	e002      	b.n	801129e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2200      	movs	r2, #0
 801129c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2200      	movs	r2, #0
 80112a2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d103      	bne.n	80112b4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2200      	movs	r2, #0
 80112b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80112ba:	4b84      	ldr	r3, [pc, #528]	; (80114cc <tcp_receive+0x5d4>)
 80112bc:	881b      	ldrh	r3, [r3, #0]
 80112be:	4413      	add	r3, r2
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	8b5b      	ldrh	r3, [r3, #26]
 80112cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d035      	beq.n	8011340 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d118      	bne.n	801130e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d00c      	beq.n	80112fe <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7fa fe52 	bl	800bf9a <lwip_htonl>
 80112f6:	4603      	mov	r3, r0
 80112f8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	dc20      	bgt.n	8011340 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	8b5b      	ldrh	r3, [r3, #26]
 8011302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011306:	b29a      	uxth	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801130c:	e018      	b.n	8011340 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	4618      	mov	r0, r3
 801131c:	f7fa fe3d 	bl	800bf9a <lwip_htonl>
 8011320:	4603      	mov	r3, r0
 8011322:	1ae3      	subs	r3, r4, r3
 8011324:	2b00      	cmp	r3, #0
 8011326:	dc0b      	bgt.n	8011340 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	8b5b      	ldrh	r3, [r3, #26]
 801132c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011330:	b29a      	uxth	r2, r3
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011336:	e003      	b.n	8011340 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f002 fbdd 	bl	8013af8 <tcp_send_empty_ack>
 801133e:	e000      	b.n	8011342 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011340:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011346:	2b00      	cmp	r3, #0
 8011348:	d05b      	beq.n	8011402 <tcp_receive+0x50a>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801134e:	4b60      	ldr	r3, [pc, #384]	; (80114d0 <tcp_receive+0x5d8>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	1ad3      	subs	r3, r2, r3
 8011354:	2b00      	cmp	r3, #0
 8011356:	da54      	bge.n	8011402 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011358:	4b5e      	ldr	r3, [pc, #376]	; (80114d4 <tcp_receive+0x5dc>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	b29a      	uxth	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011362:	b29b      	uxth	r3, r3
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	b29b      	uxth	r3, r3
 8011368:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801136c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011376:	10db      	asrs	r3, r3, #3
 8011378:	b21b      	sxth	r3, r3
 801137a:	b29b      	uxth	r3, r3
 801137c:	1ad3      	subs	r3, r2, r3
 801137e:	b29b      	uxth	r3, r3
 8011380:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801138a:	b29a      	uxth	r2, r3
 801138c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011390:	4413      	add	r3, r2
 8011392:	b29b      	uxth	r3, r3
 8011394:	b21a      	sxth	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801139a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801139e:	2b00      	cmp	r3, #0
 80113a0:	da05      	bge.n	80113ae <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80113a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80113a6:	425b      	negs	r3, r3
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80113ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80113b8:	109b      	asrs	r3, r3, #2
 80113ba:	b21b      	sxth	r3, r3
 80113bc:	b29b      	uxth	r3, r3
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80113d2:	4413      	add	r3, r2
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	b21a      	sxth	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80113e2:	10db      	asrs	r3, r3, #3
 80113e4:	b21b      	sxth	r3, r3
 80113e6:	b29a      	uxth	r2, r3
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	4413      	add	r3, r2
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	b21a      	sxth	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2200      	movs	r2, #0
 8011400:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011402:	4b35      	ldr	r3, [pc, #212]	; (80114d8 <tcp_receive+0x5e0>)
 8011404:	881b      	ldrh	r3, [r3, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	f000 84e1 	beq.w	8011dce <tcp_receive+0xed6>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	7d1b      	ldrb	r3, [r3, #20]
 8011410:	2b06      	cmp	r3, #6
 8011412:	f200 84dc 	bhi.w	8011dce <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801141a:	4b30      	ldr	r3, [pc, #192]	; (80114dc <tcp_receive+0x5e4>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	3b01      	subs	r3, #1
 8011422:	2b00      	cmp	r3, #0
 8011424:	f2c0 808e 	blt.w	8011544 <tcp_receive+0x64c>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801142c:	4b2a      	ldr	r3, [pc, #168]	; (80114d8 <tcp_receive+0x5e0>)
 801142e:	881b      	ldrh	r3, [r3, #0]
 8011430:	4619      	mov	r1, r3
 8011432:	4b2a      	ldr	r3, [pc, #168]	; (80114dc <tcp_receive+0x5e4>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	440b      	add	r3, r1
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	3301      	adds	r3, #1
 801143c:	2b00      	cmp	r3, #0
 801143e:	f300 8081 	bgt.w	8011544 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011442:	4b27      	ldr	r3, [pc, #156]	; (80114e0 <tcp_receive+0x5e8>)
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801144c:	4b23      	ldr	r3, [pc, #140]	; (80114dc <tcp_receive+0x5e4>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011454:	4b22      	ldr	r3, [pc, #136]	; (80114e0 <tcp_receive+0x5e8>)
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d106      	bne.n	801146a <tcp_receive+0x572>
 801145c:	4b21      	ldr	r3, [pc, #132]	; (80114e4 <tcp_receive+0x5ec>)
 801145e:	f240 5294 	movw	r2, #1428	; 0x594
 8011462:	4921      	ldr	r1, [pc, #132]	; (80114e8 <tcp_receive+0x5f0>)
 8011464:	4821      	ldr	r0, [pc, #132]	; (80114ec <tcp_receive+0x5f4>)
 8011466:	f007 ff61 	bl	801932c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011470:	4293      	cmp	r3, r2
 8011472:	d906      	bls.n	8011482 <tcp_receive+0x58a>
 8011474:	4b1b      	ldr	r3, [pc, #108]	; (80114e4 <tcp_receive+0x5ec>)
 8011476:	f240 5295 	movw	r2, #1429	; 0x595
 801147a:	491d      	ldr	r1, [pc, #116]	; (80114f0 <tcp_receive+0x5f8>)
 801147c:	481b      	ldr	r0, [pc, #108]	; (80114ec <tcp_receive+0x5f4>)
 801147e:	f007 ff55 	bl	801932c <iprintf>
      off = (u16_t)off32;
 8011482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011484:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011488:	4b15      	ldr	r3, [pc, #84]	; (80114e0 <tcp_receive+0x5e8>)
 801148a:	685b      	ldr	r3, [r3, #4]
 801148c:	891b      	ldrh	r3, [r3, #8]
 801148e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011492:	429a      	cmp	r2, r3
 8011494:	d906      	bls.n	80114a4 <tcp_receive+0x5ac>
 8011496:	4b13      	ldr	r3, [pc, #76]	; (80114e4 <tcp_receive+0x5ec>)
 8011498:	f240 5297 	movw	r2, #1431	; 0x597
 801149c:	4915      	ldr	r1, [pc, #84]	; (80114f4 <tcp_receive+0x5fc>)
 801149e:	4813      	ldr	r0, [pc, #76]	; (80114ec <tcp_receive+0x5f4>)
 80114a0:	f007 ff44 	bl	801932c <iprintf>
      inseg.len -= off;
 80114a4:	4b0e      	ldr	r3, [pc, #56]	; (80114e0 <tcp_receive+0x5e8>)
 80114a6:	891a      	ldrh	r2, [r3, #8]
 80114a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	4b0b      	ldr	r3, [pc, #44]	; (80114e0 <tcp_receive+0x5e8>)
 80114b2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80114b4:	4b0a      	ldr	r3, [pc, #40]	; (80114e0 <tcp_receive+0x5e8>)
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	891a      	ldrh	r2, [r3, #8]
 80114ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80114c2:	e029      	b.n	8011518 <tcp_receive+0x620>
 80114c4:	0801c8f4 	.word	0x0801c8f4
 80114c8:	0801c8fc 	.word	0x0801c8fc
 80114cc:	20004278 	.word	0x20004278
 80114d0:	20004274 	.word	0x20004274
 80114d4:	2000b138 	.word	0x2000b138
 80114d8:	2000427a 	.word	0x2000427a
 80114dc:	20004270 	.word	0x20004270
 80114e0:	20004250 	.word	0x20004250
 80114e4:	0801c58c 	.word	0x0801c58c
 80114e8:	0801c904 	.word	0x0801c904
 80114ec:	0801c5d8 	.word	0x0801c5d8
 80114f0:	0801c914 	.word	0x0801c914
 80114f4:	0801c924 	.word	0x0801c924
        off -= p->len;
 80114f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114fa:	895b      	ldrh	r3, [r3, #10]
 80114fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011508:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801150a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801150c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801150e:	2200      	movs	r2, #0
 8011510:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801151a:	895b      	ldrh	r3, [r3, #10]
 801151c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011520:	429a      	cmp	r2, r3
 8011522:	d8e9      	bhi.n	80114f8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011524:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011528:	4619      	mov	r1, r3
 801152a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801152c:	f7fc f886 	bl	800d63c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011534:	4a91      	ldr	r2, [pc, #580]	; (801177c <tcp_receive+0x884>)
 8011536:	6013      	str	r3, [r2, #0]
 8011538:	4b91      	ldr	r3, [pc, #580]	; (8011780 <tcp_receive+0x888>)
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	4a8f      	ldr	r2, [pc, #572]	; (801177c <tcp_receive+0x884>)
 801153e:	6812      	ldr	r2, [r2, #0]
 8011540:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011542:	e00d      	b.n	8011560 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011544:	4b8d      	ldr	r3, [pc, #564]	; (801177c <tcp_receive+0x884>)
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801154c:	1ad3      	subs	r3, r2, r3
 801154e:	2b00      	cmp	r3, #0
 8011550:	da06      	bge.n	8011560 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	8b5b      	ldrh	r3, [r3, #26]
 8011556:	f043 0302 	orr.w	r3, r3, #2
 801155a:	b29a      	uxth	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011560:	4b86      	ldr	r3, [pc, #536]	; (801177c <tcp_receive+0x884>)
 8011562:	681a      	ldr	r2, [r3, #0]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	2b00      	cmp	r3, #0
 801156c:	f2c0 842a 	blt.w	8011dc4 <tcp_receive+0xecc>
 8011570:	4b82      	ldr	r3, [pc, #520]	; (801177c <tcp_receive+0x884>)
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011578:	6879      	ldr	r1, [r7, #4]
 801157a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801157c:	440b      	add	r3, r1
 801157e:	1ad3      	subs	r3, r2, r3
 8011580:	3301      	adds	r3, #1
 8011582:	2b00      	cmp	r3, #0
 8011584:	f300 841e 	bgt.w	8011dc4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801158c:	4b7b      	ldr	r3, [pc, #492]	; (801177c <tcp_receive+0x884>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	429a      	cmp	r2, r3
 8011592:	f040 829a 	bne.w	8011aca <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011596:	4b7a      	ldr	r3, [pc, #488]	; (8011780 <tcp_receive+0x888>)
 8011598:	891c      	ldrh	r4, [r3, #8]
 801159a:	4b79      	ldr	r3, [pc, #484]	; (8011780 <tcp_receive+0x888>)
 801159c:	68db      	ldr	r3, [r3, #12]
 801159e:	899b      	ldrh	r3, [r3, #12]
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fa fce4 	bl	800bf70 <lwip_htons>
 80115a8:	4603      	mov	r3, r0
 80115aa:	b2db      	uxtb	r3, r3
 80115ac:	f003 0303 	and.w	r3, r3, #3
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <tcp_receive+0x6c0>
 80115b4:	2301      	movs	r3, #1
 80115b6:	e000      	b.n	80115ba <tcp_receive+0x6c2>
 80115b8:	2300      	movs	r3, #0
 80115ba:	4423      	add	r3, r4
 80115bc:	b29a      	uxth	r2, r3
 80115be:	4b71      	ldr	r3, [pc, #452]	; (8011784 <tcp_receive+0x88c>)
 80115c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115c6:	4b6f      	ldr	r3, [pc, #444]	; (8011784 <tcp_receive+0x88c>)
 80115c8:	881b      	ldrh	r3, [r3, #0]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d275      	bcs.n	80116ba <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80115ce:	4b6c      	ldr	r3, [pc, #432]	; (8011780 <tcp_receive+0x888>)
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	899b      	ldrh	r3, [r3, #12]
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fa fcca 	bl	800bf70 <lwip_htons>
 80115dc:	4603      	mov	r3, r0
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	f003 0301 	and.w	r3, r3, #1
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d01f      	beq.n	8011628 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80115e8:	4b65      	ldr	r3, [pc, #404]	; (8011780 <tcp_receive+0x888>)
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	899b      	ldrh	r3, [r3, #12]
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	b21b      	sxth	r3, r3
 80115f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80115f6:	b21c      	sxth	r4, r3
 80115f8:	4b61      	ldr	r3, [pc, #388]	; (8011780 <tcp_receive+0x888>)
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	899b      	ldrh	r3, [r3, #12]
 80115fe:	b29b      	uxth	r3, r3
 8011600:	4618      	mov	r0, r3
 8011602:	f7fa fcb5 	bl	800bf70 <lwip_htons>
 8011606:	4603      	mov	r3, r0
 8011608:	b2db      	uxtb	r3, r3
 801160a:	b29b      	uxth	r3, r3
 801160c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011610:	b29b      	uxth	r3, r3
 8011612:	4618      	mov	r0, r3
 8011614:	f7fa fcac 	bl	800bf70 <lwip_htons>
 8011618:	4603      	mov	r3, r0
 801161a:	b21b      	sxth	r3, r3
 801161c:	4323      	orrs	r3, r4
 801161e:	b21a      	sxth	r2, r3
 8011620:	4b57      	ldr	r3, [pc, #348]	; (8011780 <tcp_receive+0x888>)
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	b292      	uxth	r2, r2
 8011626:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801162c:	4b54      	ldr	r3, [pc, #336]	; (8011780 <tcp_receive+0x888>)
 801162e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011630:	4b53      	ldr	r3, [pc, #332]	; (8011780 <tcp_receive+0x888>)
 8011632:	68db      	ldr	r3, [r3, #12]
 8011634:	899b      	ldrh	r3, [r3, #12]
 8011636:	b29b      	uxth	r3, r3
 8011638:	4618      	mov	r0, r3
 801163a:	f7fa fc99 	bl	800bf70 <lwip_htons>
 801163e:	4603      	mov	r3, r0
 8011640:	b2db      	uxtb	r3, r3
 8011642:	f003 0302 	and.w	r3, r3, #2
 8011646:	2b00      	cmp	r3, #0
 8011648:	d005      	beq.n	8011656 <tcp_receive+0x75e>
            inseg.len -= 1;
 801164a:	4b4d      	ldr	r3, [pc, #308]	; (8011780 <tcp_receive+0x888>)
 801164c:	891b      	ldrh	r3, [r3, #8]
 801164e:	3b01      	subs	r3, #1
 8011650:	b29a      	uxth	r2, r3
 8011652:	4b4b      	ldr	r3, [pc, #300]	; (8011780 <tcp_receive+0x888>)
 8011654:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011656:	4b4a      	ldr	r3, [pc, #296]	; (8011780 <tcp_receive+0x888>)
 8011658:	685a      	ldr	r2, [r3, #4]
 801165a:	4b49      	ldr	r3, [pc, #292]	; (8011780 <tcp_receive+0x888>)
 801165c:	891b      	ldrh	r3, [r3, #8]
 801165e:	4619      	mov	r1, r3
 8011660:	4610      	mov	r0, r2
 8011662:	f7fb feeb 	bl	800d43c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011666:	4b46      	ldr	r3, [pc, #280]	; (8011780 <tcp_receive+0x888>)
 8011668:	891c      	ldrh	r4, [r3, #8]
 801166a:	4b45      	ldr	r3, [pc, #276]	; (8011780 <tcp_receive+0x888>)
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	899b      	ldrh	r3, [r3, #12]
 8011670:	b29b      	uxth	r3, r3
 8011672:	4618      	mov	r0, r3
 8011674:	f7fa fc7c 	bl	800bf70 <lwip_htons>
 8011678:	4603      	mov	r3, r0
 801167a:	b2db      	uxtb	r3, r3
 801167c:	f003 0303 	and.w	r3, r3, #3
 8011680:	2b00      	cmp	r3, #0
 8011682:	d001      	beq.n	8011688 <tcp_receive+0x790>
 8011684:	2301      	movs	r3, #1
 8011686:	e000      	b.n	801168a <tcp_receive+0x792>
 8011688:	2300      	movs	r3, #0
 801168a:	4423      	add	r3, r4
 801168c:	b29a      	uxth	r2, r3
 801168e:	4b3d      	ldr	r3, [pc, #244]	; (8011784 <tcp_receive+0x88c>)
 8011690:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011692:	4b3c      	ldr	r3, [pc, #240]	; (8011784 <tcp_receive+0x88c>)
 8011694:	881b      	ldrh	r3, [r3, #0]
 8011696:	461a      	mov	r2, r3
 8011698:	4b38      	ldr	r3, [pc, #224]	; (801177c <tcp_receive+0x884>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	441a      	add	r2, r3
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a2:	6879      	ldr	r1, [r7, #4]
 80116a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116a6:	440b      	add	r3, r1
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d006      	beq.n	80116ba <tcp_receive+0x7c2>
 80116ac:	4b36      	ldr	r3, [pc, #216]	; (8011788 <tcp_receive+0x890>)
 80116ae:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80116b2:	4936      	ldr	r1, [pc, #216]	; (801178c <tcp_receive+0x894>)
 80116b4:	4836      	ldr	r0, [pc, #216]	; (8011790 <tcp_receive+0x898>)
 80116b6:	f007 fe39 	bl	801932c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f000 80e7 	beq.w	8011892 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80116c4:	4b2e      	ldr	r3, [pc, #184]	; (8011780 <tcp_receive+0x888>)
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	899b      	ldrh	r3, [r3, #12]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7fa fc4f 	bl	800bf70 <lwip_htons>
 80116d2:	4603      	mov	r3, r0
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	f003 0301 	and.w	r3, r3, #1
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d010      	beq.n	8011700 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80116de:	e00a      	b.n	80116f6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116e4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	f7fd fcc9 	bl	800f088 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d1f0      	bne.n	80116e0 <tcp_receive+0x7e8>
 80116fe:	e0c8      	b.n	8011892 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011704:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011706:	e052      	b.n	80117ae <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	899b      	ldrh	r3, [r3, #12]
 801170e:	b29b      	uxth	r3, r3
 8011710:	4618      	mov	r0, r3
 8011712:	f7fa fc2d 	bl	800bf70 <lwip_htons>
 8011716:	4603      	mov	r3, r0
 8011718:	b2db      	uxtb	r3, r3
 801171a:	f003 0301 	and.w	r3, r3, #1
 801171e:	2b00      	cmp	r3, #0
 8011720:	d03d      	beq.n	801179e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011722:	4b17      	ldr	r3, [pc, #92]	; (8011780 <tcp_receive+0x888>)
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	899b      	ldrh	r3, [r3, #12]
 8011728:	b29b      	uxth	r3, r3
 801172a:	4618      	mov	r0, r3
 801172c:	f7fa fc20 	bl	800bf70 <lwip_htons>
 8011730:	4603      	mov	r3, r0
 8011732:	b2db      	uxtb	r3, r3
 8011734:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011738:	2b00      	cmp	r3, #0
 801173a:	d130      	bne.n	801179e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801173c:	4b10      	ldr	r3, [pc, #64]	; (8011780 <tcp_receive+0x888>)
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	899b      	ldrh	r3, [r3, #12]
 8011742:	b29c      	uxth	r4, r3
 8011744:	2001      	movs	r0, #1
 8011746:	f7fa fc13 	bl	800bf70 <lwip_htons>
 801174a:	4603      	mov	r3, r0
 801174c:	461a      	mov	r2, r3
 801174e:	4b0c      	ldr	r3, [pc, #48]	; (8011780 <tcp_receive+0x888>)
 8011750:	68db      	ldr	r3, [r3, #12]
 8011752:	4322      	orrs	r2, r4
 8011754:	b292      	uxth	r2, r2
 8011756:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011758:	4b09      	ldr	r3, [pc, #36]	; (8011780 <tcp_receive+0x888>)
 801175a:	891c      	ldrh	r4, [r3, #8]
 801175c:	4b08      	ldr	r3, [pc, #32]	; (8011780 <tcp_receive+0x888>)
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	899b      	ldrh	r3, [r3, #12]
 8011762:	b29b      	uxth	r3, r3
 8011764:	4618      	mov	r0, r3
 8011766:	f7fa fc03 	bl	800bf70 <lwip_htons>
 801176a:	4603      	mov	r3, r0
 801176c:	b2db      	uxtb	r3, r3
 801176e:	f003 0303 	and.w	r3, r3, #3
 8011772:	2b00      	cmp	r3, #0
 8011774:	d00e      	beq.n	8011794 <tcp_receive+0x89c>
 8011776:	2301      	movs	r3, #1
 8011778:	e00d      	b.n	8011796 <tcp_receive+0x89e>
 801177a:	bf00      	nop
 801177c:	20004270 	.word	0x20004270
 8011780:	20004250 	.word	0x20004250
 8011784:	2000427a 	.word	0x2000427a
 8011788:	0801c58c 	.word	0x0801c58c
 801178c:	0801c934 	.word	0x0801c934
 8011790:	0801c5d8 	.word	0x0801c5d8
 8011794:	2300      	movs	r3, #0
 8011796:	4423      	add	r3, r4
 8011798:	b29a      	uxth	r2, r3
 801179a:	4b98      	ldr	r3, [pc, #608]	; (80119fc <tcp_receive+0xb04>)
 801179c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801179e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80117a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80117a8:	6938      	ldr	r0, [r7, #16]
 80117aa:	f7fd fc6d 	bl	800f088 <tcp_seg_free>
            while (next &&
 80117ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d00e      	beq.n	80117d2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80117b4:	4b91      	ldr	r3, [pc, #580]	; (80119fc <tcp_receive+0xb04>)
 80117b6:	881b      	ldrh	r3, [r3, #0]
 80117b8:	461a      	mov	r2, r3
 80117ba:	4b91      	ldr	r3, [pc, #580]	; (8011a00 <tcp_receive+0xb08>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	441a      	add	r2, r3
 80117c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80117c8:	8909      	ldrh	r1, [r1, #8]
 80117ca:	440b      	add	r3, r1
 80117cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	da9a      	bge.n	8011708 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80117d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d059      	beq.n	801188c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80117d8:	4b88      	ldr	r3, [pc, #544]	; (80119fc <tcp_receive+0xb04>)
 80117da:	881b      	ldrh	r3, [r3, #0]
 80117dc:	461a      	mov	r2, r3
 80117de:	4b88      	ldr	r3, [pc, #544]	; (8011a00 <tcp_receive+0xb08>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	441a      	add	r2, r3
 80117e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	dd4d      	ble.n	801188c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80117f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f2:	68db      	ldr	r3, [r3, #12]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	4b81      	ldr	r3, [pc, #516]	; (8011a00 <tcp_receive+0xb08>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	b29a      	uxth	r2, r3
 8011802:	4b80      	ldr	r3, [pc, #512]	; (8011a04 <tcp_receive+0xb0c>)
 8011804:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011806:	4b7f      	ldr	r3, [pc, #508]	; (8011a04 <tcp_receive+0xb0c>)
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	899b      	ldrh	r3, [r3, #12]
 801180c:	b29b      	uxth	r3, r3
 801180e:	4618      	mov	r0, r3
 8011810:	f7fa fbae 	bl	800bf70 <lwip_htons>
 8011814:	4603      	mov	r3, r0
 8011816:	b2db      	uxtb	r3, r3
 8011818:	f003 0302 	and.w	r3, r3, #2
 801181c:	2b00      	cmp	r3, #0
 801181e:	d005      	beq.n	801182c <tcp_receive+0x934>
                inseg.len -= 1;
 8011820:	4b78      	ldr	r3, [pc, #480]	; (8011a04 <tcp_receive+0xb0c>)
 8011822:	891b      	ldrh	r3, [r3, #8]
 8011824:	3b01      	subs	r3, #1
 8011826:	b29a      	uxth	r2, r3
 8011828:	4b76      	ldr	r3, [pc, #472]	; (8011a04 <tcp_receive+0xb0c>)
 801182a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801182c:	4b75      	ldr	r3, [pc, #468]	; (8011a04 <tcp_receive+0xb0c>)
 801182e:	685a      	ldr	r2, [r3, #4]
 8011830:	4b74      	ldr	r3, [pc, #464]	; (8011a04 <tcp_receive+0xb0c>)
 8011832:	891b      	ldrh	r3, [r3, #8]
 8011834:	4619      	mov	r1, r3
 8011836:	4610      	mov	r0, r2
 8011838:	f7fb fe00 	bl	800d43c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801183c:	4b71      	ldr	r3, [pc, #452]	; (8011a04 <tcp_receive+0xb0c>)
 801183e:	891c      	ldrh	r4, [r3, #8]
 8011840:	4b70      	ldr	r3, [pc, #448]	; (8011a04 <tcp_receive+0xb0c>)
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	899b      	ldrh	r3, [r3, #12]
 8011846:	b29b      	uxth	r3, r3
 8011848:	4618      	mov	r0, r3
 801184a:	f7fa fb91 	bl	800bf70 <lwip_htons>
 801184e:	4603      	mov	r3, r0
 8011850:	b2db      	uxtb	r3, r3
 8011852:	f003 0303 	and.w	r3, r3, #3
 8011856:	2b00      	cmp	r3, #0
 8011858:	d001      	beq.n	801185e <tcp_receive+0x966>
 801185a:	2301      	movs	r3, #1
 801185c:	e000      	b.n	8011860 <tcp_receive+0x968>
 801185e:	2300      	movs	r3, #0
 8011860:	4423      	add	r3, r4
 8011862:	b29a      	uxth	r2, r3
 8011864:	4b65      	ldr	r3, [pc, #404]	; (80119fc <tcp_receive+0xb04>)
 8011866:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011868:	4b64      	ldr	r3, [pc, #400]	; (80119fc <tcp_receive+0xb04>)
 801186a:	881b      	ldrh	r3, [r3, #0]
 801186c:	461a      	mov	r2, r3
 801186e:	4b64      	ldr	r3, [pc, #400]	; (8011a00 <tcp_receive+0xb08>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	441a      	add	r2, r3
 8011874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	429a      	cmp	r2, r3
 801187c:	d006      	beq.n	801188c <tcp_receive+0x994>
 801187e:	4b62      	ldr	r3, [pc, #392]	; (8011a08 <tcp_receive+0xb10>)
 8011880:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8011884:	4961      	ldr	r1, [pc, #388]	; (8011a0c <tcp_receive+0xb14>)
 8011886:	4862      	ldr	r0, [pc, #392]	; (8011a10 <tcp_receive+0xb18>)
 8011888:	f007 fd50 	bl	801932c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011890:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011892:	4b5a      	ldr	r3, [pc, #360]	; (80119fc <tcp_receive+0xb04>)
 8011894:	881b      	ldrh	r3, [r3, #0]
 8011896:	461a      	mov	r2, r3
 8011898:	4b59      	ldr	r3, [pc, #356]	; (8011a00 <tcp_receive+0xb08>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	441a      	add	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118a6:	4b55      	ldr	r3, [pc, #340]	; (80119fc <tcp_receive+0xb04>)
 80118a8:	881b      	ldrh	r3, [r3, #0]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d206      	bcs.n	80118bc <tcp_receive+0x9c4>
 80118ae:	4b56      	ldr	r3, [pc, #344]	; (8011a08 <tcp_receive+0xb10>)
 80118b0:	f240 6207 	movw	r2, #1543	; 0x607
 80118b4:	4957      	ldr	r1, [pc, #348]	; (8011a14 <tcp_receive+0xb1c>)
 80118b6:	4856      	ldr	r0, [pc, #344]	; (8011a10 <tcp_receive+0xb18>)
 80118b8:	f007 fd38 	bl	801932c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118c0:	4b4e      	ldr	r3, [pc, #312]	; (80119fc <tcp_receive+0xb04>)
 80118c2:	881b      	ldrh	r3, [r3, #0]
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f7fc feb9 	bl	800e644 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80118d2:	4b4c      	ldr	r3, [pc, #304]	; (8011a04 <tcp_receive+0xb0c>)
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	891b      	ldrh	r3, [r3, #8]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d006      	beq.n	80118ea <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80118dc:	4b49      	ldr	r3, [pc, #292]	; (8011a04 <tcp_receive+0xb0c>)
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	4a4d      	ldr	r2, [pc, #308]	; (8011a18 <tcp_receive+0xb20>)
 80118e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80118e4:	4b47      	ldr	r3, [pc, #284]	; (8011a04 <tcp_receive+0xb0c>)
 80118e6:	2200      	movs	r2, #0
 80118e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80118ea:	4b46      	ldr	r3, [pc, #280]	; (8011a04 <tcp_receive+0xb0c>)
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	899b      	ldrh	r3, [r3, #12]
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fa fb3c 	bl	800bf70 <lwip_htons>
 80118f8:	4603      	mov	r3, r0
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	f003 0301 	and.w	r3, r3, #1
 8011900:	2b00      	cmp	r3, #0
 8011902:	f000 80b8 	beq.w	8011a76 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011906:	4b45      	ldr	r3, [pc, #276]	; (8011a1c <tcp_receive+0xb24>)
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	f043 0320 	orr.w	r3, r3, #32
 801190e:	b2da      	uxtb	r2, r3
 8011910:	4b42      	ldr	r3, [pc, #264]	; (8011a1c <tcp_receive+0xb24>)
 8011912:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011914:	e0af      	b.n	8011a76 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801191a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011920:	68db      	ldr	r3, [r3, #12]
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	4a36      	ldr	r2, [pc, #216]	; (8011a00 <tcp_receive+0xb08>)
 8011926:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	891b      	ldrh	r3, [r3, #8]
 801192c:	461c      	mov	r4, r3
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	899b      	ldrh	r3, [r3, #12]
 8011934:	b29b      	uxth	r3, r3
 8011936:	4618      	mov	r0, r3
 8011938:	f7fa fb1a 	bl	800bf70 <lwip_htons>
 801193c:	4603      	mov	r3, r0
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f003 0303 	and.w	r3, r3, #3
 8011944:	2b00      	cmp	r3, #0
 8011946:	d001      	beq.n	801194c <tcp_receive+0xa54>
 8011948:	2301      	movs	r3, #1
 801194a:	e000      	b.n	801194e <tcp_receive+0xa56>
 801194c:	2300      	movs	r3, #0
 801194e:	191a      	adds	r2, r3, r4
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011954:	441a      	add	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801195e:	461c      	mov	r4, r3
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	891b      	ldrh	r3, [r3, #8]
 8011964:	461d      	mov	r5, r3
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	899b      	ldrh	r3, [r3, #12]
 801196c:	b29b      	uxth	r3, r3
 801196e:	4618      	mov	r0, r3
 8011970:	f7fa fafe 	bl	800bf70 <lwip_htons>
 8011974:	4603      	mov	r3, r0
 8011976:	b2db      	uxtb	r3, r3
 8011978:	f003 0303 	and.w	r3, r3, #3
 801197c:	2b00      	cmp	r3, #0
 801197e:	d001      	beq.n	8011984 <tcp_receive+0xa8c>
 8011980:	2301      	movs	r3, #1
 8011982:	e000      	b.n	8011986 <tcp_receive+0xa8e>
 8011984:	2300      	movs	r3, #0
 8011986:	442b      	add	r3, r5
 8011988:	429c      	cmp	r4, r3
 801198a:	d206      	bcs.n	801199a <tcp_receive+0xaa2>
 801198c:	4b1e      	ldr	r3, [pc, #120]	; (8011a08 <tcp_receive+0xb10>)
 801198e:	f240 622c 	movw	r2, #1580	; 0x62c
 8011992:	4923      	ldr	r1, [pc, #140]	; (8011a20 <tcp_receive+0xb28>)
 8011994:	481e      	ldr	r0, [pc, #120]	; (8011a10 <tcp_receive+0xb18>)
 8011996:	f007 fcc9 	bl	801932c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	891b      	ldrh	r3, [r3, #8]
 801199e:	461c      	mov	r4, r3
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	68db      	ldr	r3, [r3, #12]
 80119a4:	899b      	ldrh	r3, [r3, #12]
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7fa fae1 	bl	800bf70 <lwip_htons>
 80119ae:	4603      	mov	r3, r0
 80119b0:	b2db      	uxtb	r3, r3
 80119b2:	f003 0303 	and.w	r3, r3, #3
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d001      	beq.n	80119be <tcp_receive+0xac6>
 80119ba:	2301      	movs	r3, #1
 80119bc:	e000      	b.n	80119c0 <tcp_receive+0xac8>
 80119be:	2300      	movs	r3, #0
 80119c0:	1919      	adds	r1, r3, r4
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80119c6:	b28b      	uxth	r3, r1
 80119c8:	1ad3      	subs	r3, r2, r3
 80119ca:	b29a      	uxth	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f7fc fe37 	bl	800e644 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	891b      	ldrh	r3, [r3, #8]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d028      	beq.n	8011a32 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80119e0:	4b0d      	ldr	r3, [pc, #52]	; (8011a18 <tcp_receive+0xb20>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d01d      	beq.n	8011a24 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80119e8:	4b0b      	ldr	r3, [pc, #44]	; (8011a18 <tcp_receive+0xb20>)
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	4619      	mov	r1, r3
 80119f2:	4610      	mov	r0, r2
 80119f4:	f7fb ff76 	bl	800d8e4 <pbuf_cat>
 80119f8:	e018      	b.n	8011a2c <tcp_receive+0xb34>
 80119fa:	bf00      	nop
 80119fc:	2000427a 	.word	0x2000427a
 8011a00:	20004270 	.word	0x20004270
 8011a04:	20004250 	.word	0x20004250
 8011a08:	0801c58c 	.word	0x0801c58c
 8011a0c:	0801c96c 	.word	0x0801c96c
 8011a10:	0801c5d8 	.word	0x0801c5d8
 8011a14:	0801c9a8 	.word	0x0801c9a8
 8011a18:	20004280 	.word	0x20004280
 8011a1c:	2000427d 	.word	0x2000427d
 8011a20:	0801c9c8 	.word	0x0801c9c8
            } else {
              recv_data = cseg->p;
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	685b      	ldr	r3, [r3, #4]
 8011a28:	4a70      	ldr	r2, [pc, #448]	; (8011bec <tcp_receive+0xcf4>)
 8011a2a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	68db      	ldr	r3, [r3, #12]
 8011a36:	899b      	ldrh	r3, [r3, #12]
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fa fa98 	bl	800bf70 <lwip_htons>
 8011a40:	4603      	mov	r3, r0
 8011a42:	b2db      	uxtb	r3, r3
 8011a44:	f003 0301 	and.w	r3, r3, #1
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d00d      	beq.n	8011a68 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011a4c:	4b68      	ldr	r3, [pc, #416]	; (8011bf0 <tcp_receive+0xcf8>)
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	f043 0320 	orr.w	r3, r3, #32
 8011a54:	b2da      	uxtb	r2, r3
 8011a56:	4b66      	ldr	r3, [pc, #408]	; (8011bf0 <tcp_receive+0xcf8>)
 8011a58:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	7d1b      	ldrb	r3, [r3, #20]
 8011a5e:	2b04      	cmp	r3, #4
 8011a60:	d102      	bne.n	8011a68 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2207      	movs	r2, #7
 8011a66:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011a70:	68b8      	ldr	r0, [r7, #8]
 8011a72:	f7fd fb09 	bl	800f088 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d008      	beq.n	8011a90 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	685a      	ldr	r2, [r3, #4]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	f43f af43 	beq.w	8011916 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	8b5b      	ldrh	r3, [r3, #26]
 8011a94:	f003 0301 	and.w	r3, r3, #1
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d00e      	beq.n	8011aba <tcp_receive+0xbc2>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	8b5b      	ldrh	r3, [r3, #26]
 8011aa0:	f023 0301 	bic.w	r3, r3, #1
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	835a      	strh	r2, [r3, #26]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8b5b      	ldrh	r3, [r3, #26]
 8011aae:	f043 0302 	orr.w	r3, r3, #2
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ab8:	e188      	b.n	8011dcc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	8b5b      	ldrh	r3, [r3, #26]
 8011abe:	f043 0301 	orr.w	r3, r3, #1
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ac8:	e180      	b.n	8011dcc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d106      	bne.n	8011ae0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011ad2:	4848      	ldr	r0, [pc, #288]	; (8011bf4 <tcp_receive+0xcfc>)
 8011ad4:	f7fd faf0 	bl	800f0b8 <tcp_seg_copy>
 8011ad8:	4602      	mov	r2, r0
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	675a      	str	r2, [r3, #116]	; 0x74
 8011ade:	e16d      	b.n	8011dbc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8011aea:	e157      	b.n	8011d9c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aee:	68db      	ldr	r3, [r3, #12]
 8011af0:	685a      	ldr	r2, [r3, #4]
 8011af2:	4b41      	ldr	r3, [pc, #260]	; (8011bf8 <tcp_receive+0xd00>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d11d      	bne.n	8011b36 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011afa:	4b3e      	ldr	r3, [pc, #248]	; (8011bf4 <tcp_receive+0xcfc>)
 8011afc:	891a      	ldrh	r2, [r3, #8]
 8011afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b00:	891b      	ldrh	r3, [r3, #8]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	f240 814f 	bls.w	8011da6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b08:	483a      	ldr	r0, [pc, #232]	; (8011bf4 <tcp_receive+0xcfc>)
 8011b0a:	f7fd fad5 	bl	800f0b8 <tcp_seg_copy>
 8011b0e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	f000 8149 	beq.w	8011daa <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d003      	beq.n	8011b26 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b20:	697a      	ldr	r2, [r7, #20]
 8011b22:	601a      	str	r2, [r3, #0]
 8011b24:	e002      	b.n	8011b2c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	697a      	ldr	r2, [r7, #20]
 8011b2a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011b2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b2e:	6978      	ldr	r0, [r7, #20]
 8011b30:	f7ff f8de 	bl	8010cf0 <tcp_oos_insert_segment>
                }
                break;
 8011b34:	e139      	b.n	8011daa <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d117      	bne.n	8011b6c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011b3c:	4b2e      	ldr	r3, [pc, #184]	; (8011bf8 <tcp_receive+0xd00>)
 8011b3e:	681a      	ldr	r2, [r3, #0]
 8011b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	1ad3      	subs	r3, r2, r3
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	da57      	bge.n	8011bfc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b4c:	4829      	ldr	r0, [pc, #164]	; (8011bf4 <tcp_receive+0xcfc>)
 8011b4e:	f7fd fab3 	bl	800f0b8 <tcp_seg_copy>
 8011b52:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f000 8129 	beq.w	8011dae <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	69ba      	ldr	r2, [r7, #24]
 8011b60:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b64:	69b8      	ldr	r0, [r7, #24]
 8011b66:	f7ff f8c3 	bl	8010cf0 <tcp_oos_insert_segment>
                  }
                  break;
 8011b6a:	e120      	b.n	8011dae <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011b6c:	4b22      	ldr	r3, [pc, #136]	; (8011bf8 <tcp_receive+0xd00>)
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b72:	68db      	ldr	r3, [r3, #12]
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	1ad3      	subs	r3, r2, r3
 8011b78:	3b01      	subs	r3, #1
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	db3e      	blt.n	8011bfc <tcp_receive+0xd04>
 8011b7e:	4b1e      	ldr	r3, [pc, #120]	; (8011bf8 <tcp_receive+0xd00>)
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b84:	68db      	ldr	r3, [r3, #12]
 8011b86:	685b      	ldr	r3, [r3, #4]
 8011b88:	1ad3      	subs	r3, r2, r3
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	dc35      	bgt.n	8011bfc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b90:	4818      	ldr	r0, [pc, #96]	; (8011bf4 <tcp_receive+0xcfc>)
 8011b92:	f7fd fa91 	bl	800f0b8 <tcp_seg_copy>
 8011b96:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	f000 8109 	beq.w	8011db2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ba8:	8912      	ldrh	r2, [r2, #8]
 8011baa:	441a      	add	r2, r3
 8011bac:	4b12      	ldr	r3, [pc, #72]	; (8011bf8 <tcp_receive+0xd00>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	1ad3      	subs	r3, r2, r3
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	dd12      	ble.n	8011bdc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011bb6:	4b10      	ldr	r3, [pc, #64]	; (8011bf8 <tcp_receive+0xd00>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	1ad3      	subs	r3, r2, r3
 8011bc6:	b29a      	uxth	r2, r3
 8011bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bce:	685a      	ldr	r2, [r3, #4]
 8011bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bd2:	891b      	ldrh	r3, [r3, #8]
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	f7fb fc30 	bl	800d43c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bde:	69fa      	ldr	r2, [r7, #28]
 8011be0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011be2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011be4:	69f8      	ldr	r0, [r7, #28]
 8011be6:	f7ff f883 	bl	8010cf0 <tcp_oos_insert_segment>
                  }
                  break;
 8011bea:	e0e2      	b.n	8011db2 <tcp_receive+0xeba>
 8011bec:	20004280 	.word	0x20004280
 8011bf0:	2000427d 	.word	0x2000427d
 8011bf4:	20004250 	.word	0x20004250
 8011bf8:	20004270 	.word	0x20004270
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f040 80c6 	bne.w	8011d96 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011c0a:	4b80      	ldr	r3, [pc, #512]	; (8011e0c <tcp_receive+0xf14>)
 8011c0c:	681a      	ldr	r2, [r3, #0]
 8011c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c10:	68db      	ldr	r3, [r3, #12]
 8011c12:	685b      	ldr	r3, [r3, #4]
 8011c14:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f340 80bd 	ble.w	8011d96 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1e:	68db      	ldr	r3, [r3, #12]
 8011c20:	899b      	ldrh	r3, [r3, #12]
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fa f9a3 	bl	800bf70 <lwip_htons>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	f003 0301 	and.w	r3, r3, #1
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f040 80bf 	bne.w	8011db6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011c38:	4875      	ldr	r0, [pc, #468]	; (8011e10 <tcp_receive+0xf18>)
 8011c3a:	f7fd fa3d 	bl	800f0b8 <tcp_seg_copy>
 8011c3e:	4602      	mov	r2, r0
 8011c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c42:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	f000 80b6 	beq.w	8011dba <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c56:	8912      	ldrh	r2, [r2, #8]
 8011c58:	441a      	add	r2, r3
 8011c5a:	4b6c      	ldr	r3, [pc, #432]	; (8011e0c <tcp_receive+0xf14>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	1ad3      	subs	r3, r2, r3
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	dd12      	ble.n	8011c8a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011c64:	4b69      	ldr	r3, [pc, #420]	; (8011e0c <tcp_receive+0xf14>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6c:	68db      	ldr	r3, [r3, #12]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	1ad3      	subs	r3, r2, r3
 8011c74:	b29a      	uxth	r2, r3
 8011c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c78:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7c:	685a      	ldr	r2, [r3, #4]
 8011c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c80:	891b      	ldrh	r3, [r3, #8]
 8011c82:	4619      	mov	r1, r3
 8011c84:	4610      	mov	r0, r2
 8011c86:	f7fb fbd9 	bl	800d43c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011c8a:	4b62      	ldr	r3, [pc, #392]	; (8011e14 <tcp_receive+0xf1c>)
 8011c8c:	881b      	ldrh	r3, [r3, #0]
 8011c8e:	461a      	mov	r2, r3
 8011c90:	4b5e      	ldr	r3, [pc, #376]	; (8011e0c <tcp_receive+0xf14>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	441a      	add	r2, r3
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9a:	6879      	ldr	r1, [r7, #4]
 8011c9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c9e:	440b      	add	r3, r1
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f340 8089 	ble.w	8011dba <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	899b      	ldrh	r3, [r3, #12]
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fa f95c 	bl	800bf70 <lwip_htons>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	f003 0301 	and.w	r3, r3, #1
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d022      	beq.n	8011d0a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	899b      	ldrh	r3, [r3, #12]
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	b21b      	sxth	r3, r3
 8011cd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011cd4:	b21c      	sxth	r4, r3
 8011cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	899b      	ldrh	r3, [r3, #12]
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7fa f945 	bl	800bf70 <lwip_htons>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	b2db      	uxtb	r3, r3
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7fa f93c 	bl	800bf70 <lwip_htons>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	b21b      	sxth	r3, r3
 8011cfc:	4323      	orrs	r3, r4
 8011cfe:	b21a      	sxth	r2, r3
 8011d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	68db      	ldr	r3, [r3, #12]
 8011d06:	b292      	uxth	r2, r2
 8011d08:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d0e:	b29a      	uxth	r2, r3
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d14:	4413      	add	r3, r2
 8011d16:	b299      	uxth	r1, r3
 8011d18:	4b3c      	ldr	r3, [pc, #240]	; (8011e0c <tcp_receive+0xf14>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	b29a      	uxth	r2, r3
 8011d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	1a8a      	subs	r2, r1, r2
 8011d24:	b292      	uxth	r2, r2
 8011d26:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	685a      	ldr	r2, [r3, #4]
 8011d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	891b      	ldrh	r3, [r3, #8]
 8011d34:	4619      	mov	r1, r3
 8011d36:	4610      	mov	r0, r2
 8011d38:	f7fb fb80 	bl	800d43c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	891c      	ldrh	r4, [r3, #8]
 8011d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	899b      	ldrh	r3, [r3, #12]
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fa f90f 	bl	800bf70 <lwip_htons>
 8011d52:	4603      	mov	r3, r0
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	f003 0303 	and.w	r3, r3, #3
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d001      	beq.n	8011d62 <tcp_receive+0xe6a>
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e000      	b.n	8011d64 <tcp_receive+0xe6c>
 8011d62:	2300      	movs	r3, #0
 8011d64:	4423      	add	r3, r4
 8011d66:	b29a      	uxth	r2, r3
 8011d68:	4b2a      	ldr	r3, [pc, #168]	; (8011e14 <tcp_receive+0xf1c>)
 8011d6a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011d6c:	4b29      	ldr	r3, [pc, #164]	; (8011e14 <tcp_receive+0xf1c>)
 8011d6e:	881b      	ldrh	r3, [r3, #0]
 8011d70:	461a      	mov	r2, r3
 8011d72:	4b26      	ldr	r3, [pc, #152]	; (8011e0c <tcp_receive+0xf14>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	441a      	add	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d7c:	6879      	ldr	r1, [r7, #4]
 8011d7e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d80:	440b      	add	r3, r1
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d019      	beq.n	8011dba <tcp_receive+0xec2>
 8011d86:	4b24      	ldr	r3, [pc, #144]	; (8011e18 <tcp_receive+0xf20>)
 8011d88:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011d8c:	4923      	ldr	r1, [pc, #140]	; (8011e1c <tcp_receive+0xf24>)
 8011d8e:	4824      	ldr	r0, [pc, #144]	; (8011e20 <tcp_receive+0xf28>)
 8011d90:	f007 facc 	bl	801932c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011d94:	e011      	b.n	8011dba <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f47f aea4 	bne.w	8011aec <tcp_receive+0xbf4>
 8011da4:	e00a      	b.n	8011dbc <tcp_receive+0xec4>
                break;
 8011da6:	bf00      	nop
 8011da8:	e008      	b.n	8011dbc <tcp_receive+0xec4>
                break;
 8011daa:	bf00      	nop
 8011dac:	e006      	b.n	8011dbc <tcp_receive+0xec4>
                  break;
 8011dae:	bf00      	nop
 8011db0:	e004      	b.n	8011dbc <tcp_receive+0xec4>
                  break;
 8011db2:	bf00      	nop
 8011db4:	e002      	b.n	8011dbc <tcp_receive+0xec4>
                  break;
 8011db6:	bf00      	nop
 8011db8:	e000      	b.n	8011dbc <tcp_receive+0xec4>
                break;
 8011dba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f001 fe9b 	bl	8013af8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011dc2:	e003      	b.n	8011dcc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f001 fe97 	bl	8013af8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011dca:	e01a      	b.n	8011e02 <tcp_receive+0xf0a>
 8011dcc:	e019      	b.n	8011e02 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011dce:	4b0f      	ldr	r3, [pc, #60]	; (8011e0c <tcp_receive+0xf14>)
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd6:	1ad3      	subs	r3, r2, r3
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	db0a      	blt.n	8011df2 <tcp_receive+0xefa>
 8011ddc:	4b0b      	ldr	r3, [pc, #44]	; (8011e0c <tcp_receive+0xf14>)
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de4:	6879      	ldr	r1, [r7, #4]
 8011de6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011de8:	440b      	add	r3, r1
 8011dea:	1ad3      	subs	r3, r2, r3
 8011dec:	3301      	adds	r3, #1
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	dd07      	ble.n	8011e02 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	8b5b      	ldrh	r3, [r3, #26]
 8011df6:	f043 0302 	orr.w	r3, r3, #2
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011e00:	e7ff      	b.n	8011e02 <tcp_receive+0xf0a>
 8011e02:	bf00      	nop
 8011e04:	3750      	adds	r7, #80	; 0x50
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bdb0      	pop	{r4, r5, r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	20004270 	.word	0x20004270
 8011e10:	20004250 	.word	0x20004250
 8011e14:	2000427a 	.word	0x2000427a
 8011e18:	0801c58c 	.word	0x0801c58c
 8011e1c:	0801c934 	.word	0x0801c934
 8011e20:	0801c5d8 	.word	0x0801c5d8

08011e24 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011e2a:	4b15      	ldr	r3, [pc, #84]	; (8011e80 <tcp_get_next_optbyte+0x5c>)
 8011e2c:	881b      	ldrh	r3, [r3, #0]
 8011e2e:	1c5a      	adds	r2, r3, #1
 8011e30:	b291      	uxth	r1, r2
 8011e32:	4a13      	ldr	r2, [pc, #76]	; (8011e80 <tcp_get_next_optbyte+0x5c>)
 8011e34:	8011      	strh	r1, [r2, #0]
 8011e36:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011e38:	4b12      	ldr	r3, [pc, #72]	; (8011e84 <tcp_get_next_optbyte+0x60>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d004      	beq.n	8011e4a <tcp_get_next_optbyte+0x26>
 8011e40:	4b11      	ldr	r3, [pc, #68]	; (8011e88 <tcp_get_next_optbyte+0x64>)
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	88fa      	ldrh	r2, [r7, #6]
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d208      	bcs.n	8011e5c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011e4a:	4b10      	ldr	r3, [pc, #64]	; (8011e8c <tcp_get_next_optbyte+0x68>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	3314      	adds	r3, #20
 8011e50:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011e52:	88fb      	ldrh	r3, [r7, #6]
 8011e54:	683a      	ldr	r2, [r7, #0]
 8011e56:	4413      	add	r3, r2
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	e00b      	b.n	8011e74 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011e5c:	88fb      	ldrh	r3, [r7, #6]
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	4b09      	ldr	r3, [pc, #36]	; (8011e88 <tcp_get_next_optbyte+0x64>)
 8011e62:	881b      	ldrh	r3, [r3, #0]
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011e6a:	4b06      	ldr	r3, [pc, #24]	; (8011e84 <tcp_get_next_optbyte+0x60>)
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	797b      	ldrb	r3, [r7, #5]
 8011e70:	4413      	add	r3, r2
 8011e72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	370c      	adds	r7, #12
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7e:	4770      	bx	lr
 8011e80:	2000426c 	.word	0x2000426c
 8011e84:	20004268 	.word	0x20004268
 8011e88:	20004266 	.word	0x20004266
 8011e8c:	20004260 	.word	0x20004260

08011e90 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d106      	bne.n	8011eac <tcp_parseopt+0x1c>
 8011e9e:	4b31      	ldr	r3, [pc, #196]	; (8011f64 <tcp_parseopt+0xd4>)
 8011ea0:	f240 727d 	movw	r2, #1917	; 0x77d
 8011ea4:	4930      	ldr	r1, [pc, #192]	; (8011f68 <tcp_parseopt+0xd8>)
 8011ea6:	4831      	ldr	r0, [pc, #196]	; (8011f6c <tcp_parseopt+0xdc>)
 8011ea8:	f007 fa40 	bl	801932c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011eac:	4b30      	ldr	r3, [pc, #192]	; (8011f70 <tcp_parseopt+0xe0>)
 8011eae:	881b      	ldrh	r3, [r3, #0]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d053      	beq.n	8011f5c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011eb4:	4b2f      	ldr	r3, [pc, #188]	; (8011f74 <tcp_parseopt+0xe4>)
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	801a      	strh	r2, [r3, #0]
 8011eba:	e043      	b.n	8011f44 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8011ebc:	f7ff ffb2 	bl	8011e24 <tcp_get_next_optbyte>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011ec4:	7bfb      	ldrb	r3, [r7, #15]
 8011ec6:	2b01      	cmp	r3, #1
 8011ec8:	d03c      	beq.n	8011f44 <tcp_parseopt+0xb4>
 8011eca:	2b02      	cmp	r3, #2
 8011ecc:	d002      	beq.n	8011ed4 <tcp_parseopt+0x44>
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d03f      	beq.n	8011f52 <tcp_parseopt+0xc2>
 8011ed2:	e026      	b.n	8011f22 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011ed4:	f7ff ffa6 	bl	8011e24 <tcp_get_next_optbyte>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b04      	cmp	r3, #4
 8011edc:	d13b      	bne.n	8011f56 <tcp_parseopt+0xc6>
 8011ede:	4b25      	ldr	r3, [pc, #148]	; (8011f74 <tcp_parseopt+0xe4>)
 8011ee0:	881b      	ldrh	r3, [r3, #0]
 8011ee2:	3302      	adds	r3, #2
 8011ee4:	4a22      	ldr	r2, [pc, #136]	; (8011f70 <tcp_parseopt+0xe0>)
 8011ee6:	8812      	ldrh	r2, [r2, #0]
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	dc34      	bgt.n	8011f56 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011eec:	f7ff ff9a 	bl	8011e24 <tcp_get_next_optbyte>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	021b      	lsls	r3, r3, #8
 8011ef6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011ef8:	f7ff ff94 	bl	8011e24 <tcp_get_next_optbyte>
 8011efc:	4603      	mov	r3, r0
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	89bb      	ldrh	r3, [r7, #12]
 8011f02:	4313      	orrs	r3, r2
 8011f04:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011f06:	89bb      	ldrh	r3, [r7, #12]
 8011f08:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011f0c:	d804      	bhi.n	8011f18 <tcp_parseopt+0x88>
 8011f0e:	89bb      	ldrh	r3, [r7, #12]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d001      	beq.n	8011f18 <tcp_parseopt+0x88>
 8011f14:	89ba      	ldrh	r2, [r7, #12]
 8011f16:	e001      	b.n	8011f1c <tcp_parseopt+0x8c>
 8011f18:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011f20:	e010      	b.n	8011f44 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011f22:	f7ff ff7f 	bl	8011e24 <tcp_get_next_optbyte>
 8011f26:	4603      	mov	r3, r0
 8011f28:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011f2a:	7afb      	ldrb	r3, [r7, #11]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d914      	bls.n	8011f5a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011f30:	7afb      	ldrb	r3, [r7, #11]
 8011f32:	b29a      	uxth	r2, r3
 8011f34:	4b0f      	ldr	r3, [pc, #60]	; (8011f74 <tcp_parseopt+0xe4>)
 8011f36:	881b      	ldrh	r3, [r3, #0]
 8011f38:	4413      	add	r3, r2
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	3b02      	subs	r3, #2
 8011f3e:	b29a      	uxth	r2, r3
 8011f40:	4b0c      	ldr	r3, [pc, #48]	; (8011f74 <tcp_parseopt+0xe4>)
 8011f42:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011f44:	4b0b      	ldr	r3, [pc, #44]	; (8011f74 <tcp_parseopt+0xe4>)
 8011f46:	881a      	ldrh	r2, [r3, #0]
 8011f48:	4b09      	ldr	r3, [pc, #36]	; (8011f70 <tcp_parseopt+0xe0>)
 8011f4a:	881b      	ldrh	r3, [r3, #0]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d3b5      	bcc.n	8011ebc <tcp_parseopt+0x2c>
 8011f50:	e004      	b.n	8011f5c <tcp_parseopt+0xcc>
          return;
 8011f52:	bf00      	nop
 8011f54:	e002      	b.n	8011f5c <tcp_parseopt+0xcc>
            return;
 8011f56:	bf00      	nop
 8011f58:	e000      	b.n	8011f5c <tcp_parseopt+0xcc>
            return;
 8011f5a:	bf00      	nop
      }
    }
  }
}
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	0801c58c 	.word	0x0801c58c
 8011f68:	0801c9f0 	.word	0x0801c9f0
 8011f6c:	0801c5d8 	.word	0x0801c5d8
 8011f70:	20004264 	.word	0x20004264
 8011f74:	2000426c 	.word	0x2000426c

08011f78 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011f78:	b480      	push	{r7}
 8011f7a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011f7c:	4b05      	ldr	r3, [pc, #20]	; (8011f94 <tcp_trigger_input_pcb_close+0x1c>)
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	f043 0310 	orr.w	r3, r3, #16
 8011f84:	b2da      	uxtb	r2, r3
 8011f86:	4b03      	ldr	r3, [pc, #12]	; (8011f94 <tcp_trigger_input_pcb_close+0x1c>)
 8011f88:	701a      	strb	r2, [r3, #0]
}
 8011f8a:	bf00      	nop
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr
 8011f94:	2000427d 	.word	0x2000427d

08011f98 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d00a      	beq.n	8011fc0 <tcp_route+0x28>
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	7a1b      	ldrb	r3, [r3, #8]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d006      	beq.n	8011fc0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	7a1b      	ldrb	r3, [r3, #8]
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7fb f804 	bl	800cfc4 <netif_get_by_index>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	e003      	b.n	8011fc8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f005 fd73 	bl	8017aac <ip4_route>
 8011fc6:	4603      	mov	r3, r0
  }
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3710      	adds	r7, #16
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011fd0:	b590      	push	{r4, r7, lr}
 8011fd2:	b087      	sub	sp, #28
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	603b      	str	r3, [r7, #0]
 8011fdc:	4613      	mov	r3, r2
 8011fde:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d105      	bne.n	8011ff2 <tcp_create_segment+0x22>
 8011fe6:	4b44      	ldr	r3, [pc, #272]	; (80120f8 <tcp_create_segment+0x128>)
 8011fe8:	22a3      	movs	r2, #163	; 0xa3
 8011fea:	4944      	ldr	r1, [pc, #272]	; (80120fc <tcp_create_segment+0x12c>)
 8011fec:	4844      	ldr	r0, [pc, #272]	; (8012100 <tcp_create_segment+0x130>)
 8011fee:	f007 f99d 	bl	801932c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d105      	bne.n	8012004 <tcp_create_segment+0x34>
 8011ff8:	4b3f      	ldr	r3, [pc, #252]	; (80120f8 <tcp_create_segment+0x128>)
 8011ffa:	22a4      	movs	r2, #164	; 0xa4
 8011ffc:	4941      	ldr	r1, [pc, #260]	; (8012104 <tcp_create_segment+0x134>)
 8011ffe:	4840      	ldr	r0, [pc, #256]	; (8012100 <tcp_create_segment+0x130>)
 8012000:	f007 f994 	bl	801932c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012004:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012008:	009b      	lsls	r3, r3, #2
 801200a:	b2db      	uxtb	r3, r3
 801200c:	f003 0304 	and.w	r3, r3, #4
 8012010:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012012:	2003      	movs	r0, #3
 8012014:	f7fa fc62 	bl	800c8dc <memp_malloc>
 8012018:	6138      	str	r0, [r7, #16]
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d104      	bne.n	801202a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012020:	68b8      	ldr	r0, [r7, #8]
 8012022:	f7fb fb91 	bl	800d748 <pbuf_free>
    return NULL;
 8012026:	2300      	movs	r3, #0
 8012028:	e061      	b.n	80120ee <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801202a:	693b      	ldr	r3, [r7, #16]
 801202c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012030:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	2200      	movs	r2, #0
 8012036:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	68ba      	ldr	r2, [r7, #8]
 801203c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	891a      	ldrh	r2, [r3, #8]
 8012042:	7dfb      	ldrb	r3, [r7, #23]
 8012044:	b29b      	uxth	r3, r3
 8012046:	429a      	cmp	r2, r3
 8012048:	d205      	bcs.n	8012056 <tcp_create_segment+0x86>
 801204a:	4b2b      	ldr	r3, [pc, #172]	; (80120f8 <tcp_create_segment+0x128>)
 801204c:	22b0      	movs	r2, #176	; 0xb0
 801204e:	492e      	ldr	r1, [pc, #184]	; (8012108 <tcp_create_segment+0x138>)
 8012050:	482b      	ldr	r0, [pc, #172]	; (8012100 <tcp_create_segment+0x130>)
 8012052:	f007 f96b 	bl	801932c <iprintf>
  seg->len = p->tot_len - optlen;
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	891a      	ldrh	r2, [r3, #8]
 801205a:	7dfb      	ldrb	r3, [r7, #23]
 801205c:	b29b      	uxth	r3, r3
 801205e:	1ad3      	subs	r3, r2, r3
 8012060:	b29a      	uxth	r2, r3
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012066:	2114      	movs	r1, #20
 8012068:	68b8      	ldr	r0, [r7, #8]
 801206a:	f7fb fad7 	bl	800d61c <pbuf_add_header>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d004      	beq.n	801207e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012074:	6938      	ldr	r0, [r7, #16]
 8012076:	f7fd f807 	bl	800f088 <tcp_seg_free>
    return NULL;
 801207a:	2300      	movs	r3, #0
 801207c:	e037      	b.n	80120ee <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	685a      	ldr	r2, [r3, #4]
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	8ada      	ldrh	r2, [r3, #22]
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	68dc      	ldr	r4, [r3, #12]
 8012090:	4610      	mov	r0, r2
 8012092:	f7f9 ff6d 	bl	800bf70 <lwip_htons>
 8012096:	4603      	mov	r3, r0
 8012098:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	8b1a      	ldrh	r2, [r3, #24]
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	68dc      	ldr	r4, [r3, #12]
 80120a2:	4610      	mov	r0, r2
 80120a4:	f7f9 ff64 	bl	800bf70 <lwip_htons>
 80120a8:	4603      	mov	r3, r0
 80120aa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	68dc      	ldr	r4, [r3, #12]
 80120b0:	6838      	ldr	r0, [r7, #0]
 80120b2:	f7f9 ff72 	bl	800bf9a <lwip_htonl>
 80120b6:	4603      	mov	r3, r0
 80120b8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80120ba:	7dfb      	ldrb	r3, [r7, #23]
 80120bc:	089b      	lsrs	r3, r3, #2
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	3305      	adds	r3, #5
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	031b      	lsls	r3, r3, #12
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	79fb      	ldrb	r3, [r7, #7]
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	4313      	orrs	r3, r2
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	68dc      	ldr	r4, [r3, #12]
 80120d6:	4610      	mov	r0, r2
 80120d8:	f7f9 ff4a 	bl	800bf70 <lwip_htons>
 80120dc:	4603      	mov	r3, r0
 80120de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	2200      	movs	r2, #0
 80120e6:	749a      	strb	r2, [r3, #18]
 80120e8:	2200      	movs	r2, #0
 80120ea:	74da      	strb	r2, [r3, #19]
  return seg;
 80120ec:	693b      	ldr	r3, [r7, #16]
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	371c      	adds	r7, #28
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd90      	pop	{r4, r7, pc}
 80120f6:	bf00      	nop
 80120f8:	0801ca0c 	.word	0x0801ca0c
 80120fc:	0801ca40 	.word	0x0801ca40
 8012100:	0801ca60 	.word	0x0801ca60
 8012104:	0801ca88 	.word	0x0801ca88
 8012108:	0801caac 	.word	0x0801caac

0801210c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b086      	sub	sp, #24
 8012110:	af00      	add	r7, sp, #0
 8012112:	607b      	str	r3, [r7, #4]
 8012114:	4603      	mov	r3, r0
 8012116:	73fb      	strb	r3, [r7, #15]
 8012118:	460b      	mov	r3, r1
 801211a:	81bb      	strh	r3, [r7, #12]
 801211c:	4613      	mov	r3, r2
 801211e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012120:	89bb      	ldrh	r3, [r7, #12]
 8012122:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d105      	bne.n	8012136 <tcp_pbuf_prealloc+0x2a>
 801212a:	4b30      	ldr	r3, [pc, #192]	; (80121ec <tcp_pbuf_prealloc+0xe0>)
 801212c:	22e8      	movs	r2, #232	; 0xe8
 801212e:	4930      	ldr	r1, [pc, #192]	; (80121f0 <tcp_pbuf_prealloc+0xe4>)
 8012130:	4830      	ldr	r0, [pc, #192]	; (80121f4 <tcp_pbuf_prealloc+0xe8>)
 8012132:	f007 f8fb 	bl	801932c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d105      	bne.n	8012148 <tcp_pbuf_prealloc+0x3c>
 801213c:	4b2b      	ldr	r3, [pc, #172]	; (80121ec <tcp_pbuf_prealloc+0xe0>)
 801213e:	22e9      	movs	r2, #233	; 0xe9
 8012140:	492d      	ldr	r1, [pc, #180]	; (80121f8 <tcp_pbuf_prealloc+0xec>)
 8012142:	482c      	ldr	r0, [pc, #176]	; (80121f4 <tcp_pbuf_prealloc+0xe8>)
 8012144:	f007 f8f2 	bl	801932c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012148:	89ba      	ldrh	r2, [r7, #12]
 801214a:	897b      	ldrh	r3, [r7, #10]
 801214c:	429a      	cmp	r2, r3
 801214e:	d221      	bcs.n	8012194 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012150:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012154:	f003 0302 	and.w	r3, r3, #2
 8012158:	2b00      	cmp	r3, #0
 801215a:	d111      	bne.n	8012180 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801215c:	6a3b      	ldr	r3, [r7, #32]
 801215e:	8b5b      	ldrh	r3, [r3, #26]
 8012160:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012164:	2b00      	cmp	r3, #0
 8012166:	d115      	bne.n	8012194 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012168:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801216c:	2b00      	cmp	r3, #0
 801216e:	d007      	beq.n	8012180 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012170:	6a3b      	ldr	r3, [r7, #32]
 8012172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012174:	2b00      	cmp	r3, #0
 8012176:	d103      	bne.n	8012180 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012178:	6a3b      	ldr	r3, [r7, #32]
 801217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801217c:	2b00      	cmp	r3, #0
 801217e:	d009      	beq.n	8012194 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012180:	89bb      	ldrh	r3, [r7, #12]
 8012182:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012186:	f023 0203 	bic.w	r2, r3, #3
 801218a:	897b      	ldrh	r3, [r7, #10]
 801218c:	4293      	cmp	r3, r2
 801218e:	bf28      	it	cs
 8012190:	4613      	movcs	r3, r2
 8012192:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012194:	8af9      	ldrh	r1, [r7, #22]
 8012196:	7bfb      	ldrb	r3, [r7, #15]
 8012198:	f44f 7220 	mov.w	r2, #640	; 0x280
 801219c:	4618      	mov	r0, r3
 801219e:	f7fa fff3 	bl	800d188 <pbuf_alloc>
 80121a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d101      	bne.n	80121ae <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80121aa:	2300      	movs	r3, #0
 80121ac:	e019      	b.n	80121e2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d006      	beq.n	80121c4 <tcp_pbuf_prealloc+0xb8>
 80121b6:	4b0d      	ldr	r3, [pc, #52]	; (80121ec <tcp_pbuf_prealloc+0xe0>)
 80121b8:	f240 120b 	movw	r2, #267	; 0x10b
 80121bc:	490f      	ldr	r1, [pc, #60]	; (80121fc <tcp_pbuf_prealloc+0xf0>)
 80121be:	480d      	ldr	r0, [pc, #52]	; (80121f4 <tcp_pbuf_prealloc+0xe8>)
 80121c0:	f007 f8b4 	bl	801932c <iprintf>
  *oversize = p->len - length;
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	895a      	ldrh	r2, [r3, #10]
 80121c8:	89bb      	ldrh	r3, [r7, #12]
 80121ca:	1ad3      	subs	r3, r2, r3
 80121cc:	b29a      	uxth	r2, r3
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	89ba      	ldrh	r2, [r7, #12]
 80121d6:	811a      	strh	r2, [r3, #8]
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	891a      	ldrh	r2, [r3, #8]
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	815a      	strh	r2, [r3, #10]
  return p;
 80121e0:	693b      	ldr	r3, [r7, #16]
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3718      	adds	r7, #24
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	0801ca0c 	.word	0x0801ca0c
 80121f0:	0801cac4 	.word	0x0801cac4
 80121f4:	0801ca60 	.word	0x0801ca60
 80121f8:	0801cae8 	.word	0x0801cae8
 80121fc:	0801cb08 	.word	0x0801cb08

08012200 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b082      	sub	sp, #8
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	460b      	mov	r3, r1
 801220a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d106      	bne.n	8012220 <tcp_write_checks+0x20>
 8012212:	4b33      	ldr	r3, [pc, #204]	; (80122e0 <tcp_write_checks+0xe0>)
 8012214:	f240 1233 	movw	r2, #307	; 0x133
 8012218:	4932      	ldr	r1, [pc, #200]	; (80122e4 <tcp_write_checks+0xe4>)
 801221a:	4833      	ldr	r0, [pc, #204]	; (80122e8 <tcp_write_checks+0xe8>)
 801221c:	f007 f886 	bl	801932c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	7d1b      	ldrb	r3, [r3, #20]
 8012224:	2b04      	cmp	r3, #4
 8012226:	d00e      	beq.n	8012246 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801222c:	2b07      	cmp	r3, #7
 801222e:	d00a      	beq.n	8012246 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012234:	2b02      	cmp	r3, #2
 8012236:	d006      	beq.n	8012246 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801223c:	2b03      	cmp	r3, #3
 801223e:	d002      	beq.n	8012246 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012240:	f06f 030a 	mvn.w	r3, #10
 8012244:	e048      	b.n	80122d8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012246:	887b      	ldrh	r3, [r7, #2]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d101      	bne.n	8012250 <tcp_write_checks+0x50>
    return ERR_OK;
 801224c:	2300      	movs	r3, #0
 801224e:	e043      	b.n	80122d8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012256:	887a      	ldrh	r2, [r7, #2]
 8012258:	429a      	cmp	r2, r3
 801225a:	d909      	bls.n	8012270 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	8b5b      	ldrh	r3, [r3, #26]
 8012260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012264:	b29a      	uxth	r2, r3
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801226a:	f04f 33ff 	mov.w	r3, #4294967295
 801226e:	e033      	b.n	80122d8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012276:	2b08      	cmp	r3, #8
 8012278:	d909      	bls.n	801228e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	8b5b      	ldrh	r3, [r3, #26]
 801227e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012282:	b29a      	uxth	r2, r3
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012288:	f04f 33ff 	mov.w	r3, #4294967295
 801228c:	e024      	b.n	80122d8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012294:	2b00      	cmp	r3, #0
 8012296:	d00f      	beq.n	80122b8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801229c:	2b00      	cmp	r3, #0
 801229e:	d11a      	bne.n	80122d6 <tcp_write_checks+0xd6>
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d116      	bne.n	80122d6 <tcp_write_checks+0xd6>
 80122a8:	4b0d      	ldr	r3, [pc, #52]	; (80122e0 <tcp_write_checks+0xe0>)
 80122aa:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80122ae:	490f      	ldr	r1, [pc, #60]	; (80122ec <tcp_write_checks+0xec>)
 80122b0:	480d      	ldr	r0, [pc, #52]	; (80122e8 <tcp_write_checks+0xe8>)
 80122b2:	f007 f83b 	bl	801932c <iprintf>
 80122b6:	e00e      	b.n	80122d6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d103      	bne.n	80122c8 <tcp_write_checks+0xc8>
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d006      	beq.n	80122d6 <tcp_write_checks+0xd6>
 80122c8:	4b05      	ldr	r3, [pc, #20]	; (80122e0 <tcp_write_checks+0xe0>)
 80122ca:	f240 1259 	movw	r2, #345	; 0x159
 80122ce:	4908      	ldr	r1, [pc, #32]	; (80122f0 <tcp_write_checks+0xf0>)
 80122d0:	4805      	ldr	r0, [pc, #20]	; (80122e8 <tcp_write_checks+0xe8>)
 80122d2:	f007 f82b 	bl	801932c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80122d6:	2300      	movs	r3, #0
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3708      	adds	r7, #8
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}
 80122e0:	0801ca0c 	.word	0x0801ca0c
 80122e4:	0801cb1c 	.word	0x0801cb1c
 80122e8:	0801ca60 	.word	0x0801ca60
 80122ec:	0801cb3c 	.word	0x0801cb3c
 80122f0:	0801cb78 	.word	0x0801cb78

080122f4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80122f4:	b590      	push	{r4, r7, lr}
 80122f6:	b09b      	sub	sp, #108	; 0x6c
 80122f8:	af04      	add	r7, sp, #16
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	4611      	mov	r1, r2
 8012300:	461a      	mov	r2, r3
 8012302:	460b      	mov	r3, r1
 8012304:	80fb      	strh	r3, [r7, #6]
 8012306:	4613      	mov	r3, r2
 8012308:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801230a:	2300      	movs	r3, #0
 801230c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801230e:	2300      	movs	r3, #0
 8012310:	653b      	str	r3, [r7, #80]	; 0x50
 8012312:	2300      	movs	r3, #0
 8012314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012316:	2300      	movs	r3, #0
 8012318:	64bb      	str	r3, [r7, #72]	; 0x48
 801231a:	2300      	movs	r3, #0
 801231c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801231e:	2300      	movs	r3, #0
 8012320:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012324:	2300      	movs	r3, #0
 8012326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801232a:	2300      	movs	r3, #0
 801232c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801232e:	2300      	movs	r3, #0
 8012330:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012332:	2300      	movs	r3, #0
 8012334:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d109      	bne.n	8012350 <tcp_write+0x5c>
 801233c:	4ba5      	ldr	r3, [pc, #660]	; (80125d4 <tcp_write+0x2e0>)
 801233e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012342:	49a5      	ldr	r1, [pc, #660]	; (80125d8 <tcp_write+0x2e4>)
 8012344:	48a5      	ldr	r0, [pc, #660]	; (80125dc <tcp_write+0x2e8>)
 8012346:	f006 fff1 	bl	801932c <iprintf>
 801234a:	f06f 030f 	mvn.w	r3, #15
 801234e:	e32c      	b.n	80129aa <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012356:	085b      	lsrs	r3, r3, #1
 8012358:	b29a      	uxth	r2, r3
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801235e:	4293      	cmp	r3, r2
 8012360:	bf28      	it	cs
 8012362:	4613      	movcs	r3, r2
 8012364:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012368:	2b00      	cmp	r3, #0
 801236a:	d102      	bne.n	8012372 <tcp_write+0x7e>
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012370:	e000      	b.n	8012374 <tcp_write+0x80>
 8012372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012374:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d109      	bne.n	8012390 <tcp_write+0x9c>
 801237c:	4b95      	ldr	r3, [pc, #596]	; (80125d4 <tcp_write+0x2e0>)
 801237e:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8012382:	4997      	ldr	r1, [pc, #604]	; (80125e0 <tcp_write+0x2ec>)
 8012384:	4895      	ldr	r0, [pc, #596]	; (80125dc <tcp_write+0x2e8>)
 8012386:	f006 ffd1 	bl	801932c <iprintf>
 801238a:	f06f 030f 	mvn.w	r3, #15
 801238e:	e30c      	b.n	80129aa <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012390:	88fb      	ldrh	r3, [r7, #6]
 8012392:	4619      	mov	r1, r3
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f7ff ff33 	bl	8012200 <tcp_write_checks>
 801239a:	4603      	mov	r3, r0
 801239c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80123a0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d002      	beq.n	80123ae <tcp_write+0xba>
    return err;
 80123a8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80123ac:	e2fd      	b.n	80129aa <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80123b8:	2300      	movs	r3, #0
 80123ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	f000 80f7 	beq.w	80125b6 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123cc:	653b      	str	r3, [r7, #80]	; 0x50
 80123ce:	e002      	b.n	80123d6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80123d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80123d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d1f8      	bne.n	80123d0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80123de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e0:	7a9b      	ldrb	r3, [r3, #10]
 80123e2:	009b      	lsls	r3, r3, #2
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	f003 0304 	and.w	r3, r3, #4
 80123ea:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80123ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123f0:	891b      	ldrh	r3, [r3, #8]
 80123f2:	4619      	mov	r1, r3
 80123f4:	8c3b      	ldrh	r3, [r7, #32]
 80123f6:	440b      	add	r3, r1
 80123f8:	429a      	cmp	r2, r3
 80123fa:	da06      	bge.n	801240a <tcp_write+0x116>
 80123fc:	4b75      	ldr	r3, [pc, #468]	; (80125d4 <tcp_write+0x2e0>)
 80123fe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012402:	4978      	ldr	r1, [pc, #480]	; (80125e4 <tcp_write+0x2f0>)
 8012404:	4875      	ldr	r0, [pc, #468]	; (80125dc <tcp_write+0x2e8>)
 8012406:	f006 ff91 	bl	801932c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801240a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801240c:	891a      	ldrh	r2, [r3, #8]
 801240e:	8c3b      	ldrh	r3, [r7, #32]
 8012410:	4413      	add	r3, r2
 8012412:	b29b      	uxth	r3, r3
 8012414:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012420:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012422:	8a7b      	ldrh	r3, [r7, #18]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d027      	beq.n	8012478 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012428:	8a7b      	ldrh	r3, [r7, #18]
 801242a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801242c:	429a      	cmp	r2, r3
 801242e:	d206      	bcs.n	801243e <tcp_write+0x14a>
 8012430:	4b68      	ldr	r3, [pc, #416]	; (80125d4 <tcp_write+0x2e0>)
 8012432:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012436:	496c      	ldr	r1, [pc, #432]	; (80125e8 <tcp_write+0x2f4>)
 8012438:	4868      	ldr	r0, [pc, #416]	; (80125dc <tcp_write+0x2e8>)
 801243a:	f006 ff77 	bl	801932c <iprintf>
      seg = last_unsent;
 801243e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012440:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012442:	8a7b      	ldrh	r3, [r7, #18]
 8012444:	88fa      	ldrh	r2, [r7, #6]
 8012446:	429a      	cmp	r2, r3
 8012448:	d901      	bls.n	801244e <tcp_write+0x15a>
 801244a:	8a7b      	ldrh	r3, [r7, #18]
 801244c:	e000      	b.n	8012450 <tcp_write+0x15c>
 801244e:	88fb      	ldrh	r3, [r7, #6]
 8012450:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012452:	4293      	cmp	r3, r2
 8012454:	bfa8      	it	ge
 8012456:	4613      	movge	r3, r2
 8012458:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801245a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801245e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012460:	4413      	add	r3, r2
 8012462:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012466:	8a7a      	ldrh	r2, [r7, #18]
 8012468:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801246a:	1ad3      	subs	r3, r2, r3
 801246c:	b29b      	uxth	r3, r3
 801246e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012470:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012472:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012474:	1ad3      	subs	r3, r2, r3
 8012476:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012478:	8a7b      	ldrh	r3, [r7, #18]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d00b      	beq.n	8012496 <tcp_write+0x1a2>
 801247e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012482:	88fb      	ldrh	r3, [r7, #6]
 8012484:	429a      	cmp	r2, r3
 8012486:	d006      	beq.n	8012496 <tcp_write+0x1a2>
 8012488:	4b52      	ldr	r3, [pc, #328]	; (80125d4 <tcp_write+0x2e0>)
 801248a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801248e:	4957      	ldr	r1, [pc, #348]	; (80125ec <tcp_write+0x2f8>)
 8012490:	4852      	ldr	r0, [pc, #328]	; (80125dc <tcp_write+0x2e8>)
 8012492:	f006 ff4b 	bl	801932c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012496:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801249a:	88fb      	ldrh	r3, [r7, #6]
 801249c:	429a      	cmp	r2, r3
 801249e:	f080 8168 	bcs.w	8012772 <tcp_write+0x47e>
 80124a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	f000 8164 	beq.w	8012772 <tcp_write+0x47e>
 80124aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ac:	891b      	ldrh	r3, [r3, #8]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	f000 815f 	beq.w	8012772 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80124b4:	88fa      	ldrh	r2, [r7, #6]
 80124b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80124ba:	1ad2      	subs	r2, r2, r3
 80124bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80124be:	4293      	cmp	r3, r2
 80124c0:	bfa8      	it	ge
 80124c2:	4613      	movge	r3, r2
 80124c4:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80124c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124c8:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80124ca:	797b      	ldrb	r3, [r7, #5]
 80124cc:	f003 0301 	and.w	r3, r3, #1
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d027      	beq.n	8012524 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80124d4:	f107 0012 	add.w	r0, r7, #18
 80124d8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80124da:	8bf9      	ldrh	r1, [r7, #30]
 80124dc:	2301      	movs	r3, #1
 80124de:	9302      	str	r3, [sp, #8]
 80124e0:	797b      	ldrb	r3, [r7, #5]
 80124e2:	9301      	str	r3, [sp, #4]
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	9300      	str	r3, [sp, #0]
 80124e8:	4603      	mov	r3, r0
 80124ea:	2000      	movs	r0, #0
 80124ec:	f7ff fe0e 	bl	801210c <tcp_pbuf_prealloc>
 80124f0:	6578      	str	r0, [r7, #84]	; 0x54
 80124f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	f000 8226 	beq.w	8012946 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80124fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124fc:	6858      	ldr	r0, [r3, #4]
 80124fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012502:	68ba      	ldr	r2, [r7, #8]
 8012504:	4413      	add	r3, r2
 8012506:	8bfa      	ldrh	r2, [r7, #30]
 8012508:	4619      	mov	r1, r3
 801250a:	f006 fefb 	bl	8019304 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801250e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012510:	f7fb f9a8 	bl	800d864 <pbuf_clen>
 8012514:	4603      	mov	r3, r0
 8012516:	461a      	mov	r2, r3
 8012518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801251c:	4413      	add	r3, r2
 801251e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012522:	e041      	b.n	80125a8 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	637b      	str	r3, [r7, #52]	; 0x34
 801252a:	e002      	b.n	8012532 <tcp_write+0x23e>
 801252c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	637b      	str	r3, [r7, #52]	; 0x34
 8012532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d1f8      	bne.n	801252c <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801253a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801253c:	7b1b      	ldrb	r3, [r3, #12]
 801253e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012542:	2b00      	cmp	r3, #0
 8012544:	d115      	bne.n	8012572 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012548:	685b      	ldr	r3, [r3, #4]
 801254a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801254c:	8952      	ldrh	r2, [r2, #10]
 801254e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012550:	68ba      	ldr	r2, [r7, #8]
 8012552:	429a      	cmp	r2, r3
 8012554:	d10d      	bne.n	8012572 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012556:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801255a:	2b00      	cmp	r3, #0
 801255c:	d006      	beq.n	801256c <tcp_write+0x278>
 801255e:	4b1d      	ldr	r3, [pc, #116]	; (80125d4 <tcp_write+0x2e0>)
 8012560:	f240 2231 	movw	r2, #561	; 0x231
 8012564:	4922      	ldr	r1, [pc, #136]	; (80125f0 <tcp_write+0x2fc>)
 8012566:	481d      	ldr	r0, [pc, #116]	; (80125dc <tcp_write+0x2e8>)
 8012568:	f006 fee0 	bl	801932c <iprintf>
          extendlen = seglen;
 801256c:	8bfb      	ldrh	r3, [r7, #30]
 801256e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012570:	e01a      	b.n	80125a8 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012572:	8bfb      	ldrh	r3, [r7, #30]
 8012574:	2201      	movs	r2, #1
 8012576:	4619      	mov	r1, r3
 8012578:	2000      	movs	r0, #0
 801257a:	f7fa fe05 	bl	800d188 <pbuf_alloc>
 801257e:	6578      	str	r0, [r7, #84]	; 0x54
 8012580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012582:	2b00      	cmp	r3, #0
 8012584:	f000 81e1 	beq.w	801294a <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012588:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	441a      	add	r2, r3
 8012590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012592:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012594:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012596:	f7fb f965 	bl	800d864 <pbuf_clen>
 801259a:	4603      	mov	r3, r0
 801259c:	461a      	mov	r2, r3
 801259e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80125a2:	4413      	add	r3, r2
 80125a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80125a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125ac:	8bfb      	ldrh	r3, [r7, #30]
 80125ae:	4413      	add	r3, r2
 80125b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80125b4:	e0dd      	b.n	8012772 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80125bc:	2b00      	cmp	r3, #0
 80125be:	f000 80d8 	beq.w	8012772 <tcp_write+0x47e>
 80125c2:	4b04      	ldr	r3, [pc, #16]	; (80125d4 <tcp_write+0x2e0>)
 80125c4:	f240 224b 	movw	r2, #587	; 0x24b
 80125c8:	490a      	ldr	r1, [pc, #40]	; (80125f4 <tcp_write+0x300>)
 80125ca:	4804      	ldr	r0, [pc, #16]	; (80125dc <tcp_write+0x2e8>)
 80125cc:	f006 feae 	bl	801932c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80125d0:	e0cf      	b.n	8012772 <tcp_write+0x47e>
 80125d2:	bf00      	nop
 80125d4:	0801ca0c 	.word	0x0801ca0c
 80125d8:	0801cbac 	.word	0x0801cbac
 80125dc:	0801ca60 	.word	0x0801ca60
 80125e0:	0801cbc4 	.word	0x0801cbc4
 80125e4:	0801cbf8 	.word	0x0801cbf8
 80125e8:	0801cc10 	.word	0x0801cc10
 80125ec:	0801cc30 	.word	0x0801cc30
 80125f0:	0801cc50 	.word	0x0801cc50
 80125f4:	0801cc7c 	.word	0x0801cc7c
    struct pbuf *p;
    u16_t left = len - pos;
 80125f8:	88fa      	ldrh	r2, [r7, #6]
 80125fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125fe:	1ad3      	subs	r3, r2, r3
 8012600:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012602:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012606:	b29b      	uxth	r3, r3
 8012608:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801260a:	1ad3      	subs	r3, r2, r3
 801260c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801260e:	8b7a      	ldrh	r2, [r7, #26]
 8012610:	8bbb      	ldrh	r3, [r7, #28]
 8012612:	4293      	cmp	r3, r2
 8012614:	bf28      	it	cs
 8012616:	4613      	movcs	r3, r2
 8012618:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801261a:	797b      	ldrb	r3, [r7, #5]
 801261c:	f003 0301 	and.w	r3, r3, #1
 8012620:	2b00      	cmp	r3, #0
 8012622:	d036      	beq.n	8012692 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012624:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012628:	b29a      	uxth	r2, r3
 801262a:	8b3b      	ldrh	r3, [r7, #24]
 801262c:	4413      	add	r3, r2
 801262e:	b299      	uxth	r1, r3
 8012630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012632:	2b00      	cmp	r3, #0
 8012634:	bf0c      	ite	eq
 8012636:	2301      	moveq	r3, #1
 8012638:	2300      	movne	r3, #0
 801263a:	b2db      	uxtb	r3, r3
 801263c:	f107 0012 	add.w	r0, r7, #18
 8012640:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012642:	9302      	str	r3, [sp, #8]
 8012644:	797b      	ldrb	r3, [r7, #5]
 8012646:	9301      	str	r3, [sp, #4]
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	9300      	str	r3, [sp, #0]
 801264c:	4603      	mov	r3, r0
 801264e:	2036      	movs	r0, #54	; 0x36
 8012650:	f7ff fd5c 	bl	801210c <tcp_pbuf_prealloc>
 8012654:	6338      	str	r0, [r7, #48]	; 0x30
 8012656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012658:	2b00      	cmp	r3, #0
 801265a:	f000 8178 	beq.w	801294e <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012660:	895b      	ldrh	r3, [r3, #10]
 8012662:	8b3a      	ldrh	r2, [r7, #24]
 8012664:	429a      	cmp	r2, r3
 8012666:	d906      	bls.n	8012676 <tcp_write+0x382>
 8012668:	4b8c      	ldr	r3, [pc, #560]	; (801289c <tcp_write+0x5a8>)
 801266a:	f240 2267 	movw	r2, #615	; 0x267
 801266e:	498c      	ldr	r1, [pc, #560]	; (80128a0 <tcp_write+0x5ac>)
 8012670:	488c      	ldr	r0, [pc, #560]	; (80128a4 <tcp_write+0x5b0>)
 8012672:	f006 fe5b 	bl	801932c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012678:	685a      	ldr	r2, [r3, #4]
 801267a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801267e:	18d0      	adds	r0, r2, r3
 8012680:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012684:	68ba      	ldr	r2, [r7, #8]
 8012686:	4413      	add	r3, r2
 8012688:	8b3a      	ldrh	r2, [r7, #24]
 801268a:	4619      	mov	r1, r3
 801268c:	f006 fe3a 	bl	8019304 <memcpy>
 8012690:	e02f      	b.n	80126f2 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012692:	8a7b      	ldrh	r3, [r7, #18]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d006      	beq.n	80126a6 <tcp_write+0x3b2>
 8012698:	4b80      	ldr	r3, [pc, #512]	; (801289c <tcp_write+0x5a8>)
 801269a:	f240 2271 	movw	r2, #625	; 0x271
 801269e:	4982      	ldr	r1, [pc, #520]	; (80128a8 <tcp_write+0x5b4>)
 80126a0:	4880      	ldr	r0, [pc, #512]	; (80128a4 <tcp_write+0x5b0>)
 80126a2:	f006 fe43 	bl	801932c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80126a6:	8b3b      	ldrh	r3, [r7, #24]
 80126a8:	2201      	movs	r2, #1
 80126aa:	4619      	mov	r1, r3
 80126ac:	2036      	movs	r0, #54	; 0x36
 80126ae:	f7fa fd6b 	bl	800d188 <pbuf_alloc>
 80126b2:	6178      	str	r0, [r7, #20]
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f000 814b 	beq.w	8012952 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80126bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126c0:	68ba      	ldr	r2, [r7, #8]
 80126c2:	441a      	add	r2, r3
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80126c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126d2:	4619      	mov	r1, r3
 80126d4:	2036      	movs	r0, #54	; 0x36
 80126d6:	f7fa fd57 	bl	800d188 <pbuf_alloc>
 80126da:	6338      	str	r0, [r7, #48]	; 0x30
 80126dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d103      	bne.n	80126ea <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80126e2:	6978      	ldr	r0, [r7, #20]
 80126e4:	f7fb f830 	bl	800d748 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80126e8:	e136      	b.n	8012958 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80126ea:	6979      	ldr	r1, [r7, #20]
 80126ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126ee:	f7fb f8f9 	bl	800d8e4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80126f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126f4:	f7fb f8b6 	bl	800d864 <pbuf_clen>
 80126f8:	4603      	mov	r3, r0
 80126fa:	461a      	mov	r2, r3
 80126fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012700:	4413      	add	r3, r2
 8012702:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012706:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801270a:	2b09      	cmp	r3, #9
 801270c:	d903      	bls.n	8012716 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801270e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012710:	f7fb f81a 	bl	800d748 <pbuf_free>
      goto memerr;
 8012714:	e120      	b.n	8012958 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801271a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801271e:	441a      	add	r2, r3
 8012720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012724:	9300      	str	r3, [sp, #0]
 8012726:	4613      	mov	r3, r2
 8012728:	2200      	movs	r2, #0
 801272a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801272c:	68f8      	ldr	r0, [r7, #12]
 801272e:	f7ff fc4f 	bl	8011fd0 <tcp_create_segment>
 8012732:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012736:	2b00      	cmp	r3, #0
 8012738:	f000 810d 	beq.w	8012956 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801273c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801273e:	2b00      	cmp	r3, #0
 8012740:	d102      	bne.n	8012748 <tcp_write+0x454>
      queue = seg;
 8012742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012744:	647b      	str	r3, [r7, #68]	; 0x44
 8012746:	e00c      	b.n	8012762 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801274a:	2b00      	cmp	r3, #0
 801274c:	d106      	bne.n	801275c <tcp_write+0x468>
 801274e:	4b53      	ldr	r3, [pc, #332]	; (801289c <tcp_write+0x5a8>)
 8012750:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012754:	4955      	ldr	r1, [pc, #340]	; (80128ac <tcp_write+0x5b8>)
 8012756:	4853      	ldr	r0, [pc, #332]	; (80128a4 <tcp_write+0x5b0>)
 8012758:	f006 fde8 	bl	801932c <iprintf>
      prev_seg->next = seg;
 801275c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801275e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012760:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012764:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012766:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801276a:	8b3b      	ldrh	r3, [r7, #24]
 801276c:	4413      	add	r3, r2
 801276e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012772:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012776:	88fb      	ldrh	r3, [r7, #6]
 8012778:	429a      	cmp	r2, r3
 801277a:	f4ff af3d 	bcc.w	80125f8 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801277e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012780:	2b00      	cmp	r3, #0
 8012782:	d02c      	beq.n	80127de <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	62fb      	str	r3, [r7, #44]	; 0x2c
 801278a:	e01e      	b.n	80127ca <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278e:	891a      	ldrh	r2, [r3, #8]
 8012790:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012792:	4413      	add	r3, r2
 8012794:	b29a      	uxth	r2, r3
 8012796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012798:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d110      	bne.n	80127c4 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80127a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127a8:	8952      	ldrh	r2, [r2, #10]
 80127aa:	4413      	add	r3, r2
 80127ac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80127ae:	68b9      	ldr	r1, [r7, #8]
 80127b0:	4618      	mov	r0, r3
 80127b2:	f006 fda7 	bl	8019304 <memcpy>
        p->len += oversize_used;
 80127b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b8:	895a      	ldrh	r2, [r3, #10]
 80127ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127bc:	4413      	add	r3, r2
 80127be:	b29a      	uxth	r2, r3
 80127c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80127c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d1dd      	bne.n	801278c <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80127d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127d2:	891a      	ldrh	r2, [r3, #8]
 80127d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127d6:	4413      	add	r3, r2
 80127d8:	b29a      	uxth	r2, r3
 80127da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127dc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80127de:	8a7a      	ldrh	r2, [r7, #18]
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80127e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d018      	beq.n	801281e <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80127ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d106      	bne.n	8012800 <tcp_write+0x50c>
 80127f2:	4b2a      	ldr	r3, [pc, #168]	; (801289c <tcp_write+0x5a8>)
 80127f4:	f240 22e1 	movw	r2, #737	; 0x2e1
 80127f8:	492d      	ldr	r1, [pc, #180]	; (80128b0 <tcp_write+0x5bc>)
 80127fa:	482a      	ldr	r0, [pc, #168]	; (80128a4 <tcp_write+0x5b0>)
 80127fc:	f006 fd96 	bl	801932c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012802:	685b      	ldr	r3, [r3, #4]
 8012804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012806:	4618      	mov	r0, r3
 8012808:	f7fb f86c 	bl	800d8e4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801280c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801280e:	891a      	ldrh	r2, [r3, #8]
 8012810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012812:	891b      	ldrh	r3, [r3, #8]
 8012814:	4413      	add	r3, r2
 8012816:	b29a      	uxth	r2, r3
 8012818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801281a:	811a      	strh	r2, [r3, #8]
 801281c:	e037      	b.n	801288e <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801281e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012820:	2b00      	cmp	r3, #0
 8012822:	d034      	beq.n	801288e <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012826:	2b00      	cmp	r3, #0
 8012828:	d003      	beq.n	8012832 <tcp_write+0x53e>
 801282a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d106      	bne.n	8012840 <tcp_write+0x54c>
 8012832:	4b1a      	ldr	r3, [pc, #104]	; (801289c <tcp_write+0x5a8>)
 8012834:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012838:	491e      	ldr	r1, [pc, #120]	; (80128b4 <tcp_write+0x5c0>)
 801283a:	481a      	ldr	r0, [pc, #104]	; (80128a4 <tcp_write+0x5b0>)
 801283c:	f006 fd76 	bl	801932c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012842:	685b      	ldr	r3, [r3, #4]
 8012844:	62bb      	str	r3, [r7, #40]	; 0x28
 8012846:	e009      	b.n	801285c <tcp_write+0x568>
      p->tot_len += extendlen;
 8012848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801284a:	891a      	ldrh	r2, [r3, #8]
 801284c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801284e:	4413      	add	r3, r2
 8012850:	b29a      	uxth	r2, r3
 8012852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012854:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	62bb      	str	r3, [r7, #40]	; 0x28
 801285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d1f1      	bne.n	8012848 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8012864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012866:	891a      	ldrh	r2, [r3, #8]
 8012868:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801286a:	4413      	add	r3, r2
 801286c:	b29a      	uxth	r2, r3
 801286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012870:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012874:	895a      	ldrh	r2, [r3, #10]
 8012876:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012878:	4413      	add	r3, r2
 801287a:	b29a      	uxth	r2, r3
 801287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801287e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012882:	891a      	ldrh	r2, [r3, #8]
 8012884:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012886:	4413      	add	r3, r2
 8012888:	b29a      	uxth	r2, r3
 801288a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801288c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801288e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012890:	2b00      	cmp	r3, #0
 8012892:	d111      	bne.n	80128b8 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012898:	66da      	str	r2, [r3, #108]	; 0x6c
 801289a:	e010      	b.n	80128be <tcp_write+0x5ca>
 801289c:	0801ca0c 	.word	0x0801ca0c
 80128a0:	0801ccac 	.word	0x0801ccac
 80128a4:	0801ca60 	.word	0x0801ca60
 80128a8:	0801ccec 	.word	0x0801ccec
 80128ac:	0801ccfc 	.word	0x0801ccfc
 80128b0:	0801cd10 	.word	0x0801cd10
 80128b4:	0801cd48 	.word	0x0801cd48
  } else {
    last_unsent->next = queue;
 80128b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128bc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80128c2:	88fb      	ldrh	r3, [r7, #6]
 80128c4:	441a      	add	r2, r3
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80128d0:	88fb      	ldrh	r3, [r7, #6]
 80128d2:	1ad3      	subs	r3, r2, r3
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80128e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d00e      	beq.n	801290e <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d10a      	bne.n	801290e <tcp_write+0x61a>
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d106      	bne.n	801290e <tcp_write+0x61a>
 8012900:	4b2c      	ldr	r3, [pc, #176]	; (80129b4 <tcp_write+0x6c0>)
 8012902:	f240 3213 	movw	r2, #787	; 0x313
 8012906:	492c      	ldr	r1, [pc, #176]	; (80129b8 <tcp_write+0x6c4>)
 8012908:	482c      	ldr	r0, [pc, #176]	; (80129bc <tcp_write+0x6c8>)
 801290a:	f006 fd0f 	bl	801932c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801290e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012910:	2b00      	cmp	r3, #0
 8012912:	d016      	beq.n	8012942 <tcp_write+0x64e>
 8012914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d012      	beq.n	8012942 <tcp_write+0x64e>
 801291c:	797b      	ldrb	r3, [r7, #5]
 801291e:	f003 0302 	and.w	r3, r3, #2
 8012922:	2b00      	cmp	r3, #0
 8012924:	d10d      	bne.n	8012942 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	899b      	ldrh	r3, [r3, #12]
 801292c:	b29c      	uxth	r4, r3
 801292e:	2008      	movs	r0, #8
 8012930:	f7f9 fb1e 	bl	800bf70 <lwip_htons>
 8012934:	4603      	mov	r3, r0
 8012936:	461a      	mov	r2, r3
 8012938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	4322      	orrs	r2, r4
 801293e:	b292      	uxth	r2, r2
 8012940:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012942:	2300      	movs	r3, #0
 8012944:	e031      	b.n	80129aa <tcp_write+0x6b6>
          goto memerr;
 8012946:	bf00      	nop
 8012948:	e006      	b.n	8012958 <tcp_write+0x664>
            goto memerr;
 801294a:	bf00      	nop
 801294c:	e004      	b.n	8012958 <tcp_write+0x664>
        goto memerr;
 801294e:	bf00      	nop
 8012950:	e002      	b.n	8012958 <tcp_write+0x664>
        goto memerr;
 8012952:	bf00      	nop
 8012954:	e000      	b.n	8012958 <tcp_write+0x664>
      goto memerr;
 8012956:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	8b5b      	ldrh	r3, [r3, #26]
 801295c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012960:	b29a      	uxth	r2, r3
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012968:	2b00      	cmp	r3, #0
 801296a:	d002      	beq.n	8012972 <tcp_write+0x67e>
    pbuf_free(concat_p);
 801296c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801296e:	f7fa feeb 	bl	800d748 <pbuf_free>
  }
  if (queue != NULL) {
 8012972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012974:	2b00      	cmp	r3, #0
 8012976:	d002      	beq.n	801297e <tcp_write+0x68a>
    tcp_segs_free(queue);
 8012978:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801297a:	f7fc fb71 	bl	800f060 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012984:	2b00      	cmp	r3, #0
 8012986:	d00e      	beq.n	80129a6 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801298c:	2b00      	cmp	r3, #0
 801298e:	d10a      	bne.n	80129a6 <tcp_write+0x6b2>
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012994:	2b00      	cmp	r3, #0
 8012996:	d106      	bne.n	80129a6 <tcp_write+0x6b2>
 8012998:	4b06      	ldr	r3, [pc, #24]	; (80129b4 <tcp_write+0x6c0>)
 801299a:	f44f 724a 	mov.w	r2, #808	; 0x328
 801299e:	4906      	ldr	r1, [pc, #24]	; (80129b8 <tcp_write+0x6c4>)
 80129a0:	4806      	ldr	r0, [pc, #24]	; (80129bc <tcp_write+0x6c8>)
 80129a2:	f006 fcc3 	bl	801932c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80129a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	375c      	adds	r7, #92	; 0x5c
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd90      	pop	{r4, r7, pc}
 80129b2:	bf00      	nop
 80129b4:	0801ca0c 	.word	0x0801ca0c
 80129b8:	0801cd80 	.word	0x0801cd80
 80129bc:	0801ca60 	.word	0x0801ca60

080129c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80129c0:	b590      	push	{r4, r7, lr}
 80129c2:	b08b      	sub	sp, #44	; 0x2c
 80129c4:	af02      	add	r7, sp, #8
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	460b      	mov	r3, r1
 80129ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80129cc:	2300      	movs	r3, #0
 80129ce:	61fb      	str	r3, [r7, #28]
 80129d0:	2300      	movs	r3, #0
 80129d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80129d4:	2300      	movs	r3, #0
 80129d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d106      	bne.n	80129ec <tcp_split_unsent_seg+0x2c>
 80129de:	4b95      	ldr	r3, [pc, #596]	; (8012c34 <tcp_split_unsent_seg+0x274>)
 80129e0:	f240 324b 	movw	r2, #843	; 0x34b
 80129e4:	4994      	ldr	r1, [pc, #592]	; (8012c38 <tcp_split_unsent_seg+0x278>)
 80129e6:	4895      	ldr	r0, [pc, #596]	; (8012c3c <tcp_split_unsent_seg+0x27c>)
 80129e8:	f006 fca0 	bl	801932c <iprintf>

  useg = pcb->unsent;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d102      	bne.n	80129fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80129f8:	f04f 33ff 	mov.w	r3, #4294967295
 80129fc:	e116      	b.n	8012c2c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80129fe:	887b      	ldrh	r3, [r7, #2]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d109      	bne.n	8012a18 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012a04:	4b8b      	ldr	r3, [pc, #556]	; (8012c34 <tcp_split_unsent_seg+0x274>)
 8012a06:	f240 3253 	movw	r2, #851	; 0x353
 8012a0a:	498d      	ldr	r1, [pc, #564]	; (8012c40 <tcp_split_unsent_seg+0x280>)
 8012a0c:	488b      	ldr	r0, [pc, #556]	; (8012c3c <tcp_split_unsent_seg+0x27c>)
 8012a0e:	f006 fc8d 	bl	801932c <iprintf>
    return ERR_VAL;
 8012a12:	f06f 0305 	mvn.w	r3, #5
 8012a16:	e109      	b.n	8012c2c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	891b      	ldrh	r3, [r3, #8]
 8012a1c:	887a      	ldrh	r2, [r7, #2]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d301      	bcc.n	8012a26 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012a22:	2300      	movs	r3, #0
 8012a24:	e102      	b.n	8012c2c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a2a:	887a      	ldrh	r2, [r7, #2]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d906      	bls.n	8012a3e <tcp_split_unsent_seg+0x7e>
 8012a30:	4b80      	ldr	r3, [pc, #512]	; (8012c34 <tcp_split_unsent_seg+0x274>)
 8012a32:	f240 325b 	movw	r2, #859	; 0x35b
 8012a36:	4983      	ldr	r1, [pc, #524]	; (8012c44 <tcp_split_unsent_seg+0x284>)
 8012a38:	4880      	ldr	r0, [pc, #512]	; (8012c3c <tcp_split_unsent_seg+0x27c>)
 8012a3a:	f006 fc77 	bl	801932c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	891b      	ldrh	r3, [r3, #8]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d106      	bne.n	8012a54 <tcp_split_unsent_seg+0x94>
 8012a46:	4b7b      	ldr	r3, [pc, #492]	; (8012c34 <tcp_split_unsent_seg+0x274>)
 8012a48:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012a4c:	497e      	ldr	r1, [pc, #504]	; (8012c48 <tcp_split_unsent_seg+0x288>)
 8012a4e:	487b      	ldr	r0, [pc, #492]	; (8012c3c <tcp_split_unsent_seg+0x27c>)
 8012a50:	f006 fc6c 	bl	801932c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	7a9b      	ldrb	r3, [r3, #10]
 8012a58:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012a5a:	7bfb      	ldrb	r3, [r7, #15]
 8012a5c:	009b      	lsls	r3, r3, #2
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	f003 0304 	and.w	r3, r3, #4
 8012a64:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	891a      	ldrh	r2, [r3, #8]
 8012a6a:	887b      	ldrh	r3, [r7, #2]
 8012a6c:	1ad3      	subs	r3, r2, r3
 8012a6e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012a70:	7bbb      	ldrb	r3, [r7, #14]
 8012a72:	b29a      	uxth	r2, r3
 8012a74:	89bb      	ldrh	r3, [r7, #12]
 8012a76:	4413      	add	r3, r2
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a7e:	4619      	mov	r1, r3
 8012a80:	2036      	movs	r0, #54	; 0x36
 8012a82:	f7fa fb81 	bl	800d188 <pbuf_alloc>
 8012a86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f000 80b7 	beq.w	8012bfe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	891a      	ldrh	r2, [r3, #8]
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	891b      	ldrh	r3, [r3, #8]
 8012a9a:	1ad3      	subs	r3, r2, r3
 8012a9c:	b29a      	uxth	r2, r3
 8012a9e:	887b      	ldrh	r3, [r7, #2]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	6858      	ldr	r0, [r3, #4]
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	685a      	ldr	r2, [r3, #4]
 8012aac:	7bbb      	ldrb	r3, [r7, #14]
 8012aae:	18d1      	adds	r1, r2, r3
 8012ab0:	897b      	ldrh	r3, [r7, #10]
 8012ab2:	89ba      	ldrh	r2, [r7, #12]
 8012ab4:	f7fb f84e 	bl	800db54 <pbuf_copy_partial>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	461a      	mov	r2, r3
 8012abc:	89bb      	ldrh	r3, [r7, #12]
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	f040 809f 	bne.w	8012c02 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	899b      	ldrh	r3, [r3, #12]
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7f9 fa4f 	bl	800bf70 <lwip_htons>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	b2db      	uxtb	r3, r3
 8012ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ada:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012adc:	2300      	movs	r3, #0
 8012ade:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012ae0:	7efb      	ldrb	r3, [r7, #27]
 8012ae2:	f003 0308 	and.w	r3, r3, #8
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d007      	beq.n	8012afa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012aea:	7efb      	ldrb	r3, [r7, #27]
 8012aec:	f023 0308 	bic.w	r3, r3, #8
 8012af0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012af2:	7ebb      	ldrb	r3, [r7, #26]
 8012af4:	f043 0308 	orr.w	r3, r3, #8
 8012af8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012afa:	7efb      	ldrb	r3, [r7, #27]
 8012afc:	f003 0301 	and.w	r3, r3, #1
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d007      	beq.n	8012b14 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012b04:	7efb      	ldrb	r3, [r7, #27]
 8012b06:	f023 0301 	bic.w	r3, r3, #1
 8012b0a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012b0c:	7ebb      	ldrb	r3, [r7, #26]
 8012b0e:	f043 0301 	orr.w	r3, r3, #1
 8012b12:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	68db      	ldr	r3, [r3, #12]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7f9 fa3d 	bl	800bf9a <lwip_htonl>
 8012b20:	4602      	mov	r2, r0
 8012b22:	887b      	ldrh	r3, [r7, #2]
 8012b24:	18d1      	adds	r1, r2, r3
 8012b26:	7eba      	ldrb	r2, [r7, #26]
 8012b28:	7bfb      	ldrb	r3, [r7, #15]
 8012b2a:	9300      	str	r3, [sp, #0]
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	6939      	ldr	r1, [r7, #16]
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7ff fa4d 	bl	8011fd0 <tcp_create_segment>
 8012b36:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d063      	beq.n	8012c06 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7fa fe8e 	bl	800d864 <pbuf_clen>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b52:	1a9b      	subs	r3, r3, r2
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	6858      	ldr	r0, [r3, #4]
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	891a      	ldrh	r2, [r3, #8]
 8012b66:	89bb      	ldrh	r3, [r7, #12]
 8012b68:	1ad3      	subs	r3, r2, r3
 8012b6a:	b29b      	uxth	r3, r3
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	f7fa fc65 	bl	800d43c <pbuf_realloc>
  useg->len -= remainder;
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	891a      	ldrh	r2, [r3, #8]
 8012b76:	89bb      	ldrh	r3, [r7, #12]
 8012b78:	1ad3      	subs	r3, r2, r3
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	899b      	ldrh	r3, [r3, #12]
 8012b86:	b29c      	uxth	r4, r3
 8012b88:	7efb      	ldrb	r3, [r7, #27]
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7f9 f9ef 	bl	800bf70 <lwip_htons>
 8012b92:	4603      	mov	r3, r0
 8012b94:	461a      	mov	r2, r3
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	4322      	orrs	r2, r4
 8012b9c:	b292      	uxth	r2, r2
 8012b9e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	685b      	ldr	r3, [r3, #4]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7fa fe5d 	bl	800d864 <pbuf_clen>
 8012baa:	4603      	mov	r3, r0
 8012bac:	461a      	mov	r2, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bb4:	4413      	add	r3, r2
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fa fe4e 	bl	800d864 <pbuf_clen>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	461a      	mov	r2, r3
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bd2:	4413      	add	r3, r2
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	681a      	ldr	r2, [r3, #0]
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	69fa      	ldr	r2, [r7, #28]
 8012be8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d103      	bne.n	8012bfa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	e016      	b.n	8012c2c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012bfe:	bf00      	nop
 8012c00:	e002      	b.n	8012c08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c02:	bf00      	nop
 8012c04:	e000      	b.n	8012c08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c06:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d006      	beq.n	8012c1c <tcp_split_unsent_seg+0x25c>
 8012c0e:	4b09      	ldr	r3, [pc, #36]	; (8012c34 <tcp_split_unsent_seg+0x274>)
 8012c10:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012c14:	490d      	ldr	r1, [pc, #52]	; (8012c4c <tcp_split_unsent_seg+0x28c>)
 8012c16:	4809      	ldr	r0, [pc, #36]	; (8012c3c <tcp_split_unsent_seg+0x27c>)
 8012c18:	f006 fb88 	bl	801932c <iprintf>
  if (p != NULL) {
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d002      	beq.n	8012c28 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012c22:	6938      	ldr	r0, [r7, #16]
 8012c24:	f7fa fd90 	bl	800d748 <pbuf_free>
  }

  return ERR_MEM;
 8012c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3724      	adds	r7, #36	; 0x24
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd90      	pop	{r4, r7, pc}
 8012c34:	0801ca0c 	.word	0x0801ca0c
 8012c38:	0801cda0 	.word	0x0801cda0
 8012c3c:	0801ca60 	.word	0x0801ca60
 8012c40:	0801cdc4 	.word	0x0801cdc4
 8012c44:	0801cde8 	.word	0x0801cde8
 8012c48:	0801cdf8 	.word	0x0801cdf8
 8012c4c:	0801ce08 	.word	0x0801ce08

08012c50 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012c50:	b590      	push	{r4, r7, lr}
 8012c52:	b085      	sub	sp, #20
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d106      	bne.n	8012c6c <tcp_send_fin+0x1c>
 8012c5e:	4b21      	ldr	r3, [pc, #132]	; (8012ce4 <tcp_send_fin+0x94>)
 8012c60:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012c64:	4920      	ldr	r1, [pc, #128]	; (8012ce8 <tcp_send_fin+0x98>)
 8012c66:	4821      	ldr	r0, [pc, #132]	; (8012cec <tcp_send_fin+0x9c>)
 8012c68:	f006 fb60 	bl	801932c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d02e      	beq.n	8012cd2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c78:	60fb      	str	r3, [r7, #12]
 8012c7a:	e002      	b.n	8012c82 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d1f8      	bne.n	8012c7c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	899b      	ldrh	r3, [r3, #12]
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7f9 f96c 	bl	800bf70 <lwip_htons>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	f003 0307 	and.w	r3, r3, #7
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d116      	bne.n	8012cd2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	68db      	ldr	r3, [r3, #12]
 8012ca8:	899b      	ldrh	r3, [r3, #12]
 8012caa:	b29c      	uxth	r4, r3
 8012cac:	2001      	movs	r0, #1
 8012cae:	f7f9 f95f 	bl	800bf70 <lwip_htons>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	68db      	ldr	r3, [r3, #12]
 8012cba:	4322      	orrs	r2, r4
 8012cbc:	b292      	uxth	r2, r2
 8012cbe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	8b5b      	ldrh	r3, [r3, #26]
 8012cc4:	f043 0320 	orr.w	r3, r3, #32
 8012cc8:	b29a      	uxth	r2, r3
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	e004      	b.n	8012cdc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012cd2:	2101      	movs	r1, #1
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f000 f80b 	bl	8012cf0 <tcp_enqueue_flags>
 8012cda:	4603      	mov	r3, r0
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	3714      	adds	r7, #20
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd90      	pop	{r4, r7, pc}
 8012ce4:	0801ca0c 	.word	0x0801ca0c
 8012ce8:	0801ce14 	.word	0x0801ce14
 8012cec:	0801ca60 	.word	0x0801ca60

08012cf0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b08a      	sub	sp, #40	; 0x28
 8012cf4:	af02      	add	r7, sp, #8
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012d00:	2300      	movs	r3, #0
 8012d02:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012d04:	78fb      	ldrb	r3, [r7, #3]
 8012d06:	f003 0303 	and.w	r3, r3, #3
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d106      	bne.n	8012d1c <tcp_enqueue_flags+0x2c>
 8012d0e:	4b67      	ldr	r3, [pc, #412]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012d10:	f240 4212 	movw	r2, #1042	; 0x412
 8012d14:	4966      	ldr	r1, [pc, #408]	; (8012eb0 <tcp_enqueue_flags+0x1c0>)
 8012d16:	4867      	ldr	r0, [pc, #412]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012d18:	f006 fb08 	bl	801932c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d106      	bne.n	8012d30 <tcp_enqueue_flags+0x40>
 8012d22:	4b62      	ldr	r3, [pc, #392]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012d24:	f240 4213 	movw	r2, #1043	; 0x413
 8012d28:	4963      	ldr	r1, [pc, #396]	; (8012eb8 <tcp_enqueue_flags+0x1c8>)
 8012d2a:	4862      	ldr	r0, [pc, #392]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012d2c:	f006 fafe 	bl	801932c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012d30:	78fb      	ldrb	r3, [r7, #3]
 8012d32:	f003 0302 	and.w	r3, r3, #2
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d001      	beq.n	8012d3e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012d3e:	7ffb      	ldrb	r3, [r7, #31]
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	f003 0304 	and.w	r3, r3, #4
 8012d48:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d4a:	7dfb      	ldrb	r3, [r7, #23]
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d52:	4619      	mov	r1, r3
 8012d54:	2036      	movs	r0, #54	; 0x36
 8012d56:	f7fa fa17 	bl	800d188 <pbuf_alloc>
 8012d5a:	6138      	str	r0, [r7, #16]
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d109      	bne.n	8012d76 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	8b5b      	ldrh	r3, [r3, #26]
 8012d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012d70:	f04f 33ff 	mov.w	r3, #4294967295
 8012d74:	e095      	b.n	8012ea2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	895a      	ldrh	r2, [r3, #10]
 8012d7a:	7dfb      	ldrb	r3, [r7, #23]
 8012d7c:	b29b      	uxth	r3, r3
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d206      	bcs.n	8012d90 <tcp_enqueue_flags+0xa0>
 8012d82:	4b4a      	ldr	r3, [pc, #296]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012d84:	f240 423a 	movw	r2, #1082	; 0x43a
 8012d88:	494c      	ldr	r1, [pc, #304]	; (8012ebc <tcp_enqueue_flags+0x1cc>)
 8012d8a:	484a      	ldr	r0, [pc, #296]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012d8c:	f006 face 	bl	801932c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012d94:	78fa      	ldrb	r2, [r7, #3]
 8012d96:	7ffb      	ldrb	r3, [r7, #31]
 8012d98:	9300      	str	r3, [sp, #0]
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	6939      	ldr	r1, [r7, #16]
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f7ff f916 	bl	8011fd0 <tcp_create_segment>
 8012da4:	60f8      	str	r0, [r7, #12]
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d109      	bne.n	8012dc0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	8b5b      	ldrh	r3, [r3, #26]
 8012db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012db4:	b29a      	uxth	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012dba:	f04f 33ff 	mov.w	r3, #4294967295
 8012dbe:	e070      	b.n	8012ea2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	f003 0303 	and.w	r3, r3, #3
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d006      	beq.n	8012dda <tcp_enqueue_flags+0xea>
 8012dcc:	4b37      	ldr	r3, [pc, #220]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012dce:	f240 4242 	movw	r2, #1090	; 0x442
 8012dd2:	493b      	ldr	r1, [pc, #236]	; (8012ec0 <tcp_enqueue_flags+0x1d0>)
 8012dd4:	4837      	ldr	r0, [pc, #220]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012dd6:	f006 faa9 	bl	801932c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	891b      	ldrh	r3, [r3, #8]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d006      	beq.n	8012df0 <tcp_enqueue_flags+0x100>
 8012de2:	4b32      	ldr	r3, [pc, #200]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012de4:	f240 4243 	movw	r2, #1091	; 0x443
 8012de8:	4936      	ldr	r1, [pc, #216]	; (8012ec4 <tcp_enqueue_flags+0x1d4>)
 8012dea:	4832      	ldr	r0, [pc, #200]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012dec:	f006 fa9e 	bl	801932c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d103      	bne.n	8012e00 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	68fa      	ldr	r2, [r7, #12]
 8012dfc:	66da      	str	r2, [r3, #108]	; 0x6c
 8012dfe:	e00d      	b.n	8012e1c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e04:	61bb      	str	r3, [r7, #24]
 8012e06:	e002      	b.n	8012e0e <tcp_enqueue_flags+0x11e>
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	61bb      	str	r3, [r7, #24]
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d1f8      	bne.n	8012e08 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012e16:	69bb      	ldr	r3, [r7, #24]
 8012e18:	68fa      	ldr	r2, [r7, #12]
 8012e1a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012e24:	78fb      	ldrb	r3, [r7, #3]
 8012e26:	f003 0302 	and.w	r3, r3, #2
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d104      	bne.n	8012e38 <tcp_enqueue_flags+0x148>
 8012e2e:	78fb      	ldrb	r3, [r7, #3]
 8012e30:	f003 0301 	and.w	r3, r3, #1
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d004      	beq.n	8012e42 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e3c:	1c5a      	adds	r2, r3, #1
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012e42:	78fb      	ldrb	r3, [r7, #3]
 8012e44:	f003 0301 	and.w	r3, r3, #1
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d006      	beq.n	8012e5a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	8b5b      	ldrh	r3, [r3, #26]
 8012e50:	f043 0320 	orr.w	r3, r3, #32
 8012e54:	b29a      	uxth	r2, r3
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7fa fd00 	bl	800d864 <pbuf_clen>
 8012e64:	4603      	mov	r3, r0
 8012e66:	461a      	mov	r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e6e:	4413      	add	r3, r2
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d00e      	beq.n	8012ea0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d10a      	bne.n	8012ea0 <tcp_enqueue_flags+0x1b0>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d106      	bne.n	8012ea0 <tcp_enqueue_flags+0x1b0>
 8012e92:	4b06      	ldr	r3, [pc, #24]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012e94:	f240 4266 	movw	r2, #1126	; 0x466
 8012e98:	490b      	ldr	r1, [pc, #44]	; (8012ec8 <tcp_enqueue_flags+0x1d8>)
 8012e9a:	4806      	ldr	r0, [pc, #24]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012e9c:	f006 fa46 	bl	801932c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012ea0:	2300      	movs	r3, #0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3720      	adds	r7, #32
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	0801ca0c 	.word	0x0801ca0c
 8012eb0:	0801ce30 	.word	0x0801ce30
 8012eb4:	0801ca60 	.word	0x0801ca60
 8012eb8:	0801ce88 	.word	0x0801ce88
 8012ebc:	0801cea8 	.word	0x0801cea8
 8012ec0:	0801cee4 	.word	0x0801cee4
 8012ec4:	0801cefc 	.word	0x0801cefc
 8012ec8:	0801cf28 	.word	0x0801cf28

08012ecc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012ecc:	b5b0      	push	{r4, r5, r7, lr}
 8012ece:	b08a      	sub	sp, #40	; 0x28
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d106      	bne.n	8012ee8 <tcp_output+0x1c>
 8012eda:	4ba0      	ldr	r3, [pc, #640]	; (801315c <tcp_output+0x290>)
 8012edc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012ee0:	499f      	ldr	r1, [pc, #636]	; (8013160 <tcp_output+0x294>)
 8012ee2:	48a0      	ldr	r0, [pc, #640]	; (8013164 <tcp_output+0x298>)
 8012ee4:	f006 fa22 	bl	801932c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	7d1b      	ldrb	r3, [r3, #20]
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d106      	bne.n	8012efe <tcp_output+0x32>
 8012ef0:	4b9a      	ldr	r3, [pc, #616]	; (801315c <tcp_output+0x290>)
 8012ef2:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8012ef6:	499c      	ldr	r1, [pc, #624]	; (8013168 <tcp_output+0x29c>)
 8012ef8:	489a      	ldr	r0, [pc, #616]	; (8013164 <tcp_output+0x298>)
 8012efa:	f006 fa17 	bl	801932c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012efe:	4b9b      	ldr	r3, [pc, #620]	; (801316c <tcp_output+0x2a0>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d101      	bne.n	8012f0c <tcp_output+0x40>
    return ERR_OK;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	e1d2      	b.n	80132b2 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d203      	bcs.n	8012f24 <tcp_output+0x58>
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f22:	e002      	b.n	8012f2a <tcp_output+0x5e>
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f2a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f30:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d10b      	bne.n	8012f50 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	8b5b      	ldrh	r3, [r3, #26]
 8012f3c:	f003 0302 	and.w	r3, r3, #2
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	f000 81a9 	beq.w	8013298 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f000 fdd6 	bl	8013af8 <tcp_send_empty_ack>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	e1b0      	b.n	80132b2 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012f50:	6879      	ldr	r1, [r7, #4]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	3304      	adds	r3, #4
 8012f56:	461a      	mov	r2, r3
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7ff f81d 	bl	8011f98 <tcp_route>
 8012f5e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d102      	bne.n	8012f6c <tcp_output+0xa0>
    return ERR_RTE;
 8012f66:	f06f 0303 	mvn.w	r3, #3
 8012f6a:	e1a2      	b.n	80132b2 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d003      	beq.n	8012f7a <tcp_output+0xae>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d111      	bne.n	8012f9e <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d002      	beq.n	8012f86 <tcp_output+0xba>
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	3304      	adds	r3, #4
 8012f84:	e000      	b.n	8012f88 <tcp_output+0xbc>
 8012f86:	2300      	movs	r3, #0
 8012f88:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012f8a:	693b      	ldr	r3, [r7, #16]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d102      	bne.n	8012f96 <tcp_output+0xca>
      return ERR_RTE;
 8012f90:	f06f 0303 	mvn.w	r3, #3
 8012f94:	e18d      	b.n	80132b2 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	681a      	ldr	r2, [r3, #0]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa0:	68db      	ldr	r3, [r3, #12]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7f8 fff8 	bl	800bf9a <lwip_htonl>
 8012faa:	4602      	mov	r2, r0
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fb0:	1ad3      	subs	r3, r2, r3
 8012fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fb4:	8912      	ldrh	r2, [r2, #8]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	69ba      	ldr	r2, [r7, #24]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d227      	bcs.n	801300e <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	69bb      	ldr	r3, [r7, #24]
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	d114      	bne.n	8012ff6 <tcp_output+0x12a>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d110      	bne.n	8012ff6 <tcp_output+0x12a>
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d10b      	bne.n	8012ff6 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2201      	movs	r2, #1
 8012fea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	8b5b      	ldrh	r3, [r3, #26]
 8012ffa:	f003 0302 	and.w	r3, r3, #2
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	f000 814c 	beq.w	801329c <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f000 fd77 	bl	8013af8 <tcp_send_empty_ack>
 801300a:	4603      	mov	r3, r0
 801300c:	e151      	b.n	80132b2 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2200      	movs	r2, #0
 8013012:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801301a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801301c:	6a3b      	ldr	r3, [r7, #32]
 801301e:	2b00      	cmp	r3, #0
 8013020:	f000 811b 	beq.w	801325a <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8013024:	e002      	b.n	801302c <tcp_output+0x160>
 8013026:	6a3b      	ldr	r3, [r7, #32]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	623b      	str	r3, [r7, #32]
 801302c:	6a3b      	ldr	r3, [r7, #32]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d1f8      	bne.n	8013026 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013034:	e111      	b.n	801325a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013038:	68db      	ldr	r3, [r3, #12]
 801303a:	899b      	ldrh	r3, [r3, #12]
 801303c:	b29b      	uxth	r3, r3
 801303e:	4618      	mov	r0, r3
 8013040:	f7f8 ff96 	bl	800bf70 <lwip_htons>
 8013044:	4603      	mov	r3, r0
 8013046:	b2db      	uxtb	r3, r3
 8013048:	f003 0304 	and.w	r3, r3, #4
 801304c:	2b00      	cmp	r3, #0
 801304e:	d006      	beq.n	801305e <tcp_output+0x192>
 8013050:	4b42      	ldr	r3, [pc, #264]	; (801315c <tcp_output+0x290>)
 8013052:	f240 5237 	movw	r2, #1335	; 0x537
 8013056:	4946      	ldr	r1, [pc, #280]	; (8013170 <tcp_output+0x2a4>)
 8013058:	4842      	ldr	r0, [pc, #264]	; (8013164 <tcp_output+0x298>)
 801305a:	f006 f967 	bl	801932c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013062:	2b00      	cmp	r3, #0
 8013064:	d01f      	beq.n	80130a6 <tcp_output+0x1da>
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	8b5b      	ldrh	r3, [r3, #26]
 801306a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801306e:	2b00      	cmp	r3, #0
 8013070:	d119      	bne.n	80130a6 <tcp_output+0x1da>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013076:	2b00      	cmp	r3, #0
 8013078:	d00b      	beq.n	8013092 <tcp_output+0x1c6>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d110      	bne.n	80130a6 <tcp_output+0x1da>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013088:	891a      	ldrh	r2, [r3, #8]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801308e:	429a      	cmp	r2, r3
 8013090:	d209      	bcs.n	80130a6 <tcp_output+0x1da>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013098:	2b00      	cmp	r3, #0
 801309a:	d004      	beq.n	80130a6 <tcp_output+0x1da>
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130a2:	2b08      	cmp	r3, #8
 80130a4:	d901      	bls.n	80130aa <tcp_output+0x1de>
 80130a6:	2301      	movs	r3, #1
 80130a8:	e000      	b.n	80130ac <tcp_output+0x1e0>
 80130aa:	2300      	movs	r3, #0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d106      	bne.n	80130be <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	8b5b      	ldrh	r3, [r3, #26]
 80130b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f000 80e3 	beq.w	8013284 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	7d1b      	ldrb	r3, [r3, #20]
 80130c2:	2b02      	cmp	r3, #2
 80130c4:	d00d      	beq.n	80130e2 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80130c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	899b      	ldrh	r3, [r3, #12]
 80130cc:	b29c      	uxth	r4, r3
 80130ce:	2010      	movs	r0, #16
 80130d0:	f7f8 ff4e 	bl	800bf70 <lwip_htons>
 80130d4:	4603      	mov	r3, r0
 80130d6:	461a      	mov	r2, r3
 80130d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	4322      	orrs	r2, r4
 80130de:	b292      	uxth	r2, r2
 80130e0:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80130e2:	697a      	ldr	r2, [r7, #20]
 80130e4:	6879      	ldr	r1, [r7, #4]
 80130e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130e8:	f000 f908 	bl	80132fc <tcp_output_segment>
 80130ec:	4603      	mov	r3, r0
 80130ee:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80130f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d009      	beq.n	801310c <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	8b5b      	ldrh	r3, [r3, #26]
 80130fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013100:	b29a      	uxth	r2, r3
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	835a      	strh	r2, [r3, #26]
      return err;
 8013106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801310a:	e0d2      	b.n	80132b2 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310e:	681a      	ldr	r2, [r3, #0]
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	7d1b      	ldrb	r3, [r3, #20]
 8013118:	2b02      	cmp	r3, #2
 801311a:	d006      	beq.n	801312a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	8b5b      	ldrh	r3, [r3, #26]
 8013120:	f023 0303 	bic.w	r3, r3, #3
 8013124:	b29a      	uxth	r2, r3
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312c:	68db      	ldr	r3, [r3, #12]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	4618      	mov	r0, r3
 8013132:	f7f8 ff32 	bl	800bf9a <lwip_htonl>
 8013136:	4604      	mov	r4, r0
 8013138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313a:	891b      	ldrh	r3, [r3, #8]
 801313c:	461d      	mov	r5, r3
 801313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013140:	68db      	ldr	r3, [r3, #12]
 8013142:	899b      	ldrh	r3, [r3, #12]
 8013144:	b29b      	uxth	r3, r3
 8013146:	4618      	mov	r0, r3
 8013148:	f7f8 ff12 	bl	800bf70 <lwip_htons>
 801314c:	4603      	mov	r3, r0
 801314e:	b2db      	uxtb	r3, r3
 8013150:	f003 0303 	and.w	r3, r3, #3
 8013154:	2b00      	cmp	r3, #0
 8013156:	d00d      	beq.n	8013174 <tcp_output+0x2a8>
 8013158:	2301      	movs	r3, #1
 801315a:	e00c      	b.n	8013176 <tcp_output+0x2aa>
 801315c:	0801ca0c 	.word	0x0801ca0c
 8013160:	0801cf50 	.word	0x0801cf50
 8013164:	0801ca60 	.word	0x0801ca60
 8013168:	0801cf68 	.word	0x0801cf68
 801316c:	2000b148 	.word	0x2000b148
 8013170:	0801cf90 	.word	0x0801cf90
 8013174:	2300      	movs	r3, #0
 8013176:	442b      	add	r3, r5
 8013178:	4423      	add	r3, r4
 801317a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	1ad3      	subs	r3, r2, r3
 8013184:	2b00      	cmp	r3, #0
 8013186:	da02      	bge.n	801318e <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	68ba      	ldr	r2, [r7, #8]
 801318c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013190:	891b      	ldrh	r3, [r3, #8]
 8013192:	461c      	mov	r4, r3
 8013194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	899b      	ldrh	r3, [r3, #12]
 801319a:	b29b      	uxth	r3, r3
 801319c:	4618      	mov	r0, r3
 801319e:	f7f8 fee7 	bl	800bf70 <lwip_htons>
 80131a2:	4603      	mov	r3, r0
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	f003 0303 	and.w	r3, r3, #3
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d001      	beq.n	80131b2 <tcp_output+0x2e6>
 80131ae:	2301      	movs	r3, #1
 80131b0:	e000      	b.n	80131b4 <tcp_output+0x2e8>
 80131b2:	2300      	movs	r3, #0
 80131b4:	4423      	add	r3, r4
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d049      	beq.n	801324e <tcp_output+0x382>
      seg->next = NULL;
 80131ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131bc:	2200      	movs	r2, #0
 80131be:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d105      	bne.n	80131d4 <tcp_output+0x308>
        pcb->unacked = seg;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131cc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80131ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d0:	623b      	str	r3, [r7, #32]
 80131d2:	e03f      	b.n	8013254 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80131d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d6:	68db      	ldr	r3, [r3, #12]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	4618      	mov	r0, r3
 80131dc:	f7f8 fedd 	bl	800bf9a <lwip_htonl>
 80131e0:	4604      	mov	r4, r0
 80131e2:	6a3b      	ldr	r3, [r7, #32]
 80131e4:	68db      	ldr	r3, [r3, #12]
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7f8 fed6 	bl	800bf9a <lwip_htonl>
 80131ee:	4603      	mov	r3, r0
 80131f0:	1ae3      	subs	r3, r4, r3
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	da24      	bge.n	8013240 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	3370      	adds	r3, #112	; 0x70
 80131fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80131fc:	e002      	b.n	8013204 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d011      	beq.n	8013230 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	4618      	mov	r0, r3
 8013216:	f7f8 fec0 	bl	800bf9a <lwip_htonl>
 801321a:	4604      	mov	r4, r0
 801321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321e:	68db      	ldr	r3, [r3, #12]
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	4618      	mov	r0, r3
 8013224:	f7f8 feb9 	bl	800bf9a <lwip_htonl>
 8013228:	4603      	mov	r3, r0
 801322a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801322c:	2b00      	cmp	r3, #0
 801322e:	dbe6      	blt.n	80131fe <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	681a      	ldr	r2, [r3, #0]
 8013234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013236:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013238:	69fb      	ldr	r3, [r7, #28]
 801323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801323c:	601a      	str	r2, [r3, #0]
 801323e:	e009      	b.n	8013254 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013240:	6a3b      	ldr	r3, [r7, #32]
 8013242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013244:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013246:	6a3b      	ldr	r3, [r7, #32]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	623b      	str	r3, [r7, #32]
 801324c:	e002      	b.n	8013254 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801324e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013250:	f7fb ff1a 	bl	800f088 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013258:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325c:	2b00      	cmp	r3, #0
 801325e:	d012      	beq.n	8013286 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013262:	68db      	ldr	r3, [r3, #12]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	4618      	mov	r0, r3
 8013268:	f7f8 fe97 	bl	800bf9a <lwip_htonl>
 801326c:	4602      	mov	r2, r0
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013272:	1ad3      	subs	r3, r2, r3
 8013274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013276:	8912      	ldrh	r2, [r2, #8]
 8013278:	4413      	add	r3, r2
  while (seg != NULL &&
 801327a:	69ba      	ldr	r2, [r7, #24]
 801327c:	429a      	cmp	r2, r3
 801327e:	f4bf aeda 	bcs.w	8013036 <tcp_output+0x16a>
 8013282:	e000      	b.n	8013286 <tcp_output+0x3ba>
      break;
 8013284:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801328a:	2b00      	cmp	r3, #0
 801328c:	d108      	bne.n	80132a0 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2200      	movs	r2, #0
 8013292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013296:	e004      	b.n	80132a2 <tcp_output+0x3d6>
    goto output_done;
 8013298:	bf00      	nop
 801329a:	e002      	b.n	80132a2 <tcp_output+0x3d6>
    goto output_done;
 801329c:	bf00      	nop
 801329e:	e000      	b.n	80132a2 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80132a0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	8b5b      	ldrh	r3, [r3, #26]
 80132a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3728      	adds	r7, #40	; 0x28
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bdb0      	pop	{r4, r5, r7, pc}
 80132ba:	bf00      	nop

080132bc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b082      	sub	sp, #8
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d106      	bne.n	80132d8 <tcp_output_segment_busy+0x1c>
 80132ca:	4b09      	ldr	r3, [pc, #36]	; (80132f0 <tcp_output_segment_busy+0x34>)
 80132cc:	f240 529a 	movw	r2, #1434	; 0x59a
 80132d0:	4908      	ldr	r1, [pc, #32]	; (80132f4 <tcp_output_segment_busy+0x38>)
 80132d2:	4809      	ldr	r0, [pc, #36]	; (80132f8 <tcp_output_segment_busy+0x3c>)
 80132d4:	f006 f82a 	bl	801932c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	685b      	ldr	r3, [r3, #4]
 80132dc:	7b9b      	ldrb	r3, [r3, #14]
 80132de:	2b01      	cmp	r3, #1
 80132e0:	d001      	beq.n	80132e6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80132e2:	2301      	movs	r3, #1
 80132e4:	e000      	b.n	80132e8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80132e6:	2300      	movs	r3, #0
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3708      	adds	r7, #8
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}
 80132f0:	0801ca0c 	.word	0x0801ca0c
 80132f4:	0801cfa8 	.word	0x0801cfa8
 80132f8:	0801ca60 	.word	0x0801ca60

080132fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80132fc:	b5b0      	push	{r4, r5, r7, lr}
 80132fe:	b08c      	sub	sp, #48	; 0x30
 8013300:	af04      	add	r7, sp, #16
 8013302:	60f8      	str	r0, [r7, #12]
 8013304:	60b9      	str	r1, [r7, #8]
 8013306:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d106      	bne.n	801331c <tcp_output_segment+0x20>
 801330e:	4b64      	ldr	r3, [pc, #400]	; (80134a0 <tcp_output_segment+0x1a4>)
 8013310:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013314:	4963      	ldr	r1, [pc, #396]	; (80134a4 <tcp_output_segment+0x1a8>)
 8013316:	4864      	ldr	r0, [pc, #400]	; (80134a8 <tcp_output_segment+0x1ac>)
 8013318:	f006 f808 	bl	801932c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d106      	bne.n	8013330 <tcp_output_segment+0x34>
 8013322:	4b5f      	ldr	r3, [pc, #380]	; (80134a0 <tcp_output_segment+0x1a4>)
 8013324:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013328:	4960      	ldr	r1, [pc, #384]	; (80134ac <tcp_output_segment+0x1b0>)
 801332a:	485f      	ldr	r0, [pc, #380]	; (80134a8 <tcp_output_segment+0x1ac>)
 801332c:	f005 fffe 	bl	801932c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d106      	bne.n	8013344 <tcp_output_segment+0x48>
 8013336:	4b5a      	ldr	r3, [pc, #360]	; (80134a0 <tcp_output_segment+0x1a4>)
 8013338:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801333c:	495c      	ldr	r1, [pc, #368]	; (80134b0 <tcp_output_segment+0x1b4>)
 801333e:	485a      	ldr	r0, [pc, #360]	; (80134a8 <tcp_output_segment+0x1ac>)
 8013340:	f005 fff4 	bl	801932c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013344:	68f8      	ldr	r0, [r7, #12]
 8013346:	f7ff ffb9 	bl	80132bc <tcp_output_segment_busy>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d001      	beq.n	8013354 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013350:	2300      	movs	r3, #0
 8013352:	e0a0      	b.n	8013496 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013354:	68bb      	ldr	r3, [r7, #8]
 8013356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	68dc      	ldr	r4, [r3, #12]
 801335c:	4610      	mov	r0, r2
 801335e:	f7f8 fe1c 	bl	800bf9a <lwip_htonl>
 8013362:	4603      	mov	r3, r0
 8013364:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	68dc      	ldr	r4, [r3, #12]
 801336e:	4610      	mov	r0, r2
 8013370:	f7f8 fdfe 	bl	800bf70 <lwip_htons>
 8013374:	4603      	mov	r3, r0
 8013376:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801337c:	68ba      	ldr	r2, [r7, #8]
 801337e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013380:	441a      	add	r2, r3
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	68db      	ldr	r3, [r3, #12]
 801338a:	3314      	adds	r3, #20
 801338c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	7a9b      	ldrb	r3, [r3, #10]
 8013392:	f003 0301 	and.w	r3, r3, #1
 8013396:	2b00      	cmp	r3, #0
 8013398:	d015      	beq.n	80133c6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	3304      	adds	r3, #4
 801339e:	461a      	mov	r2, r3
 80133a0:	6879      	ldr	r1, [r7, #4]
 80133a2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80133a6:	f7fc fa33 	bl	800f810 <tcp_eff_send_mss_netif>
 80133aa:	4603      	mov	r3, r0
 80133ac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80133ae:	8b7b      	ldrh	r3, [r7, #26]
 80133b0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7f8 fdf0 	bl	800bf9a <lwip_htonl>
 80133ba:	4602      	mov	r2, r0
 80133bc:	69fb      	ldr	r3, [r7, #28]
 80133be:	601a      	str	r2, [r3, #0]
    opts += 1;
 80133c0:	69fb      	ldr	r3, [r7, #28]
 80133c2:	3304      	adds	r3, #4
 80133c4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	da02      	bge.n	80133d6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	2200      	movs	r2, #0
 80133d4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d10c      	bne.n	80133f8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80133de:	4b35      	ldr	r3, [pc, #212]	; (80134b4 <tcp_output_segment+0x1b8>)
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	68db      	ldr	r3, [r3, #12]
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7f8 fdd4 	bl	800bf9a <lwip_htonl>
 80133f2:	4602      	mov	r2, r0
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	68db      	ldr	r3, [r3, #12]
 80133fc:	461a      	mov	r2, r3
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	1ad3      	subs	r3, r2, r3
 8013406:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	685b      	ldr	r3, [r3, #4]
 801340c:	8959      	ldrh	r1, [r3, #10]
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	685b      	ldr	r3, [r3, #4]
 8013412:	8b3a      	ldrh	r2, [r7, #24]
 8013414:	1a8a      	subs	r2, r1, r2
 8013416:	b292      	uxth	r2, r2
 8013418:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	8919      	ldrh	r1, [r3, #8]
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	8b3a      	ldrh	r2, [r7, #24]
 8013426:	1a8a      	subs	r2, r1, r2
 8013428:	b292      	uxth	r2, r2
 801342a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	68fa      	ldr	r2, [r7, #12]
 8013432:	68d2      	ldr	r2, [r2, #12]
 8013434:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	68db      	ldr	r3, [r3, #12]
 801343a:	2200      	movs	r2, #0
 801343c:	741a      	strb	r2, [r3, #16]
 801343e:	2200      	movs	r2, #0
 8013440:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	68db      	ldr	r3, [r3, #12]
 8013446:	f103 0214 	add.w	r2, r3, #20
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	7a9b      	ldrb	r3, [r3, #10]
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	f003 0304 	and.w	r3, r3, #4
 8013454:	4413      	add	r3, r2
 8013456:	69fa      	ldr	r2, [r7, #28]
 8013458:	429a      	cmp	r2, r3
 801345a:	d006      	beq.n	801346a <tcp_output_segment+0x16e>
 801345c:	4b10      	ldr	r3, [pc, #64]	; (80134a0 <tcp_output_segment+0x1a4>)
 801345e:	f240 621c 	movw	r2, #1564	; 0x61c
 8013462:	4915      	ldr	r1, [pc, #84]	; (80134b8 <tcp_output_segment+0x1bc>)
 8013464:	4810      	ldr	r0, [pc, #64]	; (80134a8 <tcp_output_segment+0x1ac>)
 8013466:	f005 ff61 	bl	801932c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	6858      	ldr	r0, [r3, #4]
 801346e:	68b9      	ldr	r1, [r7, #8]
 8013470:	68bb      	ldr	r3, [r7, #8]
 8013472:	1d1c      	adds	r4, r3, #4
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	7add      	ldrb	r5, [r3, #11]
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	7a9b      	ldrb	r3, [r3, #10]
 801347c:	687a      	ldr	r2, [r7, #4]
 801347e:	9202      	str	r2, [sp, #8]
 8013480:	2206      	movs	r2, #6
 8013482:	9201      	str	r2, [sp, #4]
 8013484:	9300      	str	r3, [sp, #0]
 8013486:	462b      	mov	r3, r5
 8013488:	4622      	mov	r2, r4
 801348a:	f004 fce9 	bl	8017e60 <ip4_output_if>
 801348e:	4603      	mov	r3, r0
 8013490:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013492:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013496:	4618      	mov	r0, r3
 8013498:	3720      	adds	r7, #32
 801349a:	46bd      	mov	sp, r7
 801349c:	bdb0      	pop	{r4, r5, r7, pc}
 801349e:	bf00      	nop
 80134a0:	0801ca0c 	.word	0x0801ca0c
 80134a4:	0801cfd0 	.word	0x0801cfd0
 80134a8:	0801ca60 	.word	0x0801ca60
 80134ac:	0801cff0 	.word	0x0801cff0
 80134b0:	0801d010 	.word	0x0801d010
 80134b4:	2000b138 	.word	0x2000b138
 80134b8:	0801d034 	.word	0x0801d034

080134bc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80134bc:	b5b0      	push	{r4, r5, r7, lr}
 80134be:	b084      	sub	sp, #16
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d106      	bne.n	80134d8 <tcp_rexmit_rto_prepare+0x1c>
 80134ca:	4b31      	ldr	r3, [pc, #196]	; (8013590 <tcp_rexmit_rto_prepare+0xd4>)
 80134cc:	f240 6263 	movw	r2, #1635	; 0x663
 80134d0:	4930      	ldr	r1, [pc, #192]	; (8013594 <tcp_rexmit_rto_prepare+0xd8>)
 80134d2:	4831      	ldr	r0, [pc, #196]	; (8013598 <tcp_rexmit_rto_prepare+0xdc>)
 80134d4:	f005 ff2a 	bl	801932c <iprintf>

  if (pcb->unacked == NULL) {
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d102      	bne.n	80134e6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80134e0:	f06f 0305 	mvn.w	r3, #5
 80134e4:	e050      	b.n	8013588 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134ea:	60fb      	str	r3, [r7, #12]
 80134ec:	e00b      	b.n	8013506 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80134ee:	68f8      	ldr	r0, [r7, #12]
 80134f0:	f7ff fee4 	bl	80132bc <tcp_output_segment_busy>
 80134f4:	4603      	mov	r3, r0
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d002      	beq.n	8013500 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80134fa:	f06f 0305 	mvn.w	r3, #5
 80134fe:	e043      	b.n	8013588 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	60fb      	str	r3, [r7, #12]
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d1ef      	bne.n	80134ee <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	f7ff fed4 	bl	80132bc <tcp_output_segment_busy>
 8013514:	4603      	mov	r3, r0
 8013516:	2b00      	cmp	r3, #0
 8013518:	d002      	beq.n	8013520 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801351a:	f06f 0305 	mvn.w	r3, #5
 801351e:	e033      	b.n	8013588 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2200      	movs	r2, #0
 8013534:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	8b5b      	ldrh	r3, [r3, #26]
 801353a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801353e:	b29a      	uxth	r2, r3
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	4618      	mov	r0, r3
 801354c:	f7f8 fd25 	bl	800bf9a <lwip_htonl>
 8013550:	4604      	mov	r4, r0
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	891b      	ldrh	r3, [r3, #8]
 8013556:	461d      	mov	r5, r3
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	68db      	ldr	r3, [r3, #12]
 801355c:	899b      	ldrh	r3, [r3, #12]
 801355e:	b29b      	uxth	r3, r3
 8013560:	4618      	mov	r0, r3
 8013562:	f7f8 fd05 	bl	800bf70 <lwip_htons>
 8013566:	4603      	mov	r3, r0
 8013568:	b2db      	uxtb	r3, r3
 801356a:	f003 0303 	and.w	r3, r3, #3
 801356e:	2b00      	cmp	r3, #0
 8013570:	d001      	beq.n	8013576 <tcp_rexmit_rto_prepare+0xba>
 8013572:	2301      	movs	r3, #1
 8013574:	e000      	b.n	8013578 <tcp_rexmit_rto_prepare+0xbc>
 8013576:	2300      	movs	r3, #0
 8013578:	442b      	add	r3, r5
 801357a:	18e2      	adds	r2, r4, r3
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2200      	movs	r2, #0
 8013584:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013586:	2300      	movs	r3, #0
}
 8013588:	4618      	mov	r0, r3
 801358a:	3710      	adds	r7, #16
 801358c:	46bd      	mov	sp, r7
 801358e:	bdb0      	pop	{r4, r5, r7, pc}
 8013590:	0801ca0c 	.word	0x0801ca0c
 8013594:	0801d048 	.word	0x0801d048
 8013598:	0801ca60 	.word	0x0801ca60

0801359c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d106      	bne.n	80135b8 <tcp_rexmit_rto_commit+0x1c>
 80135aa:	4b0d      	ldr	r3, [pc, #52]	; (80135e0 <tcp_rexmit_rto_commit+0x44>)
 80135ac:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80135b0:	490c      	ldr	r1, [pc, #48]	; (80135e4 <tcp_rexmit_rto_commit+0x48>)
 80135b2:	480d      	ldr	r0, [pc, #52]	; (80135e8 <tcp_rexmit_rto_commit+0x4c>)
 80135b4:	f005 feba 	bl	801932c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80135be:	2bff      	cmp	r3, #255	; 0xff
 80135c0:	d007      	beq.n	80135d2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80135c8:	3301      	adds	r3, #1
 80135ca:	b2da      	uxtb	r2, r3
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f7ff fc7a 	bl	8012ecc <tcp_output>
}
 80135d8:	bf00      	nop
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	0801ca0c 	.word	0x0801ca0c
 80135e4:	0801d06c 	.word	0x0801d06c
 80135e8:	0801ca60 	.word	0x0801ca60

080135ec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b082      	sub	sp, #8
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d106      	bne.n	8013608 <tcp_rexmit_rto+0x1c>
 80135fa:	4b0a      	ldr	r3, [pc, #40]	; (8013624 <tcp_rexmit_rto+0x38>)
 80135fc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013600:	4909      	ldr	r1, [pc, #36]	; (8013628 <tcp_rexmit_rto+0x3c>)
 8013602:	480a      	ldr	r0, [pc, #40]	; (801362c <tcp_rexmit_rto+0x40>)
 8013604:	f005 fe92 	bl	801932c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7ff ff57 	bl	80134bc <tcp_rexmit_rto_prepare>
 801360e:	4603      	mov	r3, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	d102      	bne.n	801361a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f7ff ffc1 	bl	801359c <tcp_rexmit_rto_commit>
  }
}
 801361a:	bf00      	nop
 801361c:	3708      	adds	r7, #8
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	0801ca0c 	.word	0x0801ca0c
 8013628:	0801d090 	.word	0x0801d090
 801362c:	0801ca60 	.word	0x0801ca60

08013630 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013630:	b590      	push	{r4, r7, lr}
 8013632:	b085      	sub	sp, #20
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d106      	bne.n	801364c <tcp_rexmit+0x1c>
 801363e:	4b2f      	ldr	r3, [pc, #188]	; (80136fc <tcp_rexmit+0xcc>)
 8013640:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013644:	492e      	ldr	r1, [pc, #184]	; (8013700 <tcp_rexmit+0xd0>)
 8013646:	482f      	ldr	r0, [pc, #188]	; (8013704 <tcp_rexmit+0xd4>)
 8013648:	f005 fe70 	bl	801932c <iprintf>

  if (pcb->unacked == NULL) {
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013650:	2b00      	cmp	r3, #0
 8013652:	d102      	bne.n	801365a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013654:	f06f 0305 	mvn.w	r3, #5
 8013658:	e04c      	b.n	80136f4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801365e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013660:	68b8      	ldr	r0, [r7, #8]
 8013662:	f7ff fe2b 	bl	80132bc <tcp_output_segment_busy>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d002      	beq.n	8013672 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801366c:	f06f 0305 	mvn.w	r3, #5
 8013670:	e040      	b.n	80136f4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	681a      	ldr	r2, [r3, #0]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	336c      	adds	r3, #108	; 0x6c
 801367e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013680:	e002      	b.n	8013688 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d011      	beq.n	80136b4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	68db      	ldr	r3, [r3, #12]
 8013696:	685b      	ldr	r3, [r3, #4]
 8013698:	4618      	mov	r0, r3
 801369a:	f7f8 fc7e 	bl	800bf9a <lwip_htonl>
 801369e:	4604      	mov	r4, r0
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	68db      	ldr	r3, [r3, #12]
 80136a4:	685b      	ldr	r3, [r3, #4]
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7f8 fc77 	bl	800bf9a <lwip_htonl>
 80136ac:	4603      	mov	r3, r0
 80136ae:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	dbe6      	blt.n	8013682 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	681a      	ldr	r2, [r3, #0]
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	68ba      	ldr	r2, [r7, #8]
 80136c0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d103      	bne.n	80136d2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	2200      	movs	r2, #0
 80136ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136d8:	2bff      	cmp	r3, #255	; 0xff
 80136da:	d007      	beq.n	80136ec <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136e2:	3301      	adds	r3, #1
 80136e4:	b2da      	uxtb	r2, r3
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2200      	movs	r2, #0
 80136f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80136f2:	2300      	movs	r3, #0
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3714      	adds	r7, #20
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd90      	pop	{r4, r7, pc}
 80136fc:	0801ca0c 	.word	0x0801ca0c
 8013700:	0801d0ac 	.word	0x0801d0ac
 8013704:	0801ca60 	.word	0x0801ca60

08013708 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b082      	sub	sp, #8
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d106      	bne.n	8013724 <tcp_rexmit_fast+0x1c>
 8013716:	4b2e      	ldr	r3, [pc, #184]	; (80137d0 <tcp_rexmit_fast+0xc8>)
 8013718:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801371c:	492d      	ldr	r1, [pc, #180]	; (80137d4 <tcp_rexmit_fast+0xcc>)
 801371e:	482e      	ldr	r0, [pc, #184]	; (80137d8 <tcp_rexmit_fast+0xd0>)
 8013720:	f005 fe04 	bl	801932c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013728:	2b00      	cmp	r3, #0
 801372a:	d04d      	beq.n	80137c8 <tcp_rexmit_fast+0xc0>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	8b5b      	ldrh	r3, [r3, #26]
 8013730:	f003 0304 	and.w	r3, r3, #4
 8013734:	2b00      	cmp	r3, #0
 8013736:	d147      	bne.n	80137c8 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013738:	6878      	ldr	r0, [r7, #4]
 801373a:	f7ff ff79 	bl	8013630 <tcp_rexmit>
 801373e:	4603      	mov	r3, r0
 8013740:	2b00      	cmp	r3, #0
 8013742:	d141      	bne.n	80137c8 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013750:	429a      	cmp	r2, r3
 8013752:	d207      	bcs.n	8013764 <tcp_rexmit_fast+0x5c>
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801375a:	0fda      	lsrs	r2, r3, #31
 801375c:	4413      	add	r3, r2
 801375e:	105b      	asrs	r3, r3, #1
 8013760:	b29b      	uxth	r3, r3
 8013762:	e006      	b.n	8013772 <tcp_rexmit_fast+0x6a>
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801376a:	0fda      	lsrs	r2, r3, #31
 801376c:	4413      	add	r3, r2
 801376e:	105b      	asrs	r3, r3, #1
 8013770:	b29b      	uxth	r3, r3
 8013772:	687a      	ldr	r2, [r7, #4]
 8013774:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801377e:	461a      	mov	r2, r3
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013784:	005b      	lsls	r3, r3, #1
 8013786:	429a      	cmp	r2, r3
 8013788:	d206      	bcs.n	8013798 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801378e:	005b      	lsls	r3, r3, #1
 8013790:	b29a      	uxth	r2, r3
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137a2:	4619      	mov	r1, r3
 80137a4:	0049      	lsls	r1, r1, #1
 80137a6:	440b      	add	r3, r1
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	4413      	add	r3, r2
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	8b5b      	ldrh	r3, [r3, #26]
 80137b8:	f043 0304 	orr.w	r3, r3, #4
 80137bc:	b29a      	uxth	r2, r3
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2200      	movs	r2, #0
 80137c6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80137c8:	bf00      	nop
 80137ca:	3708      	adds	r7, #8
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}
 80137d0:	0801ca0c 	.word	0x0801ca0c
 80137d4:	0801d0c4 	.word	0x0801d0c4
 80137d8:	0801ca60 	.word	0x0801ca60

080137dc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b086      	sub	sp, #24
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	607b      	str	r3, [r7, #4]
 80137e6:	460b      	mov	r3, r1
 80137e8:	817b      	strh	r3, [r7, #10]
 80137ea:	4613      	mov	r3, r2
 80137ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80137ee:	897a      	ldrh	r2, [r7, #10]
 80137f0:	893b      	ldrh	r3, [r7, #8]
 80137f2:	4413      	add	r3, r2
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	3314      	adds	r3, #20
 80137f8:	b29b      	uxth	r3, r3
 80137fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80137fe:	4619      	mov	r1, r3
 8013800:	2022      	movs	r0, #34	; 0x22
 8013802:	f7f9 fcc1 	bl	800d188 <pbuf_alloc>
 8013806:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d04e      	beq.n	80138ac <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	895b      	ldrh	r3, [r3, #10]
 8013812:	461a      	mov	r2, r3
 8013814:	897b      	ldrh	r3, [r7, #10]
 8013816:	3314      	adds	r3, #20
 8013818:	429a      	cmp	r2, r3
 801381a:	da06      	bge.n	801382a <tcp_output_alloc_header_common+0x4e>
 801381c:	4b26      	ldr	r3, [pc, #152]	; (80138b8 <tcp_output_alloc_header_common+0xdc>)
 801381e:	f240 7224 	movw	r2, #1828	; 0x724
 8013822:	4926      	ldr	r1, [pc, #152]	; (80138bc <tcp_output_alloc_header_common+0xe0>)
 8013824:	4826      	ldr	r0, [pc, #152]	; (80138c0 <tcp_output_alloc_header_common+0xe4>)
 8013826:	f005 fd81 	bl	801932c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	685b      	ldr	r3, [r3, #4]
 801382e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013830:	8c3b      	ldrh	r3, [r7, #32]
 8013832:	4618      	mov	r0, r3
 8013834:	f7f8 fb9c 	bl	800bf70 <lwip_htons>
 8013838:	4603      	mov	r3, r0
 801383a:	461a      	mov	r2, r3
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013842:	4618      	mov	r0, r3
 8013844:	f7f8 fb94 	bl	800bf70 <lwip_htons>
 8013848:	4603      	mov	r3, r0
 801384a:	461a      	mov	r2, r3
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013856:	68f8      	ldr	r0, [r7, #12]
 8013858:	f7f8 fb9f 	bl	800bf9a <lwip_htonl>
 801385c:	4602      	mov	r2, r0
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013862:	897b      	ldrh	r3, [r7, #10]
 8013864:	089b      	lsrs	r3, r3, #2
 8013866:	b29b      	uxth	r3, r3
 8013868:	3305      	adds	r3, #5
 801386a:	b29b      	uxth	r3, r3
 801386c:	031b      	lsls	r3, r3, #12
 801386e:	b29a      	uxth	r2, r3
 8013870:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013874:	b29b      	uxth	r3, r3
 8013876:	4313      	orrs	r3, r2
 8013878:	b29b      	uxth	r3, r3
 801387a:	4618      	mov	r0, r3
 801387c:	f7f8 fb78 	bl	800bf70 <lwip_htons>
 8013880:	4603      	mov	r3, r0
 8013882:	461a      	mov	r2, r3
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013888:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801388a:	4618      	mov	r0, r3
 801388c:	f7f8 fb70 	bl	800bf70 <lwip_htons>
 8013890:	4603      	mov	r3, r0
 8013892:	461a      	mov	r2, r3
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	2200      	movs	r2, #0
 801389c:	741a      	strb	r2, [r3, #16]
 801389e:	2200      	movs	r2, #0
 80138a0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	2200      	movs	r2, #0
 80138a6:	749a      	strb	r2, [r3, #18]
 80138a8:	2200      	movs	r2, #0
 80138aa:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80138ac:	697b      	ldr	r3, [r7, #20]
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3718      	adds	r7, #24
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
 80138b6:	bf00      	nop
 80138b8:	0801ca0c 	.word	0x0801ca0c
 80138bc:	0801d0e4 	.word	0x0801d0e4
 80138c0:	0801ca60 	.word	0x0801ca60

080138c4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80138c4:	b5b0      	push	{r4, r5, r7, lr}
 80138c6:	b08a      	sub	sp, #40	; 0x28
 80138c8:	af04      	add	r7, sp, #16
 80138ca:	60f8      	str	r0, [r7, #12]
 80138cc:	607b      	str	r3, [r7, #4]
 80138ce:	460b      	mov	r3, r1
 80138d0:	817b      	strh	r3, [r7, #10]
 80138d2:	4613      	mov	r3, r2
 80138d4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d106      	bne.n	80138ea <tcp_output_alloc_header+0x26>
 80138dc:	4b15      	ldr	r3, [pc, #84]	; (8013934 <tcp_output_alloc_header+0x70>)
 80138de:	f240 7242 	movw	r2, #1858	; 0x742
 80138e2:	4915      	ldr	r1, [pc, #84]	; (8013938 <tcp_output_alloc_header+0x74>)
 80138e4:	4815      	ldr	r0, [pc, #84]	; (801393c <tcp_output_alloc_header+0x78>)
 80138e6:	f005 fd21 	bl	801932c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	8adb      	ldrh	r3, [r3, #22]
 80138f2:	68fa      	ldr	r2, [r7, #12]
 80138f4:	8b12      	ldrh	r2, [r2, #24]
 80138f6:	68f9      	ldr	r1, [r7, #12]
 80138f8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80138fa:	893d      	ldrh	r5, [r7, #8]
 80138fc:	897c      	ldrh	r4, [r7, #10]
 80138fe:	9103      	str	r1, [sp, #12]
 8013900:	2110      	movs	r1, #16
 8013902:	9102      	str	r1, [sp, #8]
 8013904:	9201      	str	r2, [sp, #4]
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	462a      	mov	r2, r5
 801390c:	4621      	mov	r1, r4
 801390e:	f7ff ff65 	bl	80137dc <tcp_output_alloc_header_common>
 8013912:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d006      	beq.n	8013928 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801391e:	68fa      	ldr	r2, [r7, #12]
 8013920:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013922:	441a      	add	r2, r3
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013928:	697b      	ldr	r3, [r7, #20]
}
 801392a:	4618      	mov	r0, r3
 801392c:	3718      	adds	r7, #24
 801392e:	46bd      	mov	sp, r7
 8013930:	bdb0      	pop	{r4, r5, r7, pc}
 8013932:	bf00      	nop
 8013934:	0801ca0c 	.word	0x0801ca0c
 8013938:	0801d114 	.word	0x0801d114
 801393c:	0801ca60 	.word	0x0801ca60

08013940 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b088      	sub	sp, #32
 8013944:	af00      	add	r7, sp, #0
 8013946:	60f8      	str	r0, [r7, #12]
 8013948:	60b9      	str	r1, [r7, #8]
 801394a:	4611      	mov	r1, r2
 801394c:	461a      	mov	r2, r3
 801394e:	460b      	mov	r3, r1
 8013950:	71fb      	strb	r3, [r7, #7]
 8013952:	4613      	mov	r3, r2
 8013954:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013956:	2300      	movs	r3, #0
 8013958:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d106      	bne.n	801396e <tcp_output_fill_options+0x2e>
 8013960:	4b13      	ldr	r3, [pc, #76]	; (80139b0 <tcp_output_fill_options+0x70>)
 8013962:	f240 7256 	movw	r2, #1878	; 0x756
 8013966:	4913      	ldr	r1, [pc, #76]	; (80139b4 <tcp_output_fill_options+0x74>)
 8013968:	4813      	ldr	r0, [pc, #76]	; (80139b8 <tcp_output_fill_options+0x78>)
 801396a:	f005 fcdf 	bl	801932c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013974:	69bb      	ldr	r3, [r7, #24]
 8013976:	3314      	adds	r3, #20
 8013978:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801397a:	69bb      	ldr	r3, [r7, #24]
 801397c:	f103 0214 	add.w	r2, r3, #20
 8013980:	8bfb      	ldrh	r3, [r7, #30]
 8013982:	009b      	lsls	r3, r3, #2
 8013984:	4619      	mov	r1, r3
 8013986:	79fb      	ldrb	r3, [r7, #7]
 8013988:	009b      	lsls	r3, r3, #2
 801398a:	f003 0304 	and.w	r3, r3, #4
 801398e:	440b      	add	r3, r1
 8013990:	4413      	add	r3, r2
 8013992:	697a      	ldr	r2, [r7, #20]
 8013994:	429a      	cmp	r2, r3
 8013996:	d006      	beq.n	80139a6 <tcp_output_fill_options+0x66>
 8013998:	4b05      	ldr	r3, [pc, #20]	; (80139b0 <tcp_output_fill_options+0x70>)
 801399a:	f240 7275 	movw	r2, #1909	; 0x775
 801399e:	4907      	ldr	r1, [pc, #28]	; (80139bc <tcp_output_fill_options+0x7c>)
 80139a0:	4805      	ldr	r0, [pc, #20]	; (80139b8 <tcp_output_fill_options+0x78>)
 80139a2:	f005 fcc3 	bl	801932c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80139a6:	bf00      	nop
 80139a8:	3720      	adds	r7, #32
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	0801ca0c 	.word	0x0801ca0c
 80139b4:	0801d13c 	.word	0x0801d13c
 80139b8:	0801ca60 	.word	0x0801ca60
 80139bc:	0801d034 	.word	0x0801d034

080139c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b08a      	sub	sp, #40	; 0x28
 80139c4:	af04      	add	r7, sp, #16
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	607a      	str	r2, [r7, #4]
 80139cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d106      	bne.n	80139e2 <tcp_output_control_segment+0x22>
 80139d4:	4b1c      	ldr	r3, [pc, #112]	; (8013a48 <tcp_output_control_segment+0x88>)
 80139d6:	f240 7287 	movw	r2, #1927	; 0x787
 80139da:	491c      	ldr	r1, [pc, #112]	; (8013a4c <tcp_output_control_segment+0x8c>)
 80139dc:	481c      	ldr	r0, [pc, #112]	; (8013a50 <tcp_output_control_segment+0x90>)
 80139de:	f005 fca5 	bl	801932c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80139e2:	683a      	ldr	r2, [r7, #0]
 80139e4:	6879      	ldr	r1, [r7, #4]
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f7fe fad6 	bl	8011f98 <tcp_route>
 80139ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d102      	bne.n	80139fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80139f4:	23fc      	movs	r3, #252	; 0xfc
 80139f6:	75fb      	strb	r3, [r7, #23]
 80139f8:	e01c      	b.n	8013a34 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d006      	beq.n	8013a0e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	7adb      	ldrb	r3, [r3, #11]
 8013a04:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	7a9b      	ldrb	r3, [r3, #10]
 8013a0a:	757b      	strb	r3, [r7, #21]
 8013a0c:	e003      	b.n	8013a16 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013a0e:	23ff      	movs	r3, #255	; 0xff
 8013a10:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013a12:	2300      	movs	r3, #0
 8013a14:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013a16:	7dba      	ldrb	r2, [r7, #22]
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	9302      	str	r3, [sp, #8]
 8013a1c:	2306      	movs	r3, #6
 8013a1e:	9301      	str	r3, [sp, #4]
 8013a20:	7d7b      	ldrb	r3, [r7, #21]
 8013a22:	9300      	str	r3, [sp, #0]
 8013a24:	4613      	mov	r3, r2
 8013a26:	683a      	ldr	r2, [r7, #0]
 8013a28:	6879      	ldr	r1, [r7, #4]
 8013a2a:	68b8      	ldr	r0, [r7, #8]
 8013a2c:	f004 fa18 	bl	8017e60 <ip4_output_if>
 8013a30:	4603      	mov	r3, r0
 8013a32:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013a34:	68b8      	ldr	r0, [r7, #8]
 8013a36:	f7f9 fe87 	bl	800d748 <pbuf_free>
  return err;
 8013a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3718      	adds	r7, #24
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	0801ca0c 	.word	0x0801ca0c
 8013a4c:	0801d164 	.word	0x0801d164
 8013a50:	0801ca60 	.word	0x0801ca60

08013a54 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013a54:	b590      	push	{r4, r7, lr}
 8013a56:	b08b      	sub	sp, #44	; 0x2c
 8013a58:	af04      	add	r7, sp, #16
 8013a5a:	60f8      	str	r0, [r7, #12]
 8013a5c:	60b9      	str	r1, [r7, #8]
 8013a5e:	607a      	str	r2, [r7, #4]
 8013a60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d106      	bne.n	8013a76 <tcp_rst+0x22>
 8013a68:	4b1f      	ldr	r3, [pc, #124]	; (8013ae8 <tcp_rst+0x94>)
 8013a6a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013a6e:	491f      	ldr	r1, [pc, #124]	; (8013aec <tcp_rst+0x98>)
 8013a70:	481f      	ldr	r0, [pc, #124]	; (8013af0 <tcp_rst+0x9c>)
 8013a72:	f005 fc5b 	bl	801932c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d106      	bne.n	8013a8a <tcp_rst+0x36>
 8013a7c:	4b1a      	ldr	r3, [pc, #104]	; (8013ae8 <tcp_rst+0x94>)
 8013a7e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013a82:	491c      	ldr	r1, [pc, #112]	; (8013af4 <tcp_rst+0xa0>)
 8013a84:	481a      	ldr	r0, [pc, #104]	; (8013af0 <tcp_rst+0x9c>)
 8013a86:	f005 fc51 	bl	801932c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013a8e:	f246 0308 	movw	r3, #24584	; 0x6008
 8013a92:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013a94:	7dfb      	ldrb	r3, [r7, #23]
 8013a96:	b29c      	uxth	r4, r3
 8013a98:	68b8      	ldr	r0, [r7, #8]
 8013a9a:	f7f8 fa7e 	bl	800bf9a <lwip_htonl>
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	8abb      	ldrh	r3, [r7, #20]
 8013aa2:	9303      	str	r3, [sp, #12]
 8013aa4:	2314      	movs	r3, #20
 8013aa6:	9302      	str	r3, [sp, #8]
 8013aa8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013aaa:	9301      	str	r3, [sp, #4]
 8013aac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013aae:	9300      	str	r3, [sp, #0]
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	4621      	mov	r1, r4
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f7ff fe90 	bl	80137dc <tcp_output_alloc_header_common>
 8013abc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d00c      	beq.n	8013ade <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013ac4:	7dfb      	ldrb	r3, [r7, #23]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	6939      	ldr	r1, [r7, #16]
 8013aca:	68f8      	ldr	r0, [r7, #12]
 8013acc:	f7ff ff38 	bl	8013940 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad2:	683a      	ldr	r2, [r7, #0]
 8013ad4:	6939      	ldr	r1, [r7, #16]
 8013ad6:	68f8      	ldr	r0, [r7, #12]
 8013ad8:	f7ff ff72 	bl	80139c0 <tcp_output_control_segment>
 8013adc:	e000      	b.n	8013ae0 <tcp_rst+0x8c>
    return;
 8013ade:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013ae0:	371c      	adds	r7, #28
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd90      	pop	{r4, r7, pc}
 8013ae6:	bf00      	nop
 8013ae8:	0801ca0c 	.word	0x0801ca0c
 8013aec:	0801d190 	.word	0x0801d190
 8013af0:	0801ca60 	.word	0x0801ca60
 8013af4:	0801d1ac 	.word	0x0801d1ac

08013af8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013af8:	b590      	push	{r4, r7, lr}
 8013afa:	b087      	sub	sp, #28
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013b00:	2300      	movs	r3, #0
 8013b02:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013b04:	2300      	movs	r3, #0
 8013b06:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d106      	bne.n	8013b1c <tcp_send_empty_ack+0x24>
 8013b0e:	4b28      	ldr	r3, [pc, #160]	; (8013bb0 <tcp_send_empty_ack+0xb8>)
 8013b10:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013b14:	4927      	ldr	r1, [pc, #156]	; (8013bb4 <tcp_send_empty_ack+0xbc>)
 8013b16:	4828      	ldr	r0, [pc, #160]	; (8013bb8 <tcp_send_empty_ack+0xc0>)
 8013b18:	f005 fc08 	bl	801932c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b1c:	7dfb      	ldrb	r3, [r7, #23]
 8013b1e:	009b      	lsls	r3, r3, #2
 8013b20:	b2db      	uxtb	r3, r3
 8013b22:	f003 0304 	and.w	r3, r3, #4
 8013b26:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013b28:	7d7b      	ldrb	r3, [r7, #21]
 8013b2a:	b29c      	uxth	r4, r3
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7f8 fa32 	bl	800bf9a <lwip_htonl>
 8013b36:	4603      	mov	r3, r0
 8013b38:	2200      	movs	r2, #0
 8013b3a:	4621      	mov	r1, r4
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f7ff fec1 	bl	80138c4 <tcp_output_alloc_header>
 8013b42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d109      	bne.n	8013b5e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8b5b      	ldrh	r3, [r3, #26]
 8013b4e:	f043 0303 	orr.w	r3, r3, #3
 8013b52:	b29a      	uxth	r2, r3
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013b58:	f06f 0301 	mvn.w	r3, #1
 8013b5c:	e023      	b.n	8013ba6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013b5e:	7dbb      	ldrb	r3, [r7, #22]
 8013b60:	7dfa      	ldrb	r2, [r7, #23]
 8013b62:	6939      	ldr	r1, [r7, #16]
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f7ff feeb 	bl	8013940 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013b6a:	687a      	ldr	r2, [r7, #4]
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	3304      	adds	r3, #4
 8013b70:	6939      	ldr	r1, [r7, #16]
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f7ff ff24 	bl	80139c0 <tcp_output_control_segment>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d007      	beq.n	8013b94 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	8b5b      	ldrh	r3, [r3, #26]
 8013b88:	f043 0303 	orr.w	r3, r3, #3
 8013b8c:	b29a      	uxth	r2, r3
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	835a      	strh	r2, [r3, #26]
 8013b92:	e006      	b.n	8013ba2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	8b5b      	ldrh	r3, [r3, #26]
 8013b98:	f023 0303 	bic.w	r3, r3, #3
 8013b9c:	b29a      	uxth	r2, r3
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	371c      	adds	r7, #28
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd90      	pop	{r4, r7, pc}
 8013bae:	bf00      	nop
 8013bb0:	0801ca0c 	.word	0x0801ca0c
 8013bb4:	0801d1c8 	.word	0x0801d1c8
 8013bb8:	0801ca60 	.word	0x0801ca60

08013bbc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013bbc:	b590      	push	{r4, r7, lr}
 8013bbe:	b087      	sub	sp, #28
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d106      	bne.n	8013bdc <tcp_keepalive+0x20>
 8013bce:	4b18      	ldr	r3, [pc, #96]	; (8013c30 <tcp_keepalive+0x74>)
 8013bd0:	f640 0224 	movw	r2, #2084	; 0x824
 8013bd4:	4917      	ldr	r1, [pc, #92]	; (8013c34 <tcp_keepalive+0x78>)
 8013bd6:	4818      	ldr	r0, [pc, #96]	; (8013c38 <tcp_keepalive+0x7c>)
 8013bd8:	f005 fba8 	bl	801932c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013bdc:	7dfb      	ldrb	r3, [r7, #23]
 8013bde:	b29c      	uxth	r4, r3
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013be4:	3b01      	subs	r3, #1
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7f8 f9d7 	bl	800bf9a <lwip_htonl>
 8013bec:	4603      	mov	r3, r0
 8013bee:	2200      	movs	r2, #0
 8013bf0:	4621      	mov	r1, r4
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7ff fe66 	bl	80138c4 <tcp_output_alloc_header>
 8013bf8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d102      	bne.n	8013c06 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013c00:	f04f 33ff 	mov.w	r3, #4294967295
 8013c04:	e010      	b.n	8013c28 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013c06:	7dfb      	ldrb	r3, [r7, #23]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	6939      	ldr	r1, [r7, #16]
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f7ff fe97 	bl	8013940 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013c12:	687a      	ldr	r2, [r7, #4]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	3304      	adds	r3, #4
 8013c18:	6939      	ldr	r1, [r7, #16]
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	f7ff fed0 	bl	80139c0 <tcp_output_control_segment>
 8013c20:	4603      	mov	r3, r0
 8013c22:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	371c      	adds	r7, #28
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd90      	pop	{r4, r7, pc}
 8013c30:	0801ca0c 	.word	0x0801ca0c
 8013c34:	0801d1e8 	.word	0x0801d1e8
 8013c38:	0801ca60 	.word	0x0801ca60

08013c3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013c3c:	b590      	push	{r4, r7, lr}
 8013c3e:	b08b      	sub	sp, #44	; 0x2c
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c44:	2300      	movs	r3, #0
 8013c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d106      	bne.n	8013c5e <tcp_zero_window_probe+0x22>
 8013c50:	4b4c      	ldr	r3, [pc, #304]	; (8013d84 <tcp_zero_window_probe+0x148>)
 8013c52:	f640 024f 	movw	r2, #2127	; 0x84f
 8013c56:	494c      	ldr	r1, [pc, #304]	; (8013d88 <tcp_zero_window_probe+0x14c>)
 8013c58:	484c      	ldr	r0, [pc, #304]	; (8013d8c <tcp_zero_window_probe+0x150>)
 8013c5a:	f005 fb67 	bl	801932c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c62:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013c64:	6a3b      	ldr	r3, [r7, #32]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d101      	bne.n	8013c6e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	e086      	b.n	8013d7c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013c74:	2bff      	cmp	r3, #255	; 0xff
 8013c76:	d007      	beq.n	8013c88 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013c7e:	3301      	adds	r3, #1
 8013c80:	b2da      	uxtb	r2, r3
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013c88:	6a3b      	ldr	r3, [r7, #32]
 8013c8a:	68db      	ldr	r3, [r3, #12]
 8013c8c:	899b      	ldrh	r3, [r3, #12]
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	4618      	mov	r0, r3
 8013c92:	f7f8 f96d 	bl	800bf70 <lwip_htons>
 8013c96:	4603      	mov	r3, r0
 8013c98:	b2db      	uxtb	r3, r3
 8013c9a:	f003 0301 	and.w	r3, r3, #1
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d005      	beq.n	8013cae <tcp_zero_window_probe+0x72>
 8013ca2:	6a3b      	ldr	r3, [r7, #32]
 8013ca4:	891b      	ldrh	r3, [r3, #8]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d101      	bne.n	8013cae <tcp_zero_window_probe+0x72>
 8013caa:	2301      	movs	r3, #1
 8013cac:	e000      	b.n	8013cb0 <tcp_zero_window_probe+0x74>
 8013cae:	2300      	movs	r3, #0
 8013cb0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013cb2:	7ffb      	ldrb	r3, [r7, #31]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	bf0c      	ite	eq
 8013cb8:	2301      	moveq	r3, #1
 8013cba:	2300      	movne	r3, #0
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cc4:	b299      	uxth	r1, r3
 8013cc6:	6a3b      	ldr	r3, [r7, #32]
 8013cc8:	68db      	ldr	r3, [r3, #12]
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	8bba      	ldrh	r2, [r7, #28]
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f7ff fdf8 	bl	80138c4 <tcp_output_alloc_header>
 8013cd4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013cd6:	69bb      	ldr	r3, [r7, #24]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d102      	bne.n	8013ce2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ce0:	e04c      	b.n	8013d7c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013ce2:	69bb      	ldr	r3, [r7, #24]
 8013ce4:	685b      	ldr	r3, [r3, #4]
 8013ce6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013ce8:	7ffb      	ldrb	r3, [r7, #31]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d011      	beq.n	8013d12 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	899b      	ldrh	r3, [r3, #12]
 8013cf2:	b29b      	uxth	r3, r3
 8013cf4:	b21b      	sxth	r3, r3
 8013cf6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013cfa:	b21c      	sxth	r4, r3
 8013cfc:	2011      	movs	r0, #17
 8013cfe:	f7f8 f937 	bl	800bf70 <lwip_htons>
 8013d02:	4603      	mov	r3, r0
 8013d04:	b21b      	sxth	r3, r3
 8013d06:	4323      	orrs	r3, r4
 8013d08:	b21b      	sxth	r3, r3
 8013d0a:	b29a      	uxth	r2, r3
 8013d0c:	697b      	ldr	r3, [r7, #20]
 8013d0e:	819a      	strh	r2, [r3, #12]
 8013d10:	e010      	b.n	8013d34 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013d12:	69bb      	ldr	r3, [r7, #24]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	3314      	adds	r3, #20
 8013d18:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013d1a:	6a3b      	ldr	r3, [r7, #32]
 8013d1c:	6858      	ldr	r0, [r3, #4]
 8013d1e:	6a3b      	ldr	r3, [r7, #32]
 8013d20:	685b      	ldr	r3, [r3, #4]
 8013d22:	891a      	ldrh	r2, [r3, #8]
 8013d24:	6a3b      	ldr	r3, [r7, #32]
 8013d26:	891b      	ldrh	r3, [r3, #8]
 8013d28:	1ad3      	subs	r3, r2, r3
 8013d2a:	b29b      	uxth	r3, r3
 8013d2c:	2201      	movs	r2, #1
 8013d2e:	6939      	ldr	r1, [r7, #16]
 8013d30:	f7f9 ff10 	bl	800db54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013d34:	6a3b      	ldr	r3, [r7, #32]
 8013d36:	68db      	ldr	r3, [r3, #12]
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7f8 f92d 	bl	800bf9a <lwip_htonl>
 8013d40:	4603      	mov	r3, r0
 8013d42:	3301      	adds	r3, #1
 8013d44:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	1ad3      	subs	r3, r2, r3
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	da02      	bge.n	8013d58 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	68fa      	ldr	r2, [r7, #12]
 8013d56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	69b9      	ldr	r1, [r7, #24]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7ff fded 	bl	8013940 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	3304      	adds	r3, #4
 8013d6c:	69b9      	ldr	r1, [r7, #24]
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f7ff fe26 	bl	80139c0 <tcp_output_control_segment>
 8013d74:	4603      	mov	r3, r0
 8013d76:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013d78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	372c      	adds	r7, #44	; 0x2c
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd90      	pop	{r4, r7, pc}
 8013d84:	0801ca0c 	.word	0x0801ca0c
 8013d88:	0801d204 	.word	0x0801d204
 8013d8c:	0801ca60 	.word	0x0801ca60

08013d90 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b082      	sub	sp, #8
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013d98:	f7f9 ffca 	bl	800dd30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013d9c:	4b0a      	ldr	r3, [pc, #40]	; (8013dc8 <tcpip_tcp_timer+0x38>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d103      	bne.n	8013dac <tcpip_tcp_timer+0x1c>
 8013da4:	4b09      	ldr	r3, [pc, #36]	; (8013dcc <tcpip_tcp_timer+0x3c>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d005      	beq.n	8013db8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013dac:	2200      	movs	r2, #0
 8013dae:	4908      	ldr	r1, [pc, #32]	; (8013dd0 <tcpip_tcp_timer+0x40>)
 8013db0:	20fa      	movs	r0, #250	; 0xfa
 8013db2:	f000 f8f1 	bl	8013f98 <sys_timeout>
 8013db6:	e002      	b.n	8013dbe <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013db8:	4b06      	ldr	r3, [pc, #24]	; (8013dd4 <tcpip_tcp_timer+0x44>)
 8013dba:	2200      	movs	r2, #0
 8013dbc:	601a      	str	r2, [r3, #0]
  }
}
 8013dbe:	bf00      	nop
 8013dc0:	3708      	adds	r7, #8
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}
 8013dc6:	bf00      	nop
 8013dc8:	2000b134 	.word	0x2000b134
 8013dcc:	2000b144 	.word	0x2000b144
 8013dd0:	08013d91 	.word	0x08013d91
 8013dd4:	2000428c 	.word	0x2000428c

08013dd8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013ddc:	4b0a      	ldr	r3, [pc, #40]	; (8013e08 <tcp_timer_needed+0x30>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d10f      	bne.n	8013e04 <tcp_timer_needed+0x2c>
 8013de4:	4b09      	ldr	r3, [pc, #36]	; (8013e0c <tcp_timer_needed+0x34>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d103      	bne.n	8013df4 <tcp_timer_needed+0x1c>
 8013dec:	4b08      	ldr	r3, [pc, #32]	; (8013e10 <tcp_timer_needed+0x38>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d007      	beq.n	8013e04 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013df4:	4b04      	ldr	r3, [pc, #16]	; (8013e08 <tcp_timer_needed+0x30>)
 8013df6:	2201      	movs	r2, #1
 8013df8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	4905      	ldr	r1, [pc, #20]	; (8013e14 <tcp_timer_needed+0x3c>)
 8013dfe:	20fa      	movs	r0, #250	; 0xfa
 8013e00:	f000 f8ca 	bl	8013f98 <sys_timeout>
  }
}
 8013e04:	bf00      	nop
 8013e06:	bd80      	pop	{r7, pc}
 8013e08:	2000428c 	.word	0x2000428c
 8013e0c:	2000b134 	.word	0x2000b134
 8013e10:	2000b144 	.word	0x2000b144
 8013e14:	08013d91 	.word	0x08013d91

08013e18 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b086      	sub	sp, #24
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	60f8      	str	r0, [r7, #12]
 8013e20:	60b9      	str	r1, [r7, #8]
 8013e22:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013e24:	200a      	movs	r0, #10
 8013e26:	f7f8 fd59 	bl	800c8dc <memp_malloc>
 8013e2a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d109      	bne.n	8013e46 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013e32:	693b      	ldr	r3, [r7, #16]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d151      	bne.n	8013edc <sys_timeout_abs+0xc4>
 8013e38:	4b2a      	ldr	r3, [pc, #168]	; (8013ee4 <sys_timeout_abs+0xcc>)
 8013e3a:	22be      	movs	r2, #190	; 0xbe
 8013e3c:	492a      	ldr	r1, [pc, #168]	; (8013ee8 <sys_timeout_abs+0xd0>)
 8013e3e:	482b      	ldr	r0, [pc, #172]	; (8013eec <sys_timeout_abs+0xd4>)
 8013e40:	f005 fa74 	bl	801932c <iprintf>
    return;
 8013e44:	e04a      	b.n	8013edc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013e46:	693b      	ldr	r3, [r7, #16]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	68ba      	ldr	r2, [r7, #8]
 8013e50:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	687a      	ldr	r2, [r7, #4]
 8013e56:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	68fa      	ldr	r2, [r7, #12]
 8013e5c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013e5e:	4b24      	ldr	r3, [pc, #144]	; (8013ef0 <sys_timeout_abs+0xd8>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d103      	bne.n	8013e6e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013e66:	4a22      	ldr	r2, [pc, #136]	; (8013ef0 <sys_timeout_abs+0xd8>)
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	6013      	str	r3, [r2, #0]
    return;
 8013e6c:	e037      	b.n	8013ede <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	685a      	ldr	r2, [r3, #4]
 8013e72:	4b1f      	ldr	r3, [pc, #124]	; (8013ef0 <sys_timeout_abs+0xd8>)
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	1ad3      	subs	r3, r2, r3
 8013e7a:	0fdb      	lsrs	r3, r3, #31
 8013e7c:	f003 0301 	and.w	r3, r3, #1
 8013e80:	b2db      	uxtb	r3, r3
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d007      	beq.n	8013e96 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013e86:	4b1a      	ldr	r3, [pc, #104]	; (8013ef0 <sys_timeout_abs+0xd8>)
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013e8e:	4a18      	ldr	r2, [pc, #96]	; (8013ef0 <sys_timeout_abs+0xd8>)
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	6013      	str	r3, [r2, #0]
 8013e94:	e023      	b.n	8013ede <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013e96:	4b16      	ldr	r3, [pc, #88]	; (8013ef0 <sys_timeout_abs+0xd8>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	617b      	str	r3, [r7, #20]
 8013e9c:	e01a      	b.n	8013ed4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d00b      	beq.n	8013ebe <sys_timeout_abs+0xa6>
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	685a      	ldr	r2, [r3, #4]
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	1ad3      	subs	r3, r2, r3
 8013eb2:	0fdb      	lsrs	r3, r3, #31
 8013eb4:	f003 0301 	and.w	r3, r3, #1
 8013eb8:	b2db      	uxtb	r3, r3
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d007      	beq.n	8013ece <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	693b      	ldr	r3, [r7, #16]
 8013ec4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	693a      	ldr	r2, [r7, #16]
 8013eca:	601a      	str	r2, [r3, #0]
        break;
 8013ecc:	e007      	b.n	8013ede <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	617b      	str	r3, [r7, #20]
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d1e1      	bne.n	8013e9e <sys_timeout_abs+0x86>
 8013eda:	e000      	b.n	8013ede <sys_timeout_abs+0xc6>
    return;
 8013edc:	bf00      	nop
      }
    }
  }
}
 8013ede:	3718      	adds	r7, #24
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	0801d228 	.word	0x0801d228
 8013ee8:	0801d25c 	.word	0x0801d25c
 8013eec:	0801d29c 	.word	0x0801d29c
 8013ef0:	20004284 	.word	0x20004284

08013ef4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b086      	sub	sp, #24
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	685b      	ldr	r3, [r3, #4]
 8013f04:	4798      	blx	r3

  now = sys_now();
 8013f06:	f7f1 fe71 	bl	8005bec <sys_now>
 8013f0a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	681a      	ldr	r2, [r3, #0]
 8013f10:	4b0f      	ldr	r3, [pc, #60]	; (8013f50 <lwip_cyclic_timer+0x5c>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	4413      	add	r3, r2
 8013f16:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013f18:	68fa      	ldr	r2, [r7, #12]
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	1ad3      	subs	r3, r2, r3
 8013f1e:	0fdb      	lsrs	r3, r3, #31
 8013f20:	f003 0301 	and.w	r3, r3, #1
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d009      	beq.n	8013f3e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	693b      	ldr	r3, [r7, #16]
 8013f30:	4413      	add	r3, r2
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	4907      	ldr	r1, [pc, #28]	; (8013f54 <lwip_cyclic_timer+0x60>)
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7ff ff6e 	bl	8013e18 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013f3c:	e004      	b.n	8013f48 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013f3e:	687a      	ldr	r2, [r7, #4]
 8013f40:	4904      	ldr	r1, [pc, #16]	; (8013f54 <lwip_cyclic_timer+0x60>)
 8013f42:	68f8      	ldr	r0, [r7, #12]
 8013f44:	f7ff ff68 	bl	8013e18 <sys_timeout_abs>
}
 8013f48:	bf00      	nop
 8013f4a:	3718      	adds	r7, #24
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	20004288 	.word	0x20004288
 8013f54:	08013ef5 	.word	0x08013ef5

08013f58 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013f5e:	2301      	movs	r3, #1
 8013f60:	607b      	str	r3, [r7, #4]
 8013f62:	e00e      	b.n	8013f82 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013f64:	4a0a      	ldr	r2, [pc, #40]	; (8013f90 <sys_timeouts_init+0x38>)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	00db      	lsls	r3, r3, #3
 8013f70:	4a07      	ldr	r2, [pc, #28]	; (8013f90 <sys_timeouts_init+0x38>)
 8013f72:	4413      	add	r3, r2
 8013f74:	461a      	mov	r2, r3
 8013f76:	4907      	ldr	r1, [pc, #28]	; (8013f94 <sys_timeouts_init+0x3c>)
 8013f78:	f000 f80e 	bl	8013f98 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	3301      	adds	r3, #1
 8013f80:	607b      	str	r3, [r7, #4]
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2b04      	cmp	r3, #4
 8013f86:	d9ed      	bls.n	8013f64 <sys_timeouts_init+0xc>
  }
}
 8013f88:	bf00      	nop
 8013f8a:	3708      	adds	r7, #8
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	0801e230 	.word	0x0801e230
 8013f94:	08013ef5 	.word	0x08013ef5

08013f98 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b086      	sub	sp, #24
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	60f8      	str	r0, [r7, #12]
 8013fa0:	60b9      	str	r1, [r7, #8]
 8013fa2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013faa:	d306      	bcc.n	8013fba <sys_timeout+0x22>
 8013fac:	4b0a      	ldr	r3, [pc, #40]	; (8013fd8 <sys_timeout+0x40>)
 8013fae:	f240 1229 	movw	r2, #297	; 0x129
 8013fb2:	490a      	ldr	r1, [pc, #40]	; (8013fdc <sys_timeout+0x44>)
 8013fb4:	480a      	ldr	r0, [pc, #40]	; (8013fe0 <sys_timeout+0x48>)
 8013fb6:	f005 f9b9 	bl	801932c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013fba:	f7f1 fe17 	bl	8005bec <sys_now>
 8013fbe:	4602      	mov	r2, r0
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	4413      	add	r3, r2
 8013fc4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	68b9      	ldr	r1, [r7, #8]
 8013fca:	6978      	ldr	r0, [r7, #20]
 8013fcc:	f7ff ff24 	bl	8013e18 <sys_timeout_abs>
#endif
}
 8013fd0:	bf00      	nop
 8013fd2:	3718      	adds	r7, #24
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	0801d228 	.word	0x0801d228
 8013fdc:	0801d2c4 	.word	0x0801d2c4
 8013fe0:	0801d29c 	.word	0x0801d29c

08013fe4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b084      	sub	sp, #16
 8013fe8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013fea:	f7f1 fdff 	bl	8005bec <sys_now>
 8013fee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013ff0:	4b17      	ldr	r3, [pc, #92]	; (8014050 <sys_check_timeouts+0x6c>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d022      	beq.n	8014042 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	685b      	ldr	r3, [r3, #4]
 8014000:	68fa      	ldr	r2, [r7, #12]
 8014002:	1ad3      	subs	r3, r2, r3
 8014004:	0fdb      	lsrs	r3, r3, #31
 8014006:	f003 0301 	and.w	r3, r3, #1
 801400a:	b2db      	uxtb	r3, r3
 801400c:	2b00      	cmp	r3, #0
 801400e:	d11a      	bne.n	8014046 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	4a0e      	ldr	r2, [pc, #56]	; (8014050 <sys_check_timeouts+0x6c>)
 8014016:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	689b      	ldr	r3, [r3, #8]
 801401c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	68db      	ldr	r3, [r3, #12]
 8014022:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	4a0a      	ldr	r2, [pc, #40]	; (8014054 <sys_check_timeouts+0x70>)
 801402a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801402c:	68b9      	ldr	r1, [r7, #8]
 801402e:	200a      	movs	r0, #10
 8014030:	f7f8 fca6 	bl	800c980 <memp_free>
    if (handler != NULL) {
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d0da      	beq.n	8013ff0 <sys_check_timeouts+0xc>
      handler(arg);
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6838      	ldr	r0, [r7, #0]
 801403e:	4798      	blx	r3
  do {
 8014040:	e7d6      	b.n	8013ff0 <sys_check_timeouts+0xc>
      return;
 8014042:	bf00      	nop
 8014044:	e000      	b.n	8014048 <sys_check_timeouts+0x64>
      return;
 8014046:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014048:	3710      	adds	r7, #16
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}
 801404e:	bf00      	nop
 8014050:	20004284 	.word	0x20004284
 8014054:	20004288 	.word	0x20004288

08014058 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b082      	sub	sp, #8
 801405c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801405e:	4b16      	ldr	r3, [pc, #88]	; (80140b8 <sys_timeouts_sleeptime+0x60>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d102      	bne.n	801406c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014066:	f04f 33ff 	mov.w	r3, #4294967295
 801406a:	e020      	b.n	80140ae <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801406c:	f7f1 fdbe 	bl	8005bec <sys_now>
 8014070:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014072:	4b11      	ldr	r3, [pc, #68]	; (80140b8 <sys_timeouts_sleeptime+0x60>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	685a      	ldr	r2, [r3, #4]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	1ad3      	subs	r3, r2, r3
 801407c:	0fdb      	lsrs	r3, r3, #31
 801407e:	f003 0301 	and.w	r3, r3, #1
 8014082:	b2db      	uxtb	r3, r3
 8014084:	2b00      	cmp	r3, #0
 8014086:	d001      	beq.n	801408c <sys_timeouts_sleeptime+0x34>
    return 0;
 8014088:	2300      	movs	r3, #0
 801408a:	e010      	b.n	80140ae <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801408c:	4b0a      	ldr	r3, [pc, #40]	; (80140b8 <sys_timeouts_sleeptime+0x60>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	685a      	ldr	r2, [r3, #4]
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	1ad3      	subs	r3, r2, r3
 8014096:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	2b00      	cmp	r3, #0
 801409c:	da06      	bge.n	80140ac <sys_timeouts_sleeptime+0x54>
 801409e:	4b07      	ldr	r3, [pc, #28]	; (80140bc <sys_timeouts_sleeptime+0x64>)
 80140a0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80140a4:	4906      	ldr	r1, [pc, #24]	; (80140c0 <sys_timeouts_sleeptime+0x68>)
 80140a6:	4807      	ldr	r0, [pc, #28]	; (80140c4 <sys_timeouts_sleeptime+0x6c>)
 80140a8:	f005 f940 	bl	801932c <iprintf>
    return ret;
 80140ac:	683b      	ldr	r3, [r7, #0]
  }
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3708      	adds	r7, #8
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}
 80140b6:	bf00      	nop
 80140b8:	20004284 	.word	0x20004284
 80140bc:	0801d228 	.word	0x0801d228
 80140c0:	0801d2fc 	.word	0x0801d2fc
 80140c4:	0801d29c 	.word	0x0801d29c

080140c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80140cc:	f005 f9aa 	bl	8019424 <rand>
 80140d0:	4603      	mov	r3, r0
 80140d2:	b29b      	uxth	r3, r3
 80140d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80140d8:	b29b      	uxth	r3, r3
 80140da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80140de:	b29a      	uxth	r2, r3
 80140e0:	4b01      	ldr	r3, [pc, #4]	; (80140e8 <udp_init+0x20>)
 80140e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80140e4:	bf00      	nop
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	20000018 	.word	0x20000018

080140ec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80140ec:	b480      	push	{r7}
 80140ee:	b083      	sub	sp, #12
 80140f0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80140f2:	2300      	movs	r3, #0
 80140f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80140f6:	4b17      	ldr	r3, [pc, #92]	; (8014154 <udp_new_port+0x68>)
 80140f8:	881b      	ldrh	r3, [r3, #0]
 80140fa:	1c5a      	adds	r2, r3, #1
 80140fc:	b291      	uxth	r1, r2
 80140fe:	4a15      	ldr	r2, [pc, #84]	; (8014154 <udp_new_port+0x68>)
 8014100:	8011      	strh	r1, [r2, #0]
 8014102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014106:	4293      	cmp	r3, r2
 8014108:	d103      	bne.n	8014112 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801410a:	4b12      	ldr	r3, [pc, #72]	; (8014154 <udp_new_port+0x68>)
 801410c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014110:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014112:	4b11      	ldr	r3, [pc, #68]	; (8014158 <udp_new_port+0x6c>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	603b      	str	r3, [r7, #0]
 8014118:	e011      	b.n	801413e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	8a5a      	ldrh	r2, [r3, #18]
 801411e:	4b0d      	ldr	r3, [pc, #52]	; (8014154 <udp_new_port+0x68>)
 8014120:	881b      	ldrh	r3, [r3, #0]
 8014122:	429a      	cmp	r2, r3
 8014124:	d108      	bne.n	8014138 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014126:	88fb      	ldrh	r3, [r7, #6]
 8014128:	3301      	adds	r3, #1
 801412a:	80fb      	strh	r3, [r7, #6]
 801412c:	88fb      	ldrh	r3, [r7, #6]
 801412e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014132:	d3e0      	bcc.n	80140f6 <udp_new_port+0xa>
        return 0;
 8014134:	2300      	movs	r3, #0
 8014136:	e007      	b.n	8014148 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	68db      	ldr	r3, [r3, #12]
 801413c:	603b      	str	r3, [r7, #0]
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d1ea      	bne.n	801411a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014144:	4b03      	ldr	r3, [pc, #12]	; (8014154 <udp_new_port+0x68>)
 8014146:	881b      	ldrh	r3, [r3, #0]
}
 8014148:	4618      	mov	r0, r3
 801414a:	370c      	adds	r7, #12
 801414c:	46bd      	mov	sp, r7
 801414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014152:	4770      	bx	lr
 8014154:	20000018 	.word	0x20000018
 8014158:	2000b14c 	.word	0x2000b14c

0801415c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	60f8      	str	r0, [r7, #12]
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	4613      	mov	r3, r2
 8014168:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d105      	bne.n	801417c <udp_input_local_match+0x20>
 8014170:	4b27      	ldr	r3, [pc, #156]	; (8014210 <udp_input_local_match+0xb4>)
 8014172:	2287      	movs	r2, #135	; 0x87
 8014174:	4927      	ldr	r1, [pc, #156]	; (8014214 <udp_input_local_match+0xb8>)
 8014176:	4828      	ldr	r0, [pc, #160]	; (8014218 <udp_input_local_match+0xbc>)
 8014178:	f005 f8d8 	bl	801932c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d105      	bne.n	801418e <udp_input_local_match+0x32>
 8014182:	4b23      	ldr	r3, [pc, #140]	; (8014210 <udp_input_local_match+0xb4>)
 8014184:	2288      	movs	r2, #136	; 0x88
 8014186:	4925      	ldr	r1, [pc, #148]	; (801421c <udp_input_local_match+0xc0>)
 8014188:	4823      	ldr	r0, [pc, #140]	; (8014218 <udp_input_local_match+0xbc>)
 801418a:	f005 f8cf 	bl	801932c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	7a1b      	ldrb	r3, [r3, #8]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d00b      	beq.n	80141ae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	7a1a      	ldrb	r2, [r3, #8]
 801419a:	4b21      	ldr	r3, [pc, #132]	; (8014220 <udp_input_local_match+0xc4>)
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80141a2:	3301      	adds	r3, #1
 80141a4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d001      	beq.n	80141ae <udp_input_local_match+0x52>
    return 0;
 80141aa:	2300      	movs	r3, #0
 80141ac:	e02b      	b.n	8014206 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80141ae:	79fb      	ldrb	r3, [r7, #7]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d018      	beq.n	80141e6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d013      	beq.n	80141e2 <udp_input_local_match+0x86>
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d00f      	beq.n	80141e2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80141c2:	4b17      	ldr	r3, [pc, #92]	; (8014220 <udp_input_local_match+0xc4>)
 80141c4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ca:	d00a      	beq.n	80141e2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	4b13      	ldr	r3, [pc, #76]	; (8014220 <udp_input_local_match+0xc4>)
 80141d2:	695b      	ldr	r3, [r3, #20]
 80141d4:	405a      	eors	r2, r3
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	3308      	adds	r3, #8
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d110      	bne.n	8014204 <udp_input_local_match+0xa8>
          return 1;
 80141e2:	2301      	movs	r3, #1
 80141e4:	e00f      	b.n	8014206 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d009      	beq.n	8014200 <udp_input_local_match+0xa4>
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d005      	beq.n	8014200 <udp_input_local_match+0xa4>
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	4b09      	ldr	r3, [pc, #36]	; (8014220 <udp_input_local_match+0xc4>)
 80141fa:	695b      	ldr	r3, [r3, #20]
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d101      	bne.n	8014204 <udp_input_local_match+0xa8>
        return 1;
 8014200:	2301      	movs	r3, #1
 8014202:	e000      	b.n	8014206 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	3710      	adds	r7, #16
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	0801d310 	.word	0x0801d310
 8014214:	0801d340 	.word	0x0801d340
 8014218:	0801d364 	.word	0x0801d364
 801421c:	0801d38c 	.word	0x0801d38c
 8014220:	20007a00 	.word	0x20007a00

08014224 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014224:	b590      	push	{r4, r7, lr}
 8014226:	b08d      	sub	sp, #52	; 0x34
 8014228:	af02      	add	r7, sp, #8
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801422e:	2300      	movs	r3, #0
 8014230:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d105      	bne.n	8014244 <udp_input+0x20>
 8014238:	4b7c      	ldr	r3, [pc, #496]	; (801442c <udp_input+0x208>)
 801423a:	22cf      	movs	r2, #207	; 0xcf
 801423c:	497c      	ldr	r1, [pc, #496]	; (8014430 <udp_input+0x20c>)
 801423e:	487d      	ldr	r0, [pc, #500]	; (8014434 <udp_input+0x210>)
 8014240:	f005 f874 	bl	801932c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d105      	bne.n	8014256 <udp_input+0x32>
 801424a:	4b78      	ldr	r3, [pc, #480]	; (801442c <udp_input+0x208>)
 801424c:	22d0      	movs	r2, #208	; 0xd0
 801424e:	497a      	ldr	r1, [pc, #488]	; (8014438 <udp_input+0x214>)
 8014250:	4878      	ldr	r0, [pc, #480]	; (8014434 <udp_input+0x210>)
 8014252:	f005 f86b 	bl	801932c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	895b      	ldrh	r3, [r3, #10]
 801425a:	2b07      	cmp	r3, #7
 801425c:	d803      	bhi.n	8014266 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f7f9 fa72 	bl	800d748 <pbuf_free>
    goto end;
 8014264:	e0de      	b.n	8014424 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	685b      	ldr	r3, [r3, #4]
 801426a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801426c:	4b73      	ldr	r3, [pc, #460]	; (801443c <udp_input+0x218>)
 801426e:	695a      	ldr	r2, [r3, #20]
 8014270:	4b72      	ldr	r3, [pc, #456]	; (801443c <udp_input+0x218>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	4619      	mov	r1, r3
 8014276:	4610      	mov	r0, r2
 8014278:	f003 feca 	bl	8018010 <ip4_addr_isbroadcast_u32>
 801427c:	4603      	mov	r3, r0
 801427e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	881b      	ldrh	r3, [r3, #0]
 8014284:	b29b      	uxth	r3, r3
 8014286:	4618      	mov	r0, r3
 8014288:	f7f7 fe72 	bl	800bf70 <lwip_htons>
 801428c:	4603      	mov	r3, r0
 801428e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	885b      	ldrh	r3, [r3, #2]
 8014294:	b29b      	uxth	r3, r3
 8014296:	4618      	mov	r0, r3
 8014298:	f7f7 fe6a 	bl	800bf70 <lwip_htons>
 801429c:	4603      	mov	r3, r0
 801429e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80142a0:	2300      	movs	r3, #0
 80142a2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80142a4:	2300      	movs	r3, #0
 80142a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80142a8:	2300      	movs	r3, #0
 80142aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80142ac:	4b64      	ldr	r3, [pc, #400]	; (8014440 <udp_input+0x21c>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	627b      	str	r3, [r7, #36]	; 0x24
 80142b2:	e054      	b.n	801435e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80142b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b6:	8a5b      	ldrh	r3, [r3, #18]
 80142b8:	89fa      	ldrh	r2, [r7, #14]
 80142ba:	429a      	cmp	r2, r3
 80142bc:	d14a      	bne.n	8014354 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80142be:	7cfb      	ldrb	r3, [r7, #19]
 80142c0:	461a      	mov	r2, r3
 80142c2:	6839      	ldr	r1, [r7, #0]
 80142c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142c6:	f7ff ff49 	bl	801415c <udp_input_local_match>
 80142ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d041      	beq.n	8014354 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80142d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d2:	7c1b      	ldrb	r3, [r3, #16]
 80142d4:	f003 0304 	and.w	r3, r3, #4
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d11d      	bne.n	8014318 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80142dc:	69fb      	ldr	r3, [r7, #28]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d102      	bne.n	80142e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80142e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e4:	61fb      	str	r3, [r7, #28]
 80142e6:	e017      	b.n	8014318 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80142e8:	7cfb      	ldrb	r3, [r7, #19]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d014      	beq.n	8014318 <udp_input+0xf4>
 80142ee:	4b53      	ldr	r3, [pc, #332]	; (801443c <udp_input+0x218>)
 80142f0:	695b      	ldr	r3, [r3, #20]
 80142f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142f6:	d10f      	bne.n	8014318 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80142f8:	69fb      	ldr	r3, [r7, #28]
 80142fa:	681a      	ldr	r2, [r3, #0]
 80142fc:	683b      	ldr	r3, [r7, #0]
 80142fe:	3304      	adds	r3, #4
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	429a      	cmp	r2, r3
 8014304:	d008      	beq.n	8014318 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014308:	681a      	ldr	r2, [r3, #0]
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	3304      	adds	r3, #4
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	429a      	cmp	r2, r3
 8014312:	d101      	bne.n	8014318 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014316:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431a:	8a9b      	ldrh	r3, [r3, #20]
 801431c:	8a3a      	ldrh	r2, [r7, #16]
 801431e:	429a      	cmp	r2, r3
 8014320:	d118      	bne.n	8014354 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014324:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014326:	2b00      	cmp	r3, #0
 8014328:	d005      	beq.n	8014336 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432c:	685a      	ldr	r2, [r3, #4]
 801432e:	4b43      	ldr	r3, [pc, #268]	; (801443c <udp_input+0x218>)
 8014330:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014332:	429a      	cmp	r2, r3
 8014334:	d10e      	bne.n	8014354 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014336:	6a3b      	ldr	r3, [r7, #32]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d014      	beq.n	8014366 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433e:	68da      	ldr	r2, [r3, #12]
 8014340:	6a3b      	ldr	r3, [r7, #32]
 8014342:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014344:	4b3e      	ldr	r3, [pc, #248]	; (8014440 <udp_input+0x21c>)
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801434c:	4a3c      	ldr	r2, [pc, #240]	; (8014440 <udp_input+0x21c>)
 801434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014350:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014352:	e008      	b.n	8014366 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014356:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435a:	68db      	ldr	r3, [r3, #12]
 801435c:	627b      	str	r3, [r7, #36]	; 0x24
 801435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014360:	2b00      	cmp	r3, #0
 8014362:	d1a7      	bne.n	80142b4 <udp_input+0x90>
 8014364:	e000      	b.n	8014368 <udp_input+0x144>
        break;
 8014366:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436a:	2b00      	cmp	r3, #0
 801436c:	d101      	bne.n	8014372 <udp_input+0x14e>
    pcb = uncon_pcb;
 801436e:	69fb      	ldr	r3, [r7, #28]
 8014370:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014374:	2b00      	cmp	r3, #0
 8014376:	d002      	beq.n	801437e <udp_input+0x15a>
    for_us = 1;
 8014378:	2301      	movs	r3, #1
 801437a:	76fb      	strb	r3, [r7, #27]
 801437c:	e00a      	b.n	8014394 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	3304      	adds	r3, #4
 8014382:	681a      	ldr	r2, [r3, #0]
 8014384:	4b2d      	ldr	r3, [pc, #180]	; (801443c <udp_input+0x218>)
 8014386:	695b      	ldr	r3, [r3, #20]
 8014388:	429a      	cmp	r2, r3
 801438a:	bf0c      	ite	eq
 801438c:	2301      	moveq	r3, #1
 801438e:	2300      	movne	r3, #0
 8014390:	b2db      	uxtb	r3, r3
 8014392:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014394:	7efb      	ldrb	r3, [r7, #27]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d041      	beq.n	801441e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801439a:	2108      	movs	r1, #8
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f7f9 f94d 	bl	800d63c <pbuf_remove_header>
 80143a2:	4603      	mov	r3, r0
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d00a      	beq.n	80143be <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80143a8:	4b20      	ldr	r3, [pc, #128]	; (801442c <udp_input+0x208>)
 80143aa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80143ae:	4925      	ldr	r1, [pc, #148]	; (8014444 <udp_input+0x220>)
 80143b0:	4820      	ldr	r0, [pc, #128]	; (8014434 <udp_input+0x210>)
 80143b2:	f004 ffbb 	bl	801932c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f7f9 f9c6 	bl	800d748 <pbuf_free>
      goto end;
 80143bc:	e032      	b.n	8014424 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80143be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d012      	beq.n	80143ea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80143c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c6:	699b      	ldr	r3, [r3, #24]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d00a      	beq.n	80143e2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80143cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ce:	699c      	ldr	r4, [r3, #24]
 80143d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d2:	69d8      	ldr	r0, [r3, #28]
 80143d4:	8a3b      	ldrh	r3, [r7, #16]
 80143d6:	9300      	str	r3, [sp, #0]
 80143d8:	4b1b      	ldr	r3, [pc, #108]	; (8014448 <udp_input+0x224>)
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80143e0:	e021      	b.n	8014426 <udp_input+0x202>
        pbuf_free(p);
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f7f9 f9b0 	bl	800d748 <pbuf_free>
        goto end;
 80143e8:	e01c      	b.n	8014424 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80143ea:	7cfb      	ldrb	r3, [r7, #19]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d112      	bne.n	8014416 <udp_input+0x1f2>
 80143f0:	4b12      	ldr	r3, [pc, #72]	; (801443c <udp_input+0x218>)
 80143f2:	695b      	ldr	r3, [r3, #20]
 80143f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143f8:	2be0      	cmp	r3, #224	; 0xe0
 80143fa:	d00c      	beq.n	8014416 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80143fc:	4b0f      	ldr	r3, [pc, #60]	; (801443c <udp_input+0x218>)
 80143fe:	899b      	ldrh	r3, [r3, #12]
 8014400:	3308      	adds	r3, #8
 8014402:	b29b      	uxth	r3, r3
 8014404:	b21b      	sxth	r3, r3
 8014406:	4619      	mov	r1, r3
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f7f9 f98a 	bl	800d722 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801440e:	2103      	movs	r1, #3
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f003 fac1 	bl	8017998 <icmp_dest_unreach>
      pbuf_free(p);
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	f7f9 f996 	bl	800d748 <pbuf_free>
  return;
 801441c:	e003      	b.n	8014426 <udp_input+0x202>
    pbuf_free(p);
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f7f9 f992 	bl	800d748 <pbuf_free>
  return;
 8014424:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014426:	372c      	adds	r7, #44	; 0x2c
 8014428:	46bd      	mov	sp, r7
 801442a:	bd90      	pop	{r4, r7, pc}
 801442c:	0801d310 	.word	0x0801d310
 8014430:	0801d3b4 	.word	0x0801d3b4
 8014434:	0801d364 	.word	0x0801d364
 8014438:	0801d3cc 	.word	0x0801d3cc
 801443c:	20007a00 	.word	0x20007a00
 8014440:	2000b14c 	.word	0x2000b14c
 8014444:	0801d3e8 	.word	0x0801d3e8
 8014448:	20007a10 	.word	0x20007a10

0801444c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b082      	sub	sp, #8
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d109      	bne.n	8014470 <udp_send+0x24>
 801445c:	4b11      	ldr	r3, [pc, #68]	; (80144a4 <udp_send+0x58>)
 801445e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8014462:	4911      	ldr	r1, [pc, #68]	; (80144a8 <udp_send+0x5c>)
 8014464:	4811      	ldr	r0, [pc, #68]	; (80144ac <udp_send+0x60>)
 8014466:	f004 ff61 	bl	801932c <iprintf>
 801446a:	f06f 030f 	mvn.w	r3, #15
 801446e:	e015      	b.n	801449c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d109      	bne.n	801448a <udp_send+0x3e>
 8014476:	4b0b      	ldr	r3, [pc, #44]	; (80144a4 <udp_send+0x58>)
 8014478:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801447c:	490c      	ldr	r1, [pc, #48]	; (80144b0 <udp_send+0x64>)
 801447e:	480b      	ldr	r0, [pc, #44]	; (80144ac <udp_send+0x60>)
 8014480:	f004 ff54 	bl	801932c <iprintf>
 8014484:	f06f 030f 	mvn.w	r3, #15
 8014488:	e008      	b.n	801449c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	1d1a      	adds	r2, r3, #4
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	8a9b      	ldrh	r3, [r3, #20]
 8014492:	6839      	ldr	r1, [r7, #0]
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f000 f80d 	bl	80144b4 <udp_sendto>
 801449a:	4603      	mov	r3, r0
}
 801449c:	4618      	mov	r0, r3
 801449e:	3708      	adds	r7, #8
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}
 80144a4:	0801d310 	.word	0x0801d310
 80144a8:	0801d404 	.word	0x0801d404
 80144ac:	0801d364 	.word	0x0801d364
 80144b0:	0801d41c 	.word	0x0801d41c

080144b4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b088      	sub	sp, #32
 80144b8:	af02      	add	r7, sp, #8
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
 80144c0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d109      	bne.n	80144dc <udp_sendto+0x28>
 80144c8:	4b23      	ldr	r3, [pc, #140]	; (8014558 <udp_sendto+0xa4>)
 80144ca:	f44f 7206 	mov.w	r2, #536	; 0x218
 80144ce:	4923      	ldr	r1, [pc, #140]	; (801455c <udp_sendto+0xa8>)
 80144d0:	4823      	ldr	r0, [pc, #140]	; (8014560 <udp_sendto+0xac>)
 80144d2:	f004 ff2b 	bl	801932c <iprintf>
 80144d6:	f06f 030f 	mvn.w	r3, #15
 80144da:	e038      	b.n	801454e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d109      	bne.n	80144f6 <udp_sendto+0x42>
 80144e2:	4b1d      	ldr	r3, [pc, #116]	; (8014558 <udp_sendto+0xa4>)
 80144e4:	f240 2219 	movw	r2, #537	; 0x219
 80144e8:	491e      	ldr	r1, [pc, #120]	; (8014564 <udp_sendto+0xb0>)
 80144ea:	481d      	ldr	r0, [pc, #116]	; (8014560 <udp_sendto+0xac>)
 80144ec:	f004 ff1e 	bl	801932c <iprintf>
 80144f0:	f06f 030f 	mvn.w	r3, #15
 80144f4:	e02b      	b.n	801454e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d109      	bne.n	8014510 <udp_sendto+0x5c>
 80144fc:	4b16      	ldr	r3, [pc, #88]	; (8014558 <udp_sendto+0xa4>)
 80144fe:	f240 221a 	movw	r2, #538	; 0x21a
 8014502:	4919      	ldr	r1, [pc, #100]	; (8014568 <udp_sendto+0xb4>)
 8014504:	4816      	ldr	r0, [pc, #88]	; (8014560 <udp_sendto+0xac>)
 8014506:	f004 ff11 	bl	801932c <iprintf>
 801450a:	f06f 030f 	mvn.w	r3, #15
 801450e:	e01e      	b.n	801454e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	7a1b      	ldrb	r3, [r3, #8]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d006      	beq.n	8014526 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	7a1b      	ldrb	r3, [r3, #8]
 801451c:	4618      	mov	r0, r3
 801451e:	f7f8 fd51 	bl	800cfc4 <netif_get_by_index>
 8014522:	6178      	str	r0, [r7, #20]
 8014524:	e003      	b.n	801452e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f003 fac0 	bl	8017aac <ip4_route>
 801452c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d102      	bne.n	801453a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014534:	f06f 0303 	mvn.w	r3, #3
 8014538:	e009      	b.n	801454e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801453a:	887a      	ldrh	r2, [r7, #2]
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	9300      	str	r3, [sp, #0]
 8014540:	4613      	mov	r3, r2
 8014542:	687a      	ldr	r2, [r7, #4]
 8014544:	68b9      	ldr	r1, [r7, #8]
 8014546:	68f8      	ldr	r0, [r7, #12]
 8014548:	f000 f810 	bl	801456c <udp_sendto_if>
 801454c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801454e:	4618      	mov	r0, r3
 8014550:	3718      	adds	r7, #24
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	0801d310 	.word	0x0801d310
 801455c:	0801d434 	.word	0x0801d434
 8014560:	0801d364 	.word	0x0801d364
 8014564:	0801d44c 	.word	0x0801d44c
 8014568:	0801d468 	.word	0x0801d468

0801456c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b088      	sub	sp, #32
 8014570:	af02      	add	r7, sp, #8
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	607a      	str	r2, [r7, #4]
 8014578:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d109      	bne.n	8014594 <udp_sendto_if+0x28>
 8014580:	4b2e      	ldr	r3, [pc, #184]	; (801463c <udp_sendto_if+0xd0>)
 8014582:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014586:	492e      	ldr	r1, [pc, #184]	; (8014640 <udp_sendto_if+0xd4>)
 8014588:	482e      	ldr	r0, [pc, #184]	; (8014644 <udp_sendto_if+0xd8>)
 801458a:	f004 fecf 	bl	801932c <iprintf>
 801458e:	f06f 030f 	mvn.w	r3, #15
 8014592:	e04f      	b.n	8014634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d109      	bne.n	80145ae <udp_sendto_if+0x42>
 801459a:	4b28      	ldr	r3, [pc, #160]	; (801463c <udp_sendto_if+0xd0>)
 801459c:	f240 2281 	movw	r2, #641	; 0x281
 80145a0:	4929      	ldr	r1, [pc, #164]	; (8014648 <udp_sendto_if+0xdc>)
 80145a2:	4828      	ldr	r0, [pc, #160]	; (8014644 <udp_sendto_if+0xd8>)
 80145a4:	f004 fec2 	bl	801932c <iprintf>
 80145a8:	f06f 030f 	mvn.w	r3, #15
 80145ac:	e042      	b.n	8014634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d109      	bne.n	80145c8 <udp_sendto_if+0x5c>
 80145b4:	4b21      	ldr	r3, [pc, #132]	; (801463c <udp_sendto_if+0xd0>)
 80145b6:	f240 2282 	movw	r2, #642	; 0x282
 80145ba:	4924      	ldr	r1, [pc, #144]	; (801464c <udp_sendto_if+0xe0>)
 80145bc:	4821      	ldr	r0, [pc, #132]	; (8014644 <udp_sendto_if+0xd8>)
 80145be:	f004 feb5 	bl	801932c <iprintf>
 80145c2:	f06f 030f 	mvn.w	r3, #15
 80145c6:	e035      	b.n	8014634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80145c8:	6a3b      	ldr	r3, [r7, #32]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d109      	bne.n	80145e2 <udp_sendto_if+0x76>
 80145ce:	4b1b      	ldr	r3, [pc, #108]	; (801463c <udp_sendto_if+0xd0>)
 80145d0:	f240 2283 	movw	r2, #643	; 0x283
 80145d4:	491e      	ldr	r1, [pc, #120]	; (8014650 <udp_sendto_if+0xe4>)
 80145d6:	481b      	ldr	r0, [pc, #108]	; (8014644 <udp_sendto_if+0xd8>)
 80145d8:	f004 fea8 	bl	801932c <iprintf>
 80145dc:	f06f 030f 	mvn.w	r3, #15
 80145e0:	e028      	b.n	8014634 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d009      	beq.n	80145fc <udp_sendto_if+0x90>
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d005      	beq.n	80145fc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80145f8:	2be0      	cmp	r3, #224	; 0xe0
 80145fa:	d103      	bne.n	8014604 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80145fc:	6a3b      	ldr	r3, [r7, #32]
 80145fe:	3304      	adds	r3, #4
 8014600:	617b      	str	r3, [r7, #20]
 8014602:	e00b      	b.n	801461c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	681a      	ldr	r2, [r3, #0]
 8014608:	6a3b      	ldr	r3, [r7, #32]
 801460a:	3304      	adds	r3, #4
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	429a      	cmp	r2, r3
 8014610:	d002      	beq.n	8014618 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014612:	f06f 0303 	mvn.w	r3, #3
 8014616:	e00d      	b.n	8014634 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801461c:	887a      	ldrh	r2, [r7, #2]
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	9301      	str	r3, [sp, #4]
 8014622:	6a3b      	ldr	r3, [r7, #32]
 8014624:	9300      	str	r3, [sp, #0]
 8014626:	4613      	mov	r3, r2
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	68b9      	ldr	r1, [r7, #8]
 801462c:	68f8      	ldr	r0, [r7, #12]
 801462e:	f000 f811 	bl	8014654 <udp_sendto_if_src>
 8014632:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014634:	4618      	mov	r0, r3
 8014636:	3718      	adds	r7, #24
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	0801d310 	.word	0x0801d310
 8014640:	0801d484 	.word	0x0801d484
 8014644:	0801d364 	.word	0x0801d364
 8014648:	0801d4a0 	.word	0x0801d4a0
 801464c:	0801d4bc 	.word	0x0801d4bc
 8014650:	0801d4dc 	.word	0x0801d4dc

08014654 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b08c      	sub	sp, #48	; 0x30
 8014658:	af04      	add	r7, sp, #16
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	607a      	str	r2, [r7, #4]
 8014660:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d109      	bne.n	801467c <udp_sendto_if_src+0x28>
 8014668:	4b65      	ldr	r3, [pc, #404]	; (8014800 <udp_sendto_if_src+0x1ac>)
 801466a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801466e:	4965      	ldr	r1, [pc, #404]	; (8014804 <udp_sendto_if_src+0x1b0>)
 8014670:	4865      	ldr	r0, [pc, #404]	; (8014808 <udp_sendto_if_src+0x1b4>)
 8014672:	f004 fe5b 	bl	801932c <iprintf>
 8014676:	f06f 030f 	mvn.w	r3, #15
 801467a:	e0bc      	b.n	80147f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d109      	bne.n	8014696 <udp_sendto_if_src+0x42>
 8014682:	4b5f      	ldr	r3, [pc, #380]	; (8014800 <udp_sendto_if_src+0x1ac>)
 8014684:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014688:	4960      	ldr	r1, [pc, #384]	; (801480c <udp_sendto_if_src+0x1b8>)
 801468a:	485f      	ldr	r0, [pc, #380]	; (8014808 <udp_sendto_if_src+0x1b4>)
 801468c:	f004 fe4e 	bl	801932c <iprintf>
 8014690:	f06f 030f 	mvn.w	r3, #15
 8014694:	e0af      	b.n	80147f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d109      	bne.n	80146b0 <udp_sendto_if_src+0x5c>
 801469c:	4b58      	ldr	r3, [pc, #352]	; (8014800 <udp_sendto_if_src+0x1ac>)
 801469e:	f240 22d3 	movw	r2, #723	; 0x2d3
 80146a2:	495b      	ldr	r1, [pc, #364]	; (8014810 <udp_sendto_if_src+0x1bc>)
 80146a4:	4858      	ldr	r0, [pc, #352]	; (8014808 <udp_sendto_if_src+0x1b4>)
 80146a6:	f004 fe41 	bl	801932c <iprintf>
 80146aa:	f06f 030f 	mvn.w	r3, #15
 80146ae:	e0a2      	b.n	80147f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80146b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d109      	bne.n	80146ca <udp_sendto_if_src+0x76>
 80146b6:	4b52      	ldr	r3, [pc, #328]	; (8014800 <udp_sendto_if_src+0x1ac>)
 80146b8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80146bc:	4955      	ldr	r1, [pc, #340]	; (8014814 <udp_sendto_if_src+0x1c0>)
 80146be:	4852      	ldr	r0, [pc, #328]	; (8014808 <udp_sendto_if_src+0x1b4>)
 80146c0:	f004 fe34 	bl	801932c <iprintf>
 80146c4:	f06f 030f 	mvn.w	r3, #15
 80146c8:	e095      	b.n	80147f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80146ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d109      	bne.n	80146e4 <udp_sendto_if_src+0x90>
 80146d0:	4b4b      	ldr	r3, [pc, #300]	; (8014800 <udp_sendto_if_src+0x1ac>)
 80146d2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80146d6:	4950      	ldr	r1, [pc, #320]	; (8014818 <udp_sendto_if_src+0x1c4>)
 80146d8:	484b      	ldr	r0, [pc, #300]	; (8014808 <udp_sendto_if_src+0x1b4>)
 80146da:	f004 fe27 	bl	801932c <iprintf>
 80146de:	f06f 030f 	mvn.w	r3, #15
 80146e2:	e088      	b.n	80147f6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	8a5b      	ldrh	r3, [r3, #18]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d10f      	bne.n	801470c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80146ec:	68f9      	ldr	r1, [r7, #12]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	8a5b      	ldrh	r3, [r3, #18]
 80146f2:	461a      	mov	r2, r3
 80146f4:	68f8      	ldr	r0, [r7, #12]
 80146f6:	f000 f893 	bl	8014820 <udp_bind>
 80146fa:	4603      	mov	r3, r0
 80146fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80146fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d002      	beq.n	801470c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014706:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801470a:	e074      	b.n	80147f6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	891b      	ldrh	r3, [r3, #8]
 8014710:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014714:	4293      	cmp	r3, r2
 8014716:	d902      	bls.n	801471e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014718:	f04f 33ff 	mov.w	r3, #4294967295
 801471c:	e06b      	b.n	80147f6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801471e:	2108      	movs	r1, #8
 8014720:	68b8      	ldr	r0, [r7, #8]
 8014722:	f7f8 ff7b 	bl	800d61c <pbuf_add_header>
 8014726:	4603      	mov	r3, r0
 8014728:	2b00      	cmp	r3, #0
 801472a:	d015      	beq.n	8014758 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801472c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014730:	2108      	movs	r1, #8
 8014732:	2022      	movs	r0, #34	; 0x22
 8014734:	f7f8 fd28 	bl	800d188 <pbuf_alloc>
 8014738:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d102      	bne.n	8014746 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014740:	f04f 33ff 	mov.w	r3, #4294967295
 8014744:	e057      	b.n	80147f6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	891b      	ldrh	r3, [r3, #8]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d006      	beq.n	801475c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801474e:	68b9      	ldr	r1, [r7, #8]
 8014750:	69f8      	ldr	r0, [r7, #28]
 8014752:	f7f9 f91d 	bl	800d990 <pbuf_chain>
 8014756:	e001      	b.n	801475c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014758:	68bb      	ldr	r3, [r7, #8]
 801475a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801475c:	69fb      	ldr	r3, [r7, #28]
 801475e:	895b      	ldrh	r3, [r3, #10]
 8014760:	2b07      	cmp	r3, #7
 8014762:	d806      	bhi.n	8014772 <udp_sendto_if_src+0x11e>
 8014764:	4b26      	ldr	r3, [pc, #152]	; (8014800 <udp_sendto_if_src+0x1ac>)
 8014766:	f240 320e 	movw	r2, #782	; 0x30e
 801476a:	492c      	ldr	r1, [pc, #176]	; (801481c <udp_sendto_if_src+0x1c8>)
 801476c:	4826      	ldr	r0, [pc, #152]	; (8014808 <udp_sendto_if_src+0x1b4>)
 801476e:	f004 fddd 	bl	801932c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014772:	69fb      	ldr	r3, [r7, #28]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	8a5b      	ldrh	r3, [r3, #18]
 801477c:	4618      	mov	r0, r3
 801477e:	f7f7 fbf7 	bl	800bf70 <lwip_htons>
 8014782:	4603      	mov	r3, r0
 8014784:	461a      	mov	r2, r3
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801478a:	887b      	ldrh	r3, [r7, #2]
 801478c:	4618      	mov	r0, r3
 801478e:	f7f7 fbef 	bl	800bf70 <lwip_htons>
 8014792:	4603      	mov	r3, r0
 8014794:	461a      	mov	r2, r3
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	2200      	movs	r2, #0
 801479e:	719a      	strb	r2, [r3, #6]
 80147a0:	2200      	movs	r2, #0
 80147a2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	891b      	ldrh	r3, [r3, #8]
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7f7 fbe1 	bl	800bf70 <lwip_htons>
 80147ae:	4603      	mov	r3, r0
 80147b0:	461a      	mov	r2, r3
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80147b6:	2311      	movs	r3, #17
 80147b8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	7adb      	ldrb	r3, [r3, #11]
 80147be:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	7a9b      	ldrb	r3, [r3, #10]
 80147c4:	7cb9      	ldrb	r1, [r7, #18]
 80147c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147c8:	9202      	str	r2, [sp, #8]
 80147ca:	7cfa      	ldrb	r2, [r7, #19]
 80147cc:	9201      	str	r2, [sp, #4]
 80147ce:	9300      	str	r3, [sp, #0]
 80147d0:	460b      	mov	r3, r1
 80147d2:	687a      	ldr	r2, [r7, #4]
 80147d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80147d6:	69f8      	ldr	r0, [r7, #28]
 80147d8:	f003 fb6c 	bl	8017eb4 <ip4_output_if_src>
 80147dc:	4603      	mov	r3, r0
 80147de:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80147e0:	69fa      	ldr	r2, [r7, #28]
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	429a      	cmp	r2, r3
 80147e6:	d004      	beq.n	80147f2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80147e8:	69f8      	ldr	r0, [r7, #28]
 80147ea:	f7f8 ffad 	bl	800d748 <pbuf_free>
    q = NULL;
 80147ee:	2300      	movs	r3, #0
 80147f0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80147f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3720      	adds	r7, #32
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	bf00      	nop
 8014800:	0801d310 	.word	0x0801d310
 8014804:	0801d4fc 	.word	0x0801d4fc
 8014808:	0801d364 	.word	0x0801d364
 801480c:	0801d51c 	.word	0x0801d51c
 8014810:	0801d53c 	.word	0x0801d53c
 8014814:	0801d560 	.word	0x0801d560
 8014818:	0801d584 	.word	0x0801d584
 801481c:	0801d5a8 	.word	0x0801d5a8

08014820 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b086      	sub	sp, #24
 8014824:	af00      	add	r7, sp, #0
 8014826:	60f8      	str	r0, [r7, #12]
 8014828:	60b9      	str	r1, [r7, #8]
 801482a:	4613      	mov	r3, r2
 801482c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d101      	bne.n	8014838 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014834:	4b39      	ldr	r3, [pc, #228]	; (801491c <udp_bind+0xfc>)
 8014836:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d109      	bne.n	8014852 <udp_bind+0x32>
 801483e:	4b38      	ldr	r3, [pc, #224]	; (8014920 <udp_bind+0x100>)
 8014840:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014844:	4937      	ldr	r1, [pc, #220]	; (8014924 <udp_bind+0x104>)
 8014846:	4838      	ldr	r0, [pc, #224]	; (8014928 <udp_bind+0x108>)
 8014848:	f004 fd70 	bl	801932c <iprintf>
 801484c:	f06f 030f 	mvn.w	r3, #15
 8014850:	e060      	b.n	8014914 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014852:	2300      	movs	r3, #0
 8014854:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014856:	4b35      	ldr	r3, [pc, #212]	; (801492c <udp_bind+0x10c>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	617b      	str	r3, [r7, #20]
 801485c:	e009      	b.n	8014872 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801485e:	68fa      	ldr	r2, [r7, #12]
 8014860:	697b      	ldr	r3, [r7, #20]
 8014862:	429a      	cmp	r2, r3
 8014864:	d102      	bne.n	801486c <udp_bind+0x4c>
      rebind = 1;
 8014866:	2301      	movs	r3, #1
 8014868:	74fb      	strb	r3, [r7, #19]
      break;
 801486a:	e005      	b.n	8014878 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	68db      	ldr	r3, [r3, #12]
 8014870:	617b      	str	r3, [r7, #20]
 8014872:	697b      	ldr	r3, [r7, #20]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d1f2      	bne.n	801485e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014878:	88fb      	ldrh	r3, [r7, #6]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d109      	bne.n	8014892 <udp_bind+0x72>
    port = udp_new_port();
 801487e:	f7ff fc35 	bl	80140ec <udp_new_port>
 8014882:	4603      	mov	r3, r0
 8014884:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014886:	88fb      	ldrh	r3, [r7, #6]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d12c      	bne.n	80148e6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801488c:	f06f 0307 	mvn.w	r3, #7
 8014890:	e040      	b.n	8014914 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014892:	4b26      	ldr	r3, [pc, #152]	; (801492c <udp_bind+0x10c>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	617b      	str	r3, [r7, #20]
 8014898:	e022      	b.n	80148e0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801489a:	68fa      	ldr	r2, [r7, #12]
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d01b      	beq.n	80148da <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	8a5b      	ldrh	r3, [r3, #18]
 80148a6:	88fa      	ldrh	r2, [r7, #6]
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d116      	bne.n	80148da <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	681a      	ldr	r2, [r3, #0]
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d00d      	beq.n	80148d4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d00a      	beq.n	80148d4 <udp_bind+0xb4>
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d006      	beq.n	80148d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80148c6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d003      	beq.n	80148d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d102      	bne.n	80148da <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80148d4:	f06f 0307 	mvn.w	r3, #7
 80148d8:	e01c      	b.n	8014914 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	68db      	ldr	r3, [r3, #12]
 80148de:	617b      	str	r3, [r7, #20]
 80148e0:	697b      	ldr	r3, [r7, #20]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d1d9      	bne.n	801489a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80148e6:	68bb      	ldr	r3, [r7, #8]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d002      	beq.n	80148f2 <udp_bind+0xd2>
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	e000      	b.n	80148f4 <udp_bind+0xd4>
 80148f2:	2300      	movs	r3, #0
 80148f4:	68fa      	ldr	r2, [r7, #12]
 80148f6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	88fa      	ldrh	r2, [r7, #6]
 80148fc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80148fe:	7cfb      	ldrb	r3, [r7, #19]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d106      	bne.n	8014912 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014904:	4b09      	ldr	r3, [pc, #36]	; (801492c <udp_bind+0x10c>)
 8014906:	681a      	ldr	r2, [r3, #0]
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801490c:	4a07      	ldr	r2, [pc, #28]	; (801492c <udp_bind+0x10c>)
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014912:	2300      	movs	r3, #0
}
 8014914:	4618      	mov	r0, r3
 8014916:	3718      	adds	r7, #24
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}
 801491c:	0801e258 	.word	0x0801e258
 8014920:	0801d310 	.word	0x0801d310
 8014924:	0801d5d8 	.word	0x0801d5d8
 8014928:	0801d364 	.word	0x0801d364
 801492c:	2000b14c 	.word	0x2000b14c

08014930 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8014930:	b480      	push	{r7}
 8014932:	b083      	sub	sp, #12
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
 8014938:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d007      	beq.n	8014950 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014946:	3301      	adds	r3, #1
 8014948:	b2da      	uxtb	r2, r3
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 801494e:	e002      	b.n	8014956 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2200      	movs	r2, #0
 8014954:	721a      	strb	r2, [r3, #8]
}
 8014956:	bf00      	nop
 8014958:	370c      	adds	r7, #12
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr
	...

08014964 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b086      	sub	sp, #24
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	4613      	mov	r3, r2
 8014970:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d109      	bne.n	801498c <udp_connect+0x28>
 8014978:	4b2c      	ldr	r3, [pc, #176]	; (8014a2c <udp_connect+0xc8>)
 801497a:	f240 4235 	movw	r2, #1077	; 0x435
 801497e:	492c      	ldr	r1, [pc, #176]	; (8014a30 <udp_connect+0xcc>)
 8014980:	482c      	ldr	r0, [pc, #176]	; (8014a34 <udp_connect+0xd0>)
 8014982:	f004 fcd3 	bl	801932c <iprintf>
 8014986:	f06f 030f 	mvn.w	r3, #15
 801498a:	e04b      	b.n	8014a24 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d109      	bne.n	80149a6 <udp_connect+0x42>
 8014992:	4b26      	ldr	r3, [pc, #152]	; (8014a2c <udp_connect+0xc8>)
 8014994:	f240 4236 	movw	r2, #1078	; 0x436
 8014998:	4927      	ldr	r1, [pc, #156]	; (8014a38 <udp_connect+0xd4>)
 801499a:	4826      	ldr	r0, [pc, #152]	; (8014a34 <udp_connect+0xd0>)
 801499c:	f004 fcc6 	bl	801932c <iprintf>
 80149a0:	f06f 030f 	mvn.w	r3, #15
 80149a4:	e03e      	b.n	8014a24 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	8a5b      	ldrh	r3, [r3, #18]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d10f      	bne.n	80149ce <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80149ae:	68f9      	ldr	r1, [r7, #12]
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	8a5b      	ldrh	r3, [r3, #18]
 80149b4:	461a      	mov	r2, r3
 80149b6:	68f8      	ldr	r0, [r7, #12]
 80149b8:	f7ff ff32 	bl	8014820 <udp_bind>
 80149bc:	4603      	mov	r3, r0
 80149be:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80149c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d002      	beq.n	80149ce <udp_connect+0x6a>
      return err;
 80149c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80149cc:	e02a      	b.n	8014a24 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d002      	beq.n	80149da <udp_connect+0x76>
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	e000      	b.n	80149dc <udp_connect+0x78>
 80149da:	2300      	movs	r3, #0
 80149dc:	68fa      	ldr	r2, [r7, #12]
 80149de:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	88fa      	ldrh	r2, [r7, #6]
 80149e4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	7c1b      	ldrb	r3, [r3, #16]
 80149ea:	f043 0304 	orr.w	r3, r3, #4
 80149ee:	b2da      	uxtb	r2, r3
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80149f4:	4b11      	ldr	r3, [pc, #68]	; (8014a3c <udp_connect+0xd8>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	617b      	str	r3, [r7, #20]
 80149fa:	e008      	b.n	8014a0e <udp_connect+0xaa>
    if (pcb == ipcb) {
 80149fc:	68fa      	ldr	r2, [r7, #12]
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d101      	bne.n	8014a08 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014a04:	2300      	movs	r3, #0
 8014a06:	e00d      	b.n	8014a24 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014a08:	697b      	ldr	r3, [r7, #20]
 8014a0a:	68db      	ldr	r3, [r3, #12]
 8014a0c:	617b      	str	r3, [r7, #20]
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d1f3      	bne.n	80149fc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014a14:	4b09      	ldr	r3, [pc, #36]	; (8014a3c <udp_connect+0xd8>)
 8014a16:	681a      	ldr	r2, [r3, #0]
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014a1c:	4a07      	ldr	r2, [pc, #28]	; (8014a3c <udp_connect+0xd8>)
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014a22:	2300      	movs	r3, #0
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3718      	adds	r7, #24
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	0801d310 	.word	0x0801d310
 8014a30:	0801d5f0 	.word	0x0801d5f0
 8014a34:	0801d364 	.word	0x0801d364
 8014a38:	0801d60c 	.word	0x0801d60c
 8014a3c:	2000b14c 	.word	0x2000b14c

08014a40 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b084      	sub	sp, #16
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d107      	bne.n	8014a62 <udp_recv+0x22>
 8014a52:	4b08      	ldr	r3, [pc, #32]	; (8014a74 <udp_recv+0x34>)
 8014a54:	f240 428a 	movw	r2, #1162	; 0x48a
 8014a58:	4907      	ldr	r1, [pc, #28]	; (8014a78 <udp_recv+0x38>)
 8014a5a:	4808      	ldr	r0, [pc, #32]	; (8014a7c <udp_recv+0x3c>)
 8014a5c:	f004 fc66 	bl	801932c <iprintf>
 8014a60:	e005      	b.n	8014a6e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	68ba      	ldr	r2, [r7, #8]
 8014a66:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	61da      	str	r2, [r3, #28]
}
 8014a6e:	3710      	adds	r7, #16
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bd80      	pop	{r7, pc}
 8014a74:	0801d310 	.word	0x0801d310
 8014a78:	0801d644 	.word	0x0801d644
 8014a7c:	0801d364 	.word	0x0801d364

08014a80 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b084      	sub	sp, #16
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d107      	bne.n	8014a9e <udp_remove+0x1e>
 8014a8e:	4b19      	ldr	r3, [pc, #100]	; (8014af4 <udp_remove+0x74>)
 8014a90:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014a94:	4918      	ldr	r1, [pc, #96]	; (8014af8 <udp_remove+0x78>)
 8014a96:	4819      	ldr	r0, [pc, #100]	; (8014afc <udp_remove+0x7c>)
 8014a98:	f004 fc48 	bl	801932c <iprintf>
 8014a9c:	e026      	b.n	8014aec <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014a9e:	4b18      	ldr	r3, [pc, #96]	; (8014b00 <udp_remove+0x80>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d105      	bne.n	8014ab4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014aa8:	4b15      	ldr	r3, [pc, #84]	; (8014b00 <udp_remove+0x80>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	68db      	ldr	r3, [r3, #12]
 8014aae:	4a14      	ldr	r2, [pc, #80]	; (8014b00 <udp_remove+0x80>)
 8014ab0:	6013      	str	r3, [r2, #0]
 8014ab2:	e017      	b.n	8014ae4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014ab4:	4b12      	ldr	r3, [pc, #72]	; (8014b00 <udp_remove+0x80>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	60fb      	str	r3, [r7, #12]
 8014aba:	e010      	b.n	8014ade <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	68db      	ldr	r3, [r3, #12]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d009      	beq.n	8014ad8 <udp_remove+0x58>
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	68db      	ldr	r3, [r3, #12]
 8014ac8:	687a      	ldr	r2, [r7, #4]
 8014aca:	429a      	cmp	r2, r3
 8014acc:	d104      	bne.n	8014ad8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	68da      	ldr	r2, [r3, #12]
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	60da      	str	r2, [r3, #12]
        break;
 8014ad6:	e005      	b.n	8014ae4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	68db      	ldr	r3, [r3, #12]
 8014adc:	60fb      	str	r3, [r7, #12]
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d1eb      	bne.n	8014abc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014ae4:	6879      	ldr	r1, [r7, #4]
 8014ae6:	2000      	movs	r0, #0
 8014ae8:	f7f7 ff4a 	bl	800c980 <memp_free>
}
 8014aec:	3710      	adds	r7, #16
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	0801d310 	.word	0x0801d310
 8014af8:	0801d65c 	.word	0x0801d65c
 8014afc:	0801d364 	.word	0x0801d364
 8014b00:	2000b14c 	.word	0x2000b14c

08014b04 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b082      	sub	sp, #8
 8014b08:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014b0a:	2000      	movs	r0, #0
 8014b0c:	f7f7 fee6 	bl	800c8dc <memp_malloc>
 8014b10:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d007      	beq.n	8014b28 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014b18:	2220      	movs	r2, #32
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f004 fbfc 	bl	801931a <memset>
    pcb->ttl = UDP_TTL;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	22ff      	movs	r2, #255	; 0xff
 8014b26:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014b28:	687b      	ldr	r3, [r7, #4]
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3708      	adds	r7, #8
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b084      	sub	sp, #16
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	4603      	mov	r3, r0
 8014b3a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014b3c:	f7ff ffe2 	bl	8014b04 <udp_new>
 8014b40:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014b42:	68fb      	ldr	r3, [r7, #12]
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	3710      	adds	r7, #16
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}

08014b4c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014b4c:	b480      	push	{r7}
 8014b4e:	b085      	sub	sp, #20
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d01e      	beq.n	8014b9a <udp_netif_ip_addr_changed+0x4e>
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d01a      	beq.n	8014b9a <udp_netif_ip_addr_changed+0x4e>
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d017      	beq.n	8014b9a <udp_netif_ip_addr_changed+0x4e>
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d013      	beq.n	8014b9a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014b72:	4b0d      	ldr	r3, [pc, #52]	; (8014ba8 <udp_netif_ip_addr_changed+0x5c>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	60fb      	str	r3, [r7, #12]
 8014b78:	e00c      	b.n	8014b94 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	681a      	ldr	r2, [r3, #0]
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d103      	bne.n	8014b8e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	681a      	ldr	r2, [r3, #0]
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	68db      	ldr	r3, [r3, #12]
 8014b92:	60fb      	str	r3, [r7, #12]
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d1ef      	bne.n	8014b7a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014b9a:	bf00      	nop
 8014b9c:	3714      	adds	r7, #20
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba4:	4770      	bx	lr
 8014ba6:	bf00      	nop
 8014ba8:	2000b14c 	.word	0x2000b14c

08014bac <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014bb0:	4b20      	ldr	r3, [pc, #128]	; (8014c34 <dhcp_inc_pcb_refcount+0x88>)
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d133      	bne.n	8014c20 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014bb8:	4b1f      	ldr	r3, [pc, #124]	; (8014c38 <dhcp_inc_pcb_refcount+0x8c>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d005      	beq.n	8014bcc <dhcp_inc_pcb_refcount+0x20>
 8014bc0:	4b1e      	ldr	r3, [pc, #120]	; (8014c3c <dhcp_inc_pcb_refcount+0x90>)
 8014bc2:	22e5      	movs	r2, #229	; 0xe5
 8014bc4:	491e      	ldr	r1, [pc, #120]	; (8014c40 <dhcp_inc_pcb_refcount+0x94>)
 8014bc6:	481f      	ldr	r0, [pc, #124]	; (8014c44 <dhcp_inc_pcb_refcount+0x98>)
 8014bc8:	f004 fbb0 	bl	801932c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014bcc:	f7ff ff9a 	bl	8014b04 <udp_new>
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	4b19      	ldr	r3, [pc, #100]	; (8014c38 <dhcp_inc_pcb_refcount+0x8c>)
 8014bd4:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8014bd6:	4b18      	ldr	r3, [pc, #96]	; (8014c38 <dhcp_inc_pcb_refcount+0x8c>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d102      	bne.n	8014be4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014bde:	f04f 33ff 	mov.w	r3, #4294967295
 8014be2:	e024      	b.n	8014c2e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014be4:	4b14      	ldr	r3, [pc, #80]	; (8014c38 <dhcp_inc_pcb_refcount+0x8c>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	7a5a      	ldrb	r2, [r3, #9]
 8014bea:	4b13      	ldr	r3, [pc, #76]	; (8014c38 <dhcp_inc_pcb_refcount+0x8c>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	f042 0220 	orr.w	r2, r2, #32
 8014bf2:	b2d2      	uxtb	r2, r2
 8014bf4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014bf6:	4b10      	ldr	r3, [pc, #64]	; (8014c38 <dhcp_inc_pcb_refcount+0x8c>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	2244      	movs	r2, #68	; 0x44
 8014bfc:	4912      	ldr	r1, [pc, #72]	; (8014c48 <dhcp_inc_pcb_refcount+0x9c>)
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7ff fe0e 	bl	8014820 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014c04:	4b0c      	ldr	r3, [pc, #48]	; (8014c38 <dhcp_inc_pcb_refcount+0x8c>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2243      	movs	r2, #67	; 0x43
 8014c0a:	490f      	ldr	r1, [pc, #60]	; (8014c48 <dhcp_inc_pcb_refcount+0x9c>)
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7ff fea9 	bl	8014964 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014c12:	4b09      	ldr	r3, [pc, #36]	; (8014c38 <dhcp_inc_pcb_refcount+0x8c>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	2200      	movs	r2, #0
 8014c18:	490c      	ldr	r1, [pc, #48]	; (8014c4c <dhcp_inc_pcb_refcount+0xa0>)
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7ff ff10 	bl	8014a40 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014c20:	4b04      	ldr	r3, [pc, #16]	; (8014c34 <dhcp_inc_pcb_refcount+0x88>)
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	3301      	adds	r3, #1
 8014c26:	b2da      	uxtb	r2, r3
 8014c28:	4b02      	ldr	r3, [pc, #8]	; (8014c34 <dhcp_inc_pcb_refcount+0x88>)
 8014c2a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014c2c:	2300      	movs	r3, #0
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	bd80      	pop	{r7, pc}
 8014c32:	bf00      	nop
 8014c34:	20004294 	.word	0x20004294
 8014c38:	20004290 	.word	0x20004290
 8014c3c:	0801d674 	.word	0x0801d674
 8014c40:	0801d6ac 	.word	0x0801d6ac
 8014c44:	0801d6d4 	.word	0x0801d6d4
 8014c48:	0801e258 	.word	0x0801e258
 8014c4c:	08016505 	.word	0x08016505

08014c50 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014c54:	4b0e      	ldr	r3, [pc, #56]	; (8014c90 <dhcp_dec_pcb_refcount+0x40>)
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d105      	bne.n	8014c68 <dhcp_dec_pcb_refcount+0x18>
 8014c5c:	4b0d      	ldr	r3, [pc, #52]	; (8014c94 <dhcp_dec_pcb_refcount+0x44>)
 8014c5e:	22ff      	movs	r2, #255	; 0xff
 8014c60:	490d      	ldr	r1, [pc, #52]	; (8014c98 <dhcp_dec_pcb_refcount+0x48>)
 8014c62:	480e      	ldr	r0, [pc, #56]	; (8014c9c <dhcp_dec_pcb_refcount+0x4c>)
 8014c64:	f004 fb62 	bl	801932c <iprintf>
  dhcp_pcb_refcount--;
 8014c68:	4b09      	ldr	r3, [pc, #36]	; (8014c90 <dhcp_dec_pcb_refcount+0x40>)
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	3b01      	subs	r3, #1
 8014c6e:	b2da      	uxtb	r2, r3
 8014c70:	4b07      	ldr	r3, [pc, #28]	; (8014c90 <dhcp_dec_pcb_refcount+0x40>)
 8014c72:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014c74:	4b06      	ldr	r3, [pc, #24]	; (8014c90 <dhcp_dec_pcb_refcount+0x40>)
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d107      	bne.n	8014c8c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014c7c:	4b08      	ldr	r3, [pc, #32]	; (8014ca0 <dhcp_dec_pcb_refcount+0x50>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	4618      	mov	r0, r3
 8014c82:	f7ff fefd 	bl	8014a80 <udp_remove>
    dhcp_pcb = NULL;
 8014c86:	4b06      	ldr	r3, [pc, #24]	; (8014ca0 <dhcp_dec_pcb_refcount+0x50>)
 8014c88:	2200      	movs	r2, #0
 8014c8a:	601a      	str	r2, [r3, #0]
  }
}
 8014c8c:	bf00      	nop
 8014c8e:	bd80      	pop	{r7, pc}
 8014c90:	20004294 	.word	0x20004294
 8014c94:	0801d674 	.word	0x0801d674
 8014c98:	0801d6fc 	.word	0x0801d6fc
 8014c9c:	0801d6d4 	.word	0x0801d6d4
 8014ca0:	20004290 	.word	0x20004290

08014ca4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b084      	sub	sp, #16
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cb0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014cb2:	210c      	movs	r1, #12
 8014cb4:	68f8      	ldr	r0, [r7, #12]
 8014cb6:	f001 f867 	bl	8015d88 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014cba:	4b06      	ldr	r3, [pc, #24]	; (8014cd4 <dhcp_handle_nak+0x30>)
 8014cbc:	4a05      	ldr	r2, [pc, #20]	; (8014cd4 <dhcp_handle_nak+0x30>)
 8014cbe:	4905      	ldr	r1, [pc, #20]	; (8014cd4 <dhcp_handle_nak+0x30>)
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f7f7 ffff 	bl	800ccc4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f000 fc5a 	bl	8015580 <dhcp_discover>
}
 8014ccc:	bf00      	nop
 8014cce:	3710      	adds	r7, #16
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}
 8014cd4:	0801e258 	.word	0x0801e258

08014cd8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ce4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014ce6:	2108      	movs	r1, #8
 8014ce8:	68f8      	ldr	r0, [r7, #12]
 8014cea:	f001 f84d 	bl	8015d88 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	331c      	adds	r3, #28
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f002 fb4c 	bl	8017394 <etharp_query>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	799b      	ldrb	r3, [r3, #6]
 8014d04:	2bff      	cmp	r3, #255	; 0xff
 8014d06:	d005      	beq.n	8014d14 <dhcp_check+0x3c>
    dhcp->tries++;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	799b      	ldrb	r3, [r3, #6]
 8014d0c:	3301      	adds	r3, #1
 8014d0e:	b2da      	uxtb	r2, r3
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014d14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014d18:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014d1a:	893b      	ldrh	r3, [r7, #8]
 8014d1c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014d20:	4a06      	ldr	r2, [pc, #24]	; (8014d3c <dhcp_check+0x64>)
 8014d22:	fb82 1203 	smull	r1, r2, r2, r3
 8014d26:	1152      	asrs	r2, r2, #5
 8014d28:	17db      	asrs	r3, r3, #31
 8014d2a:	1ad3      	subs	r3, r2, r3
 8014d2c:	b29a      	uxth	r2, r3
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014d32:	bf00      	nop
 8014d34:	3710      	adds	r7, #16
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	10624dd3 	.word	0x10624dd3

08014d40 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b084      	sub	sp, #16
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
 8014d48:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d4e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014d50:	4b0c      	ldr	r3, [pc, #48]	; (8014d84 <dhcp_handle_offer+0x44>)
 8014d52:	789b      	ldrb	r3, [r3, #2]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d011      	beq.n	8014d7c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014d5e:	4b0a      	ldr	r3, [pc, #40]	; (8014d88 <dhcp_handle_offer+0x48>)
 8014d60:	689b      	ldr	r3, [r3, #8]
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7f7 f919 	bl	800bf9a <lwip_htonl>
 8014d68:	4602      	mov	r2, r0
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	691a      	ldr	r2, [r3, #16]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f000 f808 	bl	8014d8c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014d7c:	bf00      	nop
 8014d7e:	3710      	adds	r7, #16
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	2000b150 	.word	0x2000b150
 8014d88:	2000b158 	.word	0x2000b158

08014d8c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014d8c:	b5b0      	push	{r4, r5, r7, lr}
 8014d8e:	b08a      	sub	sp, #40	; 0x28
 8014d90:	af02      	add	r7, sp, #8
 8014d92:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d109      	bne.n	8014dae <dhcp_select+0x22>
 8014d9a:	4b71      	ldr	r3, [pc, #452]	; (8014f60 <dhcp_select+0x1d4>)
 8014d9c:	f240 1277 	movw	r2, #375	; 0x177
 8014da0:	4970      	ldr	r1, [pc, #448]	; (8014f64 <dhcp_select+0x1d8>)
 8014da2:	4871      	ldr	r0, [pc, #452]	; (8014f68 <dhcp_select+0x1dc>)
 8014da4:	f004 fac2 	bl	801932c <iprintf>
 8014da8:	f06f 030f 	mvn.w	r3, #15
 8014dac:	e0d3      	b.n	8014f56 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014db2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014db4:	69bb      	ldr	r3, [r7, #24]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d109      	bne.n	8014dce <dhcp_select+0x42>
 8014dba:	4b69      	ldr	r3, [pc, #420]	; (8014f60 <dhcp_select+0x1d4>)
 8014dbc:	f240 1279 	movw	r2, #377	; 0x179
 8014dc0:	496a      	ldr	r1, [pc, #424]	; (8014f6c <dhcp_select+0x1e0>)
 8014dc2:	4869      	ldr	r0, [pc, #420]	; (8014f68 <dhcp_select+0x1dc>)
 8014dc4:	f004 fab2 	bl	801932c <iprintf>
 8014dc8:	f06f 0305 	mvn.w	r3, #5
 8014dcc:	e0c3      	b.n	8014f56 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014dce:	2101      	movs	r1, #1
 8014dd0:	69b8      	ldr	r0, [r7, #24]
 8014dd2:	f000 ffd9 	bl	8015d88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014dd6:	f107 030c 	add.w	r3, r7, #12
 8014dda:	2203      	movs	r2, #3
 8014ddc:	69b9      	ldr	r1, [r7, #24]
 8014dde:	6878      	ldr	r0, [r7, #4]
 8014de0:	f001 fc5c 	bl	801669c <dhcp_create_msg>
 8014de4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	f000 8085 	beq.w	8014ef8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014df4:	89b8      	ldrh	r0, [r7, #12]
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014dfc:	2302      	movs	r3, #2
 8014dfe:	2239      	movs	r2, #57	; 0x39
 8014e00:	f000 ffdc 	bl	8015dbc <dhcp_option>
 8014e04:	4603      	mov	r3, r0
 8014e06:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014e08:	89b8      	ldrh	r0, [r7, #12]
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e14:	461a      	mov	r2, r3
 8014e16:	f001 f82b 	bl	8015e70 <dhcp_option_short>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014e1e:	89b8      	ldrh	r0, [r7, #12]
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e26:	2304      	movs	r3, #4
 8014e28:	2232      	movs	r2, #50	; 0x32
 8014e2a:	f000 ffc7 	bl	8015dbc <dhcp_option>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014e32:	89bc      	ldrh	r4, [r7, #12]
 8014e34:	693b      	ldr	r3, [r7, #16]
 8014e36:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014e3a:	69bb      	ldr	r3, [r7, #24]
 8014e3c:	69db      	ldr	r3, [r3, #28]
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f7f7 f8ab 	bl	800bf9a <lwip_htonl>
 8014e44:	4603      	mov	r3, r0
 8014e46:	461a      	mov	r2, r3
 8014e48:	4629      	mov	r1, r5
 8014e4a:	4620      	mov	r0, r4
 8014e4c:	f001 f842 	bl	8015ed4 <dhcp_option_long>
 8014e50:	4603      	mov	r3, r0
 8014e52:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014e54:	89b8      	ldrh	r0, [r7, #12]
 8014e56:	693b      	ldr	r3, [r7, #16]
 8014e58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e5c:	2304      	movs	r3, #4
 8014e5e:	2236      	movs	r2, #54	; 0x36
 8014e60:	f000 ffac 	bl	8015dbc <dhcp_option>
 8014e64:	4603      	mov	r3, r0
 8014e66:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014e68:	89bc      	ldrh	r4, [r7, #12]
 8014e6a:	693b      	ldr	r3, [r7, #16]
 8014e6c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014e70:	69bb      	ldr	r3, [r7, #24]
 8014e72:	699b      	ldr	r3, [r3, #24]
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7f7 f890 	bl	800bf9a <lwip_htonl>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	4629      	mov	r1, r5
 8014e80:	4620      	mov	r0, r4
 8014e82:	f001 f827 	bl	8015ed4 <dhcp_option_long>
 8014e86:	4603      	mov	r3, r0
 8014e88:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014e8a:	89b8      	ldrh	r0, [r7, #12]
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e92:	2303      	movs	r3, #3
 8014e94:	2237      	movs	r2, #55	; 0x37
 8014e96:	f000 ff91 	bl	8015dbc <dhcp_option>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	77bb      	strb	r3, [r7, #30]
 8014ea2:	e00e      	b.n	8014ec2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014ea4:	89b8      	ldrh	r0, [r7, #12]
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014eac:	7fbb      	ldrb	r3, [r7, #30]
 8014eae:	4a30      	ldr	r2, [pc, #192]	; (8014f70 <dhcp_select+0x1e4>)
 8014eb0:	5cd3      	ldrb	r3, [r2, r3]
 8014eb2:	461a      	mov	r2, r3
 8014eb4:	f000 ffb6 	bl	8015e24 <dhcp_option_byte>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ebc:	7fbb      	ldrb	r3, [r7, #30]
 8014ebe:	3301      	adds	r3, #1
 8014ec0:	77bb      	strb	r3, [r7, #30]
 8014ec2:	7fbb      	ldrb	r3, [r7, #30]
 8014ec4:	2b02      	cmp	r3, #2
 8014ec6:	d9ed      	bls.n	8014ea4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014ec8:	89b8      	ldrh	r0, [r7, #12]
 8014eca:	693b      	ldr	r3, [r7, #16]
 8014ecc:	33f0      	adds	r3, #240	; 0xf0
 8014ece:	697a      	ldr	r2, [r7, #20]
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	f001 fcb9 	bl	8016848 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014ed6:	4b27      	ldr	r3, [pc, #156]	; (8014f74 <dhcp_select+0x1e8>)
 8014ed8:	6818      	ldr	r0, [r3, #0]
 8014eda:	4b27      	ldr	r3, [pc, #156]	; (8014f78 <dhcp_select+0x1ec>)
 8014edc:	9301      	str	r3, [sp, #4]
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	9300      	str	r3, [sp, #0]
 8014ee2:	2343      	movs	r3, #67	; 0x43
 8014ee4:	4a25      	ldr	r2, [pc, #148]	; (8014f7c <dhcp_select+0x1f0>)
 8014ee6:	6979      	ldr	r1, [r7, #20]
 8014ee8:	f7ff fbb4 	bl	8014654 <udp_sendto_if_src>
 8014eec:	4603      	mov	r3, r0
 8014eee:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014ef0:	6978      	ldr	r0, [r7, #20]
 8014ef2:	f7f8 fc29 	bl	800d748 <pbuf_free>
 8014ef6:	e001      	b.n	8014efc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014ef8:	23ff      	movs	r3, #255	; 0xff
 8014efa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014efc:	69bb      	ldr	r3, [r7, #24]
 8014efe:	799b      	ldrb	r3, [r3, #6]
 8014f00:	2bff      	cmp	r3, #255	; 0xff
 8014f02:	d005      	beq.n	8014f10 <dhcp_select+0x184>
    dhcp->tries++;
 8014f04:	69bb      	ldr	r3, [r7, #24]
 8014f06:	799b      	ldrb	r3, [r3, #6]
 8014f08:	3301      	adds	r3, #1
 8014f0a:	b2da      	uxtb	r2, r3
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014f10:	69bb      	ldr	r3, [r7, #24]
 8014f12:	799b      	ldrb	r3, [r3, #6]
 8014f14:	2b05      	cmp	r3, #5
 8014f16:	d80d      	bhi.n	8014f34 <dhcp_select+0x1a8>
 8014f18:	69bb      	ldr	r3, [r7, #24]
 8014f1a:	799b      	ldrb	r3, [r3, #6]
 8014f1c:	461a      	mov	r2, r3
 8014f1e:	2301      	movs	r3, #1
 8014f20:	4093      	lsls	r3, r2
 8014f22:	b29b      	uxth	r3, r3
 8014f24:	461a      	mov	r2, r3
 8014f26:	0152      	lsls	r2, r2, #5
 8014f28:	1ad2      	subs	r2, r2, r3
 8014f2a:	0092      	lsls	r2, r2, #2
 8014f2c:	4413      	add	r3, r2
 8014f2e:	00db      	lsls	r3, r3, #3
 8014f30:	b29b      	uxth	r3, r3
 8014f32:	e001      	b.n	8014f38 <dhcp_select+0x1ac>
 8014f34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014f38:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014f3a:	89fb      	ldrh	r3, [r7, #14]
 8014f3c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014f40:	4a0f      	ldr	r2, [pc, #60]	; (8014f80 <dhcp_select+0x1f4>)
 8014f42:	fb82 1203 	smull	r1, r2, r2, r3
 8014f46:	1152      	asrs	r2, r2, #5
 8014f48:	17db      	asrs	r3, r3, #31
 8014f4a:	1ad3      	subs	r3, r2, r3
 8014f4c:	b29a      	uxth	r2, r3
 8014f4e:	69bb      	ldr	r3, [r7, #24]
 8014f50:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014f52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3720      	adds	r7, #32
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	0801d674 	.word	0x0801d674
 8014f64:	0801d720 	.word	0x0801d720
 8014f68:	0801d6d4 	.word	0x0801d6d4
 8014f6c:	0801d73c 	.word	0x0801d73c
 8014f70:	2000001c 	.word	0x2000001c
 8014f74:	20004290 	.word	0x20004290
 8014f78:	0801e258 	.word	0x0801e258
 8014f7c:	0801e25c 	.word	0x0801e25c
 8014f80:	10624dd3 	.word	0x10624dd3

08014f84 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b082      	sub	sp, #8
 8014f88:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014f8a:	4b27      	ldr	r3, [pc, #156]	; (8015028 <dhcp_coarse_tmr+0xa4>)
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	607b      	str	r3, [r7, #4]
 8014f90:	e042      	b.n	8015018 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f96:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d039      	beq.n	8015012 <dhcp_coarse_tmr+0x8e>
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	795b      	ldrb	r3, [r3, #5]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d035      	beq.n	8015012 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	8a9b      	ldrh	r3, [r3, #20]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d012      	beq.n	8014fd4 <dhcp_coarse_tmr+0x50>
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	8a5b      	ldrh	r3, [r3, #18]
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	b29a      	uxth	r2, r3
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	825a      	strh	r2, [r3, #18]
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	8a5a      	ldrh	r2, [r3, #18]
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	8a9b      	ldrh	r3, [r3, #20]
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d106      	bne.n	8014fd4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014fc6:	6878      	ldr	r0, [r7, #4]
 8014fc8:	f000 fe44 	bl	8015c54 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f000 f969 	bl	80152a4 <dhcp_start>
 8014fd2:	e01e      	b.n	8015012 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014fd4:	683b      	ldr	r3, [r7, #0]
 8014fd6:	8a1b      	ldrh	r3, [r3, #16]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d00b      	beq.n	8014ff4 <dhcp_coarse_tmr+0x70>
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	8a1b      	ldrh	r3, [r3, #16]
 8014fe0:	1e5a      	subs	r2, r3, #1
 8014fe2:	b291      	uxth	r1, r2
 8014fe4:	683a      	ldr	r2, [r7, #0]
 8014fe6:	8211      	strh	r1, [r2, #16]
 8014fe8:	2b01      	cmp	r3, #1
 8014fea:	d103      	bne.n	8014ff4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f000 f8c6 	bl	801517e <dhcp_t2_timeout>
 8014ff2:	e00e      	b.n	8015012 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	89db      	ldrh	r3, [r3, #14]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d00a      	beq.n	8015012 <dhcp_coarse_tmr+0x8e>
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	89db      	ldrh	r3, [r3, #14]
 8015000:	1e5a      	subs	r2, r3, #1
 8015002:	b291      	uxth	r1, r2
 8015004:	683a      	ldr	r2, [r7, #0]
 8015006:	81d1      	strh	r1, [r2, #14]
 8015008:	2b01      	cmp	r3, #1
 801500a:	d102      	bne.n	8015012 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801500c:	6878      	ldr	r0, [r7, #4]
 801500e:	f000 f888 	bl	8015122 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	607b      	str	r3, [r7, #4]
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d1b9      	bne.n	8014f92 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801501e:	bf00      	nop
 8015020:	3708      	adds	r7, #8
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	2000b124 	.word	0x2000b124

0801502c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015032:	4b16      	ldr	r3, [pc, #88]	; (801508c <dhcp_fine_tmr+0x60>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	607b      	str	r3, [r7, #4]
 8015038:	e020      	b.n	801507c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801503e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015040:	683b      	ldr	r3, [r7, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d017      	beq.n	8015076 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	891b      	ldrh	r3, [r3, #8]
 801504a:	2b01      	cmp	r3, #1
 801504c:	d906      	bls.n	801505c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	891b      	ldrh	r3, [r3, #8]
 8015052:	3b01      	subs	r3, #1
 8015054:	b29a      	uxth	r2, r3
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	811a      	strh	r2, [r3, #8]
 801505a:	e00c      	b.n	8015076 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	891b      	ldrh	r3, [r3, #8]
 8015060:	2b01      	cmp	r3, #1
 8015062:	d108      	bne.n	8015076 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	891b      	ldrh	r3, [r3, #8]
 8015068:	3b01      	subs	r3, #1
 801506a:	b29a      	uxth	r2, r3
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f000 f80d 	bl	8015090 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	607b      	str	r3, [r7, #4]
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d1db      	bne.n	801503a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015082:	bf00      	nop
 8015084:	3708      	adds	r7, #8
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
 801508a:	bf00      	nop
 801508c:	2000b124 	.word	0x2000b124

08015090 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b084      	sub	sp, #16
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801509c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	795b      	ldrb	r3, [r3, #5]
 80150a2:	2b0c      	cmp	r3, #12
 80150a4:	d003      	beq.n	80150ae <dhcp_timeout+0x1e>
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	795b      	ldrb	r3, [r3, #5]
 80150aa:	2b06      	cmp	r3, #6
 80150ac:	d103      	bne.n	80150b6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	f000 fa66 	bl	8015580 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80150b4:	e031      	b.n	801511a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	795b      	ldrb	r3, [r3, #5]
 80150ba:	2b01      	cmp	r3, #1
 80150bc:	d10e      	bne.n	80150dc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	799b      	ldrb	r3, [r3, #6]
 80150c2:	2b05      	cmp	r3, #5
 80150c4:	d803      	bhi.n	80150ce <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f7ff fe60 	bl	8014d8c <dhcp_select>
}
 80150cc:	e025      	b.n	801511a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f000 fdc0 	bl	8015c54 <dhcp_release_and_stop>
      dhcp_start(netif);
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f000 f8e5 	bl	80152a4 <dhcp_start>
}
 80150da:	e01e      	b.n	801511a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	795b      	ldrb	r3, [r3, #5]
 80150e0:	2b08      	cmp	r3, #8
 80150e2:	d10b      	bne.n	80150fc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	799b      	ldrb	r3, [r3, #6]
 80150e8:	2b01      	cmp	r3, #1
 80150ea:	d803      	bhi.n	80150f4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f7ff fdf3 	bl	8014cd8 <dhcp_check>
}
 80150f2:	e012      	b.n	801511a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f000 fae5 	bl	80156c4 <dhcp_bind>
}
 80150fa:	e00e      	b.n	801511a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	795b      	ldrb	r3, [r3, #5]
 8015100:	2b03      	cmp	r3, #3
 8015102:	d10a      	bne.n	801511a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	799b      	ldrb	r3, [r3, #6]
 8015108:	2b01      	cmp	r3, #1
 801510a:	d803      	bhi.n	8015114 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	f000 fceb 	bl	8015ae8 <dhcp_reboot>
}
 8015112:	e002      	b.n	801511a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f000 fa33 	bl	8015580 <dhcp_discover>
}
 801511a:	bf00      	nop
 801511c:	3710      	adds	r7, #16
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}

08015122 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015122:	b580      	push	{r7, lr}
 8015124:	b084      	sub	sp, #16
 8015126:	af00      	add	r7, sp, #0
 8015128:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801512e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	795b      	ldrb	r3, [r3, #5]
 8015134:	2b01      	cmp	r3, #1
 8015136:	d007      	beq.n	8015148 <dhcp_t1_timeout+0x26>
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	795b      	ldrb	r3, [r3, #5]
 801513c:	2b0a      	cmp	r3, #10
 801513e:	d003      	beq.n	8015148 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015144:	2b05      	cmp	r3, #5
 8015146:	d116      	bne.n	8015176 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f000 fb95 	bl	8015878 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	899b      	ldrh	r3, [r3, #12]
 8015152:	461a      	mov	r2, r3
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	8a5b      	ldrh	r3, [r3, #18]
 8015158:	1ad3      	subs	r3, r2, r3
 801515a:	2b01      	cmp	r3, #1
 801515c:	dd0b      	ble.n	8015176 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	899b      	ldrh	r3, [r3, #12]
 8015162:	461a      	mov	r2, r3
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	8a5b      	ldrh	r3, [r3, #18]
 8015168:	1ad3      	subs	r3, r2, r3
 801516a:	0fda      	lsrs	r2, r3, #31
 801516c:	4413      	add	r3, r2
 801516e:	105b      	asrs	r3, r3, #1
 8015170:	b29a      	uxth	r2, r3
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8015176:	bf00      	nop
 8015178:	3710      	adds	r7, #16
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}

0801517e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801517e:	b580      	push	{r7, lr}
 8015180:	b084      	sub	sp, #16
 8015182:	af00      	add	r7, sp, #0
 8015184:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801518a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	795b      	ldrb	r3, [r3, #5]
 8015190:	2b01      	cmp	r3, #1
 8015192:	d00b      	beq.n	80151ac <dhcp_t2_timeout+0x2e>
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	795b      	ldrb	r3, [r3, #5]
 8015198:	2b0a      	cmp	r3, #10
 801519a:	d007      	beq.n	80151ac <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80151a0:	2b05      	cmp	r3, #5
 80151a2:	d003      	beq.n	80151ac <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	795b      	ldrb	r3, [r3, #5]
 80151a8:	2b04      	cmp	r3, #4
 80151aa:	d116      	bne.n	80151da <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f000 fbff 	bl	80159b0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	8a9b      	ldrh	r3, [r3, #20]
 80151b6:	461a      	mov	r2, r3
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	8a5b      	ldrh	r3, [r3, #18]
 80151bc:	1ad3      	subs	r3, r2, r3
 80151be:	2b01      	cmp	r3, #1
 80151c0:	dd0b      	ble.n	80151da <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	8a9b      	ldrh	r3, [r3, #20]
 80151c6:	461a      	mov	r2, r3
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	8a5b      	ldrh	r3, [r3, #18]
 80151cc:	1ad3      	subs	r3, r2, r3
 80151ce:	0fda      	lsrs	r2, r3, #31
 80151d0:	4413      	add	r3, r2
 80151d2:	105b      	asrs	r3, r3, #1
 80151d4:	b29a      	uxth	r2, r3
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80151da:	bf00      	nop
 80151dc:	3710      	adds	r7, #16
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}
	...

080151e4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b084      	sub	sp, #16
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151f2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	2200      	movs	r2, #0
 80151f8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2200      	movs	r2, #0
 80151fe:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015200:	4b26      	ldr	r3, [pc, #152]	; (801529c <dhcp_handle_ack+0xb8>)
 8015202:	78db      	ldrb	r3, [r3, #3]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d003      	beq.n	8015210 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015208:	4b25      	ldr	r3, [pc, #148]	; (80152a0 <dhcp_handle_ack+0xbc>)
 801520a:	68da      	ldr	r2, [r3, #12]
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015210:	4b22      	ldr	r3, [pc, #136]	; (801529c <dhcp_handle_ack+0xb8>)
 8015212:	791b      	ldrb	r3, [r3, #4]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d004      	beq.n	8015222 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015218:	4b21      	ldr	r3, [pc, #132]	; (80152a0 <dhcp_handle_ack+0xbc>)
 801521a:	691a      	ldr	r2, [r3, #16]
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015220:	e004      	b.n	801522c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015226:	085a      	lsrs	r2, r3, #1
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801522c:	4b1b      	ldr	r3, [pc, #108]	; (801529c <dhcp_handle_ack+0xb8>)
 801522e:	795b      	ldrb	r3, [r3, #5]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d004      	beq.n	801523e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015234:	4b1a      	ldr	r3, [pc, #104]	; (80152a0 <dhcp_handle_ack+0xbc>)
 8015236:	695a      	ldr	r2, [r3, #20]
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	631a      	str	r2, [r3, #48]	; 0x30
 801523c:	e007      	b.n	801524e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015242:	4613      	mov	r3, r2
 8015244:	00db      	lsls	r3, r3, #3
 8015246:	1a9b      	subs	r3, r3, r2
 8015248:	08da      	lsrs	r2, r3, #3
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	691a      	ldr	r2, [r3, #16]
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8015256:	4b11      	ldr	r3, [pc, #68]	; (801529c <dhcp_handle_ack+0xb8>)
 8015258:	799b      	ldrb	r3, [r3, #6]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d00b      	beq.n	8015276 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801525e:	4b10      	ldr	r3, [pc, #64]	; (80152a0 <dhcp_handle_ack+0xbc>)
 8015260:	699b      	ldr	r3, [r3, #24]
 8015262:	4618      	mov	r0, r3
 8015264:	f7f6 fe99 	bl	800bf9a <lwip_htonl>
 8015268:	4602      	mov	r2, r0
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2201      	movs	r2, #1
 8015272:	71da      	strb	r2, [r3, #7]
 8015274:	e002      	b.n	801527c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2200      	movs	r2, #0
 801527a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801527c:	4b07      	ldr	r3, [pc, #28]	; (801529c <dhcp_handle_ack+0xb8>)
 801527e:	79db      	ldrb	r3, [r3, #7]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d007      	beq.n	8015294 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8015284:	4b06      	ldr	r3, [pc, #24]	; (80152a0 <dhcp_handle_ack+0xbc>)
 8015286:	69db      	ldr	r3, [r3, #28]
 8015288:	4618      	mov	r0, r3
 801528a:	f7f6 fe86 	bl	800bf9a <lwip_htonl>
 801528e:	4602      	mov	r2, r0
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8015294:	bf00      	nop
 8015296:	3710      	adds	r7, #16
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}
 801529c:	2000b150 	.word	0x2000b150
 80152a0:	2000b158 	.word	0x2000b158

080152a4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d109      	bne.n	80152c6 <dhcp_start+0x22>
 80152b2:	4b37      	ldr	r3, [pc, #220]	; (8015390 <dhcp_start+0xec>)
 80152b4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80152b8:	4936      	ldr	r1, [pc, #216]	; (8015394 <dhcp_start+0xf0>)
 80152ba:	4837      	ldr	r0, [pc, #220]	; (8015398 <dhcp_start+0xf4>)
 80152bc:	f004 f836 	bl	801932c <iprintf>
 80152c0:	f06f 030f 	mvn.w	r3, #15
 80152c4:	e060      	b.n	8015388 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80152cc:	f003 0301 	and.w	r3, r3, #1
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d109      	bne.n	80152e8 <dhcp_start+0x44>
 80152d4:	4b2e      	ldr	r3, [pc, #184]	; (8015390 <dhcp_start+0xec>)
 80152d6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80152da:	4930      	ldr	r1, [pc, #192]	; (801539c <dhcp_start+0xf8>)
 80152dc:	482e      	ldr	r0, [pc, #184]	; (8015398 <dhcp_start+0xf4>)
 80152de:	f004 f825 	bl	801932c <iprintf>
 80152e2:	f06f 030f 	mvn.w	r3, #15
 80152e6:	e04f      	b.n	8015388 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80152f2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80152f6:	d202      	bcs.n	80152fe <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80152f8:	f04f 33ff 	mov.w	r3, #4294967295
 80152fc:	e044      	b.n	8015388 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d10d      	bne.n	8015320 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8015304:	2034      	movs	r0, #52	; 0x34
 8015306:	f7f7 f967 	bl	800c5d8 <mem_malloc>
 801530a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d102      	bne.n	8015318 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8015312:	f04f 33ff 	mov.w	r3, #4294967295
 8015316:	e037      	b.n	8015388 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	68fa      	ldr	r2, [r7, #12]
 801531c:	625a      	str	r2, [r3, #36]	; 0x24
 801531e:	e005      	b.n	801532c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	791b      	ldrb	r3, [r3, #4]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d001      	beq.n	801532c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015328:	f7ff fc92 	bl	8014c50 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801532c:	2234      	movs	r2, #52	; 0x34
 801532e:	2100      	movs	r1, #0
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f003 fff2 	bl	801931a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8015336:	f7ff fc39 	bl	8014bac <dhcp_inc_pcb_refcount>
 801533a:	4603      	mov	r3, r0
 801533c:	2b00      	cmp	r3, #0
 801533e:	d002      	beq.n	8015346 <dhcp_start+0xa2>
    return ERR_MEM;
 8015340:	f04f 33ff 	mov.w	r3, #4294967295
 8015344:	e020      	b.n	8015388 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	2201      	movs	r2, #1
 801534a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015352:	f003 0304 	and.w	r3, r3, #4
 8015356:	2b00      	cmp	r3, #0
 8015358:	d105      	bne.n	8015366 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801535a:	2102      	movs	r1, #2
 801535c:	68f8      	ldr	r0, [r7, #12]
 801535e:	f000 fd13 	bl	8015d88 <dhcp_set_state>
    return ERR_OK;
 8015362:	2300      	movs	r3, #0
 8015364:	e010      	b.n	8015388 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f000 f90a 	bl	8015580 <dhcp_discover>
 801536c:	4603      	mov	r3, r0
 801536e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015370:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d005      	beq.n	8015384 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f000 fc6b 	bl	8015c54 <dhcp_release_and_stop>
    return ERR_MEM;
 801537e:	f04f 33ff 	mov.w	r3, #4294967295
 8015382:	e001      	b.n	8015388 <dhcp_start+0xe4>
  }
  return result;
 8015384:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015388:	4618      	mov	r0, r3
 801538a:	3710      	adds	r7, #16
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}
 8015390:	0801d674 	.word	0x0801d674
 8015394:	0801d758 	.word	0x0801d758
 8015398:	0801d6d4 	.word	0x0801d6d4
 801539c:	0801d79c 	.word	0x0801d79c

080153a0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b084      	sub	sp, #16
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ac:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d037      	beq.n	8015424 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	795b      	ldrb	r3, [r3, #5]
 80153b8:	2b0a      	cmp	r3, #10
 80153ba:	d820      	bhi.n	80153fe <dhcp_network_changed+0x5e>
 80153bc:	a201      	add	r2, pc, #4	; (adr r2, 80153c4 <dhcp_network_changed+0x24>)
 80153be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153c2:	bf00      	nop
 80153c4:	08015429 	.word	0x08015429
 80153c8:	080153ff 	.word	0x080153ff
 80153cc:	080153ff 	.word	0x080153ff
 80153d0:	080153f1 	.word	0x080153f1
 80153d4:	080153f1 	.word	0x080153f1
 80153d8:	080153f1 	.word	0x080153f1
 80153dc:	080153ff 	.word	0x080153ff
 80153e0:	080153ff 	.word	0x080153ff
 80153e4:	080153ff 	.word	0x080153ff
 80153e8:	080153ff 	.word	0x080153ff
 80153ec:	080153f1 	.word	0x080153f1
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	2200      	movs	r2, #0
 80153f4:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f000 fb76 	bl	8015ae8 <dhcp_reboot>
      break;
 80153fc:	e015      	b.n	801542a <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	795b      	ldrb	r3, [r3, #5]
 8015402:	2b0c      	cmp	r3, #12
 8015404:	d906      	bls.n	8015414 <dhcp_network_changed+0x74>
 8015406:	4b0a      	ldr	r3, [pc, #40]	; (8015430 <dhcp_network_changed+0x90>)
 8015408:	f240 326d 	movw	r2, #877	; 0x36d
 801540c:	4909      	ldr	r1, [pc, #36]	; (8015434 <dhcp_network_changed+0x94>)
 801540e:	480a      	ldr	r0, [pc, #40]	; (8015438 <dhcp_network_changed+0x98>)
 8015410:	f003 ff8c 	bl	801932c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2200      	movs	r2, #0
 8015418:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f000 f8b0 	bl	8015580 <dhcp_discover>
      break;
 8015420:	bf00      	nop
 8015422:	e002      	b.n	801542a <dhcp_network_changed+0x8a>
    return;
 8015424:	bf00      	nop
 8015426:	e000      	b.n	801542a <dhcp_network_changed+0x8a>
      break;
 8015428:	bf00      	nop
  }
}
 801542a:	3710      	adds	r7, #16
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	0801d674 	.word	0x0801d674
 8015434:	0801d7c0 	.word	0x0801d7c0
 8015438:	0801d6d4 	.word	0x0801d6d4

0801543c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b084      	sub	sp, #16
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d107      	bne.n	801545c <dhcp_arp_reply+0x20>
 801544c:	4b0e      	ldr	r3, [pc, #56]	; (8015488 <dhcp_arp_reply+0x4c>)
 801544e:	f240 328b 	movw	r2, #907	; 0x38b
 8015452:	490e      	ldr	r1, [pc, #56]	; (801548c <dhcp_arp_reply+0x50>)
 8015454:	480e      	ldr	r0, [pc, #56]	; (8015490 <dhcp_arp_reply+0x54>)
 8015456:	f003 ff69 	bl	801932c <iprintf>
 801545a:	e012      	b.n	8015482 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015460:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d00c      	beq.n	8015482 <dhcp_arp_reply+0x46>
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	795b      	ldrb	r3, [r3, #5]
 801546c:	2b08      	cmp	r3, #8
 801546e:	d108      	bne.n	8015482 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	681a      	ldr	r2, [r3, #0]
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	69db      	ldr	r3, [r3, #28]
 8015478:	429a      	cmp	r2, r3
 801547a:	d102      	bne.n	8015482 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801547c:	6878      	ldr	r0, [r7, #4]
 801547e:	f000 f809 	bl	8015494 <dhcp_decline>
    }
  }
}
 8015482:	3710      	adds	r7, #16
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}
 8015488:	0801d674 	.word	0x0801d674
 801548c:	0801d758 	.word	0x0801d758
 8015490:	0801d6d4 	.word	0x0801d6d4

08015494 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015494:	b5b0      	push	{r4, r5, r7, lr}
 8015496:	b08a      	sub	sp, #40	; 0x28
 8015498:	af02      	add	r7, sp, #8
 801549a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154a0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80154a2:	210c      	movs	r1, #12
 80154a4:	69b8      	ldr	r0, [r7, #24]
 80154a6:	f000 fc6f 	bl	8015d88 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80154aa:	f107 030c 	add.w	r3, r7, #12
 80154ae:	2204      	movs	r2, #4
 80154b0:	69b9      	ldr	r1, [r7, #24]
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f001 f8f2 	bl	801669c <dhcp_create_msg>
 80154b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d035      	beq.n	801552c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	685b      	ldr	r3, [r3, #4]
 80154c4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80154c6:	89b8      	ldrh	r0, [r7, #12]
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154ce:	2304      	movs	r3, #4
 80154d0:	2232      	movs	r2, #50	; 0x32
 80154d2:	f000 fc73 	bl	8015dbc <dhcp_option>
 80154d6:	4603      	mov	r3, r0
 80154d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80154da:	89bc      	ldrh	r4, [r7, #12]
 80154dc:	693b      	ldr	r3, [r7, #16]
 80154de:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80154e2:	69bb      	ldr	r3, [r7, #24]
 80154e4:	69db      	ldr	r3, [r3, #28]
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7f6 fd57 	bl	800bf9a <lwip_htonl>
 80154ec:	4603      	mov	r3, r0
 80154ee:	461a      	mov	r2, r3
 80154f0:	4629      	mov	r1, r5
 80154f2:	4620      	mov	r0, r4
 80154f4:	f000 fcee 	bl	8015ed4 <dhcp_option_long>
 80154f8:	4603      	mov	r3, r0
 80154fa:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80154fc:	89b8      	ldrh	r0, [r7, #12]
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	33f0      	adds	r3, #240	; 0xf0
 8015502:	697a      	ldr	r2, [r7, #20]
 8015504:	4619      	mov	r1, r3
 8015506:	f001 f99f 	bl	8016848 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801550a:	4b19      	ldr	r3, [pc, #100]	; (8015570 <dhcp_decline+0xdc>)
 801550c:	6818      	ldr	r0, [r3, #0]
 801550e:	4b19      	ldr	r3, [pc, #100]	; (8015574 <dhcp_decline+0xe0>)
 8015510:	9301      	str	r3, [sp, #4]
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	9300      	str	r3, [sp, #0]
 8015516:	2343      	movs	r3, #67	; 0x43
 8015518:	4a17      	ldr	r2, [pc, #92]	; (8015578 <dhcp_decline+0xe4>)
 801551a:	6979      	ldr	r1, [r7, #20]
 801551c:	f7ff f89a 	bl	8014654 <udp_sendto_if_src>
 8015520:	4603      	mov	r3, r0
 8015522:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015524:	6978      	ldr	r0, [r7, #20]
 8015526:	f7f8 f90f 	bl	800d748 <pbuf_free>
 801552a:	e001      	b.n	8015530 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801552c:	23ff      	movs	r3, #255	; 0xff
 801552e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	799b      	ldrb	r3, [r3, #6]
 8015534:	2bff      	cmp	r3, #255	; 0xff
 8015536:	d005      	beq.n	8015544 <dhcp_decline+0xb0>
    dhcp->tries++;
 8015538:	69bb      	ldr	r3, [r7, #24]
 801553a:	799b      	ldrb	r3, [r3, #6]
 801553c:	3301      	adds	r3, #1
 801553e:	b2da      	uxtb	r2, r3
 8015540:	69bb      	ldr	r3, [r7, #24]
 8015542:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015544:	f242 7310 	movw	r3, #10000	; 0x2710
 8015548:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801554a:	89fb      	ldrh	r3, [r7, #14]
 801554c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015550:	4a0a      	ldr	r2, [pc, #40]	; (801557c <dhcp_decline+0xe8>)
 8015552:	fb82 1203 	smull	r1, r2, r2, r3
 8015556:	1152      	asrs	r2, r2, #5
 8015558:	17db      	asrs	r3, r3, #31
 801555a:	1ad3      	subs	r3, r2, r3
 801555c:	b29a      	uxth	r2, r3
 801555e:	69bb      	ldr	r3, [r7, #24]
 8015560:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015562:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015566:	4618      	mov	r0, r3
 8015568:	3720      	adds	r7, #32
 801556a:	46bd      	mov	sp, r7
 801556c:	bdb0      	pop	{r4, r5, r7, pc}
 801556e:	bf00      	nop
 8015570:	20004290 	.word	0x20004290
 8015574:	0801e258 	.word	0x0801e258
 8015578:	0801e25c 	.word	0x0801e25c
 801557c:	10624dd3 	.word	0x10624dd3

08015580 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b08a      	sub	sp, #40	; 0x28
 8015584:	af02      	add	r7, sp, #8
 8015586:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801558c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801558e:	2300      	movs	r3, #0
 8015590:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015592:	69bb      	ldr	r3, [r7, #24]
 8015594:	2200      	movs	r2, #0
 8015596:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015598:	2106      	movs	r1, #6
 801559a:	69b8      	ldr	r0, [r7, #24]
 801559c:	f000 fbf4 	bl	8015d88 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80155a0:	f107 0308 	add.w	r3, r7, #8
 80155a4:	2201      	movs	r2, #1
 80155a6:	69b9      	ldr	r1, [r7, #24]
 80155a8:	6878      	ldr	r0, [r7, #4]
 80155aa:	f001 f877 	bl	801669c <dhcp_create_msg>
 80155ae:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d04b      	beq.n	801564e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80155bc:	8938      	ldrh	r0, [r7, #8]
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155c4:	2302      	movs	r3, #2
 80155c6:	2239      	movs	r2, #57	; 0x39
 80155c8:	f000 fbf8 	bl	8015dbc <dhcp_option>
 80155cc:	4603      	mov	r3, r0
 80155ce:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80155d0:	8938      	ldrh	r0, [r7, #8]
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80155dc:	461a      	mov	r2, r3
 80155de:	f000 fc47 	bl	8015e70 <dhcp_option_short>
 80155e2:	4603      	mov	r3, r0
 80155e4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80155e6:	8938      	ldrh	r0, [r7, #8]
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155ee:	2303      	movs	r3, #3
 80155f0:	2237      	movs	r2, #55	; 0x37
 80155f2:	f000 fbe3 	bl	8015dbc <dhcp_option>
 80155f6:	4603      	mov	r3, r0
 80155f8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80155fa:	2300      	movs	r3, #0
 80155fc:	77fb      	strb	r3, [r7, #31]
 80155fe:	e00e      	b.n	801561e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015600:	8938      	ldrh	r0, [r7, #8]
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015608:	7ffb      	ldrb	r3, [r7, #31]
 801560a:	4a29      	ldr	r2, [pc, #164]	; (80156b0 <dhcp_discover+0x130>)
 801560c:	5cd3      	ldrb	r3, [r2, r3]
 801560e:	461a      	mov	r2, r3
 8015610:	f000 fc08 	bl	8015e24 <dhcp_option_byte>
 8015614:	4603      	mov	r3, r0
 8015616:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015618:	7ffb      	ldrb	r3, [r7, #31]
 801561a:	3301      	adds	r3, #1
 801561c:	77fb      	strb	r3, [r7, #31]
 801561e:	7ffb      	ldrb	r3, [r7, #31]
 8015620:	2b02      	cmp	r3, #2
 8015622:	d9ed      	bls.n	8015600 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015624:	8938      	ldrh	r0, [r7, #8]
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	33f0      	adds	r3, #240	; 0xf0
 801562a:	693a      	ldr	r2, [r7, #16]
 801562c:	4619      	mov	r1, r3
 801562e:	f001 f90b 	bl	8016848 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015632:	4b20      	ldr	r3, [pc, #128]	; (80156b4 <dhcp_discover+0x134>)
 8015634:	6818      	ldr	r0, [r3, #0]
 8015636:	4b20      	ldr	r3, [pc, #128]	; (80156b8 <dhcp_discover+0x138>)
 8015638:	9301      	str	r3, [sp, #4]
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	2343      	movs	r3, #67	; 0x43
 8015640:	4a1e      	ldr	r2, [pc, #120]	; (80156bc <dhcp_discover+0x13c>)
 8015642:	6939      	ldr	r1, [r7, #16]
 8015644:	f7ff f806 	bl	8014654 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015648:	6938      	ldr	r0, [r7, #16]
 801564a:	f7f8 f87d 	bl	800d748 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801564e:	69bb      	ldr	r3, [r7, #24]
 8015650:	799b      	ldrb	r3, [r3, #6]
 8015652:	2bff      	cmp	r3, #255	; 0xff
 8015654:	d005      	beq.n	8015662 <dhcp_discover+0xe2>
    dhcp->tries++;
 8015656:	69bb      	ldr	r3, [r7, #24]
 8015658:	799b      	ldrb	r3, [r3, #6]
 801565a:	3301      	adds	r3, #1
 801565c:	b2da      	uxtb	r2, r3
 801565e:	69bb      	ldr	r3, [r7, #24]
 8015660:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	799b      	ldrb	r3, [r3, #6]
 8015666:	2b05      	cmp	r3, #5
 8015668:	d80d      	bhi.n	8015686 <dhcp_discover+0x106>
 801566a:	69bb      	ldr	r3, [r7, #24]
 801566c:	799b      	ldrb	r3, [r3, #6]
 801566e:	461a      	mov	r2, r3
 8015670:	2301      	movs	r3, #1
 8015672:	4093      	lsls	r3, r2
 8015674:	b29b      	uxth	r3, r3
 8015676:	461a      	mov	r2, r3
 8015678:	0152      	lsls	r2, r2, #5
 801567a:	1ad2      	subs	r2, r2, r3
 801567c:	0092      	lsls	r2, r2, #2
 801567e:	4413      	add	r3, r2
 8015680:	00db      	lsls	r3, r3, #3
 8015682:	b29b      	uxth	r3, r3
 8015684:	e001      	b.n	801568a <dhcp_discover+0x10a>
 8015686:	f64e 2360 	movw	r3, #60000	; 0xea60
 801568a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801568c:	897b      	ldrh	r3, [r7, #10]
 801568e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015692:	4a0b      	ldr	r2, [pc, #44]	; (80156c0 <dhcp_discover+0x140>)
 8015694:	fb82 1203 	smull	r1, r2, r2, r3
 8015698:	1152      	asrs	r2, r2, #5
 801569a:	17db      	asrs	r3, r3, #31
 801569c:	1ad3      	subs	r3, r2, r3
 801569e:	b29a      	uxth	r2, r3
 80156a0:	69bb      	ldr	r3, [r7, #24]
 80156a2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80156a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3720      	adds	r7, #32
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	2000001c 	.word	0x2000001c
 80156b4:	20004290 	.word	0x20004290
 80156b8:	0801e258 	.word	0x0801e258
 80156bc:	0801e25c 	.word	0x0801e25c
 80156c0:	10624dd3 	.word	0x10624dd3

080156c4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b088      	sub	sp, #32
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d107      	bne.n	80156e2 <dhcp_bind+0x1e>
 80156d2:	4b64      	ldr	r3, [pc, #400]	; (8015864 <dhcp_bind+0x1a0>)
 80156d4:	f240 4215 	movw	r2, #1045	; 0x415
 80156d8:	4963      	ldr	r1, [pc, #396]	; (8015868 <dhcp_bind+0x1a4>)
 80156da:	4864      	ldr	r0, [pc, #400]	; (801586c <dhcp_bind+0x1a8>)
 80156dc:	f003 fe26 	bl	801932c <iprintf>
 80156e0:	e0bc      	b.n	801585c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156e6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80156e8:	69bb      	ldr	r3, [r7, #24]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d107      	bne.n	80156fe <dhcp_bind+0x3a>
 80156ee:	4b5d      	ldr	r3, [pc, #372]	; (8015864 <dhcp_bind+0x1a0>)
 80156f0:	f240 4217 	movw	r2, #1047	; 0x417
 80156f4:	495e      	ldr	r1, [pc, #376]	; (8015870 <dhcp_bind+0x1ac>)
 80156f6:	485d      	ldr	r0, [pc, #372]	; (801586c <dhcp_bind+0x1a8>)
 80156f8:	f003 fe18 	bl	801932c <iprintf>
 80156fc:	e0ae      	b.n	801585c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	2200      	movs	r2, #0
 8015702:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015704:	69bb      	ldr	r3, [r7, #24]
 8015706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801570c:	d019      	beq.n	8015742 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801570e:	69bb      	ldr	r3, [r7, #24]
 8015710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015712:	331e      	adds	r3, #30
 8015714:	4a57      	ldr	r2, [pc, #348]	; (8015874 <dhcp_bind+0x1b0>)
 8015716:	fba2 2303 	umull	r2, r3, r2, r3
 801571a:	095b      	lsrs	r3, r3, #5
 801571c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801571e:	69fb      	ldr	r3, [r7, #28]
 8015720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015724:	d302      	bcc.n	801572c <dhcp_bind+0x68>
      timeout = 0xffff;
 8015726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801572a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	b29a      	uxth	r2, r3
 8015730:	69bb      	ldr	r3, [r7, #24]
 8015732:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015734:	69bb      	ldr	r3, [r7, #24]
 8015736:	8a9b      	ldrh	r3, [r3, #20]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d102      	bne.n	8015742 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801573c:	69bb      	ldr	r3, [r7, #24]
 801573e:	2201      	movs	r2, #1
 8015740:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015742:	69bb      	ldr	r3, [r7, #24]
 8015744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801574a:	d01d      	beq.n	8015788 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801574c:	69bb      	ldr	r3, [r7, #24]
 801574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015750:	331e      	adds	r3, #30
 8015752:	4a48      	ldr	r2, [pc, #288]	; (8015874 <dhcp_bind+0x1b0>)
 8015754:	fba2 2303 	umull	r2, r3, r2, r3
 8015758:	095b      	lsrs	r3, r3, #5
 801575a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801575c:	69fb      	ldr	r3, [r7, #28]
 801575e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015762:	d302      	bcc.n	801576a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015768:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801576a:	69fb      	ldr	r3, [r7, #28]
 801576c:	b29a      	uxth	r2, r3
 801576e:	69bb      	ldr	r3, [r7, #24]
 8015770:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	895b      	ldrh	r3, [r3, #10]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d102      	bne.n	8015780 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801577a:	69bb      	ldr	r3, [r7, #24]
 801577c:	2201      	movs	r2, #1
 801577e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015780:	69bb      	ldr	r3, [r7, #24]
 8015782:	895a      	ldrh	r2, [r3, #10]
 8015784:	69bb      	ldr	r3, [r7, #24]
 8015786:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015788:	69bb      	ldr	r3, [r7, #24]
 801578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015790:	d01d      	beq.n	80157ce <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015792:	69bb      	ldr	r3, [r7, #24]
 8015794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015796:	331e      	adds	r3, #30
 8015798:	4a36      	ldr	r2, [pc, #216]	; (8015874 <dhcp_bind+0x1b0>)
 801579a:	fba2 2303 	umull	r2, r3, r2, r3
 801579e:	095b      	lsrs	r3, r3, #5
 80157a0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80157a2:	69fb      	ldr	r3, [r7, #28]
 80157a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157a8:	d302      	bcc.n	80157b0 <dhcp_bind+0xec>
      timeout = 0xffff;
 80157aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80157ae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80157b0:	69fb      	ldr	r3, [r7, #28]
 80157b2:	b29a      	uxth	r2, r3
 80157b4:	69bb      	ldr	r3, [r7, #24]
 80157b6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80157b8:	69bb      	ldr	r3, [r7, #24]
 80157ba:	899b      	ldrh	r3, [r3, #12]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d102      	bne.n	80157c6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80157c0:	69bb      	ldr	r3, [r7, #24]
 80157c2:	2201      	movs	r2, #1
 80157c4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80157c6:	69bb      	ldr	r3, [r7, #24]
 80157c8:	899a      	ldrh	r2, [r3, #12]
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80157ce:	69bb      	ldr	r3, [r7, #24]
 80157d0:	895a      	ldrh	r2, [r3, #10]
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	899b      	ldrh	r3, [r3, #12]
 80157d6:	429a      	cmp	r2, r3
 80157d8:	d306      	bcc.n	80157e8 <dhcp_bind+0x124>
 80157da:	69bb      	ldr	r3, [r7, #24]
 80157dc:	899b      	ldrh	r3, [r3, #12]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d002      	beq.n	80157e8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80157e2:	69bb      	ldr	r3, [r7, #24]
 80157e4:	2200      	movs	r2, #0
 80157e6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80157e8:	69bb      	ldr	r3, [r7, #24]
 80157ea:	79db      	ldrb	r3, [r3, #7]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d003      	beq.n	80157f8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80157f0:	69bb      	ldr	r3, [r7, #24]
 80157f2:	6a1b      	ldr	r3, [r3, #32]
 80157f4:	613b      	str	r3, [r7, #16]
 80157f6:	e014      	b.n	8015822 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80157f8:	69bb      	ldr	r3, [r7, #24]
 80157fa:	331c      	adds	r3, #28
 80157fc:	781b      	ldrb	r3, [r3, #0]
 80157fe:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015804:	2b00      	cmp	r3, #0
 8015806:	db02      	blt.n	801580e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015808:	23ff      	movs	r3, #255	; 0xff
 801580a:	613b      	str	r3, [r7, #16]
 801580c:	e009      	b.n	8015822 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801580e:	7dfb      	ldrb	r3, [r7, #23]
 8015810:	2bbf      	cmp	r3, #191	; 0xbf
 8015812:	d903      	bls.n	801581c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015814:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015818:	613b      	str	r3, [r7, #16]
 801581a:	e002      	b.n	8015822 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801581c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015820:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015822:	69bb      	ldr	r3, [r7, #24]
 8015824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015826:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d108      	bne.n	8015840 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801582e:	69bb      	ldr	r3, [r7, #24]
 8015830:	69da      	ldr	r2, [r3, #28]
 8015832:	693b      	ldr	r3, [r7, #16]
 8015834:	4013      	ands	r3, r2
 8015836:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801583e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015840:	210a      	movs	r1, #10
 8015842:	69b8      	ldr	r0, [r7, #24]
 8015844:	f000 faa0 	bl	8015d88 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015848:	69bb      	ldr	r3, [r7, #24]
 801584a:	f103 011c 	add.w	r1, r3, #28
 801584e:	f107 030c 	add.w	r3, r7, #12
 8015852:	f107 0210 	add.w	r2, r7, #16
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f7f7 fa34 	bl	800ccc4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801585c:	3720      	adds	r7, #32
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}
 8015862:	bf00      	nop
 8015864:	0801d674 	.word	0x0801d674
 8015868:	0801d7d4 	.word	0x0801d7d4
 801586c:	0801d6d4 	.word	0x0801d6d4
 8015870:	0801d7f0 	.word	0x0801d7f0
 8015874:	88888889 	.word	0x88888889

08015878 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b08a      	sub	sp, #40	; 0x28
 801587c:	af02      	add	r7, sp, #8
 801587e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015884:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015886:	2105      	movs	r1, #5
 8015888:	69b8      	ldr	r0, [r7, #24]
 801588a:	f000 fa7d 	bl	8015d88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801588e:	f107 030c 	add.w	r3, r7, #12
 8015892:	2203      	movs	r2, #3
 8015894:	69b9      	ldr	r1, [r7, #24]
 8015896:	6878      	ldr	r0, [r7, #4]
 8015898:	f000 ff00 	bl	801669c <dhcp_create_msg>
 801589c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d04e      	beq.n	8015942 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80158a4:	697b      	ldr	r3, [r7, #20]
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80158aa:	89b8      	ldrh	r0, [r7, #12]
 80158ac:	693b      	ldr	r3, [r7, #16]
 80158ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158b2:	2302      	movs	r3, #2
 80158b4:	2239      	movs	r2, #57	; 0x39
 80158b6:	f000 fa81 	bl	8015dbc <dhcp_option>
 80158ba:	4603      	mov	r3, r0
 80158bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80158be:	89b8      	ldrh	r0, [r7, #12]
 80158c0:	693b      	ldr	r3, [r7, #16]
 80158c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80158ca:	461a      	mov	r2, r3
 80158cc:	f000 fad0 	bl	8015e70 <dhcp_option_short>
 80158d0:	4603      	mov	r3, r0
 80158d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80158d4:	89b8      	ldrh	r0, [r7, #12]
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158dc:	2303      	movs	r3, #3
 80158de:	2237      	movs	r2, #55	; 0x37
 80158e0:	f000 fa6c 	bl	8015dbc <dhcp_option>
 80158e4:	4603      	mov	r3, r0
 80158e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80158e8:	2300      	movs	r3, #0
 80158ea:	77bb      	strb	r3, [r7, #30]
 80158ec:	e00e      	b.n	801590c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80158ee:	89b8      	ldrh	r0, [r7, #12]
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158f6:	7fbb      	ldrb	r3, [r7, #30]
 80158f8:	4a2a      	ldr	r2, [pc, #168]	; (80159a4 <dhcp_renew+0x12c>)
 80158fa:	5cd3      	ldrb	r3, [r2, r3]
 80158fc:	461a      	mov	r2, r3
 80158fe:	f000 fa91 	bl	8015e24 <dhcp_option_byte>
 8015902:	4603      	mov	r3, r0
 8015904:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015906:	7fbb      	ldrb	r3, [r7, #30]
 8015908:	3301      	adds	r3, #1
 801590a:	77bb      	strb	r3, [r7, #30]
 801590c:	7fbb      	ldrb	r3, [r7, #30]
 801590e:	2b02      	cmp	r3, #2
 8015910:	d9ed      	bls.n	80158ee <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015912:	89b8      	ldrh	r0, [r7, #12]
 8015914:	693b      	ldr	r3, [r7, #16]
 8015916:	33f0      	adds	r3, #240	; 0xf0
 8015918:	697a      	ldr	r2, [r7, #20]
 801591a:	4619      	mov	r1, r3
 801591c:	f000 ff94 	bl	8016848 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015920:	4b21      	ldr	r3, [pc, #132]	; (80159a8 <dhcp_renew+0x130>)
 8015922:	6818      	ldr	r0, [r3, #0]
 8015924:	69bb      	ldr	r3, [r7, #24]
 8015926:	f103 0218 	add.w	r2, r3, #24
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	9300      	str	r3, [sp, #0]
 801592e:	2343      	movs	r3, #67	; 0x43
 8015930:	6979      	ldr	r1, [r7, #20]
 8015932:	f7fe fe1b 	bl	801456c <udp_sendto_if>
 8015936:	4603      	mov	r3, r0
 8015938:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801593a:	6978      	ldr	r0, [r7, #20]
 801593c:	f7f7 ff04 	bl	800d748 <pbuf_free>
 8015940:	e001      	b.n	8015946 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015942:	23ff      	movs	r3, #255	; 0xff
 8015944:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015946:	69bb      	ldr	r3, [r7, #24]
 8015948:	799b      	ldrb	r3, [r3, #6]
 801594a:	2bff      	cmp	r3, #255	; 0xff
 801594c:	d005      	beq.n	801595a <dhcp_renew+0xe2>
    dhcp->tries++;
 801594e:	69bb      	ldr	r3, [r7, #24]
 8015950:	799b      	ldrb	r3, [r3, #6]
 8015952:	3301      	adds	r3, #1
 8015954:	b2da      	uxtb	r2, r3
 8015956:	69bb      	ldr	r3, [r7, #24]
 8015958:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801595a:	69bb      	ldr	r3, [r7, #24]
 801595c:	799b      	ldrb	r3, [r3, #6]
 801595e:	2b09      	cmp	r3, #9
 8015960:	d80a      	bhi.n	8015978 <dhcp_renew+0x100>
 8015962:	69bb      	ldr	r3, [r7, #24]
 8015964:	799b      	ldrb	r3, [r3, #6]
 8015966:	b29b      	uxth	r3, r3
 8015968:	461a      	mov	r2, r3
 801596a:	0152      	lsls	r2, r2, #5
 801596c:	1ad2      	subs	r2, r2, r3
 801596e:	0092      	lsls	r2, r2, #2
 8015970:	4413      	add	r3, r2
 8015972:	011b      	lsls	r3, r3, #4
 8015974:	b29b      	uxth	r3, r3
 8015976:	e001      	b.n	801597c <dhcp_renew+0x104>
 8015978:	f644 6320 	movw	r3, #20000	; 0x4e20
 801597c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801597e:	89fb      	ldrh	r3, [r7, #14]
 8015980:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015984:	4a09      	ldr	r2, [pc, #36]	; (80159ac <dhcp_renew+0x134>)
 8015986:	fb82 1203 	smull	r1, r2, r2, r3
 801598a:	1152      	asrs	r2, r2, #5
 801598c:	17db      	asrs	r3, r3, #31
 801598e:	1ad3      	subs	r3, r2, r3
 8015990:	b29a      	uxth	r2, r3
 8015992:	69bb      	ldr	r3, [r7, #24]
 8015994:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015996:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801599a:	4618      	mov	r0, r3
 801599c:	3720      	adds	r7, #32
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}
 80159a2:	bf00      	nop
 80159a4:	2000001c 	.word	0x2000001c
 80159a8:	20004290 	.word	0x20004290
 80159ac:	10624dd3 	.word	0x10624dd3

080159b0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b08a      	sub	sp, #40	; 0x28
 80159b4:	af02      	add	r7, sp, #8
 80159b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159bc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80159be:	2104      	movs	r1, #4
 80159c0:	69b8      	ldr	r0, [r7, #24]
 80159c2:	f000 f9e1 	bl	8015d88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80159c6:	f107 030c 	add.w	r3, r7, #12
 80159ca:	2203      	movs	r2, #3
 80159cc:	69b9      	ldr	r1, [r7, #24]
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f000 fe64 	bl	801669c <dhcp_create_msg>
 80159d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d04c      	beq.n	8015a76 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	685b      	ldr	r3, [r3, #4]
 80159e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80159e2:	89b8      	ldrh	r0, [r7, #12]
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159ea:	2302      	movs	r3, #2
 80159ec:	2239      	movs	r2, #57	; 0x39
 80159ee:	f000 f9e5 	bl	8015dbc <dhcp_option>
 80159f2:	4603      	mov	r3, r0
 80159f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80159f6:	89b8      	ldrh	r0, [r7, #12]
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a02:	461a      	mov	r2, r3
 8015a04:	f000 fa34 	bl	8015e70 <dhcp_option_short>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015a0c:	89b8      	ldrh	r0, [r7, #12]
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a14:	2303      	movs	r3, #3
 8015a16:	2237      	movs	r2, #55	; 0x37
 8015a18:	f000 f9d0 	bl	8015dbc <dhcp_option>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015a20:	2300      	movs	r3, #0
 8015a22:	77bb      	strb	r3, [r7, #30]
 8015a24:	e00e      	b.n	8015a44 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015a26:	89b8      	ldrh	r0, [r7, #12]
 8015a28:	693b      	ldr	r3, [r7, #16]
 8015a2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a2e:	7fbb      	ldrb	r3, [r7, #30]
 8015a30:	4a29      	ldr	r2, [pc, #164]	; (8015ad8 <dhcp_rebind+0x128>)
 8015a32:	5cd3      	ldrb	r3, [r2, r3]
 8015a34:	461a      	mov	r2, r3
 8015a36:	f000 f9f5 	bl	8015e24 <dhcp_option_byte>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015a3e:	7fbb      	ldrb	r3, [r7, #30]
 8015a40:	3301      	adds	r3, #1
 8015a42:	77bb      	strb	r3, [r7, #30]
 8015a44:	7fbb      	ldrb	r3, [r7, #30]
 8015a46:	2b02      	cmp	r3, #2
 8015a48:	d9ed      	bls.n	8015a26 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015a4a:	89b8      	ldrh	r0, [r7, #12]
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	33f0      	adds	r3, #240	; 0xf0
 8015a50:	697a      	ldr	r2, [r7, #20]
 8015a52:	4619      	mov	r1, r3
 8015a54:	f000 fef8 	bl	8016848 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015a58:	4b20      	ldr	r3, [pc, #128]	; (8015adc <dhcp_rebind+0x12c>)
 8015a5a:	6818      	ldr	r0, [r3, #0]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	9300      	str	r3, [sp, #0]
 8015a60:	2343      	movs	r3, #67	; 0x43
 8015a62:	4a1f      	ldr	r2, [pc, #124]	; (8015ae0 <dhcp_rebind+0x130>)
 8015a64:	6979      	ldr	r1, [r7, #20]
 8015a66:	f7fe fd81 	bl	801456c <udp_sendto_if>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015a6e:	6978      	ldr	r0, [r7, #20]
 8015a70:	f7f7 fe6a 	bl	800d748 <pbuf_free>
 8015a74:	e001      	b.n	8015a7a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015a76:	23ff      	movs	r3, #255	; 0xff
 8015a78:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015a7a:	69bb      	ldr	r3, [r7, #24]
 8015a7c:	799b      	ldrb	r3, [r3, #6]
 8015a7e:	2bff      	cmp	r3, #255	; 0xff
 8015a80:	d005      	beq.n	8015a8e <dhcp_rebind+0xde>
    dhcp->tries++;
 8015a82:	69bb      	ldr	r3, [r7, #24]
 8015a84:	799b      	ldrb	r3, [r3, #6]
 8015a86:	3301      	adds	r3, #1
 8015a88:	b2da      	uxtb	r2, r3
 8015a8a:	69bb      	ldr	r3, [r7, #24]
 8015a8c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015a8e:	69bb      	ldr	r3, [r7, #24]
 8015a90:	799b      	ldrb	r3, [r3, #6]
 8015a92:	2b09      	cmp	r3, #9
 8015a94:	d80a      	bhi.n	8015aac <dhcp_rebind+0xfc>
 8015a96:	69bb      	ldr	r3, [r7, #24]
 8015a98:	799b      	ldrb	r3, [r3, #6]
 8015a9a:	b29b      	uxth	r3, r3
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	0152      	lsls	r2, r2, #5
 8015aa0:	1ad2      	subs	r2, r2, r3
 8015aa2:	0092      	lsls	r2, r2, #2
 8015aa4:	4413      	add	r3, r2
 8015aa6:	00db      	lsls	r3, r3, #3
 8015aa8:	b29b      	uxth	r3, r3
 8015aaa:	e001      	b.n	8015ab0 <dhcp_rebind+0x100>
 8015aac:	f242 7310 	movw	r3, #10000	; 0x2710
 8015ab0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015ab2:	89fb      	ldrh	r3, [r7, #14]
 8015ab4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015ab8:	4a0a      	ldr	r2, [pc, #40]	; (8015ae4 <dhcp_rebind+0x134>)
 8015aba:	fb82 1203 	smull	r1, r2, r2, r3
 8015abe:	1152      	asrs	r2, r2, #5
 8015ac0:	17db      	asrs	r3, r3, #31
 8015ac2:	1ad3      	subs	r3, r2, r3
 8015ac4:	b29a      	uxth	r2, r3
 8015ac6:	69bb      	ldr	r3, [r7, #24]
 8015ac8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015aca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3720      	adds	r7, #32
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
 8015ad6:	bf00      	nop
 8015ad8:	2000001c 	.word	0x2000001c
 8015adc:	20004290 	.word	0x20004290
 8015ae0:	0801e25c 	.word	0x0801e25c
 8015ae4:	10624dd3 	.word	0x10624dd3

08015ae8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015ae8:	b5b0      	push	{r4, r5, r7, lr}
 8015aea:	b08a      	sub	sp, #40	; 0x28
 8015aec:	af02      	add	r7, sp, #8
 8015aee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015af4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015af6:	2103      	movs	r1, #3
 8015af8:	69b8      	ldr	r0, [r7, #24]
 8015afa:	f000 f945 	bl	8015d88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015afe:	f107 030c 	add.w	r3, r7, #12
 8015b02:	2203      	movs	r2, #3
 8015b04:	69b9      	ldr	r1, [r7, #24]
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f000 fdc8 	bl	801669c <dhcp_create_msg>
 8015b0c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015b0e:	697b      	ldr	r3, [r7, #20]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d066      	beq.n	8015be2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	685b      	ldr	r3, [r3, #4]
 8015b18:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015b1a:	89b8      	ldrh	r0, [r7, #12]
 8015b1c:	693b      	ldr	r3, [r7, #16]
 8015b1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b22:	2302      	movs	r3, #2
 8015b24:	2239      	movs	r2, #57	; 0x39
 8015b26:	f000 f949 	bl	8015dbc <dhcp_option>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015b2e:	89b8      	ldrh	r0, [r7, #12]
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	33f0      	adds	r3, #240	; 0xf0
 8015b34:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015b38:	4619      	mov	r1, r3
 8015b3a:	f000 f999 	bl	8015e70 <dhcp_option_short>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015b42:	89b8      	ldrh	r0, [r7, #12]
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b4a:	2304      	movs	r3, #4
 8015b4c:	2232      	movs	r2, #50	; 0x32
 8015b4e:	f000 f935 	bl	8015dbc <dhcp_option>
 8015b52:	4603      	mov	r3, r0
 8015b54:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015b56:	89bc      	ldrh	r4, [r7, #12]
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015b5e:	69bb      	ldr	r3, [r7, #24]
 8015b60:	69db      	ldr	r3, [r3, #28]
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7f6 fa19 	bl	800bf9a <lwip_htonl>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	461a      	mov	r2, r3
 8015b6c:	4629      	mov	r1, r5
 8015b6e:	4620      	mov	r0, r4
 8015b70:	f000 f9b0 	bl	8015ed4 <dhcp_option_long>
 8015b74:	4603      	mov	r3, r0
 8015b76:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015b78:	89b8      	ldrh	r0, [r7, #12]
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b80:	2303      	movs	r3, #3
 8015b82:	2237      	movs	r2, #55	; 0x37
 8015b84:	f000 f91a 	bl	8015dbc <dhcp_option>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	77bb      	strb	r3, [r7, #30]
 8015b90:	e00e      	b.n	8015bb0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015b92:	89b8      	ldrh	r0, [r7, #12]
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b9a:	7fbb      	ldrb	r3, [r7, #30]
 8015b9c:	4a29      	ldr	r2, [pc, #164]	; (8015c44 <dhcp_reboot+0x15c>)
 8015b9e:	5cd3      	ldrb	r3, [r2, r3]
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	f000 f93f 	bl	8015e24 <dhcp_option_byte>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015baa:	7fbb      	ldrb	r3, [r7, #30]
 8015bac:	3301      	adds	r3, #1
 8015bae:	77bb      	strb	r3, [r7, #30]
 8015bb0:	7fbb      	ldrb	r3, [r7, #30]
 8015bb2:	2b02      	cmp	r3, #2
 8015bb4:	d9ed      	bls.n	8015b92 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015bb6:	89b8      	ldrh	r0, [r7, #12]
 8015bb8:	693b      	ldr	r3, [r7, #16]
 8015bba:	33f0      	adds	r3, #240	; 0xf0
 8015bbc:	697a      	ldr	r2, [r7, #20]
 8015bbe:	4619      	mov	r1, r3
 8015bc0:	f000 fe42 	bl	8016848 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015bc4:	4b20      	ldr	r3, [pc, #128]	; (8015c48 <dhcp_reboot+0x160>)
 8015bc6:	6818      	ldr	r0, [r3, #0]
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	9300      	str	r3, [sp, #0]
 8015bcc:	2343      	movs	r3, #67	; 0x43
 8015bce:	4a1f      	ldr	r2, [pc, #124]	; (8015c4c <dhcp_reboot+0x164>)
 8015bd0:	6979      	ldr	r1, [r7, #20]
 8015bd2:	f7fe fccb 	bl	801456c <udp_sendto_if>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015bda:	6978      	ldr	r0, [r7, #20]
 8015bdc:	f7f7 fdb4 	bl	800d748 <pbuf_free>
 8015be0:	e001      	b.n	8015be6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015be2:	23ff      	movs	r3, #255	; 0xff
 8015be4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015be6:	69bb      	ldr	r3, [r7, #24]
 8015be8:	799b      	ldrb	r3, [r3, #6]
 8015bea:	2bff      	cmp	r3, #255	; 0xff
 8015bec:	d005      	beq.n	8015bfa <dhcp_reboot+0x112>
    dhcp->tries++;
 8015bee:	69bb      	ldr	r3, [r7, #24]
 8015bf0:	799b      	ldrb	r3, [r3, #6]
 8015bf2:	3301      	adds	r3, #1
 8015bf4:	b2da      	uxtb	r2, r3
 8015bf6:	69bb      	ldr	r3, [r7, #24]
 8015bf8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015bfa:	69bb      	ldr	r3, [r7, #24]
 8015bfc:	799b      	ldrb	r3, [r3, #6]
 8015bfe:	2b09      	cmp	r3, #9
 8015c00:	d80a      	bhi.n	8015c18 <dhcp_reboot+0x130>
 8015c02:	69bb      	ldr	r3, [r7, #24]
 8015c04:	799b      	ldrb	r3, [r3, #6]
 8015c06:	b29b      	uxth	r3, r3
 8015c08:	461a      	mov	r2, r3
 8015c0a:	0152      	lsls	r2, r2, #5
 8015c0c:	1ad2      	subs	r2, r2, r3
 8015c0e:	0092      	lsls	r2, r2, #2
 8015c10:	4413      	add	r3, r2
 8015c12:	00db      	lsls	r3, r3, #3
 8015c14:	b29b      	uxth	r3, r3
 8015c16:	e001      	b.n	8015c1c <dhcp_reboot+0x134>
 8015c18:	f242 7310 	movw	r3, #10000	; 0x2710
 8015c1c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015c1e:	89fb      	ldrh	r3, [r7, #14]
 8015c20:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015c24:	4a0a      	ldr	r2, [pc, #40]	; (8015c50 <dhcp_reboot+0x168>)
 8015c26:	fb82 1203 	smull	r1, r2, r2, r3
 8015c2a:	1152      	asrs	r2, r2, #5
 8015c2c:	17db      	asrs	r3, r3, #31
 8015c2e:	1ad3      	subs	r3, r2, r3
 8015c30:	b29a      	uxth	r2, r3
 8015c32:	69bb      	ldr	r3, [r7, #24]
 8015c34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015c36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3720      	adds	r7, #32
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bdb0      	pop	{r4, r5, r7, pc}
 8015c42:	bf00      	nop
 8015c44:	2000001c 	.word	0x2000001c
 8015c48:	20004290 	.word	0x20004290
 8015c4c:	0801e25c 	.word	0x0801e25c
 8015c50:	10624dd3 	.word	0x10624dd3

08015c54 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015c54:	b5b0      	push	{r4, r5, r7, lr}
 8015c56:	b08a      	sub	sp, #40	; 0x28
 8015c58:	af02      	add	r7, sp, #8
 8015c5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c60:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015c62:	69fb      	ldr	r3, [r7, #28]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	f000 8084 	beq.w	8015d72 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015c6a:	69fb      	ldr	r3, [r7, #28]
 8015c6c:	795b      	ldrb	r3, [r3, #5]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	f000 8081 	beq.w	8015d76 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015c74:	69fb      	ldr	r3, [r7, #28]
 8015c76:	699b      	ldr	r3, [r3, #24]
 8015c78:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015c80:	69fb      	ldr	r3, [r7, #28]
 8015c82:	2200      	movs	r2, #0
 8015c84:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015c86:	69fb      	ldr	r3, [r7, #28]
 8015c88:	2200      	movs	r2, #0
 8015c8a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015c8c:	69fb      	ldr	r3, [r7, #28]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015c92:	69fb      	ldr	r3, [r7, #28]
 8015c94:	2200      	movs	r2, #0
 8015c96:	631a      	str	r2, [r3, #48]	; 0x30
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c9c:	69fb      	ldr	r3, [r7, #28]
 8015c9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015ca0:	69fb      	ldr	r3, [r7, #28]
 8015ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ca4:	69fb      	ldr	r3, [r7, #28]
 8015ca6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015ca8:	69fb      	ldr	r3, [r7, #28]
 8015caa:	2200      	movs	r2, #0
 8015cac:	829a      	strh	r2, [r3, #20]
 8015cae:	69fb      	ldr	r3, [r7, #28]
 8015cb0:	8a9a      	ldrh	r2, [r3, #20]
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	825a      	strh	r2, [r3, #18]
 8015cb6:	69fb      	ldr	r3, [r7, #28]
 8015cb8:	8a5a      	ldrh	r2, [r3, #18]
 8015cba:	69fb      	ldr	r3, [r7, #28]
 8015cbc:	821a      	strh	r2, [r3, #16]
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	8a1a      	ldrh	r2, [r3, #16]
 8015cc2:	69fb      	ldr	r3, [r7, #28]
 8015cc4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f000 fdec 	bl	80168a4 <dhcp_supplied_address>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d03b      	beq.n	8015d4a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015cd2:	f107 030e 	add.w	r3, r7, #14
 8015cd6:	2207      	movs	r2, #7
 8015cd8:	69f9      	ldr	r1, [r7, #28]
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f000 fcde 	bl	801669c <dhcp_create_msg>
 8015ce0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015ce2:	69bb      	ldr	r3, [r7, #24]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d030      	beq.n	8015d4a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015ce8:	69bb      	ldr	r3, [r7, #24]
 8015cea:	685b      	ldr	r3, [r3, #4]
 8015cec:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015cee:	89f8      	ldrh	r0, [r7, #14]
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015cf6:	2304      	movs	r3, #4
 8015cf8:	2236      	movs	r2, #54	; 0x36
 8015cfa:	f000 f85f 	bl	8015dbc <dhcp_option>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015d02:	89fc      	ldrh	r4, [r7, #14]
 8015d04:	697b      	ldr	r3, [r7, #20]
 8015d06:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015d0a:	693b      	ldr	r3, [r7, #16]
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7f6 f944 	bl	800bf9a <lwip_htonl>
 8015d12:	4603      	mov	r3, r0
 8015d14:	461a      	mov	r2, r3
 8015d16:	4629      	mov	r1, r5
 8015d18:	4620      	mov	r0, r4
 8015d1a:	f000 f8db 	bl	8015ed4 <dhcp_option_long>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015d22:	89f8      	ldrh	r0, [r7, #14]
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	33f0      	adds	r3, #240	; 0xf0
 8015d28:	69ba      	ldr	r2, [r7, #24]
 8015d2a:	4619      	mov	r1, r3
 8015d2c:	f000 fd8c 	bl	8016848 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015d30:	4b13      	ldr	r3, [pc, #76]	; (8015d80 <dhcp_release_and_stop+0x12c>)
 8015d32:	6818      	ldr	r0, [r3, #0]
 8015d34:	f107 0210 	add.w	r2, r7, #16
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	9300      	str	r3, [sp, #0]
 8015d3c:	2343      	movs	r3, #67	; 0x43
 8015d3e:	69b9      	ldr	r1, [r7, #24]
 8015d40:	f7fe fc14 	bl	801456c <udp_sendto_if>
      pbuf_free(p_out);
 8015d44:	69b8      	ldr	r0, [r7, #24]
 8015d46:	f7f7 fcff 	bl	800d748 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015d4a:	4b0e      	ldr	r3, [pc, #56]	; (8015d84 <dhcp_release_and_stop+0x130>)
 8015d4c:	4a0d      	ldr	r2, [pc, #52]	; (8015d84 <dhcp_release_and_stop+0x130>)
 8015d4e:	490d      	ldr	r1, [pc, #52]	; (8015d84 <dhcp_release_and_stop+0x130>)
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f7f6 ffb7 	bl	800ccc4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015d56:	2100      	movs	r1, #0
 8015d58:	69f8      	ldr	r0, [r7, #28]
 8015d5a:	f000 f815 	bl	8015d88 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015d5e:	69fb      	ldr	r3, [r7, #28]
 8015d60:	791b      	ldrb	r3, [r3, #4]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d008      	beq.n	8015d78 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015d66:	f7fe ff73 	bl	8014c50 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015d6a:	69fb      	ldr	r3, [r7, #28]
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	711a      	strb	r2, [r3, #4]
 8015d70:	e002      	b.n	8015d78 <dhcp_release_and_stop+0x124>
    return;
 8015d72:	bf00      	nop
 8015d74:	e000      	b.n	8015d78 <dhcp_release_and_stop+0x124>
    return;
 8015d76:	bf00      	nop
  }
}
 8015d78:	3720      	adds	r7, #32
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8015d7e:	bf00      	nop
 8015d80:	20004290 	.word	0x20004290
 8015d84:	0801e258 	.word	0x0801e258

08015d88 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015d88:	b480      	push	{r7}
 8015d8a:	b083      	sub	sp, #12
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
 8015d90:	460b      	mov	r3, r1
 8015d92:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	795b      	ldrb	r3, [r3, #5]
 8015d98:	78fa      	ldrb	r2, [r7, #3]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d008      	beq.n	8015db0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	78fa      	ldrb	r2, [r7, #3]
 8015da2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2200      	movs	r2, #0
 8015da8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	2200      	movs	r2, #0
 8015dae:	811a      	strh	r2, [r3, #8]
  }
}
 8015db0:	bf00      	nop
 8015db2:	370c      	adds	r7, #12
 8015db4:	46bd      	mov	sp, r7
 8015db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dba:	4770      	bx	lr

08015dbc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b082      	sub	sp, #8
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6039      	str	r1, [r7, #0]
 8015dc4:	4611      	mov	r1, r2
 8015dc6:	461a      	mov	r2, r3
 8015dc8:	4603      	mov	r3, r0
 8015dca:	80fb      	strh	r3, [r7, #6]
 8015dcc:	460b      	mov	r3, r1
 8015dce:	717b      	strb	r3, [r7, #5]
 8015dd0:	4613      	mov	r3, r2
 8015dd2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015dd4:	88fa      	ldrh	r2, [r7, #6]
 8015dd6:	793b      	ldrb	r3, [r7, #4]
 8015dd8:	4413      	add	r3, r2
 8015dda:	3302      	adds	r3, #2
 8015ddc:	2b44      	cmp	r3, #68	; 0x44
 8015dde:	d906      	bls.n	8015dee <dhcp_option+0x32>
 8015de0:	4b0d      	ldr	r3, [pc, #52]	; (8015e18 <dhcp_option+0x5c>)
 8015de2:	f240 529a 	movw	r2, #1434	; 0x59a
 8015de6:	490d      	ldr	r1, [pc, #52]	; (8015e1c <dhcp_option+0x60>)
 8015de8:	480d      	ldr	r0, [pc, #52]	; (8015e20 <dhcp_option+0x64>)
 8015dea:	f003 fa9f 	bl	801932c <iprintf>
  options[options_out_len++] = option_type;
 8015dee:	88fb      	ldrh	r3, [r7, #6]
 8015df0:	1c5a      	adds	r2, r3, #1
 8015df2:	80fa      	strh	r2, [r7, #6]
 8015df4:	461a      	mov	r2, r3
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	4413      	add	r3, r2
 8015dfa:	797a      	ldrb	r2, [r7, #5]
 8015dfc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015dfe:	88fb      	ldrh	r3, [r7, #6]
 8015e00:	1c5a      	adds	r2, r3, #1
 8015e02:	80fa      	strh	r2, [r7, #6]
 8015e04:	461a      	mov	r2, r3
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	4413      	add	r3, r2
 8015e0a:	793a      	ldrb	r2, [r7, #4]
 8015e0c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015e0e:	88fb      	ldrh	r3, [r7, #6]
}
 8015e10:	4618      	mov	r0, r3
 8015e12:	3708      	adds	r7, #8
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}
 8015e18:	0801d674 	.word	0x0801d674
 8015e1c:	0801d808 	.word	0x0801d808
 8015e20:	0801d6d4 	.word	0x0801d6d4

08015e24 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	6039      	str	r1, [r7, #0]
 8015e2e:	80fb      	strh	r3, [r7, #6]
 8015e30:	4613      	mov	r3, r2
 8015e32:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015e34:	88fb      	ldrh	r3, [r7, #6]
 8015e36:	2b43      	cmp	r3, #67	; 0x43
 8015e38:	d906      	bls.n	8015e48 <dhcp_option_byte+0x24>
 8015e3a:	4b0a      	ldr	r3, [pc, #40]	; (8015e64 <dhcp_option_byte+0x40>)
 8015e3c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015e40:	4909      	ldr	r1, [pc, #36]	; (8015e68 <dhcp_option_byte+0x44>)
 8015e42:	480a      	ldr	r0, [pc, #40]	; (8015e6c <dhcp_option_byte+0x48>)
 8015e44:	f003 fa72 	bl	801932c <iprintf>
  options[options_out_len++] = value;
 8015e48:	88fb      	ldrh	r3, [r7, #6]
 8015e4a:	1c5a      	adds	r2, r3, #1
 8015e4c:	80fa      	strh	r2, [r7, #6]
 8015e4e:	461a      	mov	r2, r3
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	4413      	add	r3, r2
 8015e54:	797a      	ldrb	r2, [r7, #5]
 8015e56:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015e58:	88fb      	ldrh	r3, [r7, #6]
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3708      	adds	r7, #8
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}
 8015e62:	bf00      	nop
 8015e64:	0801d674 	.word	0x0801d674
 8015e68:	0801d84c 	.word	0x0801d84c
 8015e6c:	0801d6d4 	.word	0x0801d6d4

08015e70 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b082      	sub	sp, #8
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	4603      	mov	r3, r0
 8015e78:	6039      	str	r1, [r7, #0]
 8015e7a:	80fb      	strh	r3, [r7, #6]
 8015e7c:	4613      	mov	r3, r2
 8015e7e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015e80:	88fb      	ldrh	r3, [r7, #6]
 8015e82:	3302      	adds	r3, #2
 8015e84:	2b44      	cmp	r3, #68	; 0x44
 8015e86:	d906      	bls.n	8015e96 <dhcp_option_short+0x26>
 8015e88:	4b0f      	ldr	r3, [pc, #60]	; (8015ec8 <dhcp_option_short+0x58>)
 8015e8a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015e8e:	490f      	ldr	r1, [pc, #60]	; (8015ecc <dhcp_option_short+0x5c>)
 8015e90:	480f      	ldr	r0, [pc, #60]	; (8015ed0 <dhcp_option_short+0x60>)
 8015e92:	f003 fa4b 	bl	801932c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015e96:	88bb      	ldrh	r3, [r7, #4]
 8015e98:	0a1b      	lsrs	r3, r3, #8
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	88fb      	ldrh	r3, [r7, #6]
 8015e9e:	1c59      	adds	r1, r3, #1
 8015ea0:	80f9      	strh	r1, [r7, #6]
 8015ea2:	4619      	mov	r1, r3
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	440b      	add	r3, r1
 8015ea8:	b2d2      	uxtb	r2, r2
 8015eaa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015eac:	88fb      	ldrh	r3, [r7, #6]
 8015eae:	1c5a      	adds	r2, r3, #1
 8015eb0:	80fa      	strh	r2, [r7, #6]
 8015eb2:	461a      	mov	r2, r3
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	4413      	add	r3, r2
 8015eb8:	88ba      	ldrh	r2, [r7, #4]
 8015eba:	b2d2      	uxtb	r2, r2
 8015ebc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015ebe:	88fb      	ldrh	r3, [r7, #6]
}
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	3708      	adds	r7, #8
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}
 8015ec8:	0801d674 	.word	0x0801d674
 8015ecc:	0801d884 	.word	0x0801d884
 8015ed0:	0801d6d4 	.word	0x0801d6d4

08015ed4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b084      	sub	sp, #16
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	4603      	mov	r3, r0
 8015edc:	60b9      	str	r1, [r7, #8]
 8015ede:	607a      	str	r2, [r7, #4]
 8015ee0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015ee2:	89fb      	ldrh	r3, [r7, #14]
 8015ee4:	3304      	adds	r3, #4
 8015ee6:	2b44      	cmp	r3, #68	; 0x44
 8015ee8:	d906      	bls.n	8015ef8 <dhcp_option_long+0x24>
 8015eea:	4b19      	ldr	r3, [pc, #100]	; (8015f50 <dhcp_option_long+0x7c>)
 8015eec:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015ef0:	4918      	ldr	r1, [pc, #96]	; (8015f54 <dhcp_option_long+0x80>)
 8015ef2:	4819      	ldr	r0, [pc, #100]	; (8015f58 <dhcp_option_long+0x84>)
 8015ef4:	f003 fa1a 	bl	801932c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	0e1a      	lsrs	r2, r3, #24
 8015efc:	89fb      	ldrh	r3, [r7, #14]
 8015efe:	1c59      	adds	r1, r3, #1
 8015f00:	81f9      	strh	r1, [r7, #14]
 8015f02:	4619      	mov	r1, r3
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	440b      	add	r3, r1
 8015f08:	b2d2      	uxtb	r2, r2
 8015f0a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	0c1a      	lsrs	r2, r3, #16
 8015f10:	89fb      	ldrh	r3, [r7, #14]
 8015f12:	1c59      	adds	r1, r3, #1
 8015f14:	81f9      	strh	r1, [r7, #14]
 8015f16:	4619      	mov	r1, r3
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	440b      	add	r3, r1
 8015f1c:	b2d2      	uxtb	r2, r2
 8015f1e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	0a1a      	lsrs	r2, r3, #8
 8015f24:	89fb      	ldrh	r3, [r7, #14]
 8015f26:	1c59      	adds	r1, r3, #1
 8015f28:	81f9      	strh	r1, [r7, #14]
 8015f2a:	4619      	mov	r1, r3
 8015f2c:	68bb      	ldr	r3, [r7, #8]
 8015f2e:	440b      	add	r3, r1
 8015f30:	b2d2      	uxtb	r2, r2
 8015f32:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015f34:	89fb      	ldrh	r3, [r7, #14]
 8015f36:	1c5a      	adds	r2, r3, #1
 8015f38:	81fa      	strh	r2, [r7, #14]
 8015f3a:	461a      	mov	r2, r3
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	4413      	add	r3, r2
 8015f40:	687a      	ldr	r2, [r7, #4]
 8015f42:	b2d2      	uxtb	r2, r2
 8015f44:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015f46:	89fb      	ldrh	r3, [r7, #14]
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3710      	adds	r7, #16
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}
 8015f50:	0801d674 	.word	0x0801d674
 8015f54:	0801d8c0 	.word	0x0801d8c0
 8015f58:	0801d6d4 	.word	0x0801d6d4

08015f5c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b090      	sub	sp, #64	; 0x40
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
 8015f64:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015f66:	2300      	movs	r3, #0
 8015f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015f6e:	2208      	movs	r2, #8
 8015f70:	2100      	movs	r1, #0
 8015f72:	48be      	ldr	r0, [pc, #760]	; (801626c <dhcp_parse_reply+0x310>)
 8015f74:	f003 f9d1 	bl	801931a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	895b      	ldrh	r3, [r3, #10]
 8015f7c:	2b2b      	cmp	r3, #43	; 0x2b
 8015f7e:	d802      	bhi.n	8015f86 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015f80:	f06f 0301 	mvn.w	r3, #1
 8015f84:	e2a8      	b.n	80164d8 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	685b      	ldr	r3, [r3, #4]
 8015f8a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015f8c:	23f0      	movs	r3, #240	; 0xf0
 8015f8e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	891b      	ldrh	r3, [r3, #8]
 8015f94:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015f9a:	e00c      	b.n	8015fb6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f9e:	895b      	ldrh	r3, [r3, #10]
 8015fa0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015fa2:	1ad3      	subs	r3, r2, r3
 8015fa4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fa8:	895b      	ldrh	r3, [r3, #10]
 8015faa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015fac:	1ad3      	subs	r3, r2, r3
 8015fae:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d004      	beq.n	8015fc6 <dhcp_parse_reply+0x6a>
 8015fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fbe:	895b      	ldrh	r3, [r3, #10]
 8015fc0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d2ea      	bcs.n	8015f9c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d102      	bne.n	8015fd2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015fcc:	f06f 0301 	mvn.w	r3, #1
 8015fd0:	e282      	b.n	80164d8 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8015fd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015fd4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015fd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015fd8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015fe0:	e23a      	b.n	8016458 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8015fe2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015fe6:	4413      	add	r3, r2
 8015fe8:	781b      	ldrb	r3, [r3, #0]
 8015fea:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015fec:	2300      	movs	r3, #0
 8015fee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ff6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015ff8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ffa:	3302      	adds	r3, #2
 8015ffc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015ffe:	8bfa      	ldrh	r2, [r7, #30]
 8016000:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016002:	429a      	cmp	r2, r3
 8016004:	d202      	bcs.n	801600c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8016006:	f06f 0301 	mvn.w	r3, #1
 801600a:	e265      	b.n	80164d8 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801600c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801600e:	3301      	adds	r3, #1
 8016010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016012:	8952      	ldrh	r2, [r2, #10]
 8016014:	4293      	cmp	r3, r2
 8016016:	da07      	bge.n	8016028 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8016018:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801601a:	3301      	adds	r3, #1
 801601c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801601e:	4413      	add	r3, r2
 8016020:	781b      	ldrb	r3, [r3, #0]
 8016022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016026:	e00b      	b.n	8016040 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d004      	beq.n	801603a <dhcp_parse_reply+0xde>
 8016030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	685b      	ldr	r3, [r3, #4]
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	e000      	b.n	801603c <dhcp_parse_reply+0xe0>
 801603a:	2300      	movs	r3, #0
 801603c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8016048:	7dfb      	ldrb	r3, [r7, #23]
 801604a:	2b3b      	cmp	r3, #59	; 0x3b
 801604c:	f200 812d 	bhi.w	80162aa <dhcp_parse_reply+0x34e>
 8016050:	a201      	add	r2, pc, #4	; (adr r2, 8016058 <dhcp_parse_reply+0xfc>)
 8016052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016056:	bf00      	nop
 8016058:	08016149 	.word	0x08016149
 801605c:	08016159 	.word	0x08016159
 8016060:	080162ab 	.word	0x080162ab
 8016064:	0801617b 	.word	0x0801617b
 8016068:	080162ab 	.word	0x080162ab
 801606c:	080162ab 	.word	0x080162ab
 8016070:	080162ab 	.word	0x080162ab
 8016074:	080162ab 	.word	0x080162ab
 8016078:	080162ab 	.word	0x080162ab
 801607c:	080162ab 	.word	0x080162ab
 8016080:	080162ab 	.word	0x080162ab
 8016084:	080162ab 	.word	0x080162ab
 8016088:	080162ab 	.word	0x080162ab
 801608c:	080162ab 	.word	0x080162ab
 8016090:	080162ab 	.word	0x080162ab
 8016094:	080162ab 	.word	0x080162ab
 8016098:	080162ab 	.word	0x080162ab
 801609c:	080162ab 	.word	0x080162ab
 80160a0:	080162ab 	.word	0x080162ab
 80160a4:	080162ab 	.word	0x080162ab
 80160a8:	080162ab 	.word	0x080162ab
 80160ac:	080162ab 	.word	0x080162ab
 80160b0:	080162ab 	.word	0x080162ab
 80160b4:	080162ab 	.word	0x080162ab
 80160b8:	080162ab 	.word	0x080162ab
 80160bc:	080162ab 	.word	0x080162ab
 80160c0:	080162ab 	.word	0x080162ab
 80160c4:	080162ab 	.word	0x080162ab
 80160c8:	080162ab 	.word	0x080162ab
 80160cc:	080162ab 	.word	0x080162ab
 80160d0:	080162ab 	.word	0x080162ab
 80160d4:	080162ab 	.word	0x080162ab
 80160d8:	080162ab 	.word	0x080162ab
 80160dc:	080162ab 	.word	0x080162ab
 80160e0:	080162ab 	.word	0x080162ab
 80160e4:	080162ab 	.word	0x080162ab
 80160e8:	080162ab 	.word	0x080162ab
 80160ec:	080162ab 	.word	0x080162ab
 80160f0:	080162ab 	.word	0x080162ab
 80160f4:	080162ab 	.word	0x080162ab
 80160f8:	080162ab 	.word	0x080162ab
 80160fc:	080162ab 	.word	0x080162ab
 8016100:	080162ab 	.word	0x080162ab
 8016104:	080162ab 	.word	0x080162ab
 8016108:	080162ab 	.word	0x080162ab
 801610c:	080162ab 	.word	0x080162ab
 8016110:	080162ab 	.word	0x080162ab
 8016114:	080162ab 	.word	0x080162ab
 8016118:	080162ab 	.word	0x080162ab
 801611c:	080162ab 	.word	0x080162ab
 8016120:	080162ab 	.word	0x080162ab
 8016124:	080161a7 	.word	0x080161a7
 8016128:	080161c9 	.word	0x080161c9
 801612c:	08016205 	.word	0x08016205
 8016130:	08016227 	.word	0x08016227
 8016134:	080162ab 	.word	0x080162ab
 8016138:	080162ab 	.word	0x080162ab
 801613c:	080162ab 	.word	0x080162ab
 8016140:	08016249 	.word	0x08016249
 8016144:	08016289 	.word	0x08016289
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016148:	2300      	movs	r3, #0
 801614a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801614e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016152:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8016156:	e0ac      	b.n	80162b2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801615c:	2b04      	cmp	r3, #4
 801615e:	d009      	beq.n	8016174 <dhcp_parse_reply+0x218>
 8016160:	4b43      	ldr	r3, [pc, #268]	; (8016270 <dhcp_parse_reply+0x314>)
 8016162:	f240 622e 	movw	r2, #1582	; 0x62e
 8016166:	4943      	ldr	r1, [pc, #268]	; (8016274 <dhcp_parse_reply+0x318>)
 8016168:	4843      	ldr	r0, [pc, #268]	; (8016278 <dhcp_parse_reply+0x31c>)
 801616a:	f003 f8df 	bl	801932c <iprintf>
 801616e:	f06f 0305 	mvn.w	r3, #5
 8016172:	e1b1      	b.n	80164d8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016174:	2306      	movs	r3, #6
 8016176:	623b      	str	r3, [r7, #32]
        break;
 8016178:	e09b      	b.n	80162b2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801617a:	2304      	movs	r3, #4
 801617c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016180:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016188:	429a      	cmp	r2, r3
 801618a:	d209      	bcs.n	80161a0 <dhcp_parse_reply+0x244>
 801618c:	4b38      	ldr	r3, [pc, #224]	; (8016270 <dhcp_parse_reply+0x314>)
 801618e:	f240 6233 	movw	r2, #1587	; 0x633
 8016192:	493a      	ldr	r1, [pc, #232]	; (801627c <dhcp_parse_reply+0x320>)
 8016194:	4838      	ldr	r0, [pc, #224]	; (8016278 <dhcp_parse_reply+0x31c>)
 8016196:	f003 f8c9 	bl	801932c <iprintf>
 801619a:	f06f 0305 	mvn.w	r3, #5
 801619e:	e19b      	b.n	80164d8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80161a0:	2307      	movs	r3, #7
 80161a2:	623b      	str	r3, [r7, #32]
        break;
 80161a4:	e085      	b.n	80162b2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80161a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161aa:	2b04      	cmp	r3, #4
 80161ac:	d009      	beq.n	80161c2 <dhcp_parse_reply+0x266>
 80161ae:	4b30      	ldr	r3, [pc, #192]	; (8016270 <dhcp_parse_reply+0x314>)
 80161b0:	f240 6241 	movw	r2, #1601	; 0x641
 80161b4:	492f      	ldr	r1, [pc, #188]	; (8016274 <dhcp_parse_reply+0x318>)
 80161b6:	4830      	ldr	r0, [pc, #192]	; (8016278 <dhcp_parse_reply+0x31c>)
 80161b8:	f003 f8b8 	bl	801932c <iprintf>
 80161bc:	f06f 0305 	mvn.w	r3, #5
 80161c0:	e18a      	b.n	80164d8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80161c2:	2303      	movs	r3, #3
 80161c4:	623b      	str	r3, [r7, #32]
        break;
 80161c6:	e074      	b.n	80162b2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80161c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161cc:	2b01      	cmp	r3, #1
 80161ce:	d009      	beq.n	80161e4 <dhcp_parse_reply+0x288>
 80161d0:	4b27      	ldr	r3, [pc, #156]	; (8016270 <dhcp_parse_reply+0x314>)
 80161d2:	f240 624f 	movw	r2, #1615	; 0x64f
 80161d6:	492a      	ldr	r1, [pc, #168]	; (8016280 <dhcp_parse_reply+0x324>)
 80161d8:	4827      	ldr	r0, [pc, #156]	; (8016278 <dhcp_parse_reply+0x31c>)
 80161da:	f003 f8a7 	bl	801932c <iprintf>
 80161de:	f06f 0305 	mvn.w	r3, #5
 80161e2:	e179      	b.n	80164d8 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80161e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80161e6:	2bf0      	cmp	r3, #240	; 0xf0
 80161e8:	d009      	beq.n	80161fe <dhcp_parse_reply+0x2a2>
 80161ea:	4b21      	ldr	r3, [pc, #132]	; (8016270 <dhcp_parse_reply+0x314>)
 80161ec:	f240 6251 	movw	r2, #1617	; 0x651
 80161f0:	4924      	ldr	r1, [pc, #144]	; (8016284 <dhcp_parse_reply+0x328>)
 80161f2:	4821      	ldr	r0, [pc, #132]	; (8016278 <dhcp_parse_reply+0x31c>)
 80161f4:	f003 f89a 	bl	801932c <iprintf>
 80161f8:	f06f 0305 	mvn.w	r3, #5
 80161fc:	e16c      	b.n	80164d8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80161fe:	2300      	movs	r3, #0
 8016200:	623b      	str	r3, [r7, #32]
        break;
 8016202:	e056      	b.n	80162b2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016208:	2b01      	cmp	r3, #1
 801620a:	d009      	beq.n	8016220 <dhcp_parse_reply+0x2c4>
 801620c:	4b18      	ldr	r3, [pc, #96]	; (8016270 <dhcp_parse_reply+0x314>)
 801620e:	f240 6255 	movw	r2, #1621	; 0x655
 8016212:	491b      	ldr	r1, [pc, #108]	; (8016280 <dhcp_parse_reply+0x324>)
 8016214:	4818      	ldr	r0, [pc, #96]	; (8016278 <dhcp_parse_reply+0x31c>)
 8016216:	f003 f889 	bl	801932c <iprintf>
 801621a:	f06f 0305 	mvn.w	r3, #5
 801621e:	e15b      	b.n	80164d8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016220:	2301      	movs	r3, #1
 8016222:	623b      	str	r3, [r7, #32]
        break;
 8016224:	e045      	b.n	80162b2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801622a:	2b04      	cmp	r3, #4
 801622c:	d009      	beq.n	8016242 <dhcp_parse_reply+0x2e6>
 801622e:	4b10      	ldr	r3, [pc, #64]	; (8016270 <dhcp_parse_reply+0x314>)
 8016230:	f240 6259 	movw	r2, #1625	; 0x659
 8016234:	490f      	ldr	r1, [pc, #60]	; (8016274 <dhcp_parse_reply+0x318>)
 8016236:	4810      	ldr	r0, [pc, #64]	; (8016278 <dhcp_parse_reply+0x31c>)
 8016238:	f003 f878 	bl	801932c <iprintf>
 801623c:	f06f 0305 	mvn.w	r3, #5
 8016240:	e14a      	b.n	80164d8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016242:	2302      	movs	r3, #2
 8016244:	623b      	str	r3, [r7, #32]
        break;
 8016246:	e034      	b.n	80162b2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801624c:	2b04      	cmp	r3, #4
 801624e:	d009      	beq.n	8016264 <dhcp_parse_reply+0x308>
 8016250:	4b07      	ldr	r3, [pc, #28]	; (8016270 <dhcp_parse_reply+0x314>)
 8016252:	f240 625d 	movw	r2, #1629	; 0x65d
 8016256:	4907      	ldr	r1, [pc, #28]	; (8016274 <dhcp_parse_reply+0x318>)
 8016258:	4807      	ldr	r0, [pc, #28]	; (8016278 <dhcp_parse_reply+0x31c>)
 801625a:	f003 f867 	bl	801932c <iprintf>
 801625e:	f06f 0305 	mvn.w	r3, #5
 8016262:	e139      	b.n	80164d8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016264:	2304      	movs	r3, #4
 8016266:	623b      	str	r3, [r7, #32]
        break;
 8016268:	e023      	b.n	80162b2 <dhcp_parse_reply+0x356>
 801626a:	bf00      	nop
 801626c:	2000b150 	.word	0x2000b150
 8016270:	0801d674 	.word	0x0801d674
 8016274:	0801d8fc 	.word	0x0801d8fc
 8016278:	0801d6d4 	.word	0x0801d6d4
 801627c:	0801d908 	.word	0x0801d908
 8016280:	0801d91c 	.word	0x0801d91c
 8016284:	0801d928 	.word	0x0801d928
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801628c:	2b04      	cmp	r3, #4
 801628e:	d009      	beq.n	80162a4 <dhcp_parse_reply+0x348>
 8016290:	4b93      	ldr	r3, [pc, #588]	; (80164e0 <dhcp_parse_reply+0x584>)
 8016292:	f240 6261 	movw	r2, #1633	; 0x661
 8016296:	4993      	ldr	r1, [pc, #588]	; (80164e4 <dhcp_parse_reply+0x588>)
 8016298:	4893      	ldr	r0, [pc, #588]	; (80164e8 <dhcp_parse_reply+0x58c>)
 801629a:	f003 f847 	bl	801932c <iprintf>
 801629e:	f06f 0305 	mvn.w	r3, #5
 80162a2:	e119      	b.n	80164d8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80162a4:	2305      	movs	r3, #5
 80162a6:	623b      	str	r3, [r7, #32]
        break;
 80162a8:	e003      	b.n	80162b2 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80162aa:	2300      	movs	r3, #0
 80162ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80162b0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80162b2:	7dfb      	ldrb	r3, [r7, #23]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d103      	bne.n	80162c0 <dhcp_parse_reply+0x364>
      offset++;
 80162b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162ba:	3301      	adds	r3, #1
 80162bc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80162be:	e0a1      	b.n	8016404 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80162c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162c6:	4413      	add	r3, r2
 80162c8:	3302      	adds	r3, #2
 80162ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162ce:	db02      	blt.n	80162d6 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80162d0:	f06f 0301 	mvn.w	r3, #1
 80162d4:	e100      	b.n	80164d8 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80162d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162da:	b29a      	uxth	r2, r3
 80162dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162de:	4413      	add	r3, r2
 80162e0:	b29b      	uxth	r3, r3
 80162e2:	3302      	adds	r3, #2
 80162e4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80162e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	f000 808a 	beq.w	8016404 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80162f0:	2300      	movs	r3, #0
 80162f2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80162f4:	6a3b      	ldr	r3, [r7, #32]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	db02      	blt.n	8016300 <dhcp_parse_reply+0x3a4>
 80162fa:	6a3b      	ldr	r3, [r7, #32]
 80162fc:	2b07      	cmp	r3, #7
 80162fe:	dd06      	ble.n	801630e <dhcp_parse_reply+0x3b2>
 8016300:	4b77      	ldr	r3, [pc, #476]	; (80164e0 <dhcp_parse_reply+0x584>)
 8016302:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8016306:	4979      	ldr	r1, [pc, #484]	; (80164ec <dhcp_parse_reply+0x590>)
 8016308:	4877      	ldr	r0, [pc, #476]	; (80164e8 <dhcp_parse_reply+0x58c>)
 801630a:	f003 f80f 	bl	801932c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801630e:	4a78      	ldr	r2, [pc, #480]	; (80164f0 <dhcp_parse_reply+0x594>)
 8016310:	6a3b      	ldr	r3, [r7, #32]
 8016312:	4413      	add	r3, r2
 8016314:	781b      	ldrb	r3, [r3, #0]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d174      	bne.n	8016404 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801631a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801631e:	2b04      	cmp	r3, #4
 8016320:	bf28      	it	cs
 8016322:	2304      	movcs	r3, #4
 8016324:	b2db      	uxtb	r3, r3
 8016326:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016328:	8bfb      	ldrh	r3, [r7, #30]
 801632a:	8aba      	ldrh	r2, [r7, #20]
 801632c:	f107 0108 	add.w	r1, r7, #8
 8016330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016332:	f7f7 fc0f 	bl	800db54 <pbuf_copy_partial>
 8016336:	4603      	mov	r3, r0
 8016338:	461a      	mov	r2, r3
 801633a:	8abb      	ldrh	r3, [r7, #20]
 801633c:	4293      	cmp	r3, r2
 801633e:	d002      	beq.n	8016346 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8016340:	f06f 0301 	mvn.w	r3, #1
 8016344:	e0c8      	b.n	80164d8 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8016346:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801634a:	2b04      	cmp	r3, #4
 801634c:	d933      	bls.n	80163b6 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801634e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016352:	f003 0303 	and.w	r3, r3, #3
 8016356:	b2db      	uxtb	r3, r3
 8016358:	2b00      	cmp	r3, #0
 801635a:	d009      	beq.n	8016370 <dhcp_parse_reply+0x414>
 801635c:	4b60      	ldr	r3, [pc, #384]	; (80164e0 <dhcp_parse_reply+0x584>)
 801635e:	f240 6281 	movw	r2, #1665	; 0x681
 8016362:	4964      	ldr	r1, [pc, #400]	; (80164f4 <dhcp_parse_reply+0x598>)
 8016364:	4860      	ldr	r0, [pc, #384]	; (80164e8 <dhcp_parse_reply+0x58c>)
 8016366:	f002 ffe1 	bl	801932c <iprintf>
 801636a:	f06f 0305 	mvn.w	r3, #5
 801636e:	e0b3      	b.n	80164d8 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8016370:	4a5f      	ldr	r2, [pc, #380]	; (80164f0 <dhcp_parse_reply+0x594>)
 8016372:	6a3b      	ldr	r3, [r7, #32]
 8016374:	4413      	add	r3, r2
 8016376:	2201      	movs	r2, #1
 8016378:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801637a:	68bb      	ldr	r3, [r7, #8]
 801637c:	4618      	mov	r0, r3
 801637e:	f7f5 fe0c 	bl	800bf9a <lwip_htonl>
 8016382:	4601      	mov	r1, r0
 8016384:	4a5c      	ldr	r2, [pc, #368]	; (80164f8 <dhcp_parse_reply+0x59c>)
 8016386:	6a3b      	ldr	r3, [r7, #32]
 8016388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801638c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016390:	3b04      	subs	r3, #4
 8016392:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8016396:	8bfb      	ldrh	r3, [r7, #30]
 8016398:	3304      	adds	r3, #4
 801639a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801639c:	8a7a      	ldrh	r2, [r7, #18]
 801639e:	8bfb      	ldrh	r3, [r7, #30]
 80163a0:	429a      	cmp	r2, r3
 80163a2:	d202      	bcs.n	80163aa <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80163a4:	f06f 0301 	mvn.w	r3, #1
 80163a8:	e096      	b.n	80164d8 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80163aa:	8a7b      	ldrh	r3, [r7, #18]
 80163ac:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80163ae:	6a3b      	ldr	r3, [r7, #32]
 80163b0:	3301      	adds	r3, #1
 80163b2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80163b4:	e79e      	b.n	80162f4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80163b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80163ba:	2b04      	cmp	r3, #4
 80163bc:	d106      	bne.n	80163cc <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	4618      	mov	r0, r3
 80163c2:	f7f5 fdea 	bl	800bf9a <lwip_htonl>
 80163c6:	4603      	mov	r3, r0
 80163c8:	60bb      	str	r3, [r7, #8]
 80163ca:	e011      	b.n	80163f0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80163cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80163d0:	2b01      	cmp	r3, #1
 80163d2:	d009      	beq.n	80163e8 <dhcp_parse_reply+0x48c>
 80163d4:	4b42      	ldr	r3, [pc, #264]	; (80164e0 <dhcp_parse_reply+0x584>)
 80163d6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80163da:	4948      	ldr	r1, [pc, #288]	; (80164fc <dhcp_parse_reply+0x5a0>)
 80163dc:	4842      	ldr	r0, [pc, #264]	; (80164e8 <dhcp_parse_reply+0x58c>)
 80163de:	f002 ffa5 	bl	801932c <iprintf>
 80163e2:	f06f 0305 	mvn.w	r3, #5
 80163e6:	e077      	b.n	80164d8 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80163e8:	f107 0308 	add.w	r3, r7, #8
 80163ec:	781b      	ldrb	r3, [r3, #0]
 80163ee:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80163f0:	4a3f      	ldr	r2, [pc, #252]	; (80164f0 <dhcp_parse_reply+0x594>)
 80163f2:	6a3b      	ldr	r3, [r7, #32]
 80163f4:	4413      	add	r3, r2
 80163f6:	2201      	movs	r2, #1
 80163f8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80163fa:	68ba      	ldr	r2, [r7, #8]
 80163fc:	493e      	ldr	r1, [pc, #248]	; (80164f8 <dhcp_parse_reply+0x59c>)
 80163fe:	6a3b      	ldr	r3, [r7, #32]
 8016400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016406:	895b      	ldrh	r3, [r3, #10]
 8016408:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801640a:	429a      	cmp	r2, r3
 801640c:	d324      	bcc.n	8016458 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016410:	895b      	ldrh	r3, [r3, #10]
 8016412:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016414:	1ad3      	subs	r3, r2, r3
 8016416:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8016418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801641a:	895b      	ldrh	r3, [r3, #10]
 801641c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801641e:	1ad3      	subs	r3, r2, r3
 8016420:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8016422:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016424:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016426:	429a      	cmp	r2, r3
 8016428:	d213      	bcs.n	8016452 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8016430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016432:	2b00      	cmp	r3, #0
 8016434:	d109      	bne.n	801644a <dhcp_parse_reply+0x4ee>
 8016436:	4b2a      	ldr	r3, [pc, #168]	; (80164e0 <dhcp_parse_reply+0x584>)
 8016438:	f240 629d 	movw	r2, #1693	; 0x69d
 801643c:	4930      	ldr	r1, [pc, #192]	; (8016500 <dhcp_parse_reply+0x5a4>)
 801643e:	482a      	ldr	r0, [pc, #168]	; (80164e8 <dhcp_parse_reply+0x58c>)
 8016440:	f002 ff74 	bl	801932c <iprintf>
 8016444:	f06f 0305 	mvn.w	r3, #5
 8016448:	e046      	b.n	80164d8 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644c:	685b      	ldr	r3, [r3, #4]
 801644e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016450:	e002      	b.n	8016458 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016452:	f06f 0301 	mvn.w	r3, #1
 8016456:	e03f      	b.n	80164d8 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801645a:	2b00      	cmp	r3, #0
 801645c:	d00a      	beq.n	8016474 <dhcp_parse_reply+0x518>
 801645e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016460:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016462:	429a      	cmp	r2, r3
 8016464:	d206      	bcs.n	8016474 <dhcp_parse_reply+0x518>
 8016466:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801646a:	4413      	add	r3, r2
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	2bff      	cmp	r3, #255	; 0xff
 8016470:	f47f adb7 	bne.w	8015fe2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016474:	4b1e      	ldr	r3, [pc, #120]	; (80164f0 <dhcp_parse_reply+0x594>)
 8016476:	781b      	ldrb	r3, [r3, #0]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d018      	beq.n	80164ae <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801647c:	4b1e      	ldr	r3, [pc, #120]	; (80164f8 <dhcp_parse_reply+0x59c>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016482:	4b1b      	ldr	r3, [pc, #108]	; (80164f0 <dhcp_parse_reply+0x594>)
 8016484:	2200      	movs	r2, #0
 8016486:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	2b01      	cmp	r3, #1
 801648c:	d102      	bne.n	8016494 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801648e:	2301      	movs	r3, #1
 8016490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016492:	e00c      	b.n	80164ae <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	2b02      	cmp	r3, #2
 8016498:	d102      	bne.n	80164a0 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801649a:	2301      	movs	r3, #1
 801649c:	62bb      	str	r3, [r7, #40]	; 0x28
 801649e:	e006      	b.n	80164ae <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	2b03      	cmp	r3, #3
 80164a4:	d103      	bne.n	80164ae <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80164a6:	2301      	movs	r3, #1
 80164a8:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80164aa:	2301      	movs	r3, #1
 80164ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80164ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d006      	beq.n	80164c2 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80164b4:	2300      	movs	r3, #0
 80164b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80164b8:	236c      	movs	r3, #108	; 0x6c
 80164ba:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80164bc:	23ec      	movs	r3, #236	; 0xec
 80164be:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80164c0:	e569      	b.n	8015f96 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80164c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d006      	beq.n	80164d6 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80164c8:	2300      	movs	r3, #0
 80164ca:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80164cc:	232c      	movs	r3, #44	; 0x2c
 80164ce:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80164d0:	236c      	movs	r3, #108	; 0x6c
 80164d2:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80164d4:	e55f      	b.n	8015f96 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80164d6:	2300      	movs	r3, #0
}
 80164d8:	4618      	mov	r0, r3
 80164da:	3740      	adds	r7, #64	; 0x40
 80164dc:	46bd      	mov	sp, r7
 80164de:	bd80      	pop	{r7, pc}
 80164e0:	0801d674 	.word	0x0801d674
 80164e4:	0801d8fc 	.word	0x0801d8fc
 80164e8:	0801d6d4 	.word	0x0801d6d4
 80164ec:	0801d940 	.word	0x0801d940
 80164f0:	2000b150 	.word	0x2000b150
 80164f4:	0801d954 	.word	0x0801d954
 80164f8:	2000b158 	.word	0x2000b158
 80164fc:	0801d96c 	.word	0x0801d96c
 8016500:	0801d980 	.word	0x0801d980

08016504 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b08a      	sub	sp, #40	; 0x28
 8016508:	af00      	add	r7, sp, #0
 801650a:	60f8      	str	r0, [r7, #12]
 801650c:	60b9      	str	r1, [r7, #8]
 801650e:	607a      	str	r2, [r7, #4]
 8016510:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8016512:	4b5f      	ldr	r3, [pc, #380]	; (8016690 <dhcp_recv+0x18c>)
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016518:	6a3b      	ldr	r3, [r7, #32]
 801651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801651c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	685b      	ldr	r3, [r3, #4]
 8016522:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016524:	69fb      	ldr	r3, [r7, #28]
 8016526:	2b00      	cmp	r3, #0
 8016528:	f000 809d 	beq.w	8016666 <dhcp_recv+0x162>
 801652c:	69fb      	ldr	r3, [r7, #28]
 801652e:	791b      	ldrb	r3, [r3, #4]
 8016530:	2b00      	cmp	r3, #0
 8016532:	f000 8098 	beq.w	8016666 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	895b      	ldrh	r3, [r3, #10]
 801653a:	2b2b      	cmp	r3, #43	; 0x2b
 801653c:	f240 8095 	bls.w	801666a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016540:	69bb      	ldr	r3, [r7, #24]
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	2b02      	cmp	r3, #2
 8016546:	f040 8092 	bne.w	801666e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801654a:	2300      	movs	r3, #0
 801654c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016550:	e012      	b.n	8016578 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016556:	6a3a      	ldr	r2, [r7, #32]
 8016558:	4413      	add	r3, r2
 801655a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801655e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016562:	69b9      	ldr	r1, [r7, #24]
 8016564:	440b      	add	r3, r1
 8016566:	7f1b      	ldrb	r3, [r3, #28]
 8016568:	429a      	cmp	r2, r3
 801656a:	f040 8082 	bne.w	8016672 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801656e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016572:	3301      	adds	r3, #1
 8016574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016578:	6a3b      	ldr	r3, [r7, #32]
 801657a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801657e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016582:	429a      	cmp	r2, r3
 8016584:	d203      	bcs.n	801658e <dhcp_recv+0x8a>
 8016586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801658a:	2b05      	cmp	r3, #5
 801658c:	d9e1      	bls.n	8016552 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801658e:	69bb      	ldr	r3, [r7, #24]
 8016590:	685b      	ldr	r3, [r3, #4]
 8016592:	4618      	mov	r0, r3
 8016594:	f7f5 fd01 	bl	800bf9a <lwip_htonl>
 8016598:	4602      	mov	r2, r0
 801659a:	69fb      	ldr	r3, [r7, #28]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	429a      	cmp	r2, r3
 80165a0:	d169      	bne.n	8016676 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80165a2:	69f9      	ldr	r1, [r7, #28]
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f7ff fcd9 	bl	8015f5c <dhcp_parse_reply>
 80165aa:	4603      	mov	r3, r0
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d164      	bne.n	801667a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80165b0:	4b38      	ldr	r3, [pc, #224]	; (8016694 <dhcp_recv+0x190>)
 80165b2:	785b      	ldrb	r3, [r3, #1]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d062      	beq.n	801667e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	685b      	ldr	r3, [r3, #4]
 80165bc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80165be:	4b36      	ldr	r3, [pc, #216]	; (8016698 <dhcp_recv+0x194>)
 80165c0:	685b      	ldr	r3, [r3, #4]
 80165c2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80165c4:	7cfb      	ldrb	r3, [r7, #19]
 80165c6:	2b05      	cmp	r3, #5
 80165c8:	d12a      	bne.n	8016620 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80165ca:	69fb      	ldr	r3, [r7, #28]
 80165cc:	795b      	ldrb	r3, [r3, #5]
 80165ce:	2b01      	cmp	r3, #1
 80165d0:	d112      	bne.n	80165f8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80165d2:	6979      	ldr	r1, [r7, #20]
 80165d4:	6a38      	ldr	r0, [r7, #32]
 80165d6:	f7fe fe05 	bl	80151e4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80165da:	6a3b      	ldr	r3, [r7, #32]
 80165dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80165e0:	f003 0308 	and.w	r3, r3, #8
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d003      	beq.n	80165f0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80165e8:	6a38      	ldr	r0, [r7, #32]
 80165ea:	f7fe fb75 	bl	8014cd8 <dhcp_check>
 80165ee:	e047      	b.n	8016680 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80165f0:	6a38      	ldr	r0, [r7, #32]
 80165f2:	f7ff f867 	bl	80156c4 <dhcp_bind>
 80165f6:	e043      	b.n	8016680 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	795b      	ldrb	r3, [r3, #5]
 80165fc:	2b03      	cmp	r3, #3
 80165fe:	d007      	beq.n	8016610 <dhcp_recv+0x10c>
 8016600:	69fb      	ldr	r3, [r7, #28]
 8016602:	795b      	ldrb	r3, [r3, #5]
 8016604:	2b04      	cmp	r3, #4
 8016606:	d003      	beq.n	8016610 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016608:	69fb      	ldr	r3, [r7, #28]
 801660a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801660c:	2b05      	cmp	r3, #5
 801660e:	d137      	bne.n	8016680 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8016610:	6979      	ldr	r1, [r7, #20]
 8016612:	6a38      	ldr	r0, [r7, #32]
 8016614:	f7fe fde6 	bl	80151e4 <dhcp_handle_ack>
      dhcp_bind(netif);
 8016618:	6a38      	ldr	r0, [r7, #32]
 801661a:	f7ff f853 	bl	80156c4 <dhcp_bind>
 801661e:	e02f      	b.n	8016680 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016620:	7cfb      	ldrb	r3, [r7, #19]
 8016622:	2b06      	cmp	r3, #6
 8016624:	d113      	bne.n	801664e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016626:	69fb      	ldr	r3, [r7, #28]
 8016628:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801662a:	2b03      	cmp	r3, #3
 801662c:	d00b      	beq.n	8016646 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801662e:	69fb      	ldr	r3, [r7, #28]
 8016630:	795b      	ldrb	r3, [r3, #5]
 8016632:	2b01      	cmp	r3, #1
 8016634:	d007      	beq.n	8016646 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016636:	69fb      	ldr	r3, [r7, #28]
 8016638:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801663a:	2b04      	cmp	r3, #4
 801663c:	d003      	beq.n	8016646 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801663e:	69fb      	ldr	r3, [r7, #28]
 8016640:	795b      	ldrb	r3, [r3, #5]
 8016642:	2b05      	cmp	r3, #5
 8016644:	d103      	bne.n	801664e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016646:	6a38      	ldr	r0, [r7, #32]
 8016648:	f7fe fb2c 	bl	8014ca4 <dhcp_handle_nak>
 801664c:	e018      	b.n	8016680 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801664e:	7cfb      	ldrb	r3, [r7, #19]
 8016650:	2b02      	cmp	r3, #2
 8016652:	d108      	bne.n	8016666 <dhcp_recv+0x162>
 8016654:	69fb      	ldr	r3, [r7, #28]
 8016656:	795b      	ldrb	r3, [r3, #5]
 8016658:	2b06      	cmp	r3, #6
 801665a:	d104      	bne.n	8016666 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801665c:	6979      	ldr	r1, [r7, #20]
 801665e:	6a38      	ldr	r0, [r7, #32]
 8016660:	f7fe fb6e 	bl	8014d40 <dhcp_handle_offer>
 8016664:	e00c      	b.n	8016680 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8016666:	bf00      	nop
 8016668:	e00a      	b.n	8016680 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801666a:	bf00      	nop
 801666c:	e008      	b.n	8016680 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801666e:	bf00      	nop
 8016670:	e006      	b.n	8016680 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8016672:	bf00      	nop
 8016674:	e004      	b.n	8016680 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016676:	bf00      	nop
 8016678:	e002      	b.n	8016680 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801667a:	bf00      	nop
 801667c:	e000      	b.n	8016680 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801667e:	bf00      	nop
  pbuf_free(p);
 8016680:	6878      	ldr	r0, [r7, #4]
 8016682:	f7f7 f861 	bl	800d748 <pbuf_free>
}
 8016686:	bf00      	nop
 8016688:	3728      	adds	r7, #40	; 0x28
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}
 801668e:	bf00      	nop
 8016690:	20007a00 	.word	0x20007a00
 8016694:	2000b150 	.word	0x2000b150
 8016698:	2000b158 	.word	0x2000b158

0801669c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b088      	sub	sp, #32
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	60f8      	str	r0, [r7, #12]
 80166a4:	60b9      	str	r1, [r7, #8]
 80166a6:	603b      	str	r3, [r7, #0]
 80166a8:	4613      	mov	r3, r2
 80166aa:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d108      	bne.n	80166c4 <dhcp_create_msg+0x28>
 80166b2:	4b5f      	ldr	r3, [pc, #380]	; (8016830 <dhcp_create_msg+0x194>)
 80166b4:	f240 7269 	movw	r2, #1897	; 0x769
 80166b8:	495e      	ldr	r1, [pc, #376]	; (8016834 <dhcp_create_msg+0x198>)
 80166ba:	485f      	ldr	r0, [pc, #380]	; (8016838 <dhcp_create_msg+0x19c>)
 80166bc:	f002 fe36 	bl	801932c <iprintf>
 80166c0:	2300      	movs	r3, #0
 80166c2:	e0b1      	b.n	8016828 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d108      	bne.n	80166dc <dhcp_create_msg+0x40>
 80166ca:	4b59      	ldr	r3, [pc, #356]	; (8016830 <dhcp_create_msg+0x194>)
 80166cc:	f240 726a 	movw	r2, #1898	; 0x76a
 80166d0:	495a      	ldr	r1, [pc, #360]	; (801683c <dhcp_create_msg+0x1a0>)
 80166d2:	4859      	ldr	r0, [pc, #356]	; (8016838 <dhcp_create_msg+0x19c>)
 80166d4:	f002 fe2a 	bl	801932c <iprintf>
 80166d8:	2300      	movs	r3, #0
 80166da:	e0a5      	b.n	8016828 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80166dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80166e0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80166e4:	2036      	movs	r0, #54	; 0x36
 80166e6:	f7f6 fd4f 	bl	800d188 <pbuf_alloc>
 80166ea:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80166ec:	69bb      	ldr	r3, [r7, #24]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d101      	bne.n	80166f6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80166f2:	2300      	movs	r3, #0
 80166f4:	e098      	b.n	8016828 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80166f6:	69bb      	ldr	r3, [r7, #24]
 80166f8:	895b      	ldrh	r3, [r3, #10]
 80166fa:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80166fe:	d206      	bcs.n	801670e <dhcp_create_msg+0x72>
 8016700:	4b4b      	ldr	r3, [pc, #300]	; (8016830 <dhcp_create_msg+0x194>)
 8016702:	f240 7272 	movw	r2, #1906	; 0x772
 8016706:	494e      	ldr	r1, [pc, #312]	; (8016840 <dhcp_create_msg+0x1a4>)
 8016708:	484b      	ldr	r0, [pc, #300]	; (8016838 <dhcp_create_msg+0x19c>)
 801670a:	f002 fe0f 	bl	801932c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801670e:	79fb      	ldrb	r3, [r7, #7]
 8016710:	2b03      	cmp	r3, #3
 8016712:	d103      	bne.n	801671c <dhcp_create_msg+0x80>
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	795b      	ldrb	r3, [r3, #5]
 8016718:	2b03      	cmp	r3, #3
 801671a:	d10d      	bne.n	8016738 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	799b      	ldrb	r3, [r3, #6]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d105      	bne.n	8016730 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016724:	f002 fe7e 	bl	8019424 <rand>
 8016728:	4603      	mov	r3, r0
 801672a:	461a      	mov	r2, r3
 801672c:	4b45      	ldr	r3, [pc, #276]	; (8016844 <dhcp_create_msg+0x1a8>)
 801672e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016730:	4b44      	ldr	r3, [pc, #272]	; (8016844 <dhcp_create_msg+0x1a8>)
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	68bb      	ldr	r3, [r7, #8]
 8016736:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016738:	69bb      	ldr	r3, [r7, #24]
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801673e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8016742:	2100      	movs	r1, #0
 8016744:	6978      	ldr	r0, [r7, #20]
 8016746:	f002 fde8 	bl	801931a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801674a:	697b      	ldr	r3, [r7, #20]
 801674c:	2201      	movs	r2, #1
 801674e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	2201      	movs	r2, #1
 8016754:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	4618      	mov	r0, r3
 8016766:	f7f5 fc18 	bl	800bf9a <lwip_htonl>
 801676a:	4602      	mov	r2, r0
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016770:	79fb      	ldrb	r3, [r7, #7]
 8016772:	2b08      	cmp	r3, #8
 8016774:	d010      	beq.n	8016798 <dhcp_create_msg+0xfc>
 8016776:	79fb      	ldrb	r3, [r7, #7]
 8016778:	2b04      	cmp	r3, #4
 801677a:	d00d      	beq.n	8016798 <dhcp_create_msg+0xfc>
 801677c:	79fb      	ldrb	r3, [r7, #7]
 801677e:	2b07      	cmp	r3, #7
 8016780:	d00a      	beq.n	8016798 <dhcp_create_msg+0xfc>
 8016782:	79fb      	ldrb	r3, [r7, #7]
 8016784:	2b03      	cmp	r3, #3
 8016786:	d10c      	bne.n	80167a2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016788:	68bb      	ldr	r3, [r7, #8]
 801678a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801678c:	2b05      	cmp	r3, #5
 801678e:	d003      	beq.n	8016798 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016790:	68bb      	ldr	r3, [r7, #8]
 8016792:	795b      	ldrb	r3, [r3, #5]
 8016794:	2b04      	cmp	r3, #4
 8016796:	d104      	bne.n	80167a2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	3304      	adds	r3, #4
 801679c:	681a      	ldr	r2, [r3, #0]
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80167a2:	2300      	movs	r3, #0
 80167a4:	83fb      	strh	r3, [r7, #30]
 80167a6:	e00c      	b.n	80167c2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80167a8:	8bfa      	ldrh	r2, [r7, #30]
 80167aa:	8bfb      	ldrh	r3, [r7, #30]
 80167ac:	68f9      	ldr	r1, [r7, #12]
 80167ae:	440a      	add	r2, r1
 80167b0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80167b4:	697a      	ldr	r2, [r7, #20]
 80167b6:	4413      	add	r3, r2
 80167b8:	460a      	mov	r2, r1
 80167ba:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80167bc:	8bfb      	ldrh	r3, [r7, #30]
 80167be:	3301      	adds	r3, #1
 80167c0:	83fb      	strh	r3, [r7, #30]
 80167c2:	8bfb      	ldrh	r3, [r7, #30]
 80167c4:	2b05      	cmp	r3, #5
 80167c6:	d9ef      	bls.n	80167a8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	2200      	movs	r2, #0
 80167cc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80167d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80167d4:	2200      	movs	r2, #0
 80167d6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80167da:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80167de:	2200      	movs	r2, #0
 80167e0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80167e4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80167e8:	2200      	movs	r2, #0
 80167ea:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80167ee:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167f8:	2301      	movs	r3, #1
 80167fa:	2235      	movs	r2, #53	; 0x35
 80167fc:	2000      	movs	r0, #0
 80167fe:	f7ff fadd 	bl	8015dbc <dhcp_option>
 8016802:	4603      	mov	r3, r0
 8016804:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016806:	697b      	ldr	r3, [r7, #20]
 8016808:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801680c:	79fa      	ldrb	r2, [r7, #7]
 801680e:	8a7b      	ldrh	r3, [r7, #18]
 8016810:	4618      	mov	r0, r3
 8016812:	f7ff fb07 	bl	8015e24 <dhcp_option_byte>
 8016816:	4603      	mov	r3, r0
 8016818:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d002      	beq.n	8016826 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016820:	683b      	ldr	r3, [r7, #0]
 8016822:	8a7a      	ldrh	r2, [r7, #18]
 8016824:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016826:	69bb      	ldr	r3, [r7, #24]
}
 8016828:	4618      	mov	r0, r3
 801682a:	3720      	adds	r7, #32
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}
 8016830:	0801d674 	.word	0x0801d674
 8016834:	0801d994 	.word	0x0801d994
 8016838:	0801d6d4 	.word	0x0801d6d4
 801683c:	0801d9b4 	.word	0x0801d9b4
 8016840:	0801d9d4 	.word	0x0801d9d4
 8016844:	20004298 	.word	0x20004298

08016848 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b084      	sub	sp, #16
 801684c:	af00      	add	r7, sp, #0
 801684e:	4603      	mov	r3, r0
 8016850:	60b9      	str	r1, [r7, #8]
 8016852:	607a      	str	r2, [r7, #4]
 8016854:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016856:	89fb      	ldrh	r3, [r7, #14]
 8016858:	1c5a      	adds	r2, r3, #1
 801685a:	81fa      	strh	r2, [r7, #14]
 801685c:	461a      	mov	r2, r3
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	4413      	add	r3, r2
 8016862:	22ff      	movs	r2, #255	; 0xff
 8016864:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016866:	e007      	b.n	8016878 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016868:	89fb      	ldrh	r3, [r7, #14]
 801686a:	1c5a      	adds	r2, r3, #1
 801686c:	81fa      	strh	r2, [r7, #14]
 801686e:	461a      	mov	r2, r3
 8016870:	68bb      	ldr	r3, [r7, #8]
 8016872:	4413      	add	r3, r2
 8016874:	2200      	movs	r2, #0
 8016876:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016878:	89fb      	ldrh	r3, [r7, #14]
 801687a:	2b43      	cmp	r3, #67	; 0x43
 801687c:	d904      	bls.n	8016888 <dhcp_option_trailer+0x40>
 801687e:	89fb      	ldrh	r3, [r7, #14]
 8016880:	f003 0303 	and.w	r3, r3, #3
 8016884:	2b00      	cmp	r3, #0
 8016886:	d002      	beq.n	801688e <dhcp_option_trailer+0x46>
 8016888:	89fb      	ldrh	r3, [r7, #14]
 801688a:	2b43      	cmp	r3, #67	; 0x43
 801688c:	d9ec      	bls.n	8016868 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801688e:	89fb      	ldrh	r3, [r7, #14]
 8016890:	33f0      	adds	r3, #240	; 0xf0
 8016892:	b29b      	uxth	r3, r3
 8016894:	4619      	mov	r1, r3
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f7f6 fdd0 	bl	800d43c <pbuf_realloc>
}
 801689c:	bf00      	nop
 801689e:	3710      	adds	r7, #16
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}

080168a4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80168a4:	b480      	push	{r7}
 80168a6:	b085      	sub	sp, #20
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d017      	beq.n	80168e2 <dhcp_supplied_address+0x3e>
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d013      	beq.n	80168e2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168be:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	795b      	ldrb	r3, [r3, #5]
 80168c4:	2b0a      	cmp	r3, #10
 80168c6:	d007      	beq.n	80168d8 <dhcp_supplied_address+0x34>
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	795b      	ldrb	r3, [r3, #5]
 80168cc:	2b05      	cmp	r3, #5
 80168ce:	d003      	beq.n	80168d8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80168d4:	2b04      	cmp	r3, #4
 80168d6:	d101      	bne.n	80168dc <dhcp_supplied_address+0x38>
 80168d8:	2301      	movs	r3, #1
 80168da:	e000      	b.n	80168de <dhcp_supplied_address+0x3a>
 80168dc:	2300      	movs	r3, #0
 80168de:	b2db      	uxtb	r3, r3
 80168e0:	e000      	b.n	80168e4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80168e2:	2300      	movs	r3, #0
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3714      	adds	r7, #20
 80168e8:	46bd      	mov	sp, r7
 80168ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ee:	4770      	bx	lr

080168f0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80168f8:	4915      	ldr	r1, [pc, #84]	; (8016950 <etharp_free_entry+0x60>)
 80168fa:	687a      	ldr	r2, [r7, #4]
 80168fc:	4613      	mov	r3, r2
 80168fe:	005b      	lsls	r3, r3, #1
 8016900:	4413      	add	r3, r2
 8016902:	00db      	lsls	r3, r3, #3
 8016904:	440b      	add	r3, r1
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d013      	beq.n	8016934 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801690c:	4910      	ldr	r1, [pc, #64]	; (8016950 <etharp_free_entry+0x60>)
 801690e:	687a      	ldr	r2, [r7, #4]
 8016910:	4613      	mov	r3, r2
 8016912:	005b      	lsls	r3, r3, #1
 8016914:	4413      	add	r3, r2
 8016916:	00db      	lsls	r3, r3, #3
 8016918:	440b      	add	r3, r1
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	4618      	mov	r0, r3
 801691e:	f7f6 ff13 	bl	800d748 <pbuf_free>
    arp_table[i].q = NULL;
 8016922:	490b      	ldr	r1, [pc, #44]	; (8016950 <etharp_free_entry+0x60>)
 8016924:	687a      	ldr	r2, [r7, #4]
 8016926:	4613      	mov	r3, r2
 8016928:	005b      	lsls	r3, r3, #1
 801692a:	4413      	add	r3, r2
 801692c:	00db      	lsls	r3, r3, #3
 801692e:	440b      	add	r3, r1
 8016930:	2200      	movs	r2, #0
 8016932:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016934:	4906      	ldr	r1, [pc, #24]	; (8016950 <etharp_free_entry+0x60>)
 8016936:	687a      	ldr	r2, [r7, #4]
 8016938:	4613      	mov	r3, r2
 801693a:	005b      	lsls	r3, r3, #1
 801693c:	4413      	add	r3, r2
 801693e:	00db      	lsls	r3, r3, #3
 8016940:	440b      	add	r3, r1
 8016942:	3314      	adds	r3, #20
 8016944:	2200      	movs	r2, #0
 8016946:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016948:	bf00      	nop
 801694a:	3708      	adds	r7, #8
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}
 8016950:	2000429c 	.word	0x2000429c

08016954 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b082      	sub	sp, #8
 8016958:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801695a:	2300      	movs	r3, #0
 801695c:	607b      	str	r3, [r7, #4]
 801695e:	e096      	b.n	8016a8e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016960:	494f      	ldr	r1, [pc, #316]	; (8016aa0 <etharp_tmr+0x14c>)
 8016962:	687a      	ldr	r2, [r7, #4]
 8016964:	4613      	mov	r3, r2
 8016966:	005b      	lsls	r3, r3, #1
 8016968:	4413      	add	r3, r2
 801696a:	00db      	lsls	r3, r3, #3
 801696c:	440b      	add	r3, r1
 801696e:	3314      	adds	r3, #20
 8016970:	781b      	ldrb	r3, [r3, #0]
 8016972:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016974:	78fb      	ldrb	r3, [r7, #3]
 8016976:	2b00      	cmp	r3, #0
 8016978:	f000 8086 	beq.w	8016a88 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801697c:	4948      	ldr	r1, [pc, #288]	; (8016aa0 <etharp_tmr+0x14c>)
 801697e:	687a      	ldr	r2, [r7, #4]
 8016980:	4613      	mov	r3, r2
 8016982:	005b      	lsls	r3, r3, #1
 8016984:	4413      	add	r3, r2
 8016986:	00db      	lsls	r3, r3, #3
 8016988:	440b      	add	r3, r1
 801698a:	3312      	adds	r3, #18
 801698c:	881b      	ldrh	r3, [r3, #0]
 801698e:	3301      	adds	r3, #1
 8016990:	b298      	uxth	r0, r3
 8016992:	4943      	ldr	r1, [pc, #268]	; (8016aa0 <etharp_tmr+0x14c>)
 8016994:	687a      	ldr	r2, [r7, #4]
 8016996:	4613      	mov	r3, r2
 8016998:	005b      	lsls	r3, r3, #1
 801699a:	4413      	add	r3, r2
 801699c:	00db      	lsls	r3, r3, #3
 801699e:	440b      	add	r3, r1
 80169a0:	3312      	adds	r3, #18
 80169a2:	4602      	mov	r2, r0
 80169a4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80169a6:	493e      	ldr	r1, [pc, #248]	; (8016aa0 <etharp_tmr+0x14c>)
 80169a8:	687a      	ldr	r2, [r7, #4]
 80169aa:	4613      	mov	r3, r2
 80169ac:	005b      	lsls	r3, r3, #1
 80169ae:	4413      	add	r3, r2
 80169b0:	00db      	lsls	r3, r3, #3
 80169b2:	440b      	add	r3, r1
 80169b4:	3312      	adds	r3, #18
 80169b6:	881b      	ldrh	r3, [r3, #0]
 80169b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80169bc:	d215      	bcs.n	80169ea <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80169be:	4938      	ldr	r1, [pc, #224]	; (8016aa0 <etharp_tmr+0x14c>)
 80169c0:	687a      	ldr	r2, [r7, #4]
 80169c2:	4613      	mov	r3, r2
 80169c4:	005b      	lsls	r3, r3, #1
 80169c6:	4413      	add	r3, r2
 80169c8:	00db      	lsls	r3, r3, #3
 80169ca:	440b      	add	r3, r1
 80169cc:	3314      	adds	r3, #20
 80169ce:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80169d0:	2b01      	cmp	r3, #1
 80169d2:	d10e      	bne.n	80169f2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80169d4:	4932      	ldr	r1, [pc, #200]	; (8016aa0 <etharp_tmr+0x14c>)
 80169d6:	687a      	ldr	r2, [r7, #4]
 80169d8:	4613      	mov	r3, r2
 80169da:	005b      	lsls	r3, r3, #1
 80169dc:	4413      	add	r3, r2
 80169de:	00db      	lsls	r3, r3, #3
 80169e0:	440b      	add	r3, r1
 80169e2:	3312      	adds	r3, #18
 80169e4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80169e6:	2b04      	cmp	r3, #4
 80169e8:	d903      	bls.n	80169f2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	f7ff ff80 	bl	80168f0 <etharp_free_entry>
 80169f0:	e04a      	b.n	8016a88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80169f2:	492b      	ldr	r1, [pc, #172]	; (8016aa0 <etharp_tmr+0x14c>)
 80169f4:	687a      	ldr	r2, [r7, #4]
 80169f6:	4613      	mov	r3, r2
 80169f8:	005b      	lsls	r3, r3, #1
 80169fa:	4413      	add	r3, r2
 80169fc:	00db      	lsls	r3, r3, #3
 80169fe:	440b      	add	r3, r1
 8016a00:	3314      	adds	r3, #20
 8016a02:	781b      	ldrb	r3, [r3, #0]
 8016a04:	2b03      	cmp	r3, #3
 8016a06:	d10a      	bne.n	8016a1e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016a08:	4925      	ldr	r1, [pc, #148]	; (8016aa0 <etharp_tmr+0x14c>)
 8016a0a:	687a      	ldr	r2, [r7, #4]
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	005b      	lsls	r3, r3, #1
 8016a10:	4413      	add	r3, r2
 8016a12:	00db      	lsls	r3, r3, #3
 8016a14:	440b      	add	r3, r1
 8016a16:	3314      	adds	r3, #20
 8016a18:	2204      	movs	r2, #4
 8016a1a:	701a      	strb	r2, [r3, #0]
 8016a1c:	e034      	b.n	8016a88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016a1e:	4920      	ldr	r1, [pc, #128]	; (8016aa0 <etharp_tmr+0x14c>)
 8016a20:	687a      	ldr	r2, [r7, #4]
 8016a22:	4613      	mov	r3, r2
 8016a24:	005b      	lsls	r3, r3, #1
 8016a26:	4413      	add	r3, r2
 8016a28:	00db      	lsls	r3, r3, #3
 8016a2a:	440b      	add	r3, r1
 8016a2c:	3314      	adds	r3, #20
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	2b04      	cmp	r3, #4
 8016a32:	d10a      	bne.n	8016a4a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016a34:	491a      	ldr	r1, [pc, #104]	; (8016aa0 <etharp_tmr+0x14c>)
 8016a36:	687a      	ldr	r2, [r7, #4]
 8016a38:	4613      	mov	r3, r2
 8016a3a:	005b      	lsls	r3, r3, #1
 8016a3c:	4413      	add	r3, r2
 8016a3e:	00db      	lsls	r3, r3, #3
 8016a40:	440b      	add	r3, r1
 8016a42:	3314      	adds	r3, #20
 8016a44:	2202      	movs	r2, #2
 8016a46:	701a      	strb	r2, [r3, #0]
 8016a48:	e01e      	b.n	8016a88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016a4a:	4915      	ldr	r1, [pc, #84]	; (8016aa0 <etharp_tmr+0x14c>)
 8016a4c:	687a      	ldr	r2, [r7, #4]
 8016a4e:	4613      	mov	r3, r2
 8016a50:	005b      	lsls	r3, r3, #1
 8016a52:	4413      	add	r3, r2
 8016a54:	00db      	lsls	r3, r3, #3
 8016a56:	440b      	add	r3, r1
 8016a58:	3314      	adds	r3, #20
 8016a5a:	781b      	ldrb	r3, [r3, #0]
 8016a5c:	2b01      	cmp	r3, #1
 8016a5e:	d113      	bne.n	8016a88 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016a60:	490f      	ldr	r1, [pc, #60]	; (8016aa0 <etharp_tmr+0x14c>)
 8016a62:	687a      	ldr	r2, [r7, #4]
 8016a64:	4613      	mov	r3, r2
 8016a66:	005b      	lsls	r3, r3, #1
 8016a68:	4413      	add	r3, r2
 8016a6a:	00db      	lsls	r3, r3, #3
 8016a6c:	440b      	add	r3, r1
 8016a6e:	3308      	adds	r3, #8
 8016a70:	6818      	ldr	r0, [r3, #0]
 8016a72:	687a      	ldr	r2, [r7, #4]
 8016a74:	4613      	mov	r3, r2
 8016a76:	005b      	lsls	r3, r3, #1
 8016a78:	4413      	add	r3, r2
 8016a7a:	00db      	lsls	r3, r3, #3
 8016a7c:	4a08      	ldr	r2, [pc, #32]	; (8016aa0 <etharp_tmr+0x14c>)
 8016a7e:	4413      	add	r3, r2
 8016a80:	3304      	adds	r3, #4
 8016a82:	4619      	mov	r1, r3
 8016a84:	f000 fe72 	bl	801776c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	3301      	adds	r3, #1
 8016a8c:	607b      	str	r3, [r7, #4]
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	2b09      	cmp	r3, #9
 8016a92:	f77f af65 	ble.w	8016960 <etharp_tmr+0xc>
      }
    }
  }
}
 8016a96:	bf00      	nop
 8016a98:	3708      	adds	r7, #8
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd80      	pop	{r7, pc}
 8016a9e:	bf00      	nop
 8016aa0:	2000429c 	.word	0x2000429c

08016aa4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b08a      	sub	sp, #40	; 0x28
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	60f8      	str	r0, [r7, #12]
 8016aac:	460b      	mov	r3, r1
 8016aae:	607a      	str	r2, [r7, #4]
 8016ab0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016ab2:	230a      	movs	r3, #10
 8016ab4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016ab6:	230a      	movs	r3, #10
 8016ab8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016aba:	230a      	movs	r3, #10
 8016abc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016ac2:	230a      	movs	r3, #10
 8016ac4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	83bb      	strh	r3, [r7, #28]
 8016aca:	2300      	movs	r3, #0
 8016acc:	837b      	strh	r3, [r7, #26]
 8016ace:	2300      	movs	r3, #0
 8016ad0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	843b      	strh	r3, [r7, #32]
 8016ad6:	e0ae      	b.n	8016c36 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016ad8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016adc:	49a6      	ldr	r1, [pc, #664]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016ade:	4613      	mov	r3, r2
 8016ae0:	005b      	lsls	r3, r3, #1
 8016ae2:	4413      	add	r3, r2
 8016ae4:	00db      	lsls	r3, r3, #3
 8016ae6:	440b      	add	r3, r1
 8016ae8:	3314      	adds	r3, #20
 8016aea:	781b      	ldrb	r3, [r3, #0]
 8016aec:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016aee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016af2:	2b0a      	cmp	r3, #10
 8016af4:	d105      	bne.n	8016b02 <etharp_find_entry+0x5e>
 8016af6:	7dfb      	ldrb	r3, [r7, #23]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d102      	bne.n	8016b02 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016afc:	8c3b      	ldrh	r3, [r7, #32]
 8016afe:	847b      	strh	r3, [r7, #34]	; 0x22
 8016b00:	e095      	b.n	8016c2e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016b02:	7dfb      	ldrb	r3, [r7, #23]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	f000 8092 	beq.w	8016c2e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016b0a:	7dfb      	ldrb	r3, [r7, #23]
 8016b0c:	2b01      	cmp	r3, #1
 8016b0e:	d009      	beq.n	8016b24 <etharp_find_entry+0x80>
 8016b10:	7dfb      	ldrb	r3, [r7, #23]
 8016b12:	2b01      	cmp	r3, #1
 8016b14:	d806      	bhi.n	8016b24 <etharp_find_entry+0x80>
 8016b16:	4b99      	ldr	r3, [pc, #612]	; (8016d7c <etharp_find_entry+0x2d8>)
 8016b18:	f44f 7292 	mov.w	r2, #292	; 0x124
 8016b1c:	4998      	ldr	r1, [pc, #608]	; (8016d80 <etharp_find_entry+0x2dc>)
 8016b1e:	4899      	ldr	r0, [pc, #612]	; (8016d84 <etharp_find_entry+0x2e0>)
 8016b20:	f002 fc04 	bl	801932c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d020      	beq.n	8016b6c <etharp_find_entry+0xc8>
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	6819      	ldr	r1, [r3, #0]
 8016b2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b32:	4891      	ldr	r0, [pc, #580]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016b34:	4613      	mov	r3, r2
 8016b36:	005b      	lsls	r3, r3, #1
 8016b38:	4413      	add	r3, r2
 8016b3a:	00db      	lsls	r3, r3, #3
 8016b3c:	4403      	add	r3, r0
 8016b3e:	3304      	adds	r3, #4
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	4299      	cmp	r1, r3
 8016b44:	d112      	bne.n	8016b6c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d00c      	beq.n	8016b66 <etharp_find_entry+0xc2>
 8016b4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b50:	4989      	ldr	r1, [pc, #548]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016b52:	4613      	mov	r3, r2
 8016b54:	005b      	lsls	r3, r3, #1
 8016b56:	4413      	add	r3, r2
 8016b58:	00db      	lsls	r3, r3, #3
 8016b5a:	440b      	add	r3, r1
 8016b5c:	3308      	adds	r3, #8
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	687a      	ldr	r2, [r7, #4]
 8016b62:	429a      	cmp	r2, r3
 8016b64:	d102      	bne.n	8016b6c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016b66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b6a:	e100      	b.n	8016d6e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016b6c:	7dfb      	ldrb	r3, [r7, #23]
 8016b6e:	2b01      	cmp	r3, #1
 8016b70:	d140      	bne.n	8016bf4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016b72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b76:	4980      	ldr	r1, [pc, #512]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016b78:	4613      	mov	r3, r2
 8016b7a:	005b      	lsls	r3, r3, #1
 8016b7c:	4413      	add	r3, r2
 8016b7e:	00db      	lsls	r3, r3, #3
 8016b80:	440b      	add	r3, r1
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d01a      	beq.n	8016bbe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016b88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b8c:	497a      	ldr	r1, [pc, #488]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016b8e:	4613      	mov	r3, r2
 8016b90:	005b      	lsls	r3, r3, #1
 8016b92:	4413      	add	r3, r2
 8016b94:	00db      	lsls	r3, r3, #3
 8016b96:	440b      	add	r3, r1
 8016b98:	3312      	adds	r3, #18
 8016b9a:	881b      	ldrh	r3, [r3, #0]
 8016b9c:	8bba      	ldrh	r2, [r7, #28]
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	d845      	bhi.n	8016c2e <etharp_find_entry+0x18a>
            old_queue = i;
 8016ba2:	8c3b      	ldrh	r3, [r7, #32]
 8016ba4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016ba6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016baa:	4973      	ldr	r1, [pc, #460]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016bac:	4613      	mov	r3, r2
 8016bae:	005b      	lsls	r3, r3, #1
 8016bb0:	4413      	add	r3, r2
 8016bb2:	00db      	lsls	r3, r3, #3
 8016bb4:	440b      	add	r3, r1
 8016bb6:	3312      	adds	r3, #18
 8016bb8:	881b      	ldrh	r3, [r3, #0]
 8016bba:	83bb      	strh	r3, [r7, #28]
 8016bbc:	e037      	b.n	8016c2e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016bbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bc2:	496d      	ldr	r1, [pc, #436]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016bc4:	4613      	mov	r3, r2
 8016bc6:	005b      	lsls	r3, r3, #1
 8016bc8:	4413      	add	r3, r2
 8016bca:	00db      	lsls	r3, r3, #3
 8016bcc:	440b      	add	r3, r1
 8016bce:	3312      	adds	r3, #18
 8016bd0:	881b      	ldrh	r3, [r3, #0]
 8016bd2:	8b7a      	ldrh	r2, [r7, #26]
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	d82a      	bhi.n	8016c2e <etharp_find_entry+0x18a>
            old_pending = i;
 8016bd8:	8c3b      	ldrh	r3, [r7, #32]
 8016bda:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016bdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016be0:	4965      	ldr	r1, [pc, #404]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016be2:	4613      	mov	r3, r2
 8016be4:	005b      	lsls	r3, r3, #1
 8016be6:	4413      	add	r3, r2
 8016be8:	00db      	lsls	r3, r3, #3
 8016bea:	440b      	add	r3, r1
 8016bec:	3312      	adds	r3, #18
 8016bee:	881b      	ldrh	r3, [r3, #0]
 8016bf0:	837b      	strh	r3, [r7, #26]
 8016bf2:	e01c      	b.n	8016c2e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016bf4:	7dfb      	ldrb	r3, [r7, #23]
 8016bf6:	2b01      	cmp	r3, #1
 8016bf8:	d919      	bls.n	8016c2e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016bfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bfe:	495e      	ldr	r1, [pc, #376]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016c00:	4613      	mov	r3, r2
 8016c02:	005b      	lsls	r3, r3, #1
 8016c04:	4413      	add	r3, r2
 8016c06:	00db      	lsls	r3, r3, #3
 8016c08:	440b      	add	r3, r1
 8016c0a:	3312      	adds	r3, #18
 8016c0c:	881b      	ldrh	r3, [r3, #0]
 8016c0e:	8b3a      	ldrh	r2, [r7, #24]
 8016c10:	429a      	cmp	r2, r3
 8016c12:	d80c      	bhi.n	8016c2e <etharp_find_entry+0x18a>
            old_stable = i;
 8016c14:	8c3b      	ldrh	r3, [r7, #32]
 8016c16:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016c18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c1c:	4956      	ldr	r1, [pc, #344]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016c1e:	4613      	mov	r3, r2
 8016c20:	005b      	lsls	r3, r3, #1
 8016c22:	4413      	add	r3, r2
 8016c24:	00db      	lsls	r3, r3, #3
 8016c26:	440b      	add	r3, r1
 8016c28:	3312      	adds	r3, #18
 8016c2a:	881b      	ldrh	r3, [r3, #0]
 8016c2c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016c2e:	8c3b      	ldrh	r3, [r7, #32]
 8016c30:	3301      	adds	r3, #1
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	843b      	strh	r3, [r7, #32]
 8016c36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c3a:	2b09      	cmp	r3, #9
 8016c3c:	f77f af4c 	ble.w	8016ad8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016c40:	7afb      	ldrb	r3, [r7, #11]
 8016c42:	f003 0302 	and.w	r3, r3, #2
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d108      	bne.n	8016c5c <etharp_find_entry+0x1b8>
 8016c4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016c4e:	2b0a      	cmp	r3, #10
 8016c50:	d107      	bne.n	8016c62 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016c52:	7afb      	ldrb	r3, [r7, #11]
 8016c54:	f003 0301 	and.w	r3, r3, #1
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d102      	bne.n	8016c62 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8016c60:	e085      	b.n	8016d6e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016c62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016c66:	2b09      	cmp	r3, #9
 8016c68:	dc02      	bgt.n	8016c70 <etharp_find_entry+0x1cc>
    i = empty;
 8016c6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c6c:	843b      	strh	r3, [r7, #32]
 8016c6e:	e039      	b.n	8016ce4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016c70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016c74:	2b09      	cmp	r3, #9
 8016c76:	dc14      	bgt.n	8016ca2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c7a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016c7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c80:	493d      	ldr	r1, [pc, #244]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016c82:	4613      	mov	r3, r2
 8016c84:	005b      	lsls	r3, r3, #1
 8016c86:	4413      	add	r3, r2
 8016c88:	00db      	lsls	r3, r3, #3
 8016c8a:	440b      	add	r3, r1
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d018      	beq.n	8016cc4 <etharp_find_entry+0x220>
 8016c92:	4b3a      	ldr	r3, [pc, #232]	; (8016d7c <etharp_find_entry+0x2d8>)
 8016c94:	f240 126d 	movw	r2, #365	; 0x16d
 8016c98:	493b      	ldr	r1, [pc, #236]	; (8016d88 <etharp_find_entry+0x2e4>)
 8016c9a:	483a      	ldr	r0, [pc, #232]	; (8016d84 <etharp_find_entry+0x2e0>)
 8016c9c:	f002 fb46 	bl	801932c <iprintf>
 8016ca0:	e010      	b.n	8016cc4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016ca2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016ca6:	2b09      	cmp	r3, #9
 8016ca8:	dc02      	bgt.n	8016cb0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016caa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016cac:	843b      	strh	r3, [r7, #32]
 8016cae:	e009      	b.n	8016cc4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016cb0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016cb4:	2b09      	cmp	r3, #9
 8016cb6:	dc02      	bgt.n	8016cbe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016cb8:	8bfb      	ldrh	r3, [r7, #30]
 8016cba:	843b      	strh	r3, [r7, #32]
 8016cbc:	e002      	b.n	8016cc4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8016cc2:	e054      	b.n	8016d6e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016cc4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016cc8:	2b09      	cmp	r3, #9
 8016cca:	dd06      	ble.n	8016cda <etharp_find_entry+0x236>
 8016ccc:	4b2b      	ldr	r3, [pc, #172]	; (8016d7c <etharp_find_entry+0x2d8>)
 8016cce:	f240 127f 	movw	r2, #383	; 0x17f
 8016cd2:	492e      	ldr	r1, [pc, #184]	; (8016d8c <etharp_find_entry+0x2e8>)
 8016cd4:	482b      	ldr	r0, [pc, #172]	; (8016d84 <etharp_find_entry+0x2e0>)
 8016cd6:	f002 fb29 	bl	801932c <iprintf>
    etharp_free_entry(i);
 8016cda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7ff fe06 	bl	80168f0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016ce4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ce8:	2b09      	cmp	r3, #9
 8016cea:	dd06      	ble.n	8016cfa <etharp_find_entry+0x256>
 8016cec:	4b23      	ldr	r3, [pc, #140]	; (8016d7c <etharp_find_entry+0x2d8>)
 8016cee:	f240 1283 	movw	r2, #387	; 0x183
 8016cf2:	4926      	ldr	r1, [pc, #152]	; (8016d8c <etharp_find_entry+0x2e8>)
 8016cf4:	4823      	ldr	r0, [pc, #140]	; (8016d84 <etharp_find_entry+0x2e0>)
 8016cf6:	f002 fb19 	bl	801932c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016cfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cfe:	491e      	ldr	r1, [pc, #120]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016d00:	4613      	mov	r3, r2
 8016d02:	005b      	lsls	r3, r3, #1
 8016d04:	4413      	add	r3, r2
 8016d06:	00db      	lsls	r3, r3, #3
 8016d08:	440b      	add	r3, r1
 8016d0a:	3314      	adds	r3, #20
 8016d0c:	781b      	ldrb	r3, [r3, #0]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d006      	beq.n	8016d20 <etharp_find_entry+0x27c>
 8016d12:	4b1a      	ldr	r3, [pc, #104]	; (8016d7c <etharp_find_entry+0x2d8>)
 8016d14:	f240 1285 	movw	r2, #389	; 0x185
 8016d18:	491d      	ldr	r1, [pc, #116]	; (8016d90 <etharp_find_entry+0x2ec>)
 8016d1a:	481a      	ldr	r0, [pc, #104]	; (8016d84 <etharp_find_entry+0x2e0>)
 8016d1c:	f002 fb06 	bl	801932c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d00b      	beq.n	8016d3e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016d26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	6819      	ldr	r1, [r3, #0]
 8016d2e:	4812      	ldr	r0, [pc, #72]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016d30:	4613      	mov	r3, r2
 8016d32:	005b      	lsls	r3, r3, #1
 8016d34:	4413      	add	r3, r2
 8016d36:	00db      	lsls	r3, r3, #3
 8016d38:	4403      	add	r3, r0
 8016d3a:	3304      	adds	r3, #4
 8016d3c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016d3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d42:	490d      	ldr	r1, [pc, #52]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016d44:	4613      	mov	r3, r2
 8016d46:	005b      	lsls	r3, r3, #1
 8016d48:	4413      	add	r3, r2
 8016d4a:	00db      	lsls	r3, r3, #3
 8016d4c:	440b      	add	r3, r1
 8016d4e:	3312      	adds	r3, #18
 8016d50:	2200      	movs	r2, #0
 8016d52:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016d54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d58:	4907      	ldr	r1, [pc, #28]	; (8016d78 <etharp_find_entry+0x2d4>)
 8016d5a:	4613      	mov	r3, r2
 8016d5c:	005b      	lsls	r3, r3, #1
 8016d5e:	4413      	add	r3, r2
 8016d60:	00db      	lsls	r3, r3, #3
 8016d62:	440b      	add	r3, r1
 8016d64:	3308      	adds	r3, #8
 8016d66:	687a      	ldr	r2, [r7, #4]
 8016d68:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016d6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016d6e:	4618      	mov	r0, r3
 8016d70:	3728      	adds	r7, #40	; 0x28
 8016d72:	46bd      	mov	sp, r7
 8016d74:	bd80      	pop	{r7, pc}
 8016d76:	bf00      	nop
 8016d78:	2000429c 	.word	0x2000429c
 8016d7c:	0801da14 	.word	0x0801da14
 8016d80:	0801da4c 	.word	0x0801da4c
 8016d84:	0801da8c 	.word	0x0801da8c
 8016d88:	0801dab4 	.word	0x0801dab4
 8016d8c:	0801dacc 	.word	0x0801dacc
 8016d90:	0801dae0 	.word	0x0801dae0

08016d94 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b088      	sub	sp, #32
 8016d98:	af02      	add	r7, sp, #8
 8016d9a:	60f8      	str	r0, [r7, #12]
 8016d9c:	60b9      	str	r1, [r7, #8]
 8016d9e:	607a      	str	r2, [r7, #4]
 8016da0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016da8:	2b06      	cmp	r3, #6
 8016daa:	d006      	beq.n	8016dba <etharp_update_arp_entry+0x26>
 8016dac:	4b48      	ldr	r3, [pc, #288]	; (8016ed0 <etharp_update_arp_entry+0x13c>)
 8016dae:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016db2:	4948      	ldr	r1, [pc, #288]	; (8016ed4 <etharp_update_arp_entry+0x140>)
 8016db4:	4848      	ldr	r0, [pc, #288]	; (8016ed8 <etharp_update_arp_entry+0x144>)
 8016db6:	f002 fab9 	bl	801932c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016dba:	68bb      	ldr	r3, [r7, #8]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d012      	beq.n	8016de6 <etharp_update_arp_entry+0x52>
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d00e      	beq.n	8016de6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	68f9      	ldr	r1, [r7, #12]
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f001 f91e 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8016dd4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d105      	bne.n	8016de6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016dda:	68bb      	ldr	r3, [r7, #8]
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016de2:	2be0      	cmp	r3, #224	; 0xe0
 8016de4:	d102      	bne.n	8016dec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016de6:	f06f 030f 	mvn.w	r3, #15
 8016dea:	e06c      	b.n	8016ec6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016dec:	78fb      	ldrb	r3, [r7, #3]
 8016dee:	68fa      	ldr	r2, [r7, #12]
 8016df0:	4619      	mov	r1, r3
 8016df2:	68b8      	ldr	r0, [r7, #8]
 8016df4:	f7ff fe56 	bl	8016aa4 <etharp_find_entry>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016dfc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	da02      	bge.n	8016e0a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016e04:	8afb      	ldrh	r3, [r7, #22]
 8016e06:	b25b      	sxtb	r3, r3
 8016e08:	e05d      	b.n	8016ec6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016e0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e0e:	4933      	ldr	r1, [pc, #204]	; (8016edc <etharp_update_arp_entry+0x148>)
 8016e10:	4613      	mov	r3, r2
 8016e12:	005b      	lsls	r3, r3, #1
 8016e14:	4413      	add	r3, r2
 8016e16:	00db      	lsls	r3, r3, #3
 8016e18:	440b      	add	r3, r1
 8016e1a:	3314      	adds	r3, #20
 8016e1c:	2202      	movs	r2, #2
 8016e1e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016e20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e24:	492d      	ldr	r1, [pc, #180]	; (8016edc <etharp_update_arp_entry+0x148>)
 8016e26:	4613      	mov	r3, r2
 8016e28:	005b      	lsls	r3, r3, #1
 8016e2a:	4413      	add	r3, r2
 8016e2c:	00db      	lsls	r3, r3, #3
 8016e2e:	440b      	add	r3, r1
 8016e30:	3308      	adds	r3, #8
 8016e32:	68fa      	ldr	r2, [r7, #12]
 8016e34:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016e36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e3a:	4613      	mov	r3, r2
 8016e3c:	005b      	lsls	r3, r3, #1
 8016e3e:	4413      	add	r3, r2
 8016e40:	00db      	lsls	r3, r3, #3
 8016e42:	3308      	adds	r3, #8
 8016e44:	4a25      	ldr	r2, [pc, #148]	; (8016edc <etharp_update_arp_entry+0x148>)
 8016e46:	4413      	add	r3, r2
 8016e48:	3304      	adds	r3, #4
 8016e4a:	2206      	movs	r2, #6
 8016e4c:	6879      	ldr	r1, [r7, #4]
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f002 fa58 	bl	8019304 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016e54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e58:	4920      	ldr	r1, [pc, #128]	; (8016edc <etharp_update_arp_entry+0x148>)
 8016e5a:	4613      	mov	r3, r2
 8016e5c:	005b      	lsls	r3, r3, #1
 8016e5e:	4413      	add	r3, r2
 8016e60:	00db      	lsls	r3, r3, #3
 8016e62:	440b      	add	r3, r1
 8016e64:	3312      	adds	r3, #18
 8016e66:	2200      	movs	r2, #0
 8016e68:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016e6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e6e:	491b      	ldr	r1, [pc, #108]	; (8016edc <etharp_update_arp_entry+0x148>)
 8016e70:	4613      	mov	r3, r2
 8016e72:	005b      	lsls	r3, r3, #1
 8016e74:	4413      	add	r3, r2
 8016e76:	00db      	lsls	r3, r3, #3
 8016e78:	440b      	add	r3, r1
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d021      	beq.n	8016ec4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016e80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e84:	4915      	ldr	r1, [pc, #84]	; (8016edc <etharp_update_arp_entry+0x148>)
 8016e86:	4613      	mov	r3, r2
 8016e88:	005b      	lsls	r3, r3, #1
 8016e8a:	4413      	add	r3, r2
 8016e8c:	00db      	lsls	r3, r3, #3
 8016e8e:	440b      	add	r3, r1
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016e94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e98:	4910      	ldr	r1, [pc, #64]	; (8016edc <etharp_update_arp_entry+0x148>)
 8016e9a:	4613      	mov	r3, r2
 8016e9c:	005b      	lsls	r3, r3, #1
 8016e9e:	4413      	add	r3, r2
 8016ea0:	00db      	lsls	r3, r3, #3
 8016ea2:	440b      	add	r3, r1
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016eae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016eb2:	9300      	str	r3, [sp, #0]
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	6939      	ldr	r1, [r7, #16]
 8016eb8:	68f8      	ldr	r0, [r7, #12]
 8016eba:	f001 ffad 	bl	8018e18 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016ebe:	6938      	ldr	r0, [r7, #16]
 8016ec0:	f7f6 fc42 	bl	800d748 <pbuf_free>
  }
  return ERR_OK;
 8016ec4:	2300      	movs	r3, #0
}
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	3718      	adds	r7, #24
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd80      	pop	{r7, pc}
 8016ece:	bf00      	nop
 8016ed0:	0801da14 	.word	0x0801da14
 8016ed4:	0801db0c 	.word	0x0801db0c
 8016ed8:	0801da8c 	.word	0x0801da8c
 8016edc:	2000429c 	.word	0x2000429c

08016ee0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b084      	sub	sp, #16
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ee8:	2300      	movs	r3, #0
 8016eea:	60fb      	str	r3, [r7, #12]
 8016eec:	e01e      	b.n	8016f2c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016eee:	4913      	ldr	r1, [pc, #76]	; (8016f3c <etharp_cleanup_netif+0x5c>)
 8016ef0:	68fa      	ldr	r2, [r7, #12]
 8016ef2:	4613      	mov	r3, r2
 8016ef4:	005b      	lsls	r3, r3, #1
 8016ef6:	4413      	add	r3, r2
 8016ef8:	00db      	lsls	r3, r3, #3
 8016efa:	440b      	add	r3, r1
 8016efc:	3314      	adds	r3, #20
 8016efe:	781b      	ldrb	r3, [r3, #0]
 8016f00:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016f02:	7afb      	ldrb	r3, [r7, #11]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d00e      	beq.n	8016f26 <etharp_cleanup_netif+0x46>
 8016f08:	490c      	ldr	r1, [pc, #48]	; (8016f3c <etharp_cleanup_netif+0x5c>)
 8016f0a:	68fa      	ldr	r2, [r7, #12]
 8016f0c:	4613      	mov	r3, r2
 8016f0e:	005b      	lsls	r3, r3, #1
 8016f10:	4413      	add	r3, r2
 8016f12:	00db      	lsls	r3, r3, #3
 8016f14:	440b      	add	r3, r1
 8016f16:	3308      	adds	r3, #8
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	687a      	ldr	r2, [r7, #4]
 8016f1c:	429a      	cmp	r2, r3
 8016f1e:	d102      	bne.n	8016f26 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016f20:	68f8      	ldr	r0, [r7, #12]
 8016f22:	f7ff fce5 	bl	80168f0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	3301      	adds	r3, #1
 8016f2a:	60fb      	str	r3, [r7, #12]
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	2b09      	cmp	r3, #9
 8016f30:	dddd      	ble.n	8016eee <etharp_cleanup_netif+0xe>
    }
  }
}
 8016f32:	bf00      	nop
 8016f34:	3710      	adds	r7, #16
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}
 8016f3a:	bf00      	nop
 8016f3c:	2000429c 	.word	0x2000429c

08016f40 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016f40:	b5b0      	push	{r4, r5, r7, lr}
 8016f42:	b08a      	sub	sp, #40	; 0x28
 8016f44:	af04      	add	r7, sp, #16
 8016f46:	6078      	str	r0, [r7, #4]
 8016f48:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d107      	bne.n	8016f60 <etharp_input+0x20>
 8016f50:	4b3f      	ldr	r3, [pc, #252]	; (8017050 <etharp_input+0x110>)
 8016f52:	f240 228a 	movw	r2, #650	; 0x28a
 8016f56:	493f      	ldr	r1, [pc, #252]	; (8017054 <etharp_input+0x114>)
 8016f58:	483f      	ldr	r0, [pc, #252]	; (8017058 <etharp_input+0x118>)
 8016f5a:	f002 f9e7 	bl	801932c <iprintf>
 8016f5e:	e074      	b.n	801704a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016f66:	693b      	ldr	r3, [r7, #16]
 8016f68:	881b      	ldrh	r3, [r3, #0]
 8016f6a:	b29b      	uxth	r3, r3
 8016f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f70:	d10c      	bne.n	8016f8c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016f72:	693b      	ldr	r3, [r7, #16]
 8016f74:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016f76:	2b06      	cmp	r3, #6
 8016f78:	d108      	bne.n	8016f8c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016f7a:	693b      	ldr	r3, [r7, #16]
 8016f7c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016f7e:	2b04      	cmp	r3, #4
 8016f80:	d104      	bne.n	8016f8c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016f82:	693b      	ldr	r3, [r7, #16]
 8016f84:	885b      	ldrh	r3, [r3, #2]
 8016f86:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016f88:	2b08      	cmp	r3, #8
 8016f8a:	d003      	beq.n	8016f94 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016f8c:	6878      	ldr	r0, [r7, #4]
 8016f8e:	f7f6 fbdb 	bl	800d748 <pbuf_free>
    return;
 8016f92:	e05a      	b.n	801704a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016f94:	693b      	ldr	r3, [r7, #16]
 8016f96:	330e      	adds	r3, #14
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016f9c:	693b      	ldr	r3, [r7, #16]
 8016f9e:	3318      	adds	r3, #24
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	3304      	adds	r3, #4
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d102      	bne.n	8016fb4 <etharp_input+0x74>
    for_us = 0;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	75fb      	strb	r3, [r7, #23]
 8016fb2:	e009      	b.n	8016fc8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016fb4:	68ba      	ldr	r2, [r7, #8]
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	3304      	adds	r3, #4
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	bf0c      	ite	eq
 8016fc0:	2301      	moveq	r3, #1
 8016fc2:	2300      	movne	r3, #0
 8016fc4:	b2db      	uxtb	r3, r3
 8016fc6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016fc8:	693b      	ldr	r3, [r7, #16]
 8016fca:	f103 0208 	add.w	r2, r3, #8
 8016fce:	7dfb      	ldrb	r3, [r7, #23]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d001      	beq.n	8016fd8 <etharp_input+0x98>
 8016fd4:	2301      	movs	r3, #1
 8016fd6:	e000      	b.n	8016fda <etharp_input+0x9a>
 8016fd8:	2302      	movs	r3, #2
 8016fda:	f107 010c 	add.w	r1, r7, #12
 8016fde:	6838      	ldr	r0, [r7, #0]
 8016fe0:	f7ff fed8 	bl	8016d94 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016fe4:	693b      	ldr	r3, [r7, #16]
 8016fe6:	88db      	ldrh	r3, [r3, #6]
 8016fe8:	b29b      	uxth	r3, r3
 8016fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016fee:	d003      	beq.n	8016ff8 <etharp_input+0xb8>
 8016ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ff4:	d01e      	beq.n	8017034 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016ff6:	e025      	b.n	8017044 <etharp_input+0x104>
      if (for_us) {
 8016ff8:	7dfb      	ldrb	r3, [r7, #23]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d021      	beq.n	8017042 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016ffe:	683b      	ldr	r3, [r7, #0]
 8017000:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017004:	693b      	ldr	r3, [r7, #16]
 8017006:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017014:	693a      	ldr	r2, [r7, #16]
 8017016:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017018:	2102      	movs	r1, #2
 801701a:	9103      	str	r1, [sp, #12]
 801701c:	f107 010c 	add.w	r1, r7, #12
 8017020:	9102      	str	r1, [sp, #8]
 8017022:	9201      	str	r2, [sp, #4]
 8017024:	9300      	str	r3, [sp, #0]
 8017026:	462b      	mov	r3, r5
 8017028:	4622      	mov	r2, r4
 801702a:	4601      	mov	r1, r0
 801702c:	6838      	ldr	r0, [r7, #0]
 801702e:	f000 faef 	bl	8017610 <etharp_raw>
      break;
 8017032:	e006      	b.n	8017042 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017034:	f107 030c 	add.w	r3, r7, #12
 8017038:	4619      	mov	r1, r3
 801703a:	6838      	ldr	r0, [r7, #0]
 801703c:	f7fe f9fe 	bl	801543c <dhcp_arp_reply>
      break;
 8017040:	e000      	b.n	8017044 <etharp_input+0x104>
      break;
 8017042:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f7f6 fb7f 	bl	800d748 <pbuf_free>
}
 801704a:	3718      	adds	r7, #24
 801704c:	46bd      	mov	sp, r7
 801704e:	bdb0      	pop	{r4, r5, r7, pc}
 8017050:	0801da14 	.word	0x0801da14
 8017054:	0801db64 	.word	0x0801db64
 8017058:	0801da8c 	.word	0x0801da8c

0801705c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b086      	sub	sp, #24
 8017060:	af02      	add	r7, sp, #8
 8017062:	60f8      	str	r0, [r7, #12]
 8017064:	60b9      	str	r1, [r7, #8]
 8017066:	4613      	mov	r3, r2
 8017068:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801706a:	79fa      	ldrb	r2, [r7, #7]
 801706c:	4944      	ldr	r1, [pc, #272]	; (8017180 <etharp_output_to_arp_index+0x124>)
 801706e:	4613      	mov	r3, r2
 8017070:	005b      	lsls	r3, r3, #1
 8017072:	4413      	add	r3, r2
 8017074:	00db      	lsls	r3, r3, #3
 8017076:	440b      	add	r3, r1
 8017078:	3314      	adds	r3, #20
 801707a:	781b      	ldrb	r3, [r3, #0]
 801707c:	2b01      	cmp	r3, #1
 801707e:	d806      	bhi.n	801708e <etharp_output_to_arp_index+0x32>
 8017080:	4b40      	ldr	r3, [pc, #256]	; (8017184 <etharp_output_to_arp_index+0x128>)
 8017082:	f240 22ef 	movw	r2, #751	; 0x2ef
 8017086:	4940      	ldr	r1, [pc, #256]	; (8017188 <etharp_output_to_arp_index+0x12c>)
 8017088:	4840      	ldr	r0, [pc, #256]	; (801718c <etharp_output_to_arp_index+0x130>)
 801708a:	f002 f94f 	bl	801932c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801708e:	79fa      	ldrb	r2, [r7, #7]
 8017090:	493b      	ldr	r1, [pc, #236]	; (8017180 <etharp_output_to_arp_index+0x124>)
 8017092:	4613      	mov	r3, r2
 8017094:	005b      	lsls	r3, r3, #1
 8017096:	4413      	add	r3, r2
 8017098:	00db      	lsls	r3, r3, #3
 801709a:	440b      	add	r3, r1
 801709c:	3314      	adds	r3, #20
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	2b02      	cmp	r3, #2
 80170a2:	d153      	bne.n	801714c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80170a4:	79fa      	ldrb	r2, [r7, #7]
 80170a6:	4936      	ldr	r1, [pc, #216]	; (8017180 <etharp_output_to_arp_index+0x124>)
 80170a8:	4613      	mov	r3, r2
 80170aa:	005b      	lsls	r3, r3, #1
 80170ac:	4413      	add	r3, r2
 80170ae:	00db      	lsls	r3, r3, #3
 80170b0:	440b      	add	r3, r1
 80170b2:	3312      	adds	r3, #18
 80170b4:	881b      	ldrh	r3, [r3, #0]
 80170b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80170ba:	d919      	bls.n	80170f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80170bc:	79fa      	ldrb	r2, [r7, #7]
 80170be:	4613      	mov	r3, r2
 80170c0:	005b      	lsls	r3, r3, #1
 80170c2:	4413      	add	r3, r2
 80170c4:	00db      	lsls	r3, r3, #3
 80170c6:	4a2e      	ldr	r2, [pc, #184]	; (8017180 <etharp_output_to_arp_index+0x124>)
 80170c8:	4413      	add	r3, r2
 80170ca:	3304      	adds	r3, #4
 80170cc:	4619      	mov	r1, r3
 80170ce:	68f8      	ldr	r0, [r7, #12]
 80170d0:	f000 fb4c 	bl	801776c <etharp_request>
 80170d4:	4603      	mov	r3, r0
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d138      	bne.n	801714c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80170da:	79fa      	ldrb	r2, [r7, #7]
 80170dc:	4928      	ldr	r1, [pc, #160]	; (8017180 <etharp_output_to_arp_index+0x124>)
 80170de:	4613      	mov	r3, r2
 80170e0:	005b      	lsls	r3, r3, #1
 80170e2:	4413      	add	r3, r2
 80170e4:	00db      	lsls	r3, r3, #3
 80170e6:	440b      	add	r3, r1
 80170e8:	3314      	adds	r3, #20
 80170ea:	2203      	movs	r2, #3
 80170ec:	701a      	strb	r2, [r3, #0]
 80170ee:	e02d      	b.n	801714c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80170f0:	79fa      	ldrb	r2, [r7, #7]
 80170f2:	4923      	ldr	r1, [pc, #140]	; (8017180 <etharp_output_to_arp_index+0x124>)
 80170f4:	4613      	mov	r3, r2
 80170f6:	005b      	lsls	r3, r3, #1
 80170f8:	4413      	add	r3, r2
 80170fa:	00db      	lsls	r3, r3, #3
 80170fc:	440b      	add	r3, r1
 80170fe:	3312      	adds	r3, #18
 8017100:	881b      	ldrh	r3, [r3, #0]
 8017102:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017106:	d321      	bcc.n	801714c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017108:	79fa      	ldrb	r2, [r7, #7]
 801710a:	4613      	mov	r3, r2
 801710c:	005b      	lsls	r3, r3, #1
 801710e:	4413      	add	r3, r2
 8017110:	00db      	lsls	r3, r3, #3
 8017112:	4a1b      	ldr	r2, [pc, #108]	; (8017180 <etharp_output_to_arp_index+0x124>)
 8017114:	4413      	add	r3, r2
 8017116:	1d19      	adds	r1, r3, #4
 8017118:	79fa      	ldrb	r2, [r7, #7]
 801711a:	4613      	mov	r3, r2
 801711c:	005b      	lsls	r3, r3, #1
 801711e:	4413      	add	r3, r2
 8017120:	00db      	lsls	r3, r3, #3
 8017122:	3308      	adds	r3, #8
 8017124:	4a16      	ldr	r2, [pc, #88]	; (8017180 <etharp_output_to_arp_index+0x124>)
 8017126:	4413      	add	r3, r2
 8017128:	3304      	adds	r3, #4
 801712a:	461a      	mov	r2, r3
 801712c:	68f8      	ldr	r0, [r7, #12]
 801712e:	f000 fafb 	bl	8017728 <etharp_request_dst>
 8017132:	4603      	mov	r3, r0
 8017134:	2b00      	cmp	r3, #0
 8017136:	d109      	bne.n	801714c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017138:	79fa      	ldrb	r2, [r7, #7]
 801713a:	4911      	ldr	r1, [pc, #68]	; (8017180 <etharp_output_to_arp_index+0x124>)
 801713c:	4613      	mov	r3, r2
 801713e:	005b      	lsls	r3, r3, #1
 8017140:	4413      	add	r3, r2
 8017142:	00db      	lsls	r3, r3, #3
 8017144:	440b      	add	r3, r1
 8017146:	3314      	adds	r3, #20
 8017148:	2203      	movs	r2, #3
 801714a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017152:	79fa      	ldrb	r2, [r7, #7]
 8017154:	4613      	mov	r3, r2
 8017156:	005b      	lsls	r3, r3, #1
 8017158:	4413      	add	r3, r2
 801715a:	00db      	lsls	r3, r3, #3
 801715c:	3308      	adds	r3, #8
 801715e:	4a08      	ldr	r2, [pc, #32]	; (8017180 <etharp_output_to_arp_index+0x124>)
 8017160:	4413      	add	r3, r2
 8017162:	1d1a      	adds	r2, r3, #4
 8017164:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017168:	9300      	str	r3, [sp, #0]
 801716a:	4613      	mov	r3, r2
 801716c:	460a      	mov	r2, r1
 801716e:	68b9      	ldr	r1, [r7, #8]
 8017170:	68f8      	ldr	r0, [r7, #12]
 8017172:	f001 fe51 	bl	8018e18 <ethernet_output>
 8017176:	4603      	mov	r3, r0
}
 8017178:	4618      	mov	r0, r3
 801717a:	3710      	adds	r7, #16
 801717c:	46bd      	mov	sp, r7
 801717e:	bd80      	pop	{r7, pc}
 8017180:	2000429c 	.word	0x2000429c
 8017184:	0801da14 	.word	0x0801da14
 8017188:	0801db84 	.word	0x0801db84
 801718c:	0801da8c 	.word	0x0801da8c

08017190 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b08a      	sub	sp, #40	; 0x28
 8017194:	af02      	add	r7, sp, #8
 8017196:	60f8      	str	r0, [r7, #12]
 8017198:	60b9      	str	r1, [r7, #8]
 801719a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d106      	bne.n	80171b4 <etharp_output+0x24>
 80171a6:	4b73      	ldr	r3, [pc, #460]	; (8017374 <etharp_output+0x1e4>)
 80171a8:	f240 321e 	movw	r2, #798	; 0x31e
 80171ac:	4972      	ldr	r1, [pc, #456]	; (8017378 <etharp_output+0x1e8>)
 80171ae:	4873      	ldr	r0, [pc, #460]	; (801737c <etharp_output+0x1ec>)
 80171b0:	f002 f8bc 	bl	801932c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80171b4:	68bb      	ldr	r3, [r7, #8]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d106      	bne.n	80171c8 <etharp_output+0x38>
 80171ba:	4b6e      	ldr	r3, [pc, #440]	; (8017374 <etharp_output+0x1e4>)
 80171bc:	f240 321f 	movw	r2, #799	; 0x31f
 80171c0:	496f      	ldr	r1, [pc, #444]	; (8017380 <etharp_output+0x1f0>)
 80171c2:	486e      	ldr	r0, [pc, #440]	; (801737c <etharp_output+0x1ec>)
 80171c4:	f002 f8b2 	bl	801932c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d106      	bne.n	80171dc <etharp_output+0x4c>
 80171ce:	4b69      	ldr	r3, [pc, #420]	; (8017374 <etharp_output+0x1e4>)
 80171d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80171d4:	496b      	ldr	r1, [pc, #428]	; (8017384 <etharp_output+0x1f4>)
 80171d6:	4869      	ldr	r0, [pc, #420]	; (801737c <etharp_output+0x1ec>)
 80171d8:	f002 f8a8 	bl	801932c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	68f9      	ldr	r1, [r7, #12]
 80171e2:	4618      	mov	r0, r3
 80171e4:	f000 ff14 	bl	8018010 <ip4_addr_isbroadcast_u32>
 80171e8:	4603      	mov	r3, r0
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d002      	beq.n	80171f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80171ee:	4b66      	ldr	r3, [pc, #408]	; (8017388 <etharp_output+0x1f8>)
 80171f0:	61fb      	str	r3, [r7, #28]
 80171f2:	e0af      	b.n	8017354 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80171fc:	2be0      	cmp	r3, #224	; 0xe0
 80171fe:	d118      	bne.n	8017232 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017200:	2301      	movs	r3, #1
 8017202:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017204:	2300      	movs	r3, #0
 8017206:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017208:	235e      	movs	r3, #94	; 0x5e
 801720a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	3301      	adds	r3, #1
 8017210:	781b      	ldrb	r3, [r3, #0]
 8017212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017216:	b2db      	uxtb	r3, r3
 8017218:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	3302      	adds	r3, #2
 801721e:	781b      	ldrb	r3, [r3, #0]
 8017220:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	3303      	adds	r3, #3
 8017226:	781b      	ldrb	r3, [r3, #0]
 8017228:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801722a:	f107 0310 	add.w	r3, r7, #16
 801722e:	61fb      	str	r3, [r7, #28]
 8017230:	e090      	b.n	8017354 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	681a      	ldr	r2, [r3, #0]
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	3304      	adds	r3, #4
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	405a      	eors	r2, r3
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	3308      	adds	r3, #8
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	4013      	ands	r3, r2
 8017246:	2b00      	cmp	r3, #0
 8017248:	d012      	beq.n	8017270 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017250:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017254:	4293      	cmp	r3, r2
 8017256:	d00b      	beq.n	8017270 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	330c      	adds	r3, #12
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d003      	beq.n	801726a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	330c      	adds	r3, #12
 8017266:	61bb      	str	r3, [r7, #24]
 8017268:	e002      	b.n	8017270 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801726a:	f06f 0303 	mvn.w	r3, #3
 801726e:	e07d      	b.n	801736c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017270:	4b46      	ldr	r3, [pc, #280]	; (801738c <etharp_output+0x1fc>)
 8017272:	781b      	ldrb	r3, [r3, #0]
 8017274:	4619      	mov	r1, r3
 8017276:	4a46      	ldr	r2, [pc, #280]	; (8017390 <etharp_output+0x200>)
 8017278:	460b      	mov	r3, r1
 801727a:	005b      	lsls	r3, r3, #1
 801727c:	440b      	add	r3, r1
 801727e:	00db      	lsls	r3, r3, #3
 8017280:	4413      	add	r3, r2
 8017282:	3314      	adds	r3, #20
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	2b01      	cmp	r3, #1
 8017288:	d925      	bls.n	80172d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801728a:	4b40      	ldr	r3, [pc, #256]	; (801738c <etharp_output+0x1fc>)
 801728c:	781b      	ldrb	r3, [r3, #0]
 801728e:	4619      	mov	r1, r3
 8017290:	4a3f      	ldr	r2, [pc, #252]	; (8017390 <etharp_output+0x200>)
 8017292:	460b      	mov	r3, r1
 8017294:	005b      	lsls	r3, r3, #1
 8017296:	440b      	add	r3, r1
 8017298:	00db      	lsls	r3, r3, #3
 801729a:	4413      	add	r3, r2
 801729c:	3308      	adds	r3, #8
 801729e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80172a0:	68fa      	ldr	r2, [r7, #12]
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d117      	bne.n	80172d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80172a6:	69bb      	ldr	r3, [r7, #24]
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	4b38      	ldr	r3, [pc, #224]	; (801738c <etharp_output+0x1fc>)
 80172ac:	781b      	ldrb	r3, [r3, #0]
 80172ae:	4618      	mov	r0, r3
 80172b0:	4937      	ldr	r1, [pc, #220]	; (8017390 <etharp_output+0x200>)
 80172b2:	4603      	mov	r3, r0
 80172b4:	005b      	lsls	r3, r3, #1
 80172b6:	4403      	add	r3, r0
 80172b8:	00db      	lsls	r3, r3, #3
 80172ba:	440b      	add	r3, r1
 80172bc:	3304      	adds	r3, #4
 80172be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80172c0:	429a      	cmp	r2, r3
 80172c2:	d108      	bne.n	80172d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80172c4:	4b31      	ldr	r3, [pc, #196]	; (801738c <etharp_output+0x1fc>)
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	461a      	mov	r2, r3
 80172ca:	68b9      	ldr	r1, [r7, #8]
 80172cc:	68f8      	ldr	r0, [r7, #12]
 80172ce:	f7ff fec5 	bl	801705c <etharp_output_to_arp_index>
 80172d2:	4603      	mov	r3, r0
 80172d4:	e04a      	b.n	801736c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80172d6:	2300      	movs	r3, #0
 80172d8:	75fb      	strb	r3, [r7, #23]
 80172da:	e031      	b.n	8017340 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80172dc:	7dfa      	ldrb	r2, [r7, #23]
 80172de:	492c      	ldr	r1, [pc, #176]	; (8017390 <etharp_output+0x200>)
 80172e0:	4613      	mov	r3, r2
 80172e2:	005b      	lsls	r3, r3, #1
 80172e4:	4413      	add	r3, r2
 80172e6:	00db      	lsls	r3, r3, #3
 80172e8:	440b      	add	r3, r1
 80172ea:	3314      	adds	r3, #20
 80172ec:	781b      	ldrb	r3, [r3, #0]
 80172ee:	2b01      	cmp	r3, #1
 80172f0:	d923      	bls.n	801733a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80172f2:	7dfa      	ldrb	r2, [r7, #23]
 80172f4:	4926      	ldr	r1, [pc, #152]	; (8017390 <etharp_output+0x200>)
 80172f6:	4613      	mov	r3, r2
 80172f8:	005b      	lsls	r3, r3, #1
 80172fa:	4413      	add	r3, r2
 80172fc:	00db      	lsls	r3, r3, #3
 80172fe:	440b      	add	r3, r1
 8017300:	3308      	adds	r3, #8
 8017302:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017304:	68fa      	ldr	r2, [r7, #12]
 8017306:	429a      	cmp	r2, r3
 8017308:	d117      	bne.n	801733a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801730a:	69bb      	ldr	r3, [r7, #24]
 801730c:	6819      	ldr	r1, [r3, #0]
 801730e:	7dfa      	ldrb	r2, [r7, #23]
 8017310:	481f      	ldr	r0, [pc, #124]	; (8017390 <etharp_output+0x200>)
 8017312:	4613      	mov	r3, r2
 8017314:	005b      	lsls	r3, r3, #1
 8017316:	4413      	add	r3, r2
 8017318:	00db      	lsls	r3, r3, #3
 801731a:	4403      	add	r3, r0
 801731c:	3304      	adds	r3, #4
 801731e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017320:	4299      	cmp	r1, r3
 8017322:	d10a      	bne.n	801733a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017324:	4a19      	ldr	r2, [pc, #100]	; (801738c <etharp_output+0x1fc>)
 8017326:	7dfb      	ldrb	r3, [r7, #23]
 8017328:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801732a:	7dfb      	ldrb	r3, [r7, #23]
 801732c:	461a      	mov	r2, r3
 801732e:	68b9      	ldr	r1, [r7, #8]
 8017330:	68f8      	ldr	r0, [r7, #12]
 8017332:	f7ff fe93 	bl	801705c <etharp_output_to_arp_index>
 8017336:	4603      	mov	r3, r0
 8017338:	e018      	b.n	801736c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801733a:	7dfb      	ldrb	r3, [r7, #23]
 801733c:	3301      	adds	r3, #1
 801733e:	75fb      	strb	r3, [r7, #23]
 8017340:	7dfb      	ldrb	r3, [r7, #23]
 8017342:	2b09      	cmp	r3, #9
 8017344:	d9ca      	bls.n	80172dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017346:	68ba      	ldr	r2, [r7, #8]
 8017348:	69b9      	ldr	r1, [r7, #24]
 801734a:	68f8      	ldr	r0, [r7, #12]
 801734c:	f000 f822 	bl	8017394 <etharp_query>
 8017350:	4603      	mov	r3, r0
 8017352:	e00b      	b.n	801736c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801735a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801735e:	9300      	str	r3, [sp, #0]
 8017360:	69fb      	ldr	r3, [r7, #28]
 8017362:	68b9      	ldr	r1, [r7, #8]
 8017364:	68f8      	ldr	r0, [r7, #12]
 8017366:	f001 fd57 	bl	8018e18 <ethernet_output>
 801736a:	4603      	mov	r3, r0
}
 801736c:	4618      	mov	r0, r3
 801736e:	3720      	adds	r7, #32
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	0801da14 	.word	0x0801da14
 8017378:	0801db64 	.word	0x0801db64
 801737c:	0801da8c 	.word	0x0801da8c
 8017380:	0801dbb4 	.word	0x0801dbb4
 8017384:	0801db54 	.word	0x0801db54
 8017388:	0801e260 	.word	0x0801e260
 801738c:	2000438c 	.word	0x2000438c
 8017390:	2000429c 	.word	0x2000429c

08017394 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b08c      	sub	sp, #48	; 0x30
 8017398:	af02      	add	r7, sp, #8
 801739a:	60f8      	str	r0, [r7, #12]
 801739c:	60b9      	str	r1, [r7, #8]
 801739e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	332a      	adds	r3, #42	; 0x2a
 80173a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80173a6:	23ff      	movs	r3, #255	; 0xff
 80173a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80173ac:	2300      	movs	r3, #0
 80173ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	68f9      	ldr	r1, [r7, #12]
 80173b6:	4618      	mov	r0, r3
 80173b8:	f000 fe2a 	bl	8018010 <ip4_addr_isbroadcast_u32>
 80173bc:	4603      	mov	r3, r0
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d10c      	bne.n	80173dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80173ca:	2be0      	cmp	r3, #224	; 0xe0
 80173cc:	d006      	beq.n	80173dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80173ce:	68bb      	ldr	r3, [r7, #8]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d003      	beq.n	80173dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80173d4:	68bb      	ldr	r3, [r7, #8]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d102      	bne.n	80173e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80173dc:	f06f 030f 	mvn.w	r3, #15
 80173e0:	e102      	b.n	80175e8 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80173e2:	68fa      	ldr	r2, [r7, #12]
 80173e4:	2101      	movs	r1, #1
 80173e6:	68b8      	ldr	r0, [r7, #8]
 80173e8:	f7ff fb5c 	bl	8016aa4 <etharp_find_entry>
 80173ec:	4603      	mov	r3, r0
 80173ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80173f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	da02      	bge.n	80173fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80173f8:	8a7b      	ldrh	r3, [r7, #18]
 80173fa:	b25b      	sxtb	r3, r3
 80173fc:	e0f4      	b.n	80175e8 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80173fe:	8a7b      	ldrh	r3, [r7, #18]
 8017400:	2b7e      	cmp	r3, #126	; 0x7e
 8017402:	d906      	bls.n	8017412 <etharp_query+0x7e>
 8017404:	4b7a      	ldr	r3, [pc, #488]	; (80175f0 <etharp_query+0x25c>)
 8017406:	f240 32c1 	movw	r2, #961	; 0x3c1
 801740a:	497a      	ldr	r1, [pc, #488]	; (80175f4 <etharp_query+0x260>)
 801740c:	487a      	ldr	r0, [pc, #488]	; (80175f8 <etharp_query+0x264>)
 801740e:	f001 ff8d 	bl	801932c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017412:	8a7b      	ldrh	r3, [r7, #18]
 8017414:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017416:	7c7a      	ldrb	r2, [r7, #17]
 8017418:	4978      	ldr	r1, [pc, #480]	; (80175fc <etharp_query+0x268>)
 801741a:	4613      	mov	r3, r2
 801741c:	005b      	lsls	r3, r3, #1
 801741e:	4413      	add	r3, r2
 8017420:	00db      	lsls	r3, r3, #3
 8017422:	440b      	add	r3, r1
 8017424:	3314      	adds	r3, #20
 8017426:	781b      	ldrb	r3, [r3, #0]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d115      	bne.n	8017458 <etharp_query+0xc4>
    is_new_entry = 1;
 801742c:	2301      	movs	r3, #1
 801742e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017430:	7c7a      	ldrb	r2, [r7, #17]
 8017432:	4972      	ldr	r1, [pc, #456]	; (80175fc <etharp_query+0x268>)
 8017434:	4613      	mov	r3, r2
 8017436:	005b      	lsls	r3, r3, #1
 8017438:	4413      	add	r3, r2
 801743a:	00db      	lsls	r3, r3, #3
 801743c:	440b      	add	r3, r1
 801743e:	3314      	adds	r3, #20
 8017440:	2201      	movs	r2, #1
 8017442:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017444:	7c7a      	ldrb	r2, [r7, #17]
 8017446:	496d      	ldr	r1, [pc, #436]	; (80175fc <etharp_query+0x268>)
 8017448:	4613      	mov	r3, r2
 801744a:	005b      	lsls	r3, r3, #1
 801744c:	4413      	add	r3, r2
 801744e:	00db      	lsls	r3, r3, #3
 8017450:	440b      	add	r3, r1
 8017452:	3308      	adds	r3, #8
 8017454:	68fa      	ldr	r2, [r7, #12]
 8017456:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017458:	7c7a      	ldrb	r2, [r7, #17]
 801745a:	4968      	ldr	r1, [pc, #416]	; (80175fc <etharp_query+0x268>)
 801745c:	4613      	mov	r3, r2
 801745e:	005b      	lsls	r3, r3, #1
 8017460:	4413      	add	r3, r2
 8017462:	00db      	lsls	r3, r3, #3
 8017464:	440b      	add	r3, r1
 8017466:	3314      	adds	r3, #20
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	2b01      	cmp	r3, #1
 801746c:	d011      	beq.n	8017492 <etharp_query+0xfe>
 801746e:	7c7a      	ldrb	r2, [r7, #17]
 8017470:	4962      	ldr	r1, [pc, #392]	; (80175fc <etharp_query+0x268>)
 8017472:	4613      	mov	r3, r2
 8017474:	005b      	lsls	r3, r3, #1
 8017476:	4413      	add	r3, r2
 8017478:	00db      	lsls	r3, r3, #3
 801747a:	440b      	add	r3, r1
 801747c:	3314      	adds	r3, #20
 801747e:	781b      	ldrb	r3, [r3, #0]
 8017480:	2b01      	cmp	r3, #1
 8017482:	d806      	bhi.n	8017492 <etharp_query+0xfe>
 8017484:	4b5a      	ldr	r3, [pc, #360]	; (80175f0 <etharp_query+0x25c>)
 8017486:	f240 32cf 	movw	r2, #975	; 0x3cf
 801748a:	495d      	ldr	r1, [pc, #372]	; (8017600 <etharp_query+0x26c>)
 801748c:	485a      	ldr	r0, [pc, #360]	; (80175f8 <etharp_query+0x264>)
 801748e:	f001 ff4d 	bl	801932c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017492:	6a3b      	ldr	r3, [r7, #32]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d102      	bne.n	801749e <etharp_query+0x10a>
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d10c      	bne.n	80174b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801749e:	68b9      	ldr	r1, [r7, #8]
 80174a0:	68f8      	ldr	r0, [r7, #12]
 80174a2:	f000 f963 	bl	801776c <etharp_request>
 80174a6:	4603      	mov	r3, r0
 80174a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d102      	bne.n	80174b8 <etharp_query+0x124>
      return result;
 80174b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80174b6:	e097      	b.n	80175e8 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d106      	bne.n	80174cc <etharp_query+0x138>
 80174be:	4b4c      	ldr	r3, [pc, #304]	; (80175f0 <etharp_query+0x25c>)
 80174c0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80174c4:	494f      	ldr	r1, [pc, #316]	; (8017604 <etharp_query+0x270>)
 80174c6:	484c      	ldr	r0, [pc, #304]	; (80175f8 <etharp_query+0x264>)
 80174c8:	f001 ff30 	bl	801932c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80174cc:	7c7a      	ldrb	r2, [r7, #17]
 80174ce:	494b      	ldr	r1, [pc, #300]	; (80175fc <etharp_query+0x268>)
 80174d0:	4613      	mov	r3, r2
 80174d2:	005b      	lsls	r3, r3, #1
 80174d4:	4413      	add	r3, r2
 80174d6:	00db      	lsls	r3, r3, #3
 80174d8:	440b      	add	r3, r1
 80174da:	3314      	adds	r3, #20
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	2b01      	cmp	r3, #1
 80174e0:	d918      	bls.n	8017514 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80174e2:	4a49      	ldr	r2, [pc, #292]	; (8017608 <etharp_query+0x274>)
 80174e4:	7c7b      	ldrb	r3, [r7, #17]
 80174e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80174e8:	7c7a      	ldrb	r2, [r7, #17]
 80174ea:	4613      	mov	r3, r2
 80174ec:	005b      	lsls	r3, r3, #1
 80174ee:	4413      	add	r3, r2
 80174f0:	00db      	lsls	r3, r3, #3
 80174f2:	3308      	adds	r3, #8
 80174f4:	4a41      	ldr	r2, [pc, #260]	; (80175fc <etharp_query+0x268>)
 80174f6:	4413      	add	r3, r2
 80174f8:	1d1a      	adds	r2, r3, #4
 80174fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80174fe:	9300      	str	r3, [sp, #0]
 8017500:	4613      	mov	r3, r2
 8017502:	697a      	ldr	r2, [r7, #20]
 8017504:	6879      	ldr	r1, [r7, #4]
 8017506:	68f8      	ldr	r0, [r7, #12]
 8017508:	f001 fc86 	bl	8018e18 <ethernet_output>
 801750c:	4603      	mov	r3, r0
 801750e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017512:	e067      	b.n	80175e4 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017514:	7c7a      	ldrb	r2, [r7, #17]
 8017516:	4939      	ldr	r1, [pc, #228]	; (80175fc <etharp_query+0x268>)
 8017518:	4613      	mov	r3, r2
 801751a:	005b      	lsls	r3, r3, #1
 801751c:	4413      	add	r3, r2
 801751e:	00db      	lsls	r3, r3, #3
 8017520:	440b      	add	r3, r1
 8017522:	3314      	adds	r3, #20
 8017524:	781b      	ldrb	r3, [r3, #0]
 8017526:	2b01      	cmp	r3, #1
 8017528:	d15c      	bne.n	80175e4 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801752a:	2300      	movs	r3, #0
 801752c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017532:	e01c      	b.n	801756e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017534:	69fb      	ldr	r3, [r7, #28]
 8017536:	895a      	ldrh	r2, [r3, #10]
 8017538:	69fb      	ldr	r3, [r7, #28]
 801753a:	891b      	ldrh	r3, [r3, #8]
 801753c:	429a      	cmp	r2, r3
 801753e:	d10a      	bne.n	8017556 <etharp_query+0x1c2>
 8017540:	69fb      	ldr	r3, [r7, #28]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d006      	beq.n	8017556 <etharp_query+0x1c2>
 8017548:	4b29      	ldr	r3, [pc, #164]	; (80175f0 <etharp_query+0x25c>)
 801754a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801754e:	492f      	ldr	r1, [pc, #188]	; (801760c <etharp_query+0x278>)
 8017550:	4829      	ldr	r0, [pc, #164]	; (80175f8 <etharp_query+0x264>)
 8017552:	f001 feeb 	bl	801932c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017556:	69fb      	ldr	r3, [r7, #28]
 8017558:	7b1b      	ldrb	r3, [r3, #12]
 801755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801755e:	2b00      	cmp	r3, #0
 8017560:	d002      	beq.n	8017568 <etharp_query+0x1d4>
        copy_needed = 1;
 8017562:	2301      	movs	r3, #1
 8017564:	61bb      	str	r3, [r7, #24]
        break;
 8017566:	e005      	b.n	8017574 <etharp_query+0x1e0>
      }
      p = p->next;
 8017568:	69fb      	ldr	r3, [r7, #28]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d1df      	bne.n	8017534 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8017574:	69bb      	ldr	r3, [r7, #24]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d007      	beq.n	801758a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801757a:	687a      	ldr	r2, [r7, #4]
 801757c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017580:	200e      	movs	r0, #14
 8017582:	f7f6 fb59 	bl	800dc38 <pbuf_clone>
 8017586:	61f8      	str	r0, [r7, #28]
 8017588:	e004      	b.n	8017594 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801758e:	69f8      	ldr	r0, [r7, #28]
 8017590:	f7f6 f980 	bl	800d894 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017594:	69fb      	ldr	r3, [r7, #28]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d021      	beq.n	80175de <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801759a:	7c7a      	ldrb	r2, [r7, #17]
 801759c:	4917      	ldr	r1, [pc, #92]	; (80175fc <etharp_query+0x268>)
 801759e:	4613      	mov	r3, r2
 80175a0:	005b      	lsls	r3, r3, #1
 80175a2:	4413      	add	r3, r2
 80175a4:	00db      	lsls	r3, r3, #3
 80175a6:	440b      	add	r3, r1
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d00a      	beq.n	80175c4 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80175ae:	7c7a      	ldrb	r2, [r7, #17]
 80175b0:	4912      	ldr	r1, [pc, #72]	; (80175fc <etharp_query+0x268>)
 80175b2:	4613      	mov	r3, r2
 80175b4:	005b      	lsls	r3, r3, #1
 80175b6:	4413      	add	r3, r2
 80175b8:	00db      	lsls	r3, r3, #3
 80175ba:	440b      	add	r3, r1
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	4618      	mov	r0, r3
 80175c0:	f7f6 f8c2 	bl	800d748 <pbuf_free>
      }
      arp_table[i].q = p;
 80175c4:	7c7a      	ldrb	r2, [r7, #17]
 80175c6:	490d      	ldr	r1, [pc, #52]	; (80175fc <etharp_query+0x268>)
 80175c8:	4613      	mov	r3, r2
 80175ca:	005b      	lsls	r3, r3, #1
 80175cc:	4413      	add	r3, r2
 80175ce:	00db      	lsls	r3, r3, #3
 80175d0:	440b      	add	r3, r1
 80175d2:	69fa      	ldr	r2, [r7, #28]
 80175d4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80175d6:	2300      	movs	r3, #0
 80175d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80175dc:	e002      	b.n	80175e4 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80175de:	23ff      	movs	r3, #255	; 0xff
 80175e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80175e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80175e8:	4618      	mov	r0, r3
 80175ea:	3728      	adds	r7, #40	; 0x28
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}
 80175f0:	0801da14 	.word	0x0801da14
 80175f4:	0801dbc0 	.word	0x0801dbc0
 80175f8:	0801da8c 	.word	0x0801da8c
 80175fc:	2000429c 	.word	0x2000429c
 8017600:	0801dbd0 	.word	0x0801dbd0
 8017604:	0801dbb4 	.word	0x0801dbb4
 8017608:	2000438c 	.word	0x2000438c
 801760c:	0801dbf8 	.word	0x0801dbf8

08017610 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b08a      	sub	sp, #40	; 0x28
 8017614:	af02      	add	r7, sp, #8
 8017616:	60f8      	str	r0, [r7, #12]
 8017618:	60b9      	str	r1, [r7, #8]
 801761a:	607a      	str	r2, [r7, #4]
 801761c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801761e:	2300      	movs	r3, #0
 8017620:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d106      	bne.n	8017636 <etharp_raw+0x26>
 8017628:	4b3a      	ldr	r3, [pc, #232]	; (8017714 <etharp_raw+0x104>)
 801762a:	f240 4257 	movw	r2, #1111	; 0x457
 801762e:	493a      	ldr	r1, [pc, #232]	; (8017718 <etharp_raw+0x108>)
 8017630:	483a      	ldr	r0, [pc, #232]	; (801771c <etharp_raw+0x10c>)
 8017632:	f001 fe7b 	bl	801932c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017636:	f44f 7220 	mov.w	r2, #640	; 0x280
 801763a:	211c      	movs	r1, #28
 801763c:	200e      	movs	r0, #14
 801763e:	f7f5 fda3 	bl	800d188 <pbuf_alloc>
 8017642:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017644:	69bb      	ldr	r3, [r7, #24]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d102      	bne.n	8017650 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801764a:	f04f 33ff 	mov.w	r3, #4294967295
 801764e:	e05d      	b.n	801770c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017650:	69bb      	ldr	r3, [r7, #24]
 8017652:	895b      	ldrh	r3, [r3, #10]
 8017654:	2b1b      	cmp	r3, #27
 8017656:	d806      	bhi.n	8017666 <etharp_raw+0x56>
 8017658:	4b2e      	ldr	r3, [pc, #184]	; (8017714 <etharp_raw+0x104>)
 801765a:	f240 4263 	movw	r2, #1123	; 0x463
 801765e:	4930      	ldr	r1, [pc, #192]	; (8017720 <etharp_raw+0x110>)
 8017660:	482e      	ldr	r0, [pc, #184]	; (801771c <etharp_raw+0x10c>)
 8017662:	f001 fe63 	bl	801932c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017666:	69bb      	ldr	r3, [r7, #24]
 8017668:	685b      	ldr	r3, [r3, #4]
 801766a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801766c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801766e:	4618      	mov	r0, r3
 8017670:	f7f4 fc7e 	bl	800bf70 <lwip_htons>
 8017674:	4603      	mov	r3, r0
 8017676:	461a      	mov	r2, r3
 8017678:	697b      	ldr	r3, [r7, #20]
 801767a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017682:	2b06      	cmp	r3, #6
 8017684:	d006      	beq.n	8017694 <etharp_raw+0x84>
 8017686:	4b23      	ldr	r3, [pc, #140]	; (8017714 <etharp_raw+0x104>)
 8017688:	f240 426a 	movw	r2, #1130	; 0x46a
 801768c:	4925      	ldr	r1, [pc, #148]	; (8017724 <etharp_raw+0x114>)
 801768e:	4823      	ldr	r0, [pc, #140]	; (801771c <etharp_raw+0x10c>)
 8017690:	f001 fe4c 	bl	801932c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017694:	697b      	ldr	r3, [r7, #20]
 8017696:	3308      	adds	r3, #8
 8017698:	2206      	movs	r2, #6
 801769a:	6839      	ldr	r1, [r7, #0]
 801769c:	4618      	mov	r0, r3
 801769e:	f001 fe31 	bl	8019304 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	3312      	adds	r3, #18
 80176a6:	2206      	movs	r2, #6
 80176a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80176aa:	4618      	mov	r0, r3
 80176ac:	f001 fe2a 	bl	8019304 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80176b0:	697b      	ldr	r3, [r7, #20]
 80176b2:	330e      	adds	r3, #14
 80176b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80176b6:	6812      	ldr	r2, [r2, #0]
 80176b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	3318      	adds	r3, #24
 80176be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80176c0:	6812      	ldr	r2, [r2, #0]
 80176c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80176c4:	697b      	ldr	r3, [r7, #20]
 80176c6:	2200      	movs	r2, #0
 80176c8:	701a      	strb	r2, [r3, #0]
 80176ca:	2200      	movs	r2, #0
 80176cc:	f042 0201 	orr.w	r2, r2, #1
 80176d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80176d2:	697b      	ldr	r3, [r7, #20]
 80176d4:	2200      	movs	r2, #0
 80176d6:	f042 0208 	orr.w	r2, r2, #8
 80176da:	709a      	strb	r2, [r3, #2]
 80176dc:	2200      	movs	r2, #0
 80176de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80176e0:	697b      	ldr	r3, [r7, #20]
 80176e2:	2206      	movs	r2, #6
 80176e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80176e6:	697b      	ldr	r3, [r7, #20]
 80176e8:	2204      	movs	r2, #4
 80176ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80176ec:	f640 0306 	movw	r3, #2054	; 0x806
 80176f0:	9300      	str	r3, [sp, #0]
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	68ba      	ldr	r2, [r7, #8]
 80176f6:	69b9      	ldr	r1, [r7, #24]
 80176f8:	68f8      	ldr	r0, [r7, #12]
 80176fa:	f001 fb8d 	bl	8018e18 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80176fe:	69b8      	ldr	r0, [r7, #24]
 8017700:	f7f6 f822 	bl	800d748 <pbuf_free>
  p = NULL;
 8017704:	2300      	movs	r3, #0
 8017706:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017708:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801770c:	4618      	mov	r0, r3
 801770e:	3720      	adds	r7, #32
 8017710:	46bd      	mov	sp, r7
 8017712:	bd80      	pop	{r7, pc}
 8017714:	0801da14 	.word	0x0801da14
 8017718:	0801db64 	.word	0x0801db64
 801771c:	0801da8c 	.word	0x0801da8c
 8017720:	0801dc14 	.word	0x0801dc14
 8017724:	0801dc48 	.word	0x0801dc48

08017728 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b088      	sub	sp, #32
 801772c:	af04      	add	r7, sp, #16
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	60b9      	str	r1, [r7, #8]
 8017732:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017744:	2201      	movs	r2, #1
 8017746:	9203      	str	r2, [sp, #12]
 8017748:	68ba      	ldr	r2, [r7, #8]
 801774a:	9202      	str	r2, [sp, #8]
 801774c:	4a06      	ldr	r2, [pc, #24]	; (8017768 <etharp_request_dst+0x40>)
 801774e:	9201      	str	r2, [sp, #4]
 8017750:	9300      	str	r3, [sp, #0]
 8017752:	4603      	mov	r3, r0
 8017754:	687a      	ldr	r2, [r7, #4]
 8017756:	68f8      	ldr	r0, [r7, #12]
 8017758:	f7ff ff5a 	bl	8017610 <etharp_raw>
 801775c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801775e:	4618      	mov	r0, r3
 8017760:	3710      	adds	r7, #16
 8017762:	46bd      	mov	sp, r7
 8017764:	bd80      	pop	{r7, pc}
 8017766:	bf00      	nop
 8017768:	0801e268 	.word	0x0801e268

0801776c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b082      	sub	sp, #8
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
 8017774:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017776:	4a05      	ldr	r2, [pc, #20]	; (801778c <etharp_request+0x20>)
 8017778:	6839      	ldr	r1, [r7, #0]
 801777a:	6878      	ldr	r0, [r7, #4]
 801777c:	f7ff ffd4 	bl	8017728 <etharp_request_dst>
 8017780:	4603      	mov	r3, r0
}
 8017782:	4618      	mov	r0, r3
 8017784:	3708      	adds	r7, #8
 8017786:	46bd      	mov	sp, r7
 8017788:	bd80      	pop	{r7, pc}
 801778a:	bf00      	nop
 801778c:	0801e260 	.word	0x0801e260

08017790 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b08e      	sub	sp, #56	; 0x38
 8017794:	af04      	add	r7, sp, #16
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801779a:	4b79      	ldr	r3, [pc, #484]	; (8017980 <icmp_input+0x1f0>)
 801779c:	689b      	ldr	r3, [r3, #8]
 801779e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80177a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177a2:	781b      	ldrb	r3, [r3, #0]
 80177a4:	f003 030f 	and.w	r3, r3, #15
 80177a8:	b2db      	uxtb	r3, r3
 80177aa:	009b      	lsls	r3, r3, #2
 80177ac:	b2db      	uxtb	r3, r3
 80177ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80177b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177b2:	2b13      	cmp	r3, #19
 80177b4:	f240 80cd 	bls.w	8017952 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	895b      	ldrh	r3, [r3, #10]
 80177bc:	2b03      	cmp	r3, #3
 80177be:	f240 80ca 	bls.w	8017956 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	685b      	ldr	r3, [r3, #4]
 80177c6:	781b      	ldrb	r3, [r3, #0]
 80177c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80177cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	f000 80b7 	beq.w	8017944 <icmp_input+0x1b4>
 80177d6:	2b08      	cmp	r3, #8
 80177d8:	f040 80b7 	bne.w	801794a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80177dc:	4b69      	ldr	r3, [pc, #420]	; (8017984 <icmp_input+0x1f4>)
 80177de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80177e0:	4b67      	ldr	r3, [pc, #412]	; (8017980 <icmp_input+0x1f0>)
 80177e2:	695b      	ldr	r3, [r3, #20]
 80177e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80177e8:	2be0      	cmp	r3, #224	; 0xe0
 80177ea:	f000 80bb 	beq.w	8017964 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80177ee:	4b64      	ldr	r3, [pc, #400]	; (8017980 <icmp_input+0x1f0>)
 80177f0:	695a      	ldr	r2, [r3, #20]
 80177f2:	4b63      	ldr	r3, [pc, #396]	; (8017980 <icmp_input+0x1f0>)
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	4619      	mov	r1, r3
 80177f8:	4610      	mov	r0, r2
 80177fa:	f000 fc09 	bl	8018010 <ip4_addr_isbroadcast_u32>
 80177fe:	4603      	mov	r3, r0
 8017800:	2b00      	cmp	r3, #0
 8017802:	f040 80b1 	bne.w	8017968 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	891b      	ldrh	r3, [r3, #8]
 801780a:	2b07      	cmp	r3, #7
 801780c:	f240 80a5 	bls.w	801795a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017812:	330e      	adds	r3, #14
 8017814:	4619      	mov	r1, r3
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f7f5 ff00 	bl	800d61c <pbuf_add_header>
 801781c:	4603      	mov	r3, r0
 801781e:	2b00      	cmp	r3, #0
 8017820:	d04b      	beq.n	80178ba <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	891a      	ldrh	r2, [r3, #8]
 8017826:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017828:	4413      	add	r3, r2
 801782a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	891b      	ldrh	r3, [r3, #8]
 8017830:	8b7a      	ldrh	r2, [r7, #26]
 8017832:	429a      	cmp	r2, r3
 8017834:	f0c0 809a 	bcc.w	801796c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017838:	8b7b      	ldrh	r3, [r7, #26]
 801783a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801783e:	4619      	mov	r1, r3
 8017840:	200e      	movs	r0, #14
 8017842:	f7f5 fca1 	bl	800d188 <pbuf_alloc>
 8017846:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017848:	697b      	ldr	r3, [r7, #20]
 801784a:	2b00      	cmp	r3, #0
 801784c:	f000 8090 	beq.w	8017970 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017850:	697b      	ldr	r3, [r7, #20]
 8017852:	895b      	ldrh	r3, [r3, #10]
 8017854:	461a      	mov	r2, r3
 8017856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017858:	3308      	adds	r3, #8
 801785a:	429a      	cmp	r2, r3
 801785c:	d203      	bcs.n	8017866 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801785e:	6978      	ldr	r0, [r7, #20]
 8017860:	f7f5 ff72 	bl	800d748 <pbuf_free>
          goto icmperr;
 8017864:	e085      	b.n	8017972 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017866:	697b      	ldr	r3, [r7, #20]
 8017868:	685b      	ldr	r3, [r3, #4]
 801786a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801786c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801786e:	4618      	mov	r0, r3
 8017870:	f001 fd48 	bl	8019304 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017874:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017876:	4619      	mov	r1, r3
 8017878:	6978      	ldr	r0, [r7, #20]
 801787a:	f7f5 fedf 	bl	800d63c <pbuf_remove_header>
 801787e:	4603      	mov	r3, r0
 8017880:	2b00      	cmp	r3, #0
 8017882:	d009      	beq.n	8017898 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017884:	4b40      	ldr	r3, [pc, #256]	; (8017988 <icmp_input+0x1f8>)
 8017886:	22b6      	movs	r2, #182	; 0xb6
 8017888:	4940      	ldr	r1, [pc, #256]	; (801798c <icmp_input+0x1fc>)
 801788a:	4841      	ldr	r0, [pc, #260]	; (8017990 <icmp_input+0x200>)
 801788c:	f001 fd4e 	bl	801932c <iprintf>
          pbuf_free(r);
 8017890:	6978      	ldr	r0, [r7, #20]
 8017892:	f7f5 ff59 	bl	800d748 <pbuf_free>
          goto icmperr;
 8017896:	e06c      	b.n	8017972 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017898:	6879      	ldr	r1, [r7, #4]
 801789a:	6978      	ldr	r0, [r7, #20]
 801789c:	f7f6 f888 	bl	800d9b0 <pbuf_copy>
 80178a0:	4603      	mov	r3, r0
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d003      	beq.n	80178ae <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80178a6:	6978      	ldr	r0, [r7, #20]
 80178a8:	f7f5 ff4e 	bl	800d748 <pbuf_free>
          goto icmperr;
 80178ac:	e061      	b.n	8017972 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80178ae:	6878      	ldr	r0, [r7, #4]
 80178b0:	f7f5 ff4a 	bl	800d748 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80178b4:	697b      	ldr	r3, [r7, #20]
 80178b6:	607b      	str	r3, [r7, #4]
 80178b8:	e00f      	b.n	80178da <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80178ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80178bc:	330e      	adds	r3, #14
 80178be:	4619      	mov	r1, r3
 80178c0:	6878      	ldr	r0, [r7, #4]
 80178c2:	f7f5 febb 	bl	800d63c <pbuf_remove_header>
 80178c6:	4603      	mov	r3, r0
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d006      	beq.n	80178da <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80178cc:	4b2e      	ldr	r3, [pc, #184]	; (8017988 <icmp_input+0x1f8>)
 80178ce:	22c7      	movs	r2, #199	; 0xc7
 80178d0:	4930      	ldr	r1, [pc, #192]	; (8017994 <icmp_input+0x204>)
 80178d2:	482f      	ldr	r0, [pc, #188]	; (8017990 <icmp_input+0x200>)
 80178d4:	f001 fd2a 	bl	801932c <iprintf>
          goto icmperr;
 80178d8:	e04b      	b.n	8017972 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	685b      	ldr	r3, [r3, #4]
 80178de:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80178e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80178e2:	4619      	mov	r1, r3
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f7f5 fe99 	bl	800d61c <pbuf_add_header>
 80178ea:	4603      	mov	r3, r0
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d12b      	bne.n	8017948 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	685b      	ldr	r3, [r3, #4]
 80178f4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80178f6:	69fb      	ldr	r3, [r7, #28]
 80178f8:	681a      	ldr	r2, [r3, #0]
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80178fe:	4b20      	ldr	r3, [pc, #128]	; (8017980 <icmp_input+0x1f0>)
 8017900:	691a      	ldr	r2, [r3, #16]
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017906:	693b      	ldr	r3, [r7, #16]
 8017908:	2200      	movs	r2, #0
 801790a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801790c:	693b      	ldr	r3, [r7, #16]
 801790e:	2200      	movs	r2, #0
 8017910:	709a      	strb	r2, [r3, #2]
 8017912:	2200      	movs	r2, #0
 8017914:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	22ff      	movs	r2, #255	; 0xff
 801791a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	2200      	movs	r2, #0
 8017920:	729a      	strb	r2, [r3, #10]
 8017922:	2200      	movs	r2, #0
 8017924:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017926:	683b      	ldr	r3, [r7, #0]
 8017928:	9302      	str	r3, [sp, #8]
 801792a:	2301      	movs	r3, #1
 801792c:	9301      	str	r3, [sp, #4]
 801792e:	2300      	movs	r3, #0
 8017930:	9300      	str	r3, [sp, #0]
 8017932:	23ff      	movs	r3, #255	; 0xff
 8017934:	2200      	movs	r2, #0
 8017936:	69f9      	ldr	r1, [r7, #28]
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	f000 fa91 	bl	8017e60 <ip4_output_if>
 801793e:	4603      	mov	r3, r0
 8017940:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017942:	e001      	b.n	8017948 <icmp_input+0x1b8>
      break;
 8017944:	bf00      	nop
 8017946:	e000      	b.n	801794a <icmp_input+0x1ba>
      break;
 8017948:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f7f5 fefc 	bl	800d748 <pbuf_free>
  return;
 8017950:	e013      	b.n	801797a <icmp_input+0x1ea>
    goto lenerr;
 8017952:	bf00      	nop
 8017954:	e002      	b.n	801795c <icmp_input+0x1cc>
    goto lenerr;
 8017956:	bf00      	nop
 8017958:	e000      	b.n	801795c <icmp_input+0x1cc>
        goto lenerr;
 801795a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801795c:	6878      	ldr	r0, [r7, #4]
 801795e:	f7f5 fef3 	bl	800d748 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017962:	e00a      	b.n	801797a <icmp_input+0x1ea>
        goto icmperr;
 8017964:	bf00      	nop
 8017966:	e004      	b.n	8017972 <icmp_input+0x1e2>
        goto icmperr;
 8017968:	bf00      	nop
 801796a:	e002      	b.n	8017972 <icmp_input+0x1e2>
          goto icmperr;
 801796c:	bf00      	nop
 801796e:	e000      	b.n	8017972 <icmp_input+0x1e2>
          goto icmperr;
 8017970:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017972:	6878      	ldr	r0, [r7, #4]
 8017974:	f7f5 fee8 	bl	800d748 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017978:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801797a:	3728      	adds	r7, #40	; 0x28
 801797c:	46bd      	mov	sp, r7
 801797e:	bd80      	pop	{r7, pc}
 8017980:	20007a00 	.word	0x20007a00
 8017984:	20007a14 	.word	0x20007a14
 8017988:	0801dc8c 	.word	0x0801dc8c
 801798c:	0801dcc4 	.word	0x0801dcc4
 8017990:	0801dcfc 	.word	0x0801dcfc
 8017994:	0801dd24 	.word	0x0801dd24

08017998 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b082      	sub	sp, #8
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
 80179a0:	460b      	mov	r3, r1
 80179a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80179a4:	78fb      	ldrb	r3, [r7, #3]
 80179a6:	461a      	mov	r2, r3
 80179a8:	2103      	movs	r1, #3
 80179aa:	6878      	ldr	r0, [r7, #4]
 80179ac:	f000 f814 	bl	80179d8 <icmp_send_response>
}
 80179b0:	bf00      	nop
 80179b2:	3708      	adds	r7, #8
 80179b4:	46bd      	mov	sp, r7
 80179b6:	bd80      	pop	{r7, pc}

080179b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b082      	sub	sp, #8
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
 80179c0:	460b      	mov	r3, r1
 80179c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80179c4:	78fb      	ldrb	r3, [r7, #3]
 80179c6:	461a      	mov	r2, r3
 80179c8:	210b      	movs	r1, #11
 80179ca:	6878      	ldr	r0, [r7, #4]
 80179cc:	f000 f804 	bl	80179d8 <icmp_send_response>
}
 80179d0:	bf00      	nop
 80179d2:	3708      	adds	r7, #8
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}

080179d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b08c      	sub	sp, #48	; 0x30
 80179dc:	af04      	add	r7, sp, #16
 80179de:	6078      	str	r0, [r7, #4]
 80179e0:	460b      	mov	r3, r1
 80179e2:	70fb      	strb	r3, [r7, #3]
 80179e4:	4613      	mov	r3, r2
 80179e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80179e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80179ec:	2124      	movs	r1, #36	; 0x24
 80179ee:	2022      	movs	r0, #34	; 0x22
 80179f0:	f7f5 fbca 	bl	800d188 <pbuf_alloc>
 80179f4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80179f6:	69fb      	ldr	r3, [r7, #28]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d04c      	beq.n	8017a96 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80179fc:	69fb      	ldr	r3, [r7, #28]
 80179fe:	895b      	ldrh	r3, [r3, #10]
 8017a00:	2b23      	cmp	r3, #35	; 0x23
 8017a02:	d806      	bhi.n	8017a12 <icmp_send_response+0x3a>
 8017a04:	4b26      	ldr	r3, [pc, #152]	; (8017aa0 <icmp_send_response+0xc8>)
 8017a06:	f240 1269 	movw	r2, #361	; 0x169
 8017a0a:	4926      	ldr	r1, [pc, #152]	; (8017aa4 <icmp_send_response+0xcc>)
 8017a0c:	4826      	ldr	r0, [pc, #152]	; (8017aa8 <icmp_send_response+0xd0>)
 8017a0e:	f001 fc8d 	bl	801932c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	685b      	ldr	r3, [r3, #4]
 8017a16:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017a18:	69fb      	ldr	r3, [r7, #28]
 8017a1a:	685b      	ldr	r3, [r3, #4]
 8017a1c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	78fa      	ldrb	r2, [r7, #3]
 8017a22:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	78ba      	ldrb	r2, [r7, #2]
 8017a28:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017a2a:	697b      	ldr	r3, [r7, #20]
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	711a      	strb	r2, [r3, #4]
 8017a30:	2200      	movs	r2, #0
 8017a32:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017a34:	697b      	ldr	r3, [r7, #20]
 8017a36:	2200      	movs	r2, #0
 8017a38:	719a      	strb	r2, [r3, #6]
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017a3e:	69fb      	ldr	r3, [r7, #28]
 8017a40:	685b      	ldr	r3, [r3, #4]
 8017a42:	f103 0008 	add.w	r0, r3, #8
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	685b      	ldr	r3, [r3, #4]
 8017a4a:	221c      	movs	r2, #28
 8017a4c:	4619      	mov	r1, r3
 8017a4e:	f001 fc59 	bl	8019304 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017a52:	69bb      	ldr	r3, [r7, #24]
 8017a54:	68db      	ldr	r3, [r3, #12]
 8017a56:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017a58:	f107 030c 	add.w	r3, r7, #12
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	f000 f825 	bl	8017aac <ip4_route>
 8017a62:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017a64:	693b      	ldr	r3, [r7, #16]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d011      	beq.n	8017a8e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017a6a:	697b      	ldr	r3, [r7, #20]
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	709a      	strb	r2, [r3, #2]
 8017a70:	2200      	movs	r2, #0
 8017a72:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017a74:	f107 020c 	add.w	r2, r7, #12
 8017a78:	693b      	ldr	r3, [r7, #16]
 8017a7a:	9302      	str	r3, [sp, #8]
 8017a7c:	2301      	movs	r3, #1
 8017a7e:	9301      	str	r3, [sp, #4]
 8017a80:	2300      	movs	r3, #0
 8017a82:	9300      	str	r3, [sp, #0]
 8017a84:	23ff      	movs	r3, #255	; 0xff
 8017a86:	2100      	movs	r1, #0
 8017a88:	69f8      	ldr	r0, [r7, #28]
 8017a8a:	f000 f9e9 	bl	8017e60 <ip4_output_if>
  }
  pbuf_free(q);
 8017a8e:	69f8      	ldr	r0, [r7, #28]
 8017a90:	f7f5 fe5a 	bl	800d748 <pbuf_free>
 8017a94:	e000      	b.n	8017a98 <icmp_send_response+0xc0>
    return;
 8017a96:	bf00      	nop
}
 8017a98:	3720      	adds	r7, #32
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	bd80      	pop	{r7, pc}
 8017a9e:	bf00      	nop
 8017aa0:	0801dc8c 	.word	0x0801dc8c
 8017aa4:	0801dd58 	.word	0x0801dd58
 8017aa8:	0801dcfc 	.word	0x0801dcfc

08017aac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017aac:	b480      	push	{r7}
 8017aae:	b085      	sub	sp, #20
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017ab4:	4b33      	ldr	r3, [pc, #204]	; (8017b84 <ip4_route+0xd8>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	60fb      	str	r3, [r7, #12]
 8017aba:	e036      	b.n	8017b2a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017ac2:	f003 0301 	and.w	r3, r3, #1
 8017ac6:	b2db      	uxtb	r3, r3
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d02b      	beq.n	8017b24 <ip4_route+0x78>
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017ad2:	089b      	lsrs	r3, r3, #2
 8017ad4:	f003 0301 	and.w	r3, r3, #1
 8017ad8:	b2db      	uxtb	r3, r3
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d022      	beq.n	8017b24 <ip4_route+0x78>
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	3304      	adds	r3, #4
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d01d      	beq.n	8017b24 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	681a      	ldr	r2, [r3, #0]
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	3304      	adds	r3, #4
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	405a      	eors	r2, r3
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	3308      	adds	r3, #8
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	4013      	ands	r3, r2
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d101      	bne.n	8017b04 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	e038      	b.n	8017b76 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b0a:	f003 0302 	and.w	r3, r3, #2
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d108      	bne.n	8017b24 <ip4_route+0x78>
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	681a      	ldr	r2, [r3, #0]
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	330c      	adds	r3, #12
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	429a      	cmp	r2, r3
 8017b1e:	d101      	bne.n	8017b24 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	e028      	b.n	8017b76 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	60fb      	str	r3, [r7, #12]
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d1c5      	bne.n	8017abc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017b30:	4b15      	ldr	r3, [pc, #84]	; (8017b88 <ip4_route+0xdc>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d01a      	beq.n	8017b6e <ip4_route+0xc2>
 8017b38:	4b13      	ldr	r3, [pc, #76]	; (8017b88 <ip4_route+0xdc>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b40:	f003 0301 	and.w	r3, r3, #1
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d012      	beq.n	8017b6e <ip4_route+0xc2>
 8017b48:	4b0f      	ldr	r3, [pc, #60]	; (8017b88 <ip4_route+0xdc>)
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b50:	f003 0304 	and.w	r3, r3, #4
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d00a      	beq.n	8017b6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017b58:	4b0b      	ldr	r3, [pc, #44]	; (8017b88 <ip4_route+0xdc>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	3304      	adds	r3, #4
 8017b5e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d004      	beq.n	8017b6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	b2db      	uxtb	r3, r3
 8017b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8017b6c:	d101      	bne.n	8017b72 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017b6e:	2300      	movs	r3, #0
 8017b70:	e001      	b.n	8017b76 <ip4_route+0xca>
  }

  return netif_default;
 8017b72:	4b05      	ldr	r3, [pc, #20]	; (8017b88 <ip4_route+0xdc>)
 8017b74:	681b      	ldr	r3, [r3, #0]
}
 8017b76:	4618      	mov	r0, r3
 8017b78:	3714      	adds	r7, #20
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b80:	4770      	bx	lr
 8017b82:	bf00      	nop
 8017b84:	2000b124 	.word	0x2000b124
 8017b88:	2000b128 	.word	0x2000b128

08017b8c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b082      	sub	sp, #8
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b9a:	f003 0301 	and.w	r3, r3, #1
 8017b9e:	b2db      	uxtb	r3, r3
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d016      	beq.n	8017bd2 <ip4_input_accept+0x46>
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	3304      	adds	r3, #4
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d011      	beq.n	8017bd2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017bae:	4b0b      	ldr	r3, [pc, #44]	; (8017bdc <ip4_input_accept+0x50>)
 8017bb0:	695a      	ldr	r2, [r3, #20]
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	3304      	adds	r3, #4
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	d008      	beq.n	8017bce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017bbc:	4b07      	ldr	r3, [pc, #28]	; (8017bdc <ip4_input_accept+0x50>)
 8017bbe:	695b      	ldr	r3, [r3, #20]
 8017bc0:	6879      	ldr	r1, [r7, #4]
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f000 fa24 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8017bc8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d001      	beq.n	8017bd2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017bce:	2301      	movs	r3, #1
 8017bd0:	e000      	b.n	8017bd4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017bd2:	2300      	movs	r3, #0
}
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	3708      	adds	r7, #8
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}
 8017bdc:	20007a00 	.word	0x20007a00

08017be0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b088      	sub	sp, #32
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
 8017be8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017bea:	2301      	movs	r3, #1
 8017bec:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	685b      	ldr	r3, [r3, #4]
 8017bf2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017bf4:	69fb      	ldr	r3, [r7, #28]
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	091b      	lsrs	r3, r3, #4
 8017bfa:	b2db      	uxtb	r3, r3
 8017bfc:	2b04      	cmp	r3, #4
 8017bfe:	d004      	beq.n	8017c0a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017c00:	6878      	ldr	r0, [r7, #4]
 8017c02:	f7f5 fda1 	bl	800d748 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017c06:	2300      	movs	r3, #0
 8017c08:	e121      	b.n	8017e4e <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017c0a:	69fb      	ldr	r3, [r7, #28]
 8017c0c:	781b      	ldrb	r3, [r3, #0]
 8017c0e:	f003 030f 	and.w	r3, r3, #15
 8017c12:	b2db      	uxtb	r3, r3
 8017c14:	009b      	lsls	r3, r3, #2
 8017c16:	b2db      	uxtb	r3, r3
 8017c18:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017c1a:	69fb      	ldr	r3, [r7, #28]
 8017c1c:	885b      	ldrh	r3, [r3, #2]
 8017c1e:	b29b      	uxth	r3, r3
 8017c20:	4618      	mov	r0, r3
 8017c22:	f7f4 f9a5 	bl	800bf70 <lwip_htons>
 8017c26:	4603      	mov	r3, r0
 8017c28:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	891b      	ldrh	r3, [r3, #8]
 8017c2e:	8a3a      	ldrh	r2, [r7, #16]
 8017c30:	429a      	cmp	r2, r3
 8017c32:	d204      	bcs.n	8017c3e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017c34:	8a3b      	ldrh	r3, [r7, #16]
 8017c36:	4619      	mov	r1, r3
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	f7f5 fbff 	bl	800d43c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	895b      	ldrh	r3, [r3, #10]
 8017c42:	8a7a      	ldrh	r2, [r7, #18]
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d807      	bhi.n	8017c58 <ip4_input+0x78>
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	891b      	ldrh	r3, [r3, #8]
 8017c4c:	8a3a      	ldrh	r2, [r7, #16]
 8017c4e:	429a      	cmp	r2, r3
 8017c50:	d802      	bhi.n	8017c58 <ip4_input+0x78>
 8017c52:	8a7b      	ldrh	r3, [r7, #18]
 8017c54:	2b13      	cmp	r3, #19
 8017c56:	d804      	bhi.n	8017c62 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017c58:	6878      	ldr	r0, [r7, #4]
 8017c5a:	f7f5 fd75 	bl	800d748 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017c5e:	2300      	movs	r3, #0
 8017c60:	e0f5      	b.n	8017e4e <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017c62:	69fb      	ldr	r3, [r7, #28]
 8017c64:	691b      	ldr	r3, [r3, #16]
 8017c66:	4a7c      	ldr	r2, [pc, #496]	; (8017e58 <ip4_input+0x278>)
 8017c68:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017c6a:	69fb      	ldr	r3, [r7, #28]
 8017c6c:	68db      	ldr	r3, [r3, #12]
 8017c6e:	4a7a      	ldr	r2, [pc, #488]	; (8017e58 <ip4_input+0x278>)
 8017c70:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017c72:	4b79      	ldr	r3, [pc, #484]	; (8017e58 <ip4_input+0x278>)
 8017c74:	695b      	ldr	r3, [r3, #20]
 8017c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017c7a:	2be0      	cmp	r3, #224	; 0xe0
 8017c7c:	d112      	bne.n	8017ca4 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017c7e:	683b      	ldr	r3, [r7, #0]
 8017c80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017c84:	f003 0301 	and.w	r3, r3, #1
 8017c88:	b2db      	uxtb	r3, r3
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d007      	beq.n	8017c9e <ip4_input+0xbe>
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	3304      	adds	r3, #4
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d002      	beq.n	8017c9e <ip4_input+0xbe>
      netif = inp;
 8017c98:	683b      	ldr	r3, [r7, #0]
 8017c9a:	61bb      	str	r3, [r7, #24]
 8017c9c:	e02a      	b.n	8017cf4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	61bb      	str	r3, [r7, #24]
 8017ca2:	e027      	b.n	8017cf4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017ca4:	6838      	ldr	r0, [r7, #0]
 8017ca6:	f7ff ff71 	bl	8017b8c <ip4_input_accept>
 8017caa:	4603      	mov	r3, r0
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d002      	beq.n	8017cb6 <ip4_input+0xd6>
      netif = inp;
 8017cb0:	683b      	ldr	r3, [r7, #0]
 8017cb2:	61bb      	str	r3, [r7, #24]
 8017cb4:	e01e      	b.n	8017cf4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017cba:	4b67      	ldr	r3, [pc, #412]	; (8017e58 <ip4_input+0x278>)
 8017cbc:	695b      	ldr	r3, [r3, #20]
 8017cbe:	b2db      	uxtb	r3, r3
 8017cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8017cc2:	d017      	beq.n	8017cf4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017cc4:	4b65      	ldr	r3, [pc, #404]	; (8017e5c <ip4_input+0x27c>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	61bb      	str	r3, [r7, #24]
 8017cca:	e00e      	b.n	8017cea <ip4_input+0x10a>
          if (netif == inp) {
 8017ccc:	69ba      	ldr	r2, [r7, #24]
 8017cce:	683b      	ldr	r3, [r7, #0]
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d006      	beq.n	8017ce2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017cd4:	69b8      	ldr	r0, [r7, #24]
 8017cd6:	f7ff ff59 	bl	8017b8c <ip4_input_accept>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d108      	bne.n	8017cf2 <ip4_input+0x112>
 8017ce0:	e000      	b.n	8017ce4 <ip4_input+0x104>
            continue;
 8017ce2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017ce4:	69bb      	ldr	r3, [r7, #24]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	61bb      	str	r3, [r7, #24]
 8017cea:	69bb      	ldr	r3, [r7, #24]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d1ed      	bne.n	8017ccc <ip4_input+0xec>
 8017cf0:	e000      	b.n	8017cf4 <ip4_input+0x114>
            break;
 8017cf2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017cf4:	69bb      	ldr	r3, [r7, #24]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d111      	bne.n	8017d1e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017cfa:	69fb      	ldr	r3, [r7, #28]
 8017cfc:	7a5b      	ldrb	r3, [r3, #9]
 8017cfe:	2b11      	cmp	r3, #17
 8017d00:	d10d      	bne.n	8017d1e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017d02:	8a7b      	ldrh	r3, [r7, #18]
 8017d04:	69fa      	ldr	r2, [r7, #28]
 8017d06:	4413      	add	r3, r2
 8017d08:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	885b      	ldrh	r3, [r3, #2]
 8017d0e:	b29b      	uxth	r3, r3
 8017d10:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017d14:	d103      	bne.n	8017d1e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017d1e:	697b      	ldr	r3, [r7, #20]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d017      	beq.n	8017d54 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017d24:	4b4c      	ldr	r3, [pc, #304]	; (8017e58 <ip4_input+0x278>)
 8017d26:	691b      	ldr	r3, [r3, #16]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d013      	beq.n	8017d54 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017d2c:	4b4a      	ldr	r3, [pc, #296]	; (8017e58 <ip4_input+0x278>)
 8017d2e:	691b      	ldr	r3, [r3, #16]
 8017d30:	6839      	ldr	r1, [r7, #0]
 8017d32:	4618      	mov	r0, r3
 8017d34:	f000 f96c 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d105      	bne.n	8017d4a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017d3e:	4b46      	ldr	r3, [pc, #280]	; (8017e58 <ip4_input+0x278>)
 8017d40:	691b      	ldr	r3, [r3, #16]
 8017d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017d46:	2be0      	cmp	r3, #224	; 0xe0
 8017d48:	d104      	bne.n	8017d54 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017d4a:	6878      	ldr	r0, [r7, #4]
 8017d4c:	f7f5 fcfc 	bl	800d748 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017d50:	2300      	movs	r3, #0
 8017d52:	e07c      	b.n	8017e4e <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017d54:	69bb      	ldr	r3, [r7, #24]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d104      	bne.n	8017d64 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f7f5 fcf4 	bl	800d748 <pbuf_free>
    return ERR_OK;
 8017d60:	2300      	movs	r3, #0
 8017d62:	e074      	b.n	8017e4e <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017d64:	69fb      	ldr	r3, [r7, #28]
 8017d66:	88db      	ldrh	r3, [r3, #6]
 8017d68:	b29b      	uxth	r3, r3
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017d70:	4013      	ands	r3, r2
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d00b      	beq.n	8017d8e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017d76:	6878      	ldr	r0, [r7, #4]
 8017d78:	f000 fc90 	bl	801869c <ip4_reass>
 8017d7c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d101      	bne.n	8017d88 <ip4_input+0x1a8>
      return ERR_OK;
 8017d84:	2300      	movs	r3, #0
 8017d86:	e062      	b.n	8017e4e <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	685b      	ldr	r3, [r3, #4]
 8017d8c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017d8e:	4a32      	ldr	r2, [pc, #200]	; (8017e58 <ip4_input+0x278>)
 8017d90:	69bb      	ldr	r3, [r7, #24]
 8017d92:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017d94:	4a30      	ldr	r2, [pc, #192]	; (8017e58 <ip4_input+0x278>)
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017d9a:	4a2f      	ldr	r2, [pc, #188]	; (8017e58 <ip4_input+0x278>)
 8017d9c:	69fb      	ldr	r3, [r7, #28]
 8017d9e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017da0:	69fb      	ldr	r3, [r7, #28]
 8017da2:	781b      	ldrb	r3, [r3, #0]
 8017da4:	f003 030f 	and.w	r3, r3, #15
 8017da8:	b2db      	uxtb	r3, r3
 8017daa:	009b      	lsls	r3, r3, #2
 8017dac:	b2db      	uxtb	r3, r3
 8017dae:	b29a      	uxth	r2, r3
 8017db0:	4b29      	ldr	r3, [pc, #164]	; (8017e58 <ip4_input+0x278>)
 8017db2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017db4:	8a7b      	ldrh	r3, [r7, #18]
 8017db6:	4619      	mov	r1, r3
 8017db8:	6878      	ldr	r0, [r7, #4]
 8017dba:	f7f5 fc3f 	bl	800d63c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017dbe:	69fb      	ldr	r3, [r7, #28]
 8017dc0:	7a5b      	ldrb	r3, [r3, #9]
 8017dc2:	2b06      	cmp	r3, #6
 8017dc4:	d009      	beq.n	8017dda <ip4_input+0x1fa>
 8017dc6:	2b11      	cmp	r3, #17
 8017dc8:	d002      	beq.n	8017dd0 <ip4_input+0x1f0>
 8017dca:	2b01      	cmp	r3, #1
 8017dcc:	d00a      	beq.n	8017de4 <ip4_input+0x204>
 8017dce:	e00e      	b.n	8017dee <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017dd0:	6839      	ldr	r1, [r7, #0]
 8017dd2:	6878      	ldr	r0, [r7, #4]
 8017dd4:	f7fc fa26 	bl	8014224 <udp_input>
        break;
 8017dd8:	e026      	b.n	8017e28 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017dda:	6839      	ldr	r1, [r7, #0]
 8017ddc:	6878      	ldr	r0, [r7, #4]
 8017dde:	f7f7 fdd5 	bl	800f98c <tcp_input>
        break;
 8017de2:	e021      	b.n	8017e28 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017de4:	6839      	ldr	r1, [r7, #0]
 8017de6:	6878      	ldr	r0, [r7, #4]
 8017de8:	f7ff fcd2 	bl	8017790 <icmp_input>
        break;
 8017dec:	e01c      	b.n	8017e28 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017dee:	4b1a      	ldr	r3, [pc, #104]	; (8017e58 <ip4_input+0x278>)
 8017df0:	695b      	ldr	r3, [r3, #20]
 8017df2:	69b9      	ldr	r1, [r7, #24]
 8017df4:	4618      	mov	r0, r3
 8017df6:	f000 f90b 	bl	8018010 <ip4_addr_isbroadcast_u32>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d10f      	bne.n	8017e20 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017e00:	4b15      	ldr	r3, [pc, #84]	; (8017e58 <ip4_input+0x278>)
 8017e02:	695b      	ldr	r3, [r3, #20]
 8017e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017e08:	2be0      	cmp	r3, #224	; 0xe0
 8017e0a:	d009      	beq.n	8017e20 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017e0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017e10:	4619      	mov	r1, r3
 8017e12:	6878      	ldr	r0, [r7, #4]
 8017e14:	f7f5 fc85 	bl	800d722 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017e18:	2102      	movs	r1, #2
 8017e1a:	6878      	ldr	r0, [r7, #4]
 8017e1c:	f7ff fdbc 	bl	8017998 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017e20:	6878      	ldr	r0, [r7, #4]
 8017e22:	f7f5 fc91 	bl	800d748 <pbuf_free>
        break;
 8017e26:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017e28:	4b0b      	ldr	r3, [pc, #44]	; (8017e58 <ip4_input+0x278>)
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017e2e:	4b0a      	ldr	r3, [pc, #40]	; (8017e58 <ip4_input+0x278>)
 8017e30:	2200      	movs	r2, #0
 8017e32:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017e34:	4b08      	ldr	r3, [pc, #32]	; (8017e58 <ip4_input+0x278>)
 8017e36:	2200      	movs	r2, #0
 8017e38:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017e3a:	4b07      	ldr	r3, [pc, #28]	; (8017e58 <ip4_input+0x278>)
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017e40:	4b05      	ldr	r3, [pc, #20]	; (8017e58 <ip4_input+0x278>)
 8017e42:	2200      	movs	r2, #0
 8017e44:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017e46:	4b04      	ldr	r3, [pc, #16]	; (8017e58 <ip4_input+0x278>)
 8017e48:	2200      	movs	r2, #0
 8017e4a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017e4c:	2300      	movs	r3, #0
}
 8017e4e:	4618      	mov	r0, r3
 8017e50:	3720      	adds	r7, #32
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	20007a00 	.word	0x20007a00
 8017e5c:	2000b124 	.word	0x2000b124

08017e60 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b08a      	sub	sp, #40	; 0x28
 8017e64:	af04      	add	r7, sp, #16
 8017e66:	60f8      	str	r0, [r7, #12]
 8017e68:	60b9      	str	r1, [r7, #8]
 8017e6a:	607a      	str	r2, [r7, #4]
 8017e6c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017e6e:	68bb      	ldr	r3, [r7, #8]
 8017e70:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d009      	beq.n	8017e8c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017e78:	68bb      	ldr	r3, [r7, #8]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d003      	beq.n	8017e86 <ip4_output_if+0x26>
 8017e7e:	68bb      	ldr	r3, [r7, #8]
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d102      	bne.n	8017e8c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e88:	3304      	adds	r3, #4
 8017e8a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017e8c:	78fa      	ldrb	r2, [r7, #3]
 8017e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e90:	9302      	str	r3, [sp, #8]
 8017e92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017e96:	9301      	str	r3, [sp, #4]
 8017e98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017e9c:	9300      	str	r3, [sp, #0]
 8017e9e:	4613      	mov	r3, r2
 8017ea0:	687a      	ldr	r2, [r7, #4]
 8017ea2:	6979      	ldr	r1, [r7, #20]
 8017ea4:	68f8      	ldr	r0, [r7, #12]
 8017ea6:	f000 f805 	bl	8017eb4 <ip4_output_if_src>
 8017eaa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017eac:	4618      	mov	r0, r3
 8017eae:	3718      	adds	r7, #24
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	bd80      	pop	{r7, pc}

08017eb4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b088      	sub	sp, #32
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	60f8      	str	r0, [r7, #12]
 8017ebc:	60b9      	str	r1, [r7, #8]
 8017ebe:	607a      	str	r2, [r7, #4]
 8017ec0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	7b9b      	ldrb	r3, [r3, #14]
 8017ec6:	2b01      	cmp	r3, #1
 8017ec8:	d006      	beq.n	8017ed8 <ip4_output_if_src+0x24>
 8017eca:	4b4b      	ldr	r3, [pc, #300]	; (8017ff8 <ip4_output_if_src+0x144>)
 8017ecc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017ed0:	494a      	ldr	r1, [pc, #296]	; (8017ffc <ip4_output_if_src+0x148>)
 8017ed2:	484b      	ldr	r0, [pc, #300]	; (8018000 <ip4_output_if_src+0x14c>)
 8017ed4:	f001 fa2a 	bl	801932c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d060      	beq.n	8017fa0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017ede:	2314      	movs	r3, #20
 8017ee0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017ee2:	2114      	movs	r1, #20
 8017ee4:	68f8      	ldr	r0, [r7, #12]
 8017ee6:	f7f5 fb99 	bl	800d61c <pbuf_add_header>
 8017eea:	4603      	mov	r3, r0
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d002      	beq.n	8017ef6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017ef0:	f06f 0301 	mvn.w	r3, #1
 8017ef4:	e07c      	b.n	8017ff0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	685b      	ldr	r3, [r3, #4]
 8017efa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	895b      	ldrh	r3, [r3, #10]
 8017f00:	2b13      	cmp	r3, #19
 8017f02:	d806      	bhi.n	8017f12 <ip4_output_if_src+0x5e>
 8017f04:	4b3c      	ldr	r3, [pc, #240]	; (8017ff8 <ip4_output_if_src+0x144>)
 8017f06:	f240 3289 	movw	r2, #905	; 0x389
 8017f0a:	493e      	ldr	r1, [pc, #248]	; (8018004 <ip4_output_if_src+0x150>)
 8017f0c:	483c      	ldr	r0, [pc, #240]	; (8018000 <ip4_output_if_src+0x14c>)
 8017f0e:	f001 fa0d 	bl	801932c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017f12:	69fb      	ldr	r3, [r7, #28]
 8017f14:	78fa      	ldrb	r2, [r7, #3]
 8017f16:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017f18:	69fb      	ldr	r3, [r7, #28]
 8017f1a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017f1e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	681a      	ldr	r2, [r3, #0]
 8017f24:	69fb      	ldr	r3, [r7, #28]
 8017f26:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017f28:	8b7b      	ldrh	r3, [r7, #26]
 8017f2a:	089b      	lsrs	r3, r3, #2
 8017f2c:	b29b      	uxth	r3, r3
 8017f2e:	b2db      	uxtb	r3, r3
 8017f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f34:	b2da      	uxtb	r2, r3
 8017f36:	69fb      	ldr	r3, [r7, #28]
 8017f38:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017f3a:	69fb      	ldr	r3, [r7, #28]
 8017f3c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017f40:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	891b      	ldrh	r3, [r3, #8]
 8017f46:	4618      	mov	r0, r3
 8017f48:	f7f4 f812 	bl	800bf70 <lwip_htons>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	461a      	mov	r2, r3
 8017f50:	69fb      	ldr	r3, [r7, #28]
 8017f52:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017f54:	69fb      	ldr	r3, [r7, #28]
 8017f56:	2200      	movs	r2, #0
 8017f58:	719a      	strb	r2, [r3, #6]
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017f5e:	4b2a      	ldr	r3, [pc, #168]	; (8018008 <ip4_output_if_src+0x154>)
 8017f60:	881b      	ldrh	r3, [r3, #0]
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7f4 f804 	bl	800bf70 <lwip_htons>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	461a      	mov	r2, r3
 8017f6c:	69fb      	ldr	r3, [r7, #28]
 8017f6e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017f70:	4b25      	ldr	r3, [pc, #148]	; (8018008 <ip4_output_if_src+0x154>)
 8017f72:	881b      	ldrh	r3, [r3, #0]
 8017f74:	3301      	adds	r3, #1
 8017f76:	b29a      	uxth	r2, r3
 8017f78:	4b23      	ldr	r3, [pc, #140]	; (8018008 <ip4_output_if_src+0x154>)
 8017f7a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d104      	bne.n	8017f8c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017f82:	4b22      	ldr	r3, [pc, #136]	; (801800c <ip4_output_if_src+0x158>)
 8017f84:	681a      	ldr	r2, [r3, #0]
 8017f86:	69fb      	ldr	r3, [r7, #28]
 8017f88:	60da      	str	r2, [r3, #12]
 8017f8a:	e003      	b.n	8017f94 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017f8c:	68bb      	ldr	r3, [r7, #8]
 8017f8e:	681a      	ldr	r2, [r3, #0]
 8017f90:	69fb      	ldr	r3, [r7, #28]
 8017f92:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017f94:	69fb      	ldr	r3, [r7, #28]
 8017f96:	2200      	movs	r2, #0
 8017f98:	729a      	strb	r2, [r3, #10]
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	72da      	strb	r2, [r3, #11]
 8017f9e:	e00f      	b.n	8017fc0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	895b      	ldrh	r3, [r3, #10]
 8017fa4:	2b13      	cmp	r3, #19
 8017fa6:	d802      	bhi.n	8017fae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017fa8:	f06f 0301 	mvn.w	r3, #1
 8017fac:	e020      	b.n	8017ff0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	685b      	ldr	r3, [r3, #4]
 8017fb2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017fb4:	69fb      	ldr	r3, [r7, #28]
 8017fb6:	691b      	ldr	r3, [r3, #16]
 8017fb8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017fba:	f107 0314 	add.w	r3, r7, #20
 8017fbe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d00c      	beq.n	8017fe2 <ip4_output_if_src+0x12e>
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	891a      	ldrh	r2, [r3, #8]
 8017fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	d906      	bls.n	8017fe2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017fd4:	687a      	ldr	r2, [r7, #4]
 8017fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017fd8:	68f8      	ldr	r0, [r7, #12]
 8017fda:	f000 fd4b 	bl	8018a74 <ip4_frag>
 8017fde:	4603      	mov	r3, r0
 8017fe0:	e006      	b.n	8017ff0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fe4:	695b      	ldr	r3, [r3, #20]
 8017fe6:	687a      	ldr	r2, [r7, #4]
 8017fe8:	68f9      	ldr	r1, [r7, #12]
 8017fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fec:	4798      	blx	r3
 8017fee:	4603      	mov	r3, r0
}
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	3720      	adds	r7, #32
 8017ff4:	46bd      	mov	sp, r7
 8017ff6:	bd80      	pop	{r7, pc}
 8017ff8:	0801dd84 	.word	0x0801dd84
 8017ffc:	0801ddb8 	.word	0x0801ddb8
 8018000:	0801ddc4 	.word	0x0801ddc4
 8018004:	0801ddec 	.word	0x0801ddec
 8018008:	2000438e 	.word	0x2000438e
 801800c:	0801e258 	.word	0x0801e258

08018010 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018010:	b480      	push	{r7}
 8018012:	b085      	sub	sp, #20
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
 8018018:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018024:	d002      	beq.n	801802c <ip4_addr_isbroadcast_u32+0x1c>
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d101      	bne.n	8018030 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801802c:	2301      	movs	r3, #1
 801802e:	e02a      	b.n	8018086 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018030:	683b      	ldr	r3, [r7, #0]
 8018032:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018036:	f003 0302 	and.w	r3, r3, #2
 801803a:	2b00      	cmp	r3, #0
 801803c:	d101      	bne.n	8018042 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801803e:	2300      	movs	r3, #0
 8018040:	e021      	b.n	8018086 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018042:	683b      	ldr	r3, [r7, #0]
 8018044:	3304      	adds	r3, #4
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	687a      	ldr	r2, [r7, #4]
 801804a:	429a      	cmp	r2, r3
 801804c:	d101      	bne.n	8018052 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801804e:	2300      	movs	r3, #0
 8018050:	e019      	b.n	8018086 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018052:	68fa      	ldr	r2, [r7, #12]
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	3304      	adds	r3, #4
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	405a      	eors	r2, r3
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	3308      	adds	r3, #8
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	4013      	ands	r3, r2
 8018064:	2b00      	cmp	r3, #0
 8018066:	d10d      	bne.n	8018084 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018068:	683b      	ldr	r3, [r7, #0]
 801806a:	3308      	adds	r3, #8
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	43da      	mvns	r2, r3
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018074:	683b      	ldr	r3, [r7, #0]
 8018076:	3308      	adds	r3, #8
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801807c:	429a      	cmp	r2, r3
 801807e:	d101      	bne.n	8018084 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018080:	2301      	movs	r3, #1
 8018082:	e000      	b.n	8018086 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018084:	2300      	movs	r3, #0
  }
}
 8018086:	4618      	mov	r0, r3
 8018088:	3714      	adds	r7, #20
 801808a:	46bd      	mov	sp, r7
 801808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018090:	4770      	bx	lr
	...

08018094 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b084      	sub	sp, #16
 8018098:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801809a:	2300      	movs	r3, #0
 801809c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801809e:	4b12      	ldr	r3, [pc, #72]	; (80180e8 <ip_reass_tmr+0x54>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80180a4:	e018      	b.n	80180d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	7fdb      	ldrb	r3, [r3, #31]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d00b      	beq.n	80180c6 <ip_reass_tmr+0x32>
      r->timer--;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	7fdb      	ldrb	r3, [r3, #31]
 80180b2:	3b01      	subs	r3, #1
 80180b4:	b2da      	uxtb	r2, r3
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	60fb      	str	r3, [r7, #12]
 80180c4:	e008      	b.n	80180d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80180d0:	68b9      	ldr	r1, [r7, #8]
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f000 f80a 	bl	80180ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d1e3      	bne.n	80180a6 <ip_reass_tmr+0x12>
    }
  }
}
 80180de:	bf00      	nop
 80180e0:	3710      	adds	r7, #16
 80180e2:	46bd      	mov	sp, r7
 80180e4:	bd80      	pop	{r7, pc}
 80180e6:	bf00      	nop
 80180e8:	20004390 	.word	0x20004390

080180ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b088      	sub	sp, #32
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80180f6:	2300      	movs	r3, #0
 80180f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80180fa:	683a      	ldr	r2, [r7, #0]
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	429a      	cmp	r2, r3
 8018100:	d105      	bne.n	801810e <ip_reass_free_complete_datagram+0x22>
 8018102:	4b45      	ldr	r3, [pc, #276]	; (8018218 <ip_reass_free_complete_datagram+0x12c>)
 8018104:	22ab      	movs	r2, #171	; 0xab
 8018106:	4945      	ldr	r1, [pc, #276]	; (801821c <ip_reass_free_complete_datagram+0x130>)
 8018108:	4845      	ldr	r0, [pc, #276]	; (8018220 <ip_reass_free_complete_datagram+0x134>)
 801810a:	f001 f90f 	bl	801932c <iprintf>
  if (prev != NULL) {
 801810e:	683b      	ldr	r3, [r7, #0]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d00a      	beq.n	801812a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018114:	683b      	ldr	r3, [r7, #0]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	687a      	ldr	r2, [r7, #4]
 801811a:	429a      	cmp	r2, r3
 801811c:	d005      	beq.n	801812a <ip_reass_free_complete_datagram+0x3e>
 801811e:	4b3e      	ldr	r3, [pc, #248]	; (8018218 <ip_reass_free_complete_datagram+0x12c>)
 8018120:	22ad      	movs	r2, #173	; 0xad
 8018122:	4940      	ldr	r1, [pc, #256]	; (8018224 <ip_reass_free_complete_datagram+0x138>)
 8018124:	483e      	ldr	r0, [pc, #248]	; (8018220 <ip_reass_free_complete_datagram+0x134>)
 8018126:	f001 f901 	bl	801932c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	685b      	ldr	r3, [r3, #4]
 801812e:	685b      	ldr	r3, [r3, #4]
 8018130:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018132:	697b      	ldr	r3, [r7, #20]
 8018134:	889b      	ldrh	r3, [r3, #4]
 8018136:	b29b      	uxth	r3, r3
 8018138:	2b00      	cmp	r3, #0
 801813a:	d12a      	bne.n	8018192 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	685b      	ldr	r3, [r3, #4]
 8018140:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018142:	697b      	ldr	r3, [r7, #20]
 8018144:	681a      	ldr	r2, [r3, #0]
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801814a:	69bb      	ldr	r3, [r7, #24]
 801814c:	6858      	ldr	r0, [r3, #4]
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	3308      	adds	r3, #8
 8018152:	2214      	movs	r2, #20
 8018154:	4619      	mov	r1, r3
 8018156:	f001 f8d5 	bl	8019304 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801815a:	2101      	movs	r1, #1
 801815c:	69b8      	ldr	r0, [r7, #24]
 801815e:	f7ff fc2b 	bl	80179b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018162:	69b8      	ldr	r0, [r7, #24]
 8018164:	f7f5 fb7e 	bl	800d864 <pbuf_clen>
 8018168:	4603      	mov	r3, r0
 801816a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801816c:	8bfa      	ldrh	r2, [r7, #30]
 801816e:	8a7b      	ldrh	r3, [r7, #18]
 8018170:	4413      	add	r3, r2
 8018172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018176:	db05      	blt.n	8018184 <ip_reass_free_complete_datagram+0x98>
 8018178:	4b27      	ldr	r3, [pc, #156]	; (8018218 <ip_reass_free_complete_datagram+0x12c>)
 801817a:	22bc      	movs	r2, #188	; 0xbc
 801817c:	492a      	ldr	r1, [pc, #168]	; (8018228 <ip_reass_free_complete_datagram+0x13c>)
 801817e:	4828      	ldr	r0, [pc, #160]	; (8018220 <ip_reass_free_complete_datagram+0x134>)
 8018180:	f001 f8d4 	bl	801932c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018184:	8bfa      	ldrh	r2, [r7, #30]
 8018186:	8a7b      	ldrh	r3, [r7, #18]
 8018188:	4413      	add	r3, r2
 801818a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801818c:	69b8      	ldr	r0, [r7, #24]
 801818e:	f7f5 fadb 	bl	800d748 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	685b      	ldr	r3, [r3, #4]
 8018196:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018198:	e01f      	b.n	80181da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801819a:	69bb      	ldr	r3, [r7, #24]
 801819c:	685b      	ldr	r3, [r3, #4]
 801819e:	617b      	str	r3, [r7, #20]
    pcur = p;
 80181a0:	69bb      	ldr	r3, [r7, #24]
 80181a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80181a4:	697b      	ldr	r3, [r7, #20]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80181aa:	68f8      	ldr	r0, [r7, #12]
 80181ac:	f7f5 fb5a 	bl	800d864 <pbuf_clen>
 80181b0:	4603      	mov	r3, r0
 80181b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80181b4:	8bfa      	ldrh	r2, [r7, #30]
 80181b6:	8a7b      	ldrh	r3, [r7, #18]
 80181b8:	4413      	add	r3, r2
 80181ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80181be:	db05      	blt.n	80181cc <ip_reass_free_complete_datagram+0xe0>
 80181c0:	4b15      	ldr	r3, [pc, #84]	; (8018218 <ip_reass_free_complete_datagram+0x12c>)
 80181c2:	22cc      	movs	r2, #204	; 0xcc
 80181c4:	4918      	ldr	r1, [pc, #96]	; (8018228 <ip_reass_free_complete_datagram+0x13c>)
 80181c6:	4816      	ldr	r0, [pc, #88]	; (8018220 <ip_reass_free_complete_datagram+0x134>)
 80181c8:	f001 f8b0 	bl	801932c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80181cc:	8bfa      	ldrh	r2, [r7, #30]
 80181ce:	8a7b      	ldrh	r3, [r7, #18]
 80181d0:	4413      	add	r3, r2
 80181d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80181d4:	68f8      	ldr	r0, [r7, #12]
 80181d6:	f7f5 fab7 	bl	800d748 <pbuf_free>
  while (p != NULL) {
 80181da:	69bb      	ldr	r3, [r7, #24]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d1dc      	bne.n	801819a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80181e0:	6839      	ldr	r1, [r7, #0]
 80181e2:	6878      	ldr	r0, [r7, #4]
 80181e4:	f000 f8c2 	bl	801836c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80181e8:	4b10      	ldr	r3, [pc, #64]	; (801822c <ip_reass_free_complete_datagram+0x140>)
 80181ea:	881b      	ldrh	r3, [r3, #0]
 80181ec:	8bfa      	ldrh	r2, [r7, #30]
 80181ee:	429a      	cmp	r2, r3
 80181f0:	d905      	bls.n	80181fe <ip_reass_free_complete_datagram+0x112>
 80181f2:	4b09      	ldr	r3, [pc, #36]	; (8018218 <ip_reass_free_complete_datagram+0x12c>)
 80181f4:	22d2      	movs	r2, #210	; 0xd2
 80181f6:	490e      	ldr	r1, [pc, #56]	; (8018230 <ip_reass_free_complete_datagram+0x144>)
 80181f8:	4809      	ldr	r0, [pc, #36]	; (8018220 <ip_reass_free_complete_datagram+0x134>)
 80181fa:	f001 f897 	bl	801932c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80181fe:	4b0b      	ldr	r3, [pc, #44]	; (801822c <ip_reass_free_complete_datagram+0x140>)
 8018200:	881a      	ldrh	r2, [r3, #0]
 8018202:	8bfb      	ldrh	r3, [r7, #30]
 8018204:	1ad3      	subs	r3, r2, r3
 8018206:	b29a      	uxth	r2, r3
 8018208:	4b08      	ldr	r3, [pc, #32]	; (801822c <ip_reass_free_complete_datagram+0x140>)
 801820a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801820c:	8bfb      	ldrh	r3, [r7, #30]
}
 801820e:	4618      	mov	r0, r3
 8018210:	3720      	adds	r7, #32
 8018212:	46bd      	mov	sp, r7
 8018214:	bd80      	pop	{r7, pc}
 8018216:	bf00      	nop
 8018218:	0801de1c 	.word	0x0801de1c
 801821c:	0801de58 	.word	0x0801de58
 8018220:	0801de64 	.word	0x0801de64
 8018224:	0801de8c 	.word	0x0801de8c
 8018228:	0801dea0 	.word	0x0801dea0
 801822c:	20004394 	.word	0x20004394
 8018230:	0801dec0 	.word	0x0801dec0

08018234 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b08a      	sub	sp, #40	; 0x28
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
 801823c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801823e:	2300      	movs	r3, #0
 8018240:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018242:	2300      	movs	r3, #0
 8018244:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018246:	2300      	movs	r3, #0
 8018248:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801824a:	2300      	movs	r3, #0
 801824c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801824e:	2300      	movs	r3, #0
 8018250:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018252:	4b28      	ldr	r3, [pc, #160]	; (80182f4 <ip_reass_remove_oldest_datagram+0xc0>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018258:	e030      	b.n	80182bc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801825c:	695a      	ldr	r2, [r3, #20]
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	68db      	ldr	r3, [r3, #12]
 8018262:	429a      	cmp	r2, r3
 8018264:	d10c      	bne.n	8018280 <ip_reass_remove_oldest_datagram+0x4c>
 8018266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018268:	699a      	ldr	r2, [r3, #24]
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	691b      	ldr	r3, [r3, #16]
 801826e:	429a      	cmp	r2, r3
 8018270:	d106      	bne.n	8018280 <ip_reass_remove_oldest_datagram+0x4c>
 8018272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018274:	899a      	ldrh	r2, [r3, #12]
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	889b      	ldrh	r3, [r3, #4]
 801827a:	b29b      	uxth	r3, r3
 801827c:	429a      	cmp	r2, r3
 801827e:	d014      	beq.n	80182aa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018280:	693b      	ldr	r3, [r7, #16]
 8018282:	3301      	adds	r3, #1
 8018284:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018286:	6a3b      	ldr	r3, [r7, #32]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d104      	bne.n	8018296 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801828e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018290:	69fb      	ldr	r3, [r7, #28]
 8018292:	61bb      	str	r3, [r7, #24]
 8018294:	e009      	b.n	80182aa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018298:	7fda      	ldrb	r2, [r3, #31]
 801829a:	6a3b      	ldr	r3, [r7, #32]
 801829c:	7fdb      	ldrb	r3, [r3, #31]
 801829e:	429a      	cmp	r2, r3
 80182a0:	d803      	bhi.n	80182aa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80182a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80182a6:	69fb      	ldr	r3, [r7, #28]
 80182a8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80182aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d001      	beq.n	80182b6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80182b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182b4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80182b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80182bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d1cb      	bne.n	801825a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80182c2:	6a3b      	ldr	r3, [r7, #32]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d008      	beq.n	80182da <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80182c8:	69b9      	ldr	r1, [r7, #24]
 80182ca:	6a38      	ldr	r0, [r7, #32]
 80182cc:	f7ff ff0e 	bl	80180ec <ip_reass_free_complete_datagram>
 80182d0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80182d2:	697a      	ldr	r2, [r7, #20]
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	4413      	add	r3, r2
 80182d8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80182da:	697a      	ldr	r2, [r7, #20]
 80182dc:	683b      	ldr	r3, [r7, #0]
 80182de:	429a      	cmp	r2, r3
 80182e0:	da02      	bge.n	80182e8 <ip_reass_remove_oldest_datagram+0xb4>
 80182e2:	693b      	ldr	r3, [r7, #16]
 80182e4:	2b01      	cmp	r3, #1
 80182e6:	dcac      	bgt.n	8018242 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80182e8:	697b      	ldr	r3, [r7, #20]
}
 80182ea:	4618      	mov	r0, r3
 80182ec:	3728      	adds	r7, #40	; 0x28
 80182ee:	46bd      	mov	sp, r7
 80182f0:	bd80      	pop	{r7, pc}
 80182f2:	bf00      	nop
 80182f4:	20004390 	.word	0x20004390

080182f8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b084      	sub	sp, #16
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
 8018300:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018302:	2004      	movs	r0, #4
 8018304:	f7f4 faea 	bl	800c8dc <memp_malloc>
 8018308:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d110      	bne.n	8018332 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018310:	6839      	ldr	r1, [r7, #0]
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f7ff ff8e 	bl	8018234 <ip_reass_remove_oldest_datagram>
 8018318:	4602      	mov	r2, r0
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	4293      	cmp	r3, r2
 801831e:	dc03      	bgt.n	8018328 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018320:	2004      	movs	r0, #4
 8018322:	f7f4 fadb 	bl	800c8dc <memp_malloc>
 8018326:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d101      	bne.n	8018332 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801832e:	2300      	movs	r3, #0
 8018330:	e016      	b.n	8018360 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018332:	2220      	movs	r2, #32
 8018334:	2100      	movs	r1, #0
 8018336:	68f8      	ldr	r0, [r7, #12]
 8018338:	f000 ffef 	bl	801931a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	220f      	movs	r2, #15
 8018340:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018342:	4b09      	ldr	r3, [pc, #36]	; (8018368 <ip_reass_enqueue_new_datagram+0x70>)
 8018344:	681a      	ldr	r2, [r3, #0]
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801834a:	4a07      	ldr	r2, [pc, #28]	; (8018368 <ip_reass_enqueue_new_datagram+0x70>)
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	3308      	adds	r3, #8
 8018354:	2214      	movs	r2, #20
 8018356:	6879      	ldr	r1, [r7, #4]
 8018358:	4618      	mov	r0, r3
 801835a:	f000 ffd3 	bl	8019304 <memcpy>
  return ipr;
 801835e:	68fb      	ldr	r3, [r7, #12]
}
 8018360:	4618      	mov	r0, r3
 8018362:	3710      	adds	r7, #16
 8018364:	46bd      	mov	sp, r7
 8018366:	bd80      	pop	{r7, pc}
 8018368:	20004390 	.word	0x20004390

0801836c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b082      	sub	sp, #8
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018376:	4b10      	ldr	r3, [pc, #64]	; (80183b8 <ip_reass_dequeue_datagram+0x4c>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	687a      	ldr	r2, [r7, #4]
 801837c:	429a      	cmp	r2, r3
 801837e:	d104      	bne.n	801838a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	4a0c      	ldr	r2, [pc, #48]	; (80183b8 <ip_reass_dequeue_datagram+0x4c>)
 8018386:	6013      	str	r3, [r2, #0]
 8018388:	e00d      	b.n	80183a6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801838a:	683b      	ldr	r3, [r7, #0]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d106      	bne.n	801839e <ip_reass_dequeue_datagram+0x32>
 8018390:	4b0a      	ldr	r3, [pc, #40]	; (80183bc <ip_reass_dequeue_datagram+0x50>)
 8018392:	f240 1245 	movw	r2, #325	; 0x145
 8018396:	490a      	ldr	r1, [pc, #40]	; (80183c0 <ip_reass_dequeue_datagram+0x54>)
 8018398:	480a      	ldr	r0, [pc, #40]	; (80183c4 <ip_reass_dequeue_datagram+0x58>)
 801839a:	f000 ffc7 	bl	801932c <iprintf>
    prev->next = ipr->next;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681a      	ldr	r2, [r3, #0]
 80183a2:	683b      	ldr	r3, [r7, #0]
 80183a4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80183a6:	6879      	ldr	r1, [r7, #4]
 80183a8:	2004      	movs	r0, #4
 80183aa:	f7f4 fae9 	bl	800c980 <memp_free>
}
 80183ae:	bf00      	nop
 80183b0:	3708      	adds	r7, #8
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}
 80183b6:	bf00      	nop
 80183b8:	20004390 	.word	0x20004390
 80183bc:	0801de1c 	.word	0x0801de1c
 80183c0:	0801dee4 	.word	0x0801dee4
 80183c4:	0801de64 	.word	0x0801de64

080183c8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b08c      	sub	sp, #48	; 0x30
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	60f8      	str	r0, [r7, #12]
 80183d0:	60b9      	str	r1, [r7, #8]
 80183d2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80183d4:	2300      	movs	r3, #0
 80183d6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80183d8:	2301      	movs	r3, #1
 80183da:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	685b      	ldr	r3, [r3, #4]
 80183e0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80183e2:	69fb      	ldr	r3, [r7, #28]
 80183e4:	885b      	ldrh	r3, [r3, #2]
 80183e6:	b29b      	uxth	r3, r3
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7f3 fdc1 	bl	800bf70 <lwip_htons>
 80183ee:	4603      	mov	r3, r0
 80183f0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80183f2:	69fb      	ldr	r3, [r7, #28]
 80183f4:	781b      	ldrb	r3, [r3, #0]
 80183f6:	f003 030f 	and.w	r3, r3, #15
 80183fa:	b2db      	uxtb	r3, r3
 80183fc:	009b      	lsls	r3, r3, #2
 80183fe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018400:	7e7b      	ldrb	r3, [r7, #25]
 8018402:	b29b      	uxth	r3, r3
 8018404:	8b7a      	ldrh	r2, [r7, #26]
 8018406:	429a      	cmp	r2, r3
 8018408:	d202      	bcs.n	8018410 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801840a:	f04f 33ff 	mov.w	r3, #4294967295
 801840e:	e135      	b.n	801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018410:	7e7b      	ldrb	r3, [r7, #25]
 8018412:	b29b      	uxth	r3, r3
 8018414:	8b7a      	ldrh	r2, [r7, #26]
 8018416:	1ad3      	subs	r3, r2, r3
 8018418:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801841a:	69fb      	ldr	r3, [r7, #28]
 801841c:	88db      	ldrh	r3, [r3, #6]
 801841e:	b29b      	uxth	r3, r3
 8018420:	4618      	mov	r0, r3
 8018422:	f7f3 fda5 	bl	800bf70 <lwip_htons>
 8018426:	4603      	mov	r3, r0
 8018428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801842c:	b29b      	uxth	r3, r3
 801842e:	00db      	lsls	r3, r3, #3
 8018430:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018432:	68bb      	ldr	r3, [r7, #8]
 8018434:	685b      	ldr	r3, [r3, #4]
 8018436:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801843a:	2200      	movs	r2, #0
 801843c:	701a      	strb	r2, [r3, #0]
 801843e:	2200      	movs	r2, #0
 8018440:	705a      	strb	r2, [r3, #1]
 8018442:	2200      	movs	r2, #0
 8018444:	709a      	strb	r2, [r3, #2]
 8018446:	2200      	movs	r2, #0
 8018448:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801844c:	8afa      	ldrh	r2, [r7, #22]
 801844e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018450:	8afa      	ldrh	r2, [r7, #22]
 8018452:	8b7b      	ldrh	r3, [r7, #26]
 8018454:	4413      	add	r3, r2
 8018456:	b29a      	uxth	r2, r3
 8018458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801845a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801845e:	88db      	ldrh	r3, [r3, #6]
 8018460:	b29b      	uxth	r3, r3
 8018462:	8afa      	ldrh	r2, [r7, #22]
 8018464:	429a      	cmp	r2, r3
 8018466:	d902      	bls.n	801846e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018468:	f04f 33ff 	mov.w	r3, #4294967295
 801846c:	e106      	b.n	801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	685b      	ldr	r3, [r3, #4]
 8018472:	627b      	str	r3, [r7, #36]	; 0x24
 8018474:	e068      	b.n	8018548 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018478:	685b      	ldr	r3, [r3, #4]
 801847a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801847e:	889b      	ldrh	r3, [r3, #4]
 8018480:	b29a      	uxth	r2, r3
 8018482:	693b      	ldr	r3, [r7, #16]
 8018484:	889b      	ldrh	r3, [r3, #4]
 8018486:	b29b      	uxth	r3, r3
 8018488:	429a      	cmp	r2, r3
 801848a:	d235      	bcs.n	80184f8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801848e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018490:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018494:	2b00      	cmp	r3, #0
 8018496:	d020      	beq.n	80184da <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801849a:	889b      	ldrh	r3, [r3, #4]
 801849c:	b29a      	uxth	r2, r3
 801849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a0:	88db      	ldrh	r3, [r3, #6]
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d307      	bcc.n	80184b8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80184a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184aa:	88db      	ldrh	r3, [r3, #6]
 80184ac:	b29a      	uxth	r2, r3
 80184ae:	693b      	ldr	r3, [r7, #16]
 80184b0:	889b      	ldrh	r3, [r3, #4]
 80184b2:	b29b      	uxth	r3, r3
 80184b4:	429a      	cmp	r2, r3
 80184b6:	d902      	bls.n	80184be <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80184b8:	f04f 33ff 	mov.w	r3, #4294967295
 80184bc:	e0de      	b.n	801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80184be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184c0:	68ba      	ldr	r2, [r7, #8]
 80184c2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80184c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184c6:	88db      	ldrh	r3, [r3, #6]
 80184c8:	b29a      	uxth	r2, r3
 80184ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184cc:	889b      	ldrh	r3, [r3, #4]
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d03d      	beq.n	8018550 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80184d4:	2300      	movs	r3, #0
 80184d6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80184d8:	e03a      	b.n	8018550 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80184da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184dc:	88db      	ldrh	r3, [r3, #6]
 80184de:	b29a      	uxth	r2, r3
 80184e0:	693b      	ldr	r3, [r7, #16]
 80184e2:	889b      	ldrh	r3, [r3, #4]
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	429a      	cmp	r2, r3
 80184e8:	d902      	bls.n	80184f0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80184ea:	f04f 33ff 	mov.w	r3, #4294967295
 80184ee:	e0c5      	b.n	801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	68ba      	ldr	r2, [r7, #8]
 80184f4:	605a      	str	r2, [r3, #4]
      break;
 80184f6:	e02b      	b.n	8018550 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80184f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184fa:	889b      	ldrh	r3, [r3, #4]
 80184fc:	b29a      	uxth	r2, r3
 80184fe:	693b      	ldr	r3, [r7, #16]
 8018500:	889b      	ldrh	r3, [r3, #4]
 8018502:	b29b      	uxth	r3, r3
 8018504:	429a      	cmp	r2, r3
 8018506:	d102      	bne.n	801850e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018508:	f04f 33ff 	mov.w	r3, #4294967295
 801850c:	e0b6      	b.n	801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018510:	889b      	ldrh	r3, [r3, #4]
 8018512:	b29a      	uxth	r2, r3
 8018514:	693b      	ldr	r3, [r7, #16]
 8018516:	88db      	ldrh	r3, [r3, #6]
 8018518:	b29b      	uxth	r3, r3
 801851a:	429a      	cmp	r2, r3
 801851c:	d202      	bcs.n	8018524 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801851e:	f04f 33ff 	mov.w	r3, #4294967295
 8018522:	e0ab      	b.n	801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018526:	2b00      	cmp	r3, #0
 8018528:	d009      	beq.n	801853e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801852c:	88db      	ldrh	r3, [r3, #6]
 801852e:	b29a      	uxth	r2, r3
 8018530:	693b      	ldr	r3, [r7, #16]
 8018532:	889b      	ldrh	r3, [r3, #4]
 8018534:	b29b      	uxth	r3, r3
 8018536:	429a      	cmp	r2, r3
 8018538:	d001      	beq.n	801853e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801853a:	2300      	movs	r3, #0
 801853c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801853e:	693b      	ldr	r3, [r7, #16]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018544:	693b      	ldr	r3, [r7, #16]
 8018546:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801854a:	2b00      	cmp	r3, #0
 801854c:	d193      	bne.n	8018476 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801854e:	e000      	b.n	8018552 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018550:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018554:	2b00      	cmp	r3, #0
 8018556:	d12d      	bne.n	80185b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801855a:	2b00      	cmp	r3, #0
 801855c:	d01c      	beq.n	8018598 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018560:	88db      	ldrh	r3, [r3, #6]
 8018562:	b29a      	uxth	r2, r3
 8018564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018566:	889b      	ldrh	r3, [r3, #4]
 8018568:	b29b      	uxth	r3, r3
 801856a:	429a      	cmp	r2, r3
 801856c:	d906      	bls.n	801857c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801856e:	4b45      	ldr	r3, [pc, #276]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018570:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018574:	4944      	ldr	r1, [pc, #272]	; (8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018576:	4845      	ldr	r0, [pc, #276]	; (801868c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018578:	f000 fed8 	bl	801932c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801857e:	68ba      	ldr	r2, [r7, #8]
 8018580:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018584:	88db      	ldrh	r3, [r3, #6]
 8018586:	b29a      	uxth	r2, r3
 8018588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801858a:	889b      	ldrh	r3, [r3, #4]
 801858c:	b29b      	uxth	r3, r3
 801858e:	429a      	cmp	r2, r3
 8018590:	d010      	beq.n	80185b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018592:	2300      	movs	r3, #0
 8018594:	623b      	str	r3, [r7, #32]
 8018596:	e00d      	b.n	80185b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	685b      	ldr	r3, [r3, #4]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d006      	beq.n	80185ae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80185a0:	4b38      	ldr	r3, [pc, #224]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80185a2:	f240 12bf 	movw	r2, #447	; 0x1bf
 80185a6:	493a      	ldr	r1, [pc, #232]	; (8018690 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80185a8:	4838      	ldr	r0, [pc, #224]	; (801868c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185aa:	f000 febf 	bl	801932c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	68ba      	ldr	r2, [r7, #8]
 80185b2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d105      	bne.n	80185c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	7f9b      	ldrb	r3, [r3, #30]
 80185be:	f003 0301 	and.w	r3, r3, #1
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d059      	beq.n	801867a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80185c6:	6a3b      	ldr	r3, [r7, #32]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d04f      	beq.n	801866c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	685b      	ldr	r3, [r3, #4]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d006      	beq.n	80185e2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	685b      	ldr	r3, [r3, #4]
 80185d8:	685b      	ldr	r3, [r3, #4]
 80185da:	889b      	ldrh	r3, [r3, #4]
 80185dc:	b29b      	uxth	r3, r3
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d002      	beq.n	80185e8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80185e2:	2300      	movs	r3, #0
 80185e4:	623b      	str	r3, [r7, #32]
 80185e6:	e041      	b.n	801866c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80185e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80185ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80185f2:	e012      	b.n	801861a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80185f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f6:	685b      	ldr	r3, [r3, #4]
 80185f8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80185fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185fc:	88db      	ldrh	r3, [r3, #6]
 80185fe:	b29a      	uxth	r2, r3
 8018600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018602:	889b      	ldrh	r3, [r3, #4]
 8018604:	b29b      	uxth	r3, r3
 8018606:	429a      	cmp	r2, r3
 8018608:	d002      	beq.n	8018610 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801860a:	2300      	movs	r3, #0
 801860c:	623b      	str	r3, [r7, #32]
            break;
 801860e:	e007      	b.n	8018620 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018612:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801861c:	2b00      	cmp	r3, #0
 801861e:	d1e9      	bne.n	80185f4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018620:	6a3b      	ldr	r3, [r7, #32]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d022      	beq.n	801866c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018626:	68fb      	ldr	r3, [r7, #12]
 8018628:	685b      	ldr	r3, [r3, #4]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d106      	bne.n	801863c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801862e:	4b15      	ldr	r3, [pc, #84]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018630:	f240 12df 	movw	r2, #479	; 0x1df
 8018634:	4917      	ldr	r1, [pc, #92]	; (8018694 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018636:	4815      	ldr	r0, [pc, #84]	; (801868c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018638:	f000 fe78 	bl	801932c <iprintf>
          LWIP_ASSERT("sanity check",
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	685b      	ldr	r3, [r3, #4]
 8018640:	685b      	ldr	r3, [r3, #4]
 8018642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018644:	429a      	cmp	r2, r3
 8018646:	d106      	bne.n	8018656 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018648:	4b0e      	ldr	r3, [pc, #56]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801864a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801864e:	4911      	ldr	r1, [pc, #68]	; (8018694 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018650:	480e      	ldr	r0, [pc, #56]	; (801868c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018652:	f000 fe6b 	bl	801932c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d006      	beq.n	801866c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801865e:	4b09      	ldr	r3, [pc, #36]	; (8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018660:	f240 12e3 	movw	r2, #483	; 0x1e3
 8018664:	490c      	ldr	r1, [pc, #48]	; (8018698 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018666:	4809      	ldr	r0, [pc, #36]	; (801868c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018668:	f000 fe60 	bl	801932c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801866c:	6a3b      	ldr	r3, [r7, #32]
 801866e:	2b00      	cmp	r3, #0
 8018670:	bf14      	ite	ne
 8018672:	2301      	movne	r3, #1
 8018674:	2300      	moveq	r3, #0
 8018676:	b2db      	uxtb	r3, r3
 8018678:	e000      	b.n	801867c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801867a:	2300      	movs	r3, #0
}
 801867c:	4618      	mov	r0, r3
 801867e:	3730      	adds	r7, #48	; 0x30
 8018680:	46bd      	mov	sp, r7
 8018682:	bd80      	pop	{r7, pc}
 8018684:	0801de1c 	.word	0x0801de1c
 8018688:	0801df00 	.word	0x0801df00
 801868c:	0801de64 	.word	0x0801de64
 8018690:	0801df20 	.word	0x0801df20
 8018694:	0801df58 	.word	0x0801df58
 8018698:	0801df68 	.word	0x0801df68

0801869c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801869c:	b580      	push	{r7, lr}
 801869e:	b08e      	sub	sp, #56	; 0x38
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	685b      	ldr	r3, [r3, #4]
 80186a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80186aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ac:	781b      	ldrb	r3, [r3, #0]
 80186ae:	f003 030f 	and.w	r3, r3, #15
 80186b2:	b2db      	uxtb	r3, r3
 80186b4:	009b      	lsls	r3, r3, #2
 80186b6:	b2db      	uxtb	r3, r3
 80186b8:	2b14      	cmp	r3, #20
 80186ba:	f040 8167 	bne.w	801898c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80186be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186c0:	88db      	ldrh	r3, [r3, #6]
 80186c2:	b29b      	uxth	r3, r3
 80186c4:	4618      	mov	r0, r3
 80186c6:	f7f3 fc53 	bl	800bf70 <lwip_htons>
 80186ca:	4603      	mov	r3, r0
 80186cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186d0:	b29b      	uxth	r3, r3
 80186d2:	00db      	lsls	r3, r3, #3
 80186d4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80186d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d8:	885b      	ldrh	r3, [r3, #2]
 80186da:	b29b      	uxth	r3, r3
 80186dc:	4618      	mov	r0, r3
 80186de:	f7f3 fc47 	bl	800bf70 <lwip_htons>
 80186e2:	4603      	mov	r3, r0
 80186e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80186e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e8:	781b      	ldrb	r3, [r3, #0]
 80186ea:	f003 030f 	and.w	r3, r3, #15
 80186ee:	b2db      	uxtb	r3, r3
 80186f0:	009b      	lsls	r3, r3, #2
 80186f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80186f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80186fa:	b29b      	uxth	r3, r3
 80186fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80186fe:	429a      	cmp	r2, r3
 8018700:	f0c0 8146 	bcc.w	8018990 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018704:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018708:	b29b      	uxth	r3, r3
 801870a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801870c:	1ad3      	subs	r3, r2, r3
 801870e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018710:	6878      	ldr	r0, [r7, #4]
 8018712:	f7f5 f8a7 	bl	800d864 <pbuf_clen>
 8018716:	4603      	mov	r3, r0
 8018718:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801871a:	4ba3      	ldr	r3, [pc, #652]	; (80189a8 <ip4_reass+0x30c>)
 801871c:	881b      	ldrh	r3, [r3, #0]
 801871e:	461a      	mov	r2, r3
 8018720:	8c3b      	ldrh	r3, [r7, #32]
 8018722:	4413      	add	r3, r2
 8018724:	2b0a      	cmp	r3, #10
 8018726:	dd10      	ble.n	801874a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018728:	8c3b      	ldrh	r3, [r7, #32]
 801872a:	4619      	mov	r1, r3
 801872c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801872e:	f7ff fd81 	bl	8018234 <ip_reass_remove_oldest_datagram>
 8018732:	4603      	mov	r3, r0
 8018734:	2b00      	cmp	r3, #0
 8018736:	f000 812d 	beq.w	8018994 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801873a:	4b9b      	ldr	r3, [pc, #620]	; (80189a8 <ip4_reass+0x30c>)
 801873c:	881b      	ldrh	r3, [r3, #0]
 801873e:	461a      	mov	r2, r3
 8018740:	8c3b      	ldrh	r3, [r7, #32]
 8018742:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018744:	2b0a      	cmp	r3, #10
 8018746:	f300 8125 	bgt.w	8018994 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801874a:	4b98      	ldr	r3, [pc, #608]	; (80189ac <ip4_reass+0x310>)
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	633b      	str	r3, [r7, #48]	; 0x30
 8018750:	e015      	b.n	801877e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018754:	695a      	ldr	r2, [r3, #20]
 8018756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018758:	68db      	ldr	r3, [r3, #12]
 801875a:	429a      	cmp	r2, r3
 801875c:	d10c      	bne.n	8018778 <ip4_reass+0xdc>
 801875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018760:	699a      	ldr	r2, [r3, #24]
 8018762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018764:	691b      	ldr	r3, [r3, #16]
 8018766:	429a      	cmp	r2, r3
 8018768:	d106      	bne.n	8018778 <ip4_reass+0xdc>
 801876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801876c:	899a      	ldrh	r2, [r3, #12]
 801876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018770:	889b      	ldrh	r3, [r3, #4]
 8018772:	b29b      	uxth	r3, r3
 8018774:	429a      	cmp	r2, r3
 8018776:	d006      	beq.n	8018786 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	633b      	str	r3, [r7, #48]	; 0x30
 801877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018780:	2b00      	cmp	r3, #0
 8018782:	d1e6      	bne.n	8018752 <ip4_reass+0xb6>
 8018784:	e000      	b.n	8018788 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018786:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801878a:	2b00      	cmp	r3, #0
 801878c:	d109      	bne.n	80187a2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801878e:	8c3b      	ldrh	r3, [r7, #32]
 8018790:	4619      	mov	r1, r3
 8018792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018794:	f7ff fdb0 	bl	80182f8 <ip_reass_enqueue_new_datagram>
 8018798:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801879a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801879c:	2b00      	cmp	r3, #0
 801879e:	d11c      	bne.n	80187da <ip4_reass+0x13e>
      goto nullreturn;
 80187a0:	e0f9      	b.n	8018996 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80187a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187a4:	88db      	ldrh	r3, [r3, #6]
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	4618      	mov	r0, r3
 80187aa:	f7f3 fbe1 	bl	800bf70 <lwip_htons>
 80187ae:	4603      	mov	r3, r0
 80187b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d110      	bne.n	80187da <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80187b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ba:	89db      	ldrh	r3, [r3, #14]
 80187bc:	4618      	mov	r0, r3
 80187be:	f7f3 fbd7 	bl	800bf70 <lwip_htons>
 80187c2:	4603      	mov	r3, r0
 80187c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d006      	beq.n	80187da <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80187cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ce:	3308      	adds	r3, #8
 80187d0:	2214      	movs	r2, #20
 80187d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80187d4:	4618      	mov	r0, r3
 80187d6:	f000 fd95 	bl	8019304 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80187da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187dc:	88db      	ldrh	r3, [r3, #6]
 80187de:	b29b      	uxth	r3, r3
 80187e0:	f003 0320 	and.w	r3, r3, #32
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	bf0c      	ite	eq
 80187e8:	2301      	moveq	r3, #1
 80187ea:	2300      	movne	r3, #0
 80187ec:	b2db      	uxtb	r3, r3
 80187ee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80187f0:	69fb      	ldr	r3, [r7, #28]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d00e      	beq.n	8018814 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80187f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80187f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80187fa:	4413      	add	r3, r2
 80187fc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80187fe:	8b7a      	ldrh	r2, [r7, #26]
 8018800:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018802:	429a      	cmp	r2, r3
 8018804:	f0c0 80a0 	bcc.w	8018948 <ip4_reass+0x2ac>
 8018808:	8b7b      	ldrh	r3, [r7, #26]
 801880a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801880e:	4293      	cmp	r3, r2
 8018810:	f200 809a 	bhi.w	8018948 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018814:	69fa      	ldr	r2, [r7, #28]
 8018816:	6879      	ldr	r1, [r7, #4]
 8018818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801881a:	f7ff fdd5 	bl	80183c8 <ip_reass_chain_frag_into_datagram_and_validate>
 801881e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018820:	697b      	ldr	r3, [r7, #20]
 8018822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018826:	f000 8091 	beq.w	801894c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801882a:	4b5f      	ldr	r3, [pc, #380]	; (80189a8 <ip4_reass+0x30c>)
 801882c:	881a      	ldrh	r2, [r3, #0]
 801882e:	8c3b      	ldrh	r3, [r7, #32]
 8018830:	4413      	add	r3, r2
 8018832:	b29a      	uxth	r2, r3
 8018834:	4b5c      	ldr	r3, [pc, #368]	; (80189a8 <ip4_reass+0x30c>)
 8018836:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018838:	69fb      	ldr	r3, [r7, #28]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d00d      	beq.n	801885a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801883e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018842:	4413      	add	r3, r2
 8018844:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018848:	8a7a      	ldrh	r2, [r7, #18]
 801884a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801884e:	7f9b      	ldrb	r3, [r3, #30]
 8018850:	f043 0301 	orr.w	r3, r3, #1
 8018854:	b2da      	uxtb	r2, r3
 8018856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018858:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801885a:	697b      	ldr	r3, [r7, #20]
 801885c:	2b01      	cmp	r3, #1
 801885e:	d171      	bne.n	8018944 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018862:	8b9b      	ldrh	r3, [r3, #28]
 8018864:	3314      	adds	r3, #20
 8018866:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801886a:	685b      	ldr	r3, [r3, #4]
 801886c:	685b      	ldr	r3, [r3, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018874:	685b      	ldr	r3, [r3, #4]
 8018876:	685b      	ldr	r3, [r3, #4]
 8018878:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801887c:	3308      	adds	r3, #8
 801887e:	2214      	movs	r2, #20
 8018880:	4619      	mov	r1, r3
 8018882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018884:	f000 fd3e 	bl	8019304 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018888:	8a3b      	ldrh	r3, [r7, #16]
 801888a:	4618      	mov	r0, r3
 801888c:	f7f3 fb70 	bl	800bf70 <lwip_htons>
 8018890:	4603      	mov	r3, r0
 8018892:	461a      	mov	r2, r3
 8018894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018896:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801889a:	2200      	movs	r2, #0
 801889c:	719a      	strb	r2, [r3, #6]
 801889e:	2200      	movs	r2, #0
 80188a0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80188a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188a4:	2200      	movs	r2, #0
 80188a6:	729a      	strb	r2, [r3, #10]
 80188a8:	2200      	movs	r2, #0
 80188aa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80188ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80188b2:	e00d      	b.n	80188d0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80188b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188b6:	685b      	ldr	r3, [r3, #4]
 80188b8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80188ba:	2114      	movs	r1, #20
 80188bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80188be:	f7f4 febd 	bl	800d63c <pbuf_remove_header>
      pbuf_cat(p, r);
 80188c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80188c4:	6878      	ldr	r0, [r7, #4]
 80188c6:	f7f5 f80d 	bl	800d8e4 <pbuf_cat>
      r = iprh->next_pbuf;
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80188d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d1ee      	bne.n	80188b4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80188d6:	4b35      	ldr	r3, [pc, #212]	; (80189ac <ip4_reass+0x310>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188dc:	429a      	cmp	r2, r3
 80188de:	d102      	bne.n	80188e6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80188e0:	2300      	movs	r3, #0
 80188e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188e4:	e010      	b.n	8018908 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80188e6:	4b31      	ldr	r3, [pc, #196]	; (80189ac <ip4_reass+0x310>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188ec:	e007      	b.n	80188fe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80188ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188f4:	429a      	cmp	r2, r3
 80188f6:	d006      	beq.n	8018906 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80188f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018900:	2b00      	cmp	r3, #0
 8018902:	d1f4      	bne.n	80188ee <ip4_reass+0x252>
 8018904:	e000      	b.n	8018908 <ip4_reass+0x26c>
          break;
 8018906:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801890a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801890c:	f7ff fd2e 	bl	801836c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018910:	6878      	ldr	r0, [r7, #4]
 8018912:	f7f4 ffa7 	bl	800d864 <pbuf_clen>
 8018916:	4603      	mov	r3, r0
 8018918:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801891a:	4b23      	ldr	r3, [pc, #140]	; (80189a8 <ip4_reass+0x30c>)
 801891c:	881b      	ldrh	r3, [r3, #0]
 801891e:	8c3a      	ldrh	r2, [r7, #32]
 8018920:	429a      	cmp	r2, r3
 8018922:	d906      	bls.n	8018932 <ip4_reass+0x296>
 8018924:	4b22      	ldr	r3, [pc, #136]	; (80189b0 <ip4_reass+0x314>)
 8018926:	f240 229b 	movw	r2, #667	; 0x29b
 801892a:	4922      	ldr	r1, [pc, #136]	; (80189b4 <ip4_reass+0x318>)
 801892c:	4822      	ldr	r0, [pc, #136]	; (80189b8 <ip4_reass+0x31c>)
 801892e:	f000 fcfd 	bl	801932c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018932:	4b1d      	ldr	r3, [pc, #116]	; (80189a8 <ip4_reass+0x30c>)
 8018934:	881a      	ldrh	r2, [r3, #0]
 8018936:	8c3b      	ldrh	r3, [r7, #32]
 8018938:	1ad3      	subs	r3, r2, r3
 801893a:	b29a      	uxth	r2, r3
 801893c:	4b1a      	ldr	r3, [pc, #104]	; (80189a8 <ip4_reass+0x30c>)
 801893e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	e02c      	b.n	801899e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018944:	2300      	movs	r3, #0
 8018946:	e02a      	b.n	801899e <ip4_reass+0x302>

nullreturn_ipr:
 8018948:	bf00      	nop
 801894a:	e000      	b.n	801894e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801894c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018950:	2b00      	cmp	r3, #0
 8018952:	d106      	bne.n	8018962 <ip4_reass+0x2c6>
 8018954:	4b16      	ldr	r3, [pc, #88]	; (80189b0 <ip4_reass+0x314>)
 8018956:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801895a:	4918      	ldr	r1, [pc, #96]	; (80189bc <ip4_reass+0x320>)
 801895c:	4816      	ldr	r0, [pc, #88]	; (80189b8 <ip4_reass+0x31c>)
 801895e:	f000 fce5 	bl	801932c <iprintf>
  if (ipr->p == NULL) {
 8018962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d114      	bne.n	8018994 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801896a:	4b10      	ldr	r3, [pc, #64]	; (80189ac <ip4_reass+0x310>)
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018970:	429a      	cmp	r2, r3
 8018972:	d006      	beq.n	8018982 <ip4_reass+0x2e6>
 8018974:	4b0e      	ldr	r3, [pc, #56]	; (80189b0 <ip4_reass+0x314>)
 8018976:	f240 22ab 	movw	r2, #683	; 0x2ab
 801897a:	4911      	ldr	r1, [pc, #68]	; (80189c0 <ip4_reass+0x324>)
 801897c:	480e      	ldr	r0, [pc, #56]	; (80189b8 <ip4_reass+0x31c>)
 801897e:	f000 fcd5 	bl	801932c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018982:	2100      	movs	r1, #0
 8018984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018986:	f7ff fcf1 	bl	801836c <ip_reass_dequeue_datagram>
 801898a:	e004      	b.n	8018996 <ip4_reass+0x2fa>
    goto nullreturn;
 801898c:	bf00      	nop
 801898e:	e002      	b.n	8018996 <ip4_reass+0x2fa>
    goto nullreturn;
 8018990:	bf00      	nop
 8018992:	e000      	b.n	8018996 <ip4_reass+0x2fa>
  }

nullreturn:
 8018994:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018996:	6878      	ldr	r0, [r7, #4]
 8018998:	f7f4 fed6 	bl	800d748 <pbuf_free>
  return NULL;
 801899c:	2300      	movs	r3, #0
}
 801899e:	4618      	mov	r0, r3
 80189a0:	3738      	adds	r7, #56	; 0x38
 80189a2:	46bd      	mov	sp, r7
 80189a4:	bd80      	pop	{r7, pc}
 80189a6:	bf00      	nop
 80189a8:	20004394 	.word	0x20004394
 80189ac:	20004390 	.word	0x20004390
 80189b0:	0801de1c 	.word	0x0801de1c
 80189b4:	0801df8c 	.word	0x0801df8c
 80189b8:	0801de64 	.word	0x0801de64
 80189bc:	0801dfa8 	.word	0x0801dfa8
 80189c0:	0801dfb4 	.word	0x0801dfb4

080189c4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80189c8:	2005      	movs	r0, #5
 80189ca:	f7f3 ff87 	bl	800c8dc <memp_malloc>
 80189ce:	4603      	mov	r3, r0
}
 80189d0:	4618      	mov	r0, r3
 80189d2:	bd80      	pop	{r7, pc}

080189d4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b082      	sub	sp, #8
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d106      	bne.n	80189f0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80189e2:	4b07      	ldr	r3, [pc, #28]	; (8018a00 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80189e4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80189e8:	4906      	ldr	r1, [pc, #24]	; (8018a04 <ip_frag_free_pbuf_custom_ref+0x30>)
 80189ea:	4807      	ldr	r0, [pc, #28]	; (8018a08 <ip_frag_free_pbuf_custom_ref+0x34>)
 80189ec:	f000 fc9e 	bl	801932c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80189f0:	6879      	ldr	r1, [r7, #4]
 80189f2:	2005      	movs	r0, #5
 80189f4:	f7f3 ffc4 	bl	800c980 <memp_free>
}
 80189f8:	bf00      	nop
 80189fa:	3708      	adds	r7, #8
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}
 8018a00:	0801de1c 	.word	0x0801de1c
 8018a04:	0801dfd4 	.word	0x0801dfd4
 8018a08:	0801de64 	.word	0x0801de64

08018a0c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b084      	sub	sp, #16
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d106      	bne.n	8018a2c <ipfrag_free_pbuf_custom+0x20>
 8018a1e:	4b11      	ldr	r3, [pc, #68]	; (8018a64 <ipfrag_free_pbuf_custom+0x58>)
 8018a20:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018a24:	4910      	ldr	r1, [pc, #64]	; (8018a68 <ipfrag_free_pbuf_custom+0x5c>)
 8018a26:	4811      	ldr	r0, [pc, #68]	; (8018a6c <ipfrag_free_pbuf_custom+0x60>)
 8018a28:	f000 fc80 	bl	801932c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018a2c:	68fa      	ldr	r2, [r7, #12]
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	429a      	cmp	r2, r3
 8018a32:	d006      	beq.n	8018a42 <ipfrag_free_pbuf_custom+0x36>
 8018a34:	4b0b      	ldr	r3, [pc, #44]	; (8018a64 <ipfrag_free_pbuf_custom+0x58>)
 8018a36:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018a3a:	490d      	ldr	r1, [pc, #52]	; (8018a70 <ipfrag_free_pbuf_custom+0x64>)
 8018a3c:	480b      	ldr	r0, [pc, #44]	; (8018a6c <ipfrag_free_pbuf_custom+0x60>)
 8018a3e:	f000 fc75 	bl	801932c <iprintf>
  if (pcr->original != NULL) {
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	695b      	ldr	r3, [r3, #20]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d004      	beq.n	8018a54 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	695b      	ldr	r3, [r3, #20]
 8018a4e:	4618      	mov	r0, r3
 8018a50:	f7f4 fe7a 	bl	800d748 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018a54:	68f8      	ldr	r0, [r7, #12]
 8018a56:	f7ff ffbd 	bl	80189d4 <ip_frag_free_pbuf_custom_ref>
}
 8018a5a:	bf00      	nop
 8018a5c:	3710      	adds	r7, #16
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}
 8018a62:	bf00      	nop
 8018a64:	0801de1c 	.word	0x0801de1c
 8018a68:	0801dfe0 	.word	0x0801dfe0
 8018a6c:	0801de64 	.word	0x0801de64
 8018a70:	0801dfec 	.word	0x0801dfec

08018a74 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b094      	sub	sp, #80	; 0x50
 8018a78:	af02      	add	r7, sp, #8
 8018a7a:	60f8      	str	r0, [r7, #12]
 8018a7c:	60b9      	str	r1, [r7, #8]
 8018a7e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018a80:	2300      	movs	r3, #0
 8018a82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018a86:	68bb      	ldr	r3, [r7, #8]
 8018a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a8a:	3b14      	subs	r3, #20
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	da00      	bge.n	8018a92 <ip4_frag+0x1e>
 8018a90:	3307      	adds	r3, #7
 8018a92:	10db      	asrs	r3, r3, #3
 8018a94:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018a96:	2314      	movs	r3, #20
 8018a98:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	685b      	ldr	r3, [r3, #4]
 8018a9e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aa2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa6:	781b      	ldrb	r3, [r3, #0]
 8018aa8:	f003 030f 	and.w	r3, r3, #15
 8018aac:	b2db      	uxtb	r3, r3
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	b2db      	uxtb	r3, r3
 8018ab2:	2b14      	cmp	r3, #20
 8018ab4:	d002      	beq.n	8018abc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018ab6:	f06f 0305 	mvn.w	r3, #5
 8018aba:	e10f      	b.n	8018cdc <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	895b      	ldrh	r3, [r3, #10]
 8018ac0:	2b13      	cmp	r3, #19
 8018ac2:	d809      	bhi.n	8018ad8 <ip4_frag+0x64>
 8018ac4:	4b87      	ldr	r3, [pc, #540]	; (8018ce4 <ip4_frag+0x270>)
 8018ac6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018aca:	4987      	ldr	r1, [pc, #540]	; (8018ce8 <ip4_frag+0x274>)
 8018acc:	4887      	ldr	r0, [pc, #540]	; (8018cec <ip4_frag+0x278>)
 8018ace:	f000 fc2d 	bl	801932c <iprintf>
 8018ad2:	f06f 0305 	mvn.w	r3, #5
 8018ad6:	e101      	b.n	8018cdc <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ada:	88db      	ldrh	r3, [r3, #6]
 8018adc:	b29b      	uxth	r3, r3
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7f3 fa46 	bl	800bf70 <lwip_htons>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018ae8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018aea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018aee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018af2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018af8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	891b      	ldrh	r3, [r3, #8]
 8018afe:	3b14      	subs	r3, #20
 8018b00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018b04:	e0e0      	b.n	8018cc8 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018b06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018b08:	00db      	lsls	r3, r3, #3
 8018b0a:	b29b      	uxth	r3, r3
 8018b0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018b10:	4293      	cmp	r3, r2
 8018b12:	bf28      	it	cs
 8018b14:	4613      	movcs	r3, r2
 8018b16:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018b18:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018b1c:	2114      	movs	r1, #20
 8018b1e:	200e      	movs	r0, #14
 8018b20:	f7f4 fb32 	bl	800d188 <pbuf_alloc>
 8018b24:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	f000 80d4 	beq.w	8018cd6 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b30:	895b      	ldrh	r3, [r3, #10]
 8018b32:	2b13      	cmp	r3, #19
 8018b34:	d806      	bhi.n	8018b44 <ip4_frag+0xd0>
 8018b36:	4b6b      	ldr	r3, [pc, #428]	; (8018ce4 <ip4_frag+0x270>)
 8018b38:	f240 3225 	movw	r2, #805	; 0x325
 8018b3c:	496c      	ldr	r1, [pc, #432]	; (8018cf0 <ip4_frag+0x27c>)
 8018b3e:	486b      	ldr	r0, [pc, #428]	; (8018cec <ip4_frag+0x278>)
 8018b40:	f000 fbf4 	bl	801932c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b46:	685b      	ldr	r3, [r3, #4]
 8018b48:	2214      	movs	r2, #20
 8018b4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f000 fbd9 	bl	8019304 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b54:	685b      	ldr	r3, [r3, #4]
 8018b56:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018b58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018b5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018b5e:	e064      	b.n	8018c2a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	895a      	ldrh	r2, [r3, #10]
 8018b64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018b66:	1ad3      	subs	r3, r2, r3
 8018b68:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	895b      	ldrh	r3, [r3, #10]
 8018b6e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018b70:	429a      	cmp	r2, r3
 8018b72:	d906      	bls.n	8018b82 <ip4_frag+0x10e>
 8018b74:	4b5b      	ldr	r3, [pc, #364]	; (8018ce4 <ip4_frag+0x270>)
 8018b76:	f240 322d 	movw	r2, #813	; 0x32d
 8018b7a:	495e      	ldr	r1, [pc, #376]	; (8018cf4 <ip4_frag+0x280>)
 8018b7c:	485b      	ldr	r0, [pc, #364]	; (8018cec <ip4_frag+0x278>)
 8018b7e:	f000 fbd5 	bl	801932c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018b82:	8bfa      	ldrh	r2, [r7, #30]
 8018b84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b88:	4293      	cmp	r3, r2
 8018b8a:	bf28      	it	cs
 8018b8c:	4613      	movcs	r3, r2
 8018b8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018b92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d105      	bne.n	8018ba6 <ip4_frag+0x132>
        poff = 0;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	60fb      	str	r3, [r7, #12]
        continue;
 8018ba4:	e041      	b.n	8018c2a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018ba6:	f7ff ff0d 	bl	80189c4 <ip_frag_alloc_pbuf_custom_ref>
 8018baa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018bac:	69bb      	ldr	r3, [r7, #24]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d103      	bne.n	8018bba <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018bb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018bb4:	f7f4 fdc8 	bl	800d748 <pbuf_free>
        goto memerr;
 8018bb8:	e08e      	b.n	8018cd8 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018bba:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018bc0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018bc2:	4413      	add	r3, r2
 8018bc4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018bc8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018bcc:	9201      	str	r2, [sp, #4]
 8018bce:	9300      	str	r3, [sp, #0]
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	2241      	movs	r2, #65	; 0x41
 8018bd4:	2000      	movs	r0, #0
 8018bd6:	f7f4 fbfd 	bl	800d3d4 <pbuf_alloced_custom>
 8018bda:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018bdc:	697b      	ldr	r3, [r7, #20]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d106      	bne.n	8018bf0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018be2:	69b8      	ldr	r0, [r7, #24]
 8018be4:	f7ff fef6 	bl	80189d4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018bea:	f7f4 fdad 	bl	800d748 <pbuf_free>
        goto memerr;
 8018bee:	e073      	b.n	8018cd8 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8018bf0:	68f8      	ldr	r0, [r7, #12]
 8018bf2:	f7f4 fe4f 	bl	800d894 <pbuf_ref>
      pcr->original = p;
 8018bf6:	69bb      	ldr	r3, [r7, #24]
 8018bf8:	68fa      	ldr	r2, [r7, #12]
 8018bfa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018bfc:	69bb      	ldr	r3, [r7, #24]
 8018bfe:	4a3e      	ldr	r2, [pc, #248]	; (8018cf8 <ip4_frag+0x284>)
 8018c00:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018c02:	6979      	ldr	r1, [r7, #20]
 8018c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c06:	f7f4 fe6d 	bl	800d8e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018c0a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018c0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018c12:	1ad3      	subs	r3, r2, r3
 8018c14:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018c18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d004      	beq.n	8018c2a <ip4_frag+0x1b6>
        poff = 0;
 8018c20:	2300      	movs	r3, #0
 8018c22:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018c2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d196      	bne.n	8018b60 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018c32:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018c34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018c38:	4413      	add	r3, r2
 8018c3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018c3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018c40:	68bb      	ldr	r3, [r7, #8]
 8018c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c44:	3b14      	subs	r3, #20
 8018c46:	429a      	cmp	r2, r3
 8018c48:	bfd4      	ite	le
 8018c4a:	2301      	movle	r3, #1
 8018c4c:	2300      	movgt	r3, #0
 8018c4e:	b2db      	uxtb	r3, r3
 8018c50:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018c52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018c56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018c5c:	6a3b      	ldr	r3, [r7, #32]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d002      	beq.n	8018c68 <ip4_frag+0x1f4>
 8018c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d003      	beq.n	8018c70 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018c68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018c6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018c6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018c70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018c72:	4618      	mov	r0, r3
 8018c74:	f7f3 f97c 	bl	800bf70 <lwip_htons>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	461a      	mov	r2, r3
 8018c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c7e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018c80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018c82:	3314      	adds	r3, #20
 8018c84:	b29b      	uxth	r3, r3
 8018c86:	4618      	mov	r0, r3
 8018c88:	f7f3 f972 	bl	800bf70 <lwip_htons>
 8018c8c:	4603      	mov	r3, r0
 8018c8e:	461a      	mov	r2, r3
 8018c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c92:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c96:	2200      	movs	r2, #0
 8018c98:	729a      	strb	r2, [r3, #10]
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018c9e:	68bb      	ldr	r3, [r7, #8]
 8018ca0:	695b      	ldr	r3, [r3, #20]
 8018ca2:	687a      	ldr	r2, [r7, #4]
 8018ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018ca6:	68b8      	ldr	r0, [r7, #8]
 8018ca8:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018cac:	f7f4 fd4c 	bl	800d748 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018cb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018cb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018cb6:	1ad3      	subs	r3, r2, r3
 8018cb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018cbc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018cc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018cc2:	4413      	add	r3, r2
 8018cc4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018cc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	f47f af1a 	bne.w	8018b06 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	e002      	b.n	8018cdc <ip4_frag+0x268>
      goto memerr;
 8018cd6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018cdc:	4618      	mov	r0, r3
 8018cde:	3748      	adds	r7, #72	; 0x48
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	bd80      	pop	{r7, pc}
 8018ce4:	0801de1c 	.word	0x0801de1c
 8018ce8:	0801dff8 	.word	0x0801dff8
 8018cec:	0801de64 	.word	0x0801de64
 8018cf0:	0801e014 	.word	0x0801e014
 8018cf4:	0801e034 	.word	0x0801e034
 8018cf8:	08018a0d 	.word	0x08018a0d

08018cfc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b086      	sub	sp, #24
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	6078      	str	r0, [r7, #4]
 8018d04:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018d06:	230e      	movs	r3, #14
 8018d08:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	895b      	ldrh	r3, [r3, #10]
 8018d0e:	2b0e      	cmp	r3, #14
 8018d10:	d96e      	bls.n	8018df0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	7bdb      	ldrb	r3, [r3, #15]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d106      	bne.n	8018d28 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018d20:	3301      	adds	r3, #1
 8018d22:	b2da      	uxtb	r2, r3
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	685b      	ldr	r3, [r3, #4]
 8018d2c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018d2e:	693b      	ldr	r3, [r7, #16]
 8018d30:	7b1a      	ldrb	r2, [r3, #12]
 8018d32:	7b5b      	ldrb	r3, [r3, #13]
 8018d34:	021b      	lsls	r3, r3, #8
 8018d36:	4313      	orrs	r3, r2
 8018d38:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018d3a:	693b      	ldr	r3, [r7, #16]
 8018d3c:	781b      	ldrb	r3, [r3, #0]
 8018d3e:	f003 0301 	and.w	r3, r3, #1
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d023      	beq.n	8018d8e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018d46:	693b      	ldr	r3, [r7, #16]
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	2b01      	cmp	r3, #1
 8018d4c:	d10f      	bne.n	8018d6e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018d4e:	693b      	ldr	r3, [r7, #16]
 8018d50:	785b      	ldrb	r3, [r3, #1]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d11b      	bne.n	8018d8e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018d56:	693b      	ldr	r3, [r7, #16]
 8018d58:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018d5a:	2b5e      	cmp	r3, #94	; 0x5e
 8018d5c:	d117      	bne.n	8018d8e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	7b5b      	ldrb	r3, [r3, #13]
 8018d62:	f043 0310 	orr.w	r3, r3, #16
 8018d66:	b2da      	uxtb	r2, r3
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	735a      	strb	r2, [r3, #13]
 8018d6c:	e00f      	b.n	8018d8e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018d6e:	693b      	ldr	r3, [r7, #16]
 8018d70:	2206      	movs	r2, #6
 8018d72:	4928      	ldr	r1, [pc, #160]	; (8018e14 <ethernet_input+0x118>)
 8018d74:	4618      	mov	r0, r3
 8018d76:	f000 fab6 	bl	80192e6 <memcmp>
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d106      	bne.n	8018d8e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	7b5b      	ldrb	r3, [r3, #13]
 8018d84:	f043 0308 	orr.w	r3, r3, #8
 8018d88:	b2da      	uxtb	r2, r3
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018d8e:	89fb      	ldrh	r3, [r7, #14]
 8018d90:	2b08      	cmp	r3, #8
 8018d92:	d003      	beq.n	8018d9c <ethernet_input+0xa0>
 8018d94:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018d98:	d014      	beq.n	8018dc4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018d9a:	e032      	b.n	8018e02 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018d9c:	683b      	ldr	r3, [r7, #0]
 8018d9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018da2:	f003 0308 	and.w	r3, r3, #8
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d024      	beq.n	8018df4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018daa:	8afb      	ldrh	r3, [r7, #22]
 8018dac:	4619      	mov	r1, r3
 8018dae:	6878      	ldr	r0, [r7, #4]
 8018db0:	f7f4 fc44 	bl	800d63c <pbuf_remove_header>
 8018db4:	4603      	mov	r3, r0
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d11e      	bne.n	8018df8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018dba:	6839      	ldr	r1, [r7, #0]
 8018dbc:	6878      	ldr	r0, [r7, #4]
 8018dbe:	f7fe ff0f 	bl	8017be0 <ip4_input>
      break;
 8018dc2:	e013      	b.n	8018dec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018dc4:	683b      	ldr	r3, [r7, #0]
 8018dc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018dca:	f003 0308 	and.w	r3, r3, #8
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d014      	beq.n	8018dfc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018dd2:	8afb      	ldrh	r3, [r7, #22]
 8018dd4:	4619      	mov	r1, r3
 8018dd6:	6878      	ldr	r0, [r7, #4]
 8018dd8:	f7f4 fc30 	bl	800d63c <pbuf_remove_header>
 8018ddc:	4603      	mov	r3, r0
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d10e      	bne.n	8018e00 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018de2:	6839      	ldr	r1, [r7, #0]
 8018de4:	6878      	ldr	r0, [r7, #4]
 8018de6:	f7fe f8ab 	bl	8016f40 <etharp_input>
      break;
 8018dea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018dec:	2300      	movs	r3, #0
 8018dee:	e00c      	b.n	8018e0a <ethernet_input+0x10e>
    goto free_and_return;
 8018df0:	bf00      	nop
 8018df2:	e006      	b.n	8018e02 <ethernet_input+0x106>
        goto free_and_return;
 8018df4:	bf00      	nop
 8018df6:	e004      	b.n	8018e02 <ethernet_input+0x106>
        goto free_and_return;
 8018df8:	bf00      	nop
 8018dfa:	e002      	b.n	8018e02 <ethernet_input+0x106>
        goto free_and_return;
 8018dfc:	bf00      	nop
 8018dfe:	e000      	b.n	8018e02 <ethernet_input+0x106>
        goto free_and_return;
 8018e00:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018e02:	6878      	ldr	r0, [r7, #4]
 8018e04:	f7f4 fca0 	bl	800d748 <pbuf_free>
  return ERR_OK;
 8018e08:	2300      	movs	r3, #0
}
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	3718      	adds	r7, #24
 8018e0e:	46bd      	mov	sp, r7
 8018e10:	bd80      	pop	{r7, pc}
 8018e12:	bf00      	nop
 8018e14:	0801e260 	.word	0x0801e260

08018e18 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b086      	sub	sp, #24
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	60f8      	str	r0, [r7, #12]
 8018e20:	60b9      	str	r1, [r7, #8]
 8018e22:	607a      	str	r2, [r7, #4]
 8018e24:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018e26:	8c3b      	ldrh	r3, [r7, #32]
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f7f3 f8a1 	bl	800bf70 <lwip_htons>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018e32:	210e      	movs	r1, #14
 8018e34:	68b8      	ldr	r0, [r7, #8]
 8018e36:	f7f4 fbf1 	bl	800d61c <pbuf_add_header>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d125      	bne.n	8018e8c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018e40:	68bb      	ldr	r3, [r7, #8]
 8018e42:	685b      	ldr	r3, [r3, #4]
 8018e44:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018e46:	693b      	ldr	r3, [r7, #16]
 8018e48:	8afa      	ldrh	r2, [r7, #22]
 8018e4a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018e4c:	693b      	ldr	r3, [r7, #16]
 8018e4e:	2206      	movs	r2, #6
 8018e50:	6839      	ldr	r1, [r7, #0]
 8018e52:	4618      	mov	r0, r3
 8018e54:	f000 fa56 	bl	8019304 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018e58:	693b      	ldr	r3, [r7, #16]
 8018e5a:	3306      	adds	r3, #6
 8018e5c:	2206      	movs	r2, #6
 8018e5e:	6879      	ldr	r1, [r7, #4]
 8018e60:	4618      	mov	r0, r3
 8018e62:	f000 fa4f 	bl	8019304 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018e6c:	2b06      	cmp	r3, #6
 8018e6e:	d006      	beq.n	8018e7e <ethernet_output+0x66>
 8018e70:	4b0a      	ldr	r3, [pc, #40]	; (8018e9c <ethernet_output+0x84>)
 8018e72:	f240 1233 	movw	r2, #307	; 0x133
 8018e76:	490a      	ldr	r1, [pc, #40]	; (8018ea0 <ethernet_output+0x88>)
 8018e78:	480a      	ldr	r0, [pc, #40]	; (8018ea4 <ethernet_output+0x8c>)
 8018e7a:	f000 fa57 	bl	801932c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	699b      	ldr	r3, [r3, #24]
 8018e82:	68b9      	ldr	r1, [r7, #8]
 8018e84:	68f8      	ldr	r0, [r7, #12]
 8018e86:	4798      	blx	r3
 8018e88:	4603      	mov	r3, r0
 8018e8a:	e002      	b.n	8018e92 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018e8c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018e8e:	f06f 0301 	mvn.w	r3, #1
}
 8018e92:	4618      	mov	r0, r3
 8018e94:	3718      	adds	r7, #24
 8018e96:	46bd      	mov	sp, r7
 8018e98:	bd80      	pop	{r7, pc}
 8018e9a:	bf00      	nop
 8018e9c:	0801e044 	.word	0x0801e044
 8018ea0:	0801e07c 	.word	0x0801e07c
 8018ea4:	0801e0b0 	.word	0x0801e0b0

08018ea8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b086      	sub	sp, #24
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	6078      	str	r0, [r7, #4]
 8018eb0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	60bb      	str	r3, [r7, #8]
 8018eb6:	2304      	movs	r3, #4
 8018eb8:	60fb      	str	r3, [r7, #12]
 8018eba:	2300      	movs	r3, #0
 8018ebc:	613b      	str	r3, [r7, #16]
 8018ebe:	2300      	movs	r3, #0
 8018ec0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018ec2:	f107 0308 	add.w	r3, r7, #8
 8018ec6:	2100      	movs	r1, #0
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f7ed f962 	bl	8006192 <osMessageCreate>
 8018ece:	4602      	mov	r2, r0
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d102      	bne.n	8018ee2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018edc:	f04f 33ff 	mov.w	r3, #4294967295
 8018ee0:	e000      	b.n	8018ee4 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018ee2:	2300      	movs	r3, #0
}
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	3718      	adds	r7, #24
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}

08018eec <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b082      	sub	sp, #8
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	4618      	mov	r0, r3
 8018efa:	f7ed fa27 	bl	800634c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7ed fa38 	bl	8006378 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018f08:	bf00      	nop
 8018f0a:	3708      	adds	r7, #8
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	bd80      	pop	{r7, pc}

08018f10 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b084      	sub	sp, #16
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	6078      	str	r0, [r7, #4]
 8018f18:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	6839      	ldr	r1, [r7, #0]
 8018f20:	2200      	movs	r2, #0
 8018f22:	4618      	mov	r0, r3
 8018f24:	f7ed f95e 	bl	80061e4 <osMessagePut>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d102      	bne.n	8018f34 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018f2e:	2300      	movs	r3, #0
 8018f30:	73fb      	strb	r3, [r7, #15]
 8018f32:	e001      	b.n	8018f38 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018f34:	23ff      	movs	r3, #255	; 0xff
 8018f36:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	3710      	adds	r7, #16
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bd80      	pop	{r7, pc}

08018f44 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b08c      	sub	sp, #48	; 0x30
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	61f8      	str	r0, [r7, #28]
 8018f4c:	61b9      	str	r1, [r7, #24]
 8018f4e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018f50:	f7ec ff47 	bl	8005de2 <osKernelSysTick>
 8018f54:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018f56:	697b      	ldr	r3, [r7, #20]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d017      	beq.n	8018f8c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018f5c:	69fb      	ldr	r3, [r7, #28]
 8018f5e:	6819      	ldr	r1, [r3, #0]
 8018f60:	f107 0320 	add.w	r3, r7, #32
 8018f64:	697a      	ldr	r2, [r7, #20]
 8018f66:	4618      	mov	r0, r3
 8018f68:	f7ed f97c 	bl	8006264 <osMessageGet>

    if(event.status == osEventMessage)
 8018f6c:	6a3b      	ldr	r3, [r7, #32]
 8018f6e:	2b10      	cmp	r3, #16
 8018f70:	d109      	bne.n	8018f86 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f74:	461a      	mov	r2, r3
 8018f76:	69bb      	ldr	r3, [r7, #24]
 8018f78:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018f7a:	f7ec ff32 	bl	8005de2 <osKernelSysTick>
 8018f7e:	4602      	mov	r2, r0
 8018f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f82:	1ad3      	subs	r3, r2, r3
 8018f84:	e019      	b.n	8018fba <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018f86:	f04f 33ff 	mov.w	r3, #4294967295
 8018f8a:	e016      	b.n	8018fba <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018f8c:	69fb      	ldr	r3, [r7, #28]
 8018f8e:	6819      	ldr	r1, [r3, #0]
 8018f90:	463b      	mov	r3, r7
 8018f92:	f04f 32ff 	mov.w	r2, #4294967295
 8018f96:	4618      	mov	r0, r3
 8018f98:	f7ed f964 	bl	8006264 <osMessageGet>
 8018f9c:	f107 0320 	add.w	r3, r7, #32
 8018fa0:	463a      	mov	r2, r7
 8018fa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8018fa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018faa:	461a      	mov	r2, r3
 8018fac:	69bb      	ldr	r3, [r7, #24]
 8018fae:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018fb0:	f7ec ff17 	bl	8005de2 <osKernelSysTick>
 8018fb4:	4602      	mov	r2, r0
 8018fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018fba:	4618      	mov	r0, r3
 8018fbc:	3730      	adds	r7, #48	; 0x30
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	bd80      	pop	{r7, pc}

08018fc2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018fc2:	b580      	push	{r7, lr}
 8018fc4:	b086      	sub	sp, #24
 8018fc6:	af00      	add	r7, sp, #0
 8018fc8:	6078      	str	r0, [r7, #4]
 8018fca:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	6819      	ldr	r1, [r3, #0]
 8018fd0:	f107 030c 	add.w	r3, r7, #12
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	f7ed f944 	bl	8006264 <osMessageGet>

  if(event.status == osEventMessage)
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	2b10      	cmp	r3, #16
 8018fe0:	d105      	bne.n	8018fee <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018fe2:	693b      	ldr	r3, [r7, #16]
 8018fe4:	461a      	mov	r2, r3
 8018fe6:	683b      	ldr	r3, [r7, #0]
 8018fe8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018fea:	2300      	movs	r3, #0
 8018fec:	e001      	b.n	8018ff2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018fee:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	3718      	adds	r7, #24
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	bd80      	pop	{r7, pc}

08018ffa <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018ffa:	b480      	push	{r7}
 8018ffc:	b083      	sub	sp, #12
 8018ffe:	af00      	add	r7, sp, #0
 8019000:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d101      	bne.n	801900e <sys_mbox_valid+0x14>
    return 0;
 801900a:	2300      	movs	r3, #0
 801900c:	e000      	b.n	8019010 <sys_mbox_valid+0x16>
  else
    return 1;
 801900e:	2301      	movs	r3, #1
}
 8019010:	4618      	mov	r0, r3
 8019012:	370c      	adds	r7, #12
 8019014:	46bd      	mov	sp, r7
 8019016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801901a:	4770      	bx	lr

0801901c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801901c:	b480      	push	{r7}
 801901e:	b083      	sub	sp, #12
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	2200      	movs	r2, #0
 8019028:	601a      	str	r2, [r3, #0]
}
 801902a:	bf00      	nop
 801902c:	370c      	adds	r7, #12
 801902e:	46bd      	mov	sp, r7
 8019030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019034:	4770      	bx	lr

08019036 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019036:	b580      	push	{r7, lr}
 8019038:	b084      	sub	sp, #16
 801903a:	af00      	add	r7, sp, #0
 801903c:	6078      	str	r0, [r7, #4]
 801903e:	460b      	mov	r3, r1
 8019040:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8019042:	2300      	movs	r3, #0
 8019044:	60bb      	str	r3, [r7, #8]
 8019046:	2300      	movs	r3, #0
 8019048:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801904a:	f107 0308 	add.w	r3, r7, #8
 801904e:	2101      	movs	r1, #1
 8019050:	4618      	mov	r0, r3
 8019052:	f7ec ffd3 	bl	8005ffc <osSemaphoreCreate>
 8019056:	4602      	mov	r2, r0
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d102      	bne.n	801906a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019064:	f04f 33ff 	mov.w	r3, #4294967295
 8019068:	e009      	b.n	801907e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801906a:	78fb      	ldrb	r3, [r7, #3]
 801906c:	2b00      	cmp	r3, #0
 801906e:	d105      	bne.n	801907c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	2100      	movs	r1, #0
 8019076:	4618      	mov	r0, r3
 8019078:	f7ec fff4 	bl	8006064 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801907c:	2300      	movs	r3, #0
}
 801907e:	4618      	mov	r0, r3
 8019080:	3710      	adds	r7, #16
 8019082:	46bd      	mov	sp, r7
 8019084:	bd80      	pop	{r7, pc}

08019086 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019086:	b580      	push	{r7, lr}
 8019088:	b084      	sub	sp, #16
 801908a:	af00      	add	r7, sp, #0
 801908c:	6078      	str	r0, [r7, #4]
 801908e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8019090:	f7ec fea7 	bl	8005de2 <osKernelSysTick>
 8019094:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d011      	beq.n	80190c0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	6839      	ldr	r1, [r7, #0]
 80190a2:	4618      	mov	r0, r3
 80190a4:	f7ec ffde 	bl	8006064 <osSemaphoreWait>
 80190a8:	4603      	mov	r3, r0
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d105      	bne.n	80190ba <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80190ae:	f7ec fe98 	bl	8005de2 <osKernelSysTick>
 80190b2:	4602      	mov	r2, r0
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	1ad3      	subs	r3, r2, r3
 80190b8:	e012      	b.n	80190e0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80190ba:	f04f 33ff 	mov.w	r3, #4294967295
 80190be:	e00f      	b.n	80190e0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80190c0:	bf00      	nop
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	f04f 31ff 	mov.w	r1, #4294967295
 80190ca:	4618      	mov	r0, r3
 80190cc:	f7ec ffca 	bl	8006064 <osSemaphoreWait>
 80190d0:	4603      	mov	r3, r0
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d1f5      	bne.n	80190c2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80190d6:	f7ec fe84 	bl	8005de2 <osKernelSysTick>
 80190da:	4602      	mov	r2, r0
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80190e0:	4618      	mov	r0, r3
 80190e2:	3710      	adds	r7, #16
 80190e4:	46bd      	mov	sp, r7
 80190e6:	bd80      	pop	{r7, pc}

080190e8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b082      	sub	sp, #8
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7ed f803 	bl	8006100 <osSemaphoreRelease>
}
 80190fa:	bf00      	nop
 80190fc:	3708      	adds	r7, #8
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}

08019102 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019102:	b580      	push	{r7, lr}
 8019104:	b082      	sub	sp, #8
 8019106:	af00      	add	r7, sp, #0
 8019108:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	4618      	mov	r0, r3
 8019110:	f7ed f82c 	bl	800616c <osSemaphoreDelete>
}
 8019114:	bf00      	nop
 8019116:	3708      	adds	r7, #8
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801911c:	b480      	push	{r7}
 801911e:	b083      	sub	sp, #12
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d101      	bne.n	8019130 <sys_sem_valid+0x14>
    return 0;
 801912c:	2300      	movs	r3, #0
 801912e:	e000      	b.n	8019132 <sys_sem_valid+0x16>
  else
    return 1;
 8019130:	2301      	movs	r3, #1
}
 8019132:	4618      	mov	r0, r3
 8019134:	370c      	adds	r7, #12
 8019136:	46bd      	mov	sp, r7
 8019138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913c:	4770      	bx	lr

0801913e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801913e:	b480      	push	{r7}
 8019140:	b083      	sub	sp, #12
 8019142:	af00      	add	r7, sp, #0
 8019144:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2200      	movs	r2, #0
 801914a:	601a      	str	r2, [r3, #0]
}
 801914c:	bf00      	nop
 801914e:	370c      	adds	r7, #12
 8019150:	46bd      	mov	sp, r7
 8019152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019156:	4770      	bx	lr

08019158 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019158:	b580      	push	{r7, lr}
 801915a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801915c:	4803      	ldr	r0, [pc, #12]	; (801916c <sys_init+0x14>)
 801915e:	f7ec feb0 	bl	8005ec2 <osMutexCreate>
 8019162:	4602      	mov	r2, r0
 8019164:	4b02      	ldr	r3, [pc, #8]	; (8019170 <sys_init+0x18>)
 8019166:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019168:	bf00      	nop
 801916a:	bd80      	pop	{r7, pc}
 801916c:	0801e270 	.word	0x0801e270
 8019170:	2000b17c 	.word	0x2000b17c

08019174 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019174:	b580      	push	{r7, lr}
 8019176:	b084      	sub	sp, #16
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801917c:	2300      	movs	r3, #0
 801917e:	60bb      	str	r3, [r7, #8]
 8019180:	2300      	movs	r3, #0
 8019182:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019184:	f107 0308 	add.w	r3, r7, #8
 8019188:	4618      	mov	r0, r3
 801918a:	f7ec fe9a 	bl	8005ec2 <osMutexCreate>
 801918e:	4602      	mov	r2, r0
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d102      	bne.n	80191a2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801919c:	f04f 33ff 	mov.w	r3, #4294967295
 80191a0:	e000      	b.n	80191a4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80191a2:	2300      	movs	r3, #0
}
 80191a4:	4618      	mov	r0, r3
 80191a6:	3710      	adds	r7, #16
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}

080191ac <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b082      	sub	sp, #8
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	f04f 31ff 	mov.w	r1, #4294967295
 80191bc:	4618      	mov	r0, r3
 80191be:	f7ec fe99 	bl	8005ef4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80191c2:	bf00      	nop
 80191c4:	3708      	adds	r7, #8
 80191c6:	46bd      	mov	sp, r7
 80191c8:	bd80      	pop	{r7, pc}

080191ca <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80191ca:	b580      	push	{r7, lr}
 80191cc:	b082      	sub	sp, #8
 80191ce:	af00      	add	r7, sp, #0
 80191d0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	4618      	mov	r0, r3
 80191d8:	f7ec feda 	bl	8005f90 <osMutexRelease>
}
 80191dc:	bf00      	nop
 80191de:	3708      	adds	r7, #8
 80191e0:	46bd      	mov	sp, r7
 80191e2:	bd80      	pop	{r7, pc}

080191e4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b08c      	sub	sp, #48	; 0x30
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	60f8      	str	r0, [r7, #12]
 80191ec:	60b9      	str	r1, [r7, #8]
 80191ee:	607a      	str	r2, [r7, #4]
 80191f0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80191f2:	f107 0314 	add.w	r3, r7, #20
 80191f6:	2200      	movs	r2, #0
 80191f8:	601a      	str	r2, [r3, #0]
 80191fa:	605a      	str	r2, [r3, #4]
 80191fc:	609a      	str	r2, [r3, #8]
 80191fe:	60da      	str	r2, [r3, #12]
 8019200:	611a      	str	r2, [r3, #16]
 8019202:	615a      	str	r2, [r3, #20]
 8019204:	619a      	str	r2, [r3, #24]
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	617b      	str	r3, [r7, #20]
 801920a:	68bb      	ldr	r3, [r7, #8]
 801920c:	61bb      	str	r3, [r7, #24]
 801920e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019210:	b21b      	sxth	r3, r3
 8019212:	83bb      	strh	r3, [r7, #28]
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019218:	f107 0314 	add.w	r3, r7, #20
 801921c:	6879      	ldr	r1, [r7, #4]
 801921e:	4618      	mov	r0, r3
 8019220:	f7ec fdef 	bl	8005e02 <osThreadCreate>
 8019224:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019226:	4618      	mov	r0, r3
 8019228:	3730      	adds	r7, #48	; 0x30
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}
	...

08019230 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019230:	b580      	push	{r7, lr}
 8019232:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019234:	4b04      	ldr	r3, [pc, #16]	; (8019248 <sys_arch_protect+0x18>)
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	f04f 31ff 	mov.w	r1, #4294967295
 801923c:	4618      	mov	r0, r3
 801923e:	f7ec fe59 	bl	8005ef4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019242:	2301      	movs	r3, #1
}
 8019244:	4618      	mov	r0, r3
 8019246:	bd80      	pop	{r7, pc}
 8019248:	2000b17c 	.word	0x2000b17c

0801924c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b082      	sub	sp, #8
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019254:	4b04      	ldr	r3, [pc, #16]	; (8019268 <sys_arch_unprotect+0x1c>)
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	4618      	mov	r0, r3
 801925a:	f7ec fe99 	bl	8005f90 <osMutexRelease>
}
 801925e:	bf00      	nop
 8019260:	3708      	adds	r7, #8
 8019262:	46bd      	mov	sp, r7
 8019264:	bd80      	pop	{r7, pc}
 8019266:	bf00      	nop
 8019268:	2000b17c 	.word	0x2000b17c

0801926c <atoi>:
 801926c:	220a      	movs	r2, #10
 801926e:	2100      	movs	r1, #0
 8019270:	f000 b988 	b.w	8019584 <strtol>

08019274 <__libc_init_array>:
 8019274:	b570      	push	{r4, r5, r6, lr}
 8019276:	4e0d      	ldr	r6, [pc, #52]	; (80192ac <__libc_init_array+0x38>)
 8019278:	4c0d      	ldr	r4, [pc, #52]	; (80192b0 <__libc_init_array+0x3c>)
 801927a:	1ba4      	subs	r4, r4, r6
 801927c:	10a4      	asrs	r4, r4, #2
 801927e:	2500      	movs	r5, #0
 8019280:	42a5      	cmp	r5, r4
 8019282:	d109      	bne.n	8019298 <__libc_init_array+0x24>
 8019284:	4e0b      	ldr	r6, [pc, #44]	; (80192b4 <__libc_init_array+0x40>)
 8019286:	4c0c      	ldr	r4, [pc, #48]	; (80192b8 <__libc_init_array+0x44>)
 8019288:	f001 f874 	bl	801a374 <_init>
 801928c:	1ba4      	subs	r4, r4, r6
 801928e:	10a4      	asrs	r4, r4, #2
 8019290:	2500      	movs	r5, #0
 8019292:	42a5      	cmp	r5, r4
 8019294:	d105      	bne.n	80192a2 <__libc_init_array+0x2e>
 8019296:	bd70      	pop	{r4, r5, r6, pc}
 8019298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801929c:	4798      	blx	r3
 801929e:	3501      	adds	r5, #1
 80192a0:	e7ee      	b.n	8019280 <__libc_init_array+0xc>
 80192a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80192a6:	4798      	blx	r3
 80192a8:	3501      	adds	r5, #1
 80192aa:	e7f2      	b.n	8019292 <__libc_init_array+0x1e>
 80192ac:	0801e424 	.word	0x0801e424
 80192b0:	0801e424 	.word	0x0801e424
 80192b4:	0801e424 	.word	0x0801e424
 80192b8:	0801e428 	.word	0x0801e428

080192bc <__locale_ctype_ptr_l>:
 80192bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80192c0:	4770      	bx	lr

080192c2 <__ascii_mbtowc>:
 80192c2:	b082      	sub	sp, #8
 80192c4:	b901      	cbnz	r1, 80192c8 <__ascii_mbtowc+0x6>
 80192c6:	a901      	add	r1, sp, #4
 80192c8:	b142      	cbz	r2, 80192dc <__ascii_mbtowc+0x1a>
 80192ca:	b14b      	cbz	r3, 80192e0 <__ascii_mbtowc+0x1e>
 80192cc:	7813      	ldrb	r3, [r2, #0]
 80192ce:	600b      	str	r3, [r1, #0]
 80192d0:	7812      	ldrb	r2, [r2, #0]
 80192d2:	1c10      	adds	r0, r2, #0
 80192d4:	bf18      	it	ne
 80192d6:	2001      	movne	r0, #1
 80192d8:	b002      	add	sp, #8
 80192da:	4770      	bx	lr
 80192dc:	4610      	mov	r0, r2
 80192de:	e7fb      	b.n	80192d8 <__ascii_mbtowc+0x16>
 80192e0:	f06f 0001 	mvn.w	r0, #1
 80192e4:	e7f8      	b.n	80192d8 <__ascii_mbtowc+0x16>

080192e6 <memcmp>:
 80192e6:	b530      	push	{r4, r5, lr}
 80192e8:	2400      	movs	r4, #0
 80192ea:	42a2      	cmp	r2, r4
 80192ec:	d101      	bne.n	80192f2 <memcmp+0xc>
 80192ee:	2000      	movs	r0, #0
 80192f0:	e007      	b.n	8019302 <memcmp+0x1c>
 80192f2:	5d03      	ldrb	r3, [r0, r4]
 80192f4:	3401      	adds	r4, #1
 80192f6:	190d      	adds	r5, r1, r4
 80192f8:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80192fc:	42ab      	cmp	r3, r5
 80192fe:	d0f4      	beq.n	80192ea <memcmp+0x4>
 8019300:	1b58      	subs	r0, r3, r5
 8019302:	bd30      	pop	{r4, r5, pc}

08019304 <memcpy>:
 8019304:	b510      	push	{r4, lr}
 8019306:	1e43      	subs	r3, r0, #1
 8019308:	440a      	add	r2, r1
 801930a:	4291      	cmp	r1, r2
 801930c:	d100      	bne.n	8019310 <memcpy+0xc>
 801930e:	bd10      	pop	{r4, pc}
 8019310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019318:	e7f7      	b.n	801930a <memcpy+0x6>

0801931a <memset>:
 801931a:	4402      	add	r2, r0
 801931c:	4603      	mov	r3, r0
 801931e:	4293      	cmp	r3, r2
 8019320:	d100      	bne.n	8019324 <memset+0xa>
 8019322:	4770      	bx	lr
 8019324:	f803 1b01 	strb.w	r1, [r3], #1
 8019328:	e7f9      	b.n	801931e <memset+0x4>
	...

0801932c <iprintf>:
 801932c:	b40f      	push	{r0, r1, r2, r3}
 801932e:	4b0a      	ldr	r3, [pc, #40]	; (8019358 <iprintf+0x2c>)
 8019330:	b513      	push	{r0, r1, r4, lr}
 8019332:	681c      	ldr	r4, [r3, #0]
 8019334:	b124      	cbz	r4, 8019340 <iprintf+0x14>
 8019336:	69a3      	ldr	r3, [r4, #24]
 8019338:	b913      	cbnz	r3, 8019340 <iprintf+0x14>
 801933a:	4620      	mov	r0, r4
 801933c:	f000 faf6 	bl	801992c <__sinit>
 8019340:	ab05      	add	r3, sp, #20
 8019342:	9a04      	ldr	r2, [sp, #16]
 8019344:	68a1      	ldr	r1, [r4, #8]
 8019346:	9301      	str	r3, [sp, #4]
 8019348:	4620      	mov	r0, r4
 801934a:	f000 fcb7 	bl	8019cbc <_vfiprintf_r>
 801934e:	b002      	add	sp, #8
 8019350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019354:	b004      	add	sp, #16
 8019356:	4770      	bx	lr
 8019358:	20000020 	.word	0x20000020

0801935c <_puts_r>:
 801935c:	b570      	push	{r4, r5, r6, lr}
 801935e:	460e      	mov	r6, r1
 8019360:	4605      	mov	r5, r0
 8019362:	b118      	cbz	r0, 801936c <_puts_r+0x10>
 8019364:	6983      	ldr	r3, [r0, #24]
 8019366:	b90b      	cbnz	r3, 801936c <_puts_r+0x10>
 8019368:	f000 fae0 	bl	801992c <__sinit>
 801936c:	69ab      	ldr	r3, [r5, #24]
 801936e:	68ac      	ldr	r4, [r5, #8]
 8019370:	b913      	cbnz	r3, 8019378 <_puts_r+0x1c>
 8019372:	4628      	mov	r0, r5
 8019374:	f000 fada 	bl	801992c <__sinit>
 8019378:	4b23      	ldr	r3, [pc, #140]	; (8019408 <_puts_r+0xac>)
 801937a:	429c      	cmp	r4, r3
 801937c:	d117      	bne.n	80193ae <_puts_r+0x52>
 801937e:	686c      	ldr	r4, [r5, #4]
 8019380:	89a3      	ldrh	r3, [r4, #12]
 8019382:	071b      	lsls	r3, r3, #28
 8019384:	d51d      	bpl.n	80193c2 <_puts_r+0x66>
 8019386:	6923      	ldr	r3, [r4, #16]
 8019388:	b1db      	cbz	r3, 80193c2 <_puts_r+0x66>
 801938a:	3e01      	subs	r6, #1
 801938c:	68a3      	ldr	r3, [r4, #8]
 801938e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019392:	3b01      	subs	r3, #1
 8019394:	60a3      	str	r3, [r4, #8]
 8019396:	b9e9      	cbnz	r1, 80193d4 <_puts_r+0x78>
 8019398:	2b00      	cmp	r3, #0
 801939a:	da2e      	bge.n	80193fa <_puts_r+0x9e>
 801939c:	4622      	mov	r2, r4
 801939e:	210a      	movs	r1, #10
 80193a0:	4628      	mov	r0, r5
 80193a2:	f000 f905 	bl	80195b0 <__swbuf_r>
 80193a6:	3001      	adds	r0, #1
 80193a8:	d011      	beq.n	80193ce <_puts_r+0x72>
 80193aa:	200a      	movs	r0, #10
 80193ac:	e011      	b.n	80193d2 <_puts_r+0x76>
 80193ae:	4b17      	ldr	r3, [pc, #92]	; (801940c <_puts_r+0xb0>)
 80193b0:	429c      	cmp	r4, r3
 80193b2:	d101      	bne.n	80193b8 <_puts_r+0x5c>
 80193b4:	68ac      	ldr	r4, [r5, #8]
 80193b6:	e7e3      	b.n	8019380 <_puts_r+0x24>
 80193b8:	4b15      	ldr	r3, [pc, #84]	; (8019410 <_puts_r+0xb4>)
 80193ba:	429c      	cmp	r4, r3
 80193bc:	bf08      	it	eq
 80193be:	68ec      	ldreq	r4, [r5, #12]
 80193c0:	e7de      	b.n	8019380 <_puts_r+0x24>
 80193c2:	4621      	mov	r1, r4
 80193c4:	4628      	mov	r0, r5
 80193c6:	f000 f953 	bl	8019670 <__swsetup_r>
 80193ca:	2800      	cmp	r0, #0
 80193cc:	d0dd      	beq.n	801938a <_puts_r+0x2e>
 80193ce:	f04f 30ff 	mov.w	r0, #4294967295
 80193d2:	bd70      	pop	{r4, r5, r6, pc}
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	da04      	bge.n	80193e2 <_puts_r+0x86>
 80193d8:	69a2      	ldr	r2, [r4, #24]
 80193da:	429a      	cmp	r2, r3
 80193dc:	dc06      	bgt.n	80193ec <_puts_r+0x90>
 80193de:	290a      	cmp	r1, #10
 80193e0:	d004      	beq.n	80193ec <_puts_r+0x90>
 80193e2:	6823      	ldr	r3, [r4, #0]
 80193e4:	1c5a      	adds	r2, r3, #1
 80193e6:	6022      	str	r2, [r4, #0]
 80193e8:	7019      	strb	r1, [r3, #0]
 80193ea:	e7cf      	b.n	801938c <_puts_r+0x30>
 80193ec:	4622      	mov	r2, r4
 80193ee:	4628      	mov	r0, r5
 80193f0:	f000 f8de 	bl	80195b0 <__swbuf_r>
 80193f4:	3001      	adds	r0, #1
 80193f6:	d1c9      	bne.n	801938c <_puts_r+0x30>
 80193f8:	e7e9      	b.n	80193ce <_puts_r+0x72>
 80193fa:	6823      	ldr	r3, [r4, #0]
 80193fc:	200a      	movs	r0, #10
 80193fe:	1c5a      	adds	r2, r3, #1
 8019400:	6022      	str	r2, [r4, #0]
 8019402:	7018      	strb	r0, [r3, #0]
 8019404:	e7e5      	b.n	80193d2 <_puts_r+0x76>
 8019406:	bf00      	nop
 8019408:	0801e3a8 	.word	0x0801e3a8
 801940c:	0801e3c8 	.word	0x0801e3c8
 8019410:	0801e388 	.word	0x0801e388

08019414 <puts>:
 8019414:	4b02      	ldr	r3, [pc, #8]	; (8019420 <puts+0xc>)
 8019416:	4601      	mov	r1, r0
 8019418:	6818      	ldr	r0, [r3, #0]
 801941a:	f7ff bf9f 	b.w	801935c <_puts_r>
 801941e:	bf00      	nop
 8019420:	20000020 	.word	0x20000020

08019424 <rand>:
 8019424:	b538      	push	{r3, r4, r5, lr}
 8019426:	4b13      	ldr	r3, [pc, #76]	; (8019474 <rand+0x50>)
 8019428:	681c      	ldr	r4, [r3, #0]
 801942a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801942c:	b97b      	cbnz	r3, 801944e <rand+0x2a>
 801942e:	2018      	movs	r0, #24
 8019430:	f000 fb6a 	bl	8019b08 <malloc>
 8019434:	4a10      	ldr	r2, [pc, #64]	; (8019478 <rand+0x54>)
 8019436:	4b11      	ldr	r3, [pc, #68]	; (801947c <rand+0x58>)
 8019438:	63a0      	str	r0, [r4, #56]	; 0x38
 801943a:	e9c0 2300 	strd	r2, r3, [r0]
 801943e:	4b10      	ldr	r3, [pc, #64]	; (8019480 <rand+0x5c>)
 8019440:	6083      	str	r3, [r0, #8]
 8019442:	230b      	movs	r3, #11
 8019444:	8183      	strh	r3, [r0, #12]
 8019446:	2201      	movs	r2, #1
 8019448:	2300      	movs	r3, #0
 801944a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801944e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019450:	480c      	ldr	r0, [pc, #48]	; (8019484 <rand+0x60>)
 8019452:	690a      	ldr	r2, [r1, #16]
 8019454:	694b      	ldr	r3, [r1, #20]
 8019456:	4c0c      	ldr	r4, [pc, #48]	; (8019488 <rand+0x64>)
 8019458:	4350      	muls	r0, r2
 801945a:	fb04 0003 	mla	r0, r4, r3, r0
 801945e:	fba2 2304 	umull	r2, r3, r2, r4
 8019462:	4403      	add	r3, r0
 8019464:	1c54      	adds	r4, r2, #1
 8019466:	f143 0500 	adc.w	r5, r3, #0
 801946a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801946e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8019472:	bd38      	pop	{r3, r4, r5, pc}
 8019474:	20000020 	.word	0x20000020
 8019478:	abcd330e 	.word	0xabcd330e
 801947c:	e66d1234 	.word	0xe66d1234
 8019480:	0005deec 	.word	0x0005deec
 8019484:	5851f42d 	.word	0x5851f42d
 8019488:	4c957f2d 	.word	0x4c957f2d

0801948c <_strtol_l.isra.0>:
 801948c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019490:	4680      	mov	r8, r0
 8019492:	4689      	mov	r9, r1
 8019494:	4692      	mov	sl, r2
 8019496:	461e      	mov	r6, r3
 8019498:	460f      	mov	r7, r1
 801949a:	463d      	mov	r5, r7
 801949c:	9808      	ldr	r0, [sp, #32]
 801949e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80194a2:	f7ff ff0b 	bl	80192bc <__locale_ctype_ptr_l>
 80194a6:	4420      	add	r0, r4
 80194a8:	7843      	ldrb	r3, [r0, #1]
 80194aa:	f013 0308 	ands.w	r3, r3, #8
 80194ae:	d132      	bne.n	8019516 <_strtol_l.isra.0+0x8a>
 80194b0:	2c2d      	cmp	r4, #45	; 0x2d
 80194b2:	d132      	bne.n	801951a <_strtol_l.isra.0+0x8e>
 80194b4:	787c      	ldrb	r4, [r7, #1]
 80194b6:	1cbd      	adds	r5, r7, #2
 80194b8:	2201      	movs	r2, #1
 80194ba:	2e00      	cmp	r6, #0
 80194bc:	d05d      	beq.n	801957a <_strtol_l.isra.0+0xee>
 80194be:	2e10      	cmp	r6, #16
 80194c0:	d109      	bne.n	80194d6 <_strtol_l.isra.0+0x4a>
 80194c2:	2c30      	cmp	r4, #48	; 0x30
 80194c4:	d107      	bne.n	80194d6 <_strtol_l.isra.0+0x4a>
 80194c6:	782b      	ldrb	r3, [r5, #0]
 80194c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80194cc:	2b58      	cmp	r3, #88	; 0x58
 80194ce:	d14f      	bne.n	8019570 <_strtol_l.isra.0+0xe4>
 80194d0:	786c      	ldrb	r4, [r5, #1]
 80194d2:	2610      	movs	r6, #16
 80194d4:	3502      	adds	r5, #2
 80194d6:	2a00      	cmp	r2, #0
 80194d8:	bf14      	ite	ne
 80194da:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80194de:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80194e2:	2700      	movs	r7, #0
 80194e4:	fbb1 fcf6 	udiv	ip, r1, r6
 80194e8:	4638      	mov	r0, r7
 80194ea:	fb06 1e1c 	mls	lr, r6, ip, r1
 80194ee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80194f2:	2b09      	cmp	r3, #9
 80194f4:	d817      	bhi.n	8019526 <_strtol_l.isra.0+0x9a>
 80194f6:	461c      	mov	r4, r3
 80194f8:	42a6      	cmp	r6, r4
 80194fa:	dd23      	ble.n	8019544 <_strtol_l.isra.0+0xb8>
 80194fc:	1c7b      	adds	r3, r7, #1
 80194fe:	d007      	beq.n	8019510 <_strtol_l.isra.0+0x84>
 8019500:	4584      	cmp	ip, r0
 8019502:	d31c      	bcc.n	801953e <_strtol_l.isra.0+0xb2>
 8019504:	d101      	bne.n	801950a <_strtol_l.isra.0+0x7e>
 8019506:	45a6      	cmp	lr, r4
 8019508:	db19      	blt.n	801953e <_strtol_l.isra.0+0xb2>
 801950a:	fb00 4006 	mla	r0, r0, r6, r4
 801950e:	2701      	movs	r7, #1
 8019510:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019514:	e7eb      	b.n	80194ee <_strtol_l.isra.0+0x62>
 8019516:	462f      	mov	r7, r5
 8019518:	e7bf      	b.n	801949a <_strtol_l.isra.0+0xe>
 801951a:	2c2b      	cmp	r4, #43	; 0x2b
 801951c:	bf04      	itt	eq
 801951e:	1cbd      	addeq	r5, r7, #2
 8019520:	787c      	ldrbeq	r4, [r7, #1]
 8019522:	461a      	mov	r2, r3
 8019524:	e7c9      	b.n	80194ba <_strtol_l.isra.0+0x2e>
 8019526:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801952a:	2b19      	cmp	r3, #25
 801952c:	d801      	bhi.n	8019532 <_strtol_l.isra.0+0xa6>
 801952e:	3c37      	subs	r4, #55	; 0x37
 8019530:	e7e2      	b.n	80194f8 <_strtol_l.isra.0+0x6c>
 8019532:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8019536:	2b19      	cmp	r3, #25
 8019538:	d804      	bhi.n	8019544 <_strtol_l.isra.0+0xb8>
 801953a:	3c57      	subs	r4, #87	; 0x57
 801953c:	e7dc      	b.n	80194f8 <_strtol_l.isra.0+0x6c>
 801953e:	f04f 37ff 	mov.w	r7, #4294967295
 8019542:	e7e5      	b.n	8019510 <_strtol_l.isra.0+0x84>
 8019544:	1c7b      	adds	r3, r7, #1
 8019546:	d108      	bne.n	801955a <_strtol_l.isra.0+0xce>
 8019548:	2322      	movs	r3, #34	; 0x22
 801954a:	f8c8 3000 	str.w	r3, [r8]
 801954e:	4608      	mov	r0, r1
 8019550:	f1ba 0f00 	cmp.w	sl, #0
 8019554:	d107      	bne.n	8019566 <_strtol_l.isra.0+0xda>
 8019556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801955a:	b102      	cbz	r2, 801955e <_strtol_l.isra.0+0xd2>
 801955c:	4240      	negs	r0, r0
 801955e:	f1ba 0f00 	cmp.w	sl, #0
 8019562:	d0f8      	beq.n	8019556 <_strtol_l.isra.0+0xca>
 8019564:	b10f      	cbz	r7, 801956a <_strtol_l.isra.0+0xde>
 8019566:	f105 39ff 	add.w	r9, r5, #4294967295
 801956a:	f8ca 9000 	str.w	r9, [sl]
 801956e:	e7f2      	b.n	8019556 <_strtol_l.isra.0+0xca>
 8019570:	2430      	movs	r4, #48	; 0x30
 8019572:	2e00      	cmp	r6, #0
 8019574:	d1af      	bne.n	80194d6 <_strtol_l.isra.0+0x4a>
 8019576:	2608      	movs	r6, #8
 8019578:	e7ad      	b.n	80194d6 <_strtol_l.isra.0+0x4a>
 801957a:	2c30      	cmp	r4, #48	; 0x30
 801957c:	d0a3      	beq.n	80194c6 <_strtol_l.isra.0+0x3a>
 801957e:	260a      	movs	r6, #10
 8019580:	e7a9      	b.n	80194d6 <_strtol_l.isra.0+0x4a>
	...

08019584 <strtol>:
 8019584:	4b08      	ldr	r3, [pc, #32]	; (80195a8 <strtol+0x24>)
 8019586:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019588:	681c      	ldr	r4, [r3, #0]
 801958a:	4d08      	ldr	r5, [pc, #32]	; (80195ac <strtol+0x28>)
 801958c:	6a23      	ldr	r3, [r4, #32]
 801958e:	2b00      	cmp	r3, #0
 8019590:	bf08      	it	eq
 8019592:	462b      	moveq	r3, r5
 8019594:	9300      	str	r3, [sp, #0]
 8019596:	4613      	mov	r3, r2
 8019598:	460a      	mov	r2, r1
 801959a:	4601      	mov	r1, r0
 801959c:	4620      	mov	r0, r4
 801959e:	f7ff ff75 	bl	801948c <_strtol_l.isra.0>
 80195a2:	b003      	add	sp, #12
 80195a4:	bd30      	pop	{r4, r5, pc}
 80195a6:	bf00      	nop
 80195a8:	20000020 	.word	0x20000020
 80195ac:	20000084 	.word	0x20000084

080195b0 <__swbuf_r>:
 80195b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195b2:	460e      	mov	r6, r1
 80195b4:	4614      	mov	r4, r2
 80195b6:	4605      	mov	r5, r0
 80195b8:	b118      	cbz	r0, 80195c2 <__swbuf_r+0x12>
 80195ba:	6983      	ldr	r3, [r0, #24]
 80195bc:	b90b      	cbnz	r3, 80195c2 <__swbuf_r+0x12>
 80195be:	f000 f9b5 	bl	801992c <__sinit>
 80195c2:	4b21      	ldr	r3, [pc, #132]	; (8019648 <__swbuf_r+0x98>)
 80195c4:	429c      	cmp	r4, r3
 80195c6:	d12a      	bne.n	801961e <__swbuf_r+0x6e>
 80195c8:	686c      	ldr	r4, [r5, #4]
 80195ca:	69a3      	ldr	r3, [r4, #24]
 80195cc:	60a3      	str	r3, [r4, #8]
 80195ce:	89a3      	ldrh	r3, [r4, #12]
 80195d0:	071a      	lsls	r2, r3, #28
 80195d2:	d52e      	bpl.n	8019632 <__swbuf_r+0x82>
 80195d4:	6923      	ldr	r3, [r4, #16]
 80195d6:	b363      	cbz	r3, 8019632 <__swbuf_r+0x82>
 80195d8:	6923      	ldr	r3, [r4, #16]
 80195da:	6820      	ldr	r0, [r4, #0]
 80195dc:	1ac0      	subs	r0, r0, r3
 80195de:	6963      	ldr	r3, [r4, #20]
 80195e0:	b2f6      	uxtb	r6, r6
 80195e2:	4283      	cmp	r3, r0
 80195e4:	4637      	mov	r7, r6
 80195e6:	dc04      	bgt.n	80195f2 <__swbuf_r+0x42>
 80195e8:	4621      	mov	r1, r4
 80195ea:	4628      	mov	r0, r5
 80195ec:	f000 f934 	bl	8019858 <_fflush_r>
 80195f0:	bb28      	cbnz	r0, 801963e <__swbuf_r+0x8e>
 80195f2:	68a3      	ldr	r3, [r4, #8]
 80195f4:	3b01      	subs	r3, #1
 80195f6:	60a3      	str	r3, [r4, #8]
 80195f8:	6823      	ldr	r3, [r4, #0]
 80195fa:	1c5a      	adds	r2, r3, #1
 80195fc:	6022      	str	r2, [r4, #0]
 80195fe:	701e      	strb	r6, [r3, #0]
 8019600:	6963      	ldr	r3, [r4, #20]
 8019602:	3001      	adds	r0, #1
 8019604:	4283      	cmp	r3, r0
 8019606:	d004      	beq.n	8019612 <__swbuf_r+0x62>
 8019608:	89a3      	ldrh	r3, [r4, #12]
 801960a:	07db      	lsls	r3, r3, #31
 801960c:	d519      	bpl.n	8019642 <__swbuf_r+0x92>
 801960e:	2e0a      	cmp	r6, #10
 8019610:	d117      	bne.n	8019642 <__swbuf_r+0x92>
 8019612:	4621      	mov	r1, r4
 8019614:	4628      	mov	r0, r5
 8019616:	f000 f91f 	bl	8019858 <_fflush_r>
 801961a:	b190      	cbz	r0, 8019642 <__swbuf_r+0x92>
 801961c:	e00f      	b.n	801963e <__swbuf_r+0x8e>
 801961e:	4b0b      	ldr	r3, [pc, #44]	; (801964c <__swbuf_r+0x9c>)
 8019620:	429c      	cmp	r4, r3
 8019622:	d101      	bne.n	8019628 <__swbuf_r+0x78>
 8019624:	68ac      	ldr	r4, [r5, #8]
 8019626:	e7d0      	b.n	80195ca <__swbuf_r+0x1a>
 8019628:	4b09      	ldr	r3, [pc, #36]	; (8019650 <__swbuf_r+0xa0>)
 801962a:	429c      	cmp	r4, r3
 801962c:	bf08      	it	eq
 801962e:	68ec      	ldreq	r4, [r5, #12]
 8019630:	e7cb      	b.n	80195ca <__swbuf_r+0x1a>
 8019632:	4621      	mov	r1, r4
 8019634:	4628      	mov	r0, r5
 8019636:	f000 f81b 	bl	8019670 <__swsetup_r>
 801963a:	2800      	cmp	r0, #0
 801963c:	d0cc      	beq.n	80195d8 <__swbuf_r+0x28>
 801963e:	f04f 37ff 	mov.w	r7, #4294967295
 8019642:	4638      	mov	r0, r7
 8019644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019646:	bf00      	nop
 8019648:	0801e3a8 	.word	0x0801e3a8
 801964c:	0801e3c8 	.word	0x0801e3c8
 8019650:	0801e388 	.word	0x0801e388

08019654 <__ascii_wctomb>:
 8019654:	b149      	cbz	r1, 801966a <__ascii_wctomb+0x16>
 8019656:	2aff      	cmp	r2, #255	; 0xff
 8019658:	bf85      	ittet	hi
 801965a:	238a      	movhi	r3, #138	; 0x8a
 801965c:	6003      	strhi	r3, [r0, #0]
 801965e:	700a      	strbls	r2, [r1, #0]
 8019660:	f04f 30ff 	movhi.w	r0, #4294967295
 8019664:	bf98      	it	ls
 8019666:	2001      	movls	r0, #1
 8019668:	4770      	bx	lr
 801966a:	4608      	mov	r0, r1
 801966c:	4770      	bx	lr
	...

08019670 <__swsetup_r>:
 8019670:	4b32      	ldr	r3, [pc, #200]	; (801973c <__swsetup_r+0xcc>)
 8019672:	b570      	push	{r4, r5, r6, lr}
 8019674:	681d      	ldr	r5, [r3, #0]
 8019676:	4606      	mov	r6, r0
 8019678:	460c      	mov	r4, r1
 801967a:	b125      	cbz	r5, 8019686 <__swsetup_r+0x16>
 801967c:	69ab      	ldr	r3, [r5, #24]
 801967e:	b913      	cbnz	r3, 8019686 <__swsetup_r+0x16>
 8019680:	4628      	mov	r0, r5
 8019682:	f000 f953 	bl	801992c <__sinit>
 8019686:	4b2e      	ldr	r3, [pc, #184]	; (8019740 <__swsetup_r+0xd0>)
 8019688:	429c      	cmp	r4, r3
 801968a:	d10f      	bne.n	80196ac <__swsetup_r+0x3c>
 801968c:	686c      	ldr	r4, [r5, #4]
 801968e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019692:	b29a      	uxth	r2, r3
 8019694:	0715      	lsls	r5, r2, #28
 8019696:	d42c      	bmi.n	80196f2 <__swsetup_r+0x82>
 8019698:	06d0      	lsls	r0, r2, #27
 801969a:	d411      	bmi.n	80196c0 <__swsetup_r+0x50>
 801969c:	2209      	movs	r2, #9
 801969e:	6032      	str	r2, [r6, #0]
 80196a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196a4:	81a3      	strh	r3, [r4, #12]
 80196a6:	f04f 30ff 	mov.w	r0, #4294967295
 80196aa:	e03e      	b.n	801972a <__swsetup_r+0xba>
 80196ac:	4b25      	ldr	r3, [pc, #148]	; (8019744 <__swsetup_r+0xd4>)
 80196ae:	429c      	cmp	r4, r3
 80196b0:	d101      	bne.n	80196b6 <__swsetup_r+0x46>
 80196b2:	68ac      	ldr	r4, [r5, #8]
 80196b4:	e7eb      	b.n	801968e <__swsetup_r+0x1e>
 80196b6:	4b24      	ldr	r3, [pc, #144]	; (8019748 <__swsetup_r+0xd8>)
 80196b8:	429c      	cmp	r4, r3
 80196ba:	bf08      	it	eq
 80196bc:	68ec      	ldreq	r4, [r5, #12]
 80196be:	e7e6      	b.n	801968e <__swsetup_r+0x1e>
 80196c0:	0751      	lsls	r1, r2, #29
 80196c2:	d512      	bpl.n	80196ea <__swsetup_r+0x7a>
 80196c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80196c6:	b141      	cbz	r1, 80196da <__swsetup_r+0x6a>
 80196c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196cc:	4299      	cmp	r1, r3
 80196ce:	d002      	beq.n	80196d6 <__swsetup_r+0x66>
 80196d0:	4630      	mov	r0, r6
 80196d2:	f000 fa21 	bl	8019b18 <_free_r>
 80196d6:	2300      	movs	r3, #0
 80196d8:	6363      	str	r3, [r4, #52]	; 0x34
 80196da:	89a3      	ldrh	r3, [r4, #12]
 80196dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80196e0:	81a3      	strh	r3, [r4, #12]
 80196e2:	2300      	movs	r3, #0
 80196e4:	6063      	str	r3, [r4, #4]
 80196e6:	6923      	ldr	r3, [r4, #16]
 80196e8:	6023      	str	r3, [r4, #0]
 80196ea:	89a3      	ldrh	r3, [r4, #12]
 80196ec:	f043 0308 	orr.w	r3, r3, #8
 80196f0:	81a3      	strh	r3, [r4, #12]
 80196f2:	6923      	ldr	r3, [r4, #16]
 80196f4:	b94b      	cbnz	r3, 801970a <__swsetup_r+0x9a>
 80196f6:	89a3      	ldrh	r3, [r4, #12]
 80196f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80196fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019700:	d003      	beq.n	801970a <__swsetup_r+0x9a>
 8019702:	4621      	mov	r1, r4
 8019704:	4630      	mov	r0, r6
 8019706:	f000 f9bf 	bl	8019a88 <__smakebuf_r>
 801970a:	89a2      	ldrh	r2, [r4, #12]
 801970c:	f012 0301 	ands.w	r3, r2, #1
 8019710:	d00c      	beq.n	801972c <__swsetup_r+0xbc>
 8019712:	2300      	movs	r3, #0
 8019714:	60a3      	str	r3, [r4, #8]
 8019716:	6963      	ldr	r3, [r4, #20]
 8019718:	425b      	negs	r3, r3
 801971a:	61a3      	str	r3, [r4, #24]
 801971c:	6923      	ldr	r3, [r4, #16]
 801971e:	b953      	cbnz	r3, 8019736 <__swsetup_r+0xc6>
 8019720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019724:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019728:	d1ba      	bne.n	80196a0 <__swsetup_r+0x30>
 801972a:	bd70      	pop	{r4, r5, r6, pc}
 801972c:	0792      	lsls	r2, r2, #30
 801972e:	bf58      	it	pl
 8019730:	6963      	ldrpl	r3, [r4, #20]
 8019732:	60a3      	str	r3, [r4, #8]
 8019734:	e7f2      	b.n	801971c <__swsetup_r+0xac>
 8019736:	2000      	movs	r0, #0
 8019738:	e7f7      	b.n	801972a <__swsetup_r+0xba>
 801973a:	bf00      	nop
 801973c:	20000020 	.word	0x20000020
 8019740:	0801e3a8 	.word	0x0801e3a8
 8019744:	0801e3c8 	.word	0x0801e3c8
 8019748:	0801e388 	.word	0x0801e388

0801974c <__sflush_r>:
 801974c:	898a      	ldrh	r2, [r1, #12]
 801974e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019752:	4605      	mov	r5, r0
 8019754:	0710      	lsls	r0, r2, #28
 8019756:	460c      	mov	r4, r1
 8019758:	d458      	bmi.n	801980c <__sflush_r+0xc0>
 801975a:	684b      	ldr	r3, [r1, #4]
 801975c:	2b00      	cmp	r3, #0
 801975e:	dc05      	bgt.n	801976c <__sflush_r+0x20>
 8019760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019762:	2b00      	cmp	r3, #0
 8019764:	dc02      	bgt.n	801976c <__sflush_r+0x20>
 8019766:	2000      	movs	r0, #0
 8019768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801976c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801976e:	2e00      	cmp	r6, #0
 8019770:	d0f9      	beq.n	8019766 <__sflush_r+0x1a>
 8019772:	2300      	movs	r3, #0
 8019774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019778:	682f      	ldr	r7, [r5, #0]
 801977a:	6a21      	ldr	r1, [r4, #32]
 801977c:	602b      	str	r3, [r5, #0]
 801977e:	d032      	beq.n	80197e6 <__sflush_r+0x9a>
 8019780:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019782:	89a3      	ldrh	r3, [r4, #12]
 8019784:	075a      	lsls	r2, r3, #29
 8019786:	d505      	bpl.n	8019794 <__sflush_r+0x48>
 8019788:	6863      	ldr	r3, [r4, #4]
 801978a:	1ac0      	subs	r0, r0, r3
 801978c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801978e:	b10b      	cbz	r3, 8019794 <__sflush_r+0x48>
 8019790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019792:	1ac0      	subs	r0, r0, r3
 8019794:	2300      	movs	r3, #0
 8019796:	4602      	mov	r2, r0
 8019798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801979a:	6a21      	ldr	r1, [r4, #32]
 801979c:	4628      	mov	r0, r5
 801979e:	47b0      	blx	r6
 80197a0:	1c43      	adds	r3, r0, #1
 80197a2:	89a3      	ldrh	r3, [r4, #12]
 80197a4:	d106      	bne.n	80197b4 <__sflush_r+0x68>
 80197a6:	6829      	ldr	r1, [r5, #0]
 80197a8:	291d      	cmp	r1, #29
 80197aa:	d848      	bhi.n	801983e <__sflush_r+0xf2>
 80197ac:	4a29      	ldr	r2, [pc, #164]	; (8019854 <__sflush_r+0x108>)
 80197ae:	40ca      	lsrs	r2, r1
 80197b0:	07d6      	lsls	r6, r2, #31
 80197b2:	d544      	bpl.n	801983e <__sflush_r+0xf2>
 80197b4:	2200      	movs	r2, #0
 80197b6:	6062      	str	r2, [r4, #4]
 80197b8:	04d9      	lsls	r1, r3, #19
 80197ba:	6922      	ldr	r2, [r4, #16]
 80197bc:	6022      	str	r2, [r4, #0]
 80197be:	d504      	bpl.n	80197ca <__sflush_r+0x7e>
 80197c0:	1c42      	adds	r2, r0, #1
 80197c2:	d101      	bne.n	80197c8 <__sflush_r+0x7c>
 80197c4:	682b      	ldr	r3, [r5, #0]
 80197c6:	b903      	cbnz	r3, 80197ca <__sflush_r+0x7e>
 80197c8:	6560      	str	r0, [r4, #84]	; 0x54
 80197ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80197cc:	602f      	str	r7, [r5, #0]
 80197ce:	2900      	cmp	r1, #0
 80197d0:	d0c9      	beq.n	8019766 <__sflush_r+0x1a>
 80197d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197d6:	4299      	cmp	r1, r3
 80197d8:	d002      	beq.n	80197e0 <__sflush_r+0x94>
 80197da:	4628      	mov	r0, r5
 80197dc:	f000 f99c 	bl	8019b18 <_free_r>
 80197e0:	2000      	movs	r0, #0
 80197e2:	6360      	str	r0, [r4, #52]	; 0x34
 80197e4:	e7c0      	b.n	8019768 <__sflush_r+0x1c>
 80197e6:	2301      	movs	r3, #1
 80197e8:	4628      	mov	r0, r5
 80197ea:	47b0      	blx	r6
 80197ec:	1c41      	adds	r1, r0, #1
 80197ee:	d1c8      	bne.n	8019782 <__sflush_r+0x36>
 80197f0:	682b      	ldr	r3, [r5, #0]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d0c5      	beq.n	8019782 <__sflush_r+0x36>
 80197f6:	2b1d      	cmp	r3, #29
 80197f8:	d001      	beq.n	80197fe <__sflush_r+0xb2>
 80197fa:	2b16      	cmp	r3, #22
 80197fc:	d101      	bne.n	8019802 <__sflush_r+0xb6>
 80197fe:	602f      	str	r7, [r5, #0]
 8019800:	e7b1      	b.n	8019766 <__sflush_r+0x1a>
 8019802:	89a3      	ldrh	r3, [r4, #12]
 8019804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019808:	81a3      	strh	r3, [r4, #12]
 801980a:	e7ad      	b.n	8019768 <__sflush_r+0x1c>
 801980c:	690f      	ldr	r7, [r1, #16]
 801980e:	2f00      	cmp	r7, #0
 8019810:	d0a9      	beq.n	8019766 <__sflush_r+0x1a>
 8019812:	0793      	lsls	r3, r2, #30
 8019814:	680e      	ldr	r6, [r1, #0]
 8019816:	bf08      	it	eq
 8019818:	694b      	ldreq	r3, [r1, #20]
 801981a:	600f      	str	r7, [r1, #0]
 801981c:	bf18      	it	ne
 801981e:	2300      	movne	r3, #0
 8019820:	eba6 0807 	sub.w	r8, r6, r7
 8019824:	608b      	str	r3, [r1, #8]
 8019826:	f1b8 0f00 	cmp.w	r8, #0
 801982a:	dd9c      	ble.n	8019766 <__sflush_r+0x1a>
 801982c:	4643      	mov	r3, r8
 801982e:	463a      	mov	r2, r7
 8019830:	6a21      	ldr	r1, [r4, #32]
 8019832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019834:	4628      	mov	r0, r5
 8019836:	47b0      	blx	r6
 8019838:	2800      	cmp	r0, #0
 801983a:	dc06      	bgt.n	801984a <__sflush_r+0xfe>
 801983c:	89a3      	ldrh	r3, [r4, #12]
 801983e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019842:	81a3      	strh	r3, [r4, #12]
 8019844:	f04f 30ff 	mov.w	r0, #4294967295
 8019848:	e78e      	b.n	8019768 <__sflush_r+0x1c>
 801984a:	4407      	add	r7, r0
 801984c:	eba8 0800 	sub.w	r8, r8, r0
 8019850:	e7e9      	b.n	8019826 <__sflush_r+0xda>
 8019852:	bf00      	nop
 8019854:	20400001 	.word	0x20400001

08019858 <_fflush_r>:
 8019858:	b538      	push	{r3, r4, r5, lr}
 801985a:	690b      	ldr	r3, [r1, #16]
 801985c:	4605      	mov	r5, r0
 801985e:	460c      	mov	r4, r1
 8019860:	b1db      	cbz	r3, 801989a <_fflush_r+0x42>
 8019862:	b118      	cbz	r0, 801986c <_fflush_r+0x14>
 8019864:	6983      	ldr	r3, [r0, #24]
 8019866:	b90b      	cbnz	r3, 801986c <_fflush_r+0x14>
 8019868:	f000 f860 	bl	801992c <__sinit>
 801986c:	4b0c      	ldr	r3, [pc, #48]	; (80198a0 <_fflush_r+0x48>)
 801986e:	429c      	cmp	r4, r3
 8019870:	d109      	bne.n	8019886 <_fflush_r+0x2e>
 8019872:	686c      	ldr	r4, [r5, #4]
 8019874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019878:	b17b      	cbz	r3, 801989a <_fflush_r+0x42>
 801987a:	4621      	mov	r1, r4
 801987c:	4628      	mov	r0, r5
 801987e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019882:	f7ff bf63 	b.w	801974c <__sflush_r>
 8019886:	4b07      	ldr	r3, [pc, #28]	; (80198a4 <_fflush_r+0x4c>)
 8019888:	429c      	cmp	r4, r3
 801988a:	d101      	bne.n	8019890 <_fflush_r+0x38>
 801988c:	68ac      	ldr	r4, [r5, #8]
 801988e:	e7f1      	b.n	8019874 <_fflush_r+0x1c>
 8019890:	4b05      	ldr	r3, [pc, #20]	; (80198a8 <_fflush_r+0x50>)
 8019892:	429c      	cmp	r4, r3
 8019894:	bf08      	it	eq
 8019896:	68ec      	ldreq	r4, [r5, #12]
 8019898:	e7ec      	b.n	8019874 <_fflush_r+0x1c>
 801989a:	2000      	movs	r0, #0
 801989c:	bd38      	pop	{r3, r4, r5, pc}
 801989e:	bf00      	nop
 80198a0:	0801e3a8 	.word	0x0801e3a8
 80198a4:	0801e3c8 	.word	0x0801e3c8
 80198a8:	0801e388 	.word	0x0801e388

080198ac <std>:
 80198ac:	2300      	movs	r3, #0
 80198ae:	b510      	push	{r4, lr}
 80198b0:	4604      	mov	r4, r0
 80198b2:	e9c0 3300 	strd	r3, r3, [r0]
 80198b6:	6083      	str	r3, [r0, #8]
 80198b8:	8181      	strh	r1, [r0, #12]
 80198ba:	6643      	str	r3, [r0, #100]	; 0x64
 80198bc:	81c2      	strh	r2, [r0, #14]
 80198be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80198c2:	6183      	str	r3, [r0, #24]
 80198c4:	4619      	mov	r1, r3
 80198c6:	2208      	movs	r2, #8
 80198c8:	305c      	adds	r0, #92	; 0x5c
 80198ca:	f7ff fd26 	bl	801931a <memset>
 80198ce:	4b05      	ldr	r3, [pc, #20]	; (80198e4 <std+0x38>)
 80198d0:	6263      	str	r3, [r4, #36]	; 0x24
 80198d2:	4b05      	ldr	r3, [pc, #20]	; (80198e8 <std+0x3c>)
 80198d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80198d6:	4b05      	ldr	r3, [pc, #20]	; (80198ec <std+0x40>)
 80198d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80198da:	4b05      	ldr	r3, [pc, #20]	; (80198f0 <std+0x44>)
 80198dc:	6224      	str	r4, [r4, #32]
 80198de:	6323      	str	r3, [r4, #48]	; 0x30
 80198e0:	bd10      	pop	{r4, pc}
 80198e2:	bf00      	nop
 80198e4:	0801a219 	.word	0x0801a219
 80198e8:	0801a23b 	.word	0x0801a23b
 80198ec:	0801a273 	.word	0x0801a273
 80198f0:	0801a297 	.word	0x0801a297

080198f4 <_cleanup_r>:
 80198f4:	4901      	ldr	r1, [pc, #4]	; (80198fc <_cleanup_r+0x8>)
 80198f6:	f000 b885 	b.w	8019a04 <_fwalk_reent>
 80198fa:	bf00      	nop
 80198fc:	08019859 	.word	0x08019859

08019900 <__sfmoreglue>:
 8019900:	b570      	push	{r4, r5, r6, lr}
 8019902:	1e4a      	subs	r2, r1, #1
 8019904:	2568      	movs	r5, #104	; 0x68
 8019906:	4355      	muls	r5, r2
 8019908:	460e      	mov	r6, r1
 801990a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801990e:	f000 f951 	bl	8019bb4 <_malloc_r>
 8019912:	4604      	mov	r4, r0
 8019914:	b140      	cbz	r0, 8019928 <__sfmoreglue+0x28>
 8019916:	2100      	movs	r1, #0
 8019918:	e9c0 1600 	strd	r1, r6, [r0]
 801991c:	300c      	adds	r0, #12
 801991e:	60a0      	str	r0, [r4, #8]
 8019920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019924:	f7ff fcf9 	bl	801931a <memset>
 8019928:	4620      	mov	r0, r4
 801992a:	bd70      	pop	{r4, r5, r6, pc}

0801992c <__sinit>:
 801992c:	6983      	ldr	r3, [r0, #24]
 801992e:	b510      	push	{r4, lr}
 8019930:	4604      	mov	r4, r0
 8019932:	bb33      	cbnz	r3, 8019982 <__sinit+0x56>
 8019934:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019938:	6503      	str	r3, [r0, #80]	; 0x50
 801993a:	4b12      	ldr	r3, [pc, #72]	; (8019984 <__sinit+0x58>)
 801993c:	4a12      	ldr	r2, [pc, #72]	; (8019988 <__sinit+0x5c>)
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	6282      	str	r2, [r0, #40]	; 0x28
 8019942:	4298      	cmp	r0, r3
 8019944:	bf04      	itt	eq
 8019946:	2301      	moveq	r3, #1
 8019948:	6183      	streq	r3, [r0, #24]
 801994a:	f000 f81f 	bl	801998c <__sfp>
 801994e:	6060      	str	r0, [r4, #4]
 8019950:	4620      	mov	r0, r4
 8019952:	f000 f81b 	bl	801998c <__sfp>
 8019956:	60a0      	str	r0, [r4, #8]
 8019958:	4620      	mov	r0, r4
 801995a:	f000 f817 	bl	801998c <__sfp>
 801995e:	2200      	movs	r2, #0
 8019960:	60e0      	str	r0, [r4, #12]
 8019962:	2104      	movs	r1, #4
 8019964:	6860      	ldr	r0, [r4, #4]
 8019966:	f7ff ffa1 	bl	80198ac <std>
 801996a:	2201      	movs	r2, #1
 801996c:	2109      	movs	r1, #9
 801996e:	68a0      	ldr	r0, [r4, #8]
 8019970:	f7ff ff9c 	bl	80198ac <std>
 8019974:	2202      	movs	r2, #2
 8019976:	2112      	movs	r1, #18
 8019978:	68e0      	ldr	r0, [r4, #12]
 801997a:	f7ff ff97 	bl	80198ac <std>
 801997e:	2301      	movs	r3, #1
 8019980:	61a3      	str	r3, [r4, #24]
 8019982:	bd10      	pop	{r4, pc}
 8019984:	0801e278 	.word	0x0801e278
 8019988:	080198f5 	.word	0x080198f5

0801998c <__sfp>:
 801998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801998e:	4b1b      	ldr	r3, [pc, #108]	; (80199fc <__sfp+0x70>)
 8019990:	681e      	ldr	r6, [r3, #0]
 8019992:	69b3      	ldr	r3, [r6, #24]
 8019994:	4607      	mov	r7, r0
 8019996:	b913      	cbnz	r3, 801999e <__sfp+0x12>
 8019998:	4630      	mov	r0, r6
 801999a:	f7ff ffc7 	bl	801992c <__sinit>
 801999e:	3648      	adds	r6, #72	; 0x48
 80199a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80199a4:	3b01      	subs	r3, #1
 80199a6:	d503      	bpl.n	80199b0 <__sfp+0x24>
 80199a8:	6833      	ldr	r3, [r6, #0]
 80199aa:	b133      	cbz	r3, 80199ba <__sfp+0x2e>
 80199ac:	6836      	ldr	r6, [r6, #0]
 80199ae:	e7f7      	b.n	80199a0 <__sfp+0x14>
 80199b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80199b4:	b16d      	cbz	r5, 80199d2 <__sfp+0x46>
 80199b6:	3468      	adds	r4, #104	; 0x68
 80199b8:	e7f4      	b.n	80199a4 <__sfp+0x18>
 80199ba:	2104      	movs	r1, #4
 80199bc:	4638      	mov	r0, r7
 80199be:	f7ff ff9f 	bl	8019900 <__sfmoreglue>
 80199c2:	6030      	str	r0, [r6, #0]
 80199c4:	2800      	cmp	r0, #0
 80199c6:	d1f1      	bne.n	80199ac <__sfp+0x20>
 80199c8:	230c      	movs	r3, #12
 80199ca:	603b      	str	r3, [r7, #0]
 80199cc:	4604      	mov	r4, r0
 80199ce:	4620      	mov	r0, r4
 80199d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199d2:	4b0b      	ldr	r3, [pc, #44]	; (8019a00 <__sfp+0x74>)
 80199d4:	6665      	str	r5, [r4, #100]	; 0x64
 80199d6:	e9c4 5500 	strd	r5, r5, [r4]
 80199da:	60a5      	str	r5, [r4, #8]
 80199dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80199e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80199e4:	2208      	movs	r2, #8
 80199e6:	4629      	mov	r1, r5
 80199e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80199ec:	f7ff fc95 	bl	801931a <memset>
 80199f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80199f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80199f8:	e7e9      	b.n	80199ce <__sfp+0x42>
 80199fa:	bf00      	nop
 80199fc:	0801e278 	.word	0x0801e278
 8019a00:	ffff0001 	.word	0xffff0001

08019a04 <_fwalk_reent>:
 8019a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a08:	4680      	mov	r8, r0
 8019a0a:	4689      	mov	r9, r1
 8019a0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019a10:	2600      	movs	r6, #0
 8019a12:	b914      	cbnz	r4, 8019a1a <_fwalk_reent+0x16>
 8019a14:	4630      	mov	r0, r6
 8019a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019a1e:	3f01      	subs	r7, #1
 8019a20:	d501      	bpl.n	8019a26 <_fwalk_reent+0x22>
 8019a22:	6824      	ldr	r4, [r4, #0]
 8019a24:	e7f5      	b.n	8019a12 <_fwalk_reent+0xe>
 8019a26:	89ab      	ldrh	r3, [r5, #12]
 8019a28:	2b01      	cmp	r3, #1
 8019a2a:	d907      	bls.n	8019a3c <_fwalk_reent+0x38>
 8019a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019a30:	3301      	adds	r3, #1
 8019a32:	d003      	beq.n	8019a3c <_fwalk_reent+0x38>
 8019a34:	4629      	mov	r1, r5
 8019a36:	4640      	mov	r0, r8
 8019a38:	47c8      	blx	r9
 8019a3a:	4306      	orrs	r6, r0
 8019a3c:	3568      	adds	r5, #104	; 0x68
 8019a3e:	e7ee      	b.n	8019a1e <_fwalk_reent+0x1a>

08019a40 <__swhatbuf_r>:
 8019a40:	b570      	push	{r4, r5, r6, lr}
 8019a42:	460e      	mov	r6, r1
 8019a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a48:	2900      	cmp	r1, #0
 8019a4a:	b096      	sub	sp, #88	; 0x58
 8019a4c:	4614      	mov	r4, r2
 8019a4e:	461d      	mov	r5, r3
 8019a50:	da07      	bge.n	8019a62 <__swhatbuf_r+0x22>
 8019a52:	2300      	movs	r3, #0
 8019a54:	602b      	str	r3, [r5, #0]
 8019a56:	89b3      	ldrh	r3, [r6, #12]
 8019a58:	061a      	lsls	r2, r3, #24
 8019a5a:	d410      	bmi.n	8019a7e <__swhatbuf_r+0x3e>
 8019a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a60:	e00e      	b.n	8019a80 <__swhatbuf_r+0x40>
 8019a62:	466a      	mov	r2, sp
 8019a64:	f000 fc3e 	bl	801a2e4 <_fstat_r>
 8019a68:	2800      	cmp	r0, #0
 8019a6a:	dbf2      	blt.n	8019a52 <__swhatbuf_r+0x12>
 8019a6c:	9a01      	ldr	r2, [sp, #4]
 8019a6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019a72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019a76:	425a      	negs	r2, r3
 8019a78:	415a      	adcs	r2, r3
 8019a7a:	602a      	str	r2, [r5, #0]
 8019a7c:	e7ee      	b.n	8019a5c <__swhatbuf_r+0x1c>
 8019a7e:	2340      	movs	r3, #64	; 0x40
 8019a80:	2000      	movs	r0, #0
 8019a82:	6023      	str	r3, [r4, #0]
 8019a84:	b016      	add	sp, #88	; 0x58
 8019a86:	bd70      	pop	{r4, r5, r6, pc}

08019a88 <__smakebuf_r>:
 8019a88:	898b      	ldrh	r3, [r1, #12]
 8019a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a8c:	079d      	lsls	r5, r3, #30
 8019a8e:	4606      	mov	r6, r0
 8019a90:	460c      	mov	r4, r1
 8019a92:	d507      	bpl.n	8019aa4 <__smakebuf_r+0x1c>
 8019a94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019a98:	6023      	str	r3, [r4, #0]
 8019a9a:	6123      	str	r3, [r4, #16]
 8019a9c:	2301      	movs	r3, #1
 8019a9e:	6163      	str	r3, [r4, #20]
 8019aa0:	b002      	add	sp, #8
 8019aa2:	bd70      	pop	{r4, r5, r6, pc}
 8019aa4:	ab01      	add	r3, sp, #4
 8019aa6:	466a      	mov	r2, sp
 8019aa8:	f7ff ffca 	bl	8019a40 <__swhatbuf_r>
 8019aac:	9900      	ldr	r1, [sp, #0]
 8019aae:	4605      	mov	r5, r0
 8019ab0:	4630      	mov	r0, r6
 8019ab2:	f000 f87f 	bl	8019bb4 <_malloc_r>
 8019ab6:	b948      	cbnz	r0, 8019acc <__smakebuf_r+0x44>
 8019ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019abc:	059a      	lsls	r2, r3, #22
 8019abe:	d4ef      	bmi.n	8019aa0 <__smakebuf_r+0x18>
 8019ac0:	f023 0303 	bic.w	r3, r3, #3
 8019ac4:	f043 0302 	orr.w	r3, r3, #2
 8019ac8:	81a3      	strh	r3, [r4, #12]
 8019aca:	e7e3      	b.n	8019a94 <__smakebuf_r+0xc>
 8019acc:	4b0d      	ldr	r3, [pc, #52]	; (8019b04 <__smakebuf_r+0x7c>)
 8019ace:	62b3      	str	r3, [r6, #40]	; 0x28
 8019ad0:	89a3      	ldrh	r3, [r4, #12]
 8019ad2:	6020      	str	r0, [r4, #0]
 8019ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ad8:	81a3      	strh	r3, [r4, #12]
 8019ada:	9b00      	ldr	r3, [sp, #0]
 8019adc:	6163      	str	r3, [r4, #20]
 8019ade:	9b01      	ldr	r3, [sp, #4]
 8019ae0:	6120      	str	r0, [r4, #16]
 8019ae2:	b15b      	cbz	r3, 8019afc <__smakebuf_r+0x74>
 8019ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019ae8:	4630      	mov	r0, r6
 8019aea:	f000 fc0d 	bl	801a308 <_isatty_r>
 8019aee:	b128      	cbz	r0, 8019afc <__smakebuf_r+0x74>
 8019af0:	89a3      	ldrh	r3, [r4, #12]
 8019af2:	f023 0303 	bic.w	r3, r3, #3
 8019af6:	f043 0301 	orr.w	r3, r3, #1
 8019afa:	81a3      	strh	r3, [r4, #12]
 8019afc:	89a3      	ldrh	r3, [r4, #12]
 8019afe:	431d      	orrs	r5, r3
 8019b00:	81a5      	strh	r5, [r4, #12]
 8019b02:	e7cd      	b.n	8019aa0 <__smakebuf_r+0x18>
 8019b04:	080198f5 	.word	0x080198f5

08019b08 <malloc>:
 8019b08:	4b02      	ldr	r3, [pc, #8]	; (8019b14 <malloc+0xc>)
 8019b0a:	4601      	mov	r1, r0
 8019b0c:	6818      	ldr	r0, [r3, #0]
 8019b0e:	f000 b851 	b.w	8019bb4 <_malloc_r>
 8019b12:	bf00      	nop
 8019b14:	20000020 	.word	0x20000020

08019b18 <_free_r>:
 8019b18:	b538      	push	{r3, r4, r5, lr}
 8019b1a:	4605      	mov	r5, r0
 8019b1c:	2900      	cmp	r1, #0
 8019b1e:	d045      	beq.n	8019bac <_free_r+0x94>
 8019b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b24:	1f0c      	subs	r4, r1, #4
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	bfb8      	it	lt
 8019b2a:	18e4      	addlt	r4, r4, r3
 8019b2c:	f000 fc0e 	bl	801a34c <__malloc_lock>
 8019b30:	4a1f      	ldr	r2, [pc, #124]	; (8019bb0 <_free_r+0x98>)
 8019b32:	6813      	ldr	r3, [r2, #0]
 8019b34:	4610      	mov	r0, r2
 8019b36:	b933      	cbnz	r3, 8019b46 <_free_r+0x2e>
 8019b38:	6063      	str	r3, [r4, #4]
 8019b3a:	6014      	str	r4, [r2, #0]
 8019b3c:	4628      	mov	r0, r5
 8019b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b42:	f000 bc04 	b.w	801a34e <__malloc_unlock>
 8019b46:	42a3      	cmp	r3, r4
 8019b48:	d90c      	bls.n	8019b64 <_free_r+0x4c>
 8019b4a:	6821      	ldr	r1, [r4, #0]
 8019b4c:	1862      	adds	r2, r4, r1
 8019b4e:	4293      	cmp	r3, r2
 8019b50:	bf04      	itt	eq
 8019b52:	681a      	ldreq	r2, [r3, #0]
 8019b54:	685b      	ldreq	r3, [r3, #4]
 8019b56:	6063      	str	r3, [r4, #4]
 8019b58:	bf04      	itt	eq
 8019b5a:	1852      	addeq	r2, r2, r1
 8019b5c:	6022      	streq	r2, [r4, #0]
 8019b5e:	6004      	str	r4, [r0, #0]
 8019b60:	e7ec      	b.n	8019b3c <_free_r+0x24>
 8019b62:	4613      	mov	r3, r2
 8019b64:	685a      	ldr	r2, [r3, #4]
 8019b66:	b10a      	cbz	r2, 8019b6c <_free_r+0x54>
 8019b68:	42a2      	cmp	r2, r4
 8019b6a:	d9fa      	bls.n	8019b62 <_free_r+0x4a>
 8019b6c:	6819      	ldr	r1, [r3, #0]
 8019b6e:	1858      	adds	r0, r3, r1
 8019b70:	42a0      	cmp	r0, r4
 8019b72:	d10b      	bne.n	8019b8c <_free_r+0x74>
 8019b74:	6820      	ldr	r0, [r4, #0]
 8019b76:	4401      	add	r1, r0
 8019b78:	1858      	adds	r0, r3, r1
 8019b7a:	4282      	cmp	r2, r0
 8019b7c:	6019      	str	r1, [r3, #0]
 8019b7e:	d1dd      	bne.n	8019b3c <_free_r+0x24>
 8019b80:	6810      	ldr	r0, [r2, #0]
 8019b82:	6852      	ldr	r2, [r2, #4]
 8019b84:	605a      	str	r2, [r3, #4]
 8019b86:	4401      	add	r1, r0
 8019b88:	6019      	str	r1, [r3, #0]
 8019b8a:	e7d7      	b.n	8019b3c <_free_r+0x24>
 8019b8c:	d902      	bls.n	8019b94 <_free_r+0x7c>
 8019b8e:	230c      	movs	r3, #12
 8019b90:	602b      	str	r3, [r5, #0]
 8019b92:	e7d3      	b.n	8019b3c <_free_r+0x24>
 8019b94:	6820      	ldr	r0, [r4, #0]
 8019b96:	1821      	adds	r1, r4, r0
 8019b98:	428a      	cmp	r2, r1
 8019b9a:	bf04      	itt	eq
 8019b9c:	6811      	ldreq	r1, [r2, #0]
 8019b9e:	6852      	ldreq	r2, [r2, #4]
 8019ba0:	6062      	str	r2, [r4, #4]
 8019ba2:	bf04      	itt	eq
 8019ba4:	1809      	addeq	r1, r1, r0
 8019ba6:	6021      	streq	r1, [r4, #0]
 8019ba8:	605c      	str	r4, [r3, #4]
 8019baa:	e7c7      	b.n	8019b3c <_free_r+0x24>
 8019bac:	bd38      	pop	{r3, r4, r5, pc}
 8019bae:	bf00      	nop
 8019bb0:	20004398 	.word	0x20004398

08019bb4 <_malloc_r>:
 8019bb4:	b570      	push	{r4, r5, r6, lr}
 8019bb6:	1ccd      	adds	r5, r1, #3
 8019bb8:	f025 0503 	bic.w	r5, r5, #3
 8019bbc:	3508      	adds	r5, #8
 8019bbe:	2d0c      	cmp	r5, #12
 8019bc0:	bf38      	it	cc
 8019bc2:	250c      	movcc	r5, #12
 8019bc4:	2d00      	cmp	r5, #0
 8019bc6:	4606      	mov	r6, r0
 8019bc8:	db01      	blt.n	8019bce <_malloc_r+0x1a>
 8019bca:	42a9      	cmp	r1, r5
 8019bcc:	d903      	bls.n	8019bd6 <_malloc_r+0x22>
 8019bce:	230c      	movs	r3, #12
 8019bd0:	6033      	str	r3, [r6, #0]
 8019bd2:	2000      	movs	r0, #0
 8019bd4:	bd70      	pop	{r4, r5, r6, pc}
 8019bd6:	f000 fbb9 	bl	801a34c <__malloc_lock>
 8019bda:	4a21      	ldr	r2, [pc, #132]	; (8019c60 <_malloc_r+0xac>)
 8019bdc:	6814      	ldr	r4, [r2, #0]
 8019bde:	4621      	mov	r1, r4
 8019be0:	b991      	cbnz	r1, 8019c08 <_malloc_r+0x54>
 8019be2:	4c20      	ldr	r4, [pc, #128]	; (8019c64 <_malloc_r+0xb0>)
 8019be4:	6823      	ldr	r3, [r4, #0]
 8019be6:	b91b      	cbnz	r3, 8019bf0 <_malloc_r+0x3c>
 8019be8:	4630      	mov	r0, r6
 8019bea:	f000 fb05 	bl	801a1f8 <_sbrk_r>
 8019bee:	6020      	str	r0, [r4, #0]
 8019bf0:	4629      	mov	r1, r5
 8019bf2:	4630      	mov	r0, r6
 8019bf4:	f000 fb00 	bl	801a1f8 <_sbrk_r>
 8019bf8:	1c43      	adds	r3, r0, #1
 8019bfa:	d124      	bne.n	8019c46 <_malloc_r+0x92>
 8019bfc:	230c      	movs	r3, #12
 8019bfe:	6033      	str	r3, [r6, #0]
 8019c00:	4630      	mov	r0, r6
 8019c02:	f000 fba4 	bl	801a34e <__malloc_unlock>
 8019c06:	e7e4      	b.n	8019bd2 <_malloc_r+0x1e>
 8019c08:	680b      	ldr	r3, [r1, #0]
 8019c0a:	1b5b      	subs	r3, r3, r5
 8019c0c:	d418      	bmi.n	8019c40 <_malloc_r+0x8c>
 8019c0e:	2b0b      	cmp	r3, #11
 8019c10:	d90f      	bls.n	8019c32 <_malloc_r+0x7e>
 8019c12:	600b      	str	r3, [r1, #0]
 8019c14:	50cd      	str	r5, [r1, r3]
 8019c16:	18cc      	adds	r4, r1, r3
 8019c18:	4630      	mov	r0, r6
 8019c1a:	f000 fb98 	bl	801a34e <__malloc_unlock>
 8019c1e:	f104 000b 	add.w	r0, r4, #11
 8019c22:	1d23      	adds	r3, r4, #4
 8019c24:	f020 0007 	bic.w	r0, r0, #7
 8019c28:	1ac3      	subs	r3, r0, r3
 8019c2a:	d0d3      	beq.n	8019bd4 <_malloc_r+0x20>
 8019c2c:	425a      	negs	r2, r3
 8019c2e:	50e2      	str	r2, [r4, r3]
 8019c30:	e7d0      	b.n	8019bd4 <_malloc_r+0x20>
 8019c32:	428c      	cmp	r4, r1
 8019c34:	684b      	ldr	r3, [r1, #4]
 8019c36:	bf16      	itet	ne
 8019c38:	6063      	strne	r3, [r4, #4]
 8019c3a:	6013      	streq	r3, [r2, #0]
 8019c3c:	460c      	movne	r4, r1
 8019c3e:	e7eb      	b.n	8019c18 <_malloc_r+0x64>
 8019c40:	460c      	mov	r4, r1
 8019c42:	6849      	ldr	r1, [r1, #4]
 8019c44:	e7cc      	b.n	8019be0 <_malloc_r+0x2c>
 8019c46:	1cc4      	adds	r4, r0, #3
 8019c48:	f024 0403 	bic.w	r4, r4, #3
 8019c4c:	42a0      	cmp	r0, r4
 8019c4e:	d005      	beq.n	8019c5c <_malloc_r+0xa8>
 8019c50:	1a21      	subs	r1, r4, r0
 8019c52:	4630      	mov	r0, r6
 8019c54:	f000 fad0 	bl	801a1f8 <_sbrk_r>
 8019c58:	3001      	adds	r0, #1
 8019c5a:	d0cf      	beq.n	8019bfc <_malloc_r+0x48>
 8019c5c:	6025      	str	r5, [r4, #0]
 8019c5e:	e7db      	b.n	8019c18 <_malloc_r+0x64>
 8019c60:	20004398 	.word	0x20004398
 8019c64:	2000439c 	.word	0x2000439c

08019c68 <__sfputc_r>:
 8019c68:	6893      	ldr	r3, [r2, #8]
 8019c6a:	3b01      	subs	r3, #1
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	b410      	push	{r4}
 8019c70:	6093      	str	r3, [r2, #8]
 8019c72:	da08      	bge.n	8019c86 <__sfputc_r+0x1e>
 8019c74:	6994      	ldr	r4, [r2, #24]
 8019c76:	42a3      	cmp	r3, r4
 8019c78:	db01      	blt.n	8019c7e <__sfputc_r+0x16>
 8019c7a:	290a      	cmp	r1, #10
 8019c7c:	d103      	bne.n	8019c86 <__sfputc_r+0x1e>
 8019c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c82:	f7ff bc95 	b.w	80195b0 <__swbuf_r>
 8019c86:	6813      	ldr	r3, [r2, #0]
 8019c88:	1c58      	adds	r0, r3, #1
 8019c8a:	6010      	str	r0, [r2, #0]
 8019c8c:	7019      	strb	r1, [r3, #0]
 8019c8e:	4608      	mov	r0, r1
 8019c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c94:	4770      	bx	lr

08019c96 <__sfputs_r>:
 8019c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c98:	4606      	mov	r6, r0
 8019c9a:	460f      	mov	r7, r1
 8019c9c:	4614      	mov	r4, r2
 8019c9e:	18d5      	adds	r5, r2, r3
 8019ca0:	42ac      	cmp	r4, r5
 8019ca2:	d101      	bne.n	8019ca8 <__sfputs_r+0x12>
 8019ca4:	2000      	movs	r0, #0
 8019ca6:	e007      	b.n	8019cb8 <__sfputs_r+0x22>
 8019ca8:	463a      	mov	r2, r7
 8019caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cae:	4630      	mov	r0, r6
 8019cb0:	f7ff ffda 	bl	8019c68 <__sfputc_r>
 8019cb4:	1c43      	adds	r3, r0, #1
 8019cb6:	d1f3      	bne.n	8019ca0 <__sfputs_r+0xa>
 8019cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019cbc <_vfiprintf_r>:
 8019cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc0:	460c      	mov	r4, r1
 8019cc2:	b09d      	sub	sp, #116	; 0x74
 8019cc4:	4617      	mov	r7, r2
 8019cc6:	461d      	mov	r5, r3
 8019cc8:	4606      	mov	r6, r0
 8019cca:	b118      	cbz	r0, 8019cd4 <_vfiprintf_r+0x18>
 8019ccc:	6983      	ldr	r3, [r0, #24]
 8019cce:	b90b      	cbnz	r3, 8019cd4 <_vfiprintf_r+0x18>
 8019cd0:	f7ff fe2c 	bl	801992c <__sinit>
 8019cd4:	4b7c      	ldr	r3, [pc, #496]	; (8019ec8 <_vfiprintf_r+0x20c>)
 8019cd6:	429c      	cmp	r4, r3
 8019cd8:	d158      	bne.n	8019d8c <_vfiprintf_r+0xd0>
 8019cda:	6874      	ldr	r4, [r6, #4]
 8019cdc:	89a3      	ldrh	r3, [r4, #12]
 8019cde:	0718      	lsls	r0, r3, #28
 8019ce0:	d55e      	bpl.n	8019da0 <_vfiprintf_r+0xe4>
 8019ce2:	6923      	ldr	r3, [r4, #16]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d05b      	beq.n	8019da0 <_vfiprintf_r+0xe4>
 8019ce8:	2300      	movs	r3, #0
 8019cea:	9309      	str	r3, [sp, #36]	; 0x24
 8019cec:	2320      	movs	r3, #32
 8019cee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019cf2:	2330      	movs	r3, #48	; 0x30
 8019cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019cf8:	9503      	str	r5, [sp, #12]
 8019cfa:	f04f 0b01 	mov.w	fp, #1
 8019cfe:	46b8      	mov	r8, r7
 8019d00:	4645      	mov	r5, r8
 8019d02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019d06:	b10b      	cbz	r3, 8019d0c <_vfiprintf_r+0x50>
 8019d08:	2b25      	cmp	r3, #37	; 0x25
 8019d0a:	d154      	bne.n	8019db6 <_vfiprintf_r+0xfa>
 8019d0c:	ebb8 0a07 	subs.w	sl, r8, r7
 8019d10:	d00b      	beq.n	8019d2a <_vfiprintf_r+0x6e>
 8019d12:	4653      	mov	r3, sl
 8019d14:	463a      	mov	r2, r7
 8019d16:	4621      	mov	r1, r4
 8019d18:	4630      	mov	r0, r6
 8019d1a:	f7ff ffbc 	bl	8019c96 <__sfputs_r>
 8019d1e:	3001      	adds	r0, #1
 8019d20:	f000 80c2 	beq.w	8019ea8 <_vfiprintf_r+0x1ec>
 8019d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d26:	4453      	add	r3, sl
 8019d28:	9309      	str	r3, [sp, #36]	; 0x24
 8019d2a:	f898 3000 	ldrb.w	r3, [r8]
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	f000 80ba 	beq.w	8019ea8 <_vfiprintf_r+0x1ec>
 8019d34:	2300      	movs	r3, #0
 8019d36:	f04f 32ff 	mov.w	r2, #4294967295
 8019d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d3e:	9304      	str	r3, [sp, #16]
 8019d40:	9307      	str	r3, [sp, #28]
 8019d42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d46:	931a      	str	r3, [sp, #104]	; 0x68
 8019d48:	46a8      	mov	r8, r5
 8019d4a:	2205      	movs	r2, #5
 8019d4c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019d50:	485e      	ldr	r0, [pc, #376]	; (8019ecc <_vfiprintf_r+0x210>)
 8019d52:	f7e6 fa4d 	bl	80001f0 <memchr>
 8019d56:	9b04      	ldr	r3, [sp, #16]
 8019d58:	bb78      	cbnz	r0, 8019dba <_vfiprintf_r+0xfe>
 8019d5a:	06d9      	lsls	r1, r3, #27
 8019d5c:	bf44      	itt	mi
 8019d5e:	2220      	movmi	r2, #32
 8019d60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019d64:	071a      	lsls	r2, r3, #28
 8019d66:	bf44      	itt	mi
 8019d68:	222b      	movmi	r2, #43	; 0x2b
 8019d6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019d6e:	782a      	ldrb	r2, [r5, #0]
 8019d70:	2a2a      	cmp	r2, #42	; 0x2a
 8019d72:	d02a      	beq.n	8019dca <_vfiprintf_r+0x10e>
 8019d74:	9a07      	ldr	r2, [sp, #28]
 8019d76:	46a8      	mov	r8, r5
 8019d78:	2000      	movs	r0, #0
 8019d7a:	250a      	movs	r5, #10
 8019d7c:	4641      	mov	r1, r8
 8019d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d82:	3b30      	subs	r3, #48	; 0x30
 8019d84:	2b09      	cmp	r3, #9
 8019d86:	d969      	bls.n	8019e5c <_vfiprintf_r+0x1a0>
 8019d88:	b360      	cbz	r0, 8019de4 <_vfiprintf_r+0x128>
 8019d8a:	e024      	b.n	8019dd6 <_vfiprintf_r+0x11a>
 8019d8c:	4b50      	ldr	r3, [pc, #320]	; (8019ed0 <_vfiprintf_r+0x214>)
 8019d8e:	429c      	cmp	r4, r3
 8019d90:	d101      	bne.n	8019d96 <_vfiprintf_r+0xda>
 8019d92:	68b4      	ldr	r4, [r6, #8]
 8019d94:	e7a2      	b.n	8019cdc <_vfiprintf_r+0x20>
 8019d96:	4b4f      	ldr	r3, [pc, #316]	; (8019ed4 <_vfiprintf_r+0x218>)
 8019d98:	429c      	cmp	r4, r3
 8019d9a:	bf08      	it	eq
 8019d9c:	68f4      	ldreq	r4, [r6, #12]
 8019d9e:	e79d      	b.n	8019cdc <_vfiprintf_r+0x20>
 8019da0:	4621      	mov	r1, r4
 8019da2:	4630      	mov	r0, r6
 8019da4:	f7ff fc64 	bl	8019670 <__swsetup_r>
 8019da8:	2800      	cmp	r0, #0
 8019daa:	d09d      	beq.n	8019ce8 <_vfiprintf_r+0x2c>
 8019dac:	f04f 30ff 	mov.w	r0, #4294967295
 8019db0:	b01d      	add	sp, #116	; 0x74
 8019db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019db6:	46a8      	mov	r8, r5
 8019db8:	e7a2      	b.n	8019d00 <_vfiprintf_r+0x44>
 8019dba:	4a44      	ldr	r2, [pc, #272]	; (8019ecc <_vfiprintf_r+0x210>)
 8019dbc:	1a80      	subs	r0, r0, r2
 8019dbe:	fa0b f000 	lsl.w	r0, fp, r0
 8019dc2:	4318      	orrs	r0, r3
 8019dc4:	9004      	str	r0, [sp, #16]
 8019dc6:	4645      	mov	r5, r8
 8019dc8:	e7be      	b.n	8019d48 <_vfiprintf_r+0x8c>
 8019dca:	9a03      	ldr	r2, [sp, #12]
 8019dcc:	1d11      	adds	r1, r2, #4
 8019dce:	6812      	ldr	r2, [r2, #0]
 8019dd0:	9103      	str	r1, [sp, #12]
 8019dd2:	2a00      	cmp	r2, #0
 8019dd4:	db01      	blt.n	8019dda <_vfiprintf_r+0x11e>
 8019dd6:	9207      	str	r2, [sp, #28]
 8019dd8:	e004      	b.n	8019de4 <_vfiprintf_r+0x128>
 8019dda:	4252      	negs	r2, r2
 8019ddc:	f043 0302 	orr.w	r3, r3, #2
 8019de0:	9207      	str	r2, [sp, #28]
 8019de2:	9304      	str	r3, [sp, #16]
 8019de4:	f898 3000 	ldrb.w	r3, [r8]
 8019de8:	2b2e      	cmp	r3, #46	; 0x2e
 8019dea:	d10e      	bne.n	8019e0a <_vfiprintf_r+0x14e>
 8019dec:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019df0:	2b2a      	cmp	r3, #42	; 0x2a
 8019df2:	d138      	bne.n	8019e66 <_vfiprintf_r+0x1aa>
 8019df4:	9b03      	ldr	r3, [sp, #12]
 8019df6:	1d1a      	adds	r2, r3, #4
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	9203      	str	r2, [sp, #12]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	bfb8      	it	lt
 8019e00:	f04f 33ff 	movlt.w	r3, #4294967295
 8019e04:	f108 0802 	add.w	r8, r8, #2
 8019e08:	9305      	str	r3, [sp, #20]
 8019e0a:	4d33      	ldr	r5, [pc, #204]	; (8019ed8 <_vfiprintf_r+0x21c>)
 8019e0c:	f898 1000 	ldrb.w	r1, [r8]
 8019e10:	2203      	movs	r2, #3
 8019e12:	4628      	mov	r0, r5
 8019e14:	f7e6 f9ec 	bl	80001f0 <memchr>
 8019e18:	b140      	cbz	r0, 8019e2c <_vfiprintf_r+0x170>
 8019e1a:	2340      	movs	r3, #64	; 0x40
 8019e1c:	1b40      	subs	r0, r0, r5
 8019e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8019e22:	9b04      	ldr	r3, [sp, #16]
 8019e24:	4303      	orrs	r3, r0
 8019e26:	f108 0801 	add.w	r8, r8, #1
 8019e2a:	9304      	str	r3, [sp, #16]
 8019e2c:	f898 1000 	ldrb.w	r1, [r8]
 8019e30:	482a      	ldr	r0, [pc, #168]	; (8019edc <_vfiprintf_r+0x220>)
 8019e32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e36:	2206      	movs	r2, #6
 8019e38:	f108 0701 	add.w	r7, r8, #1
 8019e3c:	f7e6 f9d8 	bl	80001f0 <memchr>
 8019e40:	2800      	cmp	r0, #0
 8019e42:	d037      	beq.n	8019eb4 <_vfiprintf_r+0x1f8>
 8019e44:	4b26      	ldr	r3, [pc, #152]	; (8019ee0 <_vfiprintf_r+0x224>)
 8019e46:	bb1b      	cbnz	r3, 8019e90 <_vfiprintf_r+0x1d4>
 8019e48:	9b03      	ldr	r3, [sp, #12]
 8019e4a:	3307      	adds	r3, #7
 8019e4c:	f023 0307 	bic.w	r3, r3, #7
 8019e50:	3308      	adds	r3, #8
 8019e52:	9303      	str	r3, [sp, #12]
 8019e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e56:	444b      	add	r3, r9
 8019e58:	9309      	str	r3, [sp, #36]	; 0x24
 8019e5a:	e750      	b.n	8019cfe <_vfiprintf_r+0x42>
 8019e5c:	fb05 3202 	mla	r2, r5, r2, r3
 8019e60:	2001      	movs	r0, #1
 8019e62:	4688      	mov	r8, r1
 8019e64:	e78a      	b.n	8019d7c <_vfiprintf_r+0xc0>
 8019e66:	2300      	movs	r3, #0
 8019e68:	f108 0801 	add.w	r8, r8, #1
 8019e6c:	9305      	str	r3, [sp, #20]
 8019e6e:	4619      	mov	r1, r3
 8019e70:	250a      	movs	r5, #10
 8019e72:	4640      	mov	r0, r8
 8019e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e78:	3a30      	subs	r2, #48	; 0x30
 8019e7a:	2a09      	cmp	r2, #9
 8019e7c:	d903      	bls.n	8019e86 <_vfiprintf_r+0x1ca>
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d0c3      	beq.n	8019e0a <_vfiprintf_r+0x14e>
 8019e82:	9105      	str	r1, [sp, #20]
 8019e84:	e7c1      	b.n	8019e0a <_vfiprintf_r+0x14e>
 8019e86:	fb05 2101 	mla	r1, r5, r1, r2
 8019e8a:	2301      	movs	r3, #1
 8019e8c:	4680      	mov	r8, r0
 8019e8e:	e7f0      	b.n	8019e72 <_vfiprintf_r+0x1b6>
 8019e90:	ab03      	add	r3, sp, #12
 8019e92:	9300      	str	r3, [sp, #0]
 8019e94:	4622      	mov	r2, r4
 8019e96:	4b13      	ldr	r3, [pc, #76]	; (8019ee4 <_vfiprintf_r+0x228>)
 8019e98:	a904      	add	r1, sp, #16
 8019e9a:	4630      	mov	r0, r6
 8019e9c:	f3af 8000 	nop.w
 8019ea0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019ea4:	4681      	mov	r9, r0
 8019ea6:	d1d5      	bne.n	8019e54 <_vfiprintf_r+0x198>
 8019ea8:	89a3      	ldrh	r3, [r4, #12]
 8019eaa:	065b      	lsls	r3, r3, #25
 8019eac:	f53f af7e 	bmi.w	8019dac <_vfiprintf_r+0xf0>
 8019eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019eb2:	e77d      	b.n	8019db0 <_vfiprintf_r+0xf4>
 8019eb4:	ab03      	add	r3, sp, #12
 8019eb6:	9300      	str	r3, [sp, #0]
 8019eb8:	4622      	mov	r2, r4
 8019eba:	4b0a      	ldr	r3, [pc, #40]	; (8019ee4 <_vfiprintf_r+0x228>)
 8019ebc:	a904      	add	r1, sp, #16
 8019ebe:	4630      	mov	r0, r6
 8019ec0:	f000 f888 	bl	8019fd4 <_printf_i>
 8019ec4:	e7ec      	b.n	8019ea0 <_vfiprintf_r+0x1e4>
 8019ec6:	bf00      	nop
 8019ec8:	0801e3a8 	.word	0x0801e3a8
 8019ecc:	0801e3e8 	.word	0x0801e3e8
 8019ed0:	0801e3c8 	.word	0x0801e3c8
 8019ed4:	0801e388 	.word	0x0801e388
 8019ed8:	0801e3ee 	.word	0x0801e3ee
 8019edc:	0801e3f2 	.word	0x0801e3f2
 8019ee0:	00000000 	.word	0x00000000
 8019ee4:	08019c97 	.word	0x08019c97

08019ee8 <_printf_common>:
 8019ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019eec:	4691      	mov	r9, r2
 8019eee:	461f      	mov	r7, r3
 8019ef0:	688a      	ldr	r2, [r1, #8]
 8019ef2:	690b      	ldr	r3, [r1, #16]
 8019ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019ef8:	4293      	cmp	r3, r2
 8019efa:	bfb8      	it	lt
 8019efc:	4613      	movlt	r3, r2
 8019efe:	f8c9 3000 	str.w	r3, [r9]
 8019f02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019f06:	4606      	mov	r6, r0
 8019f08:	460c      	mov	r4, r1
 8019f0a:	b112      	cbz	r2, 8019f12 <_printf_common+0x2a>
 8019f0c:	3301      	adds	r3, #1
 8019f0e:	f8c9 3000 	str.w	r3, [r9]
 8019f12:	6823      	ldr	r3, [r4, #0]
 8019f14:	0699      	lsls	r1, r3, #26
 8019f16:	bf42      	ittt	mi
 8019f18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019f1c:	3302      	addmi	r3, #2
 8019f1e:	f8c9 3000 	strmi.w	r3, [r9]
 8019f22:	6825      	ldr	r5, [r4, #0]
 8019f24:	f015 0506 	ands.w	r5, r5, #6
 8019f28:	d107      	bne.n	8019f3a <_printf_common+0x52>
 8019f2a:	f104 0a19 	add.w	sl, r4, #25
 8019f2e:	68e3      	ldr	r3, [r4, #12]
 8019f30:	f8d9 2000 	ldr.w	r2, [r9]
 8019f34:	1a9b      	subs	r3, r3, r2
 8019f36:	42ab      	cmp	r3, r5
 8019f38:	dc28      	bgt.n	8019f8c <_printf_common+0xa4>
 8019f3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019f3e:	6822      	ldr	r2, [r4, #0]
 8019f40:	3300      	adds	r3, #0
 8019f42:	bf18      	it	ne
 8019f44:	2301      	movne	r3, #1
 8019f46:	0692      	lsls	r2, r2, #26
 8019f48:	d42d      	bmi.n	8019fa6 <_printf_common+0xbe>
 8019f4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019f4e:	4639      	mov	r1, r7
 8019f50:	4630      	mov	r0, r6
 8019f52:	47c0      	blx	r8
 8019f54:	3001      	adds	r0, #1
 8019f56:	d020      	beq.n	8019f9a <_printf_common+0xb2>
 8019f58:	6823      	ldr	r3, [r4, #0]
 8019f5a:	68e5      	ldr	r5, [r4, #12]
 8019f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8019f60:	f003 0306 	and.w	r3, r3, #6
 8019f64:	2b04      	cmp	r3, #4
 8019f66:	bf08      	it	eq
 8019f68:	1aad      	subeq	r5, r5, r2
 8019f6a:	68a3      	ldr	r3, [r4, #8]
 8019f6c:	6922      	ldr	r2, [r4, #16]
 8019f6e:	bf0c      	ite	eq
 8019f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019f74:	2500      	movne	r5, #0
 8019f76:	4293      	cmp	r3, r2
 8019f78:	bfc4      	itt	gt
 8019f7a:	1a9b      	subgt	r3, r3, r2
 8019f7c:	18ed      	addgt	r5, r5, r3
 8019f7e:	f04f 0900 	mov.w	r9, #0
 8019f82:	341a      	adds	r4, #26
 8019f84:	454d      	cmp	r5, r9
 8019f86:	d11a      	bne.n	8019fbe <_printf_common+0xd6>
 8019f88:	2000      	movs	r0, #0
 8019f8a:	e008      	b.n	8019f9e <_printf_common+0xb6>
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	4652      	mov	r2, sl
 8019f90:	4639      	mov	r1, r7
 8019f92:	4630      	mov	r0, r6
 8019f94:	47c0      	blx	r8
 8019f96:	3001      	adds	r0, #1
 8019f98:	d103      	bne.n	8019fa2 <_printf_common+0xba>
 8019f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8019f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fa2:	3501      	adds	r5, #1
 8019fa4:	e7c3      	b.n	8019f2e <_printf_common+0x46>
 8019fa6:	18e1      	adds	r1, r4, r3
 8019fa8:	1c5a      	adds	r2, r3, #1
 8019faa:	2030      	movs	r0, #48	; 0x30
 8019fac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019fb0:	4422      	add	r2, r4
 8019fb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019fb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019fba:	3302      	adds	r3, #2
 8019fbc:	e7c5      	b.n	8019f4a <_printf_common+0x62>
 8019fbe:	2301      	movs	r3, #1
 8019fc0:	4622      	mov	r2, r4
 8019fc2:	4639      	mov	r1, r7
 8019fc4:	4630      	mov	r0, r6
 8019fc6:	47c0      	blx	r8
 8019fc8:	3001      	adds	r0, #1
 8019fca:	d0e6      	beq.n	8019f9a <_printf_common+0xb2>
 8019fcc:	f109 0901 	add.w	r9, r9, #1
 8019fd0:	e7d8      	b.n	8019f84 <_printf_common+0x9c>
	...

08019fd4 <_printf_i>:
 8019fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019fd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8019fdc:	460c      	mov	r4, r1
 8019fde:	7e09      	ldrb	r1, [r1, #24]
 8019fe0:	b085      	sub	sp, #20
 8019fe2:	296e      	cmp	r1, #110	; 0x6e
 8019fe4:	4617      	mov	r7, r2
 8019fe6:	4606      	mov	r6, r0
 8019fe8:	4698      	mov	r8, r3
 8019fea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019fec:	f000 80b3 	beq.w	801a156 <_printf_i+0x182>
 8019ff0:	d822      	bhi.n	801a038 <_printf_i+0x64>
 8019ff2:	2963      	cmp	r1, #99	; 0x63
 8019ff4:	d036      	beq.n	801a064 <_printf_i+0x90>
 8019ff6:	d80a      	bhi.n	801a00e <_printf_i+0x3a>
 8019ff8:	2900      	cmp	r1, #0
 8019ffa:	f000 80b9 	beq.w	801a170 <_printf_i+0x19c>
 8019ffe:	2958      	cmp	r1, #88	; 0x58
 801a000:	f000 8083 	beq.w	801a10a <_printf_i+0x136>
 801a004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a008:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a00c:	e032      	b.n	801a074 <_printf_i+0xa0>
 801a00e:	2964      	cmp	r1, #100	; 0x64
 801a010:	d001      	beq.n	801a016 <_printf_i+0x42>
 801a012:	2969      	cmp	r1, #105	; 0x69
 801a014:	d1f6      	bne.n	801a004 <_printf_i+0x30>
 801a016:	6820      	ldr	r0, [r4, #0]
 801a018:	6813      	ldr	r3, [r2, #0]
 801a01a:	0605      	lsls	r5, r0, #24
 801a01c:	f103 0104 	add.w	r1, r3, #4
 801a020:	d52a      	bpl.n	801a078 <_printf_i+0xa4>
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	6011      	str	r1, [r2, #0]
 801a026:	2b00      	cmp	r3, #0
 801a028:	da03      	bge.n	801a032 <_printf_i+0x5e>
 801a02a:	222d      	movs	r2, #45	; 0x2d
 801a02c:	425b      	negs	r3, r3
 801a02e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a032:	486f      	ldr	r0, [pc, #444]	; (801a1f0 <_printf_i+0x21c>)
 801a034:	220a      	movs	r2, #10
 801a036:	e039      	b.n	801a0ac <_printf_i+0xd8>
 801a038:	2973      	cmp	r1, #115	; 0x73
 801a03a:	f000 809d 	beq.w	801a178 <_printf_i+0x1a4>
 801a03e:	d808      	bhi.n	801a052 <_printf_i+0x7e>
 801a040:	296f      	cmp	r1, #111	; 0x6f
 801a042:	d020      	beq.n	801a086 <_printf_i+0xb2>
 801a044:	2970      	cmp	r1, #112	; 0x70
 801a046:	d1dd      	bne.n	801a004 <_printf_i+0x30>
 801a048:	6823      	ldr	r3, [r4, #0]
 801a04a:	f043 0320 	orr.w	r3, r3, #32
 801a04e:	6023      	str	r3, [r4, #0]
 801a050:	e003      	b.n	801a05a <_printf_i+0x86>
 801a052:	2975      	cmp	r1, #117	; 0x75
 801a054:	d017      	beq.n	801a086 <_printf_i+0xb2>
 801a056:	2978      	cmp	r1, #120	; 0x78
 801a058:	d1d4      	bne.n	801a004 <_printf_i+0x30>
 801a05a:	2378      	movs	r3, #120	; 0x78
 801a05c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a060:	4864      	ldr	r0, [pc, #400]	; (801a1f4 <_printf_i+0x220>)
 801a062:	e055      	b.n	801a110 <_printf_i+0x13c>
 801a064:	6813      	ldr	r3, [r2, #0]
 801a066:	1d19      	adds	r1, r3, #4
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	6011      	str	r1, [r2, #0]
 801a06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a074:	2301      	movs	r3, #1
 801a076:	e08c      	b.n	801a192 <_printf_i+0x1be>
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	6011      	str	r1, [r2, #0]
 801a07c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a080:	bf18      	it	ne
 801a082:	b21b      	sxthne	r3, r3
 801a084:	e7cf      	b.n	801a026 <_printf_i+0x52>
 801a086:	6813      	ldr	r3, [r2, #0]
 801a088:	6825      	ldr	r5, [r4, #0]
 801a08a:	1d18      	adds	r0, r3, #4
 801a08c:	6010      	str	r0, [r2, #0]
 801a08e:	0628      	lsls	r0, r5, #24
 801a090:	d501      	bpl.n	801a096 <_printf_i+0xc2>
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	e002      	b.n	801a09c <_printf_i+0xc8>
 801a096:	0668      	lsls	r0, r5, #25
 801a098:	d5fb      	bpl.n	801a092 <_printf_i+0xbe>
 801a09a:	881b      	ldrh	r3, [r3, #0]
 801a09c:	4854      	ldr	r0, [pc, #336]	; (801a1f0 <_printf_i+0x21c>)
 801a09e:	296f      	cmp	r1, #111	; 0x6f
 801a0a0:	bf14      	ite	ne
 801a0a2:	220a      	movne	r2, #10
 801a0a4:	2208      	moveq	r2, #8
 801a0a6:	2100      	movs	r1, #0
 801a0a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a0ac:	6865      	ldr	r5, [r4, #4]
 801a0ae:	60a5      	str	r5, [r4, #8]
 801a0b0:	2d00      	cmp	r5, #0
 801a0b2:	f2c0 8095 	blt.w	801a1e0 <_printf_i+0x20c>
 801a0b6:	6821      	ldr	r1, [r4, #0]
 801a0b8:	f021 0104 	bic.w	r1, r1, #4
 801a0bc:	6021      	str	r1, [r4, #0]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d13d      	bne.n	801a13e <_printf_i+0x16a>
 801a0c2:	2d00      	cmp	r5, #0
 801a0c4:	f040 808e 	bne.w	801a1e4 <_printf_i+0x210>
 801a0c8:	4665      	mov	r5, ip
 801a0ca:	2a08      	cmp	r2, #8
 801a0cc:	d10b      	bne.n	801a0e6 <_printf_i+0x112>
 801a0ce:	6823      	ldr	r3, [r4, #0]
 801a0d0:	07db      	lsls	r3, r3, #31
 801a0d2:	d508      	bpl.n	801a0e6 <_printf_i+0x112>
 801a0d4:	6923      	ldr	r3, [r4, #16]
 801a0d6:	6862      	ldr	r2, [r4, #4]
 801a0d8:	429a      	cmp	r2, r3
 801a0da:	bfde      	ittt	le
 801a0dc:	2330      	movle	r3, #48	; 0x30
 801a0de:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a0e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a0e6:	ebac 0305 	sub.w	r3, ip, r5
 801a0ea:	6123      	str	r3, [r4, #16]
 801a0ec:	f8cd 8000 	str.w	r8, [sp]
 801a0f0:	463b      	mov	r3, r7
 801a0f2:	aa03      	add	r2, sp, #12
 801a0f4:	4621      	mov	r1, r4
 801a0f6:	4630      	mov	r0, r6
 801a0f8:	f7ff fef6 	bl	8019ee8 <_printf_common>
 801a0fc:	3001      	adds	r0, #1
 801a0fe:	d14d      	bne.n	801a19c <_printf_i+0x1c8>
 801a100:	f04f 30ff 	mov.w	r0, #4294967295
 801a104:	b005      	add	sp, #20
 801a106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a10a:	4839      	ldr	r0, [pc, #228]	; (801a1f0 <_printf_i+0x21c>)
 801a10c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a110:	6813      	ldr	r3, [r2, #0]
 801a112:	6821      	ldr	r1, [r4, #0]
 801a114:	1d1d      	adds	r5, r3, #4
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	6015      	str	r5, [r2, #0]
 801a11a:	060a      	lsls	r2, r1, #24
 801a11c:	d50b      	bpl.n	801a136 <_printf_i+0x162>
 801a11e:	07ca      	lsls	r2, r1, #31
 801a120:	bf44      	itt	mi
 801a122:	f041 0120 	orrmi.w	r1, r1, #32
 801a126:	6021      	strmi	r1, [r4, #0]
 801a128:	b91b      	cbnz	r3, 801a132 <_printf_i+0x15e>
 801a12a:	6822      	ldr	r2, [r4, #0]
 801a12c:	f022 0220 	bic.w	r2, r2, #32
 801a130:	6022      	str	r2, [r4, #0]
 801a132:	2210      	movs	r2, #16
 801a134:	e7b7      	b.n	801a0a6 <_printf_i+0xd2>
 801a136:	064d      	lsls	r5, r1, #25
 801a138:	bf48      	it	mi
 801a13a:	b29b      	uxthmi	r3, r3
 801a13c:	e7ef      	b.n	801a11e <_printf_i+0x14a>
 801a13e:	4665      	mov	r5, ip
 801a140:	fbb3 f1f2 	udiv	r1, r3, r2
 801a144:	fb02 3311 	mls	r3, r2, r1, r3
 801a148:	5cc3      	ldrb	r3, [r0, r3]
 801a14a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a14e:	460b      	mov	r3, r1
 801a150:	2900      	cmp	r1, #0
 801a152:	d1f5      	bne.n	801a140 <_printf_i+0x16c>
 801a154:	e7b9      	b.n	801a0ca <_printf_i+0xf6>
 801a156:	6813      	ldr	r3, [r2, #0]
 801a158:	6825      	ldr	r5, [r4, #0]
 801a15a:	6961      	ldr	r1, [r4, #20]
 801a15c:	1d18      	adds	r0, r3, #4
 801a15e:	6010      	str	r0, [r2, #0]
 801a160:	0628      	lsls	r0, r5, #24
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	d501      	bpl.n	801a16a <_printf_i+0x196>
 801a166:	6019      	str	r1, [r3, #0]
 801a168:	e002      	b.n	801a170 <_printf_i+0x19c>
 801a16a:	066a      	lsls	r2, r5, #25
 801a16c:	d5fb      	bpl.n	801a166 <_printf_i+0x192>
 801a16e:	8019      	strh	r1, [r3, #0]
 801a170:	2300      	movs	r3, #0
 801a172:	6123      	str	r3, [r4, #16]
 801a174:	4665      	mov	r5, ip
 801a176:	e7b9      	b.n	801a0ec <_printf_i+0x118>
 801a178:	6813      	ldr	r3, [r2, #0]
 801a17a:	1d19      	adds	r1, r3, #4
 801a17c:	6011      	str	r1, [r2, #0]
 801a17e:	681d      	ldr	r5, [r3, #0]
 801a180:	6862      	ldr	r2, [r4, #4]
 801a182:	2100      	movs	r1, #0
 801a184:	4628      	mov	r0, r5
 801a186:	f7e6 f833 	bl	80001f0 <memchr>
 801a18a:	b108      	cbz	r0, 801a190 <_printf_i+0x1bc>
 801a18c:	1b40      	subs	r0, r0, r5
 801a18e:	6060      	str	r0, [r4, #4]
 801a190:	6863      	ldr	r3, [r4, #4]
 801a192:	6123      	str	r3, [r4, #16]
 801a194:	2300      	movs	r3, #0
 801a196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a19a:	e7a7      	b.n	801a0ec <_printf_i+0x118>
 801a19c:	6923      	ldr	r3, [r4, #16]
 801a19e:	462a      	mov	r2, r5
 801a1a0:	4639      	mov	r1, r7
 801a1a2:	4630      	mov	r0, r6
 801a1a4:	47c0      	blx	r8
 801a1a6:	3001      	adds	r0, #1
 801a1a8:	d0aa      	beq.n	801a100 <_printf_i+0x12c>
 801a1aa:	6823      	ldr	r3, [r4, #0]
 801a1ac:	079b      	lsls	r3, r3, #30
 801a1ae:	d413      	bmi.n	801a1d8 <_printf_i+0x204>
 801a1b0:	68e0      	ldr	r0, [r4, #12]
 801a1b2:	9b03      	ldr	r3, [sp, #12]
 801a1b4:	4298      	cmp	r0, r3
 801a1b6:	bfb8      	it	lt
 801a1b8:	4618      	movlt	r0, r3
 801a1ba:	e7a3      	b.n	801a104 <_printf_i+0x130>
 801a1bc:	2301      	movs	r3, #1
 801a1be:	464a      	mov	r2, r9
 801a1c0:	4639      	mov	r1, r7
 801a1c2:	4630      	mov	r0, r6
 801a1c4:	47c0      	blx	r8
 801a1c6:	3001      	adds	r0, #1
 801a1c8:	d09a      	beq.n	801a100 <_printf_i+0x12c>
 801a1ca:	3501      	adds	r5, #1
 801a1cc:	68e3      	ldr	r3, [r4, #12]
 801a1ce:	9a03      	ldr	r2, [sp, #12]
 801a1d0:	1a9b      	subs	r3, r3, r2
 801a1d2:	42ab      	cmp	r3, r5
 801a1d4:	dcf2      	bgt.n	801a1bc <_printf_i+0x1e8>
 801a1d6:	e7eb      	b.n	801a1b0 <_printf_i+0x1dc>
 801a1d8:	2500      	movs	r5, #0
 801a1da:	f104 0919 	add.w	r9, r4, #25
 801a1de:	e7f5      	b.n	801a1cc <_printf_i+0x1f8>
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d1ac      	bne.n	801a13e <_printf_i+0x16a>
 801a1e4:	7803      	ldrb	r3, [r0, #0]
 801a1e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a1ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a1ee:	e76c      	b.n	801a0ca <_printf_i+0xf6>
 801a1f0:	0801e3f9 	.word	0x0801e3f9
 801a1f4:	0801e40a 	.word	0x0801e40a

0801a1f8 <_sbrk_r>:
 801a1f8:	b538      	push	{r3, r4, r5, lr}
 801a1fa:	4c06      	ldr	r4, [pc, #24]	; (801a214 <_sbrk_r+0x1c>)
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	4605      	mov	r5, r0
 801a200:	4608      	mov	r0, r1
 801a202:	6023      	str	r3, [r4, #0]
 801a204:	f7e6 feae 	bl	8000f64 <_sbrk>
 801a208:	1c43      	adds	r3, r0, #1
 801a20a:	d102      	bne.n	801a212 <_sbrk_r+0x1a>
 801a20c:	6823      	ldr	r3, [r4, #0]
 801a20e:	b103      	cbz	r3, 801a212 <_sbrk_r+0x1a>
 801a210:	602b      	str	r3, [r5, #0]
 801a212:	bd38      	pop	{r3, r4, r5, pc}
 801a214:	2000b178 	.word	0x2000b178

0801a218 <__sread>:
 801a218:	b510      	push	{r4, lr}
 801a21a:	460c      	mov	r4, r1
 801a21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a220:	f000 f896 	bl	801a350 <_read_r>
 801a224:	2800      	cmp	r0, #0
 801a226:	bfab      	itete	ge
 801a228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a22a:	89a3      	ldrhlt	r3, [r4, #12]
 801a22c:	181b      	addge	r3, r3, r0
 801a22e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a232:	bfac      	ite	ge
 801a234:	6563      	strge	r3, [r4, #84]	; 0x54
 801a236:	81a3      	strhlt	r3, [r4, #12]
 801a238:	bd10      	pop	{r4, pc}

0801a23a <__swrite>:
 801a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a23e:	461f      	mov	r7, r3
 801a240:	898b      	ldrh	r3, [r1, #12]
 801a242:	05db      	lsls	r3, r3, #23
 801a244:	4605      	mov	r5, r0
 801a246:	460c      	mov	r4, r1
 801a248:	4616      	mov	r6, r2
 801a24a:	d505      	bpl.n	801a258 <__swrite+0x1e>
 801a24c:	2302      	movs	r3, #2
 801a24e:	2200      	movs	r2, #0
 801a250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a254:	f000 f868 	bl	801a328 <_lseek_r>
 801a258:	89a3      	ldrh	r3, [r4, #12]
 801a25a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a25e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a262:	81a3      	strh	r3, [r4, #12]
 801a264:	4632      	mov	r2, r6
 801a266:	463b      	mov	r3, r7
 801a268:	4628      	mov	r0, r5
 801a26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a26e:	f000 b817 	b.w	801a2a0 <_write_r>

0801a272 <__sseek>:
 801a272:	b510      	push	{r4, lr}
 801a274:	460c      	mov	r4, r1
 801a276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a27a:	f000 f855 	bl	801a328 <_lseek_r>
 801a27e:	1c43      	adds	r3, r0, #1
 801a280:	89a3      	ldrh	r3, [r4, #12]
 801a282:	bf15      	itete	ne
 801a284:	6560      	strne	r0, [r4, #84]	; 0x54
 801a286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a28a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a28e:	81a3      	strheq	r3, [r4, #12]
 801a290:	bf18      	it	ne
 801a292:	81a3      	strhne	r3, [r4, #12]
 801a294:	bd10      	pop	{r4, pc}

0801a296 <__sclose>:
 801a296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a29a:	f000 b813 	b.w	801a2c4 <_close_r>
	...

0801a2a0 <_write_r>:
 801a2a0:	b538      	push	{r3, r4, r5, lr}
 801a2a2:	4c07      	ldr	r4, [pc, #28]	; (801a2c0 <_write_r+0x20>)
 801a2a4:	4605      	mov	r5, r0
 801a2a6:	4608      	mov	r0, r1
 801a2a8:	4611      	mov	r1, r2
 801a2aa:	2200      	movs	r2, #0
 801a2ac:	6022      	str	r2, [r4, #0]
 801a2ae:	461a      	mov	r2, r3
 801a2b0:	f7e6 fdfa 	bl	8000ea8 <_write>
 801a2b4:	1c43      	adds	r3, r0, #1
 801a2b6:	d102      	bne.n	801a2be <_write_r+0x1e>
 801a2b8:	6823      	ldr	r3, [r4, #0]
 801a2ba:	b103      	cbz	r3, 801a2be <_write_r+0x1e>
 801a2bc:	602b      	str	r3, [r5, #0]
 801a2be:	bd38      	pop	{r3, r4, r5, pc}
 801a2c0:	2000b178 	.word	0x2000b178

0801a2c4 <_close_r>:
 801a2c4:	b538      	push	{r3, r4, r5, lr}
 801a2c6:	4c06      	ldr	r4, [pc, #24]	; (801a2e0 <_close_r+0x1c>)
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	4605      	mov	r5, r0
 801a2cc:	4608      	mov	r0, r1
 801a2ce:	6023      	str	r3, [r4, #0]
 801a2d0:	f7e6 fe14 	bl	8000efc <_close>
 801a2d4:	1c43      	adds	r3, r0, #1
 801a2d6:	d102      	bne.n	801a2de <_close_r+0x1a>
 801a2d8:	6823      	ldr	r3, [r4, #0]
 801a2da:	b103      	cbz	r3, 801a2de <_close_r+0x1a>
 801a2dc:	602b      	str	r3, [r5, #0]
 801a2de:	bd38      	pop	{r3, r4, r5, pc}
 801a2e0:	2000b178 	.word	0x2000b178

0801a2e4 <_fstat_r>:
 801a2e4:	b538      	push	{r3, r4, r5, lr}
 801a2e6:	4c07      	ldr	r4, [pc, #28]	; (801a304 <_fstat_r+0x20>)
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	4605      	mov	r5, r0
 801a2ec:	4608      	mov	r0, r1
 801a2ee:	4611      	mov	r1, r2
 801a2f0:	6023      	str	r3, [r4, #0]
 801a2f2:	f7e6 fe0f 	bl	8000f14 <_fstat>
 801a2f6:	1c43      	adds	r3, r0, #1
 801a2f8:	d102      	bne.n	801a300 <_fstat_r+0x1c>
 801a2fa:	6823      	ldr	r3, [r4, #0]
 801a2fc:	b103      	cbz	r3, 801a300 <_fstat_r+0x1c>
 801a2fe:	602b      	str	r3, [r5, #0]
 801a300:	bd38      	pop	{r3, r4, r5, pc}
 801a302:	bf00      	nop
 801a304:	2000b178 	.word	0x2000b178

0801a308 <_isatty_r>:
 801a308:	b538      	push	{r3, r4, r5, lr}
 801a30a:	4c06      	ldr	r4, [pc, #24]	; (801a324 <_isatty_r+0x1c>)
 801a30c:	2300      	movs	r3, #0
 801a30e:	4605      	mov	r5, r0
 801a310:	4608      	mov	r0, r1
 801a312:	6023      	str	r3, [r4, #0]
 801a314:	f7e6 fe0e 	bl	8000f34 <_isatty>
 801a318:	1c43      	adds	r3, r0, #1
 801a31a:	d102      	bne.n	801a322 <_isatty_r+0x1a>
 801a31c:	6823      	ldr	r3, [r4, #0]
 801a31e:	b103      	cbz	r3, 801a322 <_isatty_r+0x1a>
 801a320:	602b      	str	r3, [r5, #0]
 801a322:	bd38      	pop	{r3, r4, r5, pc}
 801a324:	2000b178 	.word	0x2000b178

0801a328 <_lseek_r>:
 801a328:	b538      	push	{r3, r4, r5, lr}
 801a32a:	4c07      	ldr	r4, [pc, #28]	; (801a348 <_lseek_r+0x20>)
 801a32c:	4605      	mov	r5, r0
 801a32e:	4608      	mov	r0, r1
 801a330:	4611      	mov	r1, r2
 801a332:	2200      	movs	r2, #0
 801a334:	6022      	str	r2, [r4, #0]
 801a336:	461a      	mov	r2, r3
 801a338:	f7e6 fe07 	bl	8000f4a <_lseek>
 801a33c:	1c43      	adds	r3, r0, #1
 801a33e:	d102      	bne.n	801a346 <_lseek_r+0x1e>
 801a340:	6823      	ldr	r3, [r4, #0]
 801a342:	b103      	cbz	r3, 801a346 <_lseek_r+0x1e>
 801a344:	602b      	str	r3, [r5, #0]
 801a346:	bd38      	pop	{r3, r4, r5, pc}
 801a348:	2000b178 	.word	0x2000b178

0801a34c <__malloc_lock>:
 801a34c:	4770      	bx	lr

0801a34e <__malloc_unlock>:
 801a34e:	4770      	bx	lr

0801a350 <_read_r>:
 801a350:	b538      	push	{r3, r4, r5, lr}
 801a352:	4c07      	ldr	r4, [pc, #28]	; (801a370 <_read_r+0x20>)
 801a354:	4605      	mov	r5, r0
 801a356:	4608      	mov	r0, r1
 801a358:	4611      	mov	r1, r2
 801a35a:	2200      	movs	r2, #0
 801a35c:	6022      	str	r2, [r4, #0]
 801a35e:	461a      	mov	r2, r3
 801a360:	f7e6 fd84 	bl	8000e6c <_read>
 801a364:	1c43      	adds	r3, r0, #1
 801a366:	d102      	bne.n	801a36e <_read_r+0x1e>
 801a368:	6823      	ldr	r3, [r4, #0]
 801a36a:	b103      	cbz	r3, 801a36e <_read_r+0x1e>
 801a36c:	602b      	str	r3, [r5, #0]
 801a36e:	bd38      	pop	{r3, r4, r5, pc}
 801a370:	2000b178 	.word	0x2000b178

0801a374 <_init>:
 801a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a376:	bf00      	nop
 801a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a37a:	bc08      	pop	{r3}
 801a37c:	469e      	mov	lr, r3
 801a37e:	4770      	bx	lr

0801a380 <_fini>:
 801a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a382:	bf00      	nop
 801a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a386:	bc08      	pop	{r3}
 801a388:	469e      	mov	lr, r3
 801a38a:	4770      	bx	lr
